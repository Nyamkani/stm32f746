
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024dc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003be8  08024f98  08024f98  00034f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028b80  08028b80  000401e4  2**0
                  CONTENTS
  4 .ARM          00000008  08028b80  08028b80  00038b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028b88  08028b88  000401e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08028b88  08028b88  00038b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08028b90  08028b90  00038b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08028b98  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a4  08028c3c  000400a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000144  08028cdc  00040144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000bfb8  200001e4  08028d7c  000401e4  2**2
                  ALLOC
 12 ._user_heap_stack 00006004  2000c19c  08028d7c  0004c19c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000401e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000a58f9  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000e5a3  00000000  00000000  000e5b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004898  00000000  00000000  000f40b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004648  00000000  00000000  000f8948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00036985  00000000  00000000  000fcf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00031f0d  00000000  00000000  00133915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00165822  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00014f34  00000000  00000000  00165874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08024f7c 	.word	0x08024f7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08024f7c 	.word	0x08024f7c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <_Z6vprintPKcSt9__va_list>:

static uint8_t str1_;
static uint8_t str3_;

void vprint(const char *fmt, va_list argp)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0b4      	sub	sp, #208	; 0xd0
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f023 f8ce 	bl	80240a0 <vsiprintf>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bfcc      	ite	gt
 8000f0a:	2301      	movgt	r3, #1
 8000f0c:	2300      	movle	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00c      	beq.n	8000f2e <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	  HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 10); // send message via UART
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff f979 	bl	8000210 <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f107 0108 	add.w	r1, r7, #8
 8000f26:	230a      	movs	r3, #10
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <_Z6vprintPKcSt9__va_list+0x4c>)
 8000f2a:	f00e f899 	bl	800f060 <HAL_UART_Transmit>
    }
}
 8000f2e:	bf00      	nop
 8000f30:	37d0      	adds	r7, #208	; 0xd0
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000690 	.word	0x20000690

08000f3c <_Z7DprintfPKcz>:

void Dprintf(const char *fmt, ...) // custom printf() function
{
 8000f3c:	b40f      	push	{r0, r1, r2, r3}
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	6938      	ldr	r0, [r7, #16]
 8000f4e:	f7ff ffcd 	bl	8000eec <_Z6vprintPKcSt9__va_list>
    va_end(argp);
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f5c:	b004      	add	sp, #16
 8000f5e:	4770      	bx	lr

08000f60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_UART_RxCpltCallback+0x50>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d110      	bne.n	8000f94 <HAL_UART_RxCpltCallback+0x34>
	{
		HAL_NVIC_DisableIRQ(USART1_IRQn); //Rx Callback 함수 Disable
 8000f72:	2025      	movs	r0, #37	; 0x25
 8000f74:	f00a fed2 	bl	800bd1c <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit_IT(&huart1, &str1_, sizeof(str1_));
 8000f78:	2201      	movs	r2, #1
 8000f7a:	490e      	ldr	r1, [pc, #56]	; (8000fb4 <HAL_UART_RxCpltCallback+0x54>)
 8000f7c:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <HAL_UART_RxCpltCallback+0x58>)
 8000f7e:	f00e f9b7 	bl	800f2f0 <HAL_UART_Transmit_IT>
		HAL_NVIC_EnableIRQ(USART1_IRQn);  //Rx callback 함수 enable
 8000f82:	2025      	movs	r0, #37	; 0x25
 8000f84:	f00a febc 	bl	800bd00 <HAL_NVIC_EnableIRQ>
		HAL_UART_Receive_IT(&huart1, &str1_, sizeof(str1_));
 8000f88:	2201      	movs	r2, #1
 8000f8a:	490a      	ldr	r1, [pc, #40]	; (8000fb4 <HAL_UART_RxCpltCallback+0x54>)
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <HAL_UART_RxCpltCallback+0x58>)
 8000f8e:	f00e fa0d 	bl	800f3ac <HAL_UART_Receive_IT>
	{
		//HAL_NVIC_DisableIRQ(USART3_IRQn); //Rx Callback 함수 Disable
		//HAL_NVIC_EnableIRQ(USART3_IRQn);  //Rx callback 함수 enable
		HAL_UART_Receive_IT(&huart3, &str3_, 1);
	}
}
 8000f92:	e009      	b.n	8000fa8 <HAL_UART_RxCpltCallback+0x48>
	else if(huart->Instance == USART3)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <HAL_UART_RxCpltCallback+0x5c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d104      	bne.n	8000fa8 <HAL_UART_RxCpltCallback+0x48>
		HAL_UART_Receive_IT(&huart3, &str3_, 1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <HAL_UART_RxCpltCallback+0x60>)
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <HAL_UART_RxCpltCallback+0x64>)
 8000fa4:	f00e fa02 	bl	800f3ac <HAL_UART_Receive_IT>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40011000 	.word	0x40011000
 8000fb4:	20000200 	.word	0x20000200
 8000fb8:	20000690 	.word	0x20000690
 8000fbc:	40004800 	.word	0x40004800
 8000fc0:	20000201 	.word	0x20000201
 8000fc4:	20000718 	.word	0x20000718

08000fc8 <_Z15Debug_Uart_Initv>:




void Debug_Uart_Init()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &str1_, 1); 	//for debugging
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4905      	ldr	r1, [pc, #20]	; (8000fe4 <_Z15Debug_Uart_Initv+0x1c>)
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <_Z15Debug_Uart_Initv+0x20>)
 8000fd2:	f00e f9eb 	bl	800f3ac <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &str3_, 1);	//for Controlling
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4904      	ldr	r1, [pc, #16]	; (8000fec <_Z15Debug_Uart_Initv+0x24>)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <_Z15Debug_Uart_Initv+0x28>)
 8000fdc:	f00e f9e6 	bl	800f3ac <HAL_UART_Receive_IT>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000200 	.word	0x20000200
 8000fe8:	20000690 	.word	0x20000690
 8000fec:	20000201 	.word	0x20000201
 8000ff0:	20000718 	.word	0x20000718

08000ff4 <_Z10DebugDrivev>:

int testpos= 100000;

//for uart1 debug
void DebugDrive()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
	int cmd = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
	int cmd1 = str1_;
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <_Z10DebugDrivev+0xb8>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	60bb      	str	r3, [r7, #8]
	int cmd2 = str3_;
 8001004:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <_Z10DebugDrivev+0xbc>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	607b      	str	r3, [r7, #4]
	int cmd3 = char_ethernet;
 800100a:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <_Z10DebugDrivev+0xc0>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	603b      	str	r3, [r7, #0]

	if (cmd1 != 0) cmd = cmd1;
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <_Z10DebugDrivev+0x28>
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e00a      	b.n	8001032 <_Z10DebugDrivev+0x3e>
	else if (cmd2 !=0) cmd = cmd2;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <_Z10DebugDrivev+0x34>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e004      	b.n	8001032 <_Z10DebugDrivev+0x3e>
	else if (cmd3 !=0) cmd = cmd3;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <_Z10DebugDrivev+0x3e>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	60fb      	str	r3, [r7, #12]

	switch(cmd)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3b31      	subs	r3, #49	; 0x31
 8001036:	2b08      	cmp	r3, #8
 8001038:	d82a      	bhi.n	8001090 <_Z10DebugDrivev+0x9c>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <_Z10DebugDrivev+0x4c>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	08001065 	.word	0x08001065
 8001044:	0800106f 	.word	0x0800106f
 8001048:	08001079 	.word	0x08001079
 800104c:	08001081 	.word	0x08001081
 8001050:	08001091 	.word	0x08001091
 8001054:	08001091 	.word	0x08001091
 8001058:	08001091 	.word	0x08001091
 800105c:	08001091 	.word	0x08001091
 8001060:	08001089 	.word	0x08001089
		//case '2': SensorManager::GetInstance().PGV100DirLeft();/*function 2*/ break;
		//case '3': SensorManager::GetInstance().PGV100DirRight();/*function 2*/ break;
		//case '4': SensorManager::GetInstance().PGV100Drive(); break;
		//case '5': SensorManager::GetInstance().CommonSensorDrive(); break;
		//can test
		case '1': bg95test.AbsPosCommand(&testpos); break;
 8001064:	4914      	ldr	r1, [pc, #80]	; (80010b8 <_Z10DebugDrivev+0xc4>)
 8001066:	4815      	ldr	r0, [pc, #84]	; (80010bc <_Z10DebugDrivev+0xc8>)
 8001068:	f003 fddd 	bl	8004c26 <_ZN4BG9513AbsPosCommandEPi>
 800106c:	e011      	b.n	8001092 <_Z10DebugDrivev+0x9e>
		case '2': bg95test.RelPosCommand(&testpos); break;
 800106e:	4912      	ldr	r1, [pc, #72]	; (80010b8 <_Z10DebugDrivev+0xc4>)
 8001070:	4812      	ldr	r0, [pc, #72]	; (80010bc <_Z10DebugDrivev+0xc8>)
 8001072:	f003 fde8 	bl	8004c46 <_ZN4BG9513RelPosCommandEPi>
 8001076:	e00c      	b.n	8001092 <_Z10DebugDrivev+0x9e>
		case '3': bg95test.VelClockCommand(); break;
 8001078:	4810      	ldr	r0, [pc, #64]	; (80010bc <_Z10DebugDrivev+0xc8>)
 800107a:	f003 fdf4 	bl	8004c66 <_ZN4BG9515VelClockCommandEv>
 800107e:	e008      	b.n	8001092 <_Z10DebugDrivev+0x9e>
		case '4': bg95test.VelCClockCommand(); break;
 8001080:	480e      	ldr	r0, [pc, #56]	; (80010bc <_Z10DebugDrivev+0xc8>)
 8001082:	f003 fdfc 	bl	8004c7e <_ZN4BG9516VelCClockCommandEv>
 8001086:	e004      	b.n	8001092 <_Z10DebugDrivev+0x9e>
		//case '9': bg95test.Drive(); break;
		case '9': bg95test.StopMotorCommand(); break;
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <_Z10DebugDrivev+0xc8>)
 800108a:	f003 fe04 	bl	8004c96 <_ZN4BG9516StopMotorCommandEv>
 800108e:	e000      	b.n	8001092 <_Z10DebugDrivev+0x9e>

		default: break;
 8001090:	bf00      	nop
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <_Z10DebugDrivev+0xb8>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <_Z10DebugDrivev+0xbc>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <_Z10DebugDrivev+0xc0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
	}
	memset(&str1_, '\0', sizeof(str1_));
	memset(&str3_, '\0', sizeof(str3_));
	memset(&char_ethernet, '\0', sizeof(char_ethernet));
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000200 	.word	0x20000200
 80010b0:	20000201 	.word	0x20000201
 80010b4:	20000348 	.word	0x20000348
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20001960 	.word	0x20001960

080010c0 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>:
#include "common_sensor.h"


CommonSensor::CommonSensor(){}

CommonSensor::CommonSensor(uint16_t index, bool active_type, uint8_t max_filter_cnt,
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	4608      	mov	r0, r1
 80010ca:	4611      	mov	r1, r2
 80010cc:	461a      	mov	r2, r3
 80010ce:	4603      	mov	r3, r0
 80010d0:	807b      	strh	r3, [r7, #2]
 80010d2:	460b      	mov	r3, r1
 80010d4:	707b      	strb	r3, [r7, #1]
 80010d6:	4613      	mov	r3, r2
 80010d8:	703b      	strb	r3, [r7, #0]
		GPIO_TypeDef* GPIOx, uint32_t PinMask)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2205      	movs	r2, #5
 80010e4:	731a      	strb	r2, [r3, #12]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	735a      	strb	r2, [r3, #13]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	739a      	strb	r2, [r3, #14]
{
	this->index_ = index;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	887a      	ldrh	r2, [r7, #2]
 80010f6:	801a      	strh	r2, [r3, #0]
	this->active_type_ = active_type;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	787a      	ldrb	r2, [r7, #1]
 80010fc:	709a      	strb	r2, [r3, #2]
	this->max_filter_cnt_ = max_filter_cnt;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	783a      	ldrb	r2, [r7, #0]
 8001102:	731a      	strb	r2, [r3, #12]
	this->GPIOx_ = GPIOx;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	605a      	str	r2, [r3, #4]
	this->PinMask_ = PinMask;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	609a      	str	r2, [r3, #8]
}
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_ZN12CommonSensorD1Ev>:

CommonSensor::~CommonSensor(){}
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <_ZNK12CommonSensor13GetSensorDataEv>:


bool CommonSensor::GetSensorData() const {return this->output_;}
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	78db      	ldrb	r3, [r3, #3]
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <_ZNK12CommonSensor14GetSensorIndexEv>:

uint16_t CommonSensor::GetSensorIndex() const {return this->index_;}
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_ZN12CommonSensor16CheckSensorValueEv>:


//use hal or ll function
bool CommonSensor::CheckSensorValue()
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(this->GPIOx_, this->PinMask_) == 1) (this->state) = 1;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4619      	mov	r1, r3
 8001178:	4610      	mov	r0, r2
 800117a:	f00c fa49 	bl	800d610 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <_ZN12CommonSensor16CheckSensorValueEv+0x32>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	739a      	strb	r2, [r3, #14]
 8001194:	e002      	b.n	800119c <_ZN12CommonSensor16CheckSensorValueEv+0x38>
	else (this->state) = 0;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	739a      	strb	r2, [r3, #14]

	if(!active_type_) this->state = !(this->state);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	789b      	ldrb	r3, [r3, #2]
 80011a0:	f083 0301 	eor.w	r3, r3, #1
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d006      	beq.n	80011b8 <_ZN12CommonSensor16CheckSensorValueEv+0x54>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7b9b      	ldrb	r3, [r3, #14]
 80011ae:	f083 0301 	eor.w	r3, r3, #1
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	739a      	strb	r2, [r3, #14]
	return this->state;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7b9b      	ldrb	r3, [r3, #14]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_ZN12CommonSensor14IsInfoFilteredEv>:

bool CommonSensor::IsInfoFiltered()
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	return (this->now_filter_cnt_>= this->max_filter_cnt_);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7b5a      	ldrb	r2, [r3, #13]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7b1b      	ldrb	r3, [r3, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	bf2c      	ite	cs
 80011d8:	2301      	movcs	r3, #1
 80011da:	2300      	movcc	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_ZN12CommonSensor13FilterCountUpEv>:

void CommonSensor::FilterCountUp()
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
	if(this->now_filter_cnt_< this->max_filter_cnt_) this->now_filter_cnt_++;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7b5a      	ldrb	r2, [r3, #13]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7b1b      	ldrb	r3, [r3, #12]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d205      	bcs.n	800120a <_ZN12CommonSensor13FilterCountUpEv+0x20>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7b5b      	ldrb	r3, [r3, #13]
 8001202:	3301      	adds	r3, #1
 8001204:	b2da      	uxtb	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	735a      	strb	r2, [r3, #13]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_ZN12CommonSensor19FilterStatusChangedEv>:

void CommonSensor::FilterStatusChanged(){this->now_filter_cnt_ = 0;}
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	735a      	strb	r2, [r3, #13]
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <_ZN12CommonSensor5DriveEv>:


bool CommonSensor::Drive()
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	bool prev_val = this->state;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7b9b      	ldrb	r3, [r3, #14]
 800123c:	73fb      	strb	r3, [r7, #15]
	bool now_val = CheckSensorValue();
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff90 	bl	8001164 <_ZN12CommonSensor16CheckSensorValueEv>
 8001244:	4603      	mov	r3, r0
 8001246:	73bb      	strb	r3, [r7, #14]


	//1. Check Error status
	if(prev_val != now_val)
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	429a      	cmp	r2, r3
 800124e:	d008      	beq.n	8001262 <_ZN12CommonSensor5DriveEv+0x32>
	{
		FilterStatusChanged();
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ffe0 	bl	8001216 <_ZN12CommonSensor19FilterStatusChangedEv>
		this->output_ = prev_val;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	70da      	strb	r2, [r3, #3]
		return this->output_;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	78db      	ldrb	r3, [r3, #3]
 8001260:	e016      	b.n	8001290 <_ZN12CommonSensor5DriveEv+0x60>
	}

	//2. wait until state is stabled(normal or error)
	if(!IsInfoFiltered())
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffae 	bl	80011c4 <_ZN12CommonSensor14IsInfoFilteredEv>
 8001268:	4603      	mov	r3, r0
 800126a:	f083 0301 	eor.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d008      	beq.n	8001286 <_ZN12CommonSensor5DriveEv+0x56>
	{
		FilterCountUp();
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ffb8 	bl	80011ea <_ZN12CommonSensor13FilterCountUpEv>
		this->output_ = prev_val;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	70da      	strb	r2, [r3, #3]
		return this->output_;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	78db      	ldrb	r3, [r3, #3]
 8001284:	e004      	b.n	8001290 <_ZN12CommonSensor5DriveEv+0x60>
	}

	this->output_ = now_val;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7bba      	ldrb	r2, [r7, #14]
 800128a:	70da      	strb	r2, [r3, #3]
	return this->output_;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	78db      	ldrb	r3, [r3, #3]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <_sbrk_r>:
    static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit;  // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <_sbrk_r+0x9c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10e      	bne.n	80012c8 <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 80012aa:	4a23      	ldr	r2, [pc, #140]	; (8001338 <_sbrk_r+0xa0>)
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <_sbrk_r+0xa4>)
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80012b4:	4a22      	ldr	r2, [pc, #136]	; (8001340 <_sbrk_r+0xa8>)
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <_sbrk_r+0xa0>)
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <_sbrk_r+0xa4>)
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <_sbrk_r+0x9c>)
 80012c6:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 80012c8:	f012 fd92 	bl	8013df0 <xTaskGetSchedulerState>
 80012cc:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <_sbrk_r+0x3e>
 80012d2:	466b      	mov	r3, sp
 80012d4:	e000      	b.n	80012d8 <_sbrk_r+0x40>
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 80012d8:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 80012da:	f012 f9af 	bl	801363c <vTaskSuspendAll>
    char *previousHeapEnd = currentHeapEnd;
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <_sbrk_r+0xb0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	60bb      	str	r3, [r7, #8]
    if (currentHeapEnd + incr > limit) {
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <_sbrk_r+0xb0>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d207      	bcs.n	8001302 <_sbrk_r+0x6a>
            // If you want to alert debugger or halt...
            // WARNING: brkpt instruction may prevent watchdog operation...
            while(1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	220c      	movs	r2, #12
 80012f6:	601a      	str	r2, [r3, #0]
            DRN_EXIT_CRITICAL_SECTION(usis);
 80012f8:	f012 f9ae 	bl	8013658 <xTaskResumeAll>
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001300:	e014      	b.n	800132c <_sbrk_r+0x94>
    }
    // 'incr' of memory is available: update accounting and return it.
    currentHeapEnd += incr;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <_sbrk_r+0xb0>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	4413      	add	r3, r2
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <_sbrk_r+0xb0>)
 800130c:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <_sbrk_r+0xa8>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <_sbrk_r+0xa8>)
 8001318:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <_sbrk_r+0xb4>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	4413      	add	r3, r2
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <_sbrk_r+0xb4>)
 8001324:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 8001326:	f012 f997 	bl	8013658 <xTaskResumeAll>
    return (char *) previousHeapEnd;
 800132a:	68bb      	ldr	r3, [r7, #8]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000208 	.word	0x20000208
 8001338:	20050000 	.word	0x20050000
 800133c:	2000c1a0 	.word	0x2000c1a0
 8001340:	20000204 	.word	0x20000204
 8001344:	2004fe00 	.word	0x2004fe00
 8001348:	20000004 	.word	0x20000004
 800134c:	2000020c 	.word	0x2000020c

08001350 <__malloc_lock>:
char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)     {
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
{
uint32_t ulCurrentInterrupt;
BaseType_t xReturn;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001358:	f3ef 8305 	mrs	r3, IPSR
 800135c:	613b      	str	r3, [r7, #16]

	if( ulCurrentInterrupt == 0 )
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <__malloc_lock+0x1a>
	{
		xReturn = pdFALSE;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	e001      	b.n	800136e <__malloc_lock+0x1e>
	}
	else
	{
		xReturn = pdTRUE;
 800136a:	2301      	movs	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800136e:	68fb      	ldr	r3, [r7, #12]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 8001370:	2b00      	cmp	r3, #0
 8001372:	bf14      	ite	ne
 8001374:	2301      	movne	r3, #1
 8001376:	2300      	moveq	r3, #0
 8001378:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00c      	beq.n	800139a <__malloc_lock+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001384:	b672      	cpsid	i
 8001386:	f383 8811 	msr	BASEPRI, r3
 800138a:	f3bf 8f6f 	isb	sy
 800138e:	f3bf 8f4f 	dsb	sy
 8001392:	b662      	cpsie	i
 8001394:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001396:	bf00      	nop
 8001398:	e7fe      	b.n	8001398 <__malloc_lock+0x48>
    vTaskSuspendAll();
 800139a:	f012 f94f 	bl	801363c <vTaskSuspendAll>
  #endif
};
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <__malloc_unlock>:
void __malloc_unlock(struct _reent *r)   {
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    (void)xTaskResumeAll();
 80013ae:	f012 f953 	bl	8013658 <xTaskResumeAll>
  #endif
};
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f022 fbac 	bl	8023b20 <malloc>
 80013c8:	4603      	mov	r3, r0
 80013ca:	60fb      	str	r3, [r7, #12]
    return p;
 80013cc:	68fb      	ldr	r3, [r7, #12]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
    free(pv);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f022 fba6 	bl	8023b30 <free>
};
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_ZL16TcpServerInitSeqv>:

/**** Send RESPONSE every time the client sends some data ******/


static int TcpServerInitSeq()
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
	err_t err;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2010      	movs	r0, #16
 80013f8:	f013 f992 	bl	8014720 <netconn_new_with_proto_and_callback>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a14      	ldr	r2, [pc, #80]	; (8001450 <_ZL16TcpServerInitSeqv+0x64>)
 8001400:	6013      	str	r3, [r2, #0]

	if (conn == NULL)
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <_ZL16TcpServerInitSeqv+0x64>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d107      	bne.n	800141a <_ZL16TcpServerInitSeqv+0x2e>
	{
		netconn_delete(conn);
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <_ZL16TcpServerInitSeqv+0x64>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f013 fa24 	bl	801485c <netconn_delete>
		return -1;
 8001414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001418:	e016      	b.n	8001448 <_ZL16TcpServerInitSeqv+0x5c>
	}

	/* Bind connection to the port number 8. */
	err = netconn_bind(conn, IP_ADDR_ANY, ServerPort);
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <_ZL16TcpServerInitSeqv+0x64>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	220a      	movs	r2, #10
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <_ZL16TcpServerInitSeqv+0x68>)
 8001422:	4618      	mov	r0, r3
 8001424:	f013 fa36 	bl	8014894 <netconn_bind>
 8001428:	4603      	mov	r3, r0
 800142a:	71fb      	strb	r3, [r7, #7]

	if (err != ERR_OK) return -1;
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <_ZL16TcpServerInitSeqv+0x4e>
 8001434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001438:	e006      	b.n	8001448 <_ZL16TcpServerInitSeqv+0x5c>

	/* Tell connection to go into listening mode. */
	netconn_listen(conn);
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <_ZL16TcpServerInitSeqv+0x64>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	21ff      	movs	r1, #255	; 0xff
 8001440:	4618      	mov	r0, r3
 8001442:	f013 fa97 	bl	8014974 <netconn_listen_with_backlog>

	/*Successfully Initialized*/
	return 0;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000210 	.word	0x20000210
 8001454:	08028978 	.word	0x08028978

08001458 <_ZL17TcpServerDriveSeqv>:

static int TcpServerDriveSeq()
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af02      	add	r7, sp, #8
	err_t accept_err;

	/* Grab new connection. */
	accept_err = netconn_accept(conn, &newconn);
 800145e:	4b34      	ldr	r3, [pc, #208]	; (8001530 <_ZL17TcpServerDriveSeqv+0xd8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4934      	ldr	r1, [pc, #208]	; (8001534 <_ZL17TcpServerDriveSeqv+0xdc>)
 8001464:	4618      	mov	r0, r3
 8001466:	f013 fab1 	bl	80149cc <netconn_accept>
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]

	/* Process the new connection. */
	if(accept_err == ERR_OK)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d157      	bne.n	8001526 <_ZL17TcpServerDriveSeqv+0xce>
	{
		/* receive the data from the client */
		while (netconn_recv(newconn, &buf) == ERR_OK)
 8001476:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <_ZL17TcpServerDriveSeqv+0xdc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	492f      	ldr	r1, [pc, #188]	; (8001538 <_ZL17TcpServerDriveSeqv+0xe0>)
 800147c:	4618      	mov	r0, r3
 800147e:	f013 fcad 	bl	8014ddc <netconn_recv>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	bf0c      	ite	eq
 8001488:	2301      	moveq	r3, #1
 800148a:	2300      	movne	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d03f      	beq.n	8001512 <_ZL17TcpServerDriveSeqv+0xba>
		{
			/* If there is some data remaining to be sent, the following process will continue */
			do
			{
				strncpy (msg, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <_ZL17TcpServerDriveSeqv+0xe0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6859      	ldr	r1, [r3, #4]
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <_ZL17TcpServerDriveSeqv+0xe0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	895b      	ldrh	r3, [r3, #10]
 80014a2:	461a      	mov	r2, r3
 80014a4:	4825      	ldr	r0, [pc, #148]	; (800153c <_ZL17TcpServerDriveSeqv+0xe4>)
 80014a6:	f022 fdd2 	bl	802404e <strncpy>

				//for test debug
				strncpy (char_ethernet, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <_ZL17TcpServerDriveSeqv+0xe0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6859      	ldr	r1, [r3, #4]
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <_ZL17TcpServerDriveSeqv+0xe0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	895b      	ldrh	r3, [r3, #10]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4820      	ldr	r0, [pc, #128]	; (8001540 <_ZL17TcpServerDriveSeqv+0xe8>)
 80014be:	f022 fdc6 	bl	802404e <strncpy>


				*/
				// Or modify the message received, so that we can send it back to the client
				//response
				int len = sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 80014c2:	4a1e      	ldr	r2, [pc, #120]	; (800153c <_ZL17TcpServerDriveSeqv+0xe4>)
 80014c4:	491f      	ldr	r1, [pc, #124]	; (8001544 <_ZL17TcpServerDriveSeqv+0xec>)
 80014c6:	4820      	ldr	r0, [pc, #128]	; (8001548 <_ZL17TcpServerDriveSeqv+0xf0>)
 80014c8:	f022 fd5e 	bl	8023f88 <siprintf>
 80014cc:	6038      	str	r0, [r7, #0]

				netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <_ZL17TcpServerDriveSeqv+0xdc>)
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	2300      	movs	r3, #0
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2301      	movs	r3, #1
 80014da:	491b      	ldr	r1, [pc, #108]	; (8001548 <_ZL17TcpServerDriveSeqv+0xf0>)
 80014dc:	f013 fd26 	bl	8014f2c <netconn_write_partly>
				memset (msg, '\0', 100);  // clear the buffer
 80014e0:	2264      	movs	r2, #100	; 0x64
 80014e2:	2100      	movs	r1, #0
 80014e4:	4815      	ldr	r0, [pc, #84]	; (800153c <_ZL17TcpServerDriveSeqv+0xe4>)
 80014e6:	f022 fb63 	bl	8023bb0 <memset>
			}
			while (netbuf_next(buf) >0);
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <_ZL17TcpServerDriveSeqv+0xe0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f015 fc34 	bl	8016d5c <netbuf_next>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	bfcc      	ite	gt
 80014fa:	2301      	movgt	r3, #1
 80014fc:	2300      	movle	r3, #0
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d000      	beq.n	8001506 <_ZL17TcpServerDriveSeqv+0xae>
			do
 8001504:	e7c5      	b.n	8001492 <_ZL17TcpServerDriveSeqv+0x3a>

			netbuf_delete(buf);
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <_ZL17TcpServerDriveSeqv+0xe0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f015 fbbc 	bl	8016c88 <netbuf_delete>
		while (netconn_recv(newconn, &buf) == ERR_OK)
 8001510:	e7b1      	b.n	8001476 <_ZL17TcpServerDriveSeqv+0x1e>
		}
		/* Close connection and discard connection identifier. */
		netconn_close(newconn);
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <_ZL17TcpServerDriveSeqv+0xdc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f013 fe0a 	bl	8015130 <netconn_close>
		netconn_delete(newconn);
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <_ZL17TcpServerDriveSeqv+0xdc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f013 f99b 	bl	801485c <netconn_delete>
	}
}
 8001526:	bf00      	nop
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000210 	.word	0x20000210
 8001534:	20000214 	.word	0x20000214
 8001538:	20000218 	.word	0x20000218
 800153c:	2000021c 	.word	0x2000021c
 8001540:	20000348 	.word	0x20000348
 8001544:	08024f98 	.word	0x08024f98
 8001548:	20000280 	.word	0x20000280

0800154c <_ZL15TcpServerThreadPv>:




static void TcpServerThread(void *arg)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	TcpServerInitSeq();
 8001554:	f7ff ff4a 	bl	80013ec <_ZL16TcpServerInitSeqv>

	TcpServerDriveSeq();
 8001558:	f7ff ff7e 	bl	8001458 <_ZL17TcpServerDriveSeqv>

	//if out of TcpServerDriveSeq(); it means error occur
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_Z13TcpServerInitv>:



void TcpServerInit(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af02      	add	r7, sp, #8
  sys_thread_new("TcpServerThread", TcpServerThread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 800156a:	2300      	movs	r3, #0
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001572:	2200      	movs	r2, #0
 8001574:	4903      	ldr	r1, [pc, #12]	; (8001584 <_Z13TcpServerInitv+0x20>)
 8001576:	4804      	ldr	r0, [pc, #16]	; (8001588 <_Z13TcpServerInitv+0x24>)
 8001578:	f021 f948 	bl	802280c <sys_thread_new>
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	0800154d 	.word	0x0800154d
 8001588:	08024fb8 	.word	0x08024fb8

0800158c <_Z7udpsendPc>:
/*------------------------------------Client-----------------------------------------*/
/*-----------------------------------------------------------------------------------*/

/*-------UDP Send function to send the data to the server-------------*/
void udpsend (char *data)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	buf = netbuf_new();   // Create a new netbuf
 8001594:	f015 fb64 	bl	8016c60 <netbuf_new>
 8001598:	4603      	mov	r3, r0
 800159a:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <_Z7udpsendPc+0x4c>)
 800159c:	6013      	str	r3, [r2, #0]
	netbuf_ref(buf, data, strlen(data));  // refer the netbuf to the data to be sent
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <_Z7udpsendPc+0x4c>)
 80015a0:	681c      	ldr	r4, [r3, #0]
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7fe fe34 	bl	8000210 <strlen>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4620      	mov	r0, r4
 80015b2:	f015 fb89 	bl	8016cc8 <netbuf_ref>
	netconn_send(conn,buf);  // send the netbuf to the client
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <_Z7udpsendPc+0x50>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <_Z7udpsendPc+0x4c>)
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f013 fc85 	bl	8014ed0 <netconn_send>
	netbuf_delete(buf);  // delete the netbuf
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <_Z7udpsendPc+0x4c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f015 fb5c 	bl	8016c88 <netbuf_delete>
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	200003b0 	.word	0x200003b0
 80015dc:	200003ac 	.word	0x200003ac

080015e0 <_ZL15UdpClientThreadPv>:



static void UdpClientThread(void *arg)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	err_t err, recv_err;
	ip_addr_t dest_addr;
	/* Create a new connection identifier */
	conn = netconn_new(NETCONN_UDP);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	2020      	movs	r0, #32
 80015ee:	f013 f897 	bl	8014720 <netconn_new_with_proto_and_callback>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a2d      	ldr	r2, [pc, #180]	; (80016ac <_ZL15UdpClientThreadPv+0xcc>)
 80015f6:	6013      	str	r3, [r2, #0]

	if (conn!= NULL)
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <_ZL15UdpClientThreadPv+0xcc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d04c      	beq.n	800169a <_ZL15UdpClientThreadPv+0xba>
	{
		/* Bind connection to the port 7 */
		err = netconn_bind(conn, IP_ADDR_ANY, ClientPort);
 8001600:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <_ZL15UdpClientThreadPv+0xcc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2208      	movs	r2, #8
 8001606:	492a      	ldr	r1, [pc, #168]	; (80016b0 <_ZL15UdpClientThreadPv+0xd0>)
 8001608:	4618      	mov	r0, r3
 800160a:	f013 f943 	bl	8014894 <netconn_bind>
 800160e:	4603      	mov	r3, r0
 8001610:	73fb      	strb	r3, [r7, #15]
		if (err == ERR_OK)
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d144      	bne.n	80016a4 <_ZL15UdpClientThreadPv+0xc4>
		{
			/* The desination IP adress of the computer */
			IP_ADDR4(&dest_addr, 192, 168, 1, 25);
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <_ZL15UdpClientThreadPv+0xd4>)
 800161c:	60bb      	str	r3, [r7, #8]
			/* connect to the destination (server) at port 8 */
			err = netconn_connect(conn, &dest_addr, ServerPort);
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <_ZL15UdpClientThreadPv+0xcc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f107 0108 	add.w	r1, r7, #8
 8001626:	2207      	movs	r2, #7
 8001628:	4618      	mov	r0, r3
 800162a:	f013 f96b 	bl	8014904 <netconn_connect>
 800162e:	4603      	mov	r3, r0
 8001630:	73fb      	strb	r3, [r7, #15]
			if (err == ERR_OK)
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d134      	bne.n	80016a4 <_ZL15UdpClientThreadPv+0xc4>
			{
				/* Got into infinite loop after initialisation */
				for (;;)
				{
						/* Receive data from the server */
						recv_err = netconn_recv(conn, &rxbuf);
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <_ZL15UdpClientThreadPv+0xcc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	491e      	ldr	r1, [pc, #120]	; (80016b8 <_ZL15UdpClientThreadPv+0xd8>)
 8001640:	4618      	mov	r0, r3
 8001642:	f013 fbcb 	bl	8014ddc <netconn_recv>
 8001646:	4603      	mov	r3, r0
 8001648:	73bb      	strb	r3, [r7, #14]
						if (recv_err == ERR_OK)
 800164a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f3      	bne.n	800163a <_ZL15UdpClientThreadPv+0x5a>
						{
							strncpy (msg, (char *) rxbuf->p->payload, rxbuf->p->len);  // get the message from the client
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <_ZL15UdpClientThreadPv+0xd8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6859      	ldr	r1, [r3, #4]
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <_ZL15UdpClientThreadPv+0xd8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	895b      	ldrh	r3, [r3, #10]
 8001662:	461a      	mov	r2, r3
 8001664:	4815      	ldr	r0, [pc, #84]	; (80016bc <_ZL15UdpClientThreadPv+0xdc>)
 8001666:	f022 fcf2 	bl	802404e <strncpy>
							/* copy the data into our buffer (smsg) */
							sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <_ZL15UdpClientThreadPv+0xdc>)
 800166c:	4914      	ldr	r1, [pc, #80]	; (80016c0 <_ZL15UdpClientThreadPv+0xe0>)
 800166e:	4815      	ldr	r0, [pc, #84]	; (80016c4 <_ZL15UdpClientThreadPv+0xe4>)
 8001670:	f022 fc8a 	bl	8023f88 <siprintf>
							udpsend(smsg);  // send the message to the server
 8001674:	4813      	ldr	r0, [pc, #76]	; (80016c4 <_ZL15UdpClientThreadPv+0xe4>)
 8001676:	f7ff ff89 	bl	800158c <_Z7udpsendPc>
							netbuf_delete(rxbuf);  // delete the netbuf
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <_ZL15UdpClientThreadPv+0xd8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f015 fb02 	bl	8016c88 <netbuf_delete>
							memset(msg, '\0', sizeof(msg));
 8001684:	2264      	movs	r2, #100	; 0x64
 8001686:	2100      	movs	r1, #0
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <_ZL15UdpClientThreadPv+0xdc>)
 800168a:	f022 fa91 	bl	8023bb0 <memset>
							memset(msg, '\0', sizeof(smsg));
 800168e:	22c8      	movs	r2, #200	; 0xc8
 8001690:	2100      	movs	r1, #0
 8001692:	480a      	ldr	r0, [pc, #40]	; (80016bc <_ZL15UdpClientThreadPv+0xdc>)
 8001694:	f022 fa8c 	bl	8023bb0 <memset>
						recv_err = netconn_recv(conn, &rxbuf);
 8001698:	e7cf      	b.n	800163a <_ZL15UdpClientThreadPv+0x5a>
		}
	}

	else
	{
		netconn_delete(conn);
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <_ZL15UdpClientThreadPv+0xcc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f013 f8dc 	bl	801485c <netconn_delete>
	}
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200003ac 	.word	0x200003ac
 80016b0:	08028978 	.word	0x08028978
 80016b4:	1901a8c0 	.word	0x1901a8c0
 80016b8:	200003b4 	.word	0x200003b4
 80016bc:	200003b8 	.word	0x200003b8
 80016c0:	08025028 	.word	0x08025028
 80016c4:	2000041c 	.word	0x2000041c

080016c8 <_Z13UdpClientInitv>:
	}
}
*/

void UdpClientInit(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af02      	add	r7, sp, #8
	//sys_thread_new("udpsend_thread", udpsend_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
	sys_thread_new("UdpClientThread", UdpClientThread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 80016ce:	2300      	movs	r3, #0
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d6:	2200      	movs	r2, #0
 80016d8:	4903      	ldr	r1, [pc, #12]	; (80016e8 <_Z13UdpClientInitv+0x20>)
 80016da:	4804      	ldr	r0, [pc, #16]	; (80016ec <_Z13UdpClientInitv+0x24>)
 80016dc:	f021 f896 	bl	802280c <sys_thread_new>
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	080015e1 	.word	0x080015e1
 80016ec:	08025048 	.word	0x08025048

080016f0 <init_stm32f746>:




void init_stm32f746()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80016f4:	f000 faaa 	bl	8001c4c <MX_GPIO_Init>
	MX_CAN1_Init();
 80016f8:	f000 f88c 	bl	8001814 <MX_CAN1_Init>
	MX_FMC_Init();
 80016fc:	f000 fa3e 	bl	8001b7c <MX_FMC_Init>
	MX_UART4_Init();
 8001700:	f000 f934 	bl	800196c <MX_UART4_Init>
	MX_USART1_UART_Init();
 8001704:	f000 f99c 	bl	8001a40 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8001708:	f000 f9ce 	bl	8001aa8 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 800170c:	f000 fa00 	bl	8001b10 <MX_USART6_UART_Init>
	MX_UART5_Init();
 8001710:	f000 f960 	bl	80019d4 <MX_UART5_Init>
	MX_TIM7_Init();
 8001714:	f000 f8ea 	bl	80018ec <MX_TIM7_Init>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b094      	sub	sp, #80	; 0x50
 8001720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001722:	f107 0320 	add.w	r3, r7, #32
 8001726:	2230      	movs	r2, #48	; 0x30
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f022 fa40 	bl	8023bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001740:	4b32      	ldr	r3, [pc, #200]	; (800180c <SystemClock_Config+0xf0>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	4a31      	ldr	r2, [pc, #196]	; (800180c <SystemClock_Config+0xf0>)
 8001746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174a:	6413      	str	r3, [r2, #64]	; 0x40
 800174c:	4b2f      	ldr	r3, [pc, #188]	; (800180c <SystemClock_Config+0xf0>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001758:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <SystemClock_Config+0xf4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a2c      	ldr	r2, [pc, #176]	; (8001810 <SystemClock_Config+0xf4>)
 800175e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <SystemClock_Config+0xf4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001770:	2301      	movs	r3, #1
 8001772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177a:	2302      	movs	r3, #2
 800177c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800177e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001784:	2319      	movs	r3, #25
 8001786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001788:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800178c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800178e:	2302      	movs	r3, #2
 8001790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001792:	2302      	movs	r3, #2
 8001794:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	4618      	mov	r0, r3
 800179c:	f00b ffba 	bl	800d714 <HAL_RCC_OscConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf14      	ite	ne
 80017a6:	2301      	movne	r3, #1
 80017a8:	2300      	moveq	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017b0:	f000 fb4c 	bl	8001e4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017b4:	f00b ff5e 	bl	800d674 <HAL_PWREx_EnableOverDrive>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	bf14      	ite	ne
 80017be:	2301      	movne	r3, #1
 80017c0:	2300      	moveq	r3, #0
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80017c8:	f000 fb40 	bl	8001e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017cc:	230f      	movs	r3, #15
 80017ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d0:	2302      	movs	r3, #2
 80017d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	2107      	movs	r1, #7
 80017ea:	4618      	mov	r0, r3
 80017ec:	f00c fa36 	bl	800dc5c <HAL_RCC_ClockConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf14      	ite	ne
 80017f6:	2301      	movne	r3, #1
 80017f8:	2300      	moveq	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001800:	f000 fb24 	bl	8001e4c <Error_Handler>
  }
}
 8001804:	bf00      	nop
 8001806:	3750      	adds	r7, #80	; 0x50
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000

08001814 <MX_CAN1_Init>:
/**
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN1_Init(void){
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <MX_CAN1_Init+0xcc>)
 800181a:	4a32      	ldr	r2, [pc, #200]	; (80018e4 <MX_CAN1_Init+0xd0>)
 800181c:	601a      	str	r2, [r3, #0]

  //125 ~ 500khz
  //hcan1.Init.Prescaler = 3;//1000khz -> 3, 15, 2
  //hcan1.Init.Prescaler = 6;//500khz -> 6, 15, 2
  hcan1.Init.Prescaler = 12;//250khz -> 12, 15, 2
 800181e:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <MX_CAN1_Init+0xcc>)
 8001820:	220c      	movs	r2, #12
 8001822:	605a      	str	r2, [r3, #4]
  //hcan1.Init.Prescaler = 27;//125khz -> 27,16,13
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <MX_CAN1_Init+0xcc>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800182a:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <MX_CAN1_Init+0xcc>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <MX_CAN1_Init+0xcc>)
 8001832:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001836:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <MX_CAN1_Init+0xcc>)
 800183a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800183e:	615a      	str	r2, [r3, #20]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
*/

  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <MX_CAN1_Init+0xcc>)
 8001842:	2200      	movs	r2, #0
 8001844:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001846:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <MX_CAN1_Init+0xcc>)
 8001848:	2200      	movs	r2, #0
 800184a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800184c:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <MX_CAN1_Init+0xcc>)
 800184e:	2200      	movs	r2, #0
 8001850:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001852:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <MX_CAN1_Init+0xcc>)
 8001854:	2200      	movs	r2, #0
 8001856:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <MX_CAN1_Init+0xcc>)
 800185a:	2200      	movs	r2, #0
 800185c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <MX_CAN1_Init+0xcc>)
 8001860:	2200      	movs	r2, #0
 8001862:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan1) != HAL_OK){
 8001864:	481e      	ldr	r0, [pc, #120]	; (80018e0 <MX_CAN1_Init+0xcc>)
 8001866:	f009 fa57 	bl	800ad18 <HAL_CAN_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	bf14      	ite	ne
 8001870:	2301      	movne	r3, #1
 8001872:	2300      	moveq	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_CAN1_Init+0x6a>
    Error_Handler();
 800187a:	f000 fae7 	bl	8001e4c <Error_Handler>
  }


  sFilterConfig.FilterBank = 0;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_CAN1_Init+0xd4>)
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_CAN1_Init+0xd4>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_CAN1_Init+0xd4>)
 800188c:	2201      	movs	r2, #1
 800188e:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x1fff;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_CAN1_Init+0xd4>)
 8001892:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001896:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0xffff;
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <MX_CAN1_Init+0xd4>)
 800189a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800189e:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;             //maximum range of accepting id
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_CAN1_Init+0xd4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;				//minimum range of accepting id
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <MX_CAN1_Init+0xd4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_CAN1_Init+0xd4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <MX_CAN1_Init+0xd4>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;   //14
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <MX_CAN1_Init+0xd4>)
 80018ba:	220e      	movs	r2, #14
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24


  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80018be:	490a      	ldr	r1, [pc, #40]	; (80018e8 <MX_CAN1_Init+0xd4>)
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <MX_CAN1_Init+0xcc>)
 80018c2:	f009 fb25 	bl	800af10 <HAL_CAN_ConfigFilter>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf14      	ite	ne
 80018cc:	2301      	movne	r3, #1
 80018ce:	2300      	moveq	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_CAN1_Init+0xc6>
  {
    /*Filter configuration Error*/
    Error_Handler();
 80018d6:	f000 fab9 	bl	8001e4c <Error_Handler>

  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200004e4 	.word	0x200004e4
 80018e4:	40006400 	.word	0x40006400
 80018e8:	2000050c 	.word	0x2000050c

080018ec <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM7_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_TIM7_Init+0x78>)
 80018fe:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <MX_TIM7_Init+0x7c>)
 8001900:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <MX_TIM7_Init+0x78>)
 8001904:	226b      	movs	r2, #107	; 0x6b
 8001906:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <MX_TIM7_Init+0x78>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_TIM7_Init+0x78>)
 8001910:	2263      	movs	r2, #99	; 0x63
 8001912:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <MX_TIM7_Init+0x78>)
 8001916:	2280      	movs	r2, #128	; 0x80
 8001918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800191a:	4812      	ldr	r0, [pc, #72]	; (8001964 <MX_TIM7_Init+0x78>)
 800191c:	f00c ffee 	bl	800e8fc <HAL_TIM_Base_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	bf14      	ite	ne
 8001926:	2301      	movne	r3, #1
 8001928:	2300      	moveq	r3, #0
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM7_Init+0x48>
  {
    Error_Handler();
 8001930:	f000 fa8c 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	4619      	mov	r1, r3
 8001940:	4808      	ldr	r0, [pc, #32]	; (8001964 <MX_TIM7_Init+0x78>)
 8001942:	f00d fa93 	bl	800ee6c <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf14      	ite	ne
 800194c:	2301      	movne	r3, #1
 800194e:	2300      	moveq	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 8001956:	f000 fa79 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000534 	.word	0x20000534
 8001968:	40001400 	.word	0x40001400

0800196c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART4_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <MX_UART4_Init+0x60>)
 8001972:	4a17      	ldr	r2, [pc, #92]	; (80019d0 <MX_UART4_Init+0x64>)
 8001974:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <MX_UART4_Init+0x60>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <MX_UART4_Init+0x60>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_UART4_Init+0x60>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <MX_UART4_Init+0x60>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_UART4_Init+0x60>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <MX_UART4_Init+0x60>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_UART4_Init+0x60>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <MX_UART4_Init+0x60>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_UART4_Init+0x60>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019ae:	4807      	ldr	r0, [pc, #28]	; (80019cc <MX_UART4_Init+0x60>)
 80019b0:	f00d fb08 	bl	800efc4 <HAL_UART_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	bf14      	ite	ne
 80019ba:	2301      	movne	r3, #1
 80019bc:	2300      	moveq	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 80019c4:	f000 fa42 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000580 	.word	0x20000580
 80019d0:	40004c00 	.word	0x40004c00

080019d4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART5_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <MX_UART5_Init+0x64>)
 80019da:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <MX_UART5_Init+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_UART5_Init+0x64>)
 80019e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <MX_UART5_Init+0x64>)
 80019e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019ec:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <MX_UART5_Init+0x64>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 80019f4:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <MX_UART5_Init+0x64>)
 80019f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_UART5_Init+0x64>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <MX_UART5_Init+0x64>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <MX_UART5_Init+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <MX_UART5_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <MX_UART5_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_UART5_Init+0x64>)
 8001a1c:	f00d fad2 	bl	800efc4 <HAL_UART_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_UART5_Init+0x60>
  {
    Error_Handler();
 8001a30:	f000 fa0c 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000608 	.word	0x20000608
 8001a3c:	40005000 	.word	0x40005000

08001a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MX_USART1_UART_Init+0x60>)
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <MX_USART1_UART_Init+0x64>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_USART1_UART_Init+0x60>)
 8001a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <MX_USART1_UART_Init+0x60>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_USART1_UART_Init+0x60>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <MX_USART1_UART_Init+0x60>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_USART1_UART_Init+0x60>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <MX_USART1_UART_Init+0x60>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MX_USART1_UART_Init+0x60>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <MX_USART1_UART_Init+0x60>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <MX_USART1_UART_Init+0x60>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a82:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <MX_USART1_UART_Init+0x60>)
 8001a84:	f00d fa9e 	bl	800efc4 <HAL_UART_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf14      	ite	ne
 8001a8e:	2301      	movne	r3, #1
 8001a90:	2300      	moveq	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001a98:	f000 f9d8 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000690 	.word	0x20000690
 8001aa4:	40011000 	.word	0x40011000

08001aa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <MX_USART3_UART_Init+0x60>)
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <MX_USART3_UART_Init+0x64>)
 8001ab0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <MX_USART3_UART_Init+0x60>)
 8001ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <MX_USART3_UART_Init+0x60>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_USART3_UART_Init+0x60>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <MX_USART3_UART_Init+0x60>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_USART3_UART_Init+0x60>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <MX_USART3_UART_Init+0x60>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_USART3_UART_Init+0x60>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <MX_USART3_UART_Init+0x60>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_USART3_UART_Init+0x60>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aea:	4807      	ldr	r0, [pc, #28]	; (8001b08 <MX_USART3_UART_Init+0x60>)
 8001aec:	f00d fa6a 	bl	800efc4 <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bf14      	ite	ne
 8001af6:	2301      	movne	r3, #1
 8001af8:	2300      	moveq	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8001b00:	f000 f9a4 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000718 	.word	0x20000718
 8001b0c:	40004800 	.word	0x40004800

08001b10 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART6_UART_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <MX_USART6_UART_Init+0x64>)
 8001b16:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <MX_USART6_UART_Init+0x68>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <MX_USART6_UART_Init+0x64>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <MX_USART6_UART_Init+0x64>)
 8001b24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b28:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <MX_USART6_UART_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <MX_USART6_UART_Init+0x64>)
 8001b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b36:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <MX_USART6_UART_Init+0x64>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <MX_USART6_UART_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <MX_USART6_UART_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <MX_USART6_UART_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <MX_USART6_UART_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b56:	4807      	ldr	r0, [pc, #28]	; (8001b74 <MX_USART6_UART_Init+0x64>)
 8001b58:	f00d fa34 	bl	800efc4 <HAL_UART_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bf14      	ite	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	2300      	moveq	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_USART6_UART_Init+0x60>
  {
    Error_Handler();
 8001b6c:	f000 f96e 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200007a0 	.word	0x200007a0
 8001b78:	40011400 	.word	0x40011400

08001b7c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
 8001b90:	615a      	str	r2, [r3, #20]
 8001b92:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001b94:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001b96:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b9a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001b9e:	4a2a      	ldr	r2, [pc, #168]	; (8001c48 <MX_FMC_Init+0xcc>)
 8001ba0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001ba8:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8001bae:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001bf2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bf6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 8001bfe:	2305      	movs	r3, #5
 8001c00:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001c02:	230f      	movs	r3, #15
 8001c04:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8001c06:	2304      	movs	r3, #4
 8001c08:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 4;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001c0e:	2310      	movs	r3, #16
 8001c10:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001c12:	2311      	movs	r3, #17
 8001c14:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4808      	ldr	r0, [pc, #32]	; (8001c44 <MX_FMC_Init+0xc8>)
 8001c22:	f00c fe23 	bl	800e86c <HAL_SRAM_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf14      	ite	ne
 8001c2c:	2301      	movne	r3, #1
 8001c2e:	2300      	moveq	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_FMC_Init+0xbe>
  {
    Error_Handler( );
 8001c36:	f000 f909 	bl	8001e4c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001c3a:	bf00      	nop
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000828 	.word	0x20000828
 8001c48:	a0000104 	.word	0xa0000104

08001c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08e      	sub	sp, #56	; 0x38
 8001c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c62:	4b6b      	ldr	r3, [pc, #428]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a6a      	ldr	r2, [pc, #424]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001c68:	f043 0310 	orr.w	r3, r3, #16
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b68      	ldr	r3, [pc, #416]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	623b      	str	r3, [r7, #32]
 8001c78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7a:	4b65      	ldr	r3, [pc, #404]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a64      	ldr	r2, [pc, #400]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b62      	ldr	r3, [pc, #392]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c92:	4b5f      	ldr	r3, [pc, #380]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a5e      	ldr	r2, [pc, #376]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001c98:	f043 0320 	orr.w	r3, r3, #32
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b5c      	ldr	r3, [pc, #368]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001caa:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b56      	ldr	r3, [pc, #344]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b50      	ldr	r3, [pc, #320]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a4c      	ldr	r2, [pc, #304]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a46      	ldr	r2, [pc, #280]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b44      	ldr	r3, [pc, #272]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0a:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a40      	ldr	r2, [pc, #256]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b3e      	ldr	r3, [pc, #248]	; (8001e10 <MX_GPIO_Init+0x1c4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 8001d22:	2200      	movs	r2, #0
 8001d24:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8001d28:	483a      	ldr	r0, [pc, #232]	; (8001e14 <MX_GPIO_Init+0x1c8>)
 8001d2a:	f00b fc89 	bl	800d640 <HAL_GPIO_WritePin>
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|BUZZER_Pin
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001d34:	4838      	ldr	r0, [pc, #224]	; (8001e18 <MX_GPIO_Init+0x1cc>)
 8001d36:	f00b fc83 	bl	800d640 <HAL_GPIO_WritePin>
                          |SLED1_Pin|SLED2_Pin|SLED3_Pin|SLED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCX512_RST_Pin|MCX512_EMG_Pin, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001d40:	4836      	ldr	r0, [pc, #216]	; (8001e1c <MX_GPIO_Init+0x1d0>)
 8001d42:	f00b fc7d 	bl	800d640 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI18_Pin DI19_Pin DI20_Pin DI_EMG1_Pin
                           DI_EMG2_Pin DI16_Pin DI17_Pin */
  GPIO_InitStruct.Pin = DI18_Pin|DI19_Pin|DI20_Pin|DI_EMG1_Pin
 8001d46:	237f      	movs	r3, #127	; 0x7f
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI_EMG2_Pin|DI16_Pin|DI17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d56:	4619      	mov	r1, r3
 8001d58:	4831      	ldr	r0, [pc, #196]	; (8001e20 <MX_GPIO_Init+0x1d4>)
 8001d5a:	f00b faad 	bl	800d2b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_INT0_Pin MCX512_INT1_Pin */
  GPIO_InitStruct.Pin = MCX512_INT0_Pin|MCX512_INT1_Pin;
 8001d5e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d64:	2300      	movs	r3, #0
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d70:	4619      	mov	r1, r3
 8001d72:	482a      	ldr	r0, [pc, #168]	; (8001e1c <MX_GPIO_Init+0x1d0>)
 8001d74:	f00b faa0 	bl	800d2b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CO1_Pin CO2_Pin LED1_R_Pin LED1_G_Pin
                           LED1_B_Pin LED2_R_Pin LED2_G_Pin LED2_B_Pin
                           DO1_Pin DO2_Pin DO3_Pin DO4_Pin */
  GPIO_InitStruct.Pin = CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 8001d78:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4820      	ldr	r0, [pc, #128]	; (8001e14 <MX_GPIO_Init+0x1c8>)
 8001d92:	f00b fa91 	bl	800d2b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART5_DIR_Pin UART6_DIR_Pin UART4_DIR_Pin SLED1_Pin
                           SLED2_Pin SLED3_Pin SLED4_Pin */
  GPIO_InitStruct.Pin = UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|SLED1_Pin
 8001d96:	f240 33c7 	movw	r3, #967	; 0x3c7
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SLED2_Pin|SLED3_Pin|SLED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dac:	4619      	mov	r1, r3
 8001dae:	481a      	ldr	r0, [pc, #104]	; (8001e18 <MX_GPIO_Init+0x1cc>)
 8001db0:	f00b fa82 	bl	800d2b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI5_Pin DI6_Pin DI7_Pin DI8_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin
                           DI13_Pin DI14_Pin DI15_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8001db4:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin
                          |DI13_Pin|DI14_Pin|DI15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4816      	ldr	r0, [pc, #88]	; (8001e24 <MX_GPIO_Init+0x1d8>)
 8001dca:	f00b fa75 	bl	800d2b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_RST_Pin MCX512_EMG_Pin */
  GPIO_InitStruct.Pin = MCX512_RST_Pin|MCX512_EMG_Pin;
 8001dce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de4:	4619      	mov	r1, r3
 8001de6:	480d      	ldr	r0, [pc, #52]	; (8001e1c <MX_GPIO_Init+0x1d0>)
 8001de8:	f00b fa66 	bl	800d2b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001dec:	2320      	movs	r3, #32
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	4619      	mov	r1, r3
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_GPIO_Init+0x1cc>)
 8001e04:	f00b fa58 	bl	800d2b8 <HAL_GPIO_Init>

}
 8001e08:	bf00      	nop
 8001e0a:	3738      	adds	r7, #56	; 0x38
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40021400 	.word	0x40021400
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40021800 	.word	0x40021800

08001e28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d101      	bne.n	8001e3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e3a:	f008 ff29 	bl	800ac90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40001000 	.word	0x40001000

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <Error_Handler+0x8>

08001e56 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fd2c 	bl	80028d4 <_ZNSaI23CAN_WData_HandleTypeDefED1Ev>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fd0f 	bl	80028b4 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ffeb 	bl	8001e86 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fd56 	bl	8002974 <_ZNSaI23CAN_RData_HandleTypeDefED1Ev>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>:
      _Vector_base() = default;
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fd39 	bl	8002954 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>:
      vector() = default;
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ffeb 	bl	8001ed2 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <_ZN4BG95C1EP19__CAN_HandleTypeDef>:

#include <lift_motor/bg95.h>

// TODO Auto-generated constructor stub

BG95::BG95(CAN_HandleTypeDef *hcanx)
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <_ZN4BG95C1EP19__CAN_HandleTypeDef+0x84>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	227f      	movs	r2, #127	; 0x7f
 8001f22:	811a      	strh	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f2a:	825a      	strh	r2, [r3, #18]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f32:	829a      	strh	r2, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f3a:	82da      	strh	r2, [r3, #22]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f42:	831a      	strh	r2, [r3, #24]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f4a:	835a      	strh	r2, [r3, #26]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f52:	839a      	strh	r2, [r3, #28]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f5a:	83da      	strh	r2, [r3, #30]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3340      	adds	r3, #64	; 0x40
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff9d 	bl	8001ea0 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	334c      	adds	r3, #76	; 0x4c
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff98 	bl	8001ea0 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3358      	adds	r3, #88	; 0x58
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ffb9 	bl	8001eec <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>
{
	this->hcanx_ = hcanx;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
}
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	080287f8 	.word	0x080287f8

08001f90 <_ZN4BG95D1Ev>:
	//this->Txid_ = Txid;
	//this->Rxid_ = Rxid;
}

// TODO Auto-generated destructor stub.
BG95::~BG95()
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <_ZN4BG95D1Ev+0x3c>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	601a      	str	r2, [r3, #0]
{
	//if you using heap memory, delete all in this function
	HAL_CAN_DeInitialization();
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fc07 	bl	80027b2 <_ZN4BG9524HAL_CAN_DeInitializationEv>
BG95::~BG95()
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3358      	adds	r3, #88	; 0x58
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fd08 	bl	80029be <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	334c      	adds	r3, #76	; 0x4c
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fcb3 	bl	800291e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3340      	adds	r3, #64	; 0x40
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fcae 	bl	800291e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
}
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	080287f8 	.word	0x080287f8

08001fd0 <_ZN4BG95D0Ev>:
BG95::~BG95()
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
}
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ffd9 	bl	8001f90 <_ZN4BG95D1Ev>
 8001fde:	2164      	movs	r1, #100	; 0x64
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f020 fc57 	bl	8022894 <_ZdlPvj>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <_ZN4BG9519TransmitSendRequestEv>:


//--------------------------------------------------------------------send or read function
uint16_t BG95::TransmitSendRequest()
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b091      	sub	sp, #68	; 0x44
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	CAN_WData_HandleTypeDef temp_DATA = {0};
 8001ff8:	4b4f      	ldr	r3, [pc, #316]	; (8002138 <_ZN4BG9519TransmitSendRequestEv+0x148>)
 8001ffa:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001ffe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = {0,};
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox;
	uint8_t state = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if(!(AsyncRequestQueue.empty())) {temp_DATA =  AsyncRequestQueue.front();}
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3340      	adds	r3, #64	; 0x40
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fcec 	bl	80029f4 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 800201c:	4603      	mov	r3, r0
 800201e:	f083 0301 	eor.w	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00b      	beq.n	8002040 <_ZN4BG9519TransmitSendRequestEv+0x50>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3340      	adds	r3, #64	; 0x40
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fcfc 	bl	8002a2a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>
 8002032:	4603      	mov	r3, r0
 8002034:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002038:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800203a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800203e:	e015      	b.n	800206c <_ZN4BG9519TransmitSendRequestEv+0x7c>
	else if(!(RequestQueue.empty())) {temp_DATA =  RequestQueue.front();}
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	334c      	adds	r3, #76	; 0x4c
 8002044:	4618      	mov	r0, r3
 8002046:	f000 fcd5 	bl	80029f4 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 800204a:	4603      	mov	r3, r0
 800204c:	f083 0301 	eor.w	r3, r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <_ZN4BG9519TransmitSendRequestEv+0x7c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	334c      	adds	r3, #76	; 0x4c
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fce5 	bl	8002a2a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>
 8002060:	4603      	mov	r3, r0
 8002062:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Configure Transmission process */
	TxHeader.StdId = this->nodeid_ + temp_DATA.txid_;                 // Standard Identifier, 0 ~ 0x7FF
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	891b      	ldrh	r3, [r3, #8]
 8002070:	461a      	mov	r2, r3
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	4413      	add	r3, r2
 8002076:	617b      	str	r3, [r7, #20]
	TxHeader.ExtId = 0x01;                							  // Extended Identifier, 0 ~ 0x1FFFFFFF
 8002078:	2301      	movs	r3, #1
 800207a:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;          							  // frame type, DATA or REMOTE
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
	TxHeader.IDE = CAN_ID_STD;            							  // identifier type, STD or EXT
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
	TxHeader.DLC = temp_DATA.data_length_;                   	      // data length, 0 ~ 8 byte
 8002084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.TransmitGlobalTime = DISABLE;  					      // timestamp counter capture.
 8002088:	2300      	movs	r3, #0
 800208a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	/* Set the data to be transmitted */
	std::copy(temp_DATA.write_Data_Byte_, temp_DATA.write_Data_Byte_ + temp_DATA.data_length_, TxData);
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	461a      	mov	r2, r3
 8002092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002096:	3308      	adds	r3, #8
 8002098:	1899      	adds	r1, r3, r2
 800209a:	f107 020c 	add.w	r2, r7, #12
 800209e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a2:	3308      	adds	r3, #8
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 fcd3 	bl	8002a50 <_ZSt4copyIPhS0_ET0_T_S2_S1_>

	/*request transmission of a message*/
	state = HAL_CANTransmit(this->hcanx_, &TxHeader, (unsigned char*)TxData,  &TxMailbox);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6858      	ldr	r0, [r3, #4]
 80020ae:	f107 0308 	add.w	r3, r7, #8
 80020b2:	f107 020c 	add.w	r2, r7, #12
 80020b6:	f107 0114 	add.w	r1, r7, #20
 80020ba:	f007 fe21 	bl	8009d00 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm>
 80020be:	4603      	mov	r3, r0
 80020c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* Monitor the Tx mailboxes availability until at least one Tx mailbox is free*/
	while(HAL_CAN_GetTxMailboxesFreeLevel(this->hcanx_) != 3);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f009 f95e 	bl	800b38a <HAL_CAN_GetTxMailboxesFreeLevel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d000      	beq.n	80020e0 <_ZN4BG9519TransmitSendRequestEv+0xf0>
 80020de:	e7f1      	b.n	80020c4 <_ZN4BG9519TransmitSendRequestEv+0xd4>

	//waiting for message to leave
	while((HAL_CAN_IsTxMessagePending((this->hcanx_) , TxMailbox)));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f009 f983 	bl	800b3f4 <HAL_CAN_IsTxMessagePending>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d000      	beq.n	8002100 <_ZN4BG9519TransmitSendRequestEv+0x110>
 80020fe:	e7ef      	b.n	80020e0 <_ZN4BG9519TransmitSendRequestEv+0xf0>

	//waiting for transmission request to be completed by checking RQCPx
	while( !(hcanx_->Instance->TSR & ( 0x1 << (7 * ( TxMailbox - 1 )))));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6899      	ldr	r1, [r3, #8]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	3b07      	subs	r3, #7
 8002112:	2201      	movs	r2, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	400b      	ands	r3, r1
 800211a:	2b00      	cmp	r3, #0
 800211c:	bf0c      	ite	eq
 800211e:	2301      	moveq	r3, #1
 8002120:	2300      	movne	r3, #0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d000      	beq.n	800212a <_ZN4BG9519TransmitSendRequestEv+0x13a>
 8002128:	e7ea      	b.n	8002100 <_ZN4BG9519TransmitSendRequestEv+0x110>

	return state;
 800212a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800212e:	b29b      	uxth	r3, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	3744      	adds	r7, #68	; 0x44
 8002134:	46bd      	mov	sp, r7
 8002136:	bd90      	pop	{r4, r7, pc}
 8002138:	08025058 	.word	0x08025058

0800213c <_ZN23CAN_RData_HandleTypeDefC1Ev>:
typedef struct
{
	int rxid_;
	int data_length_;
	unsigned char read_Data_Byte_[8] = {0,};
} CAN_RData_HandleTypeDef;
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3308      	adds	r3, #8
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_ZN4BG9523TransmitReceiveResponseEv>:

uint16_t BG95::TransmitReceiveResponse()
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b094      	sub	sp, #80	; 0x50
 8002160:	af02      	add	r7, sp, #8
 8002162:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;

	uint8_t RxData[8] = {0,};
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
	uint8_t state = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	CAN_RData_HandleTypeDef cal_data;
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ffe0 	bl	800213c <_ZN23CAN_RData_HandleTypeDefC1Ev>

	/* Configure Receive process */
	//state = HAL_CANReceive(hcanx_, &RxHeader, (unsigned char*)RxData);

	/* Monitoring queue until at least one message is received */
	if(HAL_CAN_GetRxFifoFillLevel(this->hcanx_, CAN_RX_FIFO0) == 0) return HAL_ERROR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f009 fa6c 	bl	800b660 <HAL_CAN_GetRxFifoFillLevel>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	bf0c      	ite	eq
 800218e:	2301      	moveq	r3, #1
 8002190:	2300      	movne	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <_ZN4BG9523TransmitReceiveResponseEv+0x40>
 8002198:	2301      	movs	r3, #1
 800219a:	e032      	b.n	8002202 <_ZN4BG9523TransmitReceiveResponseEv+0xa6>
	//while(HAL_CAN_GetRxFifoFillLevel(this->hcanx_, CAN_RX_FIFO0) != 1)

	/* Configure Receive process */
	state = HAL_CANReceive(this->hcanx_, &RxHeader, (unsigned char*)RxData);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f107 021c 	add.w	r2, r7, #28
 80021a4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80021a8:	4618      	mov	r0, r3
 80021aa:	f007 fdbb 	bl	8009d24 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43



	/*if data is vaild*/
	if(state == HAL_OK)
 80021b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d11f      	bne.n	80021fc <_ZN4BG9523TransmitReceiveResponseEv+0xa0>
	{

		cal_data.rxid_ = RxHeader.StdId;
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	60fb      	str	r3, [r7, #12]

		cal_data.data_length_ = RxHeader.DLC;
 80021c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c2:	613b      	str	r3, [r7, #16]

		for(int i =0; i<=7; i++) cal_data.read_Data_Byte_[i] = RxData[i];
 80021c4:	2300      	movs	r3, #0
 80021c6:	647b      	str	r3, [r7, #68]	; 0x44
 80021c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ca:	2b07      	cmp	r3, #7
 80021cc:	dc0e      	bgt.n	80021ec <_ZN4BG9523TransmitReceiveResponseEv+0x90>
 80021ce:	f107 021c 	add.w	r2, r7, #28
 80021d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021d4:	4413      	add	r3, r2
 80021d6:	7819      	ldrb	r1, [r3, #0]
 80021d8:	f107 0214 	add.w	r2, r7, #20
 80021dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021de:	4413      	add	r3, r2
 80021e0:	460a      	mov	r2, r1
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e6:	3301      	adds	r3, #1
 80021e8:	647b      	str	r3, [r7, #68]	; 0x44
 80021ea:	e7ed      	b.n	80021c8 <_ZN4BG9523TransmitReceiveResponseEv+0x6c>

		//std::copy(cal_data.read_Data_Byte_,
		//		cal_data.read_Data_Byte_ + cal_data.data_length_, RxData);

		QueueSaveReceive(cal_data);
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fa82 	bl	8002700 <_ZN4BG9516QueueSaveReceiveE23CAN_RData_HandleTypeDef>

		//std::copy(RequestQueue.front().read_Data_Byte_,
		//		RequestQueue.front().read_Data_Byte_ + RequestQueue.front().data_length_, RxData);
	}

	return state;
 80021fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002200:	b29b      	uxth	r3, r3
}
 8002202:	4618      	mov	r0, r3
 8002204:	3748      	adds	r7, #72	; 0x48
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_ZN23CAN_WData_HandleTypeDefC1Ev>:
} CAN_WData_HandleTypeDef;
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3308      	adds	r3, #8
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <_ZN4BG9516WriteDataEnqueueEiii>:

//---------------------------------------------------------------Command queue functions
//queue system functions
void BG95::WriteDataEnqueue(int index, int subindex, int data)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b090      	sub	sp, #64	; 0x40
 800222e:	af02      	add	r7, sp, #8
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	603b      	str	r3, [r7, #0]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ffe4 	bl	800220a <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int txid;
	int index_ = index;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
	int subindex_ = subindex;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
	int data_ = data;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	623b      	str	r3, [r7, #32]
	int data_size_  = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	633b      	str	r3, [r7, #48]	; 0x30

	/*to check data byte size*/
	if(data_ > 0xffff) { data_size_ = 4;}
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002258:	db02      	blt.n	8002260 <_ZN4BG9516WriteDataEnqueueEiii+0x36>
 800225a:	2304      	movs	r3, #4
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
 800225e:	e007      	b.n	8002270 <_ZN4BG9516WriteDataEnqueueEiii+0x46>
	else if(data_ > 0xff) {data_size_ = 2;}
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	2bff      	cmp	r3, #255	; 0xff
 8002264:	dd02      	ble.n	800226c <_ZN4BG9516WriteDataEnqueueEiii+0x42>
 8002266:	2302      	movs	r3, #2
 8002268:	633b      	str	r3, [r7, #48]	; 0x30
 800226a:	e001      	b.n	8002270 <_ZN4BG9516WriteDataEnqueueEiii+0x46>
	else { data_size_ = 1;}
 800226c:	2301      	movs	r3, #1
 800226e:	633b      	str	r3, [r7, #48]	; 0x30

	/*to confirm the command byte*/
	switch(data_size_)
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	2b04      	cmp	r3, #4
 8002274:	d00f      	beq.n	8002296 <_ZN4BG9516WriteDataEnqueueEiii+0x6c>
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	2b04      	cmp	r3, #4
 800227a:	dc0f      	bgt.n	800229c <_ZN4BG9516WriteDataEnqueueEiii+0x72>
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	2b01      	cmp	r3, #1
 8002280:	d003      	beq.n	800228a <_ZN4BG9516WriteDataEnqueueEiii+0x60>
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	2b02      	cmp	r3, #2
 8002286:	d003      	beq.n	8002290 <_ZN4BG9516WriteDataEnqueueEiii+0x66>
 8002288:	e008      	b.n	800229c <_ZN4BG9516WriteDataEnqueueEiii+0x72>
	{
		case 1: txid = 0x2f; break;
 800228a:	232f      	movs	r3, #47	; 0x2f
 800228c:	637b      	str	r3, [r7, #52]	; 0x34
 800228e:	e008      	b.n	80022a2 <_ZN4BG9516WriteDataEnqueueEiii+0x78>
		case 2: txid = 0x2b; break;
 8002290:	232b      	movs	r3, #43	; 0x2b
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
 8002294:	e005      	b.n	80022a2 <_ZN4BG9516WriteDataEnqueueEiii+0x78>
		case 4: txid = 0x23; break;
 8002296:	2323      	movs	r3, #35	; 0x23
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
 800229a:	e002      	b.n	80022a2 <_ZN4BG9516WriteDataEnqueueEiii+0x78>
		default: txid = 0x22; break;
 800229c:	2322      	movs	r3, #34	; 0x22
 800229e:	637b      	str	r3, [r7, #52]	; 0x34
 80022a0:	bf00      	nop
	}

	/*input the data to buffer*/
	cal_data.txid_ = 0x600;   //SDO
 80022a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022a6:	613b      	str	r3, [r7, #16]
	cal_data.data_length_ = 8;
 80022a8:	2308      	movs	r3, #8
 80022aa:	617b      	str	r3, [r7, #20]

	cal_data.write_Data_Byte_[0] = txid;    					//command byte(4bytes fixed)
 80022ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	763b      	strb	r3, [r7, #24]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	767b      	strb	r3, [r7, #25]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	121b      	asrs	r3, r3, #8
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	76bb      	strb	r3, [r7, #26]
	cal_data.write_Data_Byte_[3] = subindex_;					//sub Index
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	76fb      	strb	r3, [r7, #27]

	if(data !=0)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d015      	beq.n	80022f8 <_ZN4BG9516WriteDataEnqueueEiii+0xce>
	{
		for(int i = 4; i <= 7; i++) cal_data.write_Data_Byte_[i] = ((data_ >> (8 * (i - 4))) & 0xff);
 80022cc:	2304      	movs	r3, #4
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d2:	2b07      	cmp	r3, #7
 80022d4:	dc10      	bgt.n	80022f8 <_ZN4BG9516WriteDataEnqueueEiii+0xce>
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	3b04      	subs	r3, #4
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	6a3a      	ldr	r2, [r7, #32]
 80022de:	fa42 f303 	asr.w	r3, r2, r3
 80022e2:	b2d9      	uxtb	r1, r3
 80022e4:	f107 0218 	add.w	r2, r7, #24
 80022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ea:	4413      	add	r3, r2
 80022ec:	460a      	mov	r2, r1
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f2:	3301      	adds	r3, #1
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f6:	e7eb      	b.n	80022d0 <_ZN4BG9516WriteDataEnqueueEiii+0xa6>
	}

	/*Register data from buffer*/
	QueueSaveRequest(cal_data);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 f999 	bl	800263a <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>
}
 8002308:	bf00      	nop
 800230a:	3738      	adds	r7, #56	; 0x38
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>:

void BG95::AsyncWriteDataEnqueue(int index, int subindex, int data)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b090      	sub	sp, #64	; 0x40
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 800231e:	f107 0310 	add.w	r3, r7, #16
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff71 	bl	800220a <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int txid;
	int index_ = index;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int subindex_ = subindex;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
	int data_ = data;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
	int data_size_  = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	623b      	str	r3, [r7, #32]


	/*to confirm the command byte*/
	switch(data_size_)
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	2b04      	cmp	r3, #4
 800233c:	d00f      	beq.n	800235e <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x4e>
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	2b04      	cmp	r3, #4
 8002342:	dc0f      	bgt.n	8002364 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x54>
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d003      	beq.n	8002352 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x42>
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d003      	beq.n	8002358 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x48>
 8002350:	e008      	b.n	8002364 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x54>
	{
		case 1: txid = 0x2f; break;
 8002352:	232f      	movs	r3, #47	; 0x2f
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
 8002356:	e008      	b.n	800236a <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x5a>
		case 2: txid = 0x2b; break;
 8002358:	232b      	movs	r3, #43	; 0x2b
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
 800235c:	e005      	b.n	800236a <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x5a>
		case 4: txid = 0x23; break;
 800235e:	2323      	movs	r3, #35	; 0x23
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
 8002362:	e002      	b.n	800236a <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x5a>
		default: txid = 0x22; break;
 8002364:	2322      	movs	r3, #34	; 0x22
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
 8002368:	bf00      	nop
	}

	/*input the data to buffer*/
	cal_data.txid_ = 0x600;
 800236a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800236e:	613b      	str	r3, [r7, #16]
	cal_data.data_length_ = 8;
 8002370:	2308      	movs	r3, #8
 8002372:	617b      	str	r3, [r7, #20]

	cal_data.write_Data_Byte_[0] = txid;    					//command byte(4bytes fixed)
 8002374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002376:	b2db      	uxtb	r3, r3
 8002378:	763b      	strb	r3, [r7, #24]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 800237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237c:	b2db      	uxtb	r3, r3
 800237e:	767b      	strb	r3, [r7, #25]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 8002380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002382:	121b      	asrs	r3, r3, #8
 8002384:	b2db      	uxtb	r3, r3
 8002386:	76bb      	strb	r3, [r7, #26]
	cal_data.write_Data_Byte_[3] = subindex_;					//sub Index
 8002388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238a:	b2db      	uxtb	r3, r3
 800238c:	76fb      	strb	r3, [r7, #27]

	if(data !=0)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d015      	beq.n	80023c0 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0xb0>
	{
		for(int i = 4; i <= 7; i++) cal_data.write_Data_Byte_[i] = ((data_ >> (8 * (i - 4))) & 0xff);
 8002394:	2304      	movs	r3, #4
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
 8002398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239a:	2b07      	cmp	r3, #7
 800239c:	dc10      	bgt.n	80023c0 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0xb0>
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	3b04      	subs	r3, #4
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a6:	fa42 f303 	asr.w	r3, r2, r3
 80023aa:	b2d9      	uxtb	r1, r3
 80023ac:	f107 0218 	add.w	r2, r7, #24
 80023b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b2:	4413      	add	r3, r2
 80023b4:	460a      	mov	r2, r1
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	3301      	adds	r3, #1
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
 80023be:	e7eb      	b.n	8002398 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x88>
	}

	/*Register data from buffer*/
	AsyncQueueSaveRequest(cal_data);
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	f107 0310 	add.w	r3, r7, #16
 80023c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f91d 	bl	800260a <_ZN4BG9521AsyncQueueSaveRequestE23CAN_WData_HandleTypeDef>
}
 80023d0:	bf00      	nop
 80023d2:	3738      	adds	r7, #56	; 0x38
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_ZN4BG9515ReadDataEnqueueEiii>:

void BG95::ReadDataEnqueue(int index, int subindex, int data)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08e      	sub	sp, #56	; 0x38
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff0d 	bl	800220a <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int index_ = index;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
	int data_ = data;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24

	/*input the data to buffer*/
	cal_data.txid_ = 0x600;
 80023f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023fc:	617b      	str	r3, [r7, #20]
	cal_data.data_length_ = 8;
 80023fe:	2308      	movs	r3, #8
 8002400:	61bb      	str	r3, [r7, #24]

	cal_data.write_Data_Byte_[0] = 0x40;    					//command byte(4bytes fixed)
 8002402:	2340      	movs	r3, #64	; 0x40
 8002404:	773b      	strb	r3, [r7, #28]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	b2db      	uxtb	r3, r3
 800240a:	777b      	strb	r3, [r7, #29]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	121b      	asrs	r3, r3, #8
 8002410:	b2db      	uxtb	r3, r3
 8002412:	77bb      	strb	r3, [r7, #30]
	cal_data.write_Data_Byte_[3] = subindex;					//sub Index
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	77fb      	strb	r3, [r7, #31]

	if(data !=0)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d015      	beq.n	800244c <_ZN4BG9515ReadDataEnqueueEiii+0x74>
	{
		for(int i = 4; i<=7; i++) cal_data.write_Data_Byte_[i] = ((data_ >> (8 * (i - 4))) & 0xff);
 8002420:	2304      	movs	r3, #4
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	2b07      	cmp	r3, #7
 8002428:	dc10      	bgt.n	800244c <_ZN4BG9515ReadDataEnqueueEiii+0x74>
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	3b04      	subs	r3, #4
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002432:	fa42 f303 	asr.w	r3, r2, r3
 8002436:	b2d9      	uxtb	r1, r3
 8002438:	f107 021c 	add.w	r2, r7, #28
 800243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243e:	4413      	add	r3, r2
 8002440:	460a      	mov	r2, r1
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	3301      	adds	r3, #1
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800244a:	e7eb      	b.n	8002424 <_ZN4BG9515ReadDataEnqueueEiii+0x4c>
	}

	/*Register data from buffer*/
	QueueSaveRequest(cal_data);
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f8ef 	bl	800263a <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>
}
 800245c:	bf00      	nop
 800245e:	3730      	adds	r7, #48	; 0x30
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_ZN4BG9512DataAnalysisEv>:

/*this function is just hardcode. not a final version*/
void BG95::DataAnalysis()
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b08b      	sub	sp, #44	; 0x2c
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	//1.check Receive queue
	if((ReceiveQueue.empty())) return;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3358      	adds	r3, #88	; 0x58
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fb05 	bl	8002a80 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d144      	bne.n	8002506 <_ZN4BG9512DataAnalysisEv+0xa2>

	CAN_RData_HandleTypeDef cal_data = ReceiveQueue.front();
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3358      	adds	r3, #88	; 0x58
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fb18 	bl	8002ab6 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>
 8002486:	4603      	mov	r3, r0
 8002488:	f107 040c 	add.w	r4, r7, #12
 800248c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800248e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int index = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
	int subindex = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
	int data = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]

	//2.check commandbyte is matched(sdo)
	if(cal_data.rxid_ != (this->nodeid_ + 0x580) ) return;
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	891b      	ldrh	r3, [r3, #8]
 80024a4:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d12e      	bne.n	800250a <_ZN4BG9512DataAnalysisEv+0xa6>


	//3.only check read function for now
	if(!( cal_data.read_Data_Byte_[0] >= 0x40 && cal_data.read_Data_Byte_[0] <= 0x4f )) return;
 80024ac:	7d3b      	ldrb	r3, [r7, #20]
 80024ae:	2b3f      	cmp	r3, #63	; 0x3f
 80024b0:	d92d      	bls.n	800250e <_ZN4BG9512DataAnalysisEv+0xaa>
 80024b2:	7d3b      	ldrb	r3, [r7, #20]
 80024b4:	2b4f      	cmp	r3, #79	; 0x4f
 80024b6:	d82a      	bhi.n	800250e <_ZN4BG9512DataAnalysisEv+0xaa>

	//4.
	//index |= cal_data.read_Data_Byte_[1] & 0x00ff;
	//index |= cal_data.read_Data_Byte_[2] & 0xff00 ;
	index |= cal_data.read_Data_Byte_[1];
 80024b8:	7d7b      	ldrb	r3, [r7, #21]
 80024ba:	461a      	mov	r2, r3
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	4313      	orrs	r3, r2
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
	index |= cal_data.read_Data_Byte_[2] * 256 ;
 80024c2:	7dbb      	ldrb	r3, [r7, #22]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c8:	4313      	orrs	r3, r2
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24

	//5.
	subindex = cal_data.read_Data_Byte_[3];
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	623b      	str	r3, [r7, #32]

	//6.
	data |= cal_data.read_Data_Byte_[4];
 80024d0:	7e3b      	ldrb	r3, [r7, #24]
 80024d2:	461a      	mov	r2, r3
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61fb      	str	r3, [r7, #28]
	data |= cal_data.read_Data_Byte_[5] *  256 ;
 80024da:	7e7b      	ldrb	r3, [r7, #25]
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61fb      	str	r3, [r7, #28]
	data |= cal_data.read_Data_Byte_[6] *  512 ;
 80024e4:	7ebb      	ldrb	r3, [r7, #26]
 80024e6:	025b      	lsls	r3, r3, #9
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61fb      	str	r3, [r7, #28]
	data |= cal_data.read_Data_Byte_[7] *  1024 ;
 80024ee:	7efb      	ldrb	r3, [r7, #27]
 80024f0:	029b      	lsls	r3, r3, #10
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61fb      	str	r3, [r7, #28]

	DataProcess(index, subindex, data);
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	6a3a      	ldr	r2, [r7, #32]
 80024fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f809 	bl	8002516 <_ZN4BG9511DataProcessEiii>
 8002504:	e004      	b.n	8002510 <_ZN4BG9512DataAnalysisEv+0xac>
	if((ReceiveQueue.empty())) return;
 8002506:	bf00      	nop
 8002508:	e002      	b.n	8002510 <_ZN4BG9512DataAnalysisEv+0xac>
	if(cal_data.rxid_ != (this->nodeid_ + 0x580) ) return;
 800250a:	bf00      	nop
 800250c:	e000      	b.n	8002510 <_ZN4BG9512DataAnalysisEv+0xac>
	if(!( cal_data.read_Data_Byte_[0] >= 0x40 && cal_data.read_Data_Byte_[0] <= 0x4f )) return;
 800250e:	bf00      	nop
}
 8002510:	372c      	adds	r7, #44	; 0x2c
 8002512:	46bd      	mov	sp, r7
 8002514:	bd90      	pop	{r4, r7, pc}

08002516 <_ZN4BG9511DataProcessEiii>:

void BG95::DataProcess(int index, int subindex, int data)
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	603b      	str	r3, [r7, #0]
	switch(index)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f643 2204 	movw	r2, #14852	; 0x3a04
 800252a:	4293      	cmp	r3, r2
 800252c:	d04b      	beq.n	80025c6 <_ZN4BG9511DataProcessEiii+0xb0>
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f643 2204 	movw	r2, #14852	; 0x3a04
 8002534:	4293      	cmp	r3, r2
 8002536:	dc62      	bgt.n	80025fe <_ZN4BG9511DataProcessEiii+0xe8>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f643 126a 	movw	r2, #14698	; 0x396a
 800253e:	4293      	cmp	r3, r2
 8002540:	d03d      	beq.n	80025be <_ZN4BG9511DataProcessEiii+0xa8>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f643 126a 	movw	r2, #14698	; 0x396a
 8002548:	4293      	cmp	r3, r2
 800254a:	dc58      	bgt.n	80025fe <_ZN4BG9511DataProcessEiii+0xe8>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f243 3242 	movw	r2, #13122	; 0x3342
 8002552:	4293      	cmp	r3, r2
 8002554:	d042      	beq.n	80025dc <_ZN4BG9511DataProcessEiii+0xc6>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f243 3242 	movw	r2, #13122	; 0x3342
 800255c:	4293      	cmp	r3, r2
 800255e:	dc4e      	bgt.n	80025fe <_ZN4BG9511DataProcessEiii+0xe8>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f5b3 5f4d 	cmp.w	r3, #13120	; 0x3340
 8002566:	d035      	beq.n	80025d4 <_ZN4BG9511DataProcessEiii+0xbe>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f5b3 5f4d 	cmp.w	r3, #13120	; 0x3340
 800256e:	dc46      	bgt.n	80025fe <_ZN4BG9511DataProcessEiii+0xe8>
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f243 1213 	movw	r2, #12563	; 0x3113
 8002576:	4293      	cmp	r3, r2
 8002578:	d01d      	beq.n	80025b6 <_ZN4BG9511DataProcessEiii+0xa0>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f243 1213 	movw	r2, #12563	; 0x3113
 8002580:	4293      	cmp	r3, r2
 8002582:	dc3c      	bgt.n	80025fe <_ZN4BG9511DataProcessEiii+0xe8>
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f243 1211 	movw	r2, #12561	; 0x3111
 800258a:	4293      	cmp	r3, r2
 800258c:	d00f      	beq.n	80025ae <_ZN4BG9511DataProcessEiii+0x98>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f243 1211 	movw	r2, #12561	; 0x3111
 8002594:	4293      	cmp	r3, r2
 8002596:	dc32      	bgt.n	80025fe <_ZN4BG9511DataProcessEiii+0xe8>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f243 0201 	movw	r2, #12289	; 0x3001
 800259e:	4293      	cmp	r3, r2
 80025a0:	d020      	beq.n	80025e4 <_ZN4BG9511DataProcessEiii+0xce>
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f243 0202 	movw	r2, #12290	; 0x3002
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d021      	beq.n	80025f0 <_ZN4BG9511DataProcessEiii+0xda>
		case 0x3342: this->motor_dec_ = data; break;
		case 0x3001: this->err_data_ = (uint16_t)data ; break;
		case 0x3002: this->stat_reg_ = (uint16_t)data ; break;

	}
}
 80025ac:	e027      	b.n	80025fe <_ZN4BG9511DataProcessEiii+0xe8>
		case 0x3111: this->motor_voltage_ = data ; break;
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	621a      	str	r2, [r3, #32]
 80025b4:	e023      	b.n	80025fe <_ZN4BG9511DataProcessEiii+0xe8>
		case 0x3113: this->motor_current_ = data ; break;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24
 80025bc:	e01f      	b.n	80025fe <_ZN4BG9511DataProcessEiii+0xe8>
		case 0x396a: this->motor_pos_ = data ; break;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28
 80025c4:	e01b      	b.n	80025fe <_ZN4BG9511DataProcessEiii+0xe8>
			if(subindex == 1) this->motor_vel_ = data ;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d117      	bne.n	80025fc <_ZN4BG9511DataProcessEiii+0xe6>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 80025d2:	e013      	b.n	80025fc <_ZN4BG9511DataProcessEiii+0xe6>
		case 0x3340: this->motor_acc_ = data; break;
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
 80025da:	e010      	b.n	80025fe <_ZN4BG9511DataProcessEiii+0xe8>
		case 0x3342: this->motor_dec_ = data; break;
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34
 80025e2:	e00c      	b.n	80025fe <_ZN4BG9511DataProcessEiii+0xe8>
		case 0x3001: this->err_data_ = (uint16_t)data ; break;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80025ee:	e006      	b.n	80025fe <_ZN4BG9511DataProcessEiii+0xe8>
		case 0x3002: this->stat_reg_ = (uint16_t)data ; break;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	639a      	str	r2, [r3, #56]	; 0x38
 80025fa:	e000      	b.n	80025fe <_ZN4BG9511DataProcessEiii+0xe8>
			break;
 80025fc:	bf00      	nop
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <_ZN4BG9521AsyncQueueSaveRequestE23CAN_WData_HandleTypeDef>:




void BG95::AsyncQueueSaveRequest(CAN_WData_HandleTypeDef cmd){this->AsyncRequestQueue.push_back(cmd);}
 800260a:	b084      	sub	sp, #16
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	f107 0014 	add.w	r0, r7, #20
 8002618:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3340      	adds	r3, #64	; 0x40
 8002620:	f107 0214 	add.w	r2, r7, #20
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fa58 	bl	8002adc <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002636:	b004      	add	sp, #16
 8002638:	4770      	bx	lr

0800263a <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>:

void BG95::QueueSaveRequest(CAN_WData_HandleTypeDef cmd){this->RequestQueue.push_back(cmd);}
 800263a:	b084      	sub	sp, #16
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	f107 0014 	add.w	r0, r7, #20
 8002648:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	334c      	adds	r3, #76	; 0x4c
 8002650:	f107 0214 	add.w	r2, r7, #20
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fa40 	bl	8002adc <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002666:	b004      	add	sp, #16
 8002668:	4770      	bx	lr

0800266a <_ZN4BG9518QueueDeleteRequestEv>:
void BG95::QueueDeleteRequest()
{
 800266a:	b590      	push	{r4, r7, lr}
 800266c:	b087      	sub	sp, #28
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
	/*temporary code*/
	if(!(AsyncRequestQueue.empty())) {this->AsyncRequestQueue.erase(AsyncRequestQueue.begin());}
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3340      	adds	r3, #64	; 0x40
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f9bc 	bl	80029f4 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 800267c:	4603      	mov	r3, r0
 800267e:	f083 0301 	eor.w	r3, r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d016      	beq.n	80026b6 <_ZN4BG9518QueueDeleteRequestEv+0x4c>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3340      	adds	r3, #64	; 0x40
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fa48 	bl	8002b28 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8002698:	4603      	mov	r3, r0
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	f107 020c 	add.w	r2, r7, #12
 80026a0:	f107 0308 	add.w	r3, r7, #8
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fa4e 	bl	8002b48 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	4620      	mov	r0, r4
 80026b0:	f000 fa5b 	bl	8002b6a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
	else {if(!(RequestQueue.empty())) {this->RequestQueue.erase(RequestQueue.begin());}}


}
 80026b4:	e020      	b.n	80026f8 <_ZN4BG9518QueueDeleteRequestEv+0x8e>
	else {if(!(RequestQueue.empty())) {this->RequestQueue.erase(RequestQueue.begin());}}
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	334c      	adds	r3, #76	; 0x4c
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f99a 	bl	80029f4 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f083 0301 	eor.w	r3, r3, #1
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d015      	beq.n	80026f8 <_ZN4BG9518QueueDeleteRequestEv+0x8e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	334c      	adds	r3, #76	; 0x4c
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fa26 	bl	8002b28 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 80026dc:	4603      	mov	r3, r0
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	f107 0214 	add.w	r2, r7, #20
 80026e4:	f107 0310 	add.w	r3, r7, #16
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fa2c 	bl	8002b48 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 80026f0:	6939      	ldr	r1, [r7, #16]
 80026f2:	4620      	mov	r0, r4
 80026f4:	f000 fa39 	bl	8002b6a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
}
 80026f8:	bf00      	nop
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd90      	pop	{r4, r7, pc}

08002700 <_ZN4BG9516QueueSaveReceiveE23CAN_RData_HandleTypeDef>:


void BG95::QueueSaveReceive(CAN_RData_HandleTypeDef cmd){this->ReceiveQueue.push_back(cmd);}
 8002700:	b084      	sub	sp, #16
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	f107 0014 	add.w	r0, r7, #20
 800270e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3358      	adds	r3, #88	; 0x58
 8002716:	f107 0214 	add.w	r2, r7, #20
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fa4b 	bl	8002bb8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_>
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800272c:	b004      	add	sp, #16
 800272e:	4770      	bx	lr

08002730 <_ZN4BG9518QueueDeleteReceiveEv>:
void BG95::QueueDeleteReceive()
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	if(!(ReceiveQueue.empty())) {this->ReceiveQueue.erase(ReceiveQueue.begin());}
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3358      	adds	r3, #88	; 0x58
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f99f 	bl	8002a80 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>
 8002742:	4603      	mov	r3, r0
 8002744:	f083 0301 	eor.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d015      	beq.n	800277a <_ZN4BG9518QueueDeleteReceiveEv+0x4a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3358      	adds	r3, #88	; 0x58
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fa53 	bl	8002c04 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 800275e:	4603      	mov	r3, r0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	f107 020c 	add.w	r2, r7, #12
 8002766:	f107 0308 	add.w	r3, r7, #8
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fa59 	bl	8002c24 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	4620      	mov	r0, r4
 8002776:	f000 fa66 	bl	8002c46 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	bd90      	pop	{r4, r7, pc}

08002782 <_ZN4BG9522HAL_CAN_InitializationEv>:



//--------------------------------------------------------------------initialization
void BG95::HAL_CAN_Initialization()
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
	/* Can Start */
	/* Activate CAN RX notification */
	if ((HAL_CAN_Start(this->hcanx_) != HAL_OK))// ||
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4618      	mov	r0, r3
 8002790:	f008 fc9e 	bl	800b0d0 <HAL_CAN_Start>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf14      	ite	ne
 800279a:	2301      	movne	r3, #1
 800279c:	2300      	moveq	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <_ZN4BG9522HAL_CAN_InitializationEv+0x28>
	//	(HAL_CAN_ActivateNotification(this->hcanx_, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK))
	{
		this->err_code_ = initfailed;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
	}
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <_ZN4BG9524HAL_CAN_DeInitializationEv>:

void BG95::HAL_CAN_DeInitialization()
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_Stop(this->hcanx_) != HAL_OK){} //this->err_code_ = initfailed;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4618      	mov	r0, r3
 80027c0:	f008 fcca 	bl	800b158 <HAL_CAN_Stop>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_ZN4BG959DriveInitEv>:


//--------------------------------------------------------------------Drive
void BG95::DriveInit()
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	/*test read function*/
	if(RequestQueue.empty()) ReadSchduleCommandEnqueue();
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	334c      	adds	r3, #76	; 0x4c
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f909 	bl	80029f4 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <_ZN4BG959DriveInitEv+0x1e>
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f002 f9cb 	bl	8004b84 <_ZN4BG9525ReadSchduleCommandEnqueueEv>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_ZN4BG959DriveCommEv>:


void BG95::DriveComm()
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
	//if(RequestQueue.empty()) return;

	if(TransmitSendRequest()!=HAL_OK)
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff fbf6 	bl	8001ff0 <_ZN4BG9519TransmitSendRequestEv>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	bf14      	ite	ne
 800280a:	2301      	movne	r3, #1
 800280c:	2300      	moveq	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <_ZN4BG959DriveCommEv+0x26>
	{
		this->comm_status_ = false;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	741a      	strb	r2, [r3, #16]
 800281a:	e002      	b.n	8002822 <_ZN4BG959DriveCommEv+0x2c>
		//return;
	}
	else
	{
		this->comm_status_ = true;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	741a      	strb	r2, [r3, #16]
		//return;
	}

	HAL_Delay(10);
 8002822:	200a      	movs	r0, #10
 8002824:	f008 fa54 	bl	800acd0 <HAL_Delay>

	if(TransmitReceiveResponse()!=HAL_OK)
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fc97 	bl	800215c <_ZN4BG9523TransmitReceiveResponseEv>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <_ZN4BG959DriveCommEv+0x50>
	{
		this->comm_status_ = false;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	741a      	strb	r2, [r3, #16]
	else
	{
		this->comm_status_ = true;
		//return;
	}
}
 8002844:	e002      	b.n	800284c <_ZN4BG959DriveCommEv+0x56>
		this->comm_status_ = true;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	741a      	strb	r2, [r3, #16]
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_ZN4BG9513DriveAnalysisEv>:

void BG95::DriveAnalysis()
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	DataAnalysis();
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff fe01 	bl	8002464 <_ZN4BG9512DataAnalysisEv>
	QueueDeleteRequest();
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ff01 	bl	800266a <_ZN4BG9518QueueDeleteRequestEv>
	QueueDeleteReceive();
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff61 	bl	8002730 <_ZN4BG9518QueueDeleteReceiveEv>
	//ProcessGetTotalInfo();
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <_ZN4BG9514InitializationEv>:

//--------------------------------------------------------------------Applications
//main functions

void BG95::Initialization()
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
	InitializeCommand();
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f002 f9c0 	bl	8004c04 <_ZN4BG9517InitializeCommandEv>

	HAL_CAN_Initialization();
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff7c 	bl	8002782 <_ZN4BG9522HAL_CAN_InitializationEv>

}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <_ZN4BG955DriveEv>:

}


void BG95::Drive()
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
	DriveInit();
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ff98 	bl	80027d0 <_ZN4BG959DriveInitEv>

	DriveComm();
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ffa8 	bl	80027f6 <_ZN4BG959DriveCommEv>

	DriveAnalysis();
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff ffd4 	bl	8002854 <_ZN4BG9513DriveAnalysisEv>
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f9e9 	bl	8002c94 <_ZNSaI23CAN_WData_HandleTypeDefEC1Ev>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 f9f1 	bl	8002cac <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_ZNSaI23CAN_WData_HandleTypeDefED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f9f9 	bl	8002cd4 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefED1Ev>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 8002904:	461a      	mov	r2, r3
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f9ef 	bl	8002cea <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      }
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff faad 	bl	8001e6e <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800291e:	b5b0      	push	{r4, r5, r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681c      	ldr	r4, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	f000 f9ed 	bl	8002d10 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002936:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002938:	461a      	mov	r2, r3
 800293a:	4629      	mov	r1, r5
 800293c:	4620      	mov	r0, r4
 800293e:	f000 f9f2 	bl	8002d26 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ffd1 	bl	80028ec <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bdb0      	pop	{r4, r5, r7, pc}

08002954 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f9f0 	bl	8002d42 <_ZNSaI23CAN_RData_HandleTypeDefEC1Ev>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4618      	mov	r0, r3
 8002966:	f000 f9f8 	bl	8002d5a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <_ZNSaI23CAN_RData_HandleTypeDefED1Ev>:
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 fa00 	bl	8002d82 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefED1Ev>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 80029a4:	461a      	mov	r2, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f9f6 	bl	8002d98 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      }
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fa83 	bl	8001eba <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80029be:	b5b0      	push	{r4, r5, r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681c      	ldr	r4, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 f9f4 	bl	8002dbe <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80029d6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80029d8:	461a      	mov	r2, r3
 80029da:	4629      	mov	r1, r5
 80029dc:	4620      	mov	r0, r4
 80029de:	f000 f9f9 	bl	8002dd4 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      }
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ffd1 	bl	800298c <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bdb0      	pop	{r4, r5, r7, pc}

080029f4 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %vector is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f9f7 	bl	8002df0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8002a02:	4603      	mov	r3, r0
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa02 	bl	8002e10 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	f107 020c 	add.w	r2, r7, #12
 8002a14:	f107 0308 	add.w	r3, r7, #8
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fa09 	bl	8002e32 <_ZN9__gnu_cxxeqIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %vector.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f878 	bl	8002b28 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 fa0e 	bl	8002e62 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>
 8002a46:	4603      	mov	r3, r0
      }
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fa0c 	bl	8002e7a <_ZSt12__miter_baseIPhET_S1_>
 8002a62:	4604      	mov	r4, r0
 8002a64:	68b8      	ldr	r0, [r7, #8]
 8002a66:	f000 fa08 	bl	8002e7a <_ZSt12__miter_baseIPhET_S1_>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4620      	mov	r0, r4
 8002a72:	f000 fa0d 	bl	8002e90 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8002a76:	4603      	mov	r3, r0
    }
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd90      	pop	{r4, r7, pc}

08002a80 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fa24 	bl	8002ed6 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fa2f 	bl	8002ef6 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	f107 020c 	add.w	r2, r7, #12
 8002aa0:	f107 0308 	add.w	r3, r7, #8
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fa36 	bl	8002f18 <_ZN9__gnu_cxxeqIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002aac:	4603      	mov	r3, r0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
	return *begin();
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f8a0 	bl	8002c04 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	f107 030c 	add.w	r3, r7, #12
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fa3b 	bl	8002f48 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>
 8002ad2:	4603      	mov	r3, r0
      }
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d00d      	beq.n	8002b0e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	4619      	mov	r1, r3
 8002afc:	f000 fa30 	bl	8002f60 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f103 0210 	add.w	r2, r3, #16
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8002b0c:	e008      	b.n	8002b20 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fa39 	bl	8002f86 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8002b14:	4603      	mov	r3, r0
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fa5a 	bl	8002fd4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	f107 030c 	add.w	r3, r7, #12
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fb07 	bl	800314c <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
      : _M_current(__i) { }

      // Allow iterator to const_iterator conversion
      template<typename _Iter>
        _GLIBCXX20_CONSTEXPR
        __normal_iterator(const __normal_iterator<_Iter,
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
			  typename __enable_if<
      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }
 8002b52:	6838      	ldr	r0, [r7, #0]
 8002b54:	f000 fb0a 	bl	800316c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ffd7 	bl	8002b28 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 faff 	bl	8003182 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE6cbeginEv>
 8002b84:	4603      	mov	r3, r0
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	f107 020c 	add.w	r2, r7, #12
 8002b8c:	463b      	mov	r3, r7
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fb06 	bl	80031a2 <_ZN9__gnu_cxxmiIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002b96:	4602      	mov	r2, r0
 8002b98:	f107 0308 	add.w	r3, r7, #8
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fb14 	bl	80031cc <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fb27 	bl	80031fc <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d00d      	beq.n	8002bea <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f000 fb4d 	bl	8003276 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f103 0210 	add.w	r2, r3, #16
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	605a      	str	r2, [r3, #4]
      }
 8002be8:	e008      	b.n	8002bfc <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fb56 	bl	800329c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fb78 	bl	80032ec <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 fc25 	bl	8003464 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8002c2e:	6838      	ldr	r0, [r7, #0]
 8002c30:	f000 fc28 	bl	8003484 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002c34:	4603      	mov	r3, r0
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>:
      erase(const_iterator __position)
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ffd7 	bl	8002c04 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8002c56:	4603      	mov	r3, r0
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fc1d 	bl	800349a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE6cbeginEv>
 8002c60:	4603      	mov	r3, r0
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	f107 020c 	add.w	r2, r7, #12
 8002c68:	463b      	mov	r3, r7
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fc24 	bl	80034ba <_ZN9__gnu_cxxmiIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002c72:	4602      	mov	r2, r0
 8002c74:	f107 0308 	add.w	r3, r7, #8
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fc32 	bl	80034e4 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4619      	mov	r1, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fc45 	bl	8003514 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_ZNSaI23CAN_WData_HandleTypeDefEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fc76 	bl	800358e <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefEC1Ev>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
	{ }
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
	if (__p)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fc4e 	bl	80035a4 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE10deallocateERS1_PS0_j>
      }
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fc44 	bl	80035c2 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefEvT_S2_>
    }
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <_ZNSaI23CAN_RData_HandleTypeDefEC1Ev>:
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fc46 	bl	80035dc <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefEC1Ev>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
	{ }
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefED1Ev>:
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
	if (__p)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fc1e 	bl	80035f2 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE10deallocateERS1_PS0_j>
      }
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fc14 	bl	8003610 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefEvT_S2_>
    }
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	f107 030c 	add.w	r3, r7, #12
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fc12 	bl	800362a <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	1d1a      	adds	r2, r3, #4
 8002e1c:	f107 030c 	add.w	r3, r7, #12
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fc01 	bl	800362a <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <_ZN9__gnu_cxxeqIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002e32:	b590      	push	{r4, r7, lr}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fc04 	bl	800364a <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002e42:	4603      	mov	r3, r0
 8002e44:	681c      	ldr	r4, [r3, #0]
 8002e46:	6838      	ldr	r0, [r7, #0]
 8002e48:	f000 fbff 	bl	800364a <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	429c      	cmp	r4, r3
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd90      	pop	{r4, r7, pc}

08002e62 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002e90:	b5b0      	push	{r4, r5, r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fbdf 	bl	8003660 <_ZSt12__niter_baseIPhET_S1_>
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	68b8      	ldr	r0, [r7, #8]
 8002ea6:	f000 fbdb 	bl	8003660 <_ZSt12__niter_baseIPhET_S1_>
 8002eaa:	4605      	mov	r5, r0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fbd6 	bl	8003660 <_ZSt12__niter_baseIPhET_S1_>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4629      	mov	r1, r5
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f000 fbdb 	bl	8003676 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fbe5 	bl	8003696 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8002ecc:	4603      	mov	r3, r0
    }
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bdb0      	pop	{r4, r5, r7, pc}

08002ed6 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	f107 030c 	add.w	r3, r7, #12
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fbe1 	bl	80036ae <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	1d1a      	adds	r2, r3, #4
 8002f02:	f107 030c 	add.w	r3, r7, #12
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fbd0 	bl	80036ae <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <_ZN9__gnu_cxxeqIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fbd3 	bl	80036ce <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	681c      	ldr	r4, [r3, #0]
 8002f2c:	6838      	ldr	r0, [r7, #0]
 8002f2e:	f000 fbce 	bl	80036ce <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002f32:	4603      	mov	r3, r0
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	429c      	cmp	r4, r3
 8002f38:	bf0c      	ite	eq
 8002f3a:	2301      	moveq	r3, #1
 8002f3c:	2300      	movne	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd90      	pop	{r4, r7, pc}

08002f48 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fbb9 	bl	80036e4 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8002f72:	4603      	mov	r3, r0
 8002f74:	461a      	mov	r2, r3
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 fbbe 	bl	80036fa <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	1d1a      	adds	r2, r3, #4
 8002f92:	f107 030c 	add.w	r3, r7, #12
 8002f96:	4611      	mov	r1, r2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 f8d7 	bl	800314c <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f805 	bl	8002fbe <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8002fb4:	4603      	mov	r3, r0
      }
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8002fc6:	2301      	movs	r3, #1
      }
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8002fd4:	b5b0      	push	{r4, r5, r7, lr}
 8002fd6:	b08c      	sub	sp, #48	; 0x30
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8002fe0:	4a59      	ldr	r2, [pc, #356]	; (8003148 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 fba1 	bl	800372c <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>
 8002fea:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff fd95 	bl	8002b28 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8002ffe:	4603      	mov	r3, r0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	f107 0214 	add.w	r2, r7, #20
 8003006:	f107 0308 	add.w	r3, r7, #8
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fbd4 	bl	80037ba <_ZN9__gnu_cxxmiIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8003012:	4603      	mov	r3, r0
 8003014:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fbe2 	bl	80037e4 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj>
 8003020:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8003026:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	011b      	lsls	r3, r3, #4
	  _Alloc_traits::construct(this->_M_impl,
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	18d5      	adds	r5, r2, r3
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fb57 	bl	80036e4 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8003036:	4603      	mov	r3, r0
 8003038:	461a      	mov	r2, r3
 800303a:	4629      	mov	r1, r5
 800303c:	4620      	mov	r0, r4
 800303e:	f7ff ff8f 	bl	8002f60 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8003042:	2300      	movs	r3, #0
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8003046:	f7ff ffaf 	bl	8002fa8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d027      	beq.n	80030a0 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003050:	f107 0308 	add.w	r3, r7, #8
 8003054:	4618      	mov	r0, r3
 8003056:	f000 f889 	bl	800316c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800305a:	4603      	mov	r3, r0
 800305c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fe55 	bl	8002d10 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003066:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4621      	mov	r1, r4
 800306c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800306e:	f000 fbcd 	bl	800380c <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8003072:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	3310      	adds	r3, #16
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800307a:	f107 0308 	add.w	r3, r7, #8
 800307e:	4618      	mov	r0, r3
 8003080:	f000 f874 	bl	800316c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003084:	4603      	mov	r3, r0
 8003086:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fe40 	bl	8002d10 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003090:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003094:	6a39      	ldr	r1, [r7, #32]
 8003096:	4620      	mov	r0, r4
 8003098:	f000 fbb8 	bl	800380c <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 800309c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800309e:	e026      	b.n	80030ee <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80030a0:	f107 0308 	add.w	r3, r7, #8
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 f861 	bl	800316c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80030aa:	4603      	mov	r3, r0
 80030ac:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fe2d 	bl	8002d10 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80030b6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4621      	mov	r1, r4
 80030bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030be:	f000 fbb9 	bl	8003834 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 80030c2:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c6:	3310      	adds	r3, #16
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80030ca:	f107 0308 	add.w	r3, r7, #8
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f84c 	bl	800316c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80030d4:	4603      	mov	r3, r0
 80030d6:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fe18 	bl	8002d10 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80030e0:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80030e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e4:	6a39      	ldr	r1, [r7, #32]
 80030e6:	4620      	mov	r0, r4
 80030e8:	f000 fba4 	bl	8003834 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 80030ec:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80030ee:	f7ff ff5b 	bl	8002fa8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f083 0301 	eor.w	r3, r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fe05 	bl	8002d10 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003106:	4603      	mov	r3, r0
 8003108:	461a      	mov	r2, r3
 800310a:	6a39      	ldr	r1, [r7, #32]
 800310c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800310e:	f7ff fe0a 	bl	8002d26 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8003112:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	111b      	asrs	r3, r3, #4
      _M_deallocate(__old_start,
 800311e:	461a      	mov	r2, r3
 8003120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003122:	f7ff fde2 	bl	8002cea <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003130:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	441a      	add	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	609a      	str	r2, [r3, #8]
    }
 800313e:	bf00      	nop
 8003140:	3730      	adds	r7, #48	; 0x30
 8003142:	46bd      	mov	sp, r7
 8003144:	bdb0      	pop	{r4, r5, r7, pc}
 8003146:	bf00      	nop
 8003148:	08025068 	.word	0x08025068

0800314c <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	f107 030c 	add.w	r3, r7, #12
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fa49 	bl	800362a <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <_ZN9__gnu_cxxmiIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80031a2:	b590      	push	{r4, r7, lr}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fa4c 	bl	800364a <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80031b2:	4603      	mov	r3, r0
 80031b4:	681c      	ldr	r4, [r3, #0]
 80031b6:	6838      	ldr	r0, [r7, #0]
 80031b8:	f000 fa47 	bl	800364a <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80031bc:	4603      	mov	r3, r0
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	1ae3      	subs	r3, r4, r3
 80031c2:	111b      	asrs	r3, r3, #4
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd90      	pop	{r4, r7, pc}

080031cc <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	4413      	add	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	f107 020c 	add.w	r2, r7, #12
 80031e6:	f107 0308 	add.w	r3, r7, #8
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ffad 	bl	800314c <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 8003206:	463b      	mov	r3, r7
 8003208:	2101      	movs	r1, #1
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ffde 	bl	80031cc <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8003210:	4603      	mov	r3, r0
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff feb6 	bl	8002f86 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 800321a:	4603      	mov	r3, r0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	f107 020c 	add.w	r2, r7, #12
 8003222:	f107 0308 	add.w	r3, r7, #8
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fb29 	bl	8003880 <_ZN9__gnu_cxxneIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00e      	beq.n	8003252 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8003234:	463b      	mov	r3, r7
 8003236:	2101      	movs	r1, #1
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ffc7 	bl	80031cc <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 800323e:	4604      	mov	r4, r0
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff fea0 	bl	8002f86 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8003246:	4603      	mov	r3, r0
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	4619      	mov	r1, r3
 800324c:	4620      	mov	r0, r4
 800324e:	f000 fb2f 	bl	80038b0 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      --this->_M_impl._M_finish;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f1a3 0210 	sub.w	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f000 fafd 	bl	8003866 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
      return __position;
 800326c:	683b      	ldr	r3, [r7, #0]
    }
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	bd90      	pop	{r4, r7, pc}

08003276 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fb2c 	bl	80038e0 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8003288:	4603      	mov	r3, r0
 800328a:	461a      	mov	r2, r3
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 fb31 	bl	80038f6 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	1d1a      	adds	r2, r3, #4
 80032a8:	f107 030c 	add.w	r3, r7, #12
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f8d8 	bl	8003464 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f805 	bl	80032d4 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80032ca:	4603      	mov	r3, r0
      }
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80032dc:	2301      	movs	r3, #1
      }
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80032ec:	b5b0      	push	{r4, r5, r7, lr}
 80032ee:	b08c      	sub	sp, #48	; 0x30
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80032f8:	4a59      	ldr	r2, [pc, #356]	; (8003460 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 80032fa:	2101      	movs	r1, #1
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fb13 	bl	8003928 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>
 8003302:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff fc77 	bl	8002c04 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8003316:	4603      	mov	r3, r0
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	f107 0214 	add.w	r2, r7, #20
 800331e:	f107 0308 	add.w	r3, r7, #8
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fb46 	bl	80039b6 <_ZN9__gnu_cxxmiIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800332a:	4603      	mov	r3, r0
 800332c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fb54 	bl	80039e0 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj>
 8003338:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800333e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	011b      	lsls	r3, r3, #4
	  _Alloc_traits::construct(this->_M_impl,
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	18d5      	adds	r5, r2, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fac9 	bl	80038e0 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	4629      	mov	r1, r5
 8003354:	4620      	mov	r0, r4
 8003356:	f7ff ff8e 	bl	8003276 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 800335a:	2300      	movs	r3, #0
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800335e:	f7ff ffae 	bl	80032be <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d027      	beq.n	80033b8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003368:	f107 0308 	add.w	r3, r7, #8
 800336c:	4618      	mov	r0, r3
 800336e:	f000 f889 	bl	8003484 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003372:	4603      	mov	r3, r0
 8003374:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fd20 	bl	8002dbe <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800337e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4621      	mov	r1, r4
 8003384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003386:	f000 fb3f 	bl	8003a08 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 800338a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	3310      	adds	r3, #16
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003392:	f107 0308 	add.w	r3, r7, #8
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f874 	bl	8003484 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800339c:	4603      	mov	r3, r0
 800339e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff fd0b 	bl	8002dbe <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80033a8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80033aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ac:	6a39      	ldr	r1, [r7, #32]
 80033ae:	4620      	mov	r0, r4
 80033b0:	f000 fb2a 	bl	8003a08 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80033b4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80033b6:	e026      	b.n	8003406 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 80033b8:	f107 0308 	add.w	r3, r7, #8
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 f861 	bl	8003484 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80033c2:	4603      	mov	r3, r0
 80033c4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fcf8 	bl	8002dbe <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80033ce:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4621      	mov	r1, r4
 80033d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033d6:	f000 fb2b 	bl	8003a30 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 80033da:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	3310      	adds	r3, #16
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 80033e2:	f107 0308 	add.w	r3, r7, #8
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f84c 	bl	8003484 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80033ec:	4603      	mov	r3, r0
 80033ee:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fce3 	bl	8002dbe <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80033f8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80033fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033fc:	6a39      	ldr	r1, [r7, #32]
 80033fe:	4620      	mov	r0, r4
 8003400:	f000 fb16 	bl	8003a30 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003404:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8003406:	f7ff ff5a 	bl	80032be <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 800340a:	4603      	mov	r3, r0
 800340c:	f083 0301 	eor.w	r3, r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fcd0 	bl	8002dbe <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	6a39      	ldr	r1, [r7, #32]
 8003424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003426:	f7ff fcd5 	bl	8002dd4 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      _M_deallocate(__old_start,
 800342a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	111b      	asrs	r3, r3, #4
      _M_deallocate(__old_start,
 8003436:	461a      	mov	r2, r3
 8003438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800343a:	f7ff fcad 	bl	8002d98 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003448:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	441a      	add	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	609a      	str	r2, [r3, #8]
    }
 8003456:	bf00      	nop
 8003458:	3730      	adds	r7, #48	; 0x30
 800345a:	46bd      	mov	sp, r7
 800345c:	bdb0      	pop	{r4, r5, r7, pc}
 800345e:	bf00      	nop
 8003460:	08025068 	.word	0x08025068

08003464 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	f107 030c 	add.w	r3, r7, #12
 80034a8:	4611      	mov	r1, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f8ff 	bl	80036ae <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <_ZN9__gnu_cxxmiIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80034ba:	b590      	push	{r4, r7, lr}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f902 	bl	80036ce <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80034ca:	4603      	mov	r3, r0
 80034cc:	681c      	ldr	r4, [r3, #0]
 80034ce:	6838      	ldr	r0, [r7, #0]
 80034d0:	f000 f8fd 	bl	80036ce <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80034d4:	4603      	mov	r3, r0
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	1ae3      	subs	r3, r4, r3
 80034da:	111b      	asrs	r3, r3, #4
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd90      	pop	{r4, r7, pc}

080034e4 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	4413      	add	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	f107 020c 	add.w	r2, r7, #12
 80034fe:	f107 0308 	add.w	r3, r7, #8
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ffad 	bl	8003464 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 800351e:	463b      	mov	r3, r7
 8003520:	2101      	movs	r1, #1
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ffde 	bl	80034e4 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8003528:	4603      	mov	r3, r0
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff feb5 	bl	800329c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 8003532:	4603      	mov	r3, r0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	f107 020c 	add.w	r2, r7, #12
 800353a:	f107 0308 	add.w	r3, r7, #8
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fa9b 	bl	8003a7c <_ZN9__gnu_cxxneIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00e      	beq.n	800356a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 800354c:	463b      	mov	r3, r7
 800354e:	2101      	movs	r1, #1
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff ffc7 	bl	80034e4 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8003556:	4604      	mov	r4, r0
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fe9f 	bl	800329c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 800355e:	4603      	mov	r3, r0
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	4619      	mov	r1, r3
 8003564:	4620      	mov	r0, r4
 8003566:	f000 faa1 	bl	8003aac <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      --this->_M_impl._M_finish;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f1a3 0210 	sub.w	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f000 fa6f 	bl	8003a62 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
      return __position;
 8003584:	683b      	ldr	r3, [r7, #0]
    }
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bd90      	pop	{r4, r7, pc}

0800358e <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fa91 	bl	8003adc <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE10deallocateEPS1_j>
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80035cc:	6839      	ldr	r1, [r7, #0]
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fa94 	bl	8003afc <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_WData_HandleTypeDefEEvT_S4_>
    }
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefEC1Ev>:
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fa85 	bl	8003b12 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE10deallocateEPS1_j>
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800361a:	6839      	ldr	r1, [r7, #0]
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fa88 	bl	8003b32 <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_RData_HandleTypeDefEEvT_S4_>
    }
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 fa5e 	bl	8003b48 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 800368c:	4603      	mov	r3, r0
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
    { return __res; }
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80036fa:	b5b0      	push	{r4, r5, r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ffec 	bl	80036e4 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 800370c:	4605      	mov	r5, r0
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4619      	mov	r1, r3
 8003712:	2010      	movs	r0, #16
 8003714:	f7fe fb9f 	bl	8001e56 <_ZnwjPv>
 8003718:	4603      	mov	r3, r0
 800371a:	461c      	mov	r4, r3
 800371c:	462b      	mov	r3, r5
 800371e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bdb0      	pop	{r4, r5, r7, pc}

0800372c <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fa15 	bl	8003b68 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 800373e:	4604      	mov	r4, r0
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 fa22 	bl	8003b8a <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 8003746:	4603      	mov	r3, r0
 8003748:	1ae2      	subs	r2, r4, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	429a      	cmp	r2, r3
 800374e:	bf34      	ite	cc
 8003750:	2301      	movcc	r3, #1
 8003752:	2300      	movcs	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f01f f8c5 	bl	80228ea <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fa12 	bl	8003b8a <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 8003766:	4604      	mov	r4, r0
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fa0e 	bl	8003b8a <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 800376e:	4603      	mov	r3, r0
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	f107 0208 	add.w	r2, r7, #8
 8003776:	f107 0310 	add.w	r3, r7, #16
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fa14 	bl	8003baa <_ZSt3maxIjERKT_S2_S2_>
 8003782:	4603      	mov	r3, r0
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4423      	add	r3, r4
 8003788:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f9fd 	bl	8003b8a <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 8003790:	4602      	mov	r2, r0
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	4293      	cmp	r3, r2
 8003796:	d306      	bcc.n	80037a6 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 f9e5 	bl	8003b68 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 800379e:	4602      	mov	r2, r0
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d904      	bls.n	80037b0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x84>
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f9de 	bl	8003b68 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 80037ac:	4603      	mov	r3, r0
 80037ae:	e000      	b.n	80037b2 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x86>
 80037b0:	697b      	ldr	r3, [r7, #20]
      }
 80037b2:	4618      	mov	r0, r3
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd90      	pop	{r4, r7, pc}

080037ba <_ZN9__gnu_cxxmiIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80037ba:	b590      	push	{r4, r7, lr}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff fcd1 	bl	800316c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80037ca:	4603      	mov	r3, r0
 80037cc:	681c      	ldr	r4, [r3, #0]
 80037ce:	6838      	ldr	r0, [r7, #0]
 80037d0:	f7ff fccc 	bl	800316c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80037d4:	4603      	mov	r3, r0
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	1ae3      	subs	r3, r4, r3
 80037da:	111b      	asrs	r3, r3, #4
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd90      	pop	{r4, r7, pc}

080037e4 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d006      	beq.n	8003802 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x1e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6839      	ldr	r1, [r7, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 f9ea 	bl	8003bd2 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8allocateERS1_j>
 80037fe:	4603      	mov	r3, r0
 8003800:	e000      	b.n	8003804 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x20>
 8003802:	2300      	movs	r3, #0
      }
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b087      	sub	sp, #28
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800381a:	f88d 4000 	strb.w	r4, [sp]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f9e3 	bl	8003bf0 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 800382a:	4603      	mov	r3, r0
      }
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	bd90      	pop	{r4, r7, pc}

08003834 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f9e6 	bl	8003c14 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 8003848:	4604      	mov	r4, r0
 800384a:	68b8      	ldr	r0, [r7, #8]
 800384c:	f000 f9e2 	bl	8003c14 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 8003850:	4601      	mov	r1, r0
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4620      	mov	r0, r4
 8003858:	f000 f9eb 	bl	8003c32 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>
 800385c:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	bd90      	pop	{r4, r7, pc}

08003866 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003870:	6839      	ldr	r1, [r7, #0]
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f9ee 	bl	8003c54 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE7destroyIS1_EEvPT_>
	}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <_ZN9__gnu_cxxneIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fc6e 	bl	800316c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003890:	4603      	mov	r3, r0
 8003892:	681c      	ldr	r4, [r3, #0]
 8003894:	6838      	ldr	r0, [r7, #0]
 8003896:	f7ff fc69 	bl	800316c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800389a:	4603      	mov	r3, r0
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	429c      	cmp	r4, r3
 80038a0:	bf14      	ite	ne
 80038a2:	2301      	movne	r3, #1
 80038a4:	2300      	moveq	r3, #0
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd90      	pop	{r4, r7, pc}

080038b0 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 f9d4 	bl	8003c6a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 80038c2:	4604      	mov	r4, r0
 80038c4:	68b8      	ldr	r0, [r7, #8]
 80038c6:	f000 f9d0 	bl	8003c6a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 80038ca:	4603      	mov	r3, r0
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	4619      	mov	r1, r3
 80038d0:	4620      	mov	r0, r4
 80038d2:	f000 f9d5 	bl	8003c80 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 80038d6:	4603      	mov	r3, r0
				      std::__miter_base(__last), __result);
    }
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd90      	pop	{r4, r7, pc}

080038e0 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80038f6:	b5b0      	push	{r4, r5, r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff ffec 	bl	80038e0 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8003908:	4605      	mov	r5, r0
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4619      	mov	r1, r3
 800390e:	2010      	movs	r0, #16
 8003910:	f7fe faa1 	bl	8001e56 <_ZnwjPv>
 8003914:	4603      	mov	r3, r0
 8003916:	461c      	mov	r4, r3
 8003918:	462b      	mov	r3, r5
 800391a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800391c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bdb0      	pop	{r4, r5, r7, pc}

08003928 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f9c4 	bl	8003cc2 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 800393a:	4604      	mov	r4, r0
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f9d1 	bl	8003ce4 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 8003942:	4603      	mov	r3, r0
 8003944:	1ae2      	subs	r2, r4, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	429a      	cmp	r2, r3
 800394a:	bf34      	ite	cc
 800394c:	2301      	movcc	r3, #1
 800394e:	2300      	movcs	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f01e ffc7 	bl	80228ea <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f9c1 	bl	8003ce4 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 8003962:	4604      	mov	r4, r0
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f9bd 	bl	8003ce4 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 800396a:	4603      	mov	r3, r0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	f107 0208 	add.w	r2, r7, #8
 8003972:	f107 0310 	add.w	r3, r7, #16
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f000 f916 	bl	8003baa <_ZSt3maxIjERKT_S2_S2_>
 800397e:	4603      	mov	r3, r0
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4423      	add	r3, r4
 8003984:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f9ac 	bl	8003ce4 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 800398c:	4602      	mov	r2, r0
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4293      	cmp	r3, r2
 8003992:	d306      	bcc.n	80039a2 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f994 	bl	8003cc2 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 800399a:	4602      	mov	r2, r0
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	4293      	cmp	r3, r2
 80039a0:	d904      	bls.n	80039ac <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x84>
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f98d 	bl	8003cc2 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 80039a8:	4603      	mov	r3, r0
 80039aa:	e000      	b.n	80039ae <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x86>
 80039ac:	697b      	ldr	r3, [r7, #20]
      }
 80039ae:	4618      	mov	r0, r3
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd90      	pop	{r4, r7, pc}

080039b6 <_ZN9__gnu_cxxmiIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80039b6:	b590      	push	{r4, r7, lr}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff fd5f 	bl	8003484 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80039c6:	4603      	mov	r3, r0
 80039c8:	681c      	ldr	r4, [r3, #0]
 80039ca:	6838      	ldr	r0, [r7, #0]
 80039cc:	f7ff fd5a 	bl	8003484 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80039d0:	4603      	mov	r3, r0
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	1ae3      	subs	r3, r4, r3
 80039d6:	111b      	asrs	r3, r3, #4
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd90      	pop	{r4, r7, pc}

080039e0 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d006      	beq.n	80039fe <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x1e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6839      	ldr	r1, [r7, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f985 	bl	8003d04 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8allocateERS1_j>
 80039fa:	4603      	mov	r3, r0
 80039fc:	e000      	b.n	8003a00 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x20>
 80039fe:	2300      	movs	r3, #0
      }
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003a08:	b590      	push	{r4, r7, lr}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003a16:	f88d 4000 	strb.w	r4, [sp]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f97e 	bl	8003d22 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8003a26:	4603      	mov	r3, r0
      }
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd90      	pop	{r4, r7, pc}

08003a30 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003a30:	b590      	push	{r4, r7, lr}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f981 	bl	8003d46 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 8003a44:	4604      	mov	r4, r0
 8003a46:	68b8      	ldr	r0, [r7, #8]
 8003a48:	f000 f97d 	bl	8003d46 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 8003a4c:	4601      	mov	r1, r0
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4620      	mov	r0, r4
 8003a54:	f000 f986 	bl	8003d64 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8003a58:	4603      	mov	r3, r0
    }
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd90      	pop	{r4, r7, pc}

08003a62 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003a6c:	6839      	ldr	r1, [r7, #0]
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f989 	bl	8003d86 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE7destroyIS1_EEvPT_>
	}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <_ZN9__gnu_cxxneIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003a7c:	b590      	push	{r4, r7, lr}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fcfc 	bl	8003484 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	681c      	ldr	r4, [r3, #0]
 8003a90:	6838      	ldr	r0, [r7, #0]
 8003a92:	f7ff fcf7 	bl	8003484 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003a96:	4603      	mov	r3, r0
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	429c      	cmp	r4, r3
 8003a9c:	bf14      	ite	ne
 8003a9e:	2301      	movne	r3, #1
 8003aa0:	2300      	moveq	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd90      	pop	{r4, r7, pc}

08003aac <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
    move(_II __first, _II __last, _OI __result)
 8003aac:	b590      	push	{r4, r7, lr}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f96f 	bl	8003d9c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003abe:	4604      	mov	r4, r0
 8003ac0:	68b8      	ldr	r0, [r7, #8]
 8003ac2:	f000 f96b 	bl	8003d9c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4619      	mov	r1, r3
 8003acc:	4620      	mov	r0, r4
 8003ace:	f000 f970 	bl	8003db2 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 8003ad2:	4603      	mov	r3, r0
    }
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd90      	pop	{r4, r7, pc}

08003adc <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	4619      	mov	r1, r3
 8003aee:	68b8      	ldr	r0, [r7, #8]
 8003af0:	f01e fed0 	bl	8022894 <_ZdlPvj>
      }
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_WData_HandleTypeDefEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	4619      	mov	r1, r3
 8003b24:	68b8      	ldr	r0, [r7, #8]
 8003b26:	f01e feb5 	bl	8022894 <_ZdlPvj>
      }
 8003b2a:	bf00      	nop
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_RData_HandleTypeDefEEvT_S4_>:
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f94b 	bl	8003df4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8003b5e:	4603      	mov	r3, r0
    }
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f972 	bl	8003e5c <_ZNKSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f954 	bl	8003e28 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>
 8003b80:	4603      	mov	r3, r0
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	111b      	asrs	r3, r3, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d201      	bcs.n	8003bc4 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	e000      	b.n	8003bc6 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003bc4:	687b      	ldr	r3, [r7, #4]
    }
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003bdc:	2200      	movs	r2, #0
 8003bde:	6839      	ldr	r1, [r7, #0]
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f946 	bl	8003e72 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv>
 8003be6:	4603      	mov	r3, r0
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	68b9      	ldr	r1, [r7, #8]
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f952 	bl	8003eae <_ZSt12__relocate_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003c0a:	4603      	mov	r3, r0
      }
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003c1c:	f107 030c 	add.w	r3, r7, #12
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 f960 	bl	8003ee8 <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEC1ES1_>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f961 	bl	8003f0c <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_ET0_T_S5_S4_>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>:
    __miter_base(_Iterator __it)
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003c80:	b5b0      	push	{r4, r5, r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f94f 	bl	8003f30 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003c92:	4604      	mov	r4, r0
 8003c94:	68b8      	ldr	r0, [r7, #8]
 8003c96:	f000 f94b 	bl	8003f30 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f947 	bl	8003f30 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f000 f94f 	bl	8003f4c <_ZSt14__copy_move_a1ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f95a 	bl	8003f6c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 8003cb8:	4603      	mov	r3, r0
    }
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bdb0      	pop	{r4, r5, r7, pc}

08003cc2 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 f97e 	bl	8003fce <_ZNKSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 f960 	bl	8003f9a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	111b      	asrs	r3, r3, #4
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003d0e:	2200      	movs	r2, #0
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f966 	bl	8003fe4 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f972 	bl	8004020 <_ZSt12__relocate_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003d3c:	4603      	mov	r3, r0
      }
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003d4e:	f107 030c 	add.w	r3, r7, #12
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 f980 	bl	800405a <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEC1ES1_>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f981 	bl	800407e <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_ET0_T_S5_S4_>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>:
    __miter_base(_Iterator __it)
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003db2:	b5b0      	push	{r4, r5, r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f96f 	bl	80040a2 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	68b8      	ldr	r0, [r7, #8]
 8003dc8:	f000 f96b 	bl	80040a2 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003dcc:	4605      	mov	r5, r0
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f967 	bl	80040a2 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4629      	mov	r1, r5
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f000 f96f 	bl	80040be <_ZSt14__copy_move_a1ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8003de0:	4603      	mov	r3, r0
 8003de2:	4619      	mov	r1, r3
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f97a 	bl	80040de <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 8003dea:	4603      	mov	r3, r0
    }
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bdb0      	pop	{r4, r5, r7, pc}

08003df4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	461a      	mov	r2, r3
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f01f feb1 	bl	8023b7c <memmove>
	  return __result + _Num;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	4413      	add	r3, r2
	}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8003e30:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8003e34:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f968 	bl	800410c <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8max_sizeERKS1_>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003e40:	f107 0208 	add.w	r2, r7, #8
 8003e44:	f107 030c 	add.w	r3, r7, #12
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f96a 	bl	8004124 <_ZSt3minIjERKT_S2_S2_>
 8003e50:	4603      	mov	r3, r0
 8003e52:	681b      	ldr	r3, [r3, #0]
      }
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <_ZNKSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4618      	mov	r0, r3
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f964 	bl	800414c <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>
 8003e84:	4602      	mov	r2, r0
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	bf8c      	ite	hi
 8003e8c:	2301      	movhi	r3, #1
 8003e8e:	2300      	movls	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003e96:	f01e fd22 	bl	80228de <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f01e fd09 	bl	80228b6 <_Znwj>
 8003ea4:	4603      	mov	r3, r0
      }
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <_ZSt12__relocate_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8003eae:	b5b0      	push	{r4, r5, r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f951 	bl	8004164 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	68b8      	ldr	r0, [r7, #8]
 8003ec6:	f000 f94d 	bl	8004164 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8003eca:	4605      	mov	r5, r0
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f949 	bl	8004164 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f000 f94e 	bl	800417a <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003ede:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bdb0      	pop	{r4, r5, r7, pc}

08003ee8 <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEC1ES1_>:
      move_iterator(iterator_type __i)
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8003ef2:	463b      	mov	r3, r7
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f966 	bl	80041c6 <_ZSt4moveIRP23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 8003efa:	4603      	mov	r3, r0
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f95b 	bl	80041dc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_>
 8003f26:	4603      	mov	r3, r0
    }
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8003f38:	1d3b      	adds	r3, r7, #4
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff f916 	bl	800316c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003f40:	4603      	mov	r3, r0
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <_ZSt14__copy_move_a1ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 f96c 	bl	800423a <_ZSt14__copy_move_a2ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>:
    __niter_wrap(_From __from, _To __res)
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff ffda 	bl	8003f30 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	111b      	asrs	r3, r3, #4
 8003f84:	461a      	mov	r2, r3
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	4611      	mov	r1, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff f91e 	bl	80031cc <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8003f90:	4603      	mov	r3, r0
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8003fa2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8003fa6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f956 	bl	800425a <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8max_sizeERKS1_>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003fb2:	f107 0208 	add.w	r2, r7, #8
 8003fb6:	f107 030c 	add.w	r3, r7, #12
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f8b1 	bl	8004124 <_ZSt3minIjERKT_S2_S2_>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	681b      	ldr	r3, [r3, #0]
      }
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <_ZNKSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f93e 	bl	8004272 <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	bf8c      	ite	hi
 8003ffe:	2301      	movhi	r3, #1
 8004000:	2300      	movls	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004008:	f01e fc69 	bl	80228de <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	4618      	mov	r0, r3
 8004012:	f01e fc50 	bl	80228b6 <_Znwj>
 8004016:	4603      	mov	r3, r0
      }
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <_ZSt12__relocate_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8004020:	b5b0      	push	{r4, r5, r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f92b 	bl	800428a <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 8004034:	4604      	mov	r4, r0
 8004036:	68b8      	ldr	r0, [r7, #8]
 8004038:	f000 f927 	bl	800428a <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 800403c:	4605      	mov	r5, r0
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f923 	bl	800428a <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 8004044:	4602      	mov	r2, r0
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	4629      	mov	r1, r5
 800404a:	4620      	mov	r0, r4
 800404c:	f000 f928 	bl	80042a0 <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8004050:	4603      	mov	r3, r0
    }
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bdb0      	pop	{r4, r5, r7, pc}

0800405a <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEC1ES1_>:
      move_iterator(iterator_type __i)
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8004064:	463b      	mov	r3, r7
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f940 	bl	80042ec <_ZSt4moveIRP23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 800406c:	4603      	mov	r3, r0
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800407e:	b580      	push	{r7, lr}
 8004080:	b086      	sub	sp, #24
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800408a:	2301      	movs	r3, #1
 800408c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	68b9      	ldr	r1, [r7, #8]
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f935 	bl	8004302 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_>
 8004098:	4603      	mov	r3, r0
    }
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff f9e9 	bl	8003484 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80040b2:	4603      	mov	r3, r0
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <_ZSt14__copy_move_a1ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f946 	bl	8004360 <_ZSt14__copy_move_a2ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>
 80040d4:	4603      	mov	r3, r0
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>:
    __niter_wrap(_From __from, _To __res)
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff ffda 	bl	80040a2 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80040ee:	4602      	mov	r2, r0
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	111b      	asrs	r3, r3, #4
 80040f6:	461a      	mov	r2, r3
 80040f8:	1d3b      	adds	r3, r7, #4
 80040fa:	4611      	mov	r1, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff f9f1 	bl	80034e4 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8004102:	4603      	mov	r3, r0
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f933 	bl	8004380 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8max_sizeEv>
 800411a:	4603      	mov	r3, r0
      }
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d201      	bcs.n	800413e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	e000      	b.n	8004140 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800413e:	687b      	ldr	r3, [r7, #4]
    }
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004154:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>:
    __niter_base(_Iterator __it)
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800417a:	b590      	push	{r4, r7, lr}
 800417c:	b087      	sub	sp, #28
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	429a      	cmp	r2, r3
 8004192:	d013      	beq.n	80041bc <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 8004194:	6978      	ldr	r0, [r7, #20]
 8004196:	f000 f8ff 	bl	8004398 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 800419a:	4604      	mov	r4, r0
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f8fb 	bl	8004398 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 80041a2:	4603      	mov	r3, r0
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	4620      	mov	r0, r4
 80041aa:	f000 f900 	bl	80043ae <_ZSt19__relocate_object_aI23CAN_WData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3310      	adds	r3, #16
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	3310      	adds	r3, #16
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	e7e7      	b.n	800418c <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 80041bc:	697b      	ldr	r3, [r7, #20]
    }
 80041be:	4618      	mov	r0, r3
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd90      	pop	{r4, r7, pc}

080041c6 <_ZSt4moveIRP23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80041dc:	b590      	push	{r4, r7, lr}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80041ec:	f107 0208 	add.w	r2, r7, #8
 80041f0:	f107 030c 	add.w	r3, r7, #12
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 f8f4 	bl	80043e4 <_ZStneIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d016      	beq.n	8004230 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8004202:	6978      	ldr	r0, [r7, #20]
 8004204:	f000 f8c8 	bl	8004398 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 8004208:	4604      	mov	r4, r0
 800420a:	f107 030c 	add.w	r3, r7, #12
 800420e:	4618      	mov	r0, r3
 8004210:	f000 f90a 	bl	8004428 <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefEdeEv>
 8004214:	4603      	mov	r3, r0
 8004216:	4619      	mov	r1, r3
 8004218:	4620      	mov	r0, r4
 800421a:	f000 f911 	bl	8004440 <_ZSt10_ConstructI23CAN_WData_HandleTypeDefJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800421e:	f107 030c 	add.w	r3, r7, #12
 8004222:	4618      	mov	r0, r3
 8004224:	f000 f8ef 	bl	8004406 <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEppEv>
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	3310      	adds	r3, #16
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e7dd      	b.n	80041ec <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 8004230:	697b      	ldr	r3, [r7, #20]
	}
 8004232:	4618      	mov	r0, r3
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	bd90      	pop	{r4, r7, pc}

0800423a <_ZSt14__copy_move_a2ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f910 	bl	8004470 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_>
 8004250:	4603      	mov	r3, r0
    }
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f921 	bl	80044aa <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8max_sizeEv>
 8004268:	4603      	mov	r3, r0
      }
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800427a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>:
    __niter_base(_Iterator __it)
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80042a0:	b590      	push	{r4, r7, lr}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d013      	beq.n	80042e2 <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 80042ba:	6978      	ldr	r0, [r7, #20]
 80042bc:	f000 f901 	bl	80044c2 <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 80042c0:	4604      	mov	r4, r0
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f8fd 	bl	80044c2 <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 80042c8:	4603      	mov	r3, r0
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	4619      	mov	r1, r3
 80042ce:	4620      	mov	r0, r4
 80042d0:	f000 f902 	bl	80044d8 <_ZSt19__relocate_object_aI23CAN_RData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3310      	adds	r3, #16
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	3310      	adds	r3, #16
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	e7e7      	b.n	80042b2 <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 80042e2:	697b      	ldr	r3, [r7, #20]
    }
 80042e4:	4618      	mov	r0, r3
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd90      	pop	{r4, r7, pc}

080042ec <_ZSt4moveIRP23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004302:	b590      	push	{r4, r7, lr}
 8004304:	b087      	sub	sp, #28
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8004312:	f107 0208 	add.w	r2, r7, #8
 8004316:	f107 030c 	add.w	r3, r7, #12
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f000 f8f6 	bl	800450e <_ZStneIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d016      	beq.n	8004356 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8004328:	6978      	ldr	r0, [r7, #20]
 800432a:	f000 f8ca 	bl	80044c2 <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 800432e:	4604      	mov	r4, r0
 8004330:	f107 030c 	add.w	r3, r7, #12
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f90c 	bl	8004552 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefEdeEv>
 800433a:	4603      	mov	r3, r0
 800433c:	4619      	mov	r1, r3
 800433e:	4620      	mov	r0, r4
 8004340:	f000 f913 	bl	800456a <_ZSt10_ConstructI23CAN_RData_HandleTypeDefJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8004344:	f107 030c 	add.w	r3, r7, #12
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f8f1 	bl	8004530 <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEppEv>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	3310      	adds	r3, #16
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e7dd      	b.n	8004312 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 8004356:	697b      	ldr	r3, [r7, #20]
	}
 8004358:	4618      	mov	r0, r3
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	bd90      	pop	{r4, r7, pc}

08004360 <_ZSt14__copy_move_a2ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f912 	bl	800459a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_>
 8004376:	4603      	mov	r3, r0
    }
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff fedf 	bl	800414c <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>
 800438e:	4603      	mov	r3, r0
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <_ZSt19__relocate_object_aI23CAN_WData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80043ba:	68b8      	ldr	r0, [r7, #8]
 80043bc:	f000 f90a 	bl	80045d4 <_ZSt4moveIR23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>
 80043c0:	4603      	mov	r3, r0
 80043c2:	461a      	mov	r2, r3
 80043c4:	68f9      	ldr	r1, [r7, #12]
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f90f 	bl	80045ea <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80043cc:	68b8      	ldr	r0, [r7, #8]
 80043ce:	f7ff ffe3 	bl	8004398 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 80043d2:	4603      	mov	r3, r0
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fa45 	bl	8003866 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
    }
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <_ZStneIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 80043ee:	6839      	ldr	r1, [r7, #0]
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f90d 	bl	8004610 <_ZSteqIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f083 0301 	eor.w	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEppEv>:
      operator++()
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f103 0210 	add.w	r2, r3, #16
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	601a      	str	r2, [r3, #0]
	return *this;
 800441a:	687b      	ldr	r3, [r7, #4]
      }
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefEdeEv>:
      operator*() const
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <_ZSt10_ConstructI23CAN_WData_HandleTypeDefJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8004440:	b5b0      	push	{r4, r5, r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800444a:	6838      	ldr	r0, [r7, #0]
 800444c:	f000 f8f6 	bl	800463c <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 8004450:	4605      	mov	r5, r0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4619      	mov	r1, r3
 8004456:	2010      	movs	r0, #16
 8004458:	f7fd fcfd 	bl	8001e56 <_ZnwjPv>
 800445c:	4603      	mov	r3, r0
 800445e:	461c      	mov	r4, r3
 8004460:	462b      	mov	r3, r5
 8004462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bdb0      	pop	{r4, r5, r7, pc}

08004470 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	111b      	asrs	r3, r3, #4
 8004484:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d006      	beq.n	800449a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	461a      	mov	r2, r3
 8004492:	68f9      	ldr	r1, [r7, #12]
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f01f fb71 	bl	8023b7c <memmove>
	  return __result + _Num;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4413      	add	r3, r2
	}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff fedd 	bl	8004272 <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>
 80044b8:	4603      	mov	r3, r0
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <_ZSt19__relocate_object_aI23CAN_RData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80044e4:	68b8      	ldr	r0, [r7, #8]
 80044e6:	f000 f8b4 	bl	8004652 <_ZSt4moveIR23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>
 80044ea:	4603      	mov	r3, r0
 80044ec:	461a      	mov	r2, r3
 80044ee:	68f9      	ldr	r1, [r7, #12]
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f8b9 	bl	8004668 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80044f6:	68b8      	ldr	r0, [r7, #8]
 80044f8:	f7ff ffe3 	bl	80044c2 <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 80044fc:	4603      	mov	r3, r0
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff faae 	bl	8003a62 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
    }
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <_ZStneIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800450e:	b580      	push	{r7, lr}
 8004510:	b082      	sub	sp, #8
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8004518:	6839      	ldr	r1, [r7, #0]
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f8b7 	bl	800468e <_ZSteqIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 8004520:	4603      	mov	r3, r0
 8004522:	f083 0301 	eor.w	r3, r3, #1
 8004526:	b2db      	uxtb	r3, r3
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEppEv>:
      operator++()
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f103 0210 	add.w	r2, r3, #16
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	601a      	str	r2, [r3, #0]
	return *this;
 8004544:	687b      	ldr	r3, [r7, #4]
      }
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefEdeEv>:
      operator*() const
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <_ZSt10_ConstructI23CAN_RData_HandleTypeDefJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800456a:	b5b0      	push	{r4, r5, r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8004574:	6838      	ldr	r0, [r7, #0]
 8004576:	f000 f8a0 	bl	80046ba <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 800457a:	4605      	mov	r5, r0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4619      	mov	r1, r3
 8004580:	2010      	movs	r0, #16
 8004582:	f7fd fc68 	bl	8001e56 <_ZnwjPv>
 8004586:	4603      	mov	r3, r0
 8004588:	461c      	mov	r4, r3
 800458a:	462b      	mov	r3, r5
 800458c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800458e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bdb0      	pop	{r4, r5, r7, pc}

0800459a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800459a:	b580      	push	{r7, lr}
 800459c:	b086      	sub	sp, #24
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	111b      	asrs	r3, r3, #4
 80045ae:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d006      	beq.n	80045c4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	461a      	mov	r2, r3
 80045bc:	68f9      	ldr	r1, [r7, #12]
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f01f fadc 	bl	8023b7c <memmove>
	  return __result + _Num;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	4413      	add	r3, r2
	}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <_ZSt4moveIR23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f820 	bl	800463c <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f864 	bl	80046d0 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_ZSteqIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8004610:	b590      	push	{r4, r7, lr}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f871 	bl	8004702 <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>
 8004620:	4604      	mov	r4, r0
 8004622:	6838      	ldr	r0, [r7, #0]
 8004624:	f000 f86d 	bl	8004702 <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>
 8004628:	4603      	mov	r3, r0
 800462a:	429c      	cmp	r4, r3
 800462c:	bf0c      	ite	eq
 800462e:	2301      	moveq	r3, #1
 8004630:	2300      	movne	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bd90      	pop	{r4, r7, pc}

0800463c <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <_ZSt4moveIR23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4618      	mov	r0, r3
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f820 	bl	80046ba <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 800467a:	4603      	mov	r3, r0
 800467c:	461a      	mov	r2, r3
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f84a 	bl	800471a <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <_ZSteqIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 800468e:	b590      	push	{r4, r7, lr}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f857 	bl	800474c <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>
 800469e:	4604      	mov	r4, r0
 80046a0:	6838      	ldr	r0, [r7, #0]
 80046a2:	f000 f853 	bl	800474c <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>
 80046a6:	4603      	mov	r3, r0
 80046a8:	429c      	cmp	r4, r3
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd90      	pop	{r4, r7, pc}

080046ba <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80046d0:	b5b0      	push	{r4, r5, r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff ffad 	bl	800463c <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 80046e2:	4605      	mov	r5, r0
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4619      	mov	r1, r3
 80046e8:	2010      	movs	r0, #16
 80046ea:	f7fd fbb4 	bl	8001e56 <_ZnwjPv>
 80046ee:	4603      	mov	r3, r0
 80046f0:	461c      	mov	r4, r3
 80046f2:	462b      	mov	r3, r5
 80046f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80046fa:	bf00      	nop
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bdb0      	pop	{r4, r5, r7, pc}

08004702 <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>:
      base() const
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800471a:	b5b0      	push	{r4, r5, r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ffc7 	bl	80046ba <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 800472c:	4605      	mov	r5, r0
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4619      	mov	r1, r3
 8004732:	2010      	movs	r0, #16
 8004734:	f7fd fb8f 	bl	8001e56 <_ZnwjPv>
 8004738:	4603      	mov	r3, r0
 800473a:	461c      	mov	r4, r3
 800473c:	462b      	mov	r3, r5
 800473e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004740:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004744:	bf00      	nop
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bdb0      	pop	{r4, r5, r7, pc}

0800474c <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>:
      base() const
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <_ZN4BG9521MandatoryParamEnqueueEv>:

//---------------------------------------------------------------------------------------------------Enqueue
//--------------------------------------------------------------------this parameters are followed from communication manual

void BG95::MandatoryParamEnqueue()
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
	//----------------------------1.) Mandatory parameters:
	// a.) Device parameters:
	WriteDataEnqueue(0x3004, 0, 0);      // Power Disable
 800476c:	2300      	movs	r3, #0
 800476e:	2200      	movs	r2, #0
 8004770:	f243 0104 	movw	r1, #12292	; 0x3004
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7fd fd58 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3900, 0, 1);      // Motor - Type: 1 = brushless Motor (BLDC)
 800477a:	2301      	movs	r3, #1
 800477c:	2200      	movs	r2, #0
 800477e:	f44f 5164 	mov.w	r1, #14592	; 0x3900
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fd fd51 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3910, 0, 8);      // Motor - Number of Poles (8 - bg95)
 8004788:	2308      	movs	r3, #8
 800478a:	2200      	movs	r2, #0
 800478c:	f643 1110 	movw	r1, #14608	; 0x3910
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7fd fd4a 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3962, 0, 4096);      // Encoder resolution in counts: sin/cos = 4096, 1000h
 8004796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800479a:	2200      	movs	r2, #0
 800479c:	f643 1162 	movw	r1, #14690	; 0x3962
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7fd fd42 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3350, 0, 2410);      // Position feedback: 2410 = ENCODER-Feedback (sin/cos)
 80047a6:	f640 136a 	movw	r3, #2410	; 0x96a
 80047aa:	2200      	movs	r2, #0
 80047ac:	f243 3150 	movw	r1, #13136	; 0x3350
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7fd fd3a 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3550, 0, 2410);      // Velocity feedback: 2410 = ENCODER-Feedback (sin/cos)
 80047b6:	f640 136a 	movw	r3, #2410	; 0x96a
 80047ba:	2200      	movs	r2, #0
 80047bc:	f243 5150 	movw	r1, #13648	; 0x3550
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7fd fd32 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x35A1, 0, 20000);      // Maximum velocity: 20000 = 2.0 m/s
 80047c6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80047ca:	2200      	movs	r2, #0
 80047cc:	f243 51a1 	movw	r1, #13729	; 0x35a1
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7fd fd2a 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>

	// b.) Current limits (Attention: Note the motor data sheet!):
	WriteDataEnqueue(0x3221, 0, 10000);      // Current limit - max. positive [mA]
 80047d6:	f242 7310 	movw	r3, #10000	; 0x2710
 80047da:	2200      	movs	r2, #0
 80047dc:	f243 2121 	movw	r1, #12833	; 0x3221
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7fd fd22 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3223, 0, 10000);      // Current limit - max. negative [mA]
 80047e6:	f242 7310 	movw	r3, #10000	; 0x2710
 80047ea:	2200      	movs	r2, #0
 80047ec:	f243 2123 	movw	r1, #12835	; 0x3223
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7fd fd1a 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3224, 0, 0);      // Dynamic Current Limit I*t - Mode: 1 = active
 80047f6:	2300      	movs	r3, #0
 80047f8:	2200      	movs	r2, #0
 80047fa:	f243 2124 	movw	r1, #12836	; 0x3224
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fd fd13 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3224, 1, 12000);      // Dynamic Current Limit I*t - Peak Current [mA]
 8004804:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8004808:	2201      	movs	r2, #1
 800480a:	f243 2124 	movw	r1, #12836	; 0x3224
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fd fd0b 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3224, 2, 2640);      // Dynamic Current Limit I*t - Continuous Current [mA]
 8004814:	f44f 6325 	mov.w	r3, #2640	; 0xa50
 8004818:	2202      	movs	r2, #2
 800481a:	f243 2124 	movw	r1, #12836	; 0x3224
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fd fd03 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3224, 3, 1000);      // Dynamic Current Limit I*t - Time [ms]
 8004824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004828:	2203      	movs	r2, #3
 800482a:	f243 2124 	movw	r1, #12836	; 0x3224
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fd fcfb 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>

	// c.) Controller parameters (recommendations):
	WriteDataEnqueue(0x3310, 0, 500);      // PID-Position Controller - Proportional gain
 8004834:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004838:	2200      	movs	r2, #0
 800483a:	f243 3110 	movw	r1, #13072	; 0x3310
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fd fcf3 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3312, 0, 1);      // PID-Position Controller - Differential gain
 8004844:	2301      	movs	r3, #1
 8004846:	2200      	movs	r2, #0
 8004848:	f243 3112 	movw	r1, #13074	; 0x3312
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7fd fcec 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3313, 0, 1);      // integration limit of the position controller
 8004852:	2301      	movs	r3, #1
 8004854:	2200      	movs	r2, #0
 8004856:	f243 3113 	movw	r1, #13075	; 0x3313
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fd fce5 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3314, 0, 1000);      // velocity feed foward factor
 8004860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004864:	2200      	movs	r2, #0
 8004866:	f243 3114 	movw	r1, #13076	; 0x3314
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd fcdd 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3315, 0, 1);      // Accelation feed foward factor
 8004870:	2301      	movs	r3, #1
 8004872:	2200      	movs	r2, #0
 8004874:	f243 3115 	movw	r1, #13077	; 0x3315
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7fd fcd6 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3510, 0, 500);      // PI-Velocity Controller - Proportional gain
 800487e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004882:	2200      	movs	r2, #0
 8004884:	f243 5110 	movw	r1, #13584	; 0x3510
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7fd fcce 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3511, 0, 50);      // PI-Velocity Controller - Integration constant
 800488e:	2332      	movs	r3, #50	; 0x32
 8004890:	2200      	movs	r2, #0
 8004892:	f243 5111 	movw	r1, #13585	; 0x3511
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fd fcc7 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3517, 0, 1);      // compensation factor
 800489c:	2301      	movs	r3, #1
 800489e:	2200      	movs	r2, #0
 80048a0:	f243 5117 	movw	r1, #13591	; 0x3517
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7fd fcc0 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3210, 0, 35);      // PI-Current Controller - Proportional gain
 80048aa:	2323      	movs	r3, #35	; 0x23
 80048ac:	2200      	movs	r2, #0
 80048ae:	f243 2110 	movw	r1, #12816	; 0x3210
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fd fcb9 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3211, 0, 2);      // PI-Current Controller - Integration constant
 80048b8:	2302      	movs	r3, #2
 80048ba:	2200      	movs	r2, #0
 80048bc:	f243 2111 	movw	r1, #12817	; 0x3211
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fd fcb2 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3000, 0, 128);      // Stores actual parameters
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	2200      	movs	r2, #0
 80048ca:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fd fcab 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
}
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <_ZN4BG9526RecommendationParamEnqueueEv>:

void BG95::RecommendationParamEnqueue()
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
	//----------------------------2.) Recommendation parameters:
	const uint16_t max_rpm = this->max_rpm_;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8a5b      	ldrh	r3, [r3, #18]
 80048e8:	82fb      	strh	r3, [r7, #22]
	const uint16_t acc_rpm_ = this->acc_rpm_;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8a9b      	ldrh	r3, [r3, #20]
 80048ee:	82bb      	strh	r3, [r7, #20]
	const uint16_t acc_time_ = this->acc_time_;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8adb      	ldrh	r3, [r3, #22]
 80048f4:	827b      	strh	r3, [r7, #18]
	const uint16_t dec_rpm_ = this->dec_rpm_;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8b1b      	ldrh	r3, [r3, #24]
 80048fa:	823b      	strh	r3, [r7, #16]
	const uint16_t dec_time_= this->dec_time_;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8b5b      	ldrh	r3, [r3, #26]
 8004900:	81fb      	strh	r3, [r7, #14]
	const uint16_t qdec_rpm = this->qdec_rpm_;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	8b9b      	ldrh	r3, [r3, #28]
 8004906:	81bb      	strh	r3, [r7, #12]
	const uint16_t qdec_time = this->qdec_time_;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8bdb      	ldrh	r3, [r3, #30]
 800490c:	817b      	strh	r3, [r7, #10]

	WriteDataEnqueue(0x3300, 0, max_rpm);      // Velocity - rpm
 800490e:	8afb      	ldrh	r3, [r7, #22]
 8004910:	2200      	movs	r2, #0
 8004912:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fd fc87 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3321, 0, max_rpm);      // Velocity Max. Limit - Positive Direction - rpm
 800491c:	8afb      	ldrh	r3, [r7, #22]
 800491e:	2200      	movs	r2, #0
 8004920:	f243 3121 	movw	r1, #13089	; 0x3321
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fd fc80 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3323, 0, max_rpm);      // Velocity Max. Limit - Negative Direction - rpm
 800492a:	8afb      	ldrh	r3, [r7, #22]
 800492c:	2200      	movs	r2, #0
 800492e:	f243 3123 	movw	r1, #13091	; 0x3323
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fd fc79 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3340, 0, acc_rpm_);      // Velocity Acceleration - Delta v
 8004938:	8abb      	ldrh	r3, [r7, #20]
 800493a:	2200      	movs	r2, #0
 800493c:	f44f 514d 	mov.w	r1, #13120	; 0x3340
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7fd fc72 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3341, 0, acc_time_);      // Velocity Acceleration - Delta t
 8004946:	8a7b      	ldrh	r3, [r7, #18]
 8004948:	2200      	movs	r2, #0
 800494a:	f243 3141 	movw	r1, #13121	; 0x3341
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fd fc6b 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3342, 0, dec_rpm_);      // Velocity Deceleration - Delta v
 8004954:	8a3b      	ldrh	r3, [r7, #16]
 8004956:	2200      	movs	r2, #0
 8004958:	f243 3142 	movw	r1, #13122	; 0x3342
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fd fc64 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3343, 0, dec_time_);      // Velocity Deceleration - Delta t
 8004962:	89fb      	ldrh	r3, [r7, #14]
 8004964:	2200      	movs	r2, #0
 8004966:	f243 3143 	movw	r1, #13123	; 0x3343
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd fc5d 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>


	WriteDataEnqueue(0x3344, 0, qdec_rpm);      // Velocity Deceleration - Quick-Stop - Delta v
 8004970:	89bb      	ldrh	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f243 3144 	movw	r1, #13124	; 0x3344
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7fd fc56 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3345, 0, qdec_time);      // Velocity Deceleration - Quick-Stop - Delta t
 800497e:	897b      	ldrh	r3, [r7, #10]
 8004980:	2200      	movs	r2, #0
 8004982:	f243 3145 	movw	r1, #13125	; 0x3345
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fd fc4f 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(0x3000, 0, 128);      // Stores actual parameters
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	2200      	movs	r2, #0
 8004990:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7fd fc48 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
}
 800499a:	bf00      	nop
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <_ZN4BG9520HardwareParamEnqueueEv>:

void BG95::HardwareParamEnqueue()
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
	//WriteDataEnqueue(0x39a0, 17, 1000);      // Brake Management - Brake Output
	//WriteDataEnqueue(0x39a0, 18, 1000);      // Brake Management - Brake Output
	//WriteDataEnqueue(0x39a0, 19, 1000);      // Brake Management - Brake Output

	/*Manual oepn break*/
	WriteDataEnqueue(0x3150, 0, 2);      // Open Break
 80049aa:	2302      	movs	r3, #2
 80049ac:	2200      	movs	r2, #0
 80049ae:	f243 1150 	movw	r1, #12624	; 0x3150
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fd fc39 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>




	//save all config.
	WriteDataEnqueue(0x3000, 0, 128);      // Stores actual parameters
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	2200      	movs	r2, #0
 80049bc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7fd fc32 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3000, 0, 5);      // save actual parameters
 80049c6:	2305      	movs	r3, #5
 80049c8:	2200      	movs	r2, #0
 80049ca:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fd fc2b 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>

	//final approach
	WriteDataEnqueue(0x3732, 0, 1000);   // position following error - window
 80049d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049d8:	2200      	movs	r2, #0
 80049da:	f243 7132 	movw	r1, #14130	; 0x3732
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fd fc23 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3762, 0, 0);   // reset actual position
 80049e4:	2300      	movs	r3, #0
 80049e6:	2200      	movs	r2, #0
 80049e8:	f243 7162 	movw	r1, #14178	; 0x3762
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7fd fc1c 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3000, 0, 1);      // reset error register
 80049f2:	2301      	movs	r3, #1
 80049f4:	2200      	movs	r2, #0
 80049f6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fd fc15 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>

}
 8004a00:	bf00      	nop
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <_ZN4BG9525SetPositionControlEnqueueEv>:

/*for move mode*/
void BG95::SetPositionControlEnqueue()
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
	int vel_ = this->max_rpm_;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8a5b      	ldrh	r3, [r3, #18]
 8004a14:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(0x3004, 0, 0);      // Power Disable
 8004a16:	2300      	movs	r3, #0
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f243 0104 	movw	r1, #12292	; 0x3004
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fd fc76 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3000, 0, 1);      // reset error register
 8004a24:	2301      	movs	r3, #1
 8004a26:	2200      	movs	r2, #0
 8004a28:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7fd fc6f 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(0x3003, 0, 7);      // device mode "position mode"
 8004a32:	2307      	movs	r3, #7
 8004a34:	2200      	movs	r2, #0
 8004a36:	f243 0103 	movw	r1, #12291	; 0x3003
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fd fc68 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(0x3300, 0, vel_);   // desired velocity (max_rpm)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7fd fc61 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(0x3000, 0, 4);      // continue
 8004a4e:	2304      	movs	r3, #4
 8004a50:	2200      	movs	r2, #0
 8004a52:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fd fc5a 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3004, 0, 1);      // Power Enable
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f243 0104 	movw	r1, #12292	; 0x3004
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7fd fc53 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <_ZN4BG9520AbsPosCommandEnqueueEPi>:


void BG95::AbsPosCommandEnqueue(int *tPos)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b084      	sub	sp, #16
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
	int tPos_ = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]
	if(tPos != NULL) tPos_ = *tPos;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <_ZN4BG9520AbsPosCommandEnqueueEPi+0x1a>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(0x3000, 0, 1);      // reset error register
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7fd fc3b 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3790, 0, tPos_);   // target position
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f243 7190 	movw	r1, #14224	; 0x3790
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fd fc34 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

}
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <_ZN4BG9520RelPosCommandEnqueueEPi>:

void BG95::RelPosCommandEnqueue(int *tPos)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
	int tPos_ = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
	if(tPos != NULL) tPos_ = *tPos;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <_ZN4BG9520RelPosCommandEnqueueEPi+0x1a>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(0x3000, 0, 1);      // reset error register
 8004aca:	2301      	movs	r3, #1
 8004acc:	2200      	movs	r2, #0
 8004ace:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fd fc1c 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3791, 0, tPos_);   // target position
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f243 7191 	movw	r1, #14225	; 0x3791
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7fd fc15 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <_ZN4BG9525SetVelocityControlEnqueueEb>:

/*for jog mode*/
void BG95::SetVelocityControlEnqueue(bool dir)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
	bool dir_ = dir;
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	72fb      	strb	r3, [r7, #11]
	int vel_ = this->max_rpm_/5;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	8a5b      	ldrh	r3, [r3, #18]
 8004b04:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <_ZN4BG9525SetVelocityControlEnqueueEb+0x90>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	089b      	lsrs	r3, r3, #2
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	60fb      	str	r3, [r7, #12]

	if(!dir_) vel_ = vel_*(-1);
 8004b10:	7afb      	ldrb	r3, [r7, #11]
 8004b12:	f083 0301 	eor.w	r3, r3, #1
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <_ZN4BG9525SetVelocityControlEnqueueEb+0x32>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	425b      	negs	r3, r3
 8004b20:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(0x3004, 0, 0);      // Power Disable
 8004b22:	2300      	movs	r3, #0
 8004b24:	2200      	movs	r2, #0
 8004b26:	f243 0104 	movw	r1, #12292	; 0x3004
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fd fbf0 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3000, 0, 1);      // reset error register
 8004b30:	2301      	movs	r3, #1
 8004b32:	2200      	movs	r2, #0
 8004b34:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7fd fbe9 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(0x3003, 0, 3);      // device mode "velocity mode"
 8004b3e:	2303      	movs	r3, #3
 8004b40:	2200      	movs	r2, #0
 8004b42:	f243 0103 	movw	r1, #12291	; 0x3003
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fd fbe2 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(0x3300, 0, vel_);   // desired velocity (2500 rpm)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7fd fbdb 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(0x3000, 0, 4);      // continue
 8004b5a:	2304      	movs	r3, #4
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fd fbd4 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(0x3004, 0, 1);      // Power Enable
 8004b68:	2301      	movs	r3, #1
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f243 0104 	movw	r1, #12292	; 0x3004
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7fd fbcd 	bl	8002310 <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	cccccccd 	.word	0xcccccccd

08004b84 <_ZN4BG9525ReadSchduleCommandEnqueueEv>:


void BG95::ReadSchduleCommandEnqueue()
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	//hardware param
	//ReadDataEnqueue(0x3110, 0, 0);      // actual power voltage
	ReadDataEnqueue(0x3111, 0, 0);      // actual motor voltage
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f243 1111 	movw	r1, #12561	; 0x3111
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7fd fc1f 	bl	80023d8 <_ZN4BG9515ReadDataEnqueueEiii>
	ReadDataEnqueue(0x3113, 0, 0);      // actual motor current
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f243 1113 	movw	r1, #12563	; 0x3113
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fd fc18 	bl	80023d8 <_ZN4BG9515ReadDataEnqueueEiii>
	//ReadDataEnqueue(0x3760, 0, 0);      // Actual Target Position
	//ReadDataEnqueue(0x3761, 0, 0);      // Actual Command Position

	//motor pos.
	//ReadDataEnqueue(0x3762, 0, 0);      // Actual Position(
	ReadDataEnqueue(0x396a, 0, 0);      // Actual Position(
 8004ba8:	2300      	movs	r3, #0
 8004baa:	2200      	movs	r2, #0
 8004bac:	f643 116a 	movw	r1, #14698	; 0x396a
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7fd fc11 	bl	80023d8 <_ZN4BG9515ReadDataEnqueueEiii>

	//motor dynamics
	ReadDataEnqueue(0x3a04, 1, 0);      // velocity(rpm)
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f643 2104 	movw	r1, #14852	; 0x3a04
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fd fc0a 	bl	80023d8 <_ZN4BG9515ReadDataEnqueueEiii>
	ReadDataEnqueue(0x3340, 0, 0);      // Acceleration(dV)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f44f 514d 	mov.w	r1, #13120	; 0x3340
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7fd fc03 	bl	80023d8 <_ZN4BG9515ReadDataEnqueueEiii>
	ReadDataEnqueue(0x3342, 0, 0);      // Deceleration(dV)
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f243 3142 	movw	r1, #13122	; 0x3342
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fd fbfc 	bl	80023d8 <_ZN4BG9515ReadDataEnqueueEiii>

	//check Device status
	ReadDataEnqueue(0x3001, 0, 0);      //error status
 8004be0:	2300      	movs	r3, #0
 8004be2:	2200      	movs	r2, #0
 8004be4:	f243 0101 	movw	r1, #12289	; 0x3001
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fd fbf5 	bl	80023d8 <_ZN4BG9515ReadDataEnqueueEiii>
	ReadDataEnqueue(0x3002, 0, 0);      //status register
 8004bee:	2300      	movs	r3, #0
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f243 0102 	movw	r1, #12290	; 0x3002
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fd fbee 	bl	80023d8 <_ZN4BG9515ReadDataEnqueueEiii>
}
 8004bfc:	bf00      	nop
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <_ZN4BG9517InitializeCommandEv>:


//---------------------------------------------------------------------------------------------------Commands

void BG95::InitializeCommand()
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	MandatoryParamEnqueue();
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff fda9 	bl	8004764 <_ZN4BG9521MandatoryParamEnqueueEv>
	RecommendationParamEnqueue();
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff fe62 	bl	80048dc <_ZN4BG9526RecommendationParamEnqueueEv>
	HardwareParamEnqueue();
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff fec2 	bl	80049a2 <_ZN4BG9520HardwareParamEnqueueEv>
}
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <_ZN4BG9513AbsPosCommandEPi>:

void BG95::AbsPosCommand(int *tPos)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
	SetPositionControlEnqueue();
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff fee9 	bl	8004a08 <_ZN4BG9525SetPositionControlEnqueueEv>

	AbsPosCommandEnqueue(tPos);
 8004c36:	6839      	ldr	r1, [r7, #0]
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff ff1a 	bl	8004a72 <_ZN4BG9520AbsPosCommandEnqueueEPi>

}
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <_ZN4BG9513RelPosCommandEPi>:

void BG95::RelPosCommand(int *tPos)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b082      	sub	sp, #8
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
	SetPositionControlEnqueue();
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff fed9 	bl	8004a08 <_ZN4BG9525SetPositionControlEnqueueEv>

	RelPosCommandEnqueue(tPos);
 8004c56:	6839      	ldr	r1, [r7, #0]
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff ff29 	bl	8004ab0 <_ZN4BG9520RelPosCommandEnqueueEPi>
}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <_ZN4BG9515VelClockCommandEv>:

void BG95::VelClockCommand()
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
	SetVelocityControlEnqueue(true);
 8004c6e:	2101      	movs	r1, #1
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff ff3d 	bl	8004af0 <_ZN4BG9525SetVelocityControlEnqueueEb>
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <_ZN4BG9516VelCClockCommandEv>:

void BG95::VelCClockCommand()
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
	SetVelocityControlEnqueue(false);
 8004c86:	2100      	movs	r1, #0
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ff31 	bl	8004af0 <_ZN4BG9525SetVelocityControlEnqueueEb>
}
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <_ZN4BG9516StopMotorCommandEv>:




void BG95::StopMotorCommand()
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
	//WriteDataEnqueue(0x3000, 0, 2);      // quick stop
	WriteDataEnqueue(0x3000, 0, 3);      // halt
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fd fabf 	bl	800222a <_ZN4BG9516WriteDataEnqueueEiii>
}
 8004cac:	bf00      	nop
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc2:	d205      	bcs.n	8004cd0 <_ZSt16__deque_buf_sizej+0x1c>
 8004cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	e000      	b.n	8004cd2 <_ZSt16__deque_buf_sizej+0x1e>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <_ZNSt12_Vector_baseItSaItEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f9f8 	bl	80050dc <_ZNSaItED1Ev>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <_ZNSt12_Vector_baseItSaItEEC1Ev>:
      _Vector_base() = default;
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 f9db 	bl	80050bc <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1Ev>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <_ZNSt6vectorItSaItEEC1Ev>:
      vector() = default;
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff ffeb 	bl	8004cf6 <_ZNSt12_Vector_baseItSaItEEC1Ev>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <_ZNSt5queueItSt5dequeItSaItEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fa32 	bl	800519e <_ZNSt5dequeItSaItEED1Ev>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <_ZN12PNFPosSensorC1Ev>:

#include "PNFPosSensor.h"
#include "transmit_tools/transmit_tools.h"


PNFPosSensor::PNFPosSensor(){};
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	4a1d      	ldr	r2, [pc, #116]	; (8004dc4 <_ZN12PNFPosSensorC1Ev+0x80>)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2205      	movs	r2, #5
 8004d56:	80da      	strh	r2, [r3, #6]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	811a      	strh	r2, [r3, #8]
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	841a      	strh	r2, [r3, #32]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d8e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	649a      	str	r2, [r3, #72]	; 0x48
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	334c      	adds	r3, #76	; 0x4c
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff ffb5 	bl	8004d10 <_ZNSt6vectorItSaItEEC1Ev>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	335c      	adds	r3, #92	; 0x5c
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff ffb0 	bl	8004d10 <_ZNSt6vectorItSaItEEC1Ev>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3368      	adds	r3, #104	; 0x68
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 f9de 	bl	8005176 <_ZNSt5queueItSt5dequeItSaItEEEC1IS2_vEEv>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	08028808 	.word	0x08028808

08004dc8 <_ZN12PNFPosSensorD1Ev>:
PNFPosSensor::~PNFPosSensor(){};
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	4a0b      	ldr	r2, [pc, #44]	; (8004e00 <_ZN12PNFPosSensorD1Ev+0x38>)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3368      	adds	r3, #104	; 0x68
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff ffa5 	bl	8004d2a <_ZNSt5queueItSt5dequeItSaItEEED1Ev>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	335c      	adds	r3, #92	; 0x5c
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f99e 	bl	8005126 <_ZNSt6vectorItSaItEED1Ev>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	334c      	adds	r3, #76	; 0x4c
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f999 	bl	8005126 <_ZNSt6vectorItSaItEED1Ev>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	08028808 	.word	0x08028808

08004e04 <_ZN12PNFPosSensor19TransmitSendRequestEv>:


//---------------------------------------------------------------send or read functions
uint16_t PNFPosSensor::TransmitSendRequest()
{
 8004e04:	b590      	push	{r4, r7, lr}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	unsigned char temp_data_ =  RequestCmd[RequestQueue.front()];
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3368      	adds	r3, #104	; 0x68
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 f9e6 	bl	80051e8 <_ZNSt5queueItSt5dequeItSaItEEE5frontEv>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	4619      	mov	r1, r3
 8004e22:	4620      	mov	r0, r4
 8004e24:	f000 f9ed 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	73fb      	strb	r3, [r7, #15]
	unsigned char temp_data_rev = ~temp_data_;
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	43db      	mvns	r3, r3
 8004e32:	73bb      	strb	r3, [r7, #14]
	unsigned char address_data[3]= {temp_data_, temp_data_rev, 0x00};
 8004e34:	f107 0308 	add.w	r3, r7, #8
 8004e38:	2100      	movs	r1, #0
 8004e3a:	460a      	mov	r2, r1
 8004e3c:	801a      	strh	r2, [r3, #0]
 8004e3e:	460a      	mov	r2, r1
 8004e40:	709a      	strb	r2, [r3, #2]
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
 8004e44:	723b      	strb	r3, [r7, #8]
 8004e46:	7bbb      	ldrb	r3, [r7, #14]
 8004e48:	727b      	strb	r3, [r7, #9]

	/*If uart direction is available*/
	if(this->comm_dir_available_ == true) HAL_GPIO_WritePin(this->GPIO_, this->dir_pin_no_, GPIO_PIN_SET);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d108      	bne.n	8004e66 <_ZN12PNFPosSensor19TransmitSendRequestEv+0x62>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e5e:	2201      	movs	r2, #1
 8004e60:	4619      	mov	r1, r3
 8004e62:	f008 fbed 	bl	800d640 <HAL_GPIO_WritePin>

	if (HAL_UsartTransmit(this->huartx_, address_data, (sizeof(address_data)/sizeof(address_data[0]))) == HAL_OK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6a:	f107 0108 	add.w	r1, r7, #8
 8004e6e:	2203      	movs	r2, #3
 8004e70:	4618      	mov	r0, r3
 8004e72:	f004 ff0b 	bl	8009c8c <_Z17HAL_UsartTransmitP20__UART_HandleTypeDefPhi>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	bf0c      	ite	eq
 8004e7c:	2301      	moveq	r3, #1
 8004e7e:	2300      	movne	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <_ZN12PNFPosSensor19TransmitSendRequestEv+0x86>
	{
		return HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e000      	b.n	8004e8c <_ZN12PNFPosSensor19TransmitSendRequestEv+0x88>
	}
	else
	{
		return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
	}
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd90      	pop	{r4, r7, pc}

08004e94 <_ZN12PNFPosSensor23TransmitReceiveResponseEv>:


uint16_t PNFPosSensor::TransmitReceiveResponse()
{
 8004e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e98:	b087      	sub	sp, #28
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
		return HAL_OK;
	}
	else
	{
		return HAL_TIMEOUT;
	}
 8004e9e:	466b      	mov	r3, sp
 8004ea0:	461e      	mov	r6, r3
	unsigned char tempdata[this->max_read_buf_size_] = {0,};
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ea8:	1e59      	subs	r1, r3, #1
 8004eaa:	6139      	str	r1, [r7, #16]
 8004eac:	460b      	mov	r3, r1
 8004eae:	3301      	adds	r3, #1
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	4698      	mov	r8, r3
 8004eb4:	4691      	mov	r9, r2
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eca:	460b      	mov	r3, r1
 8004ecc:	3301      	adds	r3, #1
 8004ece:	2200      	movs	r2, #0
 8004ed0:	461c      	mov	r4, r3
 8004ed2:	4615      	mov	r5, r2
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	00eb      	lsls	r3, r5, #3
 8004ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ee2:	00e2      	lsls	r2, r4, #3
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	3307      	adds	r3, #7
 8004eea:	08db      	lsrs	r3, r3, #3
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	ebad 0d03 	sub.w	sp, sp, r3
 8004ef2:	466b      	mov	r3, sp
 8004ef4:	3300      	adds	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	1e4b      	subs	r3, r1, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	db04      	blt.n	8004f10 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0x7c>
 8004f06:	2100      	movs	r1, #0
 8004f08:	7011      	strb	r1, [r2, #0]
 8004f0a:	3201      	adds	r2, #1
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	e7f8      	b.n	8004f02 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0x6e>
	if(this->comm_dir_available_ == true) HAL_GPIO_WritePin(this->GPIO_, this->dir_pin_no_, GPIO_PIN_RESET);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d108      	bne.n	8004f2c <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0x98>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f24:	2200      	movs	r2, #0
 8004f26:	4619      	mov	r1, r3
 8004f28:	f008 fb8a 	bl	800d640 <HAL_GPIO_WritePin>
	if(HAL_UsartReceive(this->huartx_, tempdata, this->max_read_buf_size_) == HAL_OK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f36:	461a      	mov	r2, r3
 8004f38:	68f9      	ldr	r1, [r7, #12]
 8004f3a:	f004 fec4 	bl	8009cc6 <_Z16HAL_UsartReceiveP20__UART_HandleTypeDefPhi>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf0c      	ite	eq
 8004f44:	2301      	moveq	r3, #1
 8004f46:	2300      	movne	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d017      	beq.n	8004f7e <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xea>
		for(int i = 0; i<this->max_read_buf_size_; i++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f58:	461a      	mov	r2, r3
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	da0c      	bge.n	8004f7a <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xe6>
			this->pos_buf_.emplace_back(tempdata[i]);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	f000 f958 	bl	8005222 <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_>
		for(int i = 0; i<this->max_read_buf_size_; i++)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	3301      	adds	r3, #1
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	e7eb      	b.n	8004f52 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xbe>
		return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e000      	b.n	8004f80 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xec>
		return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	46b5      	mov	sp, r6
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004f8c <_ZN12PNFPosSensor16QueueSaveRequestEt>:


//---------------------------------------------------------------Command queue functions
//queue system functions
void PNFPosSensor::QueueSaveRequest(uint16_t cmd){this->RequestQueue.push(cmd);}
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	807b      	strh	r3, [r7, #2]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3368      	adds	r3, #104	; 0x68
 8004f9c:	1cba      	adds	r2, r7, #2
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 f96c 	bl	800527e <_ZNSt5queueItSt5dequeItSaItEEE4pushERKt>
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <_ZN12PNFPosSensor18QueueDeleteRequestEv>:
void PNFPosSensor::QueueDeleteRequest()
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
	if(this->now_filter_cnt_ == 0) this->RequestQueue.pop();
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	891b      	ldrh	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d104      	bne.n	8004fc8 <_ZN12PNFPosSensor18QueueDeleteRequestEv+0x1a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3368      	adds	r3, #104	; 0x68
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 f969 	bl	800529a <_ZNSt5queueItSt5dequeItSaItEEE3popEv>
}
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <_ZN12PNFPosSensor14IsInfoFilteredEv>:


//---------------------------------------------------------------filter functions

bool PNFPosSensor::IsInfoFiltered()
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	return (this->now_filter_cnt_>= this->max_filter_cnt_);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	891a      	ldrh	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	88db      	ldrh	r3, [r3, #6]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	bf2c      	ite	cs
 8004fe4:	2301      	movcs	r3, #1
 8004fe6:	2300      	movcc	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <_ZN12PNFPosSensor10IsWorkDoneEv>:

bool PNFPosSensor::IsWorkDone()
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
	return !(this->now_filter_cnt_ == 0);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	891b      	ldrh	r3, [r3, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	bf14      	ite	ne
 8005006:	2301      	movne	r3, #1
 8005008:	2300      	moveq	r3, #0
 800500a:	b2db      	uxtb	r3, r3
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <_ZN12PNFPosSensor13FilterCountUpEv>:


void PNFPosSensor::FilterCountUp()
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	if(this->now_filter_cnt_< this->max_filter_cnt_) this->now_filter_cnt_++;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	891a      	ldrh	r2, [r3, #8]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	88db      	ldrh	r3, [r3, #6]
 8005028:	429a      	cmp	r2, r3
 800502a:	d205      	bcs.n	8005038 <_ZN12PNFPosSensor13FilterCountUpEv+0x20>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	891b      	ldrh	r3, [r3, #8]
 8005030:	3301      	adds	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	811a      	strh	r2, [r3, #8]
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <_ZN12PNFPosSensor16FilterCountResetEv>:

void PNFPosSensor::FilterCountReset()
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
	this->now_filter_cnt_ = 0;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	811a      	strh	r2, [r3, #8]
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <_ZN12PNFPosSensor7IsErrUpEv>:


//---------------------------------------------------------------public main functions
bool PNFPosSensor::IsErrUp()
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
	if(this->err_code_ >= 1) return true;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	8c1b      	ldrh	r3, [r3, #32]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <_ZN12PNFPosSensor7IsErrUpEv+0x14>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <_ZN12PNFPosSensor7IsErrUpEv+0x16>
	else return false;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <_ZN12PNFPosSensor5DriveEv>:


bool PNFPosSensor::Drive()
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	DriveInit();
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3

	DriveComm();
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	330c      	adds	r3, #12
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	4798      	blx	r3

	DriveAnalysis();
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3310      	adds	r3, #16
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	4798      	blx	r3

	return IsWorkDone();
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff ffa2 	bl	8004ff6 <_ZN12PNFPosSensor10IsWorkDoneEv>
 80050b2:	4603      	mov	r3, r0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f8f4 	bl	80052b2 <_ZNSaItEC1Ev>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 f8fc 	bl	80052ca <_ZNSt12_Vector_baseItSaItEE17_Vector_impl_dataC1Ev>
	{ }
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <_ZNSaItED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f904 	bl	80052f2 <_ZN9__gnu_cxx13new_allocatorItED1Ev>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <_ZNSt12_Vector_baseItSaItEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	105b      	asrs	r3, r3, #1
	_M_deallocate(_M_impl._M_start,
 800510c:	461a      	mov	r2, r3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f8fa 	bl	8005308 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
      }
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fde1 	bl	8004cde <_ZNSt12_Vector_baseItSaItEE12_Vector_implD1Ev>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <_ZNSt6vectorItSaItEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8005126:	b5b0      	push	{r4, r5, r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681c      	ldr	r4, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4618      	mov	r0, r3
 800513a:	f000 f8f8 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 800513e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005140:	461a      	mov	r2, r3
 8005142:	4629      	mov	r1, r5
 8005144:	4620      	mov	r0, r4
 8005146:	f000 f8fd 	bl	8005344 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
      }
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff ffd1 	bl	80050f4 <_ZNSt12_Vector_baseItSaItEED1Ev>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bdb0      	pop	{r4, r5, r7, pc}

0800515c <_ZNSt5dequeItSaItEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f906 	bl	8005378 <_ZNSt11_Deque_baseItSaItEEC1Ev>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <_ZNSt5queueItSt5dequeItSaItEEEC1IS2_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
	: c() { }
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4618      	mov	r0, r3
 8005182:	2328      	movs	r3, #40	; 0x28
 8005184:	461a      	mov	r2, r3
 8005186:	2100      	movs	r1, #0
 8005188:	f01e fd12 	bl	8023bb0 <memset>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff ffe4 	bl	800515c <_ZNSt5dequeItSaItEEC1Ev>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <_ZNSt5dequeItSaItEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800519e:	b580      	push	{r7, lr}
 80051a0:	b08a      	sub	sp, #40	; 0x28
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80051a6:	f107 0308 	add.w	r3, r7, #8
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 f916 	bl	80053de <_ZNSt5dequeItSaItEE5beginEv>
 80051b2:	f107 0318 	add.w	r3, r7, #24
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 f91f 	bl	80053fc <_ZNSt5dequeItSaItEE3endEv>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 f92a 	bl	800541a <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 80051c6:	4603      	mov	r3, r0
 80051c8:	f107 0218 	add.w	r2, r7, #24
 80051cc:	f107 0108 	add.w	r1, r7, #8
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f949 	bl	8005468 <_ZNSt5dequeItSaItEE15_M_destroy_dataESt15_Deque_iteratorItRtPtES5_RKS0_>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 f8de 	bl	800539a <_ZNSt11_Deque_baseItSaItEED1Ev>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4618      	mov	r0, r3
 80051e2:	3728      	adds	r7, #40	; 0x28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <_ZNSt5queueItSt5dequeItSaItEEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %queue.
       */
      reference
      front()
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.front();
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f945 	bl	8005482 <_ZNSt5dequeItSaItEE5frontEv>
 80051f8:	4603      	mov	r3, r0
      }
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <_ZNSt6vectorItSaItEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	4413      	add	r3, r2
      }
 8005216:	4618      	mov	r0, r3
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8005222:	b5b0      	push	{r4, r5, r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	429a      	cmp	r2, r3
 8005236:	d011      	beq.n	800525c <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8005238:	687c      	ldr	r4, [r7, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685d      	ldr	r5, [r3, #4]
 800523e:	6838      	ldr	r0, [r7, #0]
 8005240:	f000 f933 	bl	80054aa <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005244:	4603      	mov	r3, r0
 8005246:	461a      	mov	r2, r3
 8005248:	4629      	mov	r1, r5
 800524a:	4620      	mov	r0, r4
 800524c:	f000 f938 	bl	80054c0 <_ZNSt16allocator_traitsISaItEE9constructItJRhEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	1c9a      	adds	r2, r3, #2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	605a      	str	r2, [r3, #4]
      }
 800525a:	e00c      	b.n	8005276 <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f942 	bl	80054e6 <_ZNSt6vectorItSaItEE3endEv>
 8005262:	4604      	mov	r4, r0
 8005264:	6838      	ldr	r0, [r7, #0]
 8005266:	f000 f920 	bl	80054aa <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 800526a:	4603      	mov	r3, r0
 800526c:	461a      	mov	r2, r3
 800526e:	4621      	mov	r1, r4
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f95f 	bl	8005534 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
      }
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bdb0      	pop	{r4, r5, r7, pc}

0800527e <_ZNSt5queueItSt5dequeItSaItEEE4pushERKt>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f000 fa0d 	bl	80056ac <_ZNSt5dequeItSaItEE9push_backERKt>
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <_ZNSt5queueItSt5dequeItSaItEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fa22 	bl	80056ee <_ZNSt5dequeItSaItEE9pop_frontEv>
      }
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <_ZNSaItEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fa3a 	bl	8005734 <_ZN9__gnu_cxx13new_allocatorItEC1Ev>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <_ZNSt12_Vector_baseItSaItEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	609a      	str	r2, [r3, #8]
	{ }
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <_ZN9__gnu_cxx13new_allocatorItED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>:
      _M_deallocate(pointer __p, size_t __n)
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
	if (__p)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fa12 	bl	800574a <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>
      }
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 fa08 	bl	8005768 <_ZSt8_DestroyIPtEvT_S1_>
    }
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <_ZNSt11_Deque_baseItSaItEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff feb7 	bl	80050dc <_ZNSaItED1Ev>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <_ZNSt11_Deque_baseItSaItEEC1Ev>:
      _Deque_base()
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f9fd 	bl	8005782 <_ZNSt11_Deque_baseItSaItEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8005388:	2100      	movs	r1, #0
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fa09 	bl	80057a2 <_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEj>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <_ZNSt11_Deque_baseItSaItEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800539a:	b580      	push	{r7, lr}
 800539c:	b082      	sub	sp, #8
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d010      	beq.n	80053cc <_ZNSt11_Deque_baseItSaItEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80053b2:	3304      	adds	r3, #4
 80053b4:	461a      	mov	r2, r3
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fa56 	bl	8005868 <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6819      	ldr	r1, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	461a      	mov	r2, r3
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fa68 	bl	800589c <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>
    }
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff ffc6 	bl	8005360 <_ZNSt11_Deque_baseItSaItEE11_Deque_implD1Ev>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <_ZNSt5dequeItSaItEE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80053de:	b580      	push	{r7, lr}
 80053e0:	b082      	sub	sp, #8
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	3308      	adds	r3, #8
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f81e 	bl	8005430 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <_ZNSt5dequeItSaItEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	3318      	adds	r3, #24
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f80f 	bl	8005430 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	609a      	str	r2, [r3, #8]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	60da      	str	r2, [r3, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <_ZNSt5dequeItSaItEE15_M_destroy_dataESt15_Deque_iteratorItRtPtES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8005468:	b480      	push	{r7}
 800546a:	b08d      	sub	sp, #52	; 0x34
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8005476:	bf00      	nop
 8005478:	3734      	adds	r7, #52	; 0x34
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <_ZNSt5dequeItSaItEE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8005482:	b580      	push	{r7, lr}
 8005484:	b086      	sub	sp, #24
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
	return *begin();
 800548a:	f107 0308 	add.w	r3, r7, #8
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff ffa4 	bl	80053de <_ZNSt5dequeItSaItEE5beginEv>
 8005496:	f107 0308 	add.w	r3, r7, #8
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fa1a 	bl	80058d4 <_ZNKSt15_Deque_iteratorItRtPtEdeEv>
 80054a0:	4603      	mov	r3, r0
      }
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4618      	mov	r0, r3
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <_ZNSt16allocator_traitsISaItEE9constructItJRhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff ffec 	bl	80054aa <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80054d2:	4603      	mov	r3, r0
 80054d4:	461a      	mov	r2, r3
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fa07 	bl	80058ec <_ZN9__gnu_cxx13new_allocatorItE9constructItJRhEEEvPT_DpOT0_>
	}
 80054de:	bf00      	nop
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <_ZNSt6vectorItSaItEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	1d1a      	adds	r2, r3, #4
 80054f2:	f107 030c 	add.w	r3, r7, #12
 80054f6:	4611      	mov	r1, r2
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fa0f 	bl	800591c <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <_ZNSt6vectorItSaItEE15_S_use_relocateEv>:
      _S_use_relocate()
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800550e:	4618      	mov	r0, r3
 8005510:	f000 f805 	bl	800551e <_ZNSt6vectorItSaItEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8005514:	4603      	mov	r3, r0
      }
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <_ZNSt6vectorItSaItEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8005526:	2301      	movs	r3, #1
      }
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005534:	b5b0      	push	{r4, r5, r7, lr}
 8005536:	b08c      	sub	sp, #48	; 0x30
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8005540:	4a59      	ldr	r2, [pc, #356]	; (80056a8 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x174>)
 8005542:	2101      	movs	r1, #1
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 f9f9 	bl	800593c <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>
 800554a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fa36 	bl	80059ca <_ZNSt6vectorItSaItEE5beginEv>
 800555e:	4603      	mov	r3, r0
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	f107 0214 	add.w	r2, r7, #20
 8005566:	f107 0308 	add.w	r3, r7, #8
 800556a:	4611      	mov	r1, r2
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fa3c 	bl	80059ea <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8005572:	4603      	mov	r3, r0
 8005574:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fa4a 	bl	8005a14 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8005580:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8005586:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	005b      	lsls	r3, r3, #1
	  _Alloc_traits::construct(this->_M_impl,
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	18d5      	adds	r5, r2, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff ff8a 	bl	80054aa <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005596:	4603      	mov	r3, r0
 8005598:	461a      	mov	r2, r3
 800559a:	4629      	mov	r1, r5
 800559c:	4620      	mov	r0, r4
 800559e:	f7ff ff8f 	bl	80054c0 <_ZNSt16allocator_traitsISaItEE9constructItJRhEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 80055a2:	2300      	movs	r3, #0
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80055a6:	f7ff ffaf 	bl	8005508 <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d027      	beq.n	8005600 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80055b0:	f107 0308 	add.w	r3, r7, #8
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fa55 	bl	8005a64 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 80055ba:	4603      	mov	r3, r0
 80055bc:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff feb4 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80055c6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4621      	mov	r1, r4
 80055cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055ce:	f000 fa35 	bl	8005a3c <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 80055d2:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d6:	3302      	adds	r3, #2
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80055da:	f107 0308 	add.w	r3, r7, #8
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fa40 	bl	8005a64 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 80055e4:	4603      	mov	r3, r0
 80055e6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff fe9f 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80055f0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80055f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f4:	6a39      	ldr	r1, [r7, #32]
 80055f6:	4620      	mov	r0, r4
 80055f8:	f000 fa20 	bl	8005a3c <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 80055fc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80055fe:	e026      	b.n	800564e <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8005600:	f107 0308 	add.w	r3, r7, #8
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fa2d 	bl	8005a64 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 800560a:	4603      	mov	r3, r0
 800560c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff fe8c 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005616:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4621      	mov	r1, r4
 800561c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800561e:	f000 fa2c 	bl	8005a7a <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 8005622:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005626:	3302      	adds	r3, #2
 8005628:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800562a:	f107 0308 	add.w	r3, r7, #8
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fa18 	bl	8005a64 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8005634:	4603      	mov	r3, r0
 8005636:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff fe77 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005640:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8005642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005644:	6a39      	ldr	r1, [r7, #32]
 8005646:	4620      	mov	r0, r4
 8005648:	f000 fa17 	bl	8005a7a <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 800564c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800564e:	f7ff ff5b 	bl	8005508 <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 8005652:	4603      	mov	r3, r0
 8005654:	f083 0301 	eor.w	r3, r3, #1
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff fe64 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005666:	4603      	mov	r3, r0
 8005668:	461a      	mov	r2, r3
 800566a:	6a39      	ldr	r1, [r7, #32]
 800566c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800566e:	f7ff fe69 	bl	8005344 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 8005672:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	105b      	asrs	r3, r3, #1
      _M_deallocate(__old_start,
 800567e:	461a      	mov	r2, r3
 8005680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005682:	f7ff fe41 	bl	8005308 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
      this->_M_impl._M_start = __new_start;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005690:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	441a      	add	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	609a      	str	r2, [r3, #8]
    }
 800569e:	bf00      	nop
 80056a0:	3730      	adds	r7, #48	; 0x30
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bdb0      	pop	{r4, r5, r7, pc}
 80056a6:	bf00      	nop
 80056a8:	08025084 	.word	0x08025084

080056ac <_ZNSt5dequeItSaItEE9push_backERKt>:
      push_back(const value_type& __x)
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	3b02      	subs	r3, #2
	if (this->_M_impl._M_finish._M_cur
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d00c      	beq.n	80056de <_ZNSt5dequeItSaItEE9push_backERKt+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	4619      	mov	r1, r3
 80056ce:	f000 f9fa 	bl	8005ac6 <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	1c9a      	adds	r2, r3, #2
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	619a      	str	r2, [r3, #24]
      }
 80056dc:	e003      	b.n	80056e6 <_ZNSt5dequeItSaItEE9push_backERKt+0x3a>
	  _M_push_back_aux(__x);
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fa03 	bl	8005aec <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_>
      }
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <_ZNSt5dequeItSaItEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b082      	sub	sp, #8
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	3b02      	subs	r3, #2
	if (this->_M_impl._M_start._M_cur
 8005700:	429a      	cmp	r2, r3
 8005702:	d010      	beq.n	8005726 <_ZNSt5dequeItSaItEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff fe87 	bl	800541a <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 800570c:	4602      	mov	r2, r0
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	4619      	mov	r1, r3
 8005714:	4610      	mov	r0, r2
 8005716:	f000 f9c9 	bl	8005aac <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	1c9a      	adds	r2, r3, #2
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	609a      	str	r2, [r3, #8]
      }
 8005724:	e002      	b.n	800572c <_ZNSt5dequeItSaItEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fa24 	bl	8005b74 <_ZNSt5dequeItSaItEE16_M_pop_front_auxEv>
      }
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <_ZN9__gnu_cxx13new_allocatorItEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 fa32 	bl	8005bc4 <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <_ZSt8_DestroyIPtEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fa35 	bl	8005be4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPtEEvT_S3_>
    }
 800577a:	bf00      	nop
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <_ZNSt11_Deque_baseItSaItEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff fd91 	bl	80052b2 <_ZNSaItEC1Ev>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fa31 	bl	8005bfa <_ZNSt11_Deque_baseItSaItEE16_Deque_impl_dataC1Ev>
	{ }
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80057a2:	b590      	push	{r4, r7, lr}
 80057a4:	b089      	sub	sp, #36	; 0x24
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80057ac:	2002      	movs	r0, #2
 80057ae:	f7ff fa81 	bl	8004cb4 <_ZSt16__deque_buf_sizej>
 80057b2:	4602      	mov	r2, r0
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ba:	3301      	adds	r3, #1
 80057bc:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80057be:	2308      	movs	r3, #8
 80057c0:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3302      	adds	r3, #2
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	f107 0210 	add.w	r2, r7, #16
 80057cc:	f107 030c 	add.w	r3, r7, #12
 80057d0:	4611      	mov	r1, r2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe f9e9 	bl	8003baa <_ZSt3maxIjERKT_S2_S2_>
 80057d8:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fa20 	bl	8005c2c <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>
 80057ec:	4602      	mov	r2, r0
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6859      	ldr	r1, [r3, #4]
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	1acb      	subs	r3, r1, r3
 80057fe:	085b      	lsrs	r3, r3, #1
 8005800:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8005802:	4413      	add	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	4413      	add	r3, r2
 800580e:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	69b9      	ldr	r1, [r7, #24]
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fa26 	bl	8005c66 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3308      	adds	r3, #8
 800581e:	69b9      	ldr	r1, [r7, #24]
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fa3a 	bl	8005c9a <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f103 0218 	add.w	r2, r3, #24
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	3b04      	subs	r3, #4
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f000 fa31 	bl	8005c9a <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8005844:	2002      	movs	r0, #2
 8005846:	f7ff fa35 	bl	8004cb4 <_ZSt16__deque_buf_sizej>
 800584a:	4602      	mov	r2, r0
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005852:	fb01 f202 	mul.w	r2, r1, r2
 8005856:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	619a      	str	r2, [r3, #24]
    }
 8005860:	bf00      	nop
 8005862:	3724      	adds	r7, #36	; 0x24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd90      	pop	{r4, r7, pc}

08005868 <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_>:
    _Deque_base<_Tp, _Alloc>::
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	d209      	bcs.n	8005894 <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_+0x2c>
	_M_deallocate_node(*__n);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4619      	mov	r1, r3
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fa20 	bl	8005ccc <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	3304      	adds	r3, #4
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	e7f1      	b.n	8005878 <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_+0x10>
    }
 8005894:	bf00      	nop
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80058a8:	f107 0314 	add.w	r3, r7, #20
 80058ac:	68f9      	ldr	r1, [r7, #12]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fa1f 	bl	8005cf2 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80058b4:	f107 0314 	add.w	r3, r7, #20
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fa35 	bl	8005d2c <_ZNSt16allocator_traitsISaIPtEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80058c2:	f107 0314 	add.w	r3, r7, #20
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fa24 	bl	8005d14 <_ZNSaIPtED1Ev>
      }
 80058cc:	bf00      	nop
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <_ZNKSt15_Deque_iteratorItRtPtEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <_ZN9__gnu_cxx13new_allocatorItE9constructItJRhEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80058ec:	b590      	push	{r4, r7, lr}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff fdd6 	bl	80054aa <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80058fe:	4603      	mov	r3, r0
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b29c      	uxth	r4, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	4619      	mov	r1, r3
 8005908:	2002      	movs	r0, #2
 800590a:	f7fc faa4 	bl	8001e56 <_ZnwjPv>
 800590e:	4603      	mov	r3, r0
 8005910:	4622      	mov	r2, r4
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	bd90      	pop	{r4, r7, pc}

0800591c <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800593c:	b590      	push	{r4, r7, lr}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f9fe 	bl	8005d4a <_ZNKSt6vectorItSaItEE8max_sizeEv>
 800594e:	4604      	mov	r4, r0
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 fa0b 	bl	8005d6c <_ZNKSt6vectorItSaItEE4sizeEv>
 8005956:	4603      	mov	r3, r0
 8005958:	1ae2      	subs	r2, r4, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	429a      	cmp	r2, r3
 800595e:	bf34      	ite	cc
 8005960:	2301      	movcc	r3, #1
 8005962:	2300      	movcs	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f01c ffbd 	bl	80228ea <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f9fb 	bl	8005d6c <_ZNKSt6vectorItSaItEE4sizeEv>
 8005976:	4604      	mov	r4, r0
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f9f7 	bl	8005d6c <_ZNKSt6vectorItSaItEE4sizeEv>
 800597e:	4603      	mov	r3, r0
 8005980:	613b      	str	r3, [r7, #16]
 8005982:	f107 0208 	add.w	r2, r7, #8
 8005986:	f107 0310 	add.w	r3, r7, #16
 800598a:	4611      	mov	r1, r2
 800598c:	4618      	mov	r0, r3
 800598e:	f7fe f90c 	bl	8003baa <_ZSt3maxIjERKT_S2_S2_>
 8005992:	4603      	mov	r3, r0
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4423      	add	r3, r4
 8005998:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f9e6 	bl	8005d6c <_ZNKSt6vectorItSaItEE4sizeEv>
 80059a0:	4602      	mov	r2, r0
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d306      	bcc.n	80059b6 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x7a>
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f9ce 	bl	8005d4a <_ZNKSt6vectorItSaItEE8max_sizeEv>
 80059ae:	4602      	mov	r2, r0
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d904      	bls.n	80059c0 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x84>
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 f9c7 	bl	8005d4a <_ZNKSt6vectorItSaItEE8max_sizeEv>
 80059bc:	4603      	mov	r3, r0
 80059be:	e000      	b.n	80059c2 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x86>
 80059c0:	697b      	ldr	r3, [r7, #20]
      }
 80059c2:	4618      	mov	r0, r3
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd90      	pop	{r4, r7, pc}

080059ca <_ZNSt6vectorItSaItEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	f107 030c 	add.w	r3, r7, #12
 80059d8:	4611      	mov	r1, r2
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff ff9e 	bl	800591c <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80059ea:	b590      	push	{r4, r7, lr}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f835 	bl	8005a64 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 80059fa:	4603      	mov	r3, r0
 80059fc:	681c      	ldr	r4, [r3, #0]
 80059fe:	6838      	ldr	r0, [r7, #0]
 8005a00:	f000 f830 	bl	8005a64 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8005a04:	4603      	mov	r3, r0
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	1ae3      	subs	r3, r4, r3
 8005a0a:	105b      	asrs	r3, r3, #1
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd90      	pop	{r4, r7, pc}

08005a14 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d006      	beq.n	8005a32 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj+0x1e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 f9af 	bl	8005d8c <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	e000      	b.n	8005a34 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj+0x20>
 8005a32:	2300      	movs	r3, #0
      }
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8005a3c:	b590      	push	{r4, r7, lr}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8005a4a:	f88d 4000 	strb.w	r4, [sp]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f9a8 	bl	8005daa <_ZNSt6vectorItSaItEE14_S_do_relocateEPtS2_S2_RS0_St17integral_constantIbLb1EE>
 8005a5a:	4603      	mov	r3, r0
      }
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd90      	pop	{r4, r7, pc}

08005a64 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8005a7a:	b590      	push	{r4, r7, lr}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	607a      	str	r2, [r7, #4]
 8005a86:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 f9a0 	bl	8005dce <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 8005a8e:	4604      	mov	r4, r0
 8005a90:	68b8      	ldr	r0, [r7, #8]
 8005a92:	f000 f99c 	bl	8005dce <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 8005a96:	4601      	mov	r1, r0
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 f9a5 	bl	8005dec <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>
 8005aa2:	4603      	mov	r3, r0
    }
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd90      	pop	{r4, r7, pc}

08005aac <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8005ab6:	6839      	ldr	r1, [r7, #0]
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f9a8 	bl	8005e0e <_ZN9__gnu_cxx13new_allocatorItE7destroyItEEvPT_>
	}
 8005abe:	bf00      	nop
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f9a6 	bl	8005e24 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	461a      	mov	r2, r3
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f9ab 	bl	8005e3a <_ZN9__gnu_cxx13new_allocatorItE9constructItJRKtEEEvPT_DpOT0_>
	}
 8005ae4:	bf00      	nop
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8005aec:	b5b0      	push	{r4, r5, r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f9b6 	bl	8005e68 <_ZNKSt5dequeItSaItEE4sizeEv>
 8005afc:	4604      	mov	r4, r0
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f9c4 	bl	8005e8c <_ZNKSt5dequeItSaItEE8max_sizeEv>
 8005b04:	4603      	mov	r3, r0
 8005b06:	429c      	cmp	r4, r3
 8005b08:	bf0c      	ite	eq
 8005b0a:	2301      	moveq	r3, #1
 8005b0c:	2300      	movne	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_+0x2e>
	  __throw_length_error(
 8005b14:	4816      	ldr	r0, [pc, #88]	; (8005b70 <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_+0x84>)
 8005b16:	f01c fee8 	bl	80228ea <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f9c6 	bl	8005eae <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	1d1c      	adds	r4, r3, #4
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f000 f9da 	bl	8005ee4 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>
 8005b30:	4603      	mov	r3, r0
 8005b32:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8005b34:	687c      	ldr	r4, [r7, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699d      	ldr	r5, [r3, #24]
 8005b3a:	6838      	ldr	r0, [r7, #0]
 8005b3c:	f000 f972 	bl	8005e24 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8005b40:	4603      	mov	r3, r0
 8005b42:	461a      	mov	r2, r3
 8005b44:	4629      	mov	r1, r5
 8005b46:	4620      	mov	r0, r4
 8005b48:	f7ff ffbd 	bl	8005ac6 <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f103 0218 	add.w	r2, r3, #24
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f000 f89d 	bl	8005c9a <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8005b68:	bf00      	nop
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8005b70:	080250a0 	.word	0x080250a0

08005b74 <_ZNSt5dequeItSaItEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff fc4b 	bl	800541a <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005b84:	4602      	mov	r2, r0
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f7ff ff8d 	bl	8005aac <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	f000 f896 	bl	8005ccc <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f103 0208 	add.w	r2, r3, #8
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f000 f873 	bl	8005c9a <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	609a      	str	r2, [r3, #8]
    }
 8005bbc:	bf00      	nop
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>:
      deallocate(_Tp* __p, size_type __t)
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	68b8      	ldr	r0, [r7, #8]
 8005bd8:	f01c fe5c 	bl	8022894 <_ZdlPvj>
      }
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPtEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <_ZNSt11_Deque_baseItSaItEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	605a      	str	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3308      	adds	r3, #8
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 f978 	bl	8005f08 <_ZNSt15_Deque_iteratorItRtPtEC1Ev>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3318      	adds	r3, #24
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 f973 	bl	8005f08 <_ZNSt15_Deque_iteratorItRtPtEC1Ev>
	{ }
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8005c2c:	b590      	push	{r4, r7, lr}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005c36:	f107 030c 	add.w	r3, r7, #12
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 f858 	bl	8005cf2 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005c42:	f107 030c 	add.w	r3, r7, #12
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 f974 	bl	8005f36 <_ZNSt16allocator_traitsISaIPtEE8allocateERS1_j>
 8005c4e:	4604      	mov	r4, r0
 8005c50:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005c52:	f107 030c 	add.w	r3, r7, #12
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 f85c 	bl	8005d14 <_ZNSaIPtED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005c5c:	4623      	mov	r3, r4
      }
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd90      	pop	{r4, r7, pc}

08005c66 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_>:
    _Deque_base<_Tp, _Alloc>::
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b086      	sub	sp, #24
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d209      	bcs.n	8005c92 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f930 	bl	8005ee4 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>
 8005c84:	4602      	mov	r2, r0
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	e7f1      	b.n	8005c76 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_+0x10>
    }
 8005c92:	bf00      	nop
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8005c9a:	b590      	push	{r4, r7, lr}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685c      	ldr	r4, [r3, #4]
 8005cb6:	f000 f94d 	bl	8005f54 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	18e2      	adds	r2, r4, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	609a      	str	r2, [r3, #8]
      }
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd90      	pop	{r4, r7, pc}

08005ccc <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8005ccc:	b590      	push	{r4, r7, lr}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8005cd6:	687c      	ldr	r4, [r7, #4]
 8005cd8:	2002      	movs	r0, #2
 8005cda:	f7fe ffeb 	bl	8004cb4 <_ZSt16__deque_buf_sizej>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f7ff fd30 	bl	800574a <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>
      }
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd90      	pop	{r4, r7, pc}

08005cf2 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8005cfc:	6838      	ldr	r0, [r7, #0]
 8005cfe:	f000 f931 	bl	8005f64 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005d02:	4603      	mov	r3, r0
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f937 	bl	8005f7a <_ZNSaIPtEC1ItEERKSaIT_E>
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <_ZNSaIPtED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f939 	bl	8005f94 <_ZN9__gnu_cxx13new_allocatorIPtED1Ev>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <_ZNSt16allocator_traitsISaIPtEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f934 	bl	8005faa <_ZN9__gnu_cxx13new_allocatorIPtE10deallocateEPS1_j>
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <_ZNKSt6vectorItSaItEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 f952 	bl	8005ffe <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 f934 	bl	8005fca <_ZNSt6vectorItSaItEE11_S_max_sizeERKS0_>
 8005d62:	4603      	mov	r3, r0
 8005d64:	4618      	mov	r0, r3
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <_ZNKSt6vectorItSaItEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	105b      	asrs	r3, r3, #1
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005d96:	2200      	movs	r2, #0
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f93a 	bl	8006014 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>
 8005da0:	4603      	mov	r3, r0
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <_ZNSt6vectorItSaItEE14_S_do_relocateEPtS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 f946 	bl	8006050 <_ZSt12__relocate_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 8005dc4:	4603      	mov	r3, r0
      }
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8005dd6:	f107 030c 	add.w	r3, r7, #12
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 f954 	bl	800608a <_ZNSt13move_iteratorIPtEC1ES0_>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f955 	bl	80060ae <_ZSt18uninitialized_copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>
 8005e04:	4603      	mov	r3, r0
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <_ZN9__gnu_cxx13new_allocatorItE7destroyItEEvPT_>:
	destroy(_Up* __p)
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <_ZN9__gnu_cxx13new_allocatorItE9constructItJRKtEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005e3a:	b590      	push	{r4, r7, lr}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff ffec 	bl	8005e24 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	881c      	ldrh	r4, [r3, #0]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4619      	mov	r1, r3
 8005e54:	2002      	movs	r0, #2
 8005e56:	f7fb fffe 	bl	8001e56 <_ZnwjPv>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	4622      	mov	r2, r4
 8005e5e:	801a      	strh	r2, [r3, #0]
 8005e60:	bf00      	nop
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd90      	pop	{r4, r7, pc}

08005e68 <_ZNKSt5dequeItSaItEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f103 0218 	add.w	r2, r3, #24
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3308      	adds	r3, #8
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	f000 f928 	bl	80060d2 <_ZStmiRKSt15_Deque_iteratorItRtPtES4_>
 8005e82:	4603      	mov	r3, r0
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <_ZNKSt5dequeItSaItEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 f864 	bl	8005f64 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 f93b 	bl	800611a <_ZNSt5dequeItSaItEE11_S_max_sizeERKS0_>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	6809      	ldr	r1, [r1, #0]
 8005ec8:	1a41      	subs	r1, r0, r1
 8005eca:	1089      	asrs	r1, r1, #2
 8005ecc:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d904      	bls.n	8005edc <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f939 	bl	800614e <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb>
      }
 8005edc:	bf00      	nop
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8005ee4:	b590      	push	{r4, r7, lr}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8005eec:	687c      	ldr	r4, [r7, #4]
 8005eee:	2002      	movs	r0, #2
 8005ef0:	f7fe fee0 	bl	8004cb4 <_ZSt16__deque_buf_sizej>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f7ff ff47 	bl	8005d8c <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>
 8005efe:	4603      	mov	r3, r0
      }
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd90      	pop	{r4, r7, pc}

08005f08 <_ZNSt15_Deque_iteratorItRtPtEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	605a      	str	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	609a      	str	r2, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	60da      	str	r2, [r3, #12]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <_ZNSt16allocator_traitsISaIPtEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005f40:	2200      	movs	r2, #0
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f99c 	bl	8006282 <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8005f58:	2002      	movs	r0, #2
 8005f5a:	f7fe feab 	bl	8004cb4 <_ZSt16__deque_buf_sizej>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4618      	mov	r0, r3
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <_ZNSaIPtEC1ItEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f99a 	bl	80062be <_ZN9__gnu_cxx13new_allocatorIPtEC1Ev>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <_ZN9__gnu_cxx13new_allocatorIPtED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <_ZN9__gnu_cxx13new_allocatorIPtE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	68b8      	ldr	r0, [r7, #8]
 8005fbe:	f01c fc69 	bl	8022894 <_ZdlPvj>
      }
 8005fc2:	bf00      	nop
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <_ZNSt6vectorItSaItEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8005fd2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005fd6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f97b 	bl	80062d4 <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005fe2:	f107 0208 	add.w	r2, r7, #8
 8005fe6:	f107 030c 	add.w	r3, r7, #12
 8005fea:	4611      	mov	r1, r2
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fe f899 	bl	8004124 <_ZSt3minIjERKT_S2_S2_>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	681b      	ldr	r3, [r3, #0]
      }
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f963 	bl	80062ec <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>
 8006026:	4602      	mov	r2, r0
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4293      	cmp	r3, r2
 800602c:	bf8c      	ite	hi
 800602e:	2301      	movhi	r3, #1
 8006030:	2300      	movls	r3, #0
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006038:	f01c fc51 	bl	80228de <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	4618      	mov	r0, r3
 8006042:	f01c fc38 	bl	80228b6 <_Znwj>
 8006046:	4603      	mov	r3, r0
      }
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <_ZSt12__relocate_aIPtS0_SaItEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006050:	b5b0      	push	{r4, r5, r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f950 	bl	8006304 <_ZSt12__niter_baseIPtET_S1_>
 8006064:	4604      	mov	r4, r0
 8006066:	68b8      	ldr	r0, [r7, #8]
 8006068:	f000 f94c 	bl	8006304 <_ZSt12__niter_baseIPtET_S1_>
 800606c:	4605      	mov	r5, r0
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f948 	bl	8006304 <_ZSt12__niter_baseIPtET_S1_>
 8006074:	4602      	mov	r2, r0
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	4629      	mov	r1, r5
 800607a:	4620      	mov	r0, r4
 800607c:	f000 f94d 	bl	800631a <_ZSt14__relocate_a_1IttENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8006080:	4603      	mov	r3, r0
    }
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bdb0      	pop	{r4, r5, r7, pc}

0800608a <_ZNSt13move_iteratorIPtEC1ES0_>:
      move_iterator(iterator_type __i)
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8006094:	463b      	mov	r3, r7
 8006096:	4618      	mov	r0, r3
 8006098:	f000 f95d 	bl	8006356 <_ZSt4moveIRPtEONSt16remove_referenceIT_E4typeEOS3_>
 800609c:	4603      	mov	r3, r0
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <_ZSt18uninitialized_copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b086      	sub	sp, #24
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80060ba:	2301      	movs	r3, #1
 80060bc:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 f952 	bl	800636c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPtES3_EET0_T_S6_S5_>
 80060c8:	4603      	mov	r3, r0
    }
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <_ZStmiRKSt15_Deque_iteratorItRtPtES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b082      	sub	sp, #8
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80060dc:	f7ff ff3a 	bl	8005f54 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 80060e0:	4603      	mov	r3, r0
 80060e2:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	109b      	asrs	r3, r3, #2
 80060f0:	3b01      	subs	r3, #1
 80060f2:	fb01 f303 	mul.w	r3, r1, r3
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6811      	ldr	r1, [r2, #0]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6852      	ldr	r2, [r2, #4]
 80060fe:	1a8a      	subs	r2, r1, r2
 8006100:	1052      	asrs	r2, r2, #1
 8006102:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	6891      	ldr	r1, [r2, #8]
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	6812      	ldr	r2, [r2, #0]
 800610c:	1a8a      	subs	r2, r1, r2
 800610e:	1052      	asrs	r2, r2, #1
 8006110:	4413      	add	r3, r2
      }
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <_ZNSt5dequeItSaItEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8006122:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006126:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f8d3 	bl	80062d4 <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>
 800612e:	4603      	mov	r3, r0
 8006130:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006132:	f107 0208 	add.w	r2, r7, #8
 8006136:	f107 030c 	add.w	r3, r7, #12
 800613a:	4611      	mov	r1, r2
 800613c:	4618      	mov	r0, r3
 800613e:	f7fd fff1 	bl	8004124 <_ZSt3minIjERKT_S2_S2_>
 8006142:	4603      	mov	r3, r0
 8006144:	681b      	ldr	r3, [r3, #0]
      }
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800614e:	b590      	push	{r4, r7, lr}
 8006150:	b08b      	sub	sp, #44	; 0x2c
 8006152:	af00      	add	r7, sp, #0
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	4613      	mov	r3, r2
 800615a:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	109b      	asrs	r3, r3, #2
 8006168:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800616a:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	6a3a      	ldr	r2, [r7, #32]
 8006170:	4413      	add	r3, r2
 8006172:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	429a      	cmp	r2, r3
 800617e:	d92d      	bls.n	80061dc <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	1acb      	subs	r3, r1, r3
 800618c:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800618e:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x4e>
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	e000      	b.n	800619e <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x50>
 800619c:	2300      	movs	r3, #0
 800619e:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80061a0:	4413      	add	r3, r2
 80061a2:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d209      	bcs.n	80061c2 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80061b6:	3304      	adds	r3, #4
 80061b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ba:	4619      	mov	r1, r3
 80061bc:	f000 f8e6 	bl	800638c <_ZSt4copyIPPtS1_ET0_T_S3_S2_>
 80061c0:	e048      	b.n	8006254 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80061ca:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80061d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d2:	4413      	add	r3, r2
 80061d4:	461a      	mov	r2, r3
 80061d6:	f000 f8f1 	bl	80063bc <_ZSt13copy_backwardIPPtS1_ET0_T_S3_S2_>
 80061da:	e03b      	b.n	8006254 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3304      	adds	r3, #4
 80061e4:	f107 0208 	add.w	r2, r7, #8
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fd fcdd 	bl	8003baa <_ZSt3maxIjERKT_S2_S2_>
 80061f0:	4603      	mov	r3, r0
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80061f6:	3302      	adds	r3, #2
 80061f8:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	69b9      	ldr	r1, [r7, #24]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff fd14 	bl	8005c2c <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>
 8006204:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	085b      	lsrs	r3, r3, #1
 800620e:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0xce>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	e000      	b.n	800621e <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0xd0>
 800621c:	2300      	movs	r3, #0
 800621e:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4413      	add	r3, r2
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800622e:	3304      	adds	r3, #4
 8006230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006232:	4619      	mov	r1, r3
 8006234:	f000 f8aa 	bl	800638c <_ZSt4copyIPPtS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6819      	ldr	r1, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	461a      	mov	r2, r3
 8006244:	f7ff fb2a 	bl	800589c <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>

	  this->_M_impl._M_map = __new_map;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3308      	adds	r3, #8
 8006258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff fd1d 	bl	8005c9a <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f103 0018 	add.w	r0, r3, #24
 8006266:	6a3a      	ldr	r2, [r7, #32]
 8006268:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006272:	4413      	add	r3, r2
 8006274:	4619      	mov	r1, r3
 8006276:	f7ff fd10 	bl	8005c9a <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
    }
 800627a:	bf00      	nop
 800627c:	372c      	adds	r7, #44	; 0x2c
 800627e:	46bd      	mov	sp, r7
 8006280:	bd90      	pop	{r4, r7, pc}

08006282 <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f8ac 	bl	80063ec <_ZNK9__gnu_cxx13new_allocatorIPtE11_M_max_sizeEv>
 8006294:	4602      	mov	r2, r0
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4293      	cmp	r3, r2
 800629a:	bf8c      	ite	hi
 800629c:	2301      	movhi	r3, #1
 800629e:	2300      	movls	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80062a6:	f01c fb1a 	bl	80228de <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f01c fb01 	bl	80228b6 <_Znwj>
 80062b4:	4603      	mov	r3, r0
      }
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <_ZN9__gnu_cxx13new_allocatorIPtEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4618      	mov	r0, r3
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f891 	bl	8006404 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>
 80062e2:	4603      	mov	r3, r0
      }
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80062f4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <_ZSt12__niter_baseIPtET_S1_>:
    __niter_base(_Iterator __it)
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <_ZSt14__relocate_a_1IttENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800631a:	b580      	push	{r7, lr}
 800631c:	b086      	sub	sp, #24
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
 8006326:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	105b      	asrs	r3, r3, #1
 8006330:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	dd06      	ble.n	8006346 <_ZSt14__relocate_a_1IttENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	461a      	mov	r2, r3
 800633e:	68f9      	ldr	r1, [r7, #12]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f01d fc1b 	bl	8023b7c <memmove>
      return __result + __count;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	4413      	add	r3, r2
    }
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <_ZSt4moveIRPtEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPtES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	68b9      	ldr	r1, [r7, #8]
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 f84d 	bl	800641c <_ZSt4copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>
 8006382:	4603      	mov	r3, r0
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <_ZSt4copyIPPtS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 800638c:	b590      	push	{r4, r7, lr}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f857 	bl	800644c <_ZSt12__miter_baseIPPtET_S2_>
 800639e:	4604      	mov	r4, r0
 80063a0:	68b8      	ldr	r0, [r7, #8]
 80063a2:	f000 f853 	bl	800644c <_ZSt12__miter_baseIPPtET_S2_>
 80063a6:	4603      	mov	r3, r0
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	4619      	mov	r1, r3
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 f858 	bl	8006462 <_ZSt13__copy_move_aILb0EPPtS1_ET1_T0_S3_S2_>
 80063b2:	4603      	mov	r3, r0
    }
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd90      	pop	{r4, r7, pc}

080063bc <_ZSt13copy_backwardIPPtS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80063bc:	b590      	push	{r4, r7, lr}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f83f 	bl	800644c <_ZSt12__miter_baseIPPtET_S2_>
 80063ce:	4604      	mov	r4, r0
 80063d0:	68b8      	ldr	r0, [r7, #8]
 80063d2:	f000 f83b 	bl	800644c <_ZSt12__miter_baseIPPtET_S2_>
 80063d6:	4603      	mov	r3, r0
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	4619      	mov	r1, r3
 80063dc:	4620      	mov	r0, r4
 80063de:	f000 f863 	bl	80064a8 <_ZSt22__copy_move_backward_aILb0EPPtS1_ET1_T0_S3_S2_>
 80063e2:	4603      	mov	r3, r0
    }
 80063e4:	4618      	mov	r0, r3
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd90      	pop	{r4, r7, pc}

080063ec <_ZNK9__gnu_cxx13new_allocatorIPtE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80063f4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff ff6d 	bl	80062ec <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>
 8006412:	4603      	mov	r3, r0
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <_ZSt4copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800641c:	b590      	push	{r4, r7, lr}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f860 	bl	80064ee <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800642e:	4604      	mov	r4, r0
 8006430:	68b8      	ldr	r0, [r7, #8]
 8006432:	f000 f85c 	bl	80064ee <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006436:	4603      	mov	r3, r0
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	4619      	mov	r1, r3
 800643c:	4620      	mov	r0, r4
 800643e:	f000 f867 	bl	8006510 <_ZSt13__copy_move_aILb1EPtS0_ET1_T0_S2_S1_>
 8006442:	4603      	mov	r3, r0
    }
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	bd90      	pop	{r4, r7, pc}

0800644c <_ZSt12__miter_baseIPPtET_S2_>:
    __miter_base(_Iterator __it)
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <_ZSt13__copy_move_aILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006462:	b5b0      	push	{r4, r5, r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 f871 	bl	8006556 <_ZSt12__niter_baseIPPtET_S2_>
 8006474:	4604      	mov	r4, r0
 8006476:	68b8      	ldr	r0, [r7, #8]
 8006478:	f000 f86d 	bl	8006556 <_ZSt12__niter_baseIPPtET_S2_>
 800647c:	4605      	mov	r5, r0
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4618      	mov	r0, r3
 8006482:	f000 f868 	bl	8006556 <_ZSt12__niter_baseIPPtET_S2_>
 8006486:	4603      	mov	r3, r0
 8006488:	461a      	mov	r2, r3
 800648a:	4629      	mov	r1, r5
 800648c:	4620      	mov	r0, r4
 800648e:	f000 f86d 	bl	800656c <_ZSt14__copy_move_a1ILb0EPPtS1_ET1_T0_S3_S2_>
 8006492:	4602      	mov	r2, r0
 8006494:	1d3b      	adds	r3, r7, #4
 8006496:	4611      	mov	r1, r2
 8006498:	4618      	mov	r0, r3
 800649a:	f000 f877 	bl	800658c <_ZSt12__niter_wrapIPPtET_RKS2_S2_>
 800649e:	4603      	mov	r3, r0
    }
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bdb0      	pop	{r4, r5, r7, pc}

080064a8 <_ZSt22__copy_move_backward_aILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80064a8:	b5b0      	push	{r4, r5, r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 f84e 	bl	8006556 <_ZSt12__niter_baseIPPtET_S2_>
 80064ba:	4604      	mov	r4, r0
 80064bc:	68b8      	ldr	r0, [r7, #8]
 80064be:	f000 f84a 	bl	8006556 <_ZSt12__niter_baseIPPtET_S2_>
 80064c2:	4605      	mov	r5, r0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f845 	bl	8006556 <_ZSt12__niter_baseIPPtET_S2_>
 80064cc:	4603      	mov	r3, r0
 80064ce:	461a      	mov	r2, r3
 80064d0:	4629      	mov	r1, r5
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 f866 	bl	80065a4 <_ZSt23__copy_move_backward_a1ILb0EPPtS1_ET1_T0_S3_S2_>
 80064d8:	4602      	mov	r2, r0
 80064da:	1d3b      	adds	r3, r7, #4
 80064dc:	4611      	mov	r1, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 f854 	bl	800658c <_ZSt12__niter_wrapIPPtET_RKS2_S2_>
 80064e4:	4603      	mov	r3, r0
    }
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bdb0      	pop	{r4, r5, r7, pc}

080064ee <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b082      	sub	sp, #8
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80064f6:	1d3b      	adds	r3, r7, #4
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 f863 	bl	80065c4 <_ZNKSt13move_iteratorIPtE4baseEv>
 80064fe:	4603      	mov	r3, r0
 8006500:	4618      	mov	r0, r3
 8006502:	f000 f86b 	bl	80065dc <_ZSt12__miter_baseIPtET_S1_>
 8006506:	4603      	mov	r3, r0
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <_ZSt13__copy_move_aILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006510:	b5b0      	push	{r4, r5, r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f7ff fef1 	bl	8006304 <_ZSt12__niter_baseIPtET_S1_>
 8006522:	4604      	mov	r4, r0
 8006524:	68b8      	ldr	r0, [r7, #8]
 8006526:	f7ff feed 	bl	8006304 <_ZSt12__niter_baseIPtET_S1_>
 800652a:	4605      	mov	r5, r0
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff fee8 	bl	8006304 <_ZSt12__niter_baseIPtET_S1_>
 8006534:	4603      	mov	r3, r0
 8006536:	461a      	mov	r2, r3
 8006538:	4629      	mov	r1, r5
 800653a:	4620      	mov	r0, r4
 800653c:	f000 f859 	bl	80065f2 <_ZSt14__copy_move_a1ILb1EPtS0_ET1_T0_S2_S1_>
 8006540:	4602      	mov	r2, r0
 8006542:	1d3b      	adds	r3, r7, #4
 8006544:	4611      	mov	r1, r2
 8006546:	4618      	mov	r0, r3
 8006548:	f000 f863 	bl	8006612 <_ZSt12__niter_wrapIPtET_RKS1_S1_>
 800654c:	4603      	mov	r3, r0
    }
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bdb0      	pop	{r4, r5, r7, pc}

08006556 <_ZSt12__niter_baseIPPtET_S2_>:
    __niter_base(_Iterator __it)
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <_ZSt14__copy_move_a1ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f854 	bl	800662a <_ZSt14__copy_move_a2ILb0EPPtS1_ET1_T0_S3_S2_>
 8006582:	4603      	mov	r3, r0
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <_ZSt12__niter_wrapIPPtET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <_ZSt23__copy_move_backward_a1ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f848 	bl	800664a <_ZSt23__copy_move_backward_a2ILb0EPPtS1_ET1_T0_S3_S2_>
 80065ba:	4603      	mov	r3, r0
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <_ZNKSt13move_iteratorIPtE4baseEv>:
      base() const
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <_ZSt12__miter_baseIPtET_S1_>:
    __miter_base(_Iterator __it)
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4618      	mov	r0, r3
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <_ZSt14__copy_move_a1ILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	60b9      	str	r1, [r7, #8]
 80065fc:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f831 	bl	800666a <_ZSt14__copy_move_a2ILb1EPtS0_ET1_T0_S2_S1_>
 8006608:	4603      	mov	r3, r0
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <_ZSt12__niter_wrapIPtET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <_ZSt14__copy_move_a2ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f825 	bl	800668a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_>
 8006640:	4603      	mov	r3, r0
    }
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <_ZSt23__copy_move_backward_a2ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800664a:	b580      	push	{r7, lr}
 800664c:	b084      	sub	sp, #16
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f832 	bl	80066c4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_>
 8006660:	4603      	mov	r3, r0
    }
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <_ZSt14__copy_move_a2ILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	60f8      	str	r0, [r7, #12]
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 f844 	bl	8006708 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>
 8006680:	4603      	mov	r3, r0
    }
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800668a:	b580      	push	{r7, lr}
 800668c:	b086      	sub	sp, #24
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	109b      	asrs	r3, r3, #2
 800669e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d006      	beq.n	80066b4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	461a      	mov	r2, r3
 80066ac:	68f9      	ldr	r1, [r7, #12]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f01d fa64 	bl	8023b7c <memmove>
	  return __result + _Num;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	4413      	add	r3, r2
	}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	109b      	asrs	r3, r3, #2
 80066d8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00a      	beq.n	80066f6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	425b      	negs	r3, r3
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	18d0      	adds	r0, r2, r3
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	461a      	mov	r2, r3
 80066f0:	68f9      	ldr	r1, [r7, #12]
 80066f2:	f01d fa43 	bl	8023b7c <memmove>
	  return __result - _Num;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	425b      	negs	r3, r3
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	4413      	add	r3, r2
	}
 8006700:	4618      	mov	r0, r3
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	105b      	asrs	r3, r3, #1
 800671c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d006      	beq.n	8006732 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	461a      	mov	r2, r3
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f01d fa25 	bl	8023b7c <memmove>
	  return __result + _Num;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	4413      	add	r3, r2
	}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8006742:	b5b0      	push	{r4, r5, r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7f9 ff09 	bl	8000564 <__aeabi_i2d>
 8006752:	4604      	mov	r4, r0
 8006754:	460d      	mov	r5, r1
 8006756:	6838      	ldr	r0, [r7, #0]
 8006758:	f7f9 ff04 	bl	8000564 <__aeabi_i2d>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	ec43 2b11 	vmov	d1, r2, r3
 8006764:	ec45 4b10 	vmov	d0, r4, r5
 8006768:	f01c f98e 	bl	8022a88 <pow>
 800676c:	eeb0 7a40 	vmov.f32	s14, s0
 8006770:	eef0 7a60 	vmov.f32	s15, s1
    }
 8006774:	eeb0 0a47 	vmov.f32	s0, s14
 8006778:	eef0 0a67 	vmov.f32	s1, s15
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006784 <_ZNSt6vectorItSaItEE7reserveEj>:
    vector<_Tp, _Alloc>::
 8006784:	b5b0      	push	{r4, r5, r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
      if (__n > this->max_size())
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff fadb 	bl	8005d4a <_ZNKSt6vectorItSaItEE8max_sizeEv>
 8006794:	4602      	mov	r2, r0
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	4293      	cmp	r3, r2
 800679a:	bf8c      	ite	hi
 800679c:	2301      	movhi	r3, #1
 800679e:	2300      	movls	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <_ZNSt6vectorItSaItEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 80067a6:	4836      	ldr	r0, [pc, #216]	; (8006880 <_ZNSt6vectorItSaItEE7reserveEj+0xfc>)
 80067a8:	f01c f89f 	bl	80228ea <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f952 	bl	8006a56 <_ZNKSt6vectorItSaItEE8capacityEv>
 80067b2:	4602      	mov	r2, r0
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	4293      	cmp	r3, r2
 80067b8:	bf8c      	ite	hi
 80067ba:	2301      	movhi	r3, #1
 80067bc:	2300      	movls	r3, #0
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d059      	beq.n	8006878 <_ZNSt6vectorItSaItEE7reserveEj+0xf4>
	  const size_type __old_size = size();
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff fad1 	bl	8005d6c <_ZNKSt6vectorItSaItEE4sizeEv>
 80067ca:	60b8      	str	r0, [r7, #8]
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80067cc:	f7fe fe9c 	bl	8005508 <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d014      	beq.n	8006800 <_ZNSt6vectorItSaItEE7reserveEj+0x7c>
	      __tmp = this->_M_allocate(__n);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff f91a 	bl	8005a14 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 80067e0:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681c      	ldr	r4, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fe fd9e 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80067f2:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4629      	mov	r1, r5
 80067f8:	4620      	mov	r0, r4
 80067fa:	f7ff f91f 	bl	8005a3c <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 80067fe:	e01f      	b.n	8006840 <_ZNSt6vectorItSaItEE7reserveEj+0xbc>
	      __tmp = _M_allocate_and_copy(__n,
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4618      	mov	r0, r3
 8006806:	f7ff fae2 	bl	8005dce <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 800680a:	4604      	mov	r4, r0
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff fadc 	bl	8005dce <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 8006816:	4603      	mov	r3, r0
 8006818:	4622      	mov	r2, r4
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f92a 	bl	8006a76 <_ZNSt6vectorItSaItEE20_M_allocate_and_copyISt13move_iteratorIPtEEES4_jT_S6_>
 8006822:	60f8      	str	r0, [r7, #12]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681c      	ldr	r4, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fd7d 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006834:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006836:	461a      	mov	r2, r3
 8006838:	4629      	mov	r1, r5
 800683a:	4620      	mov	r0, r4
 800683c:	f7fe fd82 	bl	8005344 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
	  _M_deallocate(this->_M_impl._M_start,
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	105b      	asrs	r3, r3, #1
	  _M_deallocate(this->_M_impl._M_start,
 8006852:	461a      	mov	r2, r3
 8006854:	f7fe fd58 	bl	8005308 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
	  this->_M_impl._M_start = __tmp;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	441a      	add	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	441a      	add	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	609a      	str	r2, [r3, #8]
    }
 8006878:	bf00      	nop
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bdb0      	pop	{r4, r5, r7, pc}
 8006880:	080250d0 	.word	0x080250d0

08006884 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8006884:	b5b0      	push	{r4, r5, r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	429a      	cmp	r2, r3
 8006898:	d011      	beq.n	80068be <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800689a:	687c      	ldr	r4, [r7, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685d      	ldr	r5, [r3, #4]
 80068a0:	6838      	ldr	r0, [r7, #0]
 80068a2:	f000 f904 	bl	8006aae <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80068a6:	4603      	mov	r3, r0
 80068a8:	461a      	mov	r2, r3
 80068aa:	4629      	mov	r1, r5
 80068ac:	4620      	mov	r0, r4
 80068ae:	f000 f909 	bl	8006ac4 <_ZNSt16allocator_traitsISaItEE9constructItJiEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	1c9a      	adds	r2, r3, #2
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	605a      	str	r2, [r3, #4]
      }
 80068bc:	e00c      	b.n	80068d8 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fe fe11 	bl	80054e6 <_ZNSt6vectorItSaItEE3endEv>
 80068c4:	4604      	mov	r4, r0
 80068c6:	6838      	ldr	r0, [r7, #0]
 80068c8:	f000 f8f1 	bl	8006aae <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80068cc:	4603      	mov	r3, r0
 80068ce:	461a      	mov	r2, r3
 80068d0:	4621      	mov	r1, r4
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f90a 	bl	8006aec <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
      }
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bdb0      	pop	{r4, r5, r7, pc}

080068e0 <_ZNSt6vectorItSaItEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f9b8 	bl	8006c64 <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt>
 80068f4:	bf00      	nop
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <_ZNKSt5queueItSt5dequeItSaItEEE5emptyEv>:
      empty() const
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f9cd 	bl	8006ca6 <_ZNKSt5dequeItSaItEE5emptyEv>
 800690c:	4603      	mov	r3, r0
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <_ZNSt6vectorItSaItEE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
	--this->_M_impl._M_finish;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	1e9a      	subs	r2, r3, #2
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	4619      	mov	r1, r3
 8006930:	4610      	mov	r0, r2
 8006932:	f7ff f8bb 	bl	8005aac <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>
      }
 8006936:	bf00      	nop
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <_ZN9__gnu_cxxneIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800693e:	b590      	push	{r4, r7, lr}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff f88b 	bl	8005a64 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 800694e:	4603      	mov	r3, r0
 8006950:	681c      	ldr	r4, [r3, #0]
 8006952:	6838      	ldr	r0, [r7, #0]
 8006954:	f7ff f886 	bl	8005a64 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006958:	4603      	mov	r3, r0
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	429c      	cmp	r4, r3
 800695e:	bf14      	ite	ne
 8006960:	2301      	movne	r3, #1
 8006962:	2300      	moveq	r3, #0
 8006964:	b2db      	uxtb	r3, r3
 8006966:	4618      	mov	r0, r3
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	bd90      	pop	{r4, r7, pc}

0800696e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
	++_M_current;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	1c9a      	adds	r2, r3, #2
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	601a      	str	r2, [r3, #0]
	return *this;
 8006980:	687b      	ldr	r3, [r7, #4]
      }
 8006982:	4618      	mov	r0, r3
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4618      	mov	r0, r3
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <_ZNSt6vectorItSaItEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fe fd99 	bl	80054e6 <_ZNSt6vectorItSaItEE3endEv>
 80069b4:	4603      	mov	r3, r0
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	f107 030c 	add.w	r3, r7, #12
 80069bc:	2101      	movs	r1, #1
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 f983 	bl	8006cca <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>
 80069c4:	4603      	mov	r3, r0
 80069c6:	60bb      	str	r3, [r7, #8]
 80069c8:	f107 0308 	add.w	r3, r7, #8
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff ffde 	bl	800698e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 80069d2:	4603      	mov	r3, r0
      }
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <_ZNSt6vectorItSaItEEC1ERKS1_>:
      vector(const vector& __x)
 80069dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80069e6:	687c      	ldr	r4, [r7, #4]
 80069e8:	6838      	ldr	r0, [r7, #0]
 80069ea:	f7ff f9bf 	bl	8005d6c <_ZNKSt6vectorItSaItEE4sizeEv>
 80069ee:	4605      	mov	r5, r0
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff fb03 	bl	8005ffe <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80069f8:	4602      	mov	r2, r0
 80069fa:	f107 030c 	add.w	r3, r7, #12
 80069fe:	4611      	mov	r1, r2
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 f97b 	bl	8006cfc <_ZN9__gnu_cxx14__alloc_traitsISaItEtE17_S_select_on_copyERKS1_>
 8006a06:	f107 030c 	add.w	r3, r7, #12
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f000 f982 	bl	8006d18 <_ZNSt12_Vector_baseItSaItEEC1EjRKS0_>
 8006a14:	f107 030c 	add.w	r3, r7, #12
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fe fb5f 	bl	80050dc <_ZNSaItED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8006a1e:	6838      	ldr	r0, [r7, #0]
 8006a20:	f000 f98e 	bl	8006d40 <_ZNKSt6vectorItSaItEE5beginEv>
 8006a24:	4605      	mov	r5, r0
 8006a26:	6838      	ldr	r0, [r7, #0]
 8006a28:	f000 f99a 	bl	8006d60 <_ZNKSt6vectorItSaItEE3endEv>
 8006a2c:	4606      	mov	r6, r0
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fe fc7a 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006a3a:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8006a3c:	4622      	mov	r2, r4
 8006a3e:	4631      	mov	r1, r6
 8006a40:	4628      	mov	r0, r5
 8006a42:	f000 f99e 	bl	8006d82 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPttET0_T_SA_S9_RSaIT1_E>
 8006a46:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	605a      	str	r2, [r3, #4]
      }
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a56 <_ZNKSt6vectorItSaItEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	105b      	asrs	r3, r3, #1
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <_ZNSt6vectorItSaItEE20_M_allocate_and_copyISt13move_iteratorIPtEEES4_jT_S6_>:
	_M_allocate_and_copy(size_type __n,
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b086      	sub	sp, #24
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	607a      	str	r2, [r7, #4]
 8006a82:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fe ffc3 	bl	8005a14 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8006a8e:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe fc4b 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006a98:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff f9a4 	bl	8005dec <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8006aa4:	697b      	ldr	r3, [r7, #20]
	}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <_ZNSt16allocator_traitsISaItEE9constructItJiEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff ffec 	bl	8006aae <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	461a      	mov	r2, r3
 8006ada:	68b9      	ldr	r1, [r7, #8]
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f961 	bl	8006da4 <_ZN9__gnu_cxx13new_allocatorItE9constructItJiEEEvPT_DpOT0_>
	}
 8006ae2:	bf00      	nop
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8006aec:	b5b0      	push	{r4, r5, r7, lr}
 8006aee:	b08c      	sub	sp, #48	; 0x30
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006af8:	4a59      	ldr	r2, [pc, #356]	; (8006c60 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x174>)
 8006afa:	2101      	movs	r1, #1
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f7fe ff1d 	bl	800593c <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>
 8006b02:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f7fe ff5a 	bl	80059ca <_ZNSt6vectorItSaItEE5beginEv>
 8006b16:	4603      	mov	r3, r0
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	f107 0214 	add.w	r2, r7, #20
 8006b1e:	f107 0308 	add.w	r3, r7, #8
 8006b22:	4611      	mov	r1, r2
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fe ff60 	bl	80059ea <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fe ff6e 	bl	8005a14 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8006b38:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8006b3e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	005b      	lsls	r3, r3, #1
	  _Alloc_traits::construct(this->_M_impl,
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	18d5      	adds	r5, r2, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff ffb0 	bl	8006aae <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	461a      	mov	r2, r3
 8006b52:	4629      	mov	r1, r5
 8006b54:	4620      	mov	r0, r4
 8006b56:	f7ff ffb5 	bl	8006ac4 <_ZNSt16allocator_traitsISaItEE9constructItJiEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8006b5e:	f7fe fcd3 	bl	8005508 <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d027      	beq.n	8006bb8 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006b68:	f107 0308 	add.w	r3, r7, #8
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fe ff79 	bl	8005a64 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006b72:	4603      	mov	r3, r0
 8006b74:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fe fbd8 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006b7e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	4621      	mov	r1, r4
 8006b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b86:	f7fe ff59 	bl	8005a3c <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 8006b8a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8006b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8e:	3302      	adds	r3, #2
 8006b90:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006b92:	f107 0308 	add.w	r3, r7, #8
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fe ff64 	bl	8005a64 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fe fbc3 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006ba8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bac:	6a39      	ldr	r1, [r7, #32]
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f7fe ff44 	bl	8005a3c <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 8006bb4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006bb6:	e026      	b.n	8006c06 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8006bb8:	f107 0308 	add.w	r3, r7, #8
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fe ff51 	bl	8005a64 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe fbb0 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006bce:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bd6:	f7fe ff50 	bl	8005a7a <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 8006bda:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	3302      	adds	r3, #2
 8006be0:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8006be2:	f107 0308 	add.w	r3, r7, #8
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe ff3c 	bl	8005a64 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006bec:	4603      	mov	r3, r0
 8006bee:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe fb9b 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006bf8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8006bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bfc:	6a39      	ldr	r1, [r7, #32]
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f7fe ff3b 	bl	8005a7a <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 8006c04:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006c06:	f7fe fc7f 	bl	8005508 <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	f083 0301 	eor.w	r3, r3, #1
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fe fb88 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	461a      	mov	r2, r3
 8006c22:	6a39      	ldr	r1, [r7, #32]
 8006c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c26:	f7fe fb8d 	bl	8005344 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 8006c2a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	105b      	asrs	r3, r3, #1
      _M_deallocate(__old_start,
 8006c36:	461a      	mov	r2, r3
 8006c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c3a:	f7fe fb65 	bl	8005308 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
      this->_M_impl._M_start = __new_start;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c48:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	441a      	add	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	609a      	str	r2, [r3, #8]
    }
 8006c56:	bf00      	nop
 8006c58:	3730      	adds	r7, #48	; 0x30
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	080250e0 	.word	0x080250e0

08006c64 <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8006c64:	b590      	push	{r4, r7, lr}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	105b      	asrs	r3, r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00e      	beq.n	8006c9e <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe fb51 	bl	800532e <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006c8c:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8006c8e:	461a      	mov	r2, r3
 8006c90:	4621      	mov	r1, r4
 8006c92:	6838      	ldr	r0, [r7, #0]
 8006c94:	f7fe fb56 	bl	8005344 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8006c9e:	bf00      	nop
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd90      	pop	{r4, r7, pc}

08006ca6 <_ZNKSt5dequeItSaItEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f103 0218 	add.w	r2, r3, #24
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3308      	adds	r3, #8
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f000 f88a 	bl	8006dd4 <_ZSteqRKSt15_Deque_iteratorItRtPtES4_>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	425b      	negs	r3, r3
 8006cde:	4413      	add	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	f107 020c 	add.w	r2, r7, #12
 8006ce6:	f107 0308 	add.w	r3, r7, #8
 8006cea:	4611      	mov	r1, r2
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fe fe15 	bl	800591c <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <_ZN9__gnu_cxx14__alloc_traitsISaItEtE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f876 	bl	8006dfc <_ZNSt16allocator_traitsISaItEE37select_on_container_copy_constructionERKS0_>
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <_ZNSt12_Vector_baseItSaItEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 f882 	bl	8006e32 <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 f890 	bl	8006e56 <_ZNSt12_Vector_baseItSaItEE17_M_create_storageEj>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <_ZNKSt6vectorItSaItEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	f107 030c 	add.w	r3, r7, #12
 8006d4e:	4611      	mov	r1, r2
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 f89b 	bl	8006e8c <_ZN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEC1ERKS2_>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <_ZNKSt6vectorItSaItEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	1d1a      	adds	r2, r3, #4
 8006d6c:	f107 030c 	add.w	r3, r7, #12
 8006d70:	4611      	mov	r1, r2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 f88a 	bl	8006e8c <_ZN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEC1ERKS2_>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPttET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	607a      	str	r2, [r7, #4]
 8006d8e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f889 	bl	8006eac <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <_ZN9__gnu_cxx13new_allocatorItE9constructItJiEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006da4:	b590      	push	{r4, r7, lr}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff fe7c 	bl	8006aae <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006db6:	4603      	mov	r3, r0
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	b29c      	uxth	r4, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	2002      	movs	r0, #2
 8006dc2:	f7fb f848 	bl	8001e56 <_ZnwjPv>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	4622      	mov	r2, r4
 8006dca:	801a      	strh	r2, [r3, #0]
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd90      	pop	{r4, r7, pc}

08006dd4 <_ZSteqRKSt15_Deque_iteratorItRtPtES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	bf0c      	ite	eq
 8006dea:	2301      	moveq	r3, #1
 8006dec:	2300      	movne	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <_ZNSt16allocator_traitsISaItEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f804 	bl	8006e16 <_ZNSaItEC1ERKS_>
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <_ZNSaItEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f854 	bl	8006ed0 <_ZN9__gnu_cxx13new_allocatorItEC1ERKS1_>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff ffe9 	bl	8006e16 <_ZNSaItEC1ERKS_>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe fa3f 	bl	80052ca <_ZNSt12_Vector_baseItSaItEE17_Vector_impl_dataC1Ev>
	{ }
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <_ZNSt12_Vector_baseItSaItEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7fe fdd6 	bl	8005a14 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	441a      	add	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	609a      	str	r2, [r3, #8]
      }
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <_ZN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	68b9      	ldr	r1, [r7, #8]
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 f811 	bl	8006ee8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtEET0_T_SC_SB_>
 8006ec6:	4603      	mov	r3, r0
    }
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <_ZN9__gnu_cxx13new_allocatorItEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f805 	bl	8006f08 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>
 8006efe:	4603      	mov	r3, r0
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8006f08:	b590      	push	{r4, r7, lr}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 f80f 	bl	8006f38 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEET_S8_>
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	68b8      	ldr	r0, [r7, #8]
 8006f1e:	f000 f80b 	bl	8006f38 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEET_S8_>
 8006f22:	4603      	mov	r3, r0
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	4619      	mov	r1, r3
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 f810 	bl	8006f4e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET1_T0_SA_S9_>
 8006f2e:	4603      	mov	r3, r0
    }
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd90      	pop	{r4, r7, pc}

08006f38 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006f4e:	b5b0      	push	{r4, r5, r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 f81a 	bl	8006f94 <_ZSt12__niter_baseIPKtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8006f60:	4604      	mov	r4, r0
 8006f62:	68b8      	ldr	r0, [r7, #8]
 8006f64:	f000 f816 	bl	8006f94 <_ZSt12__niter_baseIPKtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8006f68:	4605      	mov	r5, r0
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7ff f9c9 	bl	8006304 <_ZSt12__niter_baseIPtET_S1_>
 8006f72:	4603      	mov	r3, r0
 8006f74:	461a      	mov	r2, r3
 8006f76:	4629      	mov	r1, r5
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 f819 	bl	8006fb0 <_ZSt14__copy_move_a1ILb0EPKtPtET1_T0_S4_S3_>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	1d3b      	adds	r3, r7, #4
 8006f82:	4611      	mov	r1, r2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff fb44 	bl	8006612 <_ZSt12__niter_wrapIPtET_RKS1_S1_>
 8006f8a:	4603      	mov	r3, r0
    }
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bdb0      	pop	{r4, r5, r7, pc}

08006f94 <_ZSt12__niter_baseIPKtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8006f9c:	1d3b      	adds	r3, r7, #4
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 f816 	bl	8006fd0 <_ZNK9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEE4baseEv>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <_ZSt14__copy_move_a1ILb0EPKtPtET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 f810 	bl	8006fe6 <_ZSt14__copy_move_a2ILb0EPKtPtET1_T0_S4_S3_>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <_ZNK9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <_ZSt14__copy_move_a2ILb0EPKtPtET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	68b9      	ldr	r1, [r7, #8]
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 f805 	bl	8007006 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>
 8006ffc:	4603      	mov	r3, r0
    }
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007006:	b580      	push	{r7, lr}
 8007008:	b086      	sub	sp, #24
 800700a:	af00      	add	r7, sp, #0
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	105b      	asrs	r3, r3, #1
 800701a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d006      	beq.n	8007030 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	461a      	mov	r2, r3
 8007028:	68f9      	ldr	r1, [r7, #12]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f01c fda6 	bl	8023b7c <memmove>
	  return __result + _Num;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	4413      	add	r3, r2
	}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <_ZN6PGV100C1EttP20__UART_HandleTypeDefP12GPIO_TypeDefttddd>:
	this->unit_ = Unit;
	this->angle_offset_ = Angle_Offset;
	this->comm_dir_available_ = false;
}

PGV100::PGV100(uint16_t index,  uint16_t commtype, UART_HandleTypeDef *huartx,
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	; 0x28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6278      	str	r0, [r7, #36]	; 0x24
 8007048:	61fb      	str	r3, [r7, #28]
 800704a:	ed87 0b04 	vstr	d0, [r7, #16]
 800704e:	ed87 1b02 	vstr	d1, [r7, #8]
 8007052:	ed87 2b00 	vstr	d2, [r7]
 8007056:	460b      	mov	r3, r1
 8007058:	847b      	strh	r3, [r7, #34]	; 0x22
 800705a:	4613      	mov	r3, r2
 800705c:	843b      	strh	r3, [r7, #32]
				GPIO_TypeDef* GPIO, uint16_t dir_pin_no, uint16_t Unit, double X_Offset, double Y_Offset, double Angle_Offset)
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	4618      	mov	r0, r3
 8007062:	f7fd fe6f 	bl	8004d44 <_ZN12PNFPosSensorC1Ev>
 8007066:	4a27      	ldr	r2, [pc, #156]	; (8007104 <_ZN6PGV100C1EttP20__UART_HandleTypeDefP12GPIO_TypeDefttddd+0xc4>)
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	f04f 0300 	mov.w	r3, #0
 8007076:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	2200      	movs	r2, #0
 800707e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	2200      	movs	r2, #0
 8007086:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	2200      	movs	r2, #0
 800708e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	2200      	movs	r2, #0
 8007096:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	f644 6220 	movw	r2, #20000	; 0x4e20
 80070a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80070aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
{
	this->index_ = index;
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80070b2:	809a      	strh	r2, [r3, #4]
	this->comm_type_ = commtype;
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	8c3a      	ldrh	r2, [r7, #32]
 80070b8:	871a      	strh	r2, [r3, #56]	; 0x38
	this->x_offset_ = X_Offset;
 80070ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070c0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	this->y_offset_ = Y_Offset;
 80070c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070ca:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->huartx_= huartx;
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	69fa      	ldr	r2, [r7, #28]
 80070d2:	649a      	str	r2, [r3, #72]	; 0x48
	this->unit_ = Unit;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80070d8:	875a      	strh	r2, [r3, #58]	; 0x3a
	this->angle_offset_ = Angle_Offset;
 80070da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070e0:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	this->GPIO_ = GPIO;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070e8:	641a      	str	r2, [r3, #64]	; 0x40
	this->dir_pin_no_ = dir_pin_no;
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80070ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	this->comm_dir_available_ = true;
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	4618      	mov	r0, r3
 80070fe:	3728      	adds	r7, #40	; 0x28
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	08028828 	.word	0x08028828

08007108 <_ZN6PGV100D1Ev>:

PGV100::~PGV100(){/*Total_PNF_Sensor_Num--;*/}
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	4a05      	ldr	r2, [pc, #20]	; (8007128 <_ZN6PGV100D1Ev+0x20>)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4618      	mov	r0, r3
 800711a:	f7fd fe55 	bl	8004dc8 <_ZN12PNFPosSensorD1Ev>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	08028828 	.word	0x08028828

0800712c <_ZN6PGV100D0Ev>:
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff ffe7 	bl	8007108 <_ZN6PGV100D1Ev>
 800713a:	21b8      	movs	r1, #184	; 0xb8
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f01b fba9 	bl	8022894 <_ZdlPvj>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <_ZN6PGV10012ResetAllDataEv>:
/*---------------------------------------------------*/
/*Queue - queue systems ->Queue*/

//--------------------------------------------------------------Reset all data
void PGV100::ResetAllData()
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
	this->xpos_ = 0;
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	f04f 0200 	mov.w	r2, #0
 800715a:	f04f 0300 	mov.w	r3, #0
 800715e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	this->ypos_ = 0;
 8007162:	6879      	ldr	r1, [r7, #4]
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	f04f 0300 	mov.w	r3, #0
 800716c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	this->angle_ = 0;
 8007170:	6879      	ldr	r1, [r7, #4]
 8007172:	f04f 0200 	mov.w	r2, #0
 8007176:	f04f 0300 	mov.w	r3, #0
 800717a:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	this->tagNo_ = 0;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <_ZN6PGV10018RegisterRequsetCmdEv>:



//--------------------------------------------------------------Construct level - network, first parmas. declation
void PGV100::RegisterRequsetCmd()
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b08a      	sub	sp, #40	; 0x28
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
	RequestCmd.reserve(10);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	335c      	adds	r3, #92	; 0x5c
 800719e:	210a      	movs	r1, #10
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff faef 	bl	8006784 <_ZNSt6vectorItSaItEE7reserveEj>
	RequestCmd.emplace_back(0xEC);   //0
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	335c      	adds	r3, #92	; 0x5c
 80071aa:	22ec      	movs	r2, #236	; 0xec
 80071ac:	60ba      	str	r2, [r7, #8]
 80071ae:	f107 0208 	add.w	r2, r7, #8
 80071b2:	4611      	mov	r1, r2
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff fb65 	bl	8006884 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xE8);   //1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	335c      	adds	r3, #92	; 0x5c
 80071be:	22e8      	movs	r2, #232	; 0xe8
 80071c0:	60fa      	str	r2, [r7, #12]
 80071c2:	f107 020c 	add.w	r2, r7, #12
 80071c6:	4611      	mov	r1, r2
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7ff fb5b 	bl	8006884 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xE4);   //2
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	335c      	adds	r3, #92	; 0x5c
 80071d2:	22e4      	movs	r2, #228	; 0xe4
 80071d4:	613a      	str	r2, [r7, #16]
 80071d6:	f107 0210 	add.w	r2, r7, #16
 80071da:	4611      	mov	r1, r2
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff fb51 	bl	8006884 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0x90);   //3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	335c      	adds	r3, #92	; 0x5c
 80071e6:	2290      	movs	r2, #144	; 0x90
 80071e8:	617a      	str	r2, [r7, #20]
 80071ea:	f107 0214 	add.w	r2, r7, #20
 80071ee:	4611      	mov	r1, r2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff fb47 	bl	8006884 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0x88);   //4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	335c      	adds	r3, #92	; 0x5c
 80071fa:	2288      	movs	r2, #136	; 0x88
 80071fc:	61ba      	str	r2, [r7, #24]
 80071fe:	f107 0218 	add.w	r2, r7, #24
 8007202:	4611      	mov	r1, r2
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff fb3d 	bl	8006884 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xC4);   //5
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	335c      	adds	r3, #92	; 0x5c
 800720e:	22c4      	movs	r2, #196	; 0xc4
 8007210:	61fa      	str	r2, [r7, #28]
 8007212:	f107 021c 	add.w	r2, r7, #28
 8007216:	4611      	mov	r1, r2
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff fb33 	bl	8006884 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xC8);   //6
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	335c      	adds	r3, #92	; 0x5c
 8007222:	22c8      	movs	r2, #200	; 0xc8
 8007224:	623a      	str	r2, [r7, #32]
 8007226:	f107 0220 	add.w	r2, r7, #32
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff fb29 	bl	8006884 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xA0);   //7
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	335c      	adds	r3, #92	; 0x5c
 8007236:	22a0      	movs	r2, #160	; 0xa0
 8007238:	627a      	str	r2, [r7, #36]	; 0x24
 800723a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800723e:	4611      	mov	r1, r2
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff fb1f 	bl	8006884 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
}
 8007246:	bf00      	nop
 8007248:	3728      	adds	r7, #40	; 0x28
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <_ZN6PGV10020RegisterDefaultParamEv>:

void PGV100::RegisterDefaultParam()
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b082      	sub	sp, #8
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
	//Change_XOffset(1);
	//Change_YOffset(1);
	//Change_Angle_Offset(1);
	ResetAllData();
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff ff78 	bl	800714c <_ZN6PGV10012ResetAllDataEv>
	RequestChangeDirstraight();
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f851 	bl	8007304 <_ZN6PGV10024RequestChangeDirstraightEv>
}
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <_ZN6PGV10014ReadBufferInitEv>:


//Initialization for work-loop
void PGV100::ReadBufferInit()
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
	int BufferLength = RequestQueue.front();
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3368      	adds	r3, #104	; 0x68
 8007278:	4618      	mov	r0, r3
 800727a:	f7fd ffb5 	bl	80051e8 <_ZNSt5queueItSt5dequeItSaItEEE5frontEv>
 800727e:	4603      	mov	r3, r0
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	60fb      	str	r3, [r7, #12]
	switch(BufferLength)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b06      	cmp	r3, #6
 8007288:	d833      	bhi.n	80072f2 <_ZN6PGV10014ReadBufferInitEv+0x86>
 800728a:	a201      	add	r2, pc, #4	; (adr r2, 8007290 <_ZN6PGV10014ReadBufferInitEv+0x24>)
 800728c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007290:	080072b7 	.word	0x080072b7
 8007294:	080072c1 	.word	0x080072c1
 8007298:	080072cb 	.word	0x080072cb
 800729c:	080072d5 	.word	0x080072d5
 80072a0:	080072df 	.word	0x080072df
 80072a4:	080072e9 	.word	0x080072e9
 80072a8:	080072ad 	.word	0x080072ad
	{
		//position
		case PGV100PosRequest: this->max_read_buf_size_ = PGV100Pos; break;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2215      	movs	r2, #21
 80072b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80072b4:	e01d      	b.n	80072f2 <_ZN6PGV10014ReadBufferInitEv+0x86>
		//Directions
		case PGV100StraightRequest: this->max_read_buf_size_ = PGV100Dir; break;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2203      	movs	r2, #3
 80072ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80072be:	e018      	b.n	80072f2 <_ZN6PGV10014ReadBufferInitEv+0x86>
		case PGV100LeftRequest: this->max_read_buf_size_ = PGV100Dir; break;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2203      	movs	r2, #3
 80072c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80072c8:	e013      	b.n	80072f2 <_ZN6PGV10014ReadBufferInitEv+0x86>
		case PGV100RightRequest: this->max_read_buf_size_ = PGV100Dir; break;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2203      	movs	r2, #3
 80072ce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80072d2:	e00e      	b.n	80072f2 <_ZN6PGV10014ReadBufferInitEv+0x86>
		//Colors
		case PGV100RedRequest: this->max_read_buf_size_ = PGV100Color; break;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80072dc:	e009      	b.n	80072f2 <_ZN6PGV10014ReadBufferInitEv+0x86>
		case PGV100GreenRequest: this->max_read_buf_size_ = PGV100Color; break;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2202      	movs	r2, #2
 80072e2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80072e6:	e004      	b.n	80072f2 <_ZN6PGV10014ReadBufferInitEv+0x86>
		case PGV100BlueRequest: this->max_read_buf_size_ = PGV100Color; break;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80072f0:	bf00      	nop
	}
	//size initialize
	this->pos_buf_.clear();
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	334c      	adds	r3, #76	; 0x4c
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7ff faf2 	bl	80068e0 <_ZNSt6vectorItSaItEE5clearEv>
}
 80072fc:	bf00      	nop
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <_ZN6PGV10024RequestChangeDirstraightEv>:
	return* this;
}

//---------------------------------------------------------------Request command
//pgv100 only
void PGV100::RequestChangeDirstraight() {QueueSaveRequest(PGV100StraightRequest);}
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2100      	movs	r1, #0
 8007310:	4618      	mov	r0, r3
 8007312:	f7fd fe3b 	bl	8004f8c <_ZN12PNFPosSensor16QueueSaveRequestEt>
 8007316:	bf00      	nop
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <_ZN6PGV10019RequestGetPGV100PosEv>:

void PGV100::RequestChangeColoryellow() {QueueSaveRequest(PGV100RedRequest);}
void PGV100::RequestChangeColorred() {QueueSaveRequest(PGV100GreenRequest);}
void PGV100::RequestChangeColorblue() {QueueSaveRequest(PGV100BlueRequest);}

void PGV100::RequestGetPGV100Pos() {QueueSaveRequest(PGV100PosRequest);}
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2106      	movs	r1, #6
 800732a:	4618      	mov	r0, r3
 800732c:	f7fd fe2e 	bl	8004f8c <_ZN12PNFPosSensor16QueueSaveRequestEt>
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <_ZN6PGV10021QueueRepeatPosReqeustEv>:


//---------------------------------------------------------------Command queue functions
//queue system functions
void PGV100::QueueRepeatPosReqeust()
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
	if(RequestQueue.empty()) RequestGetPGV100Pos();
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3368      	adds	r3, #104	; 0x68
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff fad9 	bl	80068fc <_ZNKSt5queueItSt5dequeItSaItEEE5emptyEv>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <_ZN6PGV10021QueueRepeatPosReqeustEv+0x1e>
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff ffe4 	bl	800731e <_ZN6PGV10019RequestGetPGV100PosEv>
}
 8007356:	bf00      	nop
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <_ZN6PGV10017ProcessGetERRInfoESt6vectorItSaItEE>:
double PGV100::GetUnit() const {return unit_;}
uint16_t PGV100::GetCommtype() const {return comm_type_;}


uint32_t PGV100::ProcessGetERRInfo(std::vector<uint16_t> temp_buf)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]
	uint32_t err_data = ((temp_buf)[5]) & 0xFF;
 8007368:	2105      	movs	r1, #5
 800736a:	6838      	ldr	r0, [r7, #0]
 800736c:	f7fd ff49 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 8007370:	4603      	mov	r3, r0
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	b2db      	uxtb	r3, r3
 8007376:	60fb      	str	r3, [r7, #12]
	(err_data)|=((temp_buf)[4] << 7) & 0xFF;
 8007378:	2104      	movs	r1, #4
 800737a:	6838      	ldr	r0, [r7, #0]
 800737c:	f7fd ff41 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 8007380:	4603      	mov	r3, r0
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	01db      	lsls	r3, r3, #7
 8007386:	b2da      	uxtb	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]
	(err_data)|=((temp_buf)[3] << 14) & 0xFF;
 800738e:	2103      	movs	r1, #3
 8007390:	6838      	ldr	r0, [r7, #0]
 8007392:	f7fd ff36 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 8007396:	4603      	mov	r3, r0
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	039b      	lsls	r3, r3, #14
 800739c:	b2da      	uxtb	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
	(err_data)|=(((temp_buf)[2]&0x07) << 21) & 0xFF;
 80073a4:	2102      	movs	r1, #2
 80073a6:	6838      	ldr	r0, [r7, #0]
 80073a8:	f7fd ff2b 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 80073ac:	2200      	movs	r2, #0
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]
	return err_data;
 80073b4:	68fb      	ldr	r3, [r7, #12]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE>:

//for getting data
bool PGV100::ProcessIsTagDetected(std::vector<uint16_t> temp_buf)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
	if((temp_buf)[1] & 0x40) return true;
 80073c8:	2101      	movs	r1, #1
 80073ca:	6838      	ldr	r0, [r7, #0]
 80073cc:	f7fd ff19 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 80073d0:	4603      	mov	r3, r0
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bf14      	ite	ne
 80073dc:	2301      	movne	r3, #1
 80073de:	2300      	moveq	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE+0x2c>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e000      	b.n	80073ec <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE+0x2e>
	else return false;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <_ZN6PGV10019ProcessGetTagNumberESt6vectorItSaItEE>:

uint16_t PGV100::ProcessGetTagNumber(std::vector<uint16_t> temp_buf)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
	 uint16_t tag_num = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	81fb      	strh	r3, [r7, #14]
	 (tag_num)=((temp_buf)[17]) & 0xFF;
 8007402:	2111      	movs	r1, #17
 8007404:	6838      	ldr	r0, [r7, #0]
 8007406:	f7fd fefc 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 800740a:	4603      	mov	r3, r0
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	b29b      	uxth	r3, r3
 8007412:	81fb      	strh	r3, [r7, #14]
	 (tag_num)|=((temp_buf)[16]<<7) & 0xFF;
 8007414:	2110      	movs	r1, #16
 8007416:	6838      	ldr	r0, [r7, #0]
 8007418:	f7fd fef3 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 800741c:	4603      	mov	r3, r0
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	01db      	lsls	r3, r3, #7
 8007422:	b2db      	uxtb	r3, r3
 8007424:	89fa      	ldrh	r2, [r7, #14]
 8007426:	b212      	sxth	r2, r2
 8007428:	b21b      	sxth	r3, r3
 800742a:	4313      	orrs	r3, r2
 800742c:	b21b      	sxth	r3, r3
 800742e:	b29b      	uxth	r3, r3
 8007430:	81fb      	strh	r3, [r7, #14]
	 (tag_num)|=((temp_buf)[15]<<14) & 0xFF;
 8007432:	210f      	movs	r1, #15
 8007434:	6838      	ldr	r0, [r7, #0]
 8007436:	f7fd fee4 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 800743a:	4603      	mov	r3, r0
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	039b      	lsls	r3, r3, #14
 8007440:	b2db      	uxtb	r3, r3
 8007442:	89fa      	ldrh	r2, [r7, #14]
 8007444:	b212      	sxth	r2, r2
 8007446:	b21b      	sxth	r3, r3
 8007448:	4313      	orrs	r3, r2
 800744a:	b21b      	sxth	r3, r3
 800744c:	b29b      	uxth	r3, r3
 800744e:	81fb      	strh	r3, [r7, #14]
	 (tag_num)|=((temp_buf)[14]<<21) & 0xFF;
 8007450:	210e      	movs	r1, #14
 8007452:	6838      	ldr	r0, [r7, #0]
 8007454:	f7fd fed5 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 8007458:	4603      	mov	r3, r0
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	055b      	lsls	r3, r3, #21
 800745e:	b2db      	uxtb	r3, r3
 8007460:	89fa      	ldrh	r2, [r7, #14]
 8007462:	b212      	sxth	r2, r2
 8007464:	b21b      	sxth	r3, r3
 8007466:	4313      	orrs	r3, r2
 8007468:	b21b      	sxth	r3, r3
 800746a:	b29b      	uxth	r3, r3
 800746c:	81fb      	strh	r3, [r7, #14]
	 return tag_num;
 800746e:	89fb      	ldrh	r3, [r7, #14]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE>:

double PGV100::ProcessGetAngleInfo(std::vector<uint16_t> temp_buf)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
	 uint16_t angle = ((temp_buf)[11]) & 0xFF;
 8007482:	210b      	movs	r1, #11
 8007484:	6838      	ldr	r0, [r7, #0]
 8007486:	f7fd febc 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 800748a:	4603      	mov	r3, r0
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b2db      	uxtb	r3, r3
 8007490:	b29b      	uxth	r3, r3
 8007492:	81fb      	strh	r3, [r7, #14]
	 (angle) |= ((temp_buf)[10] << 7) &0xFF;
 8007494:	210a      	movs	r1, #10
 8007496:	6838      	ldr	r0, [r7, #0]
 8007498:	f7fd feb3 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 800749c:	4603      	mov	r3, r0
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	01db      	lsls	r3, r3, #7
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	89fa      	ldrh	r2, [r7, #14]
 80074a6:	b212      	sxth	r2, r2
 80074a8:	b21b      	sxth	r3, r3
 80074aa:	4313      	orrs	r3, r2
 80074ac:	b21b      	sxth	r3, r3
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	81fb      	strh	r3, [r7, #14]

	 double angle_d = (double)angle/10;
 80074b2:	89fb      	ldrh	r3, [r7, #14]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7f9 f845 	bl	8000544 <__aeabi_ui2d>
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	4b17      	ldr	r3, [pc, #92]	; (800751c <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0xa4>)
 80074c0:	f7f9 f9e4 	bl	800088c <__aeabi_ddiv>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	 if((angle_d)> 180.0f) angle_d-=360.0f; //makes x-axis zero centered
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	4b13      	ldr	r3, [pc, #76]	; (8007520 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0xa8>)
 80074d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074d6:	f7f9 fb3f 	bl	8000b58 <__aeabi_dcmpgt>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0x7e>
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0xac>)
 80074e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074ea:	f7f8 feed 	bl	80002c8 <__aeabi_dsub>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	 return angle_d + this->angle_offset_;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 80074fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007500:	f7f8 fee4 	bl	80002cc <__adddf3>
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	ec43 2b17 	vmov	d7, r2, r3
}
 800750c:	eeb0 0a47 	vmov.f32	s0, s14
 8007510:	eef0 0a67 	vmov.f32	s1, s15
 8007514:	3718      	adds	r7, #24
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	40240000 	.word	0x40240000
 8007520:	40668000 	.word	0x40668000
 8007524:	40768000 	.word	0x40768000

08007528 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE>:

double PGV100::ProcessGetXPosInfo(std::vector<uint16_t> temp_buf)
{
 8007528:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800752c:	b086      	sub	sp, #24
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
	int32_t XPosition_DATA=((temp_buf)[5]) & 0xFF;
 8007534:	2105      	movs	r1, #5
 8007536:	6838      	ldr	r0, [r7, #0]
 8007538:	f7fd fe63 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 800753c:	4603      	mov	r3, r0
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	60fb      	str	r3, [r7, #12]
	(XPosition_DATA)|=((temp_buf)[4] << 7) & 0xFF;
 8007544:	2104      	movs	r1, #4
 8007546:	6838      	ldr	r0, [r7, #0]
 8007548:	f7fd fe5b 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 800754c:	4603      	mov	r3, r0
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	01db      	lsls	r3, r3, #7
 8007552:	b2da      	uxtb	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
	(XPosition_DATA)|=((temp_buf)[4] << 14) & 0xFF;
 800755a:	2104      	movs	r1, #4
 800755c:	6838      	ldr	r0, [r7, #0]
 800755e:	f7fd fe50 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 8007562:	4603      	mov	r3, r0
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	039b      	lsls	r3, r3, #14
 8007568:	b2da      	uxtb	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	4313      	orrs	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]
	(XPosition_DATA)|=(((temp_buf)[2]&0x07) << 21) & 0xFF;
 8007570:	2102      	movs	r1, #2
 8007572:	6838      	ldr	r0, [r7, #0]
 8007574:	f7fd fe45 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 8007578:	2200      	movs	r2, #0
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]

	 //for making X-axis center to zero
	if(XPosition_DATA>=(100000)) XPosition_DATA = (XPosition_DATA-((double)(pow(2,24)-1))-((this->x_offset_)*(this->unit_)));
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4a50      	ldr	r2, [pc, #320]	; (80076c4 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x19c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	dd37      	ble.n	80075f8 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0xd0>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4618      	mov	r0, r3
 800758c:	f7f8 ffea 	bl	8000564 <__aeabi_i2d>
 8007590:	4604      	mov	r4, r0
 8007592:	460d      	mov	r5, r1
 8007594:	2118      	movs	r1, #24
 8007596:	2002      	movs	r0, #2
 8007598:	f7ff f8d3 	bl	8006742 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800759c:	ec51 0b10 	vmov	r0, r1, d0
 80075a0:	f04f 0200 	mov.w	r2, #0
 80075a4:	4b48      	ldr	r3, [pc, #288]	; (80076c8 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x1a0>)
 80075a6:	f7f8 fe8f 	bl	80002c8 <__aeabi_dsub>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4620      	mov	r0, r4
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7f8 fe89 	bl	80002c8 <__aeabi_dsub>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4690      	mov	r8, r2
 80075bc:	4699      	mov	r9, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7f8 ffcb 	bl	8000564 <__aeabi_i2d>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4620      	mov	r0, r4
 80075d4:	4629      	mov	r1, r5
 80075d6:	f7f9 f82f 	bl	8000638 <__aeabi_dmul>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4640      	mov	r0, r8
 80075e0:	4649      	mov	r1, r9
 80075e2:	f7f8 fe71 	bl	80002c8 <__aeabi_dsub>
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4610      	mov	r0, r2
 80075ec:	4619      	mov	r1, r3
 80075ee:	f7f9 fad3 	bl	8000b98 <__aeabi_d2iz>
 80075f2:	4603      	mov	r3, r0
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	e021      	b.n	800763c <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x114>
	else XPosition_DATA = (XPosition_DATA-((this->x_offset_)*(this->unit_)));
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7f8 ffb2 	bl	8000564 <__aeabi_i2d>
 8007600:	4680      	mov	r8, r0
 8007602:	4689      	mov	r9, r1
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800760e:	4618      	mov	r0, r3
 8007610:	f7f8 ffa8 	bl	8000564 <__aeabi_i2d>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4620      	mov	r0, r4
 800761a:	4629      	mov	r1, r5
 800761c:	f7f9 f80c 	bl	8000638 <__aeabi_dmul>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4640      	mov	r0, r8
 8007626:	4649      	mov	r1, r9
 8007628:	f7f8 fe4e 	bl	80002c8 <__aeabi_dsub>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4610      	mov	r0, r2
 8007632:	4619      	mov	r1, r3
 8007634:	f7f9 fab0 	bl	8000b98 <__aeabi_d2iz>
 8007638:	4603      	mov	r3, r0
 800763a:	60fb      	str	r3, [r7, #12]


	double xpos = ((XPosition_DATA/(double)(this->unit_)));                   //To make units milimeters to meters
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4618      	mov	r0, r3
 8007640:	f7f8 ff90 	bl	8000564 <__aeabi_i2d>
 8007644:	4604      	mov	r4, r0
 8007646:	460d      	mov	r5, r1
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800764c:	4618      	mov	r0, r3
 800764e:	f7f8 ff79 	bl	8000544 <__aeabi_ui2d>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4620      	mov	r0, r4
 8007658:	4629      	mov	r1, r5
 800765a:	f7f9 f917 	bl	800088c <__aeabi_ddiv>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if(xpos >= this->pos_area_min_ && xpos <= this->pos_area_max_) return xpos;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800766c:	4618      	mov	r0, r3
 800766e:	f7f8 ff79 	bl	8000564 <__aeabi_i2d>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800767a:	f7f9 fa63 	bl	8000b44 <__aeabi_dcmpge>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d011      	beq.n	80076a8 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x180>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800768a:	4618      	mov	r0, r3
 800768c:	f7f8 ff6a 	bl	8000564 <__aeabi_i2d>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007698:	f7f9 fa4a 	bl	8000b30 <__aeabi_dcmple>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x180>
 80076a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80076a6:	e002      	b.n	80076ae <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x186>
	else return this->xpos_;  //	  else { state |= 0x0010;} //Out of Range
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
}
 80076ae:	ec43 2b17 	vmov	d7, r2, r3
 80076b2:	eeb0 0a47 	vmov.f32	s0, s14
 80076b6:	eef0 0a67 	vmov.f32	s1, s15
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80076c2:	bf00      	nop
 80076c4:	0001869f 	.word	0x0001869f
 80076c8:	3ff00000 	.word	0x3ff00000

080076cc <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE>:

double PGV100::ProcessGetYPosInfo(std::vector<uint16_t> temp_buf)
{
 80076cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80076d0:	b086      	sub	sp, #24
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
	int32_t YPosition_DATA = ((temp_buf)[7]) & 0xFF;//Y Buf
 80076d8:	2107      	movs	r1, #7
 80076da:	6838      	ldr	r0, [r7, #0]
 80076dc:	f7fd fd91 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 80076e0:	4603      	mov	r3, r0
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	60fb      	str	r3, [r7, #12]
	(YPosition_DATA) |= (((temp_buf)[6]) << 7) & 0xFF;
 80076e8:	2106      	movs	r1, #6
 80076ea:	6838      	ldr	r0, [r7, #0]
 80076ec:	f7fd fd89 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 80076f0:	4603      	mov	r3, r0
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	01db      	lsls	r3, r3, #7
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]

	//for making Y-axis center to zero
	if(YPosition_DATA>=(1000))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007704:	db24      	blt.n	8007750 <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE+0x84>
	YPosition_DATA = (YPosition_DATA-(16383)) - ((this->y_offset_)*(this->unit_));
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	4b33      	ldr	r3, [pc, #204]	; (80077d8 <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE+0x10c>)
 800770a:	4413      	add	r3, r2
 800770c:	4618      	mov	r0, r3
 800770e:	f7f8 ff29 	bl	8000564 <__aeabi_i2d>
 8007712:	4680      	mov	r8, r0
 8007714:	4689      	mov	r9, r1
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007720:	4618      	mov	r0, r3
 8007722:	f7f8 ff1f 	bl	8000564 <__aeabi_i2d>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	f7f8 ff83 	bl	8000638 <__aeabi_dmul>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4640      	mov	r0, r8
 8007738:	4649      	mov	r1, r9
 800773a:	f7f8 fdc5 	bl	80002c8 <__aeabi_dsub>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	4610      	mov	r0, r2
 8007744:	4619      	mov	r1, r3
 8007746:	f7f9 fa27 	bl	8000b98 <__aeabi_d2iz>
 800774a:	4603      	mov	r3, r0
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	e021      	b.n	8007794 <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE+0xc8>
	else YPosition_DATA = (YPosition_DATA-(this->y_offset_*(this->unit_)));
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4618      	mov	r0, r3
 8007754:	f7f8 ff06 	bl	8000564 <__aeabi_i2d>
 8007758:	4680      	mov	r8, r0
 800775a:	4689      	mov	r9, r1
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007766:	4618      	mov	r0, r3
 8007768:	f7f8 fefc 	bl	8000564 <__aeabi_i2d>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4620      	mov	r0, r4
 8007772:	4629      	mov	r1, r5
 8007774:	f7f8 ff60 	bl	8000638 <__aeabi_dmul>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4640      	mov	r0, r8
 800777e:	4649      	mov	r1, r9
 8007780:	f7f8 fda2 	bl	80002c8 <__aeabi_dsub>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4610      	mov	r0, r2
 800778a:	4619      	mov	r1, r3
 800778c:	f7f9 fa04 	bl	8000b98 <__aeabi_d2iz>
 8007790:	4603      	mov	r3, r0
 8007792:	60fb      	str	r3, [r7, #12]

	double ypos = ((YPosition_DATA/(double)(this->unit_)));
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4618      	mov	r0, r3
 8007798:	f7f8 fee4 	bl	8000564 <__aeabi_i2d>
 800779c:	4604      	mov	r4, r0
 800779e:	460d      	mov	r5, r1
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7f8 fecd 	bl	8000544 <__aeabi_ui2d>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4620      	mov	r0, r4
 80077b0:	4629      	mov	r1, r5
 80077b2:	f7f9 f86b 	bl	800088c <__aeabi_ddiv>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return ypos;
 80077be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80077c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80077c6:	eeb0 0a47 	vmov.f32	s0, s14
 80077ca:	eef0 0a67 	vmov.f32	s1, s15
 80077ce:	3718      	adds	r7, #24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80077d6:	bf00      	nop
 80077d8:	ffffc001 	.word	0xffffc001

080077dc <_ZN6PGV10023ProcessGetDirectionInfoESt6vectorItSaItEE>:

uint16_t PGV100::ProcessGetDirectionInfo(std::vector<uint16_t> temp_buf)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
	return (uint16_t)(temp_buf)[1]&0x03;
 80077e6:	2101      	movs	r1, #1
 80077e8:	6838      	ldr	r0, [r7, #0]
 80077ea:	f7fd fd0a 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 80077ee:	4603      	mov	r3, r0
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	b29b      	uxth	r3, r3
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE>:

uint16_t PGV100::ProcessGetColorInfo(std::vector<uint16_t> temp_buf)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
	if((temp_buf)[0]&0x07 && (temp_buf)[1]&0x07) return (uint16_t)(temp_buf)[1]&0x07;
 800780a:	2100      	movs	r1, #0
 800780c:	6838      	ldr	r0, [r7, #0]
 800780e:	f7fd fcf8 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 8007812:	4603      	mov	r3, r0
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00b      	beq.n	8007836 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x36>
 800781e:	2101      	movs	r1, #1
 8007820:	6838      	ldr	r0, [r7, #0]
 8007822:	f7fd fcee 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 8007826:	4603      	mov	r3, r0
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x36>
 8007832:	2301      	movs	r3, #1
 8007834:	e000      	b.n	8007838 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x38>
 8007836:	2300      	movs	r3, #0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d009      	beq.n	8007850 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x50>
 800783c:	2101      	movs	r1, #1
 800783e:	6838      	ldr	r0, [r7, #0]
 8007840:	f7fd fcdf 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 8007844:	4603      	mov	r3, r0
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	b29b      	uxth	r3, r3
 800784e:	e002      	b.n	8007856 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x56>
	else return this->color_;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE>:

//---------------------------------------------------------------Processing data
//for Error checking
uint16_t PGV100::ProcessChecksumData(std::vector<uint16_t> temp_buf)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b08c      	sub	sp, #48	; 0x30
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t ChkSum_Data = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t even_cnt[8]={0,};
 8007870:	f107 0310 	add.w	r3, r7, #16
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	605a      	str	r2, [r3, #4]
 800787a:	609a      	str	r2, [r3, #8]
 800787c:	60da      	str	r2, [r3, #12]

	//1. the last byte is for chksum data
	temp_buf.pop_back();
 800787e:	6838      	ldr	r0, [r7, #0]
 8007880:	f7ff f849 	bl	8006916 <_ZNSt6vectorItSaItEE8pop_backEv>

	//2. check each bytes for calculating 'xor' value
	for(uint16_t i=0; i<8; i++)
 8007884:	2300      	movs	r3, #0
 8007886:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007888:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800788a:	2b07      	cmp	r3, #7
 800788c:	d85a      	bhi.n	8007944 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0xe6>
	{
		for (auto& index : temp_buf)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
 8007892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007894:	f7fe f899 	bl	80059ca <_ZNSt6vectorItSaItEE5beginEv>
 8007898:	4603      	mov	r3, r0
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800789e:	f7fd fe22 	bl	80054e6 <_ZNSt6vectorItSaItEE3endEv>
 80078a2:	4603      	mov	r3, r0
 80078a4:	60bb      	str	r3, [r7, #8]
 80078a6:	f107 0208 	add.w	r2, r7, #8
 80078aa:	f107 030c 	add.w	r3, r7, #12
 80078ae:	4611      	mov	r1, r2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff f844 	bl	800693e <_ZN9__gnu_cxxneIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d026      	beq.n	800790a <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0xac>
 80078bc:	f107 030c 	add.w	r3, r7, #12
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7ff f864 	bl	800698e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 80078c6:	6238      	str	r0, [r7, #32]
		{
			temp = index;
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	857b      	strh	r3, [r7, #42]	; 0x2a
			if((temp>>i)&0x01) even_cnt[i]+=1;//8bit, even
 80078ce:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80078d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80078d2:	fa42 f303 	asr.w	r3, r2, r3
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00d      	beq.n	80078fa <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0x9c>
 80078de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	3330      	adds	r3, #48	; 0x30
 80078e4:	443b      	add	r3, r7
 80078e6:	f833 2c20 	ldrh.w	r2, [r3, #-32]
 80078ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80078ec:	3201      	adds	r2, #1
 80078ee:	b292      	uxth	r2, r2
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	3330      	adds	r3, #48	; 0x30
 80078f4:	443b      	add	r3, r7
 80078f6:	f823 2c20 	strh.w	r2, [r3, #-32]
			temp = 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	857b      	strh	r3, [r7, #42]	; 0x2a
		for (auto& index : temp_buf)
 80078fe:	f107 030c 	add.w	r3, r7, #12
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff f833 	bl	800696e <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>
 8007908:	e7cd      	b.n	80078a6 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0x48>
		}
		if(even_cnt[i]!=0) ChkSum_Data |= (even_cnt[i]%2) * (1<<i);
 800790a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	3330      	adds	r3, #48	; 0x30
 8007910:	443b      	add	r3, r7
 8007912:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d010      	beq.n	800793c <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0xde>
 800791a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	3330      	adds	r3, #48	; 0x30
 8007920:	443b      	add	r3, r7
 8007922:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007926:	f003 0201 	and.w	r2, r3, #1
 800792a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800792c:	fa02 f303 	lsl.w	r3, r2, r3
 8007930:	b21a      	sxth	r2, r3
 8007932:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8007936:	4313      	orrs	r3, r2
 8007938:	b21b      	sxth	r3, r3
 800793a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t i=0; i<8; i++)
 800793c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800793e:	3301      	adds	r3, #1
 8007940:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007942:	e7a1      	b.n	8007888 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0x2a>
	}
	 return ChkSum_Data;
 8007944:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8007946:	4618      	mov	r0, r3
 8007948:	3730      	adds	r7, #48	; 0x30
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE>:

uint16_t PGV100::ProcessCheckErr(std::vector<uint16_t> temp_buf)
{
 800794e:	b590      	push	{r4, r7, lr}
 8007950:	b08b      	sub	sp, #44	; 0x2c
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
	 // 0x1000 = internal error (Recommend to change sensors)
	 // 0x2000 = reserved
	 // 0x4000 = reserved
	 // 0x8000 = reserved
	 //--------------------------------------------------------------------
	 uint16_t state = 0x0000;
 8007958:	2300      	movs	r3, #0
 800795a:	84fb      	strh	r3, [r7, #38]	; 0x26

	//Check Comm. Error
	if(!comm_status_)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007962:	f083 0301 	eor.w	r3, r3, #1
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x26>
	{
		state = CommTimeout;
 800796c:	2340      	movs	r3, #64	; 0x40
 800796e:	84fb      	strh	r3, [r7, #38]	; 0x26
		return state;
 8007970:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007972:	e074      	b.n	8007a5e <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x110>
	}

	//If Comm Err is not, check others
	if((temp_buf.back()) == ProcessChecksumData(temp_buf))    //Checksum error pass or not(POS_BUF[20] <--- check sum buffer)
 8007974:	6838      	ldr	r0, [r7, #0]
 8007976:	f7ff f816 	bl	80069a6 <_ZNSt6vectorItSaItEE4backEv>
 800797a:	4603      	mov	r3, r0
 800797c:	881c      	ldrh	r4, [r3, #0]
 800797e:	f107 030c 	add.w	r3, r7, #12
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff f829 	bl	80069dc <_ZNSt6vectorItSaItEEC1ERKS1_>
 800798a:	f107 030c 	add.w	r3, r7, #12
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff ff64 	bl	800785e <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE>
 8007996:	4603      	mov	r3, r0
 8007998:	429c      	cmp	r4, r3
 800799a:	bf0c      	ite	eq
 800799c:	2301      	moveq	r3, #1
 800799e:	2300      	movne	r3, #0
 80079a0:	b2dc      	uxtb	r4, r3
 80079a2:	f107 030c 	add.w	r3, r7, #12
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fd fbbd 	bl	8005126 <_ZNSt6vectorItSaItEED1Ev>
 80079ac:	2c00      	cmp	r4, #0
 80079ae:	d053      	beq.n	8007a58 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10a>
	{
		if((temp_buf)[0] & 0x01)    //Err Occured
 80079b0:	2100      	movs	r1, #0
 80079b2:	6838      	ldr	r0, [r7, #0]
 80079b4:	f7fd fc25 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 80079b8:	4603      	mov	r3, r0
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	bf14      	ite	ne
 80079c4:	2301      	movne	r3, #1
 80079c6:	2300      	moveq	r3, #0
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d032      	beq.n	8007a34 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xe6>
		{
			uint16_t errcode =  ProcessGetERRInfo(temp_buf);
 80079ce:	f107 0318 	add.w	r3, r7, #24
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7ff f801 	bl	80069dc <_ZNSt6vectorItSaItEEC1ERKS1_>
 80079da:	f107 0318 	add.w	r3, r7, #24
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff fcbc 	bl	800735e <_ZN6PGV10017ProcessGetERRInfoESt6vectorItSaItEE>
 80079e6:	4603      	mov	r3, r0
 80079e8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80079ea:	f107 0318 	add.w	r3, r7, #24
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fd fb99 	bl	8005126 <_ZNSt6vectorItSaItEED1Ev>
			if(errcode >= 1000) state = InternalFatal;        //Internal Fatal Error
 80079f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079fa:	d303      	bcc.n	8007a04 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xb6>
 80079fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a00:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007a02:	e02b      	b.n	8007a5c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==1) state = ReadHeadTilted;     //read head tilted 180°.(pcv80 only)
 8007a04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d102      	bne.n	8007a10 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xc2>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007a0e:	e025      	b.n	8007a5c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==2) state = CodeConditionErr;     //code condition error(code distance chk)
 8007a10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d102      	bne.n	8007a1c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xce>
 8007a16:	2302      	movs	r3, #2
 8007a18:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007a1a:	e01f      	b.n	8007a5c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==5) state = NoDirectionDeclared;     //No clear position can be determined(�Ÿ�����)
 8007a1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	d102      	bne.n	8007a28 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xda>
 8007a22:	2304      	movs	r3, #4
 8007a24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007a26:	e019      	b.n	8007a5c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==6) state = NoColorDeclared;     // No Color decision(Set Color choice)
 8007a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a2a:	2b06      	cmp	r3, #6
 8007a2c:	d116      	bne.n	8007a5c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
 8007a2e:	2308      	movs	r3, #8
 8007a30:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007a32:	e013      	b.n	8007a5c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
		}
		else if((temp_buf)[0]&0x02) state = NoPosition;    //No Position Error
 8007a34:	2100      	movs	r1, #0
 8007a36:	6838      	ldr	r0, [r7, #0]
 8007a38:	f7fd fbe3 	bl	8005202 <_ZNSt6vectorItSaItEEixEj>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	bf14      	ite	ne
 8007a48:	2301      	movne	r3, #1
 8007a4a:	2300      	moveq	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d004      	beq.n	8007a5c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
 8007a52:	2320      	movs	r3, #32
 8007a54:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007a56:	e001      	b.n	8007a5c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
	}
	else state = CheckSumErr;        //check sum error
 8007a58:	2380      	movs	r3, #128	; 0x80
 8007a5a:	84fb      	strh	r3, [r7, #38]	; 0x26

	return state;
 8007a5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	372c      	adds	r7, #44	; 0x2c
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd90      	pop	{r4, r7, pc}

08007a66 <_ZN6PGV10019ProcessGetTotalInfoEv>:



//finally we got combined function
uint16_t PGV100::ProcessGetTotalInfo()
{
 8007a66:	b590      	push	{r4, r7, lr}
 8007a68:	b0a3      	sub	sp, #140	; 0x8c
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
	//0 .Copying temp. data from received data
	std::vector<uint16_t> temp_buf_ = this->pos_buf_;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007a74:	f107 030c 	add.w	r3, r7, #12
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe ffae 	bl	80069dc <_ZNSt6vectorItSaItEEC1ERKS1_>

	//1. check color response -> no error check
	if(max_read_buf_size_ == PGV100Color)  //response for changing colors
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d11a      	bne.n	8007ac0 <_ZN6PGV10019ProcessGetTotalInfoEv+0x5a>
	{
		this->color_ = ProcessGetColorInfo(temp_buf_);
 8007a8a:	f107 020c 	add.w	r2, r7, #12
 8007a8e:	f107 0318 	add.w	r3, r7, #24
 8007a92:	4611      	mov	r1, r2
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fe ffa1 	bl	80069dc <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007a9a:	f107 0318 	add.w	r3, r7, #24
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7ff fead 	bl	8007800 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8007ab0:	f107 0318 	add.w	r3, r7, #24
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fd fb36 	bl	8005126 <_ZNSt6vectorItSaItEED1Ev>
		return this->err_code_;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	8c1c      	ldrh	r4, [r3, #32]
 8007abe:	e0f7      	b.n	8007cb0 <_ZN6PGV10019ProcessGetTotalInfoEv+0x24a>
	}

	//2. Timeout or other error handling
	uint16_t now_err = ProcessCheckErr(temp_buf_);
 8007ac0:	f107 020c 	add.w	r2, r7, #12
 8007ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ac8:	4611      	mov	r1, r2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fe ff86 	bl	80069dc <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff ff39 	bl	800794e <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE>
 8007adc:	4603      	mov	r3, r0
 8007ade:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8007ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fd fb1d 	bl	8005126 <_ZNSt6vectorItSaItEED1Ev>

	//3. simplized error handle error >=1, good = 0 and if error occur, error count is up
	//4. when the Error count reached max count, return err code
	if(now_err >= 1)
 8007aec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d017      	beq.n	8007b24 <_ZN6PGV10019ProcessGetTotalInfoEv+0xbe>
	{
		FilterCountUp();
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fd fa8e 	bl	8005018 <_ZN12PNFPosSensor13FilterCountUpEv>
		if(IsInfoFiltered())
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fd fa66 	bl	8004fd0 <_ZN12PNFPosSensor14IsInfoFilteredEv>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <_ZN6PGV10019ProcessGetTotalInfoEv+0xba>
		{
			ResetAllData();
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff fb1e 	bl	800714c <_ZN6PGV10012ResetAllDataEv>
			FilterCountReset();
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fd fa96 	bl	8005044 <_ZN12PNFPosSensor16FilterCountResetEv>
			this->err_code_ = now_err;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8007b1e:	841a      	strh	r2, [r3, #32]
		}
		return 1;  //error occur
 8007b20:	2401      	movs	r4, #1
 8007b22:	e0c5      	b.n	8007cb0 <_ZN6PGV10019ProcessGetTotalInfoEv+0x24a>
	}

	//5. Processing data
	switch(this->max_read_buf_size_)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d002      	beq.n	8007b34 <_ZN6PGV10019ProcessGetTotalInfoEv+0xce>
 8007b2e:	2b15      	cmp	r3, #21
 8007b30:	d019      	beq.n	8007b66 <_ZN6PGV10019ProcessGetTotalInfoEv+0x100>
 8007b32:	e0b3      	b.n	8007c9c <_ZN6PGV10019ProcessGetTotalInfoEv+0x236>
	{
		case PGV100Dir:
			this->dir_ = ProcessGetDirectionInfo(temp_buf_);
 8007b34:	f107 020c 	add.w	r2, r7, #12
 8007b38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe ff4c 	bl	80069dc <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007b44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff fe46 	bl	80077dc <_ZN6PGV10023ProcessGetDirectionInfoESt6vectorItSaItEE>
 8007b50:	4603      	mov	r3, r0
 8007b52:	461a      	mov	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8007b5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fd fae1 	bl	8005126 <_ZNSt6vectorItSaItEED1Ev>
			break;
 8007b64:	e09a      	b.n	8007c9c <_ZN6PGV10019ProcessGetTotalInfoEv+0x236>
		case PGV100Pos:
			if(ProcessIsTagDetected(temp_buf_)) this->tagNo_ = ProcessGetTagNumber(temp_buf_);
 8007b66:	f107 020c 	add.w	r2, r7, #12
 8007b6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b6e:	4611      	mov	r1, r2
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fe ff33 	bl	80069dc <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007b76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff fc1e 	bl	80073be <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE>
 8007b82:	4603      	mov	r3, r0
 8007b84:	461c      	mov	r4, r3
 8007b86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fd facb 	bl	8005126 <_ZNSt6vectorItSaItEED1Ev>
 8007b90:	2c00      	cmp	r4, #0
 8007b92:	d018      	beq.n	8007bc6 <_ZN6PGV10019ProcessGetTotalInfoEv+0x160>
 8007b94:	f107 020c 	add.w	r2, r7, #12
 8007b98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe ff1c 	bl	80069dc <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007ba4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7ff fc22 	bl	80073f4 <_ZN6PGV10019ProcessGetTagNumberESt6vectorItSaItEE>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8007bba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fd fab1 	bl	8005126 <_ZNSt6vectorItSaItEED1Ev>
 8007bc4:	e003      	b.n	8007bce <_ZN6PGV10019ProcessGetTotalInfoEv+0x168>
			else this->tagNo_ = 0;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
			this->dir_ = ProcessGetDirectionInfo(temp_buf_);
 8007bce:	f107 020c 	add.w	r2, r7, #12
 8007bd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe feff 	bl	80069dc <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007bde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff fdf9 	bl	80077dc <_ZN6PGV10023ProcessGetDirectionInfoESt6vectorItSaItEE>
 8007bea:	4603      	mov	r3, r0
 8007bec:	461a      	mov	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8007bf4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fd fa94 	bl	8005126 <_ZNSt6vectorItSaItEED1Ev>
			this->angle_ = ProcessGetAngleInfo(temp_buf_); 	 			  //--- Get ANGLE INFO
 8007bfe:	f107 020c 	add.w	r2, r7, #12
 8007c02:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007c06:	4611      	mov	r1, r2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe fee7 	bl	80069dc <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007c0e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7ff fc2f 	bl	8007478 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE>
 8007c1a:	eeb0 7a40 	vmov.f32	s14, s0
 8007c1e:	eef0 7a60 	vmov.f32	s15, s1
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
 8007c28:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fd fa7a 	bl	8005126 <_ZNSt6vectorItSaItEED1Ev>
			this->xpos_ = ProcessGetXPosInfo(temp_buf_); 	 				  //--- Get X POSITION
 8007c32:	f107 020c 	add.w	r2, r7, #12
 8007c36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe fecd 	bl	80069dc <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007c42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff fc6d 	bl	8007528 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE>
 8007c4e:	eeb0 7a40 	vmov.f32	s14, s0
 8007c52:	eef0 7a60 	vmov.f32	s15, s1
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	ed83 7b04 	vstr	d7, [r3, #16]
 8007c5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fd fa60 	bl	8005126 <_ZNSt6vectorItSaItEED1Ev>
			this->ypos_ = ProcessGetYPosInfo(temp_buf_); 					  //--- Get Y POSITION
 8007c66:	f107 020c 	add.w	r2, r7, #12
 8007c6a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007c6e:	4611      	mov	r1, r2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fe feb3 	bl	80069dc <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007c76:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff fd25 	bl	80076cc <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE>
 8007c82:	eeb0 7a40 	vmov.f32	s14, s0
 8007c86:	eef0 7a60 	vmov.f32	s15, s1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	ed83 7b06 	vstr	d7, [r3, #24]
 8007c90:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fd fa46 	bl	8005126 <_ZNSt6vectorItSaItEED1Ev>
			break;
 8007c9a:	bf00      	nop
	}
	FilterCountReset();
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fd f9d0 	bl	8005044 <_ZN12PNFPosSensor16FilterCountResetEv>
	this->err_code_ = now_err;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8007caa:	841a      	strh	r2, [r3, #32]
	return this->err_code_;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	8c1c      	ldrh	r4, [r3, #32]
	std::vector<uint16_t> temp_buf_ = this->pos_buf_;
 8007cb0:	f107 030c 	add.w	r3, r7, #12
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fd fa36 	bl	8005126 <_ZNSt6vectorItSaItEED1Ev>
}
 8007cba:	4623      	mov	r3, r4
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	378c      	adds	r7, #140	; 0x8c
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd90      	pop	{r4, r7, pc}

08007cc4 <_ZN6PGV1009DriveInitEv>:


void PGV100::DriveInit()
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	QueueRepeatPosReqeust();
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff fb33 	bl	8007338 <_ZN6PGV10021QueueRepeatPosReqeustEv>
	ReadBufferInit();
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff faca 	bl	800726c <_ZN6PGV10014ReadBufferInitEv>
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <_ZN6PGV1009DriveCommEv>:

void PGV100::DriveComm()
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	if(TransmitSendRequest()!=HAL_OK || TransmitReceiveResponse()!=HAL_OK)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fd f88a 	bl	8004e04 <_ZN12PNFPosSensor19TransmitSendRequestEv>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d106      	bne.n	8007d04 <_ZN6PGV1009DriveCommEv+0x24>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fd f8cb 	bl	8004e94 <_ZN12PNFPosSensor23TransmitReceiveResponseEv>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <_ZN6PGV1009DriveCommEv+0x28>
 8007d04:	2301      	movs	r3, #1
 8007d06:	e000      	b.n	8007d0a <_ZN6PGV1009DriveCommEv+0x2a>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d004      	beq.n	8007d18 <_ZN6PGV1009DriveCommEv+0x38>
	{
		this->comm_status_ = false;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	}
	else
	{
		this->comm_status_ = true;
	}
}
 8007d16:	e003      	b.n	8007d20 <_ZN6PGV1009DriveCommEv+0x40>
		this->comm_status_ = true;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <_ZN6PGV10013DriveAnalysisEv>:

void PGV100::DriveAnalysis()
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
	ProcessGetTotalInfo();
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7ff fe98 	bl	8007a66 <_ZN6PGV10019ProcessGetTotalInfoEv>
	QueueDeleteRequest();
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fd f938 	bl	8004fae <_ZN12PNFPosSensor18QueueDeleteRequestEv>
}
 8007d3e:	bf00      	nop
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <_ZN6PGV10014InitializationEv>:

//main functions
void PGV100::Initialization()
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
	RegisterRequsetCmd();
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7ff fa1f 	bl	8007192 <_ZN6PGV10018RegisterRequsetCmdEv>
	RegisterDefaultParam();
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff fa7a 	bl	800724e <_ZN6PGV10020RegisterDefaultParamEv>
}
 8007d5a:	bf00      	nop
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fbd6 	bl	800851c <_ZNSaIP12CommonSensorED1Ev>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fbb9 	bl	80084fc <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implC1Ev>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <_ZNSt6vectorIP12CommonSensorSaIS1_EEC1Ev>:
      vector() = default;
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7ff ffeb 	bl	8007d7a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EEC1Ev>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b082      	sub	sp, #8
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fc00 	bl	80085bc <_ZNSaIP6PGV100ED1Ev>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EEC1Ev>:
      _Vector_base() = default;
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 fbe3 	bl	800859c <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implC1Ev>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <_ZNSt6vectorIP6PGV100SaIS1_EEC1Ev>:
      vector() = default;
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7ff ffeb 	bl	8007dc6 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EEC1Ev>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <_ZN13SensorManagerC1Ev>:
bool SensorManager::bDestroyed_ = false;
SensorManager* SensorManager::pIns_ = NULL;


//--------------------------------------------------------------------------------------------------Single instance:
SensorManager::SensorManager() {};
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff ffc5 	bl	8007d94 <_ZNSt6vectorIP12CommonSensorSaIS1_EEC1Ev>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	330c      	adds	r3, #12
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7ff ffe6 	bl	8007de0 <_ZNSt6vectorIP6PGV100SaIS1_EEC1Ev>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <_ZN13SensorManagerD1Ev>:
SensorManager::SensorManager(const SensorManager& other){};
SensorManager& SensorManager::operator=(const SensorManager& ref) {return *this;};
SensorManager::~SensorManager()
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
{
	DeleteAllSensor();
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f881 	bl	8007f30 <_ZN13SensorManager15DeleteAllSensorEv>
	bDestroyed_ = true;
 8007e2e:	4b08      	ldr	r3, [pc, #32]	; (8007e50 <_ZN13SensorManagerD1Ev+0x30>)
 8007e30:	2201      	movs	r2, #1
 8007e32:	701a      	strb	r2, [r3, #0]
SensorManager::~SensorManager()
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	330c      	adds	r3, #12
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 fbe4 	bl	8008606 <_ZNSt6vectorIP6PGV100SaIS1_EED1Ev>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fb90 	bl	8008566 <_ZNSt6vectorIP12CommonSensorSaIS1_EED1Ev>
}
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	20000874 	.word	0x20000874

08007e54 <__tcf_0>:

void SensorManager::ManagerCreate()
{
	static SensorManager ins;
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	4801      	ldr	r0, [pc, #4]	; (8007e60 <__tcf_0+0xc>)
 8007e5a:	f7ff ffe1 	bl	8007e20 <_ZN13SensorManagerD1Ev>
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	2000087c 	.word	0x2000087c

08007e64 <_ZN13SensorManager13ManagerCreateEv>:
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
	static SensorManager ins;
 8007e68:	4b13      	ldr	r3, [pc, #76]	; (8007eb8 <_ZN13SensorManager13ManagerCreateEv+0x54>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	f3bf 8f5b 	dmb	ish
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	bf0c      	ite	eq
 8007e7a:	2301      	moveq	r3, #1
 8007e7c:	2300      	movne	r3, #0
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d013      	beq.n	8007eac <_ZN13SensorManager13ManagerCreateEv+0x48>
 8007e84:	480c      	ldr	r0, [pc, #48]	; (8007eb8 <_ZN13SensorManager13ManagerCreateEv+0x54>)
 8007e86:	f01a fd07 	bl	8022898 <__cxa_guard_acquire>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	bf14      	ite	ne
 8007e90:	2301      	movne	r3, #1
 8007e92:	2300      	moveq	r3, #0
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d008      	beq.n	8007eac <_ZN13SensorManager13ManagerCreateEv+0x48>
 8007e9a:	4808      	ldr	r0, [pc, #32]	; (8007ebc <_ZN13SensorManager13ManagerCreateEv+0x58>)
 8007e9c:	f7ff ffad 	bl	8007dfa <_ZN13SensorManagerC1Ev>
 8007ea0:	4807      	ldr	r0, [pc, #28]	; (8007ec0 <_ZN13SensorManager13ManagerCreateEv+0x5c>)
 8007ea2:	f01b fd12 	bl	80238ca <atexit>
 8007ea6:	4804      	ldr	r0, [pc, #16]	; (8007eb8 <_ZN13SensorManager13ManagerCreateEv+0x54>)
 8007ea8:	f01a fd02 	bl	80228b0 <__cxa_guard_release>
	pIns_ = &ins;
 8007eac:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <_ZN13SensorManager13ManagerCreateEv+0x60>)
 8007eae:	4a03      	ldr	r2, [pc, #12]	; (8007ebc <_ZN13SensorManager13ManagerCreateEv+0x58>)
 8007eb0:	601a      	str	r2, [r3, #0]
}
 8007eb2:	bf00      	nop
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000898 	.word	0x20000898
 8007ebc:	2000087c 	.word	0x2000087c
 8007ec0:	08007e55 	.word	0x08007e55
 8007ec4:	20000878 	.word	0x20000878

08007ec8 <_ZN13SensorManager13ManagerDeleteEv>:

void SensorManager::ManagerDelete()
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
	pIns_->~SensorManager();
 8007ecc:	4b03      	ldr	r3, [pc, #12]	; (8007edc <_ZN13SensorManager13ManagerDeleteEv+0x14>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7ff ffa5 	bl	8007e20 <_ZN13SensorManagerD1Ev>
}
 8007ed6:	bf00      	nop
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20000878 	.word	0x20000878

08007ee0 <_ZN13SensorManager11GetInstanceEv>:

SensorManager& SensorManager::GetInstance()
{
 8007ee0:	b598      	push	{r3, r4, r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
	if(bDestroyed_)
 8007ee4:	4b0f      	ldr	r3, [pc, #60]	; (8007f24 <_ZN13SensorManager11GetInstanceEv+0x44>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d010      	beq.n	8007f0e <_ZN13SensorManager11GetInstanceEv+0x2e>
	{
		pIns_ = new SensorManager();
 8007eec:	201c      	movs	r0, #28
 8007eee:	f01a fce2 	bl	80228b6 <_Znwj>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	461c      	mov	r4, r3
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f7ff ff7f 	bl	8007dfa <_ZN13SensorManagerC1Ev>
 8007efc:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <_ZN13SensorManager11GetInstanceEv+0x48>)
 8007efe:	601c      	str	r4, [r3, #0]
		// new(pIns) =  SensorManager;
		atexit(ManagerDelete);
 8007f00:	480a      	ldr	r0, [pc, #40]	; (8007f2c <_ZN13SensorManager11GetInstanceEv+0x4c>)
 8007f02:	f01b fce2 	bl	80238ca <atexit>
		bDestroyed_ = false;
 8007f06:	4b07      	ldr	r3, [pc, #28]	; (8007f24 <_ZN13SensorManager11GetInstanceEv+0x44>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	e005      	b.n	8007f1a <_ZN13SensorManager11GetInstanceEv+0x3a>
	}
	else if (pIns_ == NULL)
 8007f0e:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <_ZN13SensorManager11GetInstanceEv+0x48>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <_ZN13SensorManager11GetInstanceEv+0x3a>
	{
		ManagerCreate();
 8007f16:	f7ff ffa5 	bl	8007e64 <_ZN13SensorManager13ManagerCreateEv>
	}
	 return *pIns_;
 8007f1a:	4b03      	ldr	r3, [pc, #12]	; (8007f28 <_ZN13SensorManager11GetInstanceEv+0x48>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	bd98      	pop	{r3, r4, r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000874 	.word	0x20000874
 8007f28:	20000878 	.word	0x20000878
 8007f2c:	08007ec9 	.word	0x08007ec9

08007f30 <_ZN13SensorManager15DeleteAllSensorEv>:


void SensorManager::DeleteAllSensor()
{
 8007f30:	b590      	push	{r4, r7, lr}
 8007f32:	b08b      	sub	sp, #44	; 0x2c
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
	for (auto& index : common_sensors_) delete (index);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f3e:	f000 fb7d 	bl	800863c <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 8007f42:	4603      	mov	r3, r0
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f48:	f000 fb88 	bl	800865c <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	613b      	str	r3, [r7, #16]
 8007f50:	f107 0210 	add.w	r2, r7, #16
 8007f54:	f107 0314 	add.w	r3, r7, #20
 8007f58:	4611      	mov	r1, r2
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 fb8f 	bl	800867e <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d016      	beq.n	8007f94 <_ZN13SensorManager15DeleteAllSensorEv+0x64>
 8007f66:	f107 0314 	add.w	r3, r7, #20
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fbaf 	bl	80086ce <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 8007f70:	61b8      	str	r0, [r7, #24]
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	681c      	ldr	r4, [r3, #0]
 8007f76:	2c00      	cmp	r4, #0
 8007f78:	d006      	beq.n	8007f88 <_ZN13SensorManager15DeleteAllSensorEv+0x58>
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f7f9 f8cf 	bl	800111e <_ZN12CommonSensorD1Ev>
 8007f80:	2110      	movs	r1, #16
 8007f82:	4620      	mov	r0, r4
 8007f84:	f01a fc86 	bl	8022894 <_ZdlPvj>
 8007f88:	f107 0314 	add.w	r3, r7, #20
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fb8e 	bl	80086ae <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 8007f92:	e7dd      	b.n	8007f50 <_ZN13SensorManager15DeleteAllSensorEv+0x20>
	common_sensors_.clear();
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 fba5 	bl	80086e6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5clearEv>
	for (auto& index : pgv100_) delete (index);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	330c      	adds	r3, #12
 8007fa0:	623b      	str	r3, [r7, #32]
 8007fa2:	6a38      	ldr	r0, [r7, #32]
 8007fa4:	f000 fbad 	bl	8008702 <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	6a38      	ldr	r0, [r7, #32]
 8007fae:	f000 fbb8 	bl	8008722 <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	60bb      	str	r3, [r7, #8]
 8007fb6:	f107 0208 	add.w	r2, r7, #8
 8007fba:	f107 030c 	add.w	r3, r7, #12
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fbbf 	bl	8008744 <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d014      	beq.n	8007ff6 <_ZN13SensorManager15DeleteAllSensorEv+0xc6>
 8007fcc:	f107 030c 	add.w	r3, r7, #12
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 fbdf 	bl	8008794 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>
 8007fd6:	61f8      	str	r0, [r7, #28]
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d004      	beq.n	8007fea <_ZN13SensorManager15DeleteAllSensorEv+0xba>
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	3204      	adds	r2, #4
 8007fe4:	6812      	ldr	r2, [r2, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	4790      	blx	r2
 8007fea:	f107 030c 	add.w	r3, r7, #12
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fbc0 	bl	8008774 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>
 8007ff4:	e7df      	b.n	8007fb6 <_ZN13SensorManager15DeleteAllSensorEv+0x86>
	pgv100_.clear();
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	330c      	adds	r3, #12
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 fbd6 	bl	80087ac <_ZNSt6vectorIP6PGV100SaIS1_EE5clearEv>
}
 8008000:	bf00      	nop
 8008002:	372c      	adds	r7, #44	; 0x2c
 8008004:	46bd      	mov	sp, r7
 8008006:	bd90      	pop	{r4, r7, pc}

08008008 <_ZN13SensorManager20CommonSensorRegisterEv>:


//---------------------------------------------------------------------sensor function
//common sensor
void SensorManager::CommonSensorRegister()
{
 8008008:	b5b0      	push	{r4, r5, r7, lr}
 800800a:	b090      	sub	sp, #64	; 0x40
 800800c:	af02      	add	r7, sp, #8
 800800e:	6078      	str	r0, [r7, #4]
	if(common_sensors_.empty())
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fbd8 	bl	80087c8 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5emptyEv>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 8106 	beq.w	800822c <_ZN13SensorManager20CommonSensorRegisterEv+0x224>
	{
		//J6 -> PG9 ~ J11 -> PG15	, J12 -> PE0 , J16 -> PE4
		common_sensors_.emplace_back(new CommonSensor(AORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_9));
 8008020:	687d      	ldr	r5, [r7, #4]
 8008022:	2010      	movs	r0, #16
 8008024:	f01a fc47 	bl	80228b6 <_Znwj>
 8008028:	4603      	mov	r3, r0
 800802a:	461c      	mov	r4, r3
 800802c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	4b80      	ldr	r3, [pc, #512]	; (8008234 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	2305      	movs	r3, #5
 8008038:	2201      	movs	r2, #1
 800803a:	2101      	movs	r1, #1
 800803c:	4620      	mov	r0, r4
 800803e:	f7f9 f83f 	bl	80010c0 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8008042:	60fc      	str	r4, [r7, #12]
 8008044:	f107 030c 	add.w	r3, r7, #12
 8008048:	4619      	mov	r1, r3
 800804a:	4628      	mov	r0, r5
 800804c:	f000 fbd7 	bl	80087fe <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(AORG_R, ActiveH, Filter_5, GPIOG, GPIO_PIN_10));
 8008050:	687d      	ldr	r5, [r7, #4]
 8008052:	2010      	movs	r0, #16
 8008054:	f01a fc2f 	bl	80228b6 <_Znwj>
 8008058:	4603      	mov	r3, r0
 800805a:	461c      	mov	r4, r3
 800805c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	4b74      	ldr	r3, [pc, #464]	; (8008234 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	2305      	movs	r3, #5
 8008068:	2201      	movs	r2, #1
 800806a:	2102      	movs	r1, #2
 800806c:	4620      	mov	r0, r4
 800806e:	f7f9 f827 	bl	80010c0 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8008072:	613c      	str	r4, [r7, #16]
 8008074:	f107 0310 	add.w	r3, r7, #16
 8008078:	4619      	mov	r1, r3
 800807a:	4628      	mov	r0, r5
 800807c:	f000 fbbf 	bl	80087fe <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(WORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_12));
 8008080:	687d      	ldr	r5, [r7, #4]
 8008082:	2010      	movs	r0, #16
 8008084:	f01a fc17 	bl	80228b6 <_Znwj>
 8008088:	4603      	mov	r3, r0
 800808a:	461c      	mov	r4, r3
 800808c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	4b68      	ldr	r3, [pc, #416]	; (8008234 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	2305      	movs	r3, #5
 8008098:	2201      	movs	r2, #1
 800809a:	2104      	movs	r1, #4
 800809c:	4620      	mov	r0, r4
 800809e:	f7f9 f80f 	bl	80010c0 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80080a2:	617c      	str	r4, [r7, #20]
 80080a4:	f107 0314 	add.w	r3, r7, #20
 80080a8:	4619      	mov	r1, r3
 80080aa:	4628      	mov	r0, r5
 80080ac:	f000 fba7 	bl	80087fe <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(WORG_R, ActiveH, Filter_5, GPIOG, GPIO_PIN_13));
 80080b0:	687d      	ldr	r5, [r7, #4]
 80080b2:	2010      	movs	r0, #16
 80080b4:	f01a fbff 	bl	80228b6 <_Znwj>
 80080b8:	4603      	mov	r3, r0
 80080ba:	461c      	mov	r4, r3
 80080bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	4b5c      	ldr	r3, [pc, #368]	; (8008234 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	2305      	movs	r3, #5
 80080c8:	2201      	movs	r2, #1
 80080ca:	2108      	movs	r1, #8
 80080cc:	4620      	mov	r0, r4
 80080ce:	f7f8 fff7 	bl	80010c0 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80080d2:	61bc      	str	r4, [r7, #24]
 80080d4:	f107 0318 	add.w	r3, r7, #24
 80080d8:	4619      	mov	r1, r3
 80080da:	4628      	mov	r0, r5
 80080dc:	f000 fb8f 	bl	80087fe <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(TORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_14));
 80080e0:	687d      	ldr	r5, [r7, #4]
 80080e2:	2010      	movs	r0, #16
 80080e4:	f01a fbe7 	bl	80228b6 <_Znwj>
 80080e8:	4603      	mov	r3, r0
 80080ea:	461c      	mov	r4, r3
 80080ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	4b50      	ldr	r3, [pc, #320]	; (8008234 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	2305      	movs	r3, #5
 80080f8:	2201      	movs	r2, #1
 80080fa:	2110      	movs	r1, #16
 80080fc:	4620      	mov	r0, r4
 80080fe:	f7f8 ffdf 	bl	80010c0 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8008102:	61fc      	str	r4, [r7, #28]
 8008104:	f107 031c 	add.w	r3, r7, #28
 8008108:	4619      	mov	r1, r3
 800810a:	4628      	mov	r0, r5
 800810c:	f000 fb77 	bl	80087fe <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(TORG_C, ActiveH, Filter_5, GPIOG, GPIO_PIN_15));
 8008110:	687d      	ldr	r5, [r7, #4]
 8008112:	2010      	movs	r0, #16
 8008114:	f01a fbcf 	bl	80228b6 <_Znwj>
 8008118:	4603      	mov	r3, r0
 800811a:	461c      	mov	r4, r3
 800811c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	4b44      	ldr	r3, [pc, #272]	; (8008234 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	2305      	movs	r3, #5
 8008128:	2201      	movs	r2, #1
 800812a:	2120      	movs	r1, #32
 800812c:	4620      	mov	r0, r4
 800812e:	f7f8 ffc7 	bl	80010c0 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8008132:	623c      	str	r4, [r7, #32]
 8008134:	f107 0320 	add.w	r3, r7, #32
 8008138:	4619      	mov	r1, r3
 800813a:	4628      	mov	r0, r5
 800813c:	f000 fb5f 	bl	80087fe <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>

		common_sensors_.emplace_back(new CommonSensor(TORG_R, ActiveH, Filter_5, GPIOE, GPIO_PIN_0));
 8008140:	687d      	ldr	r5, [r7, #4]
 8008142:	2010      	movs	r0, #16
 8008144:	f01a fbb7 	bl	80228b6 <_Znwj>
 8008148:	4603      	mov	r3, r0
 800814a:	461c      	mov	r4, r3
 800814c:	2301      	movs	r3, #1
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	4b39      	ldr	r3, [pc, #228]	; (8008238 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	2305      	movs	r3, #5
 8008156:	2201      	movs	r2, #1
 8008158:	2140      	movs	r1, #64	; 0x40
 800815a:	4620      	mov	r0, r4
 800815c:	f7f8 ffb0 	bl	80010c0 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8008160:	627c      	str	r4, [r7, #36]	; 0x24
 8008162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008166:	4619      	mov	r1, r3
 8008168:	4628      	mov	r0, r5
 800816a:	f000 fb48 	bl	80087fe <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_U, ActiveH, Filter_5, GPIOE, GPIO_PIN_1));
 800816e:	687d      	ldr	r5, [r7, #4]
 8008170:	2010      	movs	r0, #16
 8008172:	f01a fba0 	bl	80228b6 <_Znwj>
 8008176:	4603      	mov	r3, r0
 8008178:	461c      	mov	r4, r3
 800817a:	2302      	movs	r3, #2
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	4b2e      	ldr	r3, [pc, #184]	; (8008238 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	2305      	movs	r3, #5
 8008184:	2201      	movs	r2, #1
 8008186:	2180      	movs	r1, #128	; 0x80
 8008188:	4620      	mov	r0, r4
 800818a:	f7f8 ff99 	bl	80010c0 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 800818e:	62bc      	str	r4, [r7, #40]	; 0x28
 8008190:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008194:	4619      	mov	r1, r3
 8008196:	4628      	mov	r0, r5
 8008198:	f000 fb31 	bl	80087fe <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_C, ActiveH, Filter_5, GPIOE, GPIO_PIN_2));
 800819c:	687d      	ldr	r5, [r7, #4]
 800819e:	2010      	movs	r0, #16
 80081a0:	f01a fb89 	bl	80228b6 <_Znwj>
 80081a4:	4603      	mov	r3, r0
 80081a6:	461c      	mov	r4, r3
 80081a8:	2304      	movs	r3, #4
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	4b22      	ldr	r3, [pc, #136]	; (8008238 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	2305      	movs	r3, #5
 80081b2:	2201      	movs	r2, #1
 80081b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80081b8:	4620      	mov	r0, r4
 80081ba:	f7f8 ff81 	bl	80010c0 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80081be:	62fc      	str	r4, [r7, #44]	; 0x2c
 80081c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081c4:	4619      	mov	r1, r3
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 fb19 	bl	80087fe <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_L, ActiveH, Filter_5, GPIOE, GPIO_PIN_3));
 80081cc:	687d      	ldr	r5, [r7, #4]
 80081ce:	2010      	movs	r0, #16
 80081d0:	f01a fb71 	bl	80228b6 <_Znwj>
 80081d4:	4603      	mov	r3, r0
 80081d6:	461c      	mov	r4, r3
 80081d8:	2308      	movs	r3, #8
 80081da:	9301      	str	r3, [sp, #4]
 80081dc:	4b16      	ldr	r3, [pc, #88]	; (8008238 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	2305      	movs	r3, #5
 80081e2:	2201      	movs	r2, #1
 80081e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80081e8:	4620      	mov	r0, r4
 80081ea:	f7f8 ff69 	bl	80010c0 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80081ee:	633c      	str	r4, [r7, #48]	; 0x30
 80081f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80081f4:	4619      	mov	r1, r3
 80081f6:	4628      	mov	r0, r5
 80081f8:	f000 fb01 	bl	80087fe <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(IN_L, ActiveH, Filter_5, GPIOE, GPIO_PIN_4));
 80081fc:	687d      	ldr	r5, [r7, #4]
 80081fe:	2010      	movs	r0, #16
 8008200:	f01a fb59 	bl	80228b6 <_Znwj>
 8008204:	4603      	mov	r3, r0
 8008206:	461c      	mov	r4, r3
 8008208:	2310      	movs	r3, #16
 800820a:	9301      	str	r3, [sp, #4]
 800820c:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	2305      	movs	r3, #5
 8008212:	2201      	movs	r2, #1
 8008214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008218:	4620      	mov	r0, r4
 800821a:	f7f8 ff51 	bl	80010c0 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 800821e:	637c      	str	r4, [r7, #52]	; 0x34
 8008220:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008224:	4619      	mov	r1, r3
 8008226:	4628      	mov	r0, r5
 8008228:	f000 fae9 	bl	80087fe <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		//common_sensors_.emplace_back(new CommonSensor(IN_R, ActiveH, Filter_5, GPIOE, GPIO_PIN_4));
		//common_sensors_.resize(common_sensors_.size());
	}
}
 800822c:	bf00      	nop
 800822e:	3738      	adds	r7, #56	; 0x38
 8008230:	46bd      	mov	sp, r7
 8008232:	bdb0      	pop	{r4, r5, r7, pc}
 8008234:	40021800 	.word	0x40021800
 8008238:	40021000 	.word	0x40021000

0800823c <_ZN13SensorManager22CommonSensorInitializeEv>:

void SensorManager::CommonSensorInitialize()
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	CommonSensorRegister();
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7ff fedf 	bl	8008008 <_ZN13SensorManager20CommonSensorRegisterEv>
	CommonSensorDrive();
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f804 	bl	8008258 <_ZN13SensorManager17CommonSensorDriveEv>
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <_ZN13SensorManager17CommonSensorDriveEv>:
}



void SensorManager::CommonSensorDrive()
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	for (auto& sensors : common_sensors_) sensors->Drive();
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	6978      	ldr	r0, [r7, #20]
 8008266:	f000 f9e9 	bl	800863c <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 800826a:	4603      	mov	r3, r0
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	6978      	ldr	r0, [r7, #20]
 8008270:	f000 f9f4 	bl	800865c <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 8008274:	4603      	mov	r3, r0
 8008276:	60bb      	str	r3, [r7, #8]
 8008278:	f107 0208 	add.w	r2, r7, #8
 800827c:	f107 030c 	add.w	r3, r7, #12
 8008280:	4611      	mov	r1, r2
 8008282:	4618      	mov	r0, r3
 8008284:	f000 f9fb 	bl	800867e <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d010      	beq.n	80082b0 <_ZN13SensorManager17CommonSensorDriveEv+0x58>
 800828e:	f107 030c 	add.w	r3, r7, #12
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fa1b 	bl	80086ce <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 8008298:	6138      	str	r0, [r7, #16]
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f7f8 ffc6 	bl	8001230 <_ZN12CommonSensor5DriveEv>
 80082a4:	f107 030c 	add.w	r3, r7, #12
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 fa00 	bl	80086ae <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 80082ae:	e7e3      	b.n	8008278 <_ZN13SensorManager17CommonSensorDriveEv+0x20>
	CommonSensorGatherData();
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f804 	bl	80082be <_ZN13SensorManager22CommonSensorGatherDataEv>
}
 80082b6:	bf00      	nop
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <_ZN13SensorManager22CommonSensorGatherDataEv>:
uint16_t SensorManager::OUT_LGetData(){return CommonSensorGetData(OUT_L);}
uint16_t SensorManager::OUT_RGetData(){return CommonSensorGetData(OUT_R);}


void SensorManager::CommonSensorGatherData()
{
 80082be:	b590      	push	{r4, r7, lr}
 80082c0:	b089      	sub	sp, #36	; 0x24
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
	uint16_t temp_sensor_data = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	83fb      	strh	r3, [r7, #30]
	for (auto& sensors : common_sensors_)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	61bb      	str	r3, [r7, #24]
 80082ce:	69b8      	ldr	r0, [r7, #24]
 80082d0:	f000 f9b4 	bl	800863c <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 80082d4:	4603      	mov	r3, r0
 80082d6:	613b      	str	r3, [r7, #16]
 80082d8:	69b8      	ldr	r0, [r7, #24]
 80082da:	f000 f9bf 	bl	800865c <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 80082de:	4603      	mov	r3, r0
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	f107 020c 	add.w	r2, r7, #12
 80082e6:	f107 0310 	add.w	r3, r7, #16
 80082ea:	4611      	mov	r1, r2
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 f9c6 	bl	800867e <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d020      	beq.n	800833a <_ZN13SensorManager22CommonSensorGatherDataEv+0x7c>
 80082f8:	f107 0310 	add.w	r3, r7, #16
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 f9e6 	bl	80086ce <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 8008302:	6178      	str	r0, [r7, #20]
	{
		temp_sensor_data |=  ((sensors->GetSensorIndex()) * (sensors->GetSensorData()));
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4618      	mov	r0, r3
 800830a:	f7f8 ff1f 	bl	800114c <_ZNK12CommonSensor14GetSensorIndexEv>
 800830e:	4603      	mov	r3, r0
 8008310:	461c      	mov	r4, r3
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4618      	mov	r0, r3
 8008318:	f7f8 ff0c 	bl	8001134 <_ZNK12CommonSensor13GetSensorDataEv>
 800831c:	4603      	mov	r3, r0
 800831e:	fb04 f303 	mul.w	r3, r4, r3
 8008322:	b21a      	sxth	r2, r3
 8008324:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008328:	4313      	orrs	r3, r2
 800832a:	b21b      	sxth	r3, r3
 800832c:	83fb      	strh	r3, [r7, #30]
	for (auto& sensors : common_sensors_)
 800832e:	f107 0310 	add.w	r3, r7, #16
 8008332:	4618      	mov	r0, r3
 8008334:	f000 f9bb 	bl	80086ae <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 8008338:	e7d3      	b.n	80082e2 <_ZN13SensorManager22CommonSensorGatherDataEv+0x24>
	}
	this->common_sensor_data_ = temp_sensor_data;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	8bfa      	ldrh	r2, [r7, #30]
 800833e:	831a      	strh	r2, [r3, #24]
}
 8008340:	bf00      	nop
 8008342:	3724      	adds	r7, #36	; 0x24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd90      	pop	{r4, r7, pc}

08008348 <_ZNK13SensorManager22CommonSensorGetAllDataEv>:

uint16_t SensorManager::CommonSensorGetAllData() const {return this->common_sensor_data_;}
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	8b1b      	ldrh	r3, [r3, #24]
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <_ZN13SensorManager23OpticalSensorInitializeEv>:

//---------------------------------------------------------------------PNFPOSsensor function
//PNFPos sensor

void SensorManager::OpticalSensorInitialize()
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
	for (auto& index : pgv100_) index->Initialization();
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	330c      	adds	r3, #12
 800836c:	617b      	str	r3, [r7, #20]
 800836e:	6978      	ldr	r0, [r7, #20]
 8008370:	f000 f9c7 	bl	8008702 <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8008374:	4603      	mov	r3, r0
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	6978      	ldr	r0, [r7, #20]
 800837a:	f000 f9d2 	bl	8008722 <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 800837e:	4603      	mov	r3, r0
 8008380:	60bb      	str	r3, [r7, #8]
 8008382:	f107 0208 	add.w	r2, r7, #8
 8008386:	f107 030c 	add.w	r3, r7, #12
 800838a:	4611      	mov	r1, r2
 800838c:	4618      	mov	r0, r3
 800838e:	f000 f9d9 	bl	8008744 <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d014      	beq.n	80083c2 <_ZN13SensorManager23OpticalSensorInitializeEv+0x62>
 8008398:	f107 030c 	add.w	r3, r7, #12
 800839c:	4618      	mov	r0, r3
 800839e:	f000 f9f9 	bl	8008794 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>
 80083a2:	6138      	str	r0, [r7, #16]
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3314      	adds	r3, #20
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4610      	mov	r0, r2
 80083b4:	4798      	blx	r3
 80083b6:	f107 030c 	add.w	r3, r7, #12
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 f9da 	bl	8008774 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>
 80083c0:	e7df      	b.n	8008382 <_ZN13SensorManager23OpticalSensorInitializeEv+0x22>
	//add pcv 80 or
}
 80083c2:	bf00      	nop
 80083c4:	3718      	adds	r7, #24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	0000      	movs	r0, r0
 80083cc:	0000      	movs	r0, r0
	...

080083d0 <_ZN13SensorManager14PGV100RegisterEv>:

void SensorManager::PGV100Register()
{
 80083d0:	b5b0      	push	{r4, r5, r7, lr}
 80083d2:	b088      	sub	sp, #32
 80083d4:	af04      	add	r7, sp, #16
 80083d6:	6078      	str	r0, [r7, #4]
	if(pgv100_.empty())
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	330c      	adds	r3, #12
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 fa3c 	bl	800885a <_ZNKSt6vectorIP6PGV100SaIS1_EE5emptyEv>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d020      	beq.n	800842a <_ZN13SensorManager14PGV100RegisterEv+0x5a>
	{
		pgv100_.emplace_back(new PGV100(0x00, RS485, &huart5, GPIOB, GPIO_PIN_0, milimeter_1, 0.0, 0.0, 0.0));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f103 050c 	add.w	r5, r3, #12
 80083ee:	20b8      	movs	r0, #184	; 0xb8
 80083f0:	f01a fa61 	bl	80228b6 <_Znwj>
 80083f4:	4603      	mov	r3, r0
 80083f6:	461c      	mov	r4, r3
 80083f8:	230a      	movs	r3, #10
 80083fa:	9302      	str	r3, [sp, #8]
 80083fc:	2301      	movs	r3, #1
 80083fe:	9301      	str	r3, [sp, #4]
 8008400:	4b0f      	ldr	r3, [pc, #60]	; (8008440 <_ZN13SensorManager14PGV100RegisterEv+0x70>)
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 8008438 <_ZN13SensorManager14PGV100RegisterEv+0x68>
 8008408:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8008438 <_ZN13SensorManager14PGV100RegisterEv+0x68>
 800840c:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8008438 <_ZN13SensorManager14PGV100RegisterEv+0x68>
 8008410:	4b0c      	ldr	r3, [pc, #48]	; (8008444 <_ZN13SensorManager14PGV100RegisterEv+0x74>)
 8008412:	2200      	movs	r2, #0
 8008414:	2100      	movs	r1, #0
 8008416:	4620      	mov	r0, r4
 8008418:	f7fe fe12 	bl	8007040 <_ZN6PGV100C1EttP20__UART_HandleTypeDefP12GPIO_TypeDefttddd>
 800841c:	60fc      	str	r4, [r7, #12]
 800841e:	f107 030c 	add.w	r3, r7, #12
 8008422:	4619      	mov	r1, r3
 8008424:	4628      	mov	r0, r5
 8008426:	f000 fa33 	bl	8008890 <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_>
	}

}
 800842a:	bf00      	nop
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bdb0      	pop	{r4, r5, r7, pc}
 8008432:	bf00      	nop
 8008434:	f3af 8000 	nop.w
	...
 8008440:	40020400 	.word	0x40020400
 8008444:	20000608 	.word	0x20000608

08008448 <_ZN13SensorManager16PGV100InitializeEv>:


bool SensorManager::PGV100Initialize()
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
	PGV100Register();
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7ff ffbd 	bl	80083d0 <_ZN13SensorManager14PGV100RegisterEv>
	OpticalSensorInitialize();
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7ff ff82 	bl	8008360 <_ZN13SensorManager23OpticalSensorInitializeEv>
	PGV100Drive();
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f808 	bl	8008472 <_ZN13SensorManager11PGV100DriveEv>
	return PGV100IsErrUp();
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f836 	bl	80084d4 <_ZNK13SensorManager13PGV100IsErrUpEv>
 8008468:	4603      	mov	r3, r0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <_ZN13SensorManager11PGV100DriveEv>:
}



void SensorManager::PGV100Drive()
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b086      	sub	sp, #24
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
	for (auto& index : pgv100_) index->Drive();
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	330c      	adds	r3, #12
 800847e:	617b      	str	r3, [r7, #20]
 8008480:	6978      	ldr	r0, [r7, #20]
 8008482:	f000 f93e 	bl	8008702 <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8008486:	4603      	mov	r3, r0
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	6978      	ldr	r0, [r7, #20]
 800848c:	f000 f949 	bl	8008722 <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 8008490:	4603      	mov	r3, r0
 8008492:	60bb      	str	r3, [r7, #8]
 8008494:	f107 0208 	add.w	r2, r7, #8
 8008498:	f107 030c 	add.w	r3, r7, #12
 800849c:	4611      	mov	r1, r2
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f950 	bl	8008744 <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d010      	beq.n	80084cc <_ZN13SensorManager11PGV100DriveEv+0x5a>
 80084aa:	f107 030c 	add.w	r3, r7, #12
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 f970 	bl	8008794 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>
 80084b4:	6138      	str	r0, [r7, #16]
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fc fde0 	bl	8005080 <_ZN12PNFPosSensor5DriveEv>
 80084c0:	f107 030c 	add.w	r3, r7, #12
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 f955 	bl	8008774 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>
 80084ca:	e7e3      	b.n	8008494 <_ZN13SensorManager11PGV100DriveEv+0x22>
}
 80084cc:	bf00      	nop
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <_ZNK13SensorManager13PGV100IsErrUpEv>:
{
	return pgv100_.at(0)->GetErrStatus();
}

bool SensorManager::PGV100IsErrUp() const
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
	return pgv100_.at(0)->IsErrUp();
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	330c      	adds	r3, #12
 80084e0:	2100      	movs	r1, #0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fa02 	bl	80088ec <_ZNKSt6vectorIP6PGV100SaIS1_EE2atEj>
 80084e8:	4603      	mov	r3, r0
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fc fdb6 	bl	800505e <_ZN12PNFPosSensor7IsErrUpEv>
 80084f2:	4603      	mov	r3, r0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fa03 	bl	8008910 <_ZNSaIP12CommonSensorEC1Ev>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fa0b 	bl	8008928 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <_ZNSaIP12CommonSensorED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fa13 	bl	8008950 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorED1Ev>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800854c:	461a      	mov	r2, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fa09 	bl	8008966 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>
      }
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fc03 	bl	8007d62 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implD1Ev>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <_ZNSt6vectorIP12CommonSensorSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8008566:	b5b0      	push	{r4, r5, r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681c      	ldr	r4, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4618      	mov	r0, r3
 800857a:	f000 fa07 	bl	800898c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 800857e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008580:	461a      	mov	r2, r3
 8008582:	4629      	mov	r1, r5
 8008584:	4620      	mov	r0, r4
 8008586:	f000 fa0c 	bl	80089a2 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
      }
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff ffd1 	bl	8008534 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EED1Ev>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4618      	mov	r0, r3
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bdb0      	pop	{r4, r5, r7, pc}

0800859c <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fa0a 	bl	80089be <_ZNSaIP6PGV100EC1Ev>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fa12 	bl	80089d6 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4618      	mov	r0, r3
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <_ZNSaIP6PGV100ED1Ev>:
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fa1a 	bl	80089fe <_ZN9__gnu_cxx13new_allocatorIP6PGV100ED1Ev>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4618      	mov	r0, r3
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689a      	ldr	r2, [r3, #8]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80085ec:	461a      	mov	r2, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fa10 	bl	8008a14 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j>
      }
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff fbd9 	bl	8007dae <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implD1Ev>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <_ZNSt6vectorIP6PGV100SaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8008606:	b5b0      	push	{r4, r5, r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681c      	ldr	r4, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fa0e 	bl	8008a3a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 800861e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008620:	461a      	mov	r2, r3
 8008622:	4629      	mov	r1, r5
 8008624:	4620      	mov	r0, r4
 8008626:	f000 fa13 	bl	8008a50 <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>
      }
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff ffd1 	bl	80085d4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EED1Ev>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bdb0      	pop	{r4, r5, r7, pc}

0800863c <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	f107 030c 	add.w	r3, r7, #12
 800864a:	4611      	mov	r1, r2
 800864c:	4618      	mov	r0, r3
 800864e:	f000 fa0d 	bl	8008a6c <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	1d1a      	adds	r2, r3, #4
 8008668:	f107 030c 	add.w	r3, r7, #12
 800866c:	4611      	mov	r1, r2
 800866e:	4618      	mov	r0, r3
 8008670:	f000 f9fc 	bl	8008a6c <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800867e:	b590      	push	{r4, r7, lr}
 8008680:	b083      	sub	sp, #12
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f9ff 	bl	8008a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 800868e:	4603      	mov	r3, r0
 8008690:	681c      	ldr	r4, [r3, #0]
 8008692:	6838      	ldr	r0, [r7, #0]
 8008694:	f000 f9fa 	bl	8008a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008698:	4603      	mov	r3, r0
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	429c      	cmp	r4, r3
 800869e:	bf14      	ite	ne
 80086a0:	2301      	movne	r3, #1
 80086a2:	2300      	moveq	r3, #0
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	4618      	mov	r0, r3
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd90      	pop	{r4, r7, pc}

080086ae <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
	++_M_current;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	1d1a      	adds	r2, r3, #4
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	601a      	str	r2, [r3, #0]
	return *this;
 80086c0:	687b      	ldr	r3, [r7, #4]
      }
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4618      	mov	r0, r3
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f9d4 	bl	8008aa2 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_>
 80086fa:	bf00      	nop
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	f107 030c 	add.w	r3, r7, #12
 8008710:	4611      	mov	r1, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f000 f9e6 	bl	8008ae4 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008722:	b580      	push	{r7, lr}
 8008724:	b084      	sub	sp, #16
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	1d1a      	adds	r2, r3, #4
 800872e:	f107 030c 	add.w	r3, r7, #12
 8008732:	4611      	mov	r1, r2
 8008734:	4618      	mov	r0, r3
 8008736:	f000 f9d5 	bl	8008ae4 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008744:	b590      	push	{r4, r7, lr}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f9d8 	bl	8008b04 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8008754:	4603      	mov	r3, r0
 8008756:	681c      	ldr	r4, [r3, #0]
 8008758:	6838      	ldr	r0, [r7, #0]
 800875a:	f000 f9d3 	bl	8008b04 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 800875e:	4603      	mov	r3, r0
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	429c      	cmp	r4, r3
 8008764:	bf14      	ite	ne
 8008766:	2301      	movne	r3, #1
 8008768:	2300      	moveq	r3, #0
 800876a:	b2db      	uxtb	r3, r3
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	bd90      	pop	{r4, r7, pc}

08008774 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	1d1a      	adds	r2, r3, #4
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	601a      	str	r2, [r3, #0]
	return *this;
 8008786:	687b      	ldr	r3, [r7, #4]
      }
 8008788:	4618      	mov	r0, r3
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <_ZNSt6vectorIP6PGV100SaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f9ad 	bl	8008b1a <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_>
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f9c3 	bl	8008b5c <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 80087d6:	4603      	mov	r3, r0
 80087d8:	60bb      	str	r3, [r7, #8]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f9ce 	bl	8008b7c <_ZNKSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 80087e0:	4603      	mov	r3, r0
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	f107 020c 	add.w	r2, r7, #12
 80087e8:	f107 0308 	add.w	r3, r7, #8
 80087ec:	4611      	mov	r1, r2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 f9d5 	bl	8008b9e <_ZN9__gnu_cxxeqIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 80087f4:	4603      	mov	r3, r0
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 80087fe:	b5b0      	push	{r4, r5, r7, lr}
 8008800:	b082      	sub	sp, #8
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	429a      	cmp	r2, r3
 8008812:	d011      	beq.n	8008838 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008814:	687c      	ldr	r4, [r7, #4]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685d      	ldr	r5, [r3, #4]
 800881a:	6838      	ldr	r0, [r7, #0]
 800881c:	f000 f9d7 	bl	8008bce <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8008820:	4603      	mov	r3, r0
 8008822:	461a      	mov	r2, r3
 8008824:	4629      	mov	r1, r5
 8008826:	4620      	mov	r0, r4
 8008828:	f000 f9dc 	bl	8008be4 <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	1d1a      	adds	r2, r3, #4
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	605a      	str	r2, [r3, #4]
      }
 8008836:	e00c      	b.n	8008852 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7ff ff0f 	bl	800865c <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 800883e:	4604      	mov	r4, r0
 8008840:	6838      	ldr	r0, [r7, #0]
 8008842:	f000 f9c4 	bl	8008bce <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8008846:	4603      	mov	r3, r0
 8008848:	461a      	mov	r2, r3
 800884a:	4621      	mov	r1, r4
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f9f3 	bl	8008c38 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8008852:	bf00      	nop
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bdb0      	pop	{r4, r5, r7, pc}

0800885a <_ZNKSt6vectorIP6PGV100SaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 faa4 	bl	8008db0 <_ZNKSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8008868:	4603      	mov	r3, r0
 800886a:	60bb      	str	r3, [r7, #8]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 faaf 	bl	8008dd0 <_ZNKSt6vectorIP6PGV100SaIS1_EE3endEv>
 8008872:	4603      	mov	r3, r0
 8008874:	60fb      	str	r3, [r7, #12]
 8008876:	f107 020c 	add.w	r2, r7, #12
 800887a:	f107 0308 	add.w	r3, r7, #8
 800887e:	4611      	mov	r1, r2
 8008880:	4618      	mov	r0, r3
 8008882:	f000 fab6 	bl	8008df2 <_ZN9__gnu_cxxeqIPKP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8008886:	4603      	mov	r3, r0
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8008890:	b5b0      	push	{r4, r5, r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d011      	beq.n	80088ca <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80088a6:	687c      	ldr	r4, [r7, #4]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685d      	ldr	r5, [r3, #4]
 80088ac:	6838      	ldr	r0, [r7, #0]
 80088ae:	f000 fab8 	bl	8008e22 <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 80088b2:	4603      	mov	r3, r0
 80088b4:	461a      	mov	r2, r3
 80088b6:	4629      	mov	r1, r5
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 fabd 	bl	8008e38 <_ZNSt16allocator_traitsISaIP6PGV100EE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	1d1a      	adds	r2, r3, #4
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	605a      	str	r2, [r3, #4]
      }
 80088c8:	e00c      	b.n	80088e4 <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7ff ff29 	bl	8008722 <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 80088d0:	4604      	mov	r4, r0
 80088d2:	6838      	ldr	r0, [r7, #0]
 80088d4:	f000 faa5 	bl	8008e22 <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 80088d8:	4603      	mov	r3, r0
 80088da:	461a      	mov	r2, r3
 80088dc:	4621      	mov	r1, r4
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fad4 	bl	8008e8c <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bdb0      	pop	{r4, r5, r7, pc}

080088ec <_ZNKSt6vectorIP6PGV100SaIS1_EE2atEj>:
      at(size_type __n) const
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fb83 	bl	8009004 <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj>
	return (*this)[__n];
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fb9f 	bl	8009044 <_ZNKSt6vectorIP6PGV100SaIS1_EEixEj>
 8008906:	4603      	mov	r3, r0
      }
 8008908:	4618      	mov	r0, r3
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <_ZNSaIP12CommonSensorEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fba3 	bl	8009064 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorEC1Ev>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4618      	mov	r0, r3
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	605a      	str	r2, [r3, #4]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	609a      	str	r2, [r3, #8]
	{ }
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4618      	mov	r0, r3
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4618      	mov	r0, r3
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
	if (__p)
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fb7b 	bl	800907a <_ZNSt16allocator_traitsISaIP12CommonSensorEE10deallocateERS2_PS1_j>
      }
 8008984:	bf00      	nop
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4618      	mov	r0, r3
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	60b9      	str	r1, [r7, #8]
 80089ac:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80089ae:	68b9      	ldr	r1, [r7, #8]
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 fb71 	bl	8009098 <_ZSt8_DestroyIPP12CommonSensorEvT_S3_>
    }
 80089b6:	bf00      	nop
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <_ZNSaIP6PGV100EC1Ev>:
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fb73 	bl	80090b2 <_ZN9__gnu_cxx13new_allocatorIP6PGV100EC1Ev>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	605a      	str	r2, [r3, #4]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	609a      	str	r2, [r3, #8]
	{ }
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <_ZN9__gnu_cxx13new_allocatorIP6PGV100ED1Ev>:
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
	if (__p)
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d005      	beq.n	8008a32 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	68b9      	ldr	r1, [r7, #8]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 fb4b 	bl	80090c8 <_ZNSt16allocator_traitsISaIP6PGV100EE10deallocateERS2_PS1_j>
      }
 8008a32:	bf00      	nop
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8008a5c:	68b9      	ldr	r1, [r7, #8]
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f000 fb41 	bl	80090e6 <_ZSt8_DestroyIPP6PGV100EvT_S3_>
    }
 8008a64:	bf00      	nop
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4618      	mov	r0, r3
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4618      	mov	r0, r3
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8008aa2:	b590      	push	{r4, r7, lr}
 8008aa4:	b085      	sub	sp, #20
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685a      	ldr	r2, [r3, #4]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	109b      	asrs	r3, r3, #2
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00e      	beq.n	8008adc <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7ff ff61 	bl	800898c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8008aca:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8008acc:	461a      	mov	r2, r3
 8008ace:	4621      	mov	r1, r4
 8008ad0:	6838      	ldr	r0, [r7, #0]
 8008ad2:	f7ff ff66 	bl	80089a2 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	605a      	str	r2, [r3, #4]
      }
 8008adc:	bf00      	nop
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd90      	pop	{r4, r7, pc}

08008ae4 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	601a      	str	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8008b1a:	b590      	push	{r4, r7, lr}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	109b      	asrs	r3, r3, #2
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00e      	beq.n	8008b54 <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff ff7c 	bl	8008a3a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8008b42:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8008b44:	461a      	mov	r2, r3
 8008b46:	4621      	mov	r1, r4
 8008b48:	6838      	ldr	r0, [r7, #0]
 8008b4a:	f7ff ff81 	bl	8008a50 <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	605a      	str	r2, [r3, #4]
      }
 8008b54:	bf00      	nop
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd90      	pop	{r4, r7, pc}

08008b5c <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	f107 030c 	add.w	r3, r7, #12
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 fac7 	bl	8009100 <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <_ZNKSt6vectorIP12CommonSensorSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	1d1a      	adds	r2, r3, #4
 8008b88:	f107 030c 	add.w	r3, r7, #12
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 fab6 	bl	8009100 <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <_ZN9__gnu_cxxeqIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008b9e:	b590      	push	{r4, r7, lr}
 8008ba0:	b083      	sub	sp, #12
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fab9 	bl	8009120 <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	681c      	ldr	r4, [r3, #0]
 8008bb2:	6838      	ldr	r0, [r7, #0]
 8008bb4:	f000 fab4 	bl	8009120 <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	429c      	cmp	r4, r3
 8008bbe:	bf0c      	ite	eq
 8008bc0:	2301      	moveq	r3, #1
 8008bc2:	2300      	movne	r3, #0
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd90      	pop	{r4, r7, pc}

08008bce <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7ff ffec 	bl	8008bce <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	68b9      	ldr	r1, [r7, #8]
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fa9a 	bl	8009136 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8008c02:	bf00      	nop
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b082      	sub	sp, #8
 8008c0e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8008c10:	4618      	mov	r0, r3
 8008c12:	f000 f805 	bl	8008c20 <_ZNSt6vectorIP12CommonSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8008c16:	4603      	mov	r3, r0
      }
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <_ZNSt6vectorIP12CommonSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8008c28:	2301      	movs	r3, #1
      }
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
	...

08008c38 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8008c38:	b5b0      	push	{r4, r5, r7, lr}
 8008c3a:	b08c      	sub	sp, #48	; 0x30
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8008c44:	4a59      	ldr	r2, [pc, #356]	; (8008dac <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8008c46:	2101      	movs	r1, #1
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 fa8a 	bl	8009162 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc>
 8008c4e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f7ff fced 	bl	800863c <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 8008c62:	4603      	mov	r3, r0
 8008c64:	617b      	str	r3, [r7, #20]
 8008c66:	f107 0214 	add.w	r2, r7, #20
 8008c6a:	f107 0308 	add.w	r3, r7, #8
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fabd 	bl	80091f0 <_ZN9__gnu_cxxmiIPP12CommonSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8008c76:	4603      	mov	r3, r0
 8008c78:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 facb 	bl	800921a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj>
 8008c84:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8008c8a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	18d5      	adds	r5, r2, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff ff9a 	bl	8008bce <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f7ff ff9f 	bl	8008be4 <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8008caa:	f7ff ffae 	bl	8008c0a <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d027      	beq.n	8008d04 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008cb4:	f107 0308 	add.w	r3, r7, #8
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7ff fee7 	bl	8008a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7ff fe61 	bl	800898c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8008cca:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	4621      	mov	r1, r4
 8008cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cd2:	f000 fab6 	bl	8009242 <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8008cd6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8008cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cda:	3304      	adds	r3, #4
 8008cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008cde:	f107 0308 	add.w	r3, r7, #8
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7ff fed2 	bl	8008a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7ff fe4c 	bl	800898c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8008cf4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cf8:	6a39      	ldr	r1, [r7, #32]
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 faa1 	bl	8009242 <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8008d00:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008d02:	e026      	b.n	8008d52 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8008d04:	f107 0308 	add.w	r3, r7, #8
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7ff febf 	bl	8008a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff fe39 	bl	800898c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8008d1a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8008d1c:	69ba      	ldr	r2, [r7, #24]
 8008d1e:	4621      	mov	r1, r4
 8008d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d22:	f000 faa2 	bl	800926a <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8008d26:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	3304      	adds	r3, #4
 8008d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8008d2e:	f107 0308 	add.w	r3, r7, #8
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff feaa 	bl	8008a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff fe24 	bl	800898c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8008d44:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8008d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d48:	6a39      	ldr	r1, [r7, #32]
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f000 fa8d 	bl	800926a <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8008d50:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8008d52:	f7ff ff5a 	bl	8008c0a <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>
 8008d56:	4603      	mov	r3, r0
 8008d58:	f083 0301 	eor.w	r3, r3, #1
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d009      	beq.n	8008d76 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7ff fe11 	bl	800898c <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	6a39      	ldr	r1, [r7, #32]
 8008d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d72:	f7ff fe16 	bl	80089a2 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8008d76:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	689a      	ldr	r2, [r3, #8]
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8008d82:	461a      	mov	r2, r3
 8008d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d86:	f7ff fdee 	bl	8008966 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d94:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	441a      	add	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	609a      	str	r2, [r3, #8]
    }
 8008da2:	bf00      	nop
 8008da4:	3730      	adds	r7, #48	; 0x30
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bdb0      	pop	{r4, r5, r7, pc}
 8008daa:	bf00      	nop
 8008dac:	080250fc 	.word	0x080250fc

08008db0 <_ZNKSt6vectorIP6PGV100SaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	f107 030c 	add.w	r3, r7, #12
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 fa6b 	bl	800929c <_ZN9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS4_>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <_ZNKSt6vectorIP6PGV100SaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	1d1a      	adds	r2, r3, #4
 8008ddc:	f107 030c 	add.w	r3, r7, #12
 8008de0:	4611      	mov	r1, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 fa5a 	bl	800929c <_ZN9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS4_>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4618      	mov	r0, r3
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <_ZN9__gnu_cxxeqIPKP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008df2:	b590      	push	{r4, r7, lr}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fa5d 	bl	80092bc <_ZNK9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8008e02:	4603      	mov	r3, r0
 8008e04:	681c      	ldr	r4, [r3, #0]
 8008e06:	6838      	ldr	r0, [r7, #0]
 8008e08:	f000 fa58 	bl	80092bc <_ZNK9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	429c      	cmp	r4, r3
 8008e12:	bf0c      	ite	eq
 8008e14:	2301      	moveq	r3, #1
 8008e16:	2300      	movne	r3, #0
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd90      	pop	{r4, r7, pc}

08008e22 <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008e22:	b480      	push	{r7}
 8008e24:	b083      	sub	sp, #12
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <_ZNSt16allocator_traitsISaIP6PGV100EE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff ffec 	bl	8008e22 <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	68b9      	ldr	r1, [r7, #8]
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 fa3e 	bl	80092d2 <_ZN9__gnu_cxx13new_allocatorIP6PGV100E9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8008e56:	bf00      	nop
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <_ZNSt6vectorIP6PGV100SaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 f805 	bl	8008e74 <_ZNSt6vectorIP6PGV100SaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8008e6a:	4603      	mov	r3, r0
      }
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <_ZNSt6vectorIP6PGV100SaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8008e7c:	2301      	movs	r3, #1
      }
 8008e7e:	4618      	mov	r0, r3
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
	...

08008e8c <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8008e8c:	b5b0      	push	{r4, r5, r7, lr}
 8008e8e:	b08c      	sub	sp, #48	; 0x30
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8008e98:	4a59      	ldr	r2, [pc, #356]	; (8009000 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f000 fa2e 	bl	80092fe <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc>
 8008ea2:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f7ff fc26 	bl	8008702 <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	617b      	str	r3, [r7, #20]
 8008eba:	f107 0214 	add.w	r2, r7, #20
 8008ebe:	f107 0308 	add.w	r3, r7, #8
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 fa61 	bl	800938c <_ZN9__gnu_cxxmiIPP6PGV100St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 fa6f 	bl	80093b6 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj>
 8008ed8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8008ede:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	18d5      	adds	r5, r2, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff ff9a 	bl	8008e22 <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f7ff ff9f 	bl	8008e38 <_ZNSt16allocator_traitsISaIP6PGV100EE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8008efa:	2300      	movs	r3, #0
 8008efc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8008efe:	f7ff ffae 	bl	8008e5e <_ZNSt6vectorIP6PGV100SaIS1_EE15_S_use_relocateEv>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d027      	beq.n	8008f58 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008f08:	f107 0308 	add.w	r3, r7, #8
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7ff fdf9 	bl	8008b04 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8008f12:	4603      	mov	r3, r0
 8008f14:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7ff fd8e 	bl	8008a3a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8008f1e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	4621      	mov	r1, r4
 8008f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f26:	f000 fa5a 	bl	80093de <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8008f2a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	3304      	adds	r3, #4
 8008f30:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008f32:	f107 0308 	add.w	r3, r7, #8
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff fde4 	bl	8008b04 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff fd79 	bl	8008a3a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8008f48:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f4c:	6a39      	ldr	r1, [r7, #32]
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f000 fa45 	bl	80093de <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8008f54:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008f56:	e026      	b.n	8008fa6 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8008f58:	f107 0308 	add.w	r3, r7, #8
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff fdd1 	bl	8008b04 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8008f62:	4603      	mov	r3, r0
 8008f64:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7ff fd66 	bl	8008a3a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8008f6e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	4621      	mov	r1, r4
 8008f74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f76:	f000 fa46 	bl	8009406 <_ZSt34__uninitialized_move_if_noexcept_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>
 8008f7a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	3304      	adds	r3, #4
 8008f80:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8008f82:	f107 0308 	add.w	r3, r7, #8
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7ff fdbc 	bl	8008b04 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7ff fd51 	bl	8008a3a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8008f98:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8008f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f9c:	6a39      	ldr	r1, [r7, #32]
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f000 fa31 	bl	8009406 <_ZSt34__uninitialized_move_if_noexcept_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>
 8008fa4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8008fa6:	f7ff ff5a 	bl	8008e5e <_ZNSt6vectorIP6PGV100SaIS1_EE15_S_use_relocateEv>
 8008faa:	4603      	mov	r3, r0
 8008fac:	f083 0301 	eor.w	r3, r3, #1
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d009      	beq.n	8008fca <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7ff fd3e 	bl	8008a3a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	6a39      	ldr	r1, [r7, #32]
 8008fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fc6:	f7ff fd43 	bl	8008a50 <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8008fca:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fda:	f7ff fd1b 	bl	8008a14 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	69ba      	ldr	r2, [r7, #24]
 8008fe2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fe8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	441a      	add	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	609a      	str	r2, [r3, #8]
    }
 8008ff6:	bf00      	nop
 8008ff8:	3730      	adds	r7, #48	; 0x30
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8008ffe:	bf00      	nop
 8009000:	080250fc 	.word	0x080250fc

08009004 <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fa12 	bl	8009438 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8009014:	4602      	mov	r2, r0
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	4293      	cmp	r3, r2
 800901a:	bf2c      	ite	cs
 800901c:	2301      	movcs	r3, #1
 800901e:	2300      	movcc	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d008      	beq.n	8009038 <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fa06 	bl	8009438 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 800902c:	4603      	mov	r3, r0
 800902e:	461a      	mov	r2, r3
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	4803      	ldr	r0, [pc, #12]	; (8009040 <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj+0x3c>)
 8009034:	f019 fc5c 	bl	80228f0 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8009038:	bf00      	nop
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	08025118 	.word	0x08025118

08009044 <_ZNKSt6vectorIP6PGV100SaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
      }
 8009058:	4618      	mov	r0, r3
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4618      	mov	r0, r3
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <_ZNSt16allocator_traitsISaIP12CommonSensorEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	68b9      	ldr	r1, [r7, #8]
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 f9e4 	bl	8009458 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE10deallocateEPS2_j>
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <_ZSt8_DestroyIPP12CommonSensorEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80090a2:	6839      	ldr	r1, [r7, #0]
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f9e7 	bl	8009478 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12CommonSensorEEvT_S5_>
    }
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <_ZN9__gnu_cxx13new_allocatorIP6PGV100EC1Ev>:
 80090b2:	b480      	push	{r7}
 80090b4:	b083      	sub	sp, #12
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <_ZNSt16allocator_traitsISaIP6PGV100EE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	68b9      	ldr	r1, [r7, #8]
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 f9d8 	bl	800948e <_ZN9__gnu_cxx13new_allocatorIP6PGV100E10deallocateEPS2_j>
 80090de:	bf00      	nop
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <_ZSt8_DestroyIPP6PGV100EvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f9db 	bl	80094ae <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6PGV100EEvT_S5_>
    }
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4618      	mov	r0, r3
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4618      	mov	r0, r3
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009136:	b590      	push	{r4, r7, lr}
 8009138:	b085      	sub	sp, #20
 800913a:	af00      	add	r7, sp, #0
 800913c:	60f8      	str	r0, [r7, #12]
 800913e:	60b9      	str	r1, [r7, #8]
 8009140:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7ff fd43 	bl	8008bce <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8009148:	4603      	mov	r3, r0
 800914a:	681c      	ldr	r4, [r3, #0]
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	4619      	mov	r1, r3
 8009150:	2004      	movs	r0, #4
 8009152:	f7f8 fe80 	bl	8001e56 <_ZnwjPv>
 8009156:	4603      	mov	r3, r0
 8009158:	601c      	str	r4, [r3, #0]
 800915a:	bf00      	nop
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	bd90      	pop	{r4, r7, pc}

08009162 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009162:	b590      	push	{r4, r7, lr}
 8009164:	b087      	sub	sp, #28
 8009166:	af00      	add	r7, sp, #0
 8009168:	60f8      	str	r0, [r7, #12]
 800916a:	60b9      	str	r1, [r7, #8]
 800916c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f000 f9a8 	bl	80094c4 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 8009174:	4604      	mov	r4, r0
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 f9b5 	bl	80094e6 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 800917c:	4603      	mov	r3, r0
 800917e:	1ae2      	subs	r2, r4, r3
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	429a      	cmp	r2, r3
 8009184:	bf34      	ite	cc
 8009186:	2301      	movcc	r3, #1
 8009188:	2300      	movcs	r3, #0
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f019 fbaa 	bl	80228ea <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 f9a5 	bl	80094e6 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 800919c:	4604      	mov	r4, r0
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 f9a1 	bl	80094e6 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 80091a4:	4603      	mov	r3, r0
 80091a6:	613b      	str	r3, [r7, #16]
 80091a8:	f107 0208 	add.w	r2, r7, #8
 80091ac:	f107 0310 	add.w	r3, r7, #16
 80091b0:	4611      	mov	r1, r2
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fa fcf9 	bl	8003baa <_ZSt3maxIjERKT_S2_S2_>
 80091b8:	4603      	mov	r3, r0
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4423      	add	r3, r4
 80091be:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f000 f990 	bl	80094e6 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 80091c6:	4602      	mov	r2, r0
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d306      	bcc.n	80091dc <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 f978 	bl	80094c4 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 80091d4:	4602      	mov	r2, r0
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	4293      	cmp	r3, r2
 80091da:	d904      	bls.n	80091e6 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x84>
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 f971 	bl	80094c4 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 80091e2:	4603      	mov	r3, r0
 80091e4:	e000      	b.n	80091e8 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x86>
 80091e6:	697b      	ldr	r3, [r7, #20]
      }
 80091e8:	4618      	mov	r0, r3
 80091ea:	371c      	adds	r7, #28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd90      	pop	{r4, r7, pc}

080091f0 <_ZN9__gnu_cxxmiIPP12CommonSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80091f0:	b590      	push	{r4, r7, lr}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff fc46 	bl	8008a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8009200:	4603      	mov	r3, r0
 8009202:	681c      	ldr	r4, [r3, #0]
 8009204:	6838      	ldr	r0, [r7, #0]
 8009206:	f7ff fc41 	bl	8008a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 800920a:	4603      	mov	r3, r0
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	1ae3      	subs	r3, r4, r3
 8009210:	109b      	asrs	r3, r3, #2
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	bd90      	pop	{r4, r7, pc}

0800921a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800921a:	b580      	push	{r7, lr}
 800921c:	b082      	sub	sp, #8
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d006      	beq.n	8009238 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj+0x1e>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6839      	ldr	r1, [r7, #0]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 f969 	bl	8009506 <_ZNSt16allocator_traitsISaIP12CommonSensorEE8allocateERS2_j>
 8009234:	4603      	mov	r3, r0
 8009236:	e000      	b.n	800923a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj+0x20>
 8009238:	2300      	movs	r3, #0
      }
 800923a:	4618      	mov	r0, r3
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8009242:	b590      	push	{r4, r7, lr}
 8009244:	b087      	sub	sp, #28
 8009246:	af02      	add	r7, sp, #8
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	60b9      	str	r1, [r7, #8]
 800924c:	607a      	str	r2, [r7, #4]
 800924e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8009250:	f88d 4000 	strb.w	r4, [sp]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	68b9      	ldr	r1, [r7, #8]
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 f962 	bl	8009524 <_ZNSt6vectorIP12CommonSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8009260:	4603      	mov	r3, r0
      }
 8009262:	4618      	mov	r0, r3
 8009264:	3714      	adds	r7, #20
 8009266:	46bd      	mov	sp, r7
 8009268:	bd90      	pop	{r4, r7, pc}

0800926a <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800926a:	b590      	push	{r4, r7, lr}
 800926c:	b085      	sub	sp, #20
 800926e:	af00      	add	r7, sp, #0
 8009270:	60f8      	str	r0, [r7, #12]
 8009272:	60b9      	str	r1, [r7, #8]
 8009274:	607a      	str	r2, [r7, #4]
 8009276:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 f965 	bl	8009548 <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>
 800927e:	4604      	mov	r4, r0
 8009280:	68b8      	ldr	r0, [r7, #8]
 8009282:	f000 f961 	bl	8009548 <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>
 8009286:	4601      	mov	r1, r0
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	4620      	mov	r0, r4
 800928e:	f000 f96a 	bl	8009566 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12CommonSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8009292:	4603      	mov	r3, r0
    }
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	bd90      	pop	{r4, r7, pc}

0800929c <_ZN9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4618      	mov	r0, r3
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <_ZNK9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <_ZN9__gnu_cxx13new_allocatorIP6PGV100E9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80092d2:	b590      	push	{r4, r7, lr}
 80092d4:	b085      	sub	sp, #20
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f7ff fd9f 	bl	8008e22 <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 80092e4:	4603      	mov	r3, r0
 80092e6:	681c      	ldr	r4, [r3, #0]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	4619      	mov	r1, r3
 80092ec:	2004      	movs	r0, #4
 80092ee:	f7f8 fdb2 	bl	8001e56 <_ZnwjPv>
 80092f2:	4603      	mov	r3, r0
 80092f4:	601c      	str	r4, [r3, #0]
 80092f6:	bf00      	nop
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd90      	pop	{r4, r7, pc}

080092fe <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80092fe:	b590      	push	{r4, r7, lr}
 8009300:	b087      	sub	sp, #28
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 f93c 	bl	8009588 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>
 8009310:	4604      	mov	r4, r0
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f000 f890 	bl	8009438 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8009318:	4603      	mov	r3, r0
 800931a:	1ae2      	subs	r2, r4, r3
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	429a      	cmp	r2, r3
 8009320:	bf34      	ite	cc
 8009322:	2301      	movcc	r3, #1
 8009324:	2300      	movcs	r3, #0
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f019 fadc 	bl	80228ea <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f000 f880 	bl	8009438 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8009338:	4604      	mov	r4, r0
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f000 f87c 	bl	8009438 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8009340:	4603      	mov	r3, r0
 8009342:	613b      	str	r3, [r7, #16]
 8009344:	f107 0208 	add.w	r2, r7, #8
 8009348:	f107 0310 	add.w	r3, r7, #16
 800934c:	4611      	mov	r1, r2
 800934e:	4618      	mov	r0, r3
 8009350:	f7fa fc2b 	bl	8003baa <_ZSt3maxIjERKT_S2_S2_>
 8009354:	4603      	mov	r3, r0
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4423      	add	r3, r4
 800935a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 f86b 	bl	8009438 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8009362:	4602      	mov	r2, r0
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	4293      	cmp	r3, r2
 8009368:	d306      	bcc.n	8009378 <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x7a>
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f000 f90c 	bl	8009588 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>
 8009370:	4602      	mov	r2, r0
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	4293      	cmp	r3, r2
 8009376:	d904      	bls.n	8009382 <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x84>
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 f905 	bl	8009588 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>
 800937e:	4603      	mov	r3, r0
 8009380:	e000      	b.n	8009384 <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x86>
 8009382:	697b      	ldr	r3, [r7, #20]
      }
 8009384:	4618      	mov	r0, r3
 8009386:	371c      	adds	r7, #28
 8009388:	46bd      	mov	sp, r7
 800938a:	bd90      	pop	{r4, r7, pc}

0800938c <_ZN9__gnu_cxxmiIPP6PGV100St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800938c:	b590      	push	{r4, r7, lr}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7ff fbb4 	bl	8008b04 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 800939c:	4603      	mov	r3, r0
 800939e:	681c      	ldr	r4, [r3, #0]
 80093a0:	6838      	ldr	r0, [r7, #0]
 80093a2:	f7ff fbaf 	bl	8008b04 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 80093a6:	4603      	mov	r3, r0
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	1ae3      	subs	r3, r4, r3
 80093ac:	109b      	asrs	r3, r3, #2
 80093ae:	4618      	mov	r0, r3
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd90      	pop	{r4, r7, pc}

080093b6 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b082      	sub	sp, #8
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d006      	beq.n	80093d4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj+0x1e>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 f8ed 	bl	80095aa <_ZNSt16allocator_traitsISaIP6PGV100EE8allocateERS2_j>
 80093d0:	4603      	mov	r3, r0
 80093d2:	e000      	b.n	80093d6 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj+0x20>
 80093d4:	2300      	movs	r3, #0
      }
 80093d6:	4618      	mov	r0, r3
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80093de:	b590      	push	{r4, r7, lr}
 80093e0:	b087      	sub	sp, #28
 80093e2:	af02      	add	r7, sp, #8
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	60b9      	str	r1, [r7, #8]
 80093e8:	607a      	str	r2, [r7, #4]
 80093ea:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80093ec:	f88d 4000 	strb.w	r4, [sp]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	68b9      	ldr	r1, [r7, #8]
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f000 f8e6 	bl	80095c8 <_ZNSt6vectorIP6PGV100SaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80093fc:	4603      	mov	r3, r0
      }
 80093fe:	4618      	mov	r0, r3
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	bd90      	pop	{r4, r7, pc}

08009406 <_ZSt34__uninitialized_move_if_noexcept_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8009406:	b590      	push	{r4, r7, lr}
 8009408:	b085      	sub	sp, #20
 800940a:	af00      	add	r7, sp, #0
 800940c:	60f8      	str	r0, [r7, #12]
 800940e:	60b9      	str	r1, [r7, #8]
 8009410:	607a      	str	r2, [r7, #4]
 8009412:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f000 f8e9 	bl	80095ec <_ZSt32__make_move_if_noexcept_iteratorIP6PGV100St13move_iteratorIPS1_EET0_PT_>
 800941a:	4604      	mov	r4, r0
 800941c:	68b8      	ldr	r0, [r7, #8]
 800941e:	f000 f8e5 	bl	80095ec <_ZSt32__make_move_if_noexcept_iteratorIP6PGV100St13move_iteratorIPS1_EET0_PT_>
 8009422:	4601      	mov	r1, r0
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	4620      	mov	r0, r4
 800942a:	f000 f8ee 	bl	800960a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6PGV100ES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800942e:	4603      	mov	r3, r0
    }
 8009430:	4618      	mov	r0, r3
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	bd90      	pop	{r4, r7, pc}

08009438 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	109b      	asrs	r3, r3, #2
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4619      	mov	r1, r3
 800946a:	68b8      	ldr	r0, [r7, #8]
 800946c:	f019 fa12 	bl	8022894 <_ZdlPvj>
      }
 8009470:	bf00      	nop
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12CommonSensorEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
 8009482:	bf00      	nop
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <_ZN9__gnu_cxx13new_allocatorIP6PGV100E10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4619      	mov	r1, r3
 80094a0:	68b8      	ldr	r0, [r7, #8]
 80094a2:	f019 f9f7 	bl	8022894 <_ZdlPvj>
      }
 80094a6:	bf00      	nop
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6PGV100EEvT_S5_>:
 80094ae:	b480      	push	{r7}
 80094b0:	b083      	sub	sp, #12
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	6039      	str	r1, [r7, #0]
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 f8c6 	bl	8009660 <_ZNKSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80094d4:	4603      	mov	r3, r0
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 f8a8 	bl	800962c <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_max_sizeERKS2_>
 80094dc:	4603      	mov	r3, r0
 80094de:	4618      	mov	r0, r3
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	109b      	asrs	r3, r3, #2
 80094fa:	4618      	mov	r0, r3
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <_ZNSt16allocator_traitsISaIP12CommonSensorEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009510:	2200      	movs	r2, #0
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f8ae 	bl	8009676 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv>
 800951a:	4603      	mov	r3, r0
 800951c:	4618      	mov	r0, r3
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <_ZNSt6vectorIP12CommonSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
 8009530:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	68b9      	ldr	r1, [r7, #8]
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 f8ba 	bl	80096b2 <_ZSt12__relocate_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 800953e:	4603      	mov	r3, r0
      }
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8009550:	f107 030c 	add.w	r3, r7, #12
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	4618      	mov	r0, r3
 8009558:	f000 f8c8 	bl	80096ec <_ZNSt13move_iteratorIPP12CommonSensorEC1ES2_>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12CommonSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	60b9      	str	r1, [r7, #8]
 8009570:	607a      	str	r2, [r7, #4]
 8009572:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 f8c9 	bl	8009710 <_ZSt18uninitialized_copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>
 800957e:	4603      	mov	r3, r0
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4618      	mov	r0, r3
 8009594:	f000 f8e8 	bl	8009768 <_ZNKSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8009598:	4603      	mov	r3, r0
 800959a:	4618      	mov	r0, r3
 800959c:	f000 f8ca 	bl	8009734 <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_max_sizeERKS2_>
 80095a0:	4603      	mov	r3, r0
 80095a2:	4618      	mov	r0, r3
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <_ZNSt16allocator_traitsISaIP6PGV100EE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80095b4:	2200      	movs	r2, #0
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f8e0 	bl	800977e <_ZN9__gnu_cxx13new_allocatorIP6PGV100E8allocateEjPKv>
 80095be:	4603      	mov	r3, r0
 80095c0:	4618      	mov	r0, r3
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <_ZNSt6vectorIP6PGV100SaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	68b9      	ldr	r1, [r7, #8]
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 f8ec 	bl	80097ba <_ZSt12__relocate_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>
 80095e2:	4603      	mov	r3, r0
      }
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <_ZSt32__make_move_if_noexcept_iteratorIP6PGV100St13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80095f4:	f107 030c 	add.w	r3, r7, #12
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 f8fa 	bl	80097f4 <_ZNSt13move_iteratorIPP6PGV100EC1ES2_>
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6PGV100ES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	60f8      	str	r0, [r7, #12]
 8009612:	60b9      	str	r1, [r7, #8]
 8009614:	607a      	str	r2, [r7, #4]
 8009616:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	68b9      	ldr	r1, [r7, #8]
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 f8fb 	bl	8009818 <_ZSt18uninitialized_copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>
 8009622:	4603      	mov	r3, r0
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8009634:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009638:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f8fe 	bl	800983c <_ZNSt16allocator_traitsISaIP12CommonSensorEE8max_sizeERKS2_>
 8009640:	4603      	mov	r3, r0
 8009642:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8009644:	f107 0208 	add.w	r2, r7, #8
 8009648:	f107 030c 	add.w	r3, r7, #12
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f7fa fd68 	bl	8004124 <_ZSt3minIjERKT_S2_S2_>
 8009654:	4603      	mov	r3, r0
 8009656:	681b      	ldr	r3, [r3, #0]
      }
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <_ZNKSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4618      	mov	r0, r3
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	60f8      	str	r0, [r7, #12]
 800967e:	60b9      	str	r1, [r7, #8]
 8009680:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 f8e6 	bl	8009854 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>
 8009688:	4602      	mov	r2, r0
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	4293      	cmp	r3, r2
 800968e:	bf8c      	ite	hi
 8009690:	2301      	movhi	r3, #1
 8009692:	2300      	movls	r3, #0
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800969a:	f019 f920 	bl	80228de <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f019 f907 	bl	80228b6 <_Znwj>
 80096a8:	4603      	mov	r3, r0
      }
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <_ZSt12__relocate_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80096b2:	b5b0      	push	{r4, r5, r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	607a      	str	r2, [r7, #4]
 80096be:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f000 f8d3 	bl	800986c <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 80096c6:	4604      	mov	r4, r0
 80096c8:	68b8      	ldr	r0, [r7, #8]
 80096ca:	f000 f8cf 	bl	800986c <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 80096ce:	4605      	mov	r5, r0
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f8cb 	bl	800986c <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 80096d6:	4602      	mov	r2, r0
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	4629      	mov	r1, r5
 80096dc:	4620      	mov	r0, r4
 80096de:	f000 f8d0 	bl	8009882 <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80096e2:	4603      	mov	r3, r0
    }
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bdb0      	pop	{r4, r5, r7, pc}

080096ec <_ZNSt13move_iteratorIPP12CommonSensorEC1ES2_>:
      move_iterator(iterator_type __i)
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80096f6:	463b      	mov	r3, r7
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 f8e0 	bl	80098be <_ZSt4moveIRPP12CommonSensorEONSt16remove_referenceIT_E4typeEOS5_>
 80096fe:	4603      	mov	r3, r0
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4618      	mov	r0, r3
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <_ZSt18uninitialized_copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800971c:	2301      	movs	r3, #1
 800971e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	68b9      	ldr	r1, [r7, #8]
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f000 f8d5 	bl	80098d4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12CommonSensorES5_EET0_T_S8_S7_>
 800972a:	4603      	mov	r3, r0
    }
 800972c:	4618      	mov	r0, r3
 800972e:	3718      	adds	r7, #24
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800973c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009740:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f8d6 	bl	80098f4 <_ZNSt16allocator_traitsISaIP6PGV100EE8max_sizeERKS2_>
 8009748:	4603      	mov	r3, r0
 800974a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800974c:	f107 0208 	add.w	r2, r7, #8
 8009750:	f107 030c 	add.w	r3, r7, #12
 8009754:	4611      	mov	r1, r2
 8009756:	4618      	mov	r0, r3
 8009758:	f7fa fce4 	bl	8004124 <_ZSt3minIjERKT_S2_S2_>
 800975c:	4603      	mov	r3, r0
 800975e:	681b      	ldr	r3, [r3, #0]
      }
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <_ZNKSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <_ZN9__gnu_cxx13new_allocatorIP6PGV100E8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800977e:	b580      	push	{r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	60f8      	str	r0, [r7, #12]
 8009786:	60b9      	str	r1, [r7, #8]
 8009788:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 f8be 	bl	800990c <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E11_M_max_sizeEv>
 8009790:	4602      	mov	r2, r0
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	4293      	cmp	r3, r2
 8009796:	bf8c      	ite	hi
 8009798:	2301      	movhi	r3, #1
 800979a:	2300      	movls	r3, #0
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <_ZN9__gnu_cxx13new_allocatorIP6PGV100E8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80097a2:	f019 f89c 	bl	80228de <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4618      	mov	r0, r3
 80097ac:	f019 f883 	bl	80228b6 <_Znwj>
 80097b0:	4603      	mov	r3, r0
      }
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <_ZSt12__relocate_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80097ba:	b5b0      	push	{r4, r5, r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	607a      	str	r2, [r7, #4]
 80097c6:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 f8ab 	bl	8009924 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 80097ce:	4604      	mov	r4, r0
 80097d0:	68b8      	ldr	r0, [r7, #8]
 80097d2:	f000 f8a7 	bl	8009924 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 80097d6:	4605      	mov	r5, r0
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f8a3 	bl	8009924 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 80097de:	4602      	mov	r2, r0
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	4629      	mov	r1, r5
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 f8a8 	bl	800993a <_ZSt14__relocate_a_1IP6PGV100S1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80097ea:	4603      	mov	r3, r0
    }
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bdb0      	pop	{r4, r5, r7, pc}

080097f4 <_ZNSt13move_iteratorIPP6PGV100EC1ES2_>:
      move_iterator(iterator_type __i)
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80097fe:	463b      	mov	r3, r7
 8009800:	4618      	mov	r0, r3
 8009802:	f000 f8b8 	bl	8009976 <_ZSt4moveIRPP6PGV100EONSt16remove_referenceIT_E4typeEOS5_>
 8009806:	4603      	mov	r3, r0
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <_ZSt18uninitialized_copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8009824:	2301      	movs	r3, #1
 8009826:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	68b9      	ldr	r1, [r7, #8]
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 f8ad 	bl	800998c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6PGV100ES5_EET0_T_S8_S7_>
 8009832:	4603      	mov	r3, r0
    }
 8009834:	4618      	mov	r0, r3
 8009836:	3718      	adds	r7, #24
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <_ZNSt16allocator_traitsISaIP12CommonSensorEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f8b1 	bl	80099ac <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE8max_sizeEv>
 800984a:	4603      	mov	r3, r0
      }
 800984c:	4618      	mov	r0, r3
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800985c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8009860:	4618      	mov	r0, r3
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <_ZSt12__niter_baseIPP12CommonSensorET_S3_>:
    __niter_base(_Iterator __it)
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4618      	mov	r0, r3
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009882:	b580      	push	{r7, lr}
 8009884:	b086      	sub	sp, #24
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	60b9      	str	r1, [r7, #8]
 800988c:	607a      	str	r2, [r7, #4]
 800988e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	109b      	asrs	r3, r3, #2
 8009898:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	dd06      	ble.n	80098ae <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	461a      	mov	r2, r3
 80098a6:	68f9      	ldr	r1, [r7, #12]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f01a f967 	bl	8023b7c <memmove>
      return __result + __count;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	4413      	add	r3, r2
    }
 80098b6:	4618      	mov	r0, r3
 80098b8:	3718      	adds	r7, #24
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <_ZSt4moveIRPP12CommonSensorEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12CommonSensorES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	68b9      	ldr	r1, [r7, #8]
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 f86d 	bl	80099c4 <_ZSt4copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>
 80098ea:	4603      	mov	r3, r0
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <_ZNSt16allocator_traitsISaIP6PGV100EE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f879 	bl	80099f4 <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E8max_sizeEv>
 8009902:	4603      	mov	r3, r0
      }
 8009904:	4618      	mov	r0, r3
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009914:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8009918:	4618      	mov	r0, r3
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <_ZSt12__niter_baseIPP6PGV100ET_S3_>:
    __niter_base(_Iterator __it)
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4618      	mov	r0, r3
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <_ZSt14__relocate_a_1IP6PGV100S1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800993a:	b580      	push	{r7, lr}
 800993c:	b086      	sub	sp, #24
 800993e:	af00      	add	r7, sp, #0
 8009940:	60f8      	str	r0, [r7, #12]
 8009942:	60b9      	str	r1, [r7, #8]
 8009944:	607a      	str	r2, [r7, #4]
 8009946:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	109b      	asrs	r3, r3, #2
 8009950:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2b00      	cmp	r3, #0
 8009956:	dd06      	ble.n	8009966 <_ZSt14__relocate_a_1IP6PGV100S1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	461a      	mov	r2, r3
 800995e:	68f9      	ldr	r1, [r7, #12]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f01a f90b 	bl	8023b7c <memmove>
      return __result + __count;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	4413      	add	r3, r2
    }
 800996e:	4618      	mov	r0, r3
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <_ZSt4moveIRPP6PGV100EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009976:	b480      	push	{r7}
 8009978:	b083      	sub	sp, #12
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4618      	mov	r0, r3
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6PGV100ES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	68b9      	ldr	r1, [r7, #8]
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 f835 	bl	8009a0c <_ZSt4copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>
 80099a2:	4603      	mov	r3, r0
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7ff ff4d 	bl	8009854 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>
 80099ba:	4603      	mov	r3, r0
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <_ZSt4copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 80099c4:	b590      	push	{r4, r7, lr}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 f833 	bl	8009a3c <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80099d6:	4604      	mov	r4, r0
 80099d8:	68b8      	ldr	r0, [r7, #8]
 80099da:	f000 f82f 	bl	8009a3c <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80099de:	4603      	mov	r3, r0
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	4619      	mov	r1, r3
 80099e4:	4620      	mov	r0, r4
 80099e6:	f000 f83a 	bl	8009a5e <_ZSt13__copy_move_aILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 80099ea:	4603      	mov	r3, r0
    }
 80099ec:	4618      	mov	r0, r3
 80099ee:	3714      	adds	r7, #20
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd90      	pop	{r4, r7, pc}

080099f4 <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff ff85 	bl	800990c <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E11_M_max_sizeEv>
 8009a02:	4603      	mov	r3, r0
 8009a04:	4618      	mov	r0, r3
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <_ZSt4copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8009a0c:	b590      	push	{r4, r7, lr}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f000 f843 	bl	8009aa4 <_ZSt12__miter_baseIPP6PGV100EDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009a1e:	4604      	mov	r4, r0
 8009a20:	68b8      	ldr	r0, [r7, #8]
 8009a22:	f000 f83f 	bl	8009aa4 <_ZSt12__miter_baseIPP6PGV100EDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009a26:	4603      	mov	r3, r0
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f000 f84a 	bl	8009ac6 <_ZSt13__copy_move_aILb1EPP6PGV100S2_ET1_T0_S4_S3_>
 8009a32:	4603      	mov	r3, r0
    }
 8009a34:	4618      	mov	r0, r3
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd90      	pop	{r4, r7, pc}

08009a3c <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8009a44:	1d3b      	adds	r3, r7, #4
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 f860 	bl	8009b0c <_ZNKSt13move_iteratorIPP12CommonSensorE4baseEv>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 f868 	bl	8009b24 <_ZSt12__miter_baseIPP12CommonSensorET_S3_>
 8009a54:	4603      	mov	r3, r0
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <_ZSt13__copy_move_aILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009a5e:	b5b0      	push	{r4, r5, r7, lr}
 8009a60:	b084      	sub	sp, #16
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	60f8      	str	r0, [r7, #12]
 8009a66:	60b9      	str	r1, [r7, #8]
 8009a68:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f7ff fefe 	bl	800986c <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 8009a70:	4604      	mov	r4, r0
 8009a72:	68b8      	ldr	r0, [r7, #8]
 8009a74:	f7ff fefa 	bl	800986c <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 8009a78:	4605      	mov	r5, r0
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7ff fef5 	bl	800986c <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 8009a82:	4603      	mov	r3, r0
 8009a84:	461a      	mov	r2, r3
 8009a86:	4629      	mov	r1, r5
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 f856 	bl	8009b3a <_ZSt14__copy_move_a1ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	1d3b      	adds	r3, r7, #4
 8009a92:	4611      	mov	r1, r2
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 f860 	bl	8009b5a <_ZSt12__niter_wrapIPP12CommonSensorET_RKS3_S3_>
 8009a9a:	4603      	mov	r3, r0
    }
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bdb0      	pop	{r4, r5, r7, pc}

08009aa4 <_ZSt12__miter_baseIPP6PGV100EDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8009aac:	1d3b      	adds	r3, r7, #4
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 f85f 	bl	8009b72 <_ZNKSt13move_iteratorIPP6PGV100E4baseEv>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 f867 	bl	8009b8a <_ZSt12__miter_baseIPP6PGV100ET_S3_>
 8009abc:	4603      	mov	r3, r0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <_ZSt13__copy_move_aILb1EPP6PGV100S2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009ac6:	b5b0      	push	{r4, r5, r7, lr}
 8009ac8:	b084      	sub	sp, #16
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	60f8      	str	r0, [r7, #12]
 8009ace:	60b9      	str	r1, [r7, #8]
 8009ad0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f7ff ff26 	bl	8009924 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 8009ad8:	4604      	mov	r4, r0
 8009ada:	68b8      	ldr	r0, [r7, #8]
 8009adc:	f7ff ff22 	bl	8009924 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7ff ff1d 	bl	8009924 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 8009aea:	4603      	mov	r3, r0
 8009aec:	461a      	mov	r2, r3
 8009aee:	4629      	mov	r1, r5
 8009af0:	4620      	mov	r0, r4
 8009af2:	f000 f855 	bl	8009ba0 <_ZSt14__copy_move_a1ILb1EPP6PGV100S2_ET1_T0_S4_S3_>
 8009af6:	4602      	mov	r2, r0
 8009af8:	1d3b      	adds	r3, r7, #4
 8009afa:	4611      	mov	r1, r2
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 f85f 	bl	8009bc0 <_ZSt12__niter_wrapIPP6PGV100ET_RKS3_S3_>
 8009b02:	4603      	mov	r3, r0
    }
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bdb0      	pop	{r4, r5, r7, pc}

08009b0c <_ZNKSt13move_iteratorIPP12CommonSensorE4baseEv>:
      base() const
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <_ZSt12__miter_baseIPP12CommonSensorET_S3_>:
    __miter_base(_Iterator __it)
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <_ZSt14__copy_move_a1ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	68b9      	ldr	r1, [r7, #8]
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f000 f844 	bl	8009bd8 <_ZSt14__copy_move_a2ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 8009b50:	4603      	mov	r3, r0
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <_ZSt12__niter_wrapIPP12CommonSensorET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8009b5a:	b480      	push	{r7}
 8009b5c:	b083      	sub	sp, #12
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	6039      	str	r1, [r7, #0]
    { return __res; }
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <_ZNKSt13move_iteratorIPP6PGV100E4baseEv>:
      base() const
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	370c      	adds	r7, #12
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <_ZSt12__miter_baseIPP6PGV100ET_S3_>:
    __miter_base(_Iterator __it)
 8009b8a:	b480      	push	{r7}
 8009b8c:	b083      	sub	sp, #12
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4618      	mov	r0, r3
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <_ZSt14__copy_move_a1ILb1EPP6PGV100S2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	68b9      	ldr	r1, [r7, #8]
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f000 f821 	bl	8009bf8 <_ZSt14__copy_move_a2ILb1EPP6PGV100S2_ET1_T0_S4_S3_>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <_ZSt12__niter_wrapIPP6PGV100ET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
    { return __res; }
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <_ZSt14__copy_move_a2ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	68b9      	ldr	r1, [r7, #8]
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f000 f815 	bl	8009c18 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_>
 8009bee:	4603      	mov	r3, r0
    }
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <_ZSt14__copy_move_a2ILb1EPP6PGV100S2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	68b9      	ldr	r1, [r7, #8]
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f000 f822 	bl	8009c52 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6PGV100EEPT_PKS5_S8_S6_>
 8009c0e:	4603      	mov	r3, r0
    }
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	109b      	asrs	r3, r3, #2
 8009c2c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d006      	beq.n	8009c42 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	461a      	mov	r2, r3
 8009c3a:	68f9      	ldr	r1, [r7, #12]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f019 ff9d 	bl	8023b7c <memmove>
	  return __result + _Num;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	4413      	add	r3, r2
	}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6PGV100EEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b086      	sub	sp, #24
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	60f8      	str	r0, [r7, #12]
 8009c5a:	60b9      	str	r1, [r7, #8]
 8009c5c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	109b      	asrs	r3, r3, #2
 8009c66:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d006      	beq.n	8009c7c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6PGV100EEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	461a      	mov	r2, r3
 8009c74:	68f9      	ldr	r1, [r7, #12]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f019 ff80 	bl	8023b7c <memmove>
	  return __result + _Num;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	4413      	add	r3, r2
	}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <_Z17HAL_UsartTransmitP20__UART_HandleTypeDefPhi>:
//these four-values must be in stm32f7xx_it.h or .c


//----------------------------------------------------------------------------------------UART(No interrupt)
int HAL_UsartTransmit(UART_HandleTypeDef* huartx, uint8_t* todata, int datalength)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
	//return HAL_UART_Transmit_IT(huartx, todata, datalength);
    /* Process Locked */
     __HAL_LOCK(huartx);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d101      	bne.n	8009ca6 <_Z17HAL_UsartTransmitP20__UART_HandleTypeDefPhi+0x1a>
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	e00b      	b.n	8009cbe <_Z17HAL_UsartTransmitP20__UART_HandleTypeDefPhi+0x32>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	return HAL_UART_Transmit(huartx, todata, datalength, 10);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	230a      	movs	r3, #10
 8009cb4:	68b9      	ldr	r1, [r7, #8]
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f005 f9d2 	bl	800f060 <HAL_UART_Transmit>
 8009cbc:	4603      	mov	r3, r0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <_Z16HAL_UsartReceiveP20__UART_HandleTypeDefPhi>:

int HAL_UsartReceive(UART_HandleTypeDef* huartx, uint8_t* fromdata, int datalength)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	60f8      	str	r0, [r7, #12]
 8009cce:	60b9      	str	r1, [r7, #8]
 8009cd0:	607a      	str	r2, [r7, #4]
	//return HAL_UART_Receive_IT(huartx, fromdata, datalength);
    /* Process Locked */
     __HAL_LOCK(huartx);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d101      	bne.n	8009ce0 <_Z16HAL_UsartReceiveP20__UART_HandleTypeDefPhi+0x1a>
 8009cdc:	2302      	movs	r3, #2
 8009cde:	e00b      	b.n	8009cf8 <_Z16HAL_UsartReceiveP20__UART_HandleTypeDefPhi+0x32>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	return HAL_UART_Receive(huartx, fromdata, datalength, 10);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	230a      	movs	r3, #10
 8009cee:	68b9      	ldr	r1, [r7, #8]
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f005 fa38 	bl	800f166 <HAL_UART_Receive>
 8009cf6:	4603      	mov	r3, r0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm>:


//----------------------------------------------------------------------------------------CANOpen(No interrupt)
int HAL_CANTransmit(CAN_HandleTypeDef* hcanx, const CAN_TxHeaderTypeDef *pHeader,
					const uint8_t *aData, uint32_t *pTxMailbox)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
 8009d0c:	603b      	str	r3, [r7, #0]
	return HAL_CAN_AddTxMessage(hcanx, pHeader, aData, pTxMailbox);
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	68b9      	ldr	r1, [r7, #8]
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f001 fa68 	bl	800b1ea <HAL_CAN_AddTxMessage>
 8009d1a:	4603      	mov	r3, r0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh>:

int HAL_CANReceive(CAN_HandleTypeDef *hcanx, CAN_RxHeaderTypeDef *pHeader, uint8_t *aData)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
	//while(HAL_CAN_GetRxFifoFillLevel(hcanx, CAN_RX_FIFO0 )!= HAL_OK)
	return HAL_CAN_GetRxMessage(hcanx, CAN_RX_FIFO0, pHeader, aData);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	2100      	movs	r1, #0
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f001 fb80 	bl	800b43c <HAL_CAN_GetRxMessage>
 8009d3c:	4603      	mov	r3, r0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b08c      	sub	sp, #48	; 0x30
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8] = {0,};
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60fb      	str	r3, [r7, #12]
 8009d52:	2300      	movs	r3, #0
 8009d54:	613b      	str	r3, [r7, #16]

  /* Get RX message */
  if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8009d56:	f107 030c 	add.w	r3, r7, #12
 8009d5a:	f107 0214 	add.w	r2, r7, #20
 8009d5e:	2100      	movs	r1, #0
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f001 fb6b 	bl	800b43c <HAL_CAN_GetRxMessage>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bf14      	ite	ne
 8009d6c:	2301      	movne	r3, #1
 8009d6e:	2300      	moveq	r3, #0
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
  {
    /* Reception Error */
    Error_Handler();
 8009d76:	f7f8 f869 	bl	8001e4c <Error_Handler>
  }

}
 8009d7a:	bf00      	nop
 8009d7c:	3730      	adds	r7, #48	; 0x30
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
	...

08009d84 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4a07      	ldr	r2, [pc, #28]	; (8009db0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	4a06      	ldr	r2, [pc, #24]	; (8009db4 <vApplicationGetIdleTaskMemory+0x30>)
 8009d9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009da2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8009da4:	bf00      	nop
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	2000089c 	.word	0x2000089c
 8009db4:	20000950 	.word	0x20000950

08009db8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8009db8:	b480      	push	{r7}
 8009dba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009dbc:	f3bf 8f4f 	dsb	sy
}
 8009dc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009dc2:	f3bf 8f6f 	isb	sy
}
 8009dc6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8009dc8:	4b0d      	ldr	r3, [pc, #52]	; (8009e00 <SCB_EnableICache+0x48>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8009dd0:	f3bf 8f4f 	dsb	sy
}
 8009dd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009dd6:	f3bf 8f6f 	isb	sy
}
 8009dda:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8009ddc:	4b08      	ldr	r3, [pc, #32]	; (8009e00 <SCB_EnableICache+0x48>)
 8009dde:	695b      	ldr	r3, [r3, #20]
 8009de0:	4a07      	ldr	r2, [pc, #28]	; (8009e00 <SCB_EnableICache+0x48>)
 8009de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009de6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009de8:	f3bf 8f4f 	dsb	sy
}
 8009dec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009dee:	f3bf 8f6f 	isb	sy
}
 8009df2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8009df4:	bf00      	nop
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	e000ed00 	.word	0xe000ed00

08009e04 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8009e0a:	4b25      	ldr	r3, [pc, #148]	; (8009ea0 <SCB_EnableDCache+0x9c>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8009e12:	f3bf 8f4f 	dsb	sy
}
 8009e16:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8009e18:	4b21      	ldr	r3, [pc, #132]	; (8009ea0 <SCB_EnableDCache+0x9c>)
 8009e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e1e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	0b5b      	lsrs	r3, r3, #13
 8009e24:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009e28:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	08db      	lsrs	r3, r3, #3
 8009e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e32:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8009e3c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009e42:	4917      	ldr	r1, [pc, #92]	; (8009ea0 <SCB_EnableDCache+0x9c>)
 8009e44:	4313      	orrs	r3, r2
 8009e46:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	1e5a      	subs	r2, r3, #1
 8009e4e:	60ba      	str	r2, [r7, #8]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	bf14      	ite	ne
 8009e54:	2301      	movne	r3, #1
 8009e56:	2300      	moveq	r3, #0
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d000      	beq.n	8009e60 <SCB_EnableDCache+0x5c>
      do {
 8009e5e:	e7e9      	b.n	8009e34 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	1e5a      	subs	r2, r3, #1
 8009e64:	60fa      	str	r2, [r7, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	bf14      	ite	ne
 8009e6a:	2301      	movne	r3, #1
 8009e6c:	2300      	moveq	r3, #0
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d000      	beq.n	8009e76 <SCB_EnableDCache+0x72>
    do {
 8009e74:	e7d9      	b.n	8009e2a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8009e76:	f3bf 8f4f 	dsb	sy
}
 8009e7a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8009e7c:	4b08      	ldr	r3, [pc, #32]	; (8009ea0 <SCB_EnableDCache+0x9c>)
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	4a07      	ldr	r2, [pc, #28]	; (8009ea0 <SCB_EnableDCache+0x9c>)
 8009e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e86:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009e88:	f3bf 8f4f 	dsb	sy
}
 8009e8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009e8e:	f3bf 8f6f 	isb	sy
}
 8009e92:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8009e94:	bf00      	nop
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	e000ed00 	.word	0xe000ed00

08009ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009ea4:	b5b0      	push	{r4, r5, r7, lr}
 8009ea6:	b096      	sub	sp, #88	; 0x58
 8009ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8009eaa:	f7ff ff85 	bl	8009db8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8009eae:	f7ff ffa9 	bl	8009e04 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009eb2:	f000 fedf 	bl	800ac74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009eb6:	f7f7 fc31 	bl	800171c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* USER CODE BEGIN 2 */

 	init_stm32f746();
 8009eba:	f7f7 fc19 	bl	80016f0 <init_stm32f746>

	Dprintf("Stm32f746 Initializing is complete!\n");
 8009ebe:	482c      	ldr	r0, [pc, #176]	; (8009f70 <main+0xcc>)
 8009ec0:	f7f7 f83c 	bl	8000f3c <_Z7DprintfPKcz>

	/* USER CODE BEGIN 5 */
	//debug init
	Debug_Uart_Init();
 8009ec4:	f7f7 f880 	bl	8000fc8 <_Z15Debug_Uart_Initv>

	Dprintf("Module Initializing\n");
 8009ec8:	482a      	ldr	r0, [pc, #168]	; (8009f74 <main+0xd0>)
 8009eca:	f7f7 f837 	bl	8000f3c <_Z7DprintfPKcz>
	HAL_Delay(5000);
 8009ece:	f241 3088 	movw	r0, #5000	; 0x1388
 8009ed2:	f000 fefd 	bl	800acd0 <HAL_Delay>

	//sensor manager initialize
	//need some times for boot pgv100
	SensorManager::GetInstance().CommonSensorInitialize();
 8009ed6:	f7fe f803 	bl	8007ee0 <_ZN13SensorManager11GetInstanceEv>
 8009eda:	4603      	mov	r3, r0
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe f9ad 	bl	800823c <_ZN13SensorManager22CommonSensorInitializeEv>
	SensorManager::GetInstance().PGV100Initialize();
 8009ee2:	f7fd fffd 	bl	8007ee0 <_ZN13SensorManager11GetInstanceEv>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fe faad 	bl	8008448 <_ZN13SensorManager16PGV100InitializeEv>

	bg95test.Initialization();
 8009eee:	4822      	ldr	r0, [pc, #136]	; (8009f78 <main+0xd4>)
 8009ef0:	f7f8 fcc1 	bl	8002876 <_ZN4BG9514InitializationEv>

	Dprintf("Module Initializing is complete!\n");
 8009ef4:	4821      	ldr	r0, [pc, #132]	; (8009f7c <main+0xd8>)
 8009ef6:	f7f7 f821 	bl	8000f3c <_Z7DprintfPKcz>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitTask */
  osThreadDef(InitTask, StartInitTask, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8009efa:	4b21      	ldr	r3, [pc, #132]	; (8009f80 <main+0xdc>)
 8009efc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8009f00:	461d      	mov	r5, r3
 8009f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009f0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InitTaskHandle = osThreadCreate(osThread(InitTask), NULL);
 8009f0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009f12:	2100      	movs	r1, #0
 8009f14:	4618      	mov	r0, r3
 8009f16:	f007 fc97 	bl	8011848 <osThreadCreate>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	4a19      	ldr	r2, [pc, #100]	; (8009f84 <main+0xe0>)
 8009f1e:	6013      	str	r3, [r2, #0]

  /* definition and creation of CommonSensorTask */
  osThreadDef(CommonSensorTas, StartCommonSensorTask, osPriorityLow, 0, configMINIMAL_STACK_SIZE);
 8009f20:	4b19      	ldr	r3, [pc, #100]	; (8009f88 <main+0xe4>)
 8009f22:	f107 0420 	add.w	r4, r7, #32
 8009f26:	461d      	mov	r5, r3
 8009f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009f30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommonSensorTasHandle = osThreadCreate(osThread(CommonSensorTas), NULL);
 8009f34:	f107 0320 	add.w	r3, r7, #32
 8009f38:	2100      	movs	r1, #0
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f007 fc84 	bl	8011848 <osThreadCreate>
 8009f40:	4603      	mov	r3, r0
 8009f42:	4a12      	ldr	r2, [pc, #72]	; (8009f8c <main+0xe8>)
 8009f44:	6013      	str	r3, [r2, #0]
  /* definition and creation of PGV100Task */
  //osThreadDef(PGV100Task, StartPGV100Task, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE);
  //PGV100TaskHandle = osThreadCreate(osThread(PGV100Task), NULL);

  /* definition and creation of ETHTask */
  osThreadDef(ETHTask, StartETHTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8009f46:	4b12      	ldr	r3, [pc, #72]	; (8009f90 <main+0xec>)
 8009f48:	1d3c      	adds	r4, r7, #4
 8009f4a:	461d      	mov	r5, r3
 8009f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009f54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ETHTaskHandle = osThreadCreate(osThread(ETHTask), NULL);
 8009f58:	1d3b      	adds	r3, r7, #4
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f007 fc73 	bl	8011848 <osThreadCreate>
 8009f62:	4603      	mov	r3, r0
 8009f64:	4a0b      	ldr	r2, [pc, #44]	; (8009f94 <main+0xf0>)
 8009f66:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8009f68:	f007 fc57 	bl	801181a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009f6c:	e7fe      	b.n	8009f6c <main+0xc8>
 8009f6e:	bf00      	nop
 8009f70:	08025188 	.word	0x08025188
 8009f74:	080251b0 	.word	0x080251b0
 8009f78:	20001960 	.word	0x20001960
 8009f7c:	080251c8 	.word	0x080251c8
 8009f80:	080251ec 	.word	0x080251ec
 8009f84:	20001950 	.word	0x20001950
 8009f88:	08025208 	.word	0x08025208
 8009f8c:	20001954 	.word	0x20001954
 8009f90:	08025224 	.word	0x08025224
 8009f94:	20001958 	.word	0x20001958

08009f98 <_Z13StartInitTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void const *argument)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
	Dprintf("Ethernet Initializing\n");
 8009fa0:	4809      	ldr	r0, [pc, #36]	; (8009fc8 <_Z13StartInitTaskPKv+0x30>)
 8009fa2:	f7f6 ffcb 	bl	8000f3c <_Z7DprintfPKcz>

	/* init code for LWIP */
	MX_LWIP_Init();
 8009fa6:	f006 fddf 	bl	8010b68 <MX_LWIP_Init>

	//UdpRtosServerInit();
	UdpClientInit();
 8009faa:	f7f7 fb8d 	bl	80016c8 <_Z13UdpClientInitv>
	TcpServerInit();
 8009fae:	f7f7 fad9 	bl	8001564 <_Z13TcpServerInitv>

	Dprintf("Ethernet Initializing is complete!\n");
 8009fb2:	4806      	ldr	r0, [pc, #24]	; (8009fcc <_Z13StartInitTaskPKv+0x34>)
 8009fb4:	f7f6 ffc2 	bl	8000f3c <_Z7DprintfPKcz>

	/* Infinite loop */
	for(;;)
	{
		osDelay(1000);  //1000ms
 8009fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009fbc:	f007 fc90 	bl	80118e0 <osDelay>
		//vTaskDelayUntil(&xLastWakeTime, xTime);
		vTaskDelete(NULL);
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	f009 f981 	bl	80132c8 <vTaskDelete>
		osDelay(1000);  //1000ms
 8009fc6:	e7f7      	b.n	8009fb8 <_Z13StartInitTaskPKv+0x20>
 8009fc8:	08025240 	.word	0x08025240
 8009fcc:	08025258 	.word	0x08025258

08009fd0 <_Z21StartCommonSensorTaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommonSensorTask */
void StartCommonSensorTask(void const *argument)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommonSensorTask */
	const TickType_t xTime = pdMS_TO_TICKS(1);
 8009fd8:	2301      	movs	r3, #1
 8009fda:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8009fdc:	f009 fbda 	bl	8013794 <xTaskGetTickCount>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	//vTaskDelayUntil(&xLastWakeTime, xTime);
	SensorManager::GetInstance().CommonSensorDrive();
 8009fe4:	f7fd ff7c 	bl	8007ee0 <_ZN13SensorManager11GetInstanceEv>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fe f934 	bl	8008258 <_ZN13SensorManager17CommonSensorDriveEv>
	sensorsval = SensorManager::GetInstance().CommonSensorGetAllData();
 8009ff0:	f7fd ff76 	bl	8007ee0 <_ZN13SensorManager11GetInstanceEv>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fe f9a6 	bl	8008348 <_ZNK13SensorManager22CommonSensorGetAllDataEv>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	461a      	mov	r2, r3
 800a000:	4b05      	ldr	r3, [pc, #20]	; (800a018 <_Z21StartCommonSensorTaskPKv+0x48>)
 800a002:	801a      	strh	r2, [r3, #0]
    osDelay(1);
 800a004:	2001      	movs	r0, #1
 800a006:	f007 fc6b 	bl	80118e0 <osDelay>
	vTaskDelayUntil(&xLastWakeTime, xTime);
 800a00a:	f107 0308 	add.w	r3, r7, #8
 800a00e:	2101      	movs	r1, #1
 800a010:	4618      	mov	r0, r3
 800a012:	f009 f9eb 	bl	80133ec <vTaskDelayUntil>
	SensorManager::GetInstance().CommonSensorDrive();
 800a016:	e7e5      	b.n	8009fe4 <_Z21StartCommonSensorTaskPKv+0x14>
 800a018:	2000195c 	.word	0x2000195c

0800a01c <_Z12StartETHTaskPKv>:
/* USER CODE END Header_StartETHTask */



void StartETHTask(void const *argument)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartETHTask */
	const TickType_t xTime = pdMS_TO_TICKS(50);
 800a024:	2332      	movs	r3, #50	; 0x32
 800a026:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800a028:	f009 fbb4 	bl	8013794 <xTaskGetTickCount>
 800a02c:	4603      	mov	r3, r0
 800a02e:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  	DebugDrive();
 800a030:	f7f6 ffe0 	bl	8000ff4 <_Z10DebugDrivev>
	  	bg95test.Drive();
 800a034:	4804      	ldr	r0, [pc, #16]	; (800a048 <_Z12StartETHTaskPKv+0x2c>)
 800a036:	f7f8 fc2c 	bl	8002892 <_ZN4BG955DriveEv>
		errup = SensorManager::GetInstance().PGV100IsErrUp();
*/
		//vTaskDelayUntil(&xLastWakeTime, xTime);
		//ethernetif_input(&gnetif);
		//sys_check_timeouts();
		vTaskDelayUntil(&xLastWakeTime, xTime);
 800a03a:	f107 0308 	add.w	r3, r7, #8
 800a03e:	2132      	movs	r1, #50	; 0x32
 800a040:	4618      	mov	r0, r3
 800a042:	f009 f9d3 	bl	80133ec <vTaskDelayUntil>
	  	DebugDrive();
 800a046:	e7f3      	b.n	800a030 <_Z12StartETHTaskPKv+0x14>
 800a048:	20001960 	.word	0x20001960

0800a04c <_Z41__static_initialization_and_destruction_0ii>:
		//osDelay(1);
  }
  /* USER CODE END StartETHTask */
}
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d108      	bne.n	800a06e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a062:	4293      	cmp	r3, r2
 800a064:	d103      	bne.n	800a06e <_Z41__static_initialization_and_destruction_0ii+0x22>
BG95 bg95test(&hcan1);
 800a066:	4909      	ldr	r1, [pc, #36]	; (800a08c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800a068:	4809      	ldr	r0, [pc, #36]	; (800a090 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800a06a:	f7f7 ff4d 	bl	8001f08 <_ZN4BG95C1EP19__CAN_HandleTypeDef>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d107      	bne.n	800a084 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d102      	bne.n	800a084 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800a07e:	4804      	ldr	r0, [pc, #16]	; (800a090 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800a080:	f7f7 ff86 	bl	8001f90 <_ZN4BG95D1Ev>
}
 800a084:	bf00      	nop
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	200004e4 	.word	0x200004e4
 800a090:	20001960 	.word	0x20001960

0800a094 <_GLOBAL__sub_I_InitTaskHandle>:
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0
 800a098:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a09c:	2001      	movs	r0, #1
 800a09e:	f7ff ffd5 	bl	800a04c <_Z41__static_initialization_and_destruction_0ii>
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <_GLOBAL__sub_D_InitTaskHandle>:
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	f7ff ffcd 	bl	800a04c <_Z41__static_initialization_and_destruction_0ii>
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a0ba:	4b11      	ldr	r3, [pc, #68]	; (800a100 <HAL_MspInit+0x4c>)
 800a0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0be:	4a10      	ldr	r2, [pc, #64]	; (800a100 <HAL_MspInit+0x4c>)
 800a0c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a0c6:	4b0e      	ldr	r3, [pc, #56]	; (800a100 <HAL_MspInit+0x4c>)
 800a0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0ce:	607b      	str	r3, [r7, #4]
 800a0d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0d2:	4b0b      	ldr	r3, [pc, #44]	; (800a100 <HAL_MspInit+0x4c>)
 800a0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0d6:	4a0a      	ldr	r2, [pc, #40]	; (800a100 <HAL_MspInit+0x4c>)
 800a0d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0dc:	6453      	str	r3, [r2, #68]	; 0x44
 800a0de:	4b08      	ldr	r3, [pc, #32]	; (800a100 <HAL_MspInit+0x4c>)
 800a0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0e6:	603b      	str	r3, [r7, #0]
 800a0e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	210f      	movs	r1, #15
 800a0ee:	f06f 0001 	mvn.w	r0, #1
 800a0f2:	f001 fde9 	bl	800bcc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a0f6:	bf00      	nop
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	40023800 	.word	0x40023800

0800a104 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08a      	sub	sp, #40	; 0x28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a10c:	f107 0314 	add.w	r3, r7, #20
 800a110:	2200      	movs	r2, #0
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	605a      	str	r2, [r3, #4]
 800a116:	609a      	str	r2, [r3, #8]
 800a118:	60da      	str	r2, [r3, #12]
 800a11a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a1b      	ldr	r2, [pc, #108]	; (800a190 <HAL_CAN_MspInit+0x8c>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d130      	bne.n	800a188 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800a126:	4b1b      	ldr	r3, [pc, #108]	; (800a194 <HAL_CAN_MspInit+0x90>)
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	4a1a      	ldr	r2, [pc, #104]	; (800a194 <HAL_CAN_MspInit+0x90>)
 800a12c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a130:	6413      	str	r3, [r2, #64]	; 0x40
 800a132:	4b18      	ldr	r3, [pc, #96]	; (800a194 <HAL_CAN_MspInit+0x90>)
 800a134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a13a:	613b      	str	r3, [r7, #16]
 800a13c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a13e:	4b15      	ldr	r3, [pc, #84]	; (800a194 <HAL_CAN_MspInit+0x90>)
 800a140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a142:	4a14      	ldr	r2, [pc, #80]	; (800a194 <HAL_CAN_MspInit+0x90>)
 800a144:	f043 0301 	orr.w	r3, r3, #1
 800a148:	6313      	str	r3, [r2, #48]	; 0x30
 800a14a:	4b12      	ldr	r3, [pc, #72]	; (800a194 <HAL_CAN_MspInit+0x90>)
 800a14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14e:	f003 0301 	and.w	r3, r3, #1
 800a152:	60fb      	str	r3, [r7, #12]
 800a154:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a156:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a15a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a15c:	2302      	movs	r3, #2
 800a15e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a160:	2300      	movs	r3, #0
 800a162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a164:	2303      	movs	r3, #3
 800a166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800a168:	2309      	movs	r3, #9
 800a16a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a16c:	f107 0314 	add.w	r3, r7, #20
 800a170:	4619      	mov	r1, r3
 800a172:	4809      	ldr	r0, [pc, #36]	; (800a198 <HAL_CAN_MspInit+0x94>)
 800a174:	f003 f8a0 	bl	800d2b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 800a178:	2200      	movs	r2, #0
 800a17a:	2108      	movs	r1, #8
 800a17c:	2014      	movs	r0, #20
 800a17e:	f001 fda3 	bl	800bcc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800a182:	2014      	movs	r0, #20
 800a184:	f001 fdbc 	bl	800bd00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800a188:	bf00      	nop
 800a18a:	3728      	adds	r7, #40	; 0x28
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	40006400 	.word	0x40006400
 800a194:	40023800 	.word	0x40023800
 800a198:	40020000 	.word	0x40020000

0800a19c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a0d      	ldr	r2, [pc, #52]	; (800a1e0 <HAL_TIM_Base_MspInit+0x44>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d113      	bne.n	800a1d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a1ae:	4b0d      	ldr	r3, [pc, #52]	; (800a1e4 <HAL_TIM_Base_MspInit+0x48>)
 800a1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b2:	4a0c      	ldr	r2, [pc, #48]	; (800a1e4 <HAL_TIM_Base_MspInit+0x48>)
 800a1b4:	f043 0320 	orr.w	r3, r3, #32
 800a1b8:	6413      	str	r3, [r2, #64]	; 0x40
 800a1ba:	4b0a      	ldr	r3, [pc, #40]	; (800a1e4 <HAL_TIM_Base_MspInit+0x48>)
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1be:	f003 0320 	and.w	r3, r3, #32
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 7, 0);
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	2107      	movs	r1, #7
 800a1ca:	2037      	movs	r0, #55	; 0x37
 800a1cc:	f001 fd7c 	bl	800bcc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800a1d0:	2037      	movs	r0, #55	; 0x37
 800a1d2:	f001 fd95 	bl	800bd00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800a1d6:	bf00      	nop
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	40001400 	.word	0x40001400
 800a1e4:	40023800 	.word	0x40023800

0800a1e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b0b4      	sub	sp, #208	; 0xd0
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1f0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]
 800a1f8:	605a      	str	r2, [r3, #4]
 800a1fa:	609a      	str	r2, [r3, #8]
 800a1fc:	60da      	str	r2, [r3, #12]
 800a1fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a200:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a204:	2284      	movs	r2, #132	; 0x84
 800a206:	2100      	movs	r1, #0
 800a208:	4618      	mov	r0, r3
 800a20a:	f019 fcd1 	bl	8023bb0 <memset>
  if(huart->Instance==UART4)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4aa6      	ldr	r2, [pc, #664]	; (800a4ac <HAL_UART_MspInit+0x2c4>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d146      	bne.n	800a2a6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800a218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a21c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800a21e:	2300      	movs	r3, #0
 800a220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a224:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a228:	4618      	mov	r0, r3
 800a22a:	f003 ff2f 	bl	800e08c <HAL_RCCEx_PeriphCLKConfig>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800a234:	f7f7 fe0a 	bl	8001e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a238:	4b9d      	ldr	r3, [pc, #628]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23c:	4a9c      	ldr	r2, [pc, #624]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a23e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a242:	6413      	str	r3, [r2, #64]	; 0x40
 800a244:	4b9a      	ldr	r3, [pc, #616]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a24c:	637b      	str	r3, [r7, #52]	; 0x34
 800a24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a250:	4b97      	ldr	r3, [pc, #604]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a254:	4a96      	ldr	r2, [pc, #600]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a256:	f043 0304 	orr.w	r3, r3, #4
 800a25a:	6313      	str	r3, [r2, #48]	; 0x30
 800a25c:	4b94      	ldr	r3, [pc, #592]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	633b      	str	r3, [r7, #48]	; 0x30
 800a266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a268:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a26c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a270:	2302      	movs	r3, #2
 800a272:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a276:	2300      	movs	r3, #0
 800a278:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a27c:	2303      	movs	r3, #3
 800a27e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a282:	2308      	movs	r3, #8
 800a284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a288:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a28c:	4619      	mov	r1, r3
 800a28e:	4889      	ldr	r0, [pc, #548]	; (800a4b4 <HAL_UART_MspInit+0x2cc>)
 800a290:	f003 f812 	bl	800d2b8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 800a294:	2200      	movs	r2, #0
 800a296:	2108      	movs	r1, #8
 800a298:	2034      	movs	r0, #52	; 0x34
 800a29a:	f001 fd15 	bl	800bcc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a29e:	2034      	movs	r0, #52	; 0x34
 800a2a0:	f001 fd2e 	bl	800bd00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800a2a4:	e15e      	b.n	800a564 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==UART5)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a83      	ldr	r2, [pc, #524]	; (800a4b8 <HAL_UART_MspInit+0x2d0>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d167      	bne.n	800a380 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800a2b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2b4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a2bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f003 fee3 	bl	800e08c <HAL_RCCEx_PeriphCLKConfig>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d001      	beq.n	800a2d0 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 800a2cc:	f7f7 fdbe 	bl	8001e4c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800a2d0:	4b77      	ldr	r3, [pc, #476]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d4:	4a76      	ldr	r2, [pc, #472]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a2d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2da:	6413      	str	r3, [r2, #64]	; 0x40
 800a2dc:	4b74      	ldr	r3, [pc, #464]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2e8:	4b71      	ldr	r3, [pc, #452]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ec:	4a70      	ldr	r2, [pc, #448]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a2ee:	f043 0304 	orr.w	r3, r3, #4
 800a2f2:	6313      	str	r3, [r2, #48]	; 0x30
 800a2f4:	4b6e      	ldr	r3, [pc, #440]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f8:	f003 0304 	and.w	r3, r3, #4
 800a2fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a300:	4b6b      	ldr	r3, [pc, #428]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a304:	4a6a      	ldr	r2, [pc, #424]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a306:	f043 0308 	orr.w	r3, r3, #8
 800a30a:	6313      	str	r3, [r2, #48]	; 0x30
 800a30c:	4b68      	ldr	r3, [pc, #416]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a310:	f003 0308 	and.w	r3, r3, #8
 800a314:	627b      	str	r3, [r7, #36]	; 0x24
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a31c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a320:	2302      	movs	r3, #2
 800a322:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a326:	2300      	movs	r3, #0
 800a328:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a32c:	2303      	movs	r3, #3
 800a32e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800a332:	2308      	movs	r3, #8
 800a334:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a338:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a33c:	4619      	mov	r1, r3
 800a33e:	485d      	ldr	r0, [pc, #372]	; (800a4b4 <HAL_UART_MspInit+0x2cc>)
 800a340:	f002 ffba 	bl	800d2b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a344:	2304      	movs	r3, #4
 800a346:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a34a:	2302      	movs	r3, #2
 800a34c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a350:	2300      	movs	r3, #0
 800a352:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a356:	2303      	movs	r3, #3
 800a358:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800a35c:	2308      	movs	r3, #8
 800a35e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a362:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a366:	4619      	mov	r1, r3
 800a368:	4854      	ldr	r0, [pc, #336]	; (800a4bc <HAL_UART_MspInit+0x2d4>)
 800a36a:	f002 ffa5 	bl	800d2b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800a36e:	2200      	movs	r2, #0
 800a370:	2105      	movs	r1, #5
 800a372:	2035      	movs	r0, #53	; 0x35
 800a374:	f001 fca8 	bl	800bcc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800a378:	2035      	movs	r0, #53	; 0x35
 800a37a:	f001 fcc1 	bl	800bd00 <HAL_NVIC_EnableIRQ>
}
 800a37e:	e0f1      	b.n	800a564 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART1)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a4e      	ldr	r2, [pc, #312]	; (800a4c0 <HAL_UART_MspInit+0x2d8>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d144      	bne.n	800a414 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a38a:	2340      	movs	r3, #64	; 0x40
 800a38c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a38e:	2300      	movs	r3, #0
 800a390:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a392:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a396:	4618      	mov	r0, r3
 800a398:	f003 fe78 	bl	800e08c <HAL_RCCEx_PeriphCLKConfig>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <HAL_UART_MspInit+0x1be>
      Error_Handler();
 800a3a2:	f7f7 fd53 	bl	8001e4c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a3a6:	4b42      	ldr	r3, [pc, #264]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3aa:	4a41      	ldr	r2, [pc, #260]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a3ac:	f043 0310 	orr.w	r3, r3, #16
 800a3b0:	6453      	str	r3, [r2, #68]	; 0x44
 800a3b2:	4b3f      	ldr	r3, [pc, #252]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3b6:	f003 0310 	and.w	r3, r3, #16
 800a3ba:	623b      	str	r3, [r7, #32]
 800a3bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3be:	4b3c      	ldr	r3, [pc, #240]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c2:	4a3b      	ldr	r2, [pc, #236]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a3c4:	f043 0301 	orr.w	r3, r3, #1
 800a3c8:	6313      	str	r3, [r2, #48]	; 0x30
 800a3ca:	4b39      	ldr	r3, [pc, #228]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	61fb      	str	r3, [r7, #28]
 800a3d4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a3d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a3da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3de:	2302      	movs	r3, #2
 800a3e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a3f0:	2307      	movs	r3, #7
 800a3f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3f6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	4831      	ldr	r0, [pc, #196]	; (800a4c4 <HAL_UART_MspInit+0x2dc>)
 800a3fe:	f002 ff5b 	bl	800d2b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 800a402:	2200      	movs	r2, #0
 800a404:	210e      	movs	r1, #14
 800a406:	2025      	movs	r0, #37	; 0x25
 800a408:	f001 fc5e 	bl	800bcc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a40c:	2025      	movs	r0, #37	; 0x25
 800a40e:	f001 fc77 	bl	800bd00 <HAL_NVIC_EnableIRQ>
}
 800a412:	e0a7      	b.n	800a564 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART3)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a2b      	ldr	r2, [pc, #172]	; (800a4c8 <HAL_UART_MspInit+0x2e0>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d158      	bne.n	800a4d0 <HAL_UART_MspInit+0x2e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800a41e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a422:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a424:	2300      	movs	r3, #0
 800a426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a42a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a42e:	4618      	mov	r0, r3
 800a430:	f003 fe2c 	bl	800e08c <HAL_RCCEx_PeriphCLKConfig>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <HAL_UART_MspInit+0x256>
      Error_Handler();
 800a43a:	f7f7 fd07 	bl	8001e4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a43e:	4b1c      	ldr	r3, [pc, #112]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a442:	4a1b      	ldr	r2, [pc, #108]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a448:	6413      	str	r3, [r2, #64]	; 0x40
 800a44a:	4b19      	ldr	r3, [pc, #100]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a452:	61bb      	str	r3, [r7, #24]
 800a454:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a456:	4b16      	ldr	r3, [pc, #88]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45a:	4a15      	ldr	r2, [pc, #84]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a45c:	f043 0302 	orr.w	r3, r3, #2
 800a460:	6313      	str	r3, [r2, #48]	; 0x30
 800a462:	4b13      	ldr	r3, [pc, #76]	; (800a4b0 <HAL_UART_MspInit+0x2c8>)
 800a464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a466:	f003 0302 	and.w	r3, r3, #2
 800a46a:	617b      	str	r3, [r7, #20]
 800a46c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a46e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a472:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a476:	2302      	movs	r3, #2
 800a478:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a47c:	2300      	movs	r3, #0
 800a47e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a482:	2303      	movs	r3, #3
 800a484:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a488:	2307      	movs	r3, #7
 800a48a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a48e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a492:	4619      	mov	r1, r3
 800a494:	480d      	ldr	r0, [pc, #52]	; (800a4cc <HAL_UART_MspInit+0x2e4>)
 800a496:	f002 ff0f 	bl	800d2b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 800a49a:	2200      	movs	r2, #0
 800a49c:	2108      	movs	r1, #8
 800a49e:	2027      	movs	r0, #39	; 0x27
 800a4a0:	f001 fc12 	bl	800bcc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a4a4:	2027      	movs	r0, #39	; 0x27
 800a4a6:	f001 fc2b 	bl	800bd00 <HAL_NVIC_EnableIRQ>
}
 800a4aa:	e05b      	b.n	800a564 <HAL_UART_MspInit+0x37c>
 800a4ac:	40004c00 	.word	0x40004c00
 800a4b0:	40023800 	.word	0x40023800
 800a4b4:	40020800 	.word	0x40020800
 800a4b8:	40005000 	.word	0x40005000
 800a4bc:	40020c00 	.word	0x40020c00
 800a4c0:	40011000 	.word	0x40011000
 800a4c4:	40020000 	.word	0x40020000
 800a4c8:	40004800 	.word	0x40004800
 800a4cc:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a25      	ldr	r2, [pc, #148]	; (800a56c <HAL_UART_MspInit+0x384>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d144      	bne.n	800a564 <HAL_UART_MspInit+0x37c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800a4da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4de:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a4e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f003 fdce 	bl	800e08c <HAL_RCCEx_PeriphCLKConfig>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <HAL_UART_MspInit+0x312>
      Error_Handler();
 800a4f6:	f7f7 fca9 	bl	8001e4c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a4fa:	4b1d      	ldr	r3, [pc, #116]	; (800a570 <HAL_UART_MspInit+0x388>)
 800a4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4fe:	4a1c      	ldr	r2, [pc, #112]	; (800a570 <HAL_UART_MspInit+0x388>)
 800a500:	f043 0320 	orr.w	r3, r3, #32
 800a504:	6453      	str	r3, [r2, #68]	; 0x44
 800a506:	4b1a      	ldr	r3, [pc, #104]	; (800a570 <HAL_UART_MspInit+0x388>)
 800a508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a50a:	f003 0320 	and.w	r3, r3, #32
 800a50e:	613b      	str	r3, [r7, #16]
 800a510:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a512:	4b17      	ldr	r3, [pc, #92]	; (800a570 <HAL_UART_MspInit+0x388>)
 800a514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a516:	4a16      	ldr	r2, [pc, #88]	; (800a570 <HAL_UART_MspInit+0x388>)
 800a518:	f043 0304 	orr.w	r3, r3, #4
 800a51c:	6313      	str	r3, [r2, #48]	; 0x30
 800a51e:	4b14      	ldr	r3, [pc, #80]	; (800a570 <HAL_UART_MspInit+0x388>)
 800a520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a522:	f003 0304 	and.w	r3, r3, #4
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a52a:	23c0      	movs	r3, #192	; 0xc0
 800a52c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a530:	2302      	movs	r3, #2
 800a532:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a536:	2300      	movs	r3, #0
 800a538:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a53c:	2303      	movs	r3, #3
 800a53e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a542:	2308      	movs	r3, #8
 800a544:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a548:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a54c:	4619      	mov	r1, r3
 800a54e:	4809      	ldr	r0, [pc, #36]	; (800a574 <HAL_UART_MspInit+0x38c>)
 800a550:	f002 feb2 	bl	800d2b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 8, 0);
 800a554:	2200      	movs	r2, #0
 800a556:	2108      	movs	r1, #8
 800a558:	2047      	movs	r0, #71	; 0x47
 800a55a:	f001 fbb5 	bl	800bcc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800a55e:	2047      	movs	r0, #71	; 0x47
 800a560:	f001 fbce 	bl	800bd00 <HAL_NVIC_EnableIRQ>
}
 800a564:	bf00      	nop
 800a566:	37d0      	adds	r7, #208	; 0xd0
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	40011400 	.word	0x40011400
 800a570:	40023800 	.word	0x40023800
 800a574:	40020800 	.word	0x40020800

0800a578 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800a57e:	1d3b      	adds	r3, r7, #4
 800a580:	2200      	movs	r2, #0
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	605a      	str	r2, [r3, #4]
 800a586:	609a      	str	r2, [r3, #8]
 800a588:	60da      	str	r2, [r3, #12]
 800a58a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800a58c:	4b23      	ldr	r3, [pc, #140]	; (800a61c <HAL_FMC_MspInit+0xa4>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d13e      	bne.n	800a612 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 800a594:	4b21      	ldr	r3, [pc, #132]	; (800a61c <HAL_FMC_MspInit+0xa4>)
 800a596:	2201      	movs	r2, #1
 800a598:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a59a:	4b21      	ldr	r3, [pc, #132]	; (800a620 <HAL_FMC_MspInit+0xa8>)
 800a59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59e:	4a20      	ldr	r2, [pc, #128]	; (800a620 <HAL_FMC_MspInit+0xa8>)
 800a5a0:	f043 0301 	orr.w	r3, r3, #1
 800a5a4:	6393      	str	r3, [r2, #56]	; 0x38
 800a5a6:	4b1e      	ldr	r3, [pc, #120]	; (800a620 <HAL_FMC_MspInit+0xa8>)
 800a5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	603b      	str	r3, [r7, #0]
 800a5b0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800a5b2:	2307      	movs	r3, #7
 800a5b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a5c2:	230c      	movs	r3, #12
 800a5c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a5c6:	1d3b      	adds	r3, r7, #4
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4816      	ldr	r0, [pc, #88]	; (800a624 <HAL_FMC_MspInit+0xac>)
 800a5cc:	f002 fe74 	bl	800d2b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800a5d0:	f64f 7380 	movw	r3, #65408	; 0xff80
 800a5d4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a5e2:	230c      	movs	r3, #12
 800a5e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a5e6:	1d3b      	adds	r3, r7, #4
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	480f      	ldr	r0, [pc, #60]	; (800a628 <HAL_FMC_MspInit+0xb0>)
 800a5ec:	f002 fe64 	bl	800d2b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800a5f0:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800a5f4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5fe:	2303      	movs	r3, #3
 800a600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a602:	230c      	movs	r3, #12
 800a604:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a606:	1d3b      	adds	r3, r7, #4
 800a608:	4619      	mov	r1, r3
 800a60a:	4808      	ldr	r0, [pc, #32]	; (800a62c <HAL_FMC_MspInit+0xb4>)
 800a60c:	f002 fe54 	bl	800d2b8 <HAL_GPIO_Init>
 800a610:	e000      	b.n	800a614 <HAL_FMC_MspInit+0x9c>
    return;
 800a612:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800a614:	3718      	adds	r7, #24
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	200019c4 	.word	0x200019c4
 800a620:	40023800 	.word	0x40023800
 800a624:	40021400 	.word	0x40021400
 800a628:	40021000 	.word	0x40021000
 800a62c:	40020c00 	.word	0x40020c00

0800a630 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800a638:	f7ff ff9e 	bl	800a578 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800a63c:	bf00      	nop
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b08e      	sub	sp, #56	; 0x38
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800a64c:	2300      	movs	r3, #0
 800a64e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800a650:	2300      	movs	r3, #0
 800a652:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a654:	4b33      	ldr	r3, [pc, #204]	; (800a724 <HAL_InitTick+0xe0>)
 800a656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a658:	4a32      	ldr	r2, [pc, #200]	; (800a724 <HAL_InitTick+0xe0>)
 800a65a:	f043 0310 	orr.w	r3, r3, #16
 800a65e:	6413      	str	r3, [r2, #64]	; 0x40
 800a660:	4b30      	ldr	r3, [pc, #192]	; (800a724 <HAL_InitTick+0xe0>)
 800a662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a664:	f003 0310 	and.w	r3, r3, #16
 800a668:	60fb      	str	r3, [r7, #12]
 800a66a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a66c:	f107 0210 	add.w	r2, r7, #16
 800a670:	f107 0314 	add.w	r3, r7, #20
 800a674:	4611      	mov	r1, r2
 800a676:	4618      	mov	r0, r3
 800a678:	f003 fcd6 	bl	800e028 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800a680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a682:	2b00      	cmp	r3, #0
 800a684:	d103      	bne.n	800a68e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800a686:	f003 fca7 	bl	800dfd8 <HAL_RCC_GetPCLK1Freq>
 800a68a:	6378      	str	r0, [r7, #52]	; 0x34
 800a68c:	e004      	b.n	800a698 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800a68e:	f003 fca3 	bl	800dfd8 <HAL_RCC_GetPCLK1Freq>
 800a692:	4603      	mov	r3, r0
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69a:	4a23      	ldr	r2, [pc, #140]	; (800a728 <HAL_InitTick+0xe4>)
 800a69c:	fba2 2303 	umull	r2, r3, r2, r3
 800a6a0:	0c9b      	lsrs	r3, r3, #18
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a6a6:	4b21      	ldr	r3, [pc, #132]	; (800a72c <HAL_InitTick+0xe8>)
 800a6a8:	4a21      	ldr	r2, [pc, #132]	; (800a730 <HAL_InitTick+0xec>)
 800a6aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800a6ac:	4b1f      	ldr	r3, [pc, #124]	; (800a72c <HAL_InitTick+0xe8>)
 800a6ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a6b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a6b4:	4a1d      	ldr	r2, [pc, #116]	; (800a72c <HAL_InitTick+0xe8>)
 800a6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a6ba:	4b1c      	ldr	r3, [pc, #112]	; (800a72c <HAL_InitTick+0xe8>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a6c0:	4b1a      	ldr	r3, [pc, #104]	; (800a72c <HAL_InitTick+0xe8>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a6c6:	4b19      	ldr	r3, [pc, #100]	; (800a72c <HAL_InitTick+0xe8>)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800a6cc:	4817      	ldr	r0, [pc, #92]	; (800a72c <HAL_InitTick+0xe8>)
 800a6ce:	f004 f915 	bl	800e8fc <HAL_TIM_Base_Init>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800a6d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d11b      	bne.n	800a718 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800a6e0:	4812      	ldr	r0, [pc, #72]	; (800a72c <HAL_InitTick+0xe8>)
 800a6e2:	f004 f963 	bl	800e9ac <HAL_TIM_Base_Start_IT>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800a6ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d111      	bne.n	800a718 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a6f4:	2036      	movs	r0, #54	; 0x36
 800a6f6:	f001 fb03 	bl	800bd00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b0f      	cmp	r3, #15
 800a6fe:	d808      	bhi.n	800a712 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800a700:	2200      	movs	r2, #0
 800a702:	6879      	ldr	r1, [r7, #4]
 800a704:	2036      	movs	r0, #54	; 0x36
 800a706:	f001 fadf 	bl	800bcc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a70a:	4a0a      	ldr	r2, [pc, #40]	; (800a734 <HAL_InitTick+0xf0>)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	e002      	b.n	800a718 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800a718:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3738      	adds	r7, #56	; 0x38
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	40023800 	.word	0x40023800
 800a728:	431bde83 	.word	0x431bde83
 800a72c:	200019c8 	.word	0x200019c8
 800a730:	40001000 	.word	0x40001000
 800a734:	2000000c 	.word	0x2000000c

0800a738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a738:	b480      	push	{r7}
 800a73a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a73c:	e7fe      	b.n	800a73c <NMI_Handler+0x4>

0800a73e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a73e:	b480      	push	{r7}
 800a740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a742:	e7fe      	b.n	800a742 <HardFault_Handler+0x4>

0800a744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a744:	b480      	push	{r7}
 800a746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a748:	e7fe      	b.n	800a748 <MemManage_Handler+0x4>

0800a74a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a74a:	b480      	push	{r7}
 800a74c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a74e:	e7fe      	b.n	800a74e <BusFault_Handler+0x4>

0800a750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a750:	b480      	push	{r7}
 800a752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a754:	e7fe      	b.n	800a754 <UsageFault_Handler+0x4>

0800a756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a756:	b480      	push	{r7}
 800a758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a75a:	bf00      	nop
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800a768:	4802      	ldr	r0, [pc, #8]	; (800a774 <CAN1_RX0_IRQHandler+0x10>)
 800a76a:	f000 ffa1 	bl	800b6b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800a76e:	bf00      	nop
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	200004e4 	.word	0x200004e4

0800a778 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a77c:	4802      	ldr	r0, [pc, #8]	; (800a788 <USART1_IRQHandler+0x10>)
 800a77e:	f004 fe59 	bl	800f434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a782:	bf00      	nop
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	20000690 	.word	0x20000690

0800a78c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800a790:	4802      	ldr	r0, [pc, #8]	; (800a79c <USART3_IRQHandler+0x10>)
 800a792:	f004 fe4f 	bl	800f434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800a796:	bf00      	nop
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20000718 	.word	0x20000718

0800a7a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800a7a4:	4802      	ldr	r0, [pc, #8]	; (800a7b0 <UART4_IRQHandler+0x10>)
 800a7a6:	f004 fe45 	bl	800f434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800a7aa:	bf00      	nop
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20000580 	.word	0x20000580

0800a7b4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800a7b8:	4802      	ldr	r0, [pc, #8]	; (800a7c4 <UART5_IRQHandler+0x10>)
 800a7ba:	f004 fe3b 	bl	800f434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800a7be:	bf00      	nop
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20000608 	.word	0x20000608

0800a7c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a7cc:	4802      	ldr	r0, [pc, #8]	; (800a7d8 <TIM6_DAC_IRQHandler+0x10>)
 800a7ce:	f004 f965 	bl	800ea9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a7d2:	bf00      	nop
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	200019c8 	.word	0x200019c8

0800a7dc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800a7e0:	4802      	ldr	r0, [pc, #8]	; (800a7ec <TIM7_IRQHandler+0x10>)
 800a7e2:	f004 f95b 	bl	800ea9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800a7e6:	bf00      	nop
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	20000534 	.word	0x20000534

0800a7f0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800a7f4:	4802      	ldr	r0, [pc, #8]	; (800a800 <ETH_IRQHandler+0x10>)
 800a7f6:	f001 fe8b 	bl	800c510 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800a7fa:	bf00      	nop
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	200063f8 	.word	0x200063f8

0800a804 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800a808:	4802      	ldr	r0, [pc, #8]	; (800a814 <USART6_IRQHandler+0x10>)
 800a80a:	f004 fe13 	bl	800f434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800a80e:	bf00      	nop
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	200007a0 	.word	0x200007a0

0800a818 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a818:	b480      	push	{r7}
 800a81a:	af00      	add	r7, sp, #0
	return 1;
 800a81c:	2301      	movs	r3, #1
}
 800a81e:	4618      	mov	r0, r3
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <_kill>:

int _kill(int pid, int sig)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a832:	4b05      	ldr	r3, [pc, #20]	; (800a848 <_kill+0x20>)
 800a834:	2216      	movs	r2, #22
 800a836:	601a      	str	r2, [r3, #0]
	return -1;
 800a838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	2000c108 	.word	0x2000c108

0800a84c <_exit>:

void _exit (int status)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f7ff ffe5 	bl	800a828 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a85e:	e7fe      	b.n	800a85e <_exit+0x12>

0800a860 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a86c:	2300      	movs	r3, #0
 800a86e:	617b      	str	r3, [r7, #20]
 800a870:	e00a      	b.n	800a888 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a872:	f3af 8000 	nop.w
 800a876:	4601      	mov	r1, r0
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	1c5a      	adds	r2, r3, #1
 800a87c:	60ba      	str	r2, [r7, #8]
 800a87e:	b2ca      	uxtb	r2, r1
 800a880:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	3301      	adds	r3, #1
 800a886:	617b      	str	r3, [r7, #20]
 800a888:	697a      	ldr	r2, [r7, #20]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	dbf0      	blt.n	800a872 <_read+0x12>
	}

return len;
 800a890:	687b      	ldr	r3, [r7, #4]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3718      	adds	r7, #24
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b086      	sub	sp, #24
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	60f8      	str	r0, [r7, #12]
 800a8a2:	60b9      	str	r1, [r7, #8]
 800a8a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	617b      	str	r3, [r7, #20]
 800a8aa:	e009      	b.n	800a8c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	1c5a      	adds	r2, r3, #1
 800a8b0:	60ba      	str	r2, [r7, #8]
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	617b      	str	r3, [r7, #20]
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	dbf1      	blt.n	800a8ac <_write+0x12>
	}
	return len;
 800a8c8:	687b      	ldr	r3, [r7, #4]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <_close>:

int _close(int file)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
	return -1;
 800a8da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	370c      	adds	r7, #12
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	b083      	sub	sp, #12
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a8fa:	605a      	str	r2, [r3, #4]
	return 0;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <_isatty>:

int _isatty(int file)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
	return 1;
 800a912:	2301      	movs	r3, #1
}
 800a914:	4618      	mov	r0, r3
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
	return 0;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
	...

0800a93c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a940:	4b06      	ldr	r3, [pc, #24]	; (800a95c <SystemInit+0x20>)
 800a942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a946:	4a05      	ldr	r2, [pc, #20]	; (800a95c <SystemInit+0x20>)
 800a948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a94c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a950:	bf00      	nop
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	e000ed00 	.word	0xe000ed00

0800a960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a960:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a998 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a964:	480d      	ldr	r0, [pc, #52]	; (800a99c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a966:	490e      	ldr	r1, [pc, #56]	; (800a9a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a968:	4a0e      	ldr	r2, [pc, #56]	; (800a9a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a96a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a96c:	e002      	b.n	800a974 <LoopCopyDataInit>

0800a96e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a96e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a972:	3304      	adds	r3, #4

0800a974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a978:	d3f9      	bcc.n	800a96e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a97a:	4a0b      	ldr	r2, [pc, #44]	; (800a9a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a97c:	4c0b      	ldr	r4, [pc, #44]	; (800a9ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800a97e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a980:	e001      	b.n	800a986 <LoopFillZerobss>

0800a982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a984:	3204      	adds	r2, #4

0800a986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a988:	d3fb      	bcc.n	800a982 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a98a:	f7ff ffd7 	bl	800a93c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a98e:	f019 f89f 	bl	8023ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a992:	f7ff fa87 	bl	8009ea4 <main>
  bx  lr    
 800a996:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a998:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800a99c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a9a0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800a9a4:	08028b98 	.word	0x08028b98
  ldr r2, =_sbss
 800a9a8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800a9ac:	2000c19c 	.word	0x2000c19c

0800a9b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a9b0:	e7fe      	b.n	800a9b0 <ADC_IRQHandler>

0800a9b2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00b      	beq.n	800a9da <LAN8742_RegisterBusIO+0x28>
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d007      	beq.n	800a9da <LAN8742_RegisterBusIO+0x28>
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <LAN8742_RegisterBusIO+0x28>
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d102      	bne.n	800a9e0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800a9da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9de:	e014      	b.n	800aa0a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	68da      	ldr	r2, [r3, #12]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	691a      	ldr	r2, [r3, #16]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	370c      	adds	r7, #12
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b086      	sub	sp, #24
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	60fb      	str	r3, [r7, #12]
 800aa22:	2300      	movs	r3, #0
 800aa24:	60bb      	str	r3, [r7, #8]
 800aa26:	2300      	movs	r3, #0
 800aa28:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d17c      	bne.n	800ab30 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2220      	movs	r2, #32
 800aa48:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	617b      	str	r3, [r7, #20]
 800aa4e:	e01c      	b.n	800aa8a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	695b      	ldr	r3, [r3, #20]
 800aa54:	f107 0208 	add.w	r2, r7, #8
 800aa58:	2112      	movs	r1, #18
 800aa5a:	6978      	ldr	r0, [r7, #20]
 800aa5c:	4798      	blx	r3
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	da03      	bge.n	800aa6c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800aa64:	f06f 0304 	mvn.w	r3, #4
 800aa68:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800aa6a:	e00b      	b.n	800aa84 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	f003 031f 	and.w	r3, r3, #31
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d105      	bne.n	800aa84 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	697a      	ldr	r2, [r7, #20]
 800aa7c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	613b      	str	r3, [r7, #16]
         break;
 800aa82:	e005      	b.n	800aa90 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	3301      	adds	r3, #1
 800aa88:	617b      	str	r3, [r7, #20]
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	2b1f      	cmp	r3, #31
 800aa8e:	d9df      	bls.n	800aa50 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b1f      	cmp	r3, #31
 800aa96:	d902      	bls.n	800aa9e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800aa98:	f06f 0302 	mvn.w	r3, #2
 800aa9c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d145      	bne.n	800ab30 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	6810      	ldr	r0, [r2, #0]
 800aaac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800aab0:	2100      	movs	r1, #0
 800aab2:	4798      	blx	r3
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	db37      	blt.n	800ab2a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	695b      	ldr	r3, [r3, #20]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	6810      	ldr	r0, [r2, #0]
 800aac2:	f107 0208 	add.w	r2, r7, #8
 800aac6:	2100      	movs	r1, #0
 800aac8:	4798      	blx	r3
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	db28      	blt.n	800ab22 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	4798      	blx	r3
 800aad6:	4603      	mov	r3, r0
 800aad8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800aada:	e01c      	b.n	800ab16 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	4798      	blx	r3
 800aae2:	4603      	mov	r3, r0
 800aae4:	461a      	mov	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800aaee:	d80e      	bhi.n	800ab0e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	695b      	ldr	r3, [r3, #20]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	6810      	ldr	r0, [r2, #0]
 800aaf8:	f107 0208 	add.w	r2, r7, #8
 800aafc:	2100      	movs	r1, #0
 800aafe:	4798      	blx	r3
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	da07      	bge.n	800ab16 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800ab06:	f06f 0304 	mvn.w	r3, #4
 800ab0a:	613b      	str	r3, [r7, #16]
                 break;
 800ab0c:	e010      	b.n	800ab30 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800ab0e:	f06f 0301 	mvn.w	r3, #1
 800ab12:	613b      	str	r3, [r7, #16]
               break;
 800ab14:	e00c      	b.n	800ab30 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1dd      	bne.n	800aadc <LAN8742_Init+0xc6>
 800ab20:	e006      	b.n	800ab30 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800ab22:	f06f 0304 	mvn.w	r3, #4
 800ab26:	613b      	str	r3, [r7, #16]
 800ab28:	e002      	b.n	800ab30 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800ab2a:	f06f 0303 	mvn.w	r3, #3
 800ab2e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d112      	bne.n	800ab5c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	4798      	blx	r3
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800ab40:	bf00      	nop
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	699b      	ldr	r3, [r3, #24]
 800ab46:	4798      	blx	r3
 800ab48:	4603      	mov	r3, r0
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ab54:	d9f5      	bls.n	800ab42 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 }
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b084      	sub	sp, #16
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	6810      	ldr	r0, [r2, #0]
 800ab7a:	f107 020c 	add.w	r2, r7, #12
 800ab7e:	2101      	movs	r1, #1
 800ab80:	4798      	blx	r3
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	da02      	bge.n	800ab8e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800ab88:	f06f 0304 	mvn.w	r3, #4
 800ab8c:	e06e      	b.n	800ac6c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	6810      	ldr	r0, [r2, #0]
 800ab96:	f107 020c 	add.w	r2, r7, #12
 800ab9a:	2101      	movs	r1, #1
 800ab9c:	4798      	blx	r3
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	da02      	bge.n	800abaa <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800aba4:	f06f 0304 	mvn.w	r3, #4
 800aba8:	e060      	b.n	800ac6c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f003 0304 	and.w	r3, r3, #4
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800abb4:	2301      	movs	r3, #1
 800abb6:	e059      	b.n	800ac6c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	695b      	ldr	r3, [r3, #20]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	6810      	ldr	r0, [r2, #0]
 800abc0:	f107 020c 	add.w	r2, r7, #12
 800abc4:	2100      	movs	r1, #0
 800abc6:	4798      	blx	r3
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	da02      	bge.n	800abd4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800abce:	f06f 0304 	mvn.w	r3, #4
 800abd2:	e04b      	b.n	800ac6c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d11b      	bne.n	800ac16 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d006      	beq.n	800abf6 <LAN8742_GetLinkState+0x90>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800abf2:	2302      	movs	r3, #2
 800abf4:	e03a      	b.n	800ac6c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e033      	b.n	800ac6c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d001      	beq.n	800ac12 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800ac0e:	2304      	movs	r3, #4
 800ac10:	e02c      	b.n	800ac6c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800ac12:	2305      	movs	r3, #5
 800ac14:	e02a      	b.n	800ac6c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	695b      	ldr	r3, [r3, #20]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	6810      	ldr	r0, [r2, #0]
 800ac1e:	f107 020c 	add.w	r2, r7, #12
 800ac22:	211f      	movs	r1, #31
 800ac24:	4798      	blx	r3
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	da02      	bge.n	800ac32 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800ac2c:	f06f 0304 	mvn.w	r3, #4
 800ac30:	e01c      	b.n	800ac6c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d101      	bne.n	800ac40 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800ac3c:	2306      	movs	r3, #6
 800ac3e:	e015      	b.n	800ac6c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f003 031c 	and.w	r3, r3, #28
 800ac46:	2b18      	cmp	r3, #24
 800ac48:	d101      	bne.n	800ac4e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	e00e      	b.n	800ac6c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f003 031c 	and.w	r3, r3, #28
 800ac54:	2b08      	cmp	r3, #8
 800ac56:	d101      	bne.n	800ac5c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e007      	b.n	800ac6c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f003 031c 	and.w	r3, r3, #28
 800ac62:	2b14      	cmp	r3, #20
 800ac64:	d101      	bne.n	800ac6a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800ac66:	2304      	movs	r3, #4
 800ac68:	e000      	b.n	800ac6c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800ac6a:	2305      	movs	r3, #5
    }				
  }
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ac78:	2003      	movs	r0, #3
 800ac7a:	f001 f81a 	bl	800bcb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ac7e:	200f      	movs	r0, #15
 800ac80:	f7ff fce0 	bl	800a644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ac84:	f7ff fa16 	bl	800a0b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	bd80      	pop	{r7, pc}
	...

0800ac90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ac90:	b480      	push	{r7}
 800ac92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ac94:	4b06      	ldr	r3, [pc, #24]	; (800acb0 <HAL_IncTick+0x20>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	461a      	mov	r2, r3
 800ac9a:	4b06      	ldr	r3, [pc, #24]	; (800acb4 <HAL_IncTick+0x24>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4413      	add	r3, r2
 800aca0:	4a04      	ldr	r2, [pc, #16]	; (800acb4 <HAL_IncTick+0x24>)
 800aca2:	6013      	str	r3, [r2, #0]
}
 800aca4:	bf00      	nop
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	20000010 	.word	0x20000010
 800acb4:	20001a14 	.word	0x20001a14

0800acb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800acb8:	b480      	push	{r7}
 800acba:	af00      	add	r7, sp, #0
  return uwTick;
 800acbc:	4b03      	ldr	r3, [pc, #12]	; (800accc <HAL_GetTick+0x14>)
 800acbe:	681b      	ldr	r3, [r3, #0]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	20001a14 	.word	0x20001a14

0800acd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800acd8:	f7ff ffee 	bl	800acb8 <HAL_GetTick>
 800acdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ace8:	d005      	beq.n	800acf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800acea:	4b0a      	ldr	r3, [pc, #40]	; (800ad14 <HAL_Delay+0x44>)
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	4413      	add	r3, r2
 800acf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800acf6:	bf00      	nop
 800acf8:	f7ff ffde 	bl	800acb8 <HAL_GetTick>
 800acfc:	4602      	mov	r2, r0
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d8f7      	bhi.n	800acf8 <HAL_Delay+0x28>
  {
  }
}
 800ad08:	bf00      	nop
 800ad0a:	bf00      	nop
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	20000010 	.word	0x20000010

0800ad18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e0ed      	b.n	800af06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d102      	bne.n	800ad3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff f9e4 	bl	800a104 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f042 0201 	orr.w	r2, r2, #1
 800ad4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ad4c:	f7ff ffb4 	bl	800acb8 <HAL_GetTick>
 800ad50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ad52:	e012      	b.n	800ad7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ad54:	f7ff ffb0 	bl	800acb8 <HAL_GetTick>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	2b0a      	cmp	r3, #10
 800ad60:	d90b      	bls.n	800ad7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2205      	movs	r2, #5
 800ad72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e0c5      	b.n	800af06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	f003 0301 	and.w	r3, r3, #1
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d0e5      	beq.n	800ad54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f022 0202 	bic.w	r2, r2, #2
 800ad96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ad98:	f7ff ff8e 	bl	800acb8 <HAL_GetTick>
 800ad9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ad9e:	e012      	b.n	800adc6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ada0:	f7ff ff8a 	bl	800acb8 <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	2b0a      	cmp	r3, #10
 800adac:	d90b      	bls.n	800adc6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2205      	movs	r2, #5
 800adbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e09f      	b.n	800af06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	f003 0302 	and.w	r3, r3, #2
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1e5      	bne.n	800ada0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	7e1b      	ldrb	r3, [r3, #24]
 800add8:	2b01      	cmp	r3, #1
 800adda:	d108      	bne.n	800adee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	e007      	b.n	800adfe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800adfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	7e5b      	ldrb	r3, [r3, #25]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d108      	bne.n	800ae18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	e007      	b.n	800ae28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	7e9b      	ldrb	r3, [r3, #26]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d108      	bne.n	800ae42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f042 0220 	orr.w	r2, r2, #32
 800ae3e:	601a      	str	r2, [r3, #0]
 800ae40:	e007      	b.n	800ae52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f022 0220 	bic.w	r2, r2, #32
 800ae50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	7edb      	ldrb	r3, [r3, #27]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d108      	bne.n	800ae6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f022 0210 	bic.w	r2, r2, #16
 800ae68:	601a      	str	r2, [r3, #0]
 800ae6a:	e007      	b.n	800ae7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f042 0210 	orr.w	r2, r2, #16
 800ae7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	7f1b      	ldrb	r3, [r3, #28]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d108      	bne.n	800ae96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f042 0208 	orr.w	r2, r2, #8
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	e007      	b.n	800aea6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f022 0208 	bic.w	r2, r2, #8
 800aea4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	7f5b      	ldrb	r3, [r3, #29]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d108      	bne.n	800aec0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f042 0204 	orr.w	r2, r2, #4
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	e007      	b.n	800aed0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f022 0204 	bic.w	r2, r2, #4
 800aece:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	689a      	ldr	r2, [r3, #8]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	431a      	orrs	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	431a      	orrs	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	ea42 0103 	orr.w	r1, r2, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	1e5a      	subs	r2, r3, #1
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	430a      	orrs	r2, r1
 800aef4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
	...

0800af10 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800af10:	b480      	push	{r7}
 800af12:	b087      	sub	sp, #28
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af26:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800af28:	7cfb      	ldrb	r3, [r7, #19]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d003      	beq.n	800af36 <HAL_CAN_ConfigFilter+0x26>
 800af2e:	7cfb      	ldrb	r3, [r7, #19]
 800af30:	2b02      	cmp	r3, #2
 800af32:	f040 80be 	bne.w	800b0b2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800af36:	4b65      	ldr	r3, [pc, #404]	; (800b0cc <HAL_CAN_ConfigFilter+0x1bc>)
 800af38:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800af40:	f043 0201 	orr.w	r2, r3, #1
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800af50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af64:	021b      	lsls	r3, r3, #8
 800af66:	431a      	orrs	r2, r3
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	f003 031f 	and.w	r3, r3, #31
 800af76:	2201      	movs	r2, #1
 800af78:	fa02 f303 	lsl.w	r3, r2, r3
 800af7c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	43db      	mvns	r3, r3
 800af88:	401a      	ands	r2, r3
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	69db      	ldr	r3, [r3, #28]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d123      	bne.n	800afe0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	43db      	mvns	r3, r3
 800afa2:	401a      	ands	r2, r3
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800afba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	3248      	adds	r2, #72	; 0x48
 800afc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800afd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800afd6:	6979      	ldr	r1, [r7, #20]
 800afd8:	3348      	adds	r3, #72	; 0x48
 800afda:	00db      	lsls	r3, r3, #3
 800afdc:	440b      	add	r3, r1
 800afde:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	69db      	ldr	r3, [r3, #28]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d122      	bne.n	800b02e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	431a      	orrs	r2, r3
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b008:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	3248      	adds	r2, #72	; 0x48
 800b00e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b022:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b024:	6979      	ldr	r1, [r7, #20]
 800b026:	3348      	adds	r3, #72	; 0x48
 800b028:	00db      	lsls	r3, r3, #3
 800b02a:	440b      	add	r3, r1
 800b02c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d109      	bne.n	800b04a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	43db      	mvns	r3, r3
 800b040:	401a      	ands	r2, r3
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800b048:	e007      	b.n	800b05a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	431a      	orrs	r2, r3
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d109      	bne.n	800b076 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	43db      	mvns	r3, r3
 800b06c:	401a      	ands	r2, r3
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b074:	e007      	b.n	800b086 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	431a      	orrs	r2, r3
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d107      	bne.n	800b09e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	431a      	orrs	r2, r3
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b0a4:	f023 0201 	bic.w	r2, r3, #1
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	e006      	b.n	800b0c0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
  }
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	371c      	adds	r7, #28
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr
 800b0cc:	40006400 	.word	0x40006400

0800b0d0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d12e      	bne.n	800b142 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2202      	movs	r2, #2
 800b0e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f022 0201 	bic.w	r2, r2, #1
 800b0fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b0fc:	f7ff fddc 	bl	800acb8 <HAL_GetTick>
 800b100:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b102:	e012      	b.n	800b12a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b104:	f7ff fdd8 	bl	800acb8 <HAL_GetTick>
 800b108:	4602      	mov	r2, r0
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	2b0a      	cmp	r3, #10
 800b110:	d90b      	bls.n	800b12a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b116:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2205      	movs	r2, #5
 800b122:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	e012      	b.n	800b150 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	f003 0301 	and.w	r3, r3, #1
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1e5      	bne.n	800b104 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	e006      	b.n	800b150 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b146:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
  }
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d133      	bne.n	800b1d4 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f042 0201 	orr.w	r2, r2, #1
 800b17a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b17c:	f7ff fd9c 	bl	800acb8 <HAL_GetTick>
 800b180:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b182:	e012      	b.n	800b1aa <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b184:	f7ff fd98 	bl	800acb8 <HAL_GetTick>
 800b188:	4602      	mov	r2, r0
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	1ad3      	subs	r3, r2, r3
 800b18e:	2b0a      	cmp	r3, #10
 800b190:	d90b      	bls.n	800b1aa <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b196:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2205      	movs	r2, #5
 800b1a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e01b      	b.n	800b1e2 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	f003 0301 	and.w	r3, r3, #1
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d0e5      	beq.n	800b184 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f022 0202 	bic.w	r2, r2, #2
 800b1c6:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	e006      	b.n	800b1e2 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
  }
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800b1ea:	b480      	push	{r7}
 800b1ec:	b089      	sub	sp, #36	; 0x24
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	60f8      	str	r0, [r7, #12]
 800b1f2:	60b9      	str	r1, [r7, #8]
 800b1f4:	607a      	str	r2, [r7, #4]
 800b1f6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b1fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800b208:	7ffb      	ldrb	r3, [r7, #31]
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d003      	beq.n	800b216 <HAL_CAN_AddTxMessage+0x2c>
 800b20e:	7ffb      	ldrb	r3, [r7, #31]
 800b210:	2b02      	cmp	r3, #2
 800b212:	f040 80ad 	bne.w	800b370 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d10a      	bne.n	800b236 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b226:	2b00      	cmp	r3, #0
 800b228:	d105      	bne.n	800b236 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 8095 	beq.w	800b360 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	0e1b      	lsrs	r3, r3, #24
 800b23a:	f003 0303 	and.w	r3, r3, #3
 800b23e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800b240:	2201      	movs	r2, #1
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	409a      	lsls	r2, r3
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10d      	bne.n	800b26e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b25c:	68f9      	ldr	r1, [r7, #12]
 800b25e:	6809      	ldr	r1, [r1, #0]
 800b260:	431a      	orrs	r2, r3
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	3318      	adds	r3, #24
 800b266:	011b      	lsls	r3, r3, #4
 800b268:	440b      	add	r3, r1
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	e00f      	b.n	800b28e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b278:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b27e:	68f9      	ldr	r1, [r7, #12]
 800b280:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800b282:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	3318      	adds	r3, #24
 800b288:	011b      	lsls	r3, r3, #4
 800b28a:	440b      	add	r3, r1
 800b28c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	6819      	ldr	r1, [r3, #0]
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	691a      	ldr	r2, [r3, #16]
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	3318      	adds	r3, #24
 800b29a:	011b      	lsls	r3, r3, #4
 800b29c:	440b      	add	r3, r1
 800b29e:	3304      	adds	r3, #4
 800b2a0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	7d1b      	ldrb	r3, [r3, #20]
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d111      	bne.n	800b2ce <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	3318      	adds	r3, #24
 800b2b2:	011b      	lsls	r3, r3, #4
 800b2b4:	4413      	add	r3, r2
 800b2b6:	3304      	adds	r3, #4
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	6811      	ldr	r1, [r2, #0]
 800b2be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	3318      	adds	r3, #24
 800b2c6:	011b      	lsls	r3, r3, #4
 800b2c8:	440b      	add	r3, r1
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	3307      	adds	r3, #7
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	061a      	lsls	r2, r3, #24
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	3306      	adds	r3, #6
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	041b      	lsls	r3, r3, #16
 800b2de:	431a      	orrs	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3305      	adds	r3, #5
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	021b      	lsls	r3, r3, #8
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	3204      	adds	r2, #4
 800b2ee:	7812      	ldrb	r2, [r2, #0]
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	6811      	ldr	r1, [r2, #0]
 800b2f6:	ea43 0200 	orr.w	r2, r3, r0
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	011b      	lsls	r3, r3, #4
 800b2fe:	440b      	add	r3, r1
 800b300:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800b304:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	3303      	adds	r3, #3
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	061a      	lsls	r2, r3, #24
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	3302      	adds	r3, #2
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	041b      	lsls	r3, r3, #16
 800b316:	431a      	orrs	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	3301      	adds	r3, #1
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	021b      	lsls	r3, r3, #8
 800b320:	4313      	orrs	r3, r2
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	7812      	ldrb	r2, [r2, #0]
 800b326:	4610      	mov	r0, r2
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	6811      	ldr	r1, [r2, #0]
 800b32c:	ea43 0200 	orr.w	r2, r3, r0
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	011b      	lsls	r3, r3, #4
 800b334:	440b      	add	r3, r1
 800b336:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b33a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	3318      	adds	r3, #24
 800b344:	011b      	lsls	r3, r3, #4
 800b346:	4413      	add	r3, r2
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	6811      	ldr	r1, [r2, #0]
 800b34e:	f043 0201 	orr.w	r2, r3, #1
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	3318      	adds	r3, #24
 800b356:	011b      	lsls	r3, r3, #4
 800b358:	440b      	add	r3, r1
 800b35a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	e00e      	b.n	800b37e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b364:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	e006      	b.n	800b37e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b374:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
  }
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3724      	adds	r7, #36	; 0x24
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800b38a:	b480      	push	{r7}
 800b38c:	b085      	sub	sp, #20
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800b392:	2300      	movs	r3, #0
 800b394:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b39c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800b39e:	7afb      	ldrb	r3, [r7, #11]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d002      	beq.n	800b3aa <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800b3a4:	7afb      	ldrb	r3, [r7, #11]
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d11d      	bne.n	800b3e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d002      	beq.n	800b3be <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d002      	beq.n	800b3e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b408:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800b40a:	7afb      	ldrb	r3, [r7, #11]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d002      	beq.n	800b416 <HAL_CAN_IsTxMessagePending+0x22>
 800b410:	7afb      	ldrb	r3, [r7, #11]
 800b412:	2b02      	cmp	r3, #2
 800b414:	d10b      	bne.n	800b42e <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	689a      	ldr	r2, [r3, #8]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	069b      	lsls	r3, r3, #26
 800b420:	401a      	ands	r2, r3
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	069b      	lsls	r3, r3, #26
 800b426:	429a      	cmp	r2, r3
 800b428:	d001      	beq.n	800b42e <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800b42a:	2301      	movs	r3, #1
 800b42c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800b42e:	68fb      	ldr	r3, [r7, #12]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3714      	adds	r7, #20
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800b43c:	b480      	push	{r7}
 800b43e:	b087      	sub	sp, #28
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]
 800b448:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b450:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800b452:	7dfb      	ldrb	r3, [r7, #23]
 800b454:	2b01      	cmp	r3, #1
 800b456:	d003      	beq.n	800b460 <HAL_CAN_GetRxMessage+0x24>
 800b458:	7dfb      	ldrb	r3, [r7, #23]
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	f040 80f3 	bne.w	800b646 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d10e      	bne.n	800b484 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	f003 0303 	and.w	r3, r3, #3
 800b470:	2b00      	cmp	r3, #0
 800b472:	d116      	bne.n	800b4a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b478:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	e0e7      	b.n	800b654 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	f003 0303 	and.w	r3, r3, #3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d107      	bne.n	800b4a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e0d8      	b.n	800b654 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	331b      	adds	r3, #27
 800b4aa:	011b      	lsls	r3, r3, #4
 800b4ac:	4413      	add	r3, r2
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 0204 	and.w	r2, r3, #4
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10c      	bne.n	800b4da <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	331b      	adds	r3, #27
 800b4c8:	011b      	lsls	r3, r3, #4
 800b4ca:	4413      	add	r3, r2
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	0d5b      	lsrs	r3, r3, #21
 800b4d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	601a      	str	r2, [r3, #0]
 800b4d8:	e00b      	b.n	800b4f2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	331b      	adds	r3, #27
 800b4e2:	011b      	lsls	r3, r3, #4
 800b4e4:	4413      	add	r3, r2
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	08db      	lsrs	r3, r3, #3
 800b4ea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	331b      	adds	r3, #27
 800b4fa:	011b      	lsls	r3, r3, #4
 800b4fc:	4413      	add	r3, r2
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 0202 	and.w	r2, r3, #2
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	331b      	adds	r3, #27
 800b510:	011b      	lsls	r3, r3, #4
 800b512:	4413      	add	r3, r2
 800b514:	3304      	adds	r3, #4
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 020f 	and.w	r2, r3, #15
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	331b      	adds	r3, #27
 800b528:	011b      	lsls	r3, r3, #4
 800b52a:	4413      	add	r3, r2
 800b52c:	3304      	adds	r3, #4
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	0a1b      	lsrs	r3, r3, #8
 800b532:	b2da      	uxtb	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	331b      	adds	r3, #27
 800b540:	011b      	lsls	r3, r3, #4
 800b542:	4413      	add	r3, r2
 800b544:	3304      	adds	r3, #4
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	0c1b      	lsrs	r3, r3, #16
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	011b      	lsls	r3, r3, #4
 800b558:	4413      	add	r3, r2
 800b55a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	b2da      	uxtb	r2, r3
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	011b      	lsls	r3, r3, #4
 800b56e:	4413      	add	r3, r2
 800b570:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	0a1a      	lsrs	r2, r3, #8
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	3301      	adds	r3, #1
 800b57c:	b2d2      	uxtb	r2, r2
 800b57e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	011b      	lsls	r3, r3, #4
 800b588:	4413      	add	r3, r2
 800b58a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	0c1a      	lsrs	r2, r3, #16
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	3302      	adds	r3, #2
 800b596:	b2d2      	uxtb	r2, r2
 800b598:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	011b      	lsls	r3, r3, #4
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	0e1a      	lsrs	r2, r3, #24
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	3303      	adds	r3, #3
 800b5b0:	b2d2      	uxtb	r2, r2
 800b5b2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	011b      	lsls	r3, r3, #4
 800b5bc:	4413      	add	r3, r2
 800b5be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	b2d2      	uxtb	r2, r2
 800b5ca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	011b      	lsls	r3, r3, #4
 800b5d4:	4413      	add	r3, r2
 800b5d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	0a1a      	lsrs	r2, r3, #8
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	3305      	adds	r3, #5
 800b5e2:	b2d2      	uxtb	r2, r2
 800b5e4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	011b      	lsls	r3, r3, #4
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	0c1a      	lsrs	r2, r3, #16
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	3306      	adds	r3, #6
 800b5fc:	b2d2      	uxtb	r2, r2
 800b5fe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	011b      	lsls	r3, r3, #4
 800b608:	4413      	add	r3, r2
 800b60a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	0e1a      	lsrs	r2, r3, #24
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	3307      	adds	r3, #7
 800b616:	b2d2      	uxtb	r2, r2
 800b618:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d108      	bne.n	800b632 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68da      	ldr	r2, [r3, #12]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f042 0220 	orr.w	r2, r2, #32
 800b62e:	60da      	str	r2, [r3, #12]
 800b630:	e007      	b.n	800b642 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	691a      	ldr	r2, [r3, #16]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f042 0220 	orr.w	r2, r2, #32
 800b640:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	e006      	b.n	800b654 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b652:	2301      	movs	r3, #1
  }
}
 800b654:	4618      	mov	r0, r3
 800b656:	371c      	adds	r7, #28
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800b66a:	2300      	movs	r3, #0
 800b66c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b674:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800b676:	7afb      	ldrb	r3, [r7, #11]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d002      	beq.n	800b682 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800b67c:	7afb      	ldrb	r3, [r7, #11]
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d10f      	bne.n	800b6a2 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d106      	bne.n	800b696 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	f003 0303 	and.w	r3, r3, #3
 800b692:	60fb      	str	r3, [r7, #12]
 800b694:	e005      	b.n	800b6a2 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	f003 0303 	and.w	r3, r3, #3
 800b6a0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3714      	adds	r7, #20
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b08a      	sub	sp, #40	; 0x28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	695b      	ldr	r3, [r3, #20]
 800b6c2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800b6ec:	6a3b      	ldr	r3, [r7, #32]
 800b6ee:	f003 0301 	and.w	r3, r3, #1
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d07c      	beq.n	800b7f0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	f003 0301 	and.w	r3, r3, #1
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d023      	beq.n	800b748 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2201      	movs	r2, #1
 800b706:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	f003 0302 	and.w	r3, r3, #2
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d003      	beq.n	800b71a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f983 	bl	800ba1e <HAL_CAN_TxMailbox0CompleteCallback>
 800b718:	e016      	b.n	800b748 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	f003 0304 	and.w	r3, r3, #4
 800b720:	2b00      	cmp	r3, #0
 800b722:	d004      	beq.n	800b72e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b72a:	627b      	str	r3, [r7, #36]	; 0x24
 800b72c:	e00c      	b.n	800b748 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	f003 0308 	and.w	r3, r3, #8
 800b734:	2b00      	cmp	r3, #0
 800b736:	d004      	beq.n	800b742 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b73e:	627b      	str	r3, [r7, #36]	; 0x24
 800b740:	e002      	b.n	800b748 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f989 	bl	800ba5a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d024      	beq.n	800b79c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b75a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b762:	2b00      	cmp	r3, #0
 800b764:	d003      	beq.n	800b76e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 f963 	bl	800ba32 <HAL_CAN_TxMailbox1CompleteCallback>
 800b76c:	e016      	b.n	800b79c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b774:	2b00      	cmp	r3, #0
 800b776:	d004      	beq.n	800b782 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800b778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b77e:	627b      	str	r3, [r7, #36]	; 0x24
 800b780:	e00c      	b.n	800b79c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d004      	beq.n	800b796 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b792:	627b      	str	r3, [r7, #36]	; 0x24
 800b794:	e002      	b.n	800b79c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f969 	bl	800ba6e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d024      	beq.n	800b7f0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b7ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d003      	beq.n	800b7c2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f943 	bl	800ba46 <HAL_CAN_TxMailbox2CompleteCallback>
 800b7c0:	e016      	b.n	800b7f0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d004      	beq.n	800b7d6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7d2:	627b      	str	r3, [r7, #36]	; 0x24
 800b7d4:	e00c      	b.n	800b7f0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d004      	beq.n	800b7ea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800b7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7e6:	627b      	str	r3, [r7, #36]	; 0x24
 800b7e8:	e002      	b.n	800b7f0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f949 	bl	800ba82 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800b7f0:	6a3b      	ldr	r3, [r7, #32]
 800b7f2:	f003 0308 	and.w	r3, r3, #8
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00c      	beq.n	800b814 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f003 0310 	and.w	r3, r3, #16
 800b800:	2b00      	cmp	r3, #0
 800b802:	d007      	beq.n	800b814 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b80a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2210      	movs	r2, #16
 800b812:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	f003 0304 	and.w	r3, r3, #4
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00b      	beq.n	800b836 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f003 0308 	and.w	r3, r3, #8
 800b824:	2b00      	cmp	r3, #0
 800b826:	d006      	beq.n	800b836 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2208      	movs	r2, #8
 800b82e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 f930 	bl	800ba96 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800b836:	6a3b      	ldr	r3, [r7, #32]
 800b838:	f003 0302 	and.w	r3, r3, #2
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d009      	beq.n	800b854 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	f003 0303 	and.w	r3, r3, #3
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d002      	beq.n	800b854 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7fe fa79 	bl	8009d46 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800b854:	6a3b      	ldr	r3, [r7, #32]
 800b856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00c      	beq.n	800b878 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	f003 0310 	and.w	r3, r3, #16
 800b864:	2b00      	cmp	r3, #0
 800b866:	d007      	beq.n	800b878 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800b868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b86e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2210      	movs	r2, #16
 800b876:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800b878:	6a3b      	ldr	r3, [r7, #32]
 800b87a:	f003 0320 	and.w	r3, r3, #32
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00b      	beq.n	800b89a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	f003 0308 	and.w	r3, r3, #8
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d006      	beq.n	800b89a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2208      	movs	r2, #8
 800b892:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 f912 	bl	800babe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800b89a:	6a3b      	ldr	r3, [r7, #32]
 800b89c:	f003 0310 	and.w	r3, r3, #16
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d009      	beq.n	800b8b8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	f003 0303 	and.w	r3, r3, #3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d002      	beq.n	800b8b8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f8f9 	bl	800baaa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800b8b8:	6a3b      	ldr	r3, [r7, #32]
 800b8ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d00b      	beq.n	800b8da <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	f003 0310 	and.w	r3, r3, #16
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d006      	beq.n	800b8da <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2210      	movs	r2, #16
 800b8d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 f8fc 	bl	800bad2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800b8da:	6a3b      	ldr	r3, [r7, #32]
 800b8dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00b      	beq.n	800b8fc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	f003 0308 	and.w	r3, r3, #8
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d006      	beq.n	800b8fc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2208      	movs	r2, #8
 800b8f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 f8f5 	bl	800bae6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800b8fc:	6a3b      	ldr	r3, [r7, #32]
 800b8fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b902:	2b00      	cmp	r3, #0
 800b904:	d07b      	beq.n	800b9fe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	f003 0304 	and.w	r3, r3, #4
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d072      	beq.n	800b9f6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b916:	2b00      	cmp	r3, #0
 800b918:	d008      	beq.n	800b92c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b920:	2b00      	cmp	r3, #0
 800b922:	d003      	beq.n	800b92c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	f043 0301 	orr.w	r3, r3, #1
 800b92a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b92c:	6a3b      	ldr	r3, [r7, #32]
 800b92e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b932:	2b00      	cmp	r3, #0
 800b934:	d008      	beq.n	800b948 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d003      	beq.n	800b948 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800b940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b942:	f043 0302 	orr.w	r3, r3, #2
 800b946:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d008      	beq.n	800b964 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95e:	f043 0304 	orr.w	r3, r3, #4
 800b962:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b964:	6a3b      	ldr	r3, [r7, #32]
 800b966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d043      	beq.n	800b9f6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b974:	2b00      	cmp	r3, #0
 800b976:	d03e      	beq.n	800b9f6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b97e:	2b60      	cmp	r3, #96	; 0x60
 800b980:	d02b      	beq.n	800b9da <HAL_CAN_IRQHandler+0x32a>
 800b982:	2b60      	cmp	r3, #96	; 0x60
 800b984:	d82e      	bhi.n	800b9e4 <HAL_CAN_IRQHandler+0x334>
 800b986:	2b50      	cmp	r3, #80	; 0x50
 800b988:	d022      	beq.n	800b9d0 <HAL_CAN_IRQHandler+0x320>
 800b98a:	2b50      	cmp	r3, #80	; 0x50
 800b98c:	d82a      	bhi.n	800b9e4 <HAL_CAN_IRQHandler+0x334>
 800b98e:	2b40      	cmp	r3, #64	; 0x40
 800b990:	d019      	beq.n	800b9c6 <HAL_CAN_IRQHandler+0x316>
 800b992:	2b40      	cmp	r3, #64	; 0x40
 800b994:	d826      	bhi.n	800b9e4 <HAL_CAN_IRQHandler+0x334>
 800b996:	2b30      	cmp	r3, #48	; 0x30
 800b998:	d010      	beq.n	800b9bc <HAL_CAN_IRQHandler+0x30c>
 800b99a:	2b30      	cmp	r3, #48	; 0x30
 800b99c:	d822      	bhi.n	800b9e4 <HAL_CAN_IRQHandler+0x334>
 800b99e:	2b10      	cmp	r3, #16
 800b9a0:	d002      	beq.n	800b9a8 <HAL_CAN_IRQHandler+0x2f8>
 800b9a2:	2b20      	cmp	r3, #32
 800b9a4:	d005      	beq.n	800b9b2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800b9a6:	e01d      	b.n	800b9e4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	f043 0308 	orr.w	r3, r3, #8
 800b9ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b9b0:	e019      	b.n	800b9e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b4:	f043 0310 	orr.w	r3, r3, #16
 800b9b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b9ba:	e014      	b.n	800b9e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9be:	f043 0320 	orr.w	r3, r3, #32
 800b9c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b9c4:	e00f      	b.n	800b9e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800b9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b9ce:	e00a      	b.n	800b9e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b9d8:	e005      	b.n	800b9e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800b9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b9e2:	e000      	b.n	800b9e6 <HAL_CAN_IRQHandler+0x336>
            break;
 800b9e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	699a      	ldr	r2, [r3, #24]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b9f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2204      	movs	r2, #4
 800b9fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d008      	beq.n	800ba16 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0a:	431a      	orrs	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 f872 	bl	800bafa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800ba16:	bf00      	nop
 800ba18:	3728      	adds	r7, #40	; 0x28
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800ba1e:	b480      	push	{r7}
 800ba20:	b083      	sub	sp, #12
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800ba26:	bf00      	nop
 800ba28:	370c      	adds	r7, #12
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800ba32:	b480      	push	{r7}
 800ba34:	b083      	sub	sp, #12
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800ba3a:	bf00      	nop
 800ba3c:	370c      	adds	r7, #12
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800ba46:	b480      	push	{r7}
 800ba48:	b083      	sub	sp, #12
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800ba4e:	bf00      	nop
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b083      	sub	sp, #12
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800ba62:	bf00      	nop
 800ba64:	370c      	adds	r7, #12
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b083      	sub	sp, #12
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800ba76:	bf00      	nop
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr

0800ba82 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ba82:	b480      	push	{r7}
 800ba84:	b083      	sub	sp, #12
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800ba8a:	bf00      	nop
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800ba96:	b480      	push	{r7}
 800ba98:	b083      	sub	sp, #12
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800ba9e:	bf00      	nop
 800baa0:	370c      	adds	r7, #12
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800baaa:	b480      	push	{r7}
 800baac:	b083      	sub	sp, #12
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800bab2:	bf00      	nop
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800bac6:	bf00      	nop
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800bad2:	b480      	push	{r7}
 800bad4:	b083      	sub	sp, #12
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800bada:	bf00      	nop
 800badc:	370c      	adds	r7, #12
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr

0800bae6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800bae6:	b480      	push	{r7}
 800bae8:	b083      	sub	sp, #12
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800baee:	bf00      	nop
 800baf0:	370c      	adds	r7, #12
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800bafa:	b480      	push	{r7}
 800bafc:	b083      	sub	sp, #12
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800bb02:	bf00      	nop
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
	...

0800bb10 <__NVIC_SetPriorityGrouping>:
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f003 0307 	and.w	r3, r3, #7
 800bb1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bb20:	4b0b      	ldr	r3, [pc, #44]	; (800bb50 <__NVIC_SetPriorityGrouping+0x40>)
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bb2c:	4013      	ands	r3, r2
 800bb2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bb38:	4b06      	ldr	r3, [pc, #24]	; (800bb54 <__NVIC_SetPriorityGrouping+0x44>)
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bb3e:	4a04      	ldr	r2, [pc, #16]	; (800bb50 <__NVIC_SetPriorityGrouping+0x40>)
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	60d3      	str	r3, [r2, #12]
}
 800bb44:	bf00      	nop
 800bb46:	3714      	adds	r7, #20
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr
 800bb50:	e000ed00 	.word	0xe000ed00
 800bb54:	05fa0000 	.word	0x05fa0000

0800bb58 <__NVIC_GetPriorityGrouping>:
{
 800bb58:	b480      	push	{r7}
 800bb5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bb5c:	4b04      	ldr	r3, [pc, #16]	; (800bb70 <__NVIC_GetPriorityGrouping+0x18>)
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	0a1b      	lsrs	r3, r3, #8
 800bb62:	f003 0307 	and.w	r3, r3, #7
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	e000ed00 	.word	0xe000ed00

0800bb74 <__NVIC_EnableIRQ>:
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	db0b      	blt.n	800bb9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bb86:	79fb      	ldrb	r3, [r7, #7]
 800bb88:	f003 021f 	and.w	r2, r3, #31
 800bb8c:	4907      	ldr	r1, [pc, #28]	; (800bbac <__NVIC_EnableIRQ+0x38>)
 800bb8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb92:	095b      	lsrs	r3, r3, #5
 800bb94:	2001      	movs	r0, #1
 800bb96:	fa00 f202 	lsl.w	r2, r0, r2
 800bb9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bb9e:	bf00      	nop
 800bba0:	370c      	adds	r7, #12
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	e000e100 	.word	0xe000e100

0800bbb0 <__NVIC_DisableIRQ>:
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bbba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	db12      	blt.n	800bbe8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bbc2:	79fb      	ldrb	r3, [r7, #7]
 800bbc4:	f003 021f 	and.w	r2, r3, #31
 800bbc8:	490a      	ldr	r1, [pc, #40]	; (800bbf4 <__NVIC_DisableIRQ+0x44>)
 800bbca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbce:	095b      	lsrs	r3, r3, #5
 800bbd0:	2001      	movs	r0, #1
 800bbd2:	fa00 f202 	lsl.w	r2, r0, r2
 800bbd6:	3320      	adds	r3, #32
 800bbd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bbdc:	f3bf 8f4f 	dsb	sy
}
 800bbe0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bbe2:	f3bf 8f6f 	isb	sy
}
 800bbe6:	bf00      	nop
}
 800bbe8:	bf00      	nop
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	e000e100 	.word	0xe000e100

0800bbf8 <__NVIC_SetPriority>:
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	4603      	mov	r3, r0
 800bc00:	6039      	str	r1, [r7, #0]
 800bc02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	db0a      	blt.n	800bc22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	490c      	ldr	r1, [pc, #48]	; (800bc44 <__NVIC_SetPriority+0x4c>)
 800bc12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc16:	0112      	lsls	r2, r2, #4
 800bc18:	b2d2      	uxtb	r2, r2
 800bc1a:	440b      	add	r3, r1
 800bc1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bc20:	e00a      	b.n	800bc38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	4908      	ldr	r1, [pc, #32]	; (800bc48 <__NVIC_SetPriority+0x50>)
 800bc28:	79fb      	ldrb	r3, [r7, #7]
 800bc2a:	f003 030f 	and.w	r3, r3, #15
 800bc2e:	3b04      	subs	r3, #4
 800bc30:	0112      	lsls	r2, r2, #4
 800bc32:	b2d2      	uxtb	r2, r2
 800bc34:	440b      	add	r3, r1
 800bc36:	761a      	strb	r2, [r3, #24]
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	e000e100 	.word	0xe000e100
 800bc48:	e000ed00 	.word	0xe000ed00

0800bc4c <NVIC_EncodePriority>:
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b089      	sub	sp, #36	; 0x24
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f003 0307 	and.w	r3, r3, #7
 800bc5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	f1c3 0307 	rsb	r3, r3, #7
 800bc66:	2b04      	cmp	r3, #4
 800bc68:	bf28      	it	cs
 800bc6a:	2304      	movcs	r3, #4
 800bc6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	3304      	adds	r3, #4
 800bc72:	2b06      	cmp	r3, #6
 800bc74:	d902      	bls.n	800bc7c <NVIC_EncodePriority+0x30>
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	3b03      	subs	r3, #3
 800bc7a:	e000      	b.n	800bc7e <NVIC_EncodePriority+0x32>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bc80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	fa02 f303 	lsl.w	r3, r2, r3
 800bc8a:	43da      	mvns	r2, r3
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	401a      	ands	r2, r3
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bc94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	fa01 f303 	lsl.w	r3, r1, r3
 800bc9e:	43d9      	mvns	r1, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bca4:	4313      	orrs	r3, r2
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3724      	adds	r7, #36	; 0x24
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr

0800bcb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b082      	sub	sp, #8
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f7ff ff28 	bl	800bb10 <__NVIC_SetPriorityGrouping>
}
 800bcc0:	bf00      	nop
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	4603      	mov	r3, r0
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bcda:	f7ff ff3d 	bl	800bb58 <__NVIC_GetPriorityGrouping>
 800bcde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	68b9      	ldr	r1, [r7, #8]
 800bce4:	6978      	ldr	r0, [r7, #20]
 800bce6:	f7ff ffb1 	bl	800bc4c <NVIC_EncodePriority>
 800bcea:	4602      	mov	r2, r0
 800bcec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcf0:	4611      	mov	r1, r2
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7ff ff80 	bl	800bbf8 <__NVIC_SetPriority>
}
 800bcf8:	bf00      	nop
 800bcfa:	3718      	adds	r7, #24
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	4603      	mov	r3, r0
 800bd08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bd0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff ff30 	bl	800bb74 <__NVIC_EnableIRQ>
}
 800bd14:	bf00      	nop
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4603      	mov	r3, r0
 800bd24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800bd26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7ff ff40 	bl	800bbb0 <__NVIC_DisableIRQ>
}
 800bd30:	bf00      	nop
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800bd46:	f7fe ffb7 	bl	800acb8 <HAL_GetTick>
 800bd4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d008      	beq.n	800bd6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2280      	movs	r2, #128	; 0x80
 800bd5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800bd66:	2301      	movs	r3, #1
 800bd68:	e052      	b.n	800be10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f022 0216 	bic.w	r2, r2, #22
 800bd78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	695a      	ldr	r2, [r3, #20]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d103      	bne.n	800bd9a <HAL_DMA_Abort+0x62>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d007      	beq.n	800bdaa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f022 0208 	bic.w	r2, r2, #8
 800bda8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f022 0201 	bic.w	r2, r2, #1
 800bdb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bdba:	e013      	b.n	800bde4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bdbc:	f7fe ff7c 	bl	800acb8 <HAL_GetTick>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	2b05      	cmp	r3, #5
 800bdc8:	d90c      	bls.n	800bde4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2220      	movs	r2, #32
 800bdce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2203      	movs	r2, #3
 800bdd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800bde0:	2303      	movs	r3, #3
 800bde2:	e015      	b.n	800be10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 0301 	and.w	r3, r3, #1
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1e4      	bne.n	800bdbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdf6:	223f      	movs	r2, #63	; 0x3f
 800bdf8:	409a      	lsls	r2, r3
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2201      	movs	r2, #1
 800be02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800be26:	b2db      	uxtb	r3, r3
 800be28:	2b02      	cmp	r3, #2
 800be2a:	d004      	beq.n	800be36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2280      	movs	r2, #128	; 0x80
 800be30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	e00c      	b.n	800be50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2205      	movs	r2, #5
 800be3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f022 0201 	bic.w	r2, r2, #1
 800be4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800be4e:	2300      	movs	r3, #0
}
 800be50:	4618      	mov	r0, r3
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d101      	bne.n	800be6e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	e06a      	b.n	800bf44 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be74:	2b00      	cmp	r3, #0
 800be76:	d106      	bne.n	800be86 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2223      	movs	r2, #35	; 0x23
 800be7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f005 fa89 	bl	8011398 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be86:	4b31      	ldr	r3, [pc, #196]	; (800bf4c <HAL_ETH_Init+0xf0>)
 800be88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be8a:	4a30      	ldr	r2, [pc, #192]	; (800bf4c <HAL_ETH_Init+0xf0>)
 800be8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be90:	6453      	str	r3, [r2, #68]	; 0x44
 800be92:	4b2e      	ldr	r3, [pc, #184]	; (800bf4c <HAL_ETH_Init+0xf0>)
 800be94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be9a:	60bb      	str	r3, [r7, #8]
 800be9c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800be9e:	4b2c      	ldr	r3, [pc, #176]	; (800bf50 <HAL_ETH_Init+0xf4>)
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	4a2b      	ldr	r2, [pc, #172]	; (800bf50 <HAL_ETH_Init+0xf4>)
 800bea4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bea8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800beaa:	4b29      	ldr	r3, [pc, #164]	; (800bf50 <HAL_ETH_Init+0xf4>)
 800beac:	685a      	ldr	r2, [r3, #4]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	4927      	ldr	r1, [pc, #156]	; (800bf50 <HAL_ETH_Init+0xf4>)
 800beb4:	4313      	orrs	r3, r2
 800beb6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800beb8:	4b25      	ldr	r3, [pc, #148]	; (800bf50 <HAL_ETH_Init+0xf4>)
 800beba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	6812      	ldr	r2, [r2, #0]
 800beca:	f043 0301 	orr.w	r3, r3, #1
 800bece:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bed2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bed4:	f7fe fef0 	bl	800acb8 <HAL_GetTick>
 800bed8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800beda:	e011      	b.n	800bf00 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800bedc:	f7fe feec 	bl	800acb8 <HAL_GetTick>
 800bee0:	4602      	mov	r2, r0
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	1ad3      	subs	r3, r2, r3
 800bee6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800beea:	d909      	bls.n	800bf00 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2204      	movs	r2, #4
 800bef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	22e0      	movs	r2, #224	; 0xe0
 800bef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800befc:	2301      	movs	r3, #1
 800befe:	e021      	b.n	800bf44 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f003 0301 	and.w	r3, r3, #1
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d1e4      	bne.n	800bedc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 ff2c 	bl	800cd70 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 ffd3 	bl	800cec4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f001 f829 	bl	800cf76 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 ff91 	bl	800ce54 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2210      	movs	r2, #16
 800bf3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3710      	adds	r7, #16
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	40023800 	.word	0x40023800
 800bf50:	40013800 	.word	0x40013800

0800bf54 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf62:	2b10      	cmp	r3, #16
 800bf64:	d150      	bne.n	800c008 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2223      	movs	r2, #35	; 0x23
 800bf6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2204      	movs	r2, #4
 800bf72:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 f9fb 	bl	800c370 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f042 0208 	orr.w	r2, r2, #8
 800bf88:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf92:	2001      	movs	r0, #1
 800bf94:	f7fe fe9c 	bl	800acd0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f042 0204 	orr.w	r2, r2, #4
 800bfae:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800bfb8:	2001      	movs	r0, #1
 800bfba:	f7fe fe89 	bl	800acd0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fd73 	bl	800cab2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfd4:	699b      	ldr	r3, [r3, #24]
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	6812      	ldr	r2, [r2, #0]
 800bfda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bfde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bfe2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfec:	699b      	ldr	r3, [r3, #24]
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	6812      	ldr	r2, [r2, #0]
 800bff2:	f043 0302 	orr.w	r3, r3, #2
 800bff6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bffa:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2223      	movs	r2, #35	; 0x23
 800c000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	e000      	b.n	800c00a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800c008:	2301      	movs	r3, #1
  }
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
	...

0800c014 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c022:	2b10      	cmp	r3, #16
 800c024:	d17b      	bne.n	800c11e <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2223      	movs	r2, #35	; 0x23
 800c02a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2201      	movs	r2, #1
 800c032:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800c042:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	4b35      	ldr	r3, [pc, #212]	; (800c128 <HAL_ETH_Start_IT+0x114>)
 800c052:	430b      	orrs	r3, r1
 800c054:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800c068:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2204      	movs	r2, #4
 800c070:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f97c 	bl	800c370 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f042 0208 	orr.w	r2, r2, #8
 800c086:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c090:	2001      	movs	r0, #1
 800c092:	f7fe fe1d 	bl	800acd0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f042 0204 	orr.w	r2, r2, #4
 800c0ac:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c0b6:	2001      	movs	r0, #1
 800c0b8:	f7fe fe0a 	bl	800acd0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fcf4 	bl	800cab2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0d2:	699b      	ldr	r3, [r3, #24]
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	6812      	ldr	r2, [r2, #0]
 800c0d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c0dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c0e0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0ea:	699b      	ldr	r3, [r3, #24]
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	6812      	ldr	r2, [r2, #0]
 800c0f0:	f043 0302 	orr.w	r3, r3, #2
 800c0f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c0f8:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c102:	69d9      	ldr	r1, [r3, #28]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	4b08      	ldr	r3, [pc, #32]	; (800c12c <HAL_ETH_Start_IT+0x118>)
 800c10a:	430b      	orrs	r3, r1
 800c10c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c110:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2223      	movs	r2, #35	; 0x23
 800c116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800c11a:	2300      	movs	r3, #0
 800c11c:	e000      	b.n	800c120 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 800c11e:	2301      	movs	r3, #1
  }
}
 800c120:	4618      	mov	r0, r3
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	00020060 	.word	0x00020060
 800c12c:	0001a0c1 	.word	0x0001a0c1

0800c130 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d109      	bne.n	800c154 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c146:	f043 0201 	orr.w	r2, r3, #1
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	e045      	b.n	800c1e0 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c15a:	2b23      	cmp	r3, #35	; 0x23
 800c15c:	d13f      	bne.n	800c1de <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800c166:	2201      	movs	r2, #1
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 ff70 	bl	800d050 <ETH_Prepare_Tx_Descriptors>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d009      	beq.n	800c18a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c17c:	f043 0202 	orr.w	r2, r3, #2
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800c186:	2301      	movs	r3, #1
 800c188:	e02a      	b.n	800c1e0 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800c18a:	f3bf 8f4f 	dsb	sy
}
 800c18e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c194:	1c5a      	adds	r2, r3, #1
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	629a      	str	r2, [r3, #40]	; 0x28
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c19e:	2b03      	cmp	r3, #3
 800c1a0:	d904      	bls.n	800c1ac <HAL_ETH_Transmit_IT+0x7c>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a6:	1f1a      	subs	r2, r3, #4
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1b4:	695b      	ldr	r3, [r3, #20]
 800c1b6:	f003 0304 	and.w	r3, r3, #4
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00d      	beq.n	800c1da <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	2304      	movs	r3, #4
 800c1ca:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	e000      	b.n	800c1e0 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
  }
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b088      	sub	sp, #32
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d109      	bne.n	800c214 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c206:	f043 0201 	orr.w	r2, r3, #1
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	e0a8      	b.n	800c366 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c21a:	2b23      	cmp	r3, #35	; 0x23
 800c21c:	d001      	beq.n	800c222 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800c21e:	2301      	movs	r3, #1
 800c220:	e0a1      	b.n	800c366 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c226:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	69fa      	ldr	r2, [r7, #28]
 800c22c:	3212      	adds	r2, #18
 800c22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c232:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c238:	f1c3 0304 	rsb	r3, r3, #4
 800c23c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800c23e:	e06a      	b.n	800c316 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d007      	beq.n	800c25c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	699a      	ldr	r2, [r3, #24]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	69da      	ldr	r2, [r3, #28]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c264:	2b00      	cmp	r3, #0
 800c266:	d103      	bne.n	800c270 <HAL_ETH_ReadData+0x88>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d040      	beq.n	800c2f2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d005      	beq.n	800c288 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	695b      	ldr	r3, [r3, #20]
 800c28c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00c      	beq.n	800c2b4 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	0c1b      	lsrs	r3, r3, #16
 800c2a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c2a4:	3b04      	subs	r3, #4
 800c2a6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	689a      	ldr	r2, [r3, #8]
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	f005 fa2b 	bl	801172c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2da:	1c5a      	adds	r2, r3, #1
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	441a      	add	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	61fb      	str	r3, [r7, #28]
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	2b03      	cmp	r3, #3
 800c2fc:	d902      	bls.n	800c304 <HAL_ETH_ReadData+0x11c>
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	3b04      	subs	r3, #4
 800c302:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	69fa      	ldr	r2, [r7, #28]
 800c308:	3212      	adds	r2, #18
 800c30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c30e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	3301      	adds	r3, #1
 800c314:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	db06      	blt.n	800c32c <HAL_ETH_ReadData+0x144>
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	429a      	cmp	r2, r3
 800c324:	d202      	bcs.n	800c32c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800c326:	7bfb      	ldrb	r3, [r7, #15]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d089      	beq.n	800c240 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	441a      	add	r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d002      	beq.n	800c346 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 f815 	bl	800c370 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	69fa      	ldr	r2, [r7, #28]
 800c34a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d108      	bne.n	800c364 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c360:	2300      	movs	r3, #0
 800c362:	e000      	b.n	800c366 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800c364:	2301      	movs	r3, #1
}
 800c366:	4618      	mov	r0, r3
 800c368:	3720      	adds	r7, #32
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
	...

0800c370 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b088      	sub	sp, #32
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800c378:	2300      	movs	r3, #0
 800c37a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800c37c:	2301      	movs	r3, #1
 800c37e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c384:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	69fa      	ldr	r2, [r7, #28]
 800c38a:	3212      	adds	r2, #18
 800c38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c390:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c396:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800c398:	e040      	b.n	800c41c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	6a1b      	ldr	r3, [r3, #32]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d112      	bne.n	800c3c8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800c3a2:	f107 030c 	add.w	r3, r7, #12
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f005 f990 	bl	80116cc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d102      	bne.n	800c3b8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	74fb      	strb	r3, [r7, #19]
 800c3b6:	e007      	b.n	800c3c8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800c3c8:	7cfb      	ldrb	r3, [r7, #19]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d026      	beq.n	800c41c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d103      	bne.n	800c3de <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	4a1e      	ldr	r2, [pc, #120]	; (800c454 <ETH_UpdateDescriptor+0xe4>)
 800c3da:	605a      	str	r2, [r3, #4]
 800c3dc:	e003      	b.n	800c3e6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800c3e4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800c3e6:	f3bf 8f5f 	dmb	sy
}
 800c3ea:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	61fb      	str	r3, [r7, #28]
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	2b03      	cmp	r3, #3
 800c402:	d902      	bls.n	800c40a <ETH_UpdateDescriptor+0x9a>
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	3b04      	subs	r3, #4
 800c408:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	69fa      	ldr	r2, [r7, #28]
 800c40e:	3212      	adds	r2, #18
 800c410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c414:	617b      	str	r3, [r7, #20]
      desccount--;
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	3b01      	subs	r3, #1
 800c41a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d002      	beq.n	800c428 <ETH_UpdateDescriptor+0xb8>
 800c422:	7cfb      	ldrb	r3, [r7, #19]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1b8      	bne.n	800c39a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c42c:	69ba      	ldr	r2, [r7, #24]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d00c      	beq.n	800c44c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c43a:	461a      	mov	r2, r3
 800c43c:	2300      	movs	r3, #0
 800c43e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	69fa      	ldr	r2, [r7, #28]
 800c444:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	69ba      	ldr	r2, [r7, #24]
 800c44a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800c44c:	bf00      	nop
 800c44e:	3720      	adds	r7, #32
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	800045f8 	.word	0x800045f8

0800c458 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3318      	adds	r3, #24
 800c464:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c46a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c470:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800c472:	2301      	movs	r3, #1
 800c474:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800c476:	e03f      	b.n	800c4f8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800c478:	2301      	movs	r3, #1
 800c47a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	3b01      	subs	r3, #1
 800c480:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	3304      	adds	r3, #4
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	4413      	add	r3, r2
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d106      	bne.n	800c4a0 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	3301      	adds	r3, #1
 800c496:	f003 0303 	and.w	r3, r3, #3
 800c49a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800c49c:	2300      	movs	r3, #0
 800c49e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800c4a0:	7bbb      	ldrb	r3, [r7, #14]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d028      	beq.n	800c4f8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	68d9      	ldr	r1, [r3, #12]
 800c4aa:	693a      	ldr	r2, [r7, #16]
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4413      	add	r3, r2
 800c4b2:	00db      	lsls	r3, r3, #3
 800c4b4:	440b      	add	r3, r1
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	db1b      	blt.n	800c4f4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	4413      	add	r3, r2
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f005 f971 	bl	80117b0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800c4ce:	68ba      	ldr	r2, [r7, #8]
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	3304      	adds	r3, #4
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	4413      	add	r3, r2
 800c4d8:	2200      	movs	r2, #0
 800c4da:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	f003 0303 	and.w	r3, r3, #3
 800c4e4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	697a      	ldr	r2, [r7, #20]
 800c4ea:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	693a      	ldr	r2, [r7, #16]
 800c4f0:	62da      	str	r2, [r3, #44]	; 0x2c
 800c4f2:	e001      	b.n	800c4f8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d002      	beq.n	800c504 <HAL_ETH_ReleaseTxPacket+0xac>
 800c4fe:	7bfb      	ldrb	r3, [r7, #15]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d1b9      	bne.n	800c478 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3718      	adds	r7, #24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
	...

0800c510 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c520:	695b      	ldr	r3, [r3, #20]
 800c522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c526:	2b40      	cmp	r3, #64	; 0x40
 800c528:	d112      	bne.n	800c550 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c532:	69db      	ldr	r3, [r3, #28]
 800c534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c538:	2b40      	cmp	r3, #64	; 0x40
 800c53a:	d109      	bne.n	800c550 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c544:	461a      	mov	r2, r3
 800c546:	4b50      	ldr	r3, [pc, #320]	; (800c688 <HAL_ETH_IRQHandler+0x178>)
 800c548:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f004 fc88 	bl	8010e60 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c558:	695b      	ldr	r3, [r3, #20]
 800c55a:	f003 0301 	and.w	r3, r3, #1
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d113      	bne.n	800c58a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c56a:	69db      	ldr	r3, [r3, #28]
 800c56c:	f003 0301 	and.w	r3, r3, #1
 800c570:	2b01      	cmp	r3, #1
 800c572:	d10a      	bne.n	800c58a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c57c:	461a      	mov	r2, r3
 800c57e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800c582:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f004 fc7b 	bl	8010e80 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c592:	695b      	ldr	r3, [r3, #20]
 800c594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c59c:	d14c      	bne.n	800c638 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5a6:	69db      	ldr	r3, [r3, #28]
 800c5a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5b0:	d142      	bne.n	800c638 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5b8:	f043 0208 	orr.w	r2, r3, #8
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5ca:	695b      	ldr	r3, [r3, #20]
 800c5cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5d4:	d11a      	bne.n	800c60c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5de:	695a      	ldr	r2, [r3, #20]
 800c5e0:	4b2a      	ldr	r3, [pc, #168]	; (800c68c <HAL_ETH_IRQHandler+0x17c>)
 800c5e2:	4013      	ands	r3, r2
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5f2:	69db      	ldr	r3, [r3, #28]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	6812      	ldr	r2, [r2, #0]
 800c5f8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800c5fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c600:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	22e0      	movs	r2, #224	; 0xe0
 800c606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c60a:	e012      	b.n	800c632 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c614:	695a      	ldr	r2, [r3, #20]
 800c616:	f248 6380 	movw	r3, #34432	; 0x8680
 800c61a:	4013      	ands	r3, r2
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c62a:	461a      	mov	r2, r3
 800c62c:	f248 6380 	movw	r3, #34432	; 0x8680
 800c630:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f004 fc34 	bl	8010ea0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c63e:	f003 0308 	and.w	r3, r3, #8
 800c642:	2b08      	cmp	r3, #8
 800c644:	d10e      	bne.n	800c664 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f81c 	bl	800c694 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800c664:	4b0a      	ldr	r3, [pc, #40]	; (800c690 <HAL_ETH_IRQHandler+0x180>)
 800c666:	695b      	ldr	r3, [r3, #20]
 800c668:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d006      	beq.n	800c67e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800c670:	4b07      	ldr	r3, [pc, #28]	; (800c690 <HAL_ETH_IRQHandler+0x180>)
 800c672:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c676:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 f815 	bl	800c6a8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800c67e:	bf00      	nop
 800c680:	3708      	adds	r7, #8
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	00010040 	.word	0x00010040
 800c68c:	007e2000 	.word	0x007e2000
 800c690:	40013c00 	.word	0x40013c00

0800c694 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800c69c:	bf00      	nop
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800c6b0:	bf00      	nop
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
 800c6c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	f003 031c 	and.w	r3, r3, #28
 800c6d8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	02db      	lsls	r3, r3, #11
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	697a      	ldr	r2, [r7, #20]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	019b      	lsls	r3, r3, #6
 800c6ea:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800c6ee:	697a      	ldr	r2, [r7, #20]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	f023 0302 	bic.w	r3, r3, #2
 800c6fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	f043 0301 	orr.w	r3, r3, #1
 800c702:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	697a      	ldr	r2, [r7, #20]
 800c70a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800c70c:	f7fe fad4 	bl	800acb8 <HAL_GetTick>
 800c710:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c712:	e00d      	b.n	800c730 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800c714:	f7fe fad0 	bl	800acb8 <HAL_GetTick>
 800c718:	4602      	mov	r2, r0
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	1ad3      	subs	r3, r2, r3
 800c71e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c722:	d301      	bcc.n	800c728 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800c724:	2301      	movs	r3, #1
 800c726:	e010      	b.n	800c74a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	691b      	ldr	r3, [r3, #16]
 800c72e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1ec      	bne.n	800c714 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	695b      	ldr	r3, [r3, #20]
 800c740:	b29b      	uxth	r3, r3
 800c742:	461a      	mov	r2, r3
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3718      	adds	r7, #24
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b086      	sub	sp, #24
 800c756:	af00      	add	r7, sp, #0
 800c758:	60f8      	str	r0, [r7, #12]
 800c75a:	60b9      	str	r1, [r7, #8]
 800c75c:	607a      	str	r2, [r7, #4]
 800c75e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	f003 031c 	and.w	r3, r3, #28
 800c76e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	02db      	lsls	r3, r3, #11
 800c774:	b29b      	uxth	r3, r3
 800c776:	697a      	ldr	r2, [r7, #20]
 800c778:	4313      	orrs	r3, r2
 800c77a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	019b      	lsls	r3, r3, #6
 800c780:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800c784:	697a      	ldr	r2, [r7, #20]
 800c786:	4313      	orrs	r3, r2
 800c788:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	f043 0302 	orr.w	r3, r3, #2
 800c790:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	f043 0301 	orr.w	r3, r3, #1
 800c798:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	697a      	ldr	r2, [r7, #20]
 800c7aa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c7ac:	f7fe fa84 	bl	800acb8 <HAL_GetTick>
 800c7b0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c7b2:	e00d      	b.n	800c7d0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800c7b4:	f7fe fa80 	bl	800acb8 <HAL_GetTick>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	1ad3      	subs	r3, r2, r3
 800c7be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7c2:	d301      	bcc.n	800c7c8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e009      	b.n	800c7dc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	691b      	ldr	r3, [r3, #16]
 800c7ce:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	f003 0301 	and.w	r3, r3, #1
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1ec      	bne.n	800c7b4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800c7da:	2300      	movs	r3, #0
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3718      	adds	r7, #24
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d101      	bne.n	800c7f8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	e0d9      	b.n	800c9ac <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f003 0310 	and.w	r3, r3, #16
 800c802:	2b00      	cmp	r3, #0
 800c804:	bf14      	ite	ne
 800c806:	2301      	movne	r3, #1
 800c808:	2300      	moveq	r3, #0
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	461a      	mov	r2, r3
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	bf0c      	ite	eq
 800c830:	2301      	moveq	r3, #1
 800c832:	2300      	movne	r3, #0
 800c834:	b2db      	uxtb	r3, r3
 800c836:	461a      	mov	r2, r3
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800c848:	2b00      	cmp	r3, #0
 800c84a:	bf14      	ite	ne
 800c84c:	2301      	movne	r3, #1
 800c84e:	2300      	moveq	r3, #0
 800c850:	b2db      	uxtb	r3, r3
 800c852:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c862:	2b00      	cmp	r3, #0
 800c864:	bf0c      	ite	eq
 800c866:	2301      	moveq	r3, #1
 800c868:	2300      	movne	r3, #0
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	461a      	mov	r2, r3
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	bf14      	ite	ne
 800c880:	2301      	movne	r3, #1
 800c882:	2300      	moveq	r3, #0
 800c884:	b2db      	uxtb	r3, r3
 800c886:	461a      	mov	r2, r3
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	bf0c      	ite	eq
 800c8b6:	2301      	moveq	r3, #1
 800c8b8:	2300      	movne	r3, #0
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	461a      	mov	r2, r3
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	bf0c      	ite	eq
 800c8d0:	2301      	moveq	r3, #1
 800c8d2:	2300      	movne	r3, #0
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	bf14      	ite	ne
 800c8ea:	2301      	movne	r3, #1
 800c8ec:	2300      	moveq	r3, #0
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c90e:	2b00      	cmp	r3, #0
 800c910:	bf14      	ite	ne
 800c912:	2301      	movne	r3, #1
 800c914:	2300      	moveq	r3, #0
 800c916:	b2db      	uxtb	r3, r3
 800c918:	461a      	mov	r2, r3
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	699b      	ldr	r3, [r3, #24]
 800c924:	f003 0302 	and.w	r3, r3, #2
 800c928:	2b00      	cmp	r3, #0
 800c92a:	bf14      	ite	ne
 800c92c:	2301      	movne	r3, #1
 800c92e:	2300      	moveq	r3, #0
 800c930:	b2db      	uxtb	r3, r3
 800c932:	461a      	mov	r2, r3
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	699b      	ldr	r3, [r3, #24]
 800c940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c944:	2b00      	cmp	r3, #0
 800c946:	bf0c      	ite	eq
 800c948:	2301      	moveq	r3, #1
 800c94a:	2300      	movne	r3, #0
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	461a      	mov	r2, r3
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	699b      	ldr	r3, [r3, #24]
 800c95c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	699b      	ldr	r3, [r3, #24]
 800c96a:	0c1b      	lsrs	r3, r3, #16
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	699b      	ldr	r3, [r3, #24]
 800c978:	f003 0304 	and.w	r3, r3, #4
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	bf14      	ite	ne
 800c980:	2301      	movne	r3, #1
 800c982:	2300      	moveq	r3, #0
 800c984:	b2db      	uxtb	r3, r3
 800c986:	461a      	mov	r2, r3
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	699b      	ldr	r3, [r3, #24]
 800c994:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800c998:	2b00      	cmp	r3, #0
 800c99a:	bf14      	ite	ne
 800c99c:	2301      	movne	r3, #1
 800c99e:	2300      	moveq	r3, #0
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d101      	bne.n	800c9cc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e00b      	b.n	800c9e4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9d2:	2b10      	cmp	r3, #16
 800c9d4:	d105      	bne.n	800c9e2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800c9d6:	6839      	ldr	r1, [r7, #0]
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 f88f 	bl	800cafc <ETH_SetMACConfig>

    return HAL_OK;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	e000      	b.n	800c9e4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
  }
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f023 031c 	bic.w	r3, r3, #28
 800ca02:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800ca04:	f001 fadc 	bl	800dfc0 <HAL_RCC_GetHCLKFreq>
 800ca08:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	4a1d      	ldr	r2, [pc, #116]	; (800ca84 <HAL_ETH_SetMDIOClockRange+0x98>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d908      	bls.n	800ca24 <HAL_ETH_SetMDIOClockRange+0x38>
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	4a1c      	ldr	r2, [pc, #112]	; (800ca88 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d804      	bhi.n	800ca24 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f043 0308 	orr.w	r3, r3, #8
 800ca20:	60fb      	str	r3, [r7, #12]
 800ca22:	e027      	b.n	800ca74 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	4a18      	ldr	r2, [pc, #96]	; (800ca88 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d908      	bls.n	800ca3e <HAL_ETH_SetMDIOClockRange+0x52>
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	4a17      	ldr	r2, [pc, #92]	; (800ca8c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d204      	bcs.n	800ca3e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f043 030c 	orr.w	r3, r3, #12
 800ca3a:	60fb      	str	r3, [r7, #12]
 800ca3c:	e01a      	b.n	800ca74 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	4a12      	ldr	r2, [pc, #72]	; (800ca8c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d303      	bcc.n	800ca4e <HAL_ETH_SetMDIOClockRange+0x62>
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	4a11      	ldr	r2, [pc, #68]	; (800ca90 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d911      	bls.n	800ca72 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	4a0f      	ldr	r2, [pc, #60]	; (800ca90 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d908      	bls.n	800ca68 <HAL_ETH_SetMDIOClockRange+0x7c>
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	4a0e      	ldr	r2, [pc, #56]	; (800ca94 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d804      	bhi.n	800ca68 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f043 0304 	orr.w	r3, r3, #4
 800ca64:	60fb      	str	r3, [r7, #12]
 800ca66:	e005      	b.n	800ca74 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f043 0310 	orr.w	r3, r3, #16
 800ca6e:	60fb      	str	r3, [r7, #12]
 800ca70:	e000      	b.n	800ca74 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800ca72:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	611a      	str	r2, [r3, #16]
}
 800ca7c:	bf00      	nop
 800ca7e:	3710      	adds	r7, #16
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	01312cff 	.word	0x01312cff
 800ca88:	02160ebf 	.word	0x02160ebf
 800ca8c:	03938700 	.word	0x03938700
 800ca90:	05f5e0ff 	.word	0x05f5e0ff
 800ca94:	08f0d17f 	.word	0x08f0d17f

0800ca98 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	370c      	adds	r7, #12
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b084      	sub	sp, #16
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800caba:	2300      	movs	r3, #0
 800cabc:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cac6:	699b      	ldr	r3, [r3, #24]
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	6812      	ldr	r2, [r2, #0]
 800cacc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cad0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cad4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cade:	699b      	ldr	r3, [r3, #24]
 800cae0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800cae2:	2001      	movs	r0, #1
 800cae4:	f7fe f8f4 	bl	800acd0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800caf2:	6193      	str	r3, [r2, #24]
}
 800caf4:	bf00      	nop
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	4b51      	ldr	r3, [pc, #324]	; (800cc58 <ETH_SetMACConfig+0x15c>)
 800cb12:	4013      	ands	r3, r2
 800cb14:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	7c1b      	ldrb	r3, [r3, #16]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d102      	bne.n	800cb24 <ETH_SetMACConfig+0x28>
 800cb1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800cb22:	e000      	b.n	800cb26 <ETH_SetMACConfig+0x2a>
 800cb24:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	7c5b      	ldrb	r3, [r3, #17]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d102      	bne.n	800cb34 <ETH_SetMACConfig+0x38>
 800cb2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cb32:	e000      	b.n	800cb36 <ETH_SetMACConfig+0x3a>
 800cb34:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800cb36:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800cb3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	7fdb      	ldrb	r3, [r3, #31]
 800cb42:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800cb44:	431a      	orrs	r2, r3
                        macconf->Speed |
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800cb4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	7f92      	ldrb	r2, [r2, #30]
 800cb50:	2a00      	cmp	r2, #0
 800cb52:	d102      	bne.n	800cb5a <ETH_SetMACConfig+0x5e>
 800cb54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cb58:	e000      	b.n	800cb5c <ETH_SetMACConfig+0x60>
 800cb5a:	2200      	movs	r2, #0
                        macconf->Speed |
 800cb5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	7f1b      	ldrb	r3, [r3, #28]
 800cb62:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800cb64:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800cb6a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	791b      	ldrb	r3, [r3, #4]
 800cb70:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800cb72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800cb74:	683a      	ldr	r2, [r7, #0]
 800cb76:	f892 2020 	ldrb.w	r2, [r2, #32]
 800cb7a:	2a00      	cmp	r2, #0
 800cb7c:	d102      	bne.n	800cb84 <ETH_SetMACConfig+0x88>
 800cb7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb82:	e000      	b.n	800cb86 <ETH_SetMACConfig+0x8a>
 800cb84:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800cb86:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	7bdb      	ldrb	r3, [r3, #15]
 800cb8c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800cb8e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800cb94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb9c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	4313      	orrs	r3, r2
 800cba4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800cbb6:	2001      	movs	r0, #1
 800cbb8:	f7fe f88a 	bl	800acd0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	68fa      	ldr	r2, [r7, #12]
 800cbc2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	699b      	ldr	r3, [r3, #24]
 800cbca:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	f64f 7341 	movw	r3, #65345	; 0xff41
 800cbd2:	4013      	ands	r3, r2
 800cbd4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbda:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800cbdc:	683a      	ldr	r2, [r7, #0]
 800cbde:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800cbe2:	2a00      	cmp	r2, #0
 800cbe4:	d101      	bne.n	800cbea <ETH_SetMACConfig+0xee>
 800cbe6:	2280      	movs	r2, #128	; 0x80
 800cbe8:	e000      	b.n	800cbec <ETH_SetMACConfig+0xf0>
 800cbea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800cbec:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800cbf2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800cbfa:	2a01      	cmp	r2, #1
 800cbfc:	d101      	bne.n	800cc02 <ETH_SetMACConfig+0x106>
 800cbfe:	2208      	movs	r2, #8
 800cc00:	e000      	b.n	800cc04 <ETH_SetMACConfig+0x108>
 800cc02:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800cc04:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800cc06:	683a      	ldr	r2, [r7, #0]
 800cc08:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800cc0c:	2a01      	cmp	r2, #1
 800cc0e:	d101      	bne.n	800cc14 <ETH_SetMACConfig+0x118>
 800cc10:	2204      	movs	r2, #4
 800cc12:	e000      	b.n	800cc16 <ETH_SetMACConfig+0x11a>
 800cc14:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800cc16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800cc18:	683a      	ldr	r2, [r7, #0]
 800cc1a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800cc1e:	2a01      	cmp	r2, #1
 800cc20:	d101      	bne.n	800cc26 <ETH_SetMACConfig+0x12a>
 800cc22:	2202      	movs	r2, #2
 800cc24:	e000      	b.n	800cc28 <ETH_SetMACConfig+0x12c>
 800cc26:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	699b      	ldr	r3, [r3, #24]
 800cc3e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800cc40:	2001      	movs	r0, #1
 800cc42:	f7fe f845 	bl	800acd0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	619a      	str	r2, [r3, #24]
}
 800cc4e:	bf00      	nop
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	ff20810f 	.word	0xff20810f

0800cc5c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc6e:	699b      	ldr	r3, [r3, #24]
 800cc70:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	4b3d      	ldr	r3, [pc, #244]	; (800cd6c <ETH_SetDMAConfig+0x110>)
 800cc76:	4013      	ands	r3, r2
 800cc78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	7b1b      	ldrb	r3, [r3, #12]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d102      	bne.n	800cc88 <ETH_SetDMAConfig+0x2c>
 800cc82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800cc86:	e000      	b.n	800cc8a <ETH_SetDMAConfig+0x2e>
 800cc88:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	7b5b      	ldrb	r3, [r3, #13]
 800cc8e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800cc90:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800cc92:	683a      	ldr	r2, [r7, #0]
 800cc94:	7f52      	ldrb	r2, [r2, #29]
 800cc96:	2a00      	cmp	r2, #0
 800cc98:	d102      	bne.n	800cca0 <ETH_SetDMAConfig+0x44>
 800cc9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cc9e:	e000      	b.n	800cca2 <ETH_SetDMAConfig+0x46>
 800cca0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800cca2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	7b9b      	ldrb	r3, [r3, #14]
 800cca8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800ccaa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800ccb0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	7f1b      	ldrb	r3, [r3, #28]
 800ccb6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800ccb8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	7f9b      	ldrb	r3, [r3, #30]
 800ccbe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800ccc0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800ccc6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ccce:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cce0:	461a      	mov	r2, r3
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccee:	699b      	ldr	r3, [r3, #24]
 800ccf0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ccf2:	2001      	movs	r0, #1
 800ccf4:	f7fd ffec 	bl	800acd0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd00:	461a      	mov	r2, r3
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	791b      	ldrb	r3, [r3, #4]
 800cd0a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800cd10:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800cd16:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800cd1c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cd24:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800cd26:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd2c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800cd2e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800cd34:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	6812      	ldr	r2, [r2, #0]
 800cd3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cd3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cd42:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800cd50:	2001      	movs	r0, #1
 800cd52:	f7fd ffbd 	bl	800acd0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd5e:	461a      	mov	r2, r3
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6013      	str	r3, [r2, #0]
}
 800cd64:	bf00      	nop
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	f8de3f23 	.word	0xf8de3f23

0800cd70 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b0a6      	sub	sp, #152	; 0x98
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800cd84:	2300      	movs	r3, #0
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800cd94:	2300      	movs	r3, #0
 800cd96:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800cda0:	2300      	movs	r3, #0
 800cda2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800cda6:	2300      	movs	r3, #0
 800cda8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800cdac:	2300      	movs	r3, #0
 800cdae:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800cdd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cdd6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800cdd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cddc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800cdde:	2300      	movs	r3, #0
 800cde0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800cde4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cde8:	4619      	mov	r1, r3
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f7ff fe86 	bl	800cafc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800ce02:	2300      	movs	r3, #0
 800ce04:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800ce06:	2300      	movs	r3, #0
 800ce08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800ce12:	2300      	movs	r3, #0
 800ce14:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800ce16:	2301      	movs	r3, #1
 800ce18:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800ce20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ce24:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800ce26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ce2a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800ce2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce30:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800ce32:	2301      	movs	r3, #1
 800ce34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800ce40:	f107 0308 	add.w	r3, r7, #8
 800ce44:	4619      	mov	r1, r3
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f7ff ff08 	bl	800cc5c <ETH_SetDMAConfig>
}
 800ce4c:	bf00      	nop
 800ce4e:	3798      	adds	r7, #152	; 0x98
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b087      	sub	sp, #28
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	3305      	adds	r3, #5
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	021b      	lsls	r3, r3, #8
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	3204      	adds	r2, #4
 800ce6c:	7812      	ldrb	r2, [r2, #0]
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800ce72:	68ba      	ldr	r2, [r7, #8]
 800ce74:	4b11      	ldr	r3, [pc, #68]	; (800cebc <ETH_MACAddressConfig+0x68>)
 800ce76:	4413      	add	r3, r2
 800ce78:	461a      	mov	r2, r3
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	3303      	adds	r3, #3
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	061a      	lsls	r2, r3, #24
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	3302      	adds	r3, #2
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	041b      	lsls	r3, r3, #16
 800ce8e:	431a      	orrs	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	3301      	adds	r3, #1
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	021b      	lsls	r3, r3, #8
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	7812      	ldrb	r2, [r2, #0]
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800cea2:	68ba      	ldr	r2, [r7, #8]
 800cea4:	4b06      	ldr	r3, [pc, #24]	; (800cec0 <ETH_MACAddressConfig+0x6c>)
 800cea6:	4413      	add	r3, r2
 800cea8:	461a      	mov	r2, r3
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	6013      	str	r3, [r2, #0]
}
 800ceae:	bf00      	nop
 800ceb0:	371c      	adds	r7, #28
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	40028040 	.word	0x40028040
 800cec0:	40028044 	.word	0x40028044

0800cec4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b085      	sub	sp, #20
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800cecc:	2300      	movs	r3, #0
 800cece:	60fb      	str	r3, [r7, #12]
 800ced0:	e03e      	b.n	800cf50 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	68d9      	ldr	r1, [r3, #12]
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	4613      	mov	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	4413      	add	r3, r2
 800cede:	00db      	lsls	r3, r3, #3
 800cee0:	440b      	add	r3, r1
 800cee2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	2200      	movs	r2, #0
 800cee8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	2200      	movs	r2, #0
 800ceee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	2200      	movs	r2, #0
 800cef4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	2200      	movs	r2, #0
 800cefa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800cefc:	68b9      	ldr	r1, [r7, #8]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	3206      	adds	r2, #6
 800cf04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2b02      	cmp	r3, #2
 800cf18:	d80c      	bhi.n	800cf34 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	68d9      	ldr	r1, [r3, #12]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	1c5a      	adds	r2, r3, #1
 800cf22:	4613      	mov	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	4413      	add	r3, r2
 800cf28:	00db      	lsls	r3, r3, #3
 800cf2a:	440b      	add	r3, r1
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	60da      	str	r2, [r3, #12]
 800cf32:	e004      	b.n	800cf3e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	461a      	mov	r2, r3
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	60fb      	str	r3, [r7, #12]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2b03      	cmp	r3, #3
 800cf54:	d9bd      	bls.n	800ced2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	68da      	ldr	r2, [r3, #12]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf68:	611a      	str	r2, [r3, #16]
}
 800cf6a:	bf00      	nop
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr

0800cf76 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800cf76:	b480      	push	{r7}
 800cf78:	b085      	sub	sp, #20
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800cf7e:	2300      	movs	r3, #0
 800cf80:	60fb      	str	r3, [r7, #12]
 800cf82:	e046      	b.n	800d012 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6919      	ldr	r1, [r3, #16]
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	4413      	add	r3, r2
 800cf90:	00db      	lsls	r3, r3, #3
 800cf92:	440b      	add	r3, r1
 800cf94:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cfc0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800cfc8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800cfd6:	68b9      	ldr	r1, [r7, #8]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	3212      	adds	r2, #18
 800cfde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d80c      	bhi.n	800d002 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6919      	ldr	r1, [r3, #16]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	1c5a      	adds	r2, r3, #1
 800cff0:	4613      	mov	r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4413      	add	r3, r2
 800cff6:	00db      	lsls	r3, r3, #3
 800cff8:	440b      	add	r3, r1
 800cffa:	461a      	mov	r2, r3
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	60da      	str	r2, [r3, #12]
 800d000:	e004      	b.n	800d00c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	691b      	ldr	r3, [r3, #16]
 800d006:	461a      	mov	r2, r3
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	3301      	adds	r3, #1
 800d010:	60fb      	str	r3, [r7, #12]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2b03      	cmp	r3, #3
 800d016:	d9b5      	bls.n	800cf84 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2200      	movs	r2, #0
 800d034:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	691a      	ldr	r2, [r3, #16]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d042:	60da      	str	r2, [r3, #12]
}
 800d044:	bf00      	nop
 800d046:	3714      	adds	r7, #20
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800d050:	b480      	push	{r7}
 800d052:	b08d      	sub	sp, #52	; 0x34
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	3318      	adds	r3, #24
 800d060:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800d06e:	2300      	movs	r3, #0
 800d070:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d07a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800d082:	2300      	movs	r3, #0
 800d084:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d08e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d092:	d007      	beq.n	800d0a4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d098:	3304      	adds	r3, #4
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	4413      	add	r3, r2
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800d0a4:	2302      	movs	r3, #2
 800d0a6:	e0ff      	b.n	800d2a8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800d0ae:	69fb      	ldr	r3, [r7, #28]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	6a3b      	ldr	r3, [r7, #32]
 800d0b6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800d0b8:	6a3b      	ldr	r3, [r7, #32]
 800d0ba:	685a      	ldr	r2, [r3, #4]
 800d0bc:	4b7d      	ldr	r3, [pc, #500]	; (800d2b4 <ETH_Prepare_Tx_Descriptors+0x264>)
 800d0be:	4013      	ands	r3, r2
 800d0c0:	69fa      	ldr	r2, [r7, #28]
 800d0c2:	6852      	ldr	r2, [r2, #4]
 800d0c4:	431a      	orrs	r2, r3
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f003 0301 	and.w	r3, r3, #1
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d008      	beq.n	800d0e8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	695b      	ldr	r3, [r3, #20]
 800d0e2:	431a      	orrs	r2, r3
 800d0e4:	6a3b      	ldr	r3, [r7, #32]
 800d0e6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f003 0320 	and.w	r3, r3, #32
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d008      	beq.n	800d106 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800d0f4:	6a3b      	ldr	r3, [r7, #32]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	431a      	orrs	r2, r3
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f003 0304 	and.w	r3, r3, #4
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d005      	beq.n	800d11e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800d112:	6a3b      	ldr	r3, [r7, #32]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d11a:	6a3b      	ldr	r3, [r7, #32]
 800d11c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800d11e:	6a3b      	ldr	r3, [r7, #32]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d126:	6a3b      	ldr	r3, [r7, #32]
 800d128:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800d12a:	f3bf 8f5f 	dmb	sy
}
 800d12e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800d130:	6a3b      	ldr	r3, [r7, #32]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d138:	6a3b      	ldr	r3, [r7, #32]
 800d13a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800d13c:	e082      	b.n	800d244 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800d13e:	6a3b      	ldr	r3, [r7, #32]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d146:	6a3b      	ldr	r3, [r7, #32]
 800d148:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d006      	beq.n	800d15e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800d150:	6a3b      	ldr	r3, [r7, #32]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	601a      	str	r2, [r3, #0]
 800d15c:	e005      	b.n	800d16a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800d15e:	6a3b      	ldr	r3, [r7, #32]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d166:	6a3b      	ldr	r3, [r7, #32]
 800d168:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800d16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16c:	3301      	adds	r3, #1
 800d16e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d172:	2b03      	cmp	r3, #3
 800d174:	d902      	bls.n	800d17c <ETH_Prepare_Tx_Descriptors+0x12c>
 800d176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d178:	3b04      	subs	r3, #4
 800d17a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d184:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d18e:	6a3b      	ldr	r3, [r7, #32]
 800d190:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800d192:	6a3b      	ldr	r3, [r7, #32]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d19a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d19e:	d007      	beq.n	800d1b0 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800d1a0:	697a      	ldr	r2, [r7, #20]
 800d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a4:	3304      	adds	r3, #4
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d029      	beq.n	800d204 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1bc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800d1be:	2300      	movs	r3, #0
 800d1c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1c2:	e019      	b.n	800d1f8 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800d1c4:	f3bf 8f5f 	dmb	sy
}
 800d1c8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800d1ca:	6a3b      	ldr	r3, [r7, #32]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d1d2:	6a3b      	ldr	r3, [r7, #32]
 800d1d4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800d1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d8:	3301      	adds	r3, #1
 800d1da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1de:	2b03      	cmp	r3, #3
 800d1e0:	d902      	bls.n	800d1e8 <ETH_Prepare_Tx_Descriptors+0x198>
 800d1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e4:	3b04      	subs	r3, #4
 800d1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1f0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800d1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d3e1      	bcc.n	800d1c4 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800d200:	2302      	movs	r3, #2
 800d202:	e051      	b.n	800d2a8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800d204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d206:	3301      	adds	r3, #1
 800d208:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800d20a:	69fb      	ldr	r3, [r7, #28]
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	461a      	mov	r2, r3
 800d216:	6a3b      	ldr	r3, [r7, #32]
 800d218:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800d21a:	6a3b      	ldr	r3, [r7, #32]
 800d21c:	685a      	ldr	r2, [r3, #4]
 800d21e:	4b25      	ldr	r3, [pc, #148]	; (800d2b4 <ETH_Prepare_Tx_Descriptors+0x264>)
 800d220:	4013      	ands	r3, r2
 800d222:	69fa      	ldr	r2, [r7, #28]
 800d224:	6852      	ldr	r2, [r2, #4]
 800d226:	431a      	orrs	r2, r3
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	3301      	adds	r3, #1
 800d230:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800d232:	f3bf 8f5f 	dmb	sy
}
 800d236:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800d238:	6a3b      	ldr	r3, [r7, #32]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d240:	6a3b      	ldr	r3, [r7, #32]
 800d242:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f47f af78 	bne.w	800d13e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d006      	beq.n	800d262 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800d254:	6a3b      	ldr	r3, [r7, #32]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d25c:	6a3b      	ldr	r3, [r7, #32]
 800d25e:	601a      	str	r2, [r3, #0]
 800d260:	e005      	b.n	800d26e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800d262:	6a3b      	ldr	r3, [r7, #32]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d26a:	6a3b      	ldr	r3, [r7, #32]
 800d26c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800d26e:	6a3b      	ldr	r3, [r7, #32]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d276:	6a3b      	ldr	r3, [r7, #32]
 800d278:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d27e:	6979      	ldr	r1, [r7, #20]
 800d280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d282:	3304      	adds	r3, #4
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	440b      	add	r3, r1
 800d288:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d28e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d290:	b672      	cpsid	i
}
 800d292:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d298:	69bb      	ldr	r3, [r7, #24]
 800d29a:	4413      	add	r3, r2
 800d29c:	1c5a      	adds	r2, r3, #1
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800d2a2:	b662      	cpsie	i
}
 800d2a4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800d2a6:	2300      	movs	r3, #0
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3734      	adds	r7, #52	; 0x34
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr
 800d2b4:	ffffe000 	.word	0xffffe000

0800d2b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b089      	sub	sp, #36	; 0x24
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	61fb      	str	r3, [r7, #28]
 800d2d6:	e175      	b.n	800d5c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800d2d8:	2201      	movs	r2, #1
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d2e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d2ec:	693a      	ldr	r2, [r7, #16]
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	f040 8164 	bne.w	800d5be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	f003 0303 	and.w	r3, r3, #3
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d005      	beq.n	800d30e <HAL_GPIO_Init+0x56>
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	f003 0303 	and.w	r3, r3, #3
 800d30a:	2b02      	cmp	r3, #2
 800d30c:	d130      	bne.n	800d370 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	005b      	lsls	r3, r3, #1
 800d318:	2203      	movs	r2, #3
 800d31a:	fa02 f303 	lsl.w	r3, r2, r3
 800d31e:	43db      	mvns	r3, r3
 800d320:	69ba      	ldr	r2, [r7, #24]
 800d322:	4013      	ands	r3, r2
 800d324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	68da      	ldr	r2, [r3, #12]
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	005b      	lsls	r3, r3, #1
 800d32e:	fa02 f303 	lsl.w	r3, r2, r3
 800d332:	69ba      	ldr	r2, [r7, #24]
 800d334:	4313      	orrs	r3, r2
 800d336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	69ba      	ldr	r2, [r7, #24]
 800d33c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d344:	2201      	movs	r2, #1
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	fa02 f303 	lsl.w	r3, r2, r3
 800d34c:	43db      	mvns	r3, r3
 800d34e:	69ba      	ldr	r2, [r7, #24]
 800d350:	4013      	ands	r3, r2
 800d352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	091b      	lsrs	r3, r3, #4
 800d35a:	f003 0201 	and.w	r2, r3, #1
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	fa02 f303 	lsl.w	r3, r2, r3
 800d364:	69ba      	ldr	r2, [r7, #24]
 800d366:	4313      	orrs	r3, r2
 800d368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	69ba      	ldr	r2, [r7, #24]
 800d36e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	f003 0303 	and.w	r3, r3, #3
 800d378:	2b03      	cmp	r3, #3
 800d37a:	d017      	beq.n	800d3ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	005b      	lsls	r3, r3, #1
 800d386:	2203      	movs	r2, #3
 800d388:	fa02 f303 	lsl.w	r3, r2, r3
 800d38c:	43db      	mvns	r3, r3
 800d38e:	69ba      	ldr	r2, [r7, #24]
 800d390:	4013      	ands	r3, r2
 800d392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	689a      	ldr	r2, [r3, #8]
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	005b      	lsls	r3, r3, #1
 800d39c:	fa02 f303 	lsl.w	r3, r2, r3
 800d3a0:	69ba      	ldr	r2, [r7, #24]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	69ba      	ldr	r2, [r7, #24]
 800d3aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	f003 0303 	and.w	r3, r3, #3
 800d3b4:	2b02      	cmp	r3, #2
 800d3b6:	d123      	bne.n	800d400 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800d3b8:	69fb      	ldr	r3, [r7, #28]
 800d3ba:	08da      	lsrs	r2, r3, #3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	3208      	adds	r2, #8
 800d3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	f003 0307 	and.w	r3, r3, #7
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	220f      	movs	r2, #15
 800d3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3d4:	43db      	mvns	r3, r3
 800d3d6:	69ba      	ldr	r2, [r7, #24]
 800d3d8:	4013      	ands	r3, r2
 800d3da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	691a      	ldr	r2, [r3, #16]
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	f003 0307 	and.w	r3, r3, #7
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3ec:	69ba      	ldr	r2, [r7, #24]
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	08da      	lsrs	r2, r3, #3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	3208      	adds	r2, #8
 800d3fa:	69b9      	ldr	r1, [r7, #24]
 800d3fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	005b      	lsls	r3, r3, #1
 800d40a:	2203      	movs	r2, #3
 800d40c:	fa02 f303 	lsl.w	r3, r2, r3
 800d410:	43db      	mvns	r3, r3
 800d412:	69ba      	ldr	r2, [r7, #24]
 800d414:	4013      	ands	r3, r2
 800d416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	f003 0203 	and.w	r2, r3, #3
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	005b      	lsls	r3, r3, #1
 800d424:	fa02 f303 	lsl.w	r3, r2, r3
 800d428:	69ba      	ldr	r2, [r7, #24]
 800d42a:	4313      	orrs	r3, r2
 800d42c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	69ba      	ldr	r2, [r7, #24]
 800d432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f000 80be 	beq.w	800d5be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d442:	4b66      	ldr	r3, [pc, #408]	; (800d5dc <HAL_GPIO_Init+0x324>)
 800d444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d446:	4a65      	ldr	r2, [pc, #404]	; (800d5dc <HAL_GPIO_Init+0x324>)
 800d448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d44c:	6453      	str	r3, [r2, #68]	; 0x44
 800d44e:	4b63      	ldr	r3, [pc, #396]	; (800d5dc <HAL_GPIO_Init+0x324>)
 800d450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d456:	60fb      	str	r3, [r7, #12]
 800d458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800d45a:	4a61      	ldr	r2, [pc, #388]	; (800d5e0 <HAL_GPIO_Init+0x328>)
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	089b      	lsrs	r3, r3, #2
 800d460:	3302      	adds	r3, #2
 800d462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d466:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	f003 0303 	and.w	r3, r3, #3
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	220f      	movs	r2, #15
 800d472:	fa02 f303 	lsl.w	r3, r2, r3
 800d476:	43db      	mvns	r3, r3
 800d478:	69ba      	ldr	r2, [r7, #24]
 800d47a:	4013      	ands	r3, r2
 800d47c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4a58      	ldr	r2, [pc, #352]	; (800d5e4 <HAL_GPIO_Init+0x32c>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d037      	beq.n	800d4f6 <HAL_GPIO_Init+0x23e>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	4a57      	ldr	r2, [pc, #348]	; (800d5e8 <HAL_GPIO_Init+0x330>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d031      	beq.n	800d4f2 <HAL_GPIO_Init+0x23a>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4a56      	ldr	r2, [pc, #344]	; (800d5ec <HAL_GPIO_Init+0x334>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d02b      	beq.n	800d4ee <HAL_GPIO_Init+0x236>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	4a55      	ldr	r2, [pc, #340]	; (800d5f0 <HAL_GPIO_Init+0x338>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d025      	beq.n	800d4ea <HAL_GPIO_Init+0x232>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4a54      	ldr	r2, [pc, #336]	; (800d5f4 <HAL_GPIO_Init+0x33c>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d01f      	beq.n	800d4e6 <HAL_GPIO_Init+0x22e>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4a53      	ldr	r2, [pc, #332]	; (800d5f8 <HAL_GPIO_Init+0x340>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d019      	beq.n	800d4e2 <HAL_GPIO_Init+0x22a>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4a52      	ldr	r2, [pc, #328]	; (800d5fc <HAL_GPIO_Init+0x344>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d013      	beq.n	800d4de <HAL_GPIO_Init+0x226>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	4a51      	ldr	r2, [pc, #324]	; (800d600 <HAL_GPIO_Init+0x348>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d00d      	beq.n	800d4da <HAL_GPIO_Init+0x222>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	4a50      	ldr	r2, [pc, #320]	; (800d604 <HAL_GPIO_Init+0x34c>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d007      	beq.n	800d4d6 <HAL_GPIO_Init+0x21e>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	4a4f      	ldr	r2, [pc, #316]	; (800d608 <HAL_GPIO_Init+0x350>)
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d101      	bne.n	800d4d2 <HAL_GPIO_Init+0x21a>
 800d4ce:	2309      	movs	r3, #9
 800d4d0:	e012      	b.n	800d4f8 <HAL_GPIO_Init+0x240>
 800d4d2:	230a      	movs	r3, #10
 800d4d4:	e010      	b.n	800d4f8 <HAL_GPIO_Init+0x240>
 800d4d6:	2308      	movs	r3, #8
 800d4d8:	e00e      	b.n	800d4f8 <HAL_GPIO_Init+0x240>
 800d4da:	2307      	movs	r3, #7
 800d4dc:	e00c      	b.n	800d4f8 <HAL_GPIO_Init+0x240>
 800d4de:	2306      	movs	r3, #6
 800d4e0:	e00a      	b.n	800d4f8 <HAL_GPIO_Init+0x240>
 800d4e2:	2305      	movs	r3, #5
 800d4e4:	e008      	b.n	800d4f8 <HAL_GPIO_Init+0x240>
 800d4e6:	2304      	movs	r3, #4
 800d4e8:	e006      	b.n	800d4f8 <HAL_GPIO_Init+0x240>
 800d4ea:	2303      	movs	r3, #3
 800d4ec:	e004      	b.n	800d4f8 <HAL_GPIO_Init+0x240>
 800d4ee:	2302      	movs	r3, #2
 800d4f0:	e002      	b.n	800d4f8 <HAL_GPIO_Init+0x240>
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e000      	b.n	800d4f8 <HAL_GPIO_Init+0x240>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	69fa      	ldr	r2, [r7, #28]
 800d4fa:	f002 0203 	and.w	r2, r2, #3
 800d4fe:	0092      	lsls	r2, r2, #2
 800d500:	4093      	lsls	r3, r2
 800d502:	69ba      	ldr	r2, [r7, #24]
 800d504:	4313      	orrs	r3, r2
 800d506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800d508:	4935      	ldr	r1, [pc, #212]	; (800d5e0 <HAL_GPIO_Init+0x328>)
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	089b      	lsrs	r3, r3, #2
 800d50e:	3302      	adds	r3, #2
 800d510:	69ba      	ldr	r2, [r7, #24]
 800d512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d516:	4b3d      	ldr	r3, [pc, #244]	; (800d60c <HAL_GPIO_Init+0x354>)
 800d518:	689b      	ldr	r3, [r3, #8]
 800d51a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	43db      	mvns	r3, r3
 800d520:	69ba      	ldr	r2, [r7, #24]
 800d522:	4013      	ands	r3, r2
 800d524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d003      	beq.n	800d53a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800d532:	69ba      	ldr	r2, [r7, #24]
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	4313      	orrs	r3, r2
 800d538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d53a:	4a34      	ldr	r2, [pc, #208]	; (800d60c <HAL_GPIO_Init+0x354>)
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d540:	4b32      	ldr	r3, [pc, #200]	; (800d60c <HAL_GPIO_Init+0x354>)
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	43db      	mvns	r3, r3
 800d54a:	69ba      	ldr	r2, [r7, #24]
 800d54c:	4013      	ands	r3, r2
 800d54e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d003      	beq.n	800d564 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800d55c:	69ba      	ldr	r2, [r7, #24]
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	4313      	orrs	r3, r2
 800d562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d564:	4a29      	ldr	r2, [pc, #164]	; (800d60c <HAL_GPIO_Init+0x354>)
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800d56a:	4b28      	ldr	r3, [pc, #160]	; (800d60c <HAL_GPIO_Init+0x354>)
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	43db      	mvns	r3, r3
 800d574:	69ba      	ldr	r2, [r7, #24]
 800d576:	4013      	ands	r3, r2
 800d578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d582:	2b00      	cmp	r3, #0
 800d584:	d003      	beq.n	800d58e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800d586:	69ba      	ldr	r2, [r7, #24]
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	4313      	orrs	r3, r2
 800d58c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d58e:	4a1f      	ldr	r2, [pc, #124]	; (800d60c <HAL_GPIO_Init+0x354>)
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d594:	4b1d      	ldr	r3, [pc, #116]	; (800d60c <HAL_GPIO_Init+0x354>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	43db      	mvns	r3, r3
 800d59e:	69ba      	ldr	r2, [r7, #24]
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d003      	beq.n	800d5b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800d5b0:	69ba      	ldr	r2, [r7, #24]
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	4313      	orrs	r3, r2
 800d5b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d5b8:	4a14      	ldr	r2, [pc, #80]	; (800d60c <HAL_GPIO_Init+0x354>)
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	61fb      	str	r3, [r7, #28]
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	2b0f      	cmp	r3, #15
 800d5c8:	f67f ae86 	bls.w	800d2d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800d5cc:	bf00      	nop
 800d5ce:	bf00      	nop
 800d5d0:	3724      	adds	r7, #36	; 0x24
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	40023800 	.word	0x40023800
 800d5e0:	40013800 	.word	0x40013800
 800d5e4:	40020000 	.word	0x40020000
 800d5e8:	40020400 	.word	0x40020400
 800d5ec:	40020800 	.word	0x40020800
 800d5f0:	40020c00 	.word	0x40020c00
 800d5f4:	40021000 	.word	0x40021000
 800d5f8:	40021400 	.word	0x40021400
 800d5fc:	40021800 	.word	0x40021800
 800d600:	40021c00 	.word	0x40021c00
 800d604:	40022000 	.word	0x40022000
 800d608:	40022400 	.word	0x40022400
 800d60c:	40013c00 	.word	0x40013c00

0800d610 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d610:	b480      	push	{r7}
 800d612:	b085      	sub	sp, #20
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	460b      	mov	r3, r1
 800d61a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	691a      	ldr	r2, [r3, #16]
 800d620:	887b      	ldrh	r3, [r7, #2]
 800d622:	4013      	ands	r3, r2
 800d624:	2b00      	cmp	r3, #0
 800d626:	d002      	beq.n	800d62e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d628:	2301      	movs	r3, #1
 800d62a:	73fb      	strb	r3, [r7, #15]
 800d62c:	e001      	b.n	800d632 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d62e:	2300      	movs	r3, #0
 800d630:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d632:	7bfb      	ldrb	r3, [r7, #15]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3714      	adds	r7, #20
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	460b      	mov	r3, r1
 800d64a:	807b      	strh	r3, [r7, #2]
 800d64c:	4613      	mov	r3, r2
 800d64e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d650:	787b      	ldrb	r3, [r7, #1]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d003      	beq.n	800d65e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d656:	887a      	ldrh	r2, [r7, #2]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800d65c:	e003      	b.n	800d666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800d65e:	887b      	ldrh	r3, [r7, #2]
 800d660:	041a      	lsls	r2, r3, #16
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	619a      	str	r2, [r3, #24]
}
 800d666:	bf00      	nop
 800d668:	370c      	adds	r7, #12
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
	...

0800d674 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d67a:	2300      	movs	r3, #0
 800d67c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d67e:	4b23      	ldr	r3, [pc, #140]	; (800d70c <HAL_PWREx_EnableOverDrive+0x98>)
 800d680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d682:	4a22      	ldr	r2, [pc, #136]	; (800d70c <HAL_PWREx_EnableOverDrive+0x98>)
 800d684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d688:	6413      	str	r3, [r2, #64]	; 0x40
 800d68a:	4b20      	ldr	r3, [pc, #128]	; (800d70c <HAL_PWREx_EnableOverDrive+0x98>)
 800d68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d68e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d692:	603b      	str	r3, [r7, #0]
 800d694:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d696:	4b1e      	ldr	r3, [pc, #120]	; (800d710 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a1d      	ldr	r2, [pc, #116]	; (800d710 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d69c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d6a2:	f7fd fb09 	bl	800acb8 <HAL_GetTick>
 800d6a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d6a8:	e009      	b.n	800d6be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d6aa:	f7fd fb05 	bl	800acb8 <HAL_GetTick>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	1ad3      	subs	r3, r2, r3
 800d6b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6b8:	d901      	bls.n	800d6be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d6ba:	2303      	movs	r3, #3
 800d6bc:	e022      	b.n	800d704 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d6be:	4b14      	ldr	r3, [pc, #80]	; (800d710 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d6c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6ca:	d1ee      	bne.n	800d6aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d6cc:	4b10      	ldr	r3, [pc, #64]	; (800d710 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a0f      	ldr	r2, [pc, #60]	; (800d710 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d6d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d6d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d6d8:	f7fd faee 	bl	800acb8 <HAL_GetTick>
 800d6dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d6de:	e009      	b.n	800d6f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d6e0:	f7fd faea 	bl	800acb8 <HAL_GetTick>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6ee:	d901      	bls.n	800d6f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	e007      	b.n	800d704 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d6f4:	4b06      	ldr	r3, [pc, #24]	; (800d710 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d700:	d1ee      	bne.n	800d6e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	40023800 	.word	0x40023800
 800d710:	40007000 	.word	0x40007000

0800d714 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b086      	sub	sp, #24
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800d71c:	2300      	movs	r3, #0
 800d71e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d101      	bne.n	800d72a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d726:	2301      	movs	r3, #1
 800d728:	e291      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f003 0301 	and.w	r3, r3, #1
 800d732:	2b00      	cmp	r3, #0
 800d734:	f000 8087 	beq.w	800d846 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d738:	4b96      	ldr	r3, [pc, #600]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	f003 030c 	and.w	r3, r3, #12
 800d740:	2b04      	cmp	r3, #4
 800d742:	d00c      	beq.n	800d75e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d744:	4b93      	ldr	r3, [pc, #588]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	f003 030c 	and.w	r3, r3, #12
 800d74c:	2b08      	cmp	r3, #8
 800d74e:	d112      	bne.n	800d776 <HAL_RCC_OscConfig+0x62>
 800d750:	4b90      	ldr	r3, [pc, #576]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d75c:	d10b      	bne.n	800d776 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d75e:	4b8d      	ldr	r3, [pc, #564]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d766:	2b00      	cmp	r3, #0
 800d768:	d06c      	beq.n	800d844 <HAL_RCC_OscConfig+0x130>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d168      	bne.n	800d844 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d772:	2301      	movs	r3, #1
 800d774:	e26b      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d77e:	d106      	bne.n	800d78e <HAL_RCC_OscConfig+0x7a>
 800d780:	4b84      	ldr	r3, [pc, #528]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a83      	ldr	r2, [pc, #524]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d78a:	6013      	str	r3, [r2, #0]
 800d78c:	e02e      	b.n	800d7ec <HAL_RCC_OscConfig+0xd8>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d10c      	bne.n	800d7b0 <HAL_RCC_OscConfig+0x9c>
 800d796:	4b7f      	ldr	r3, [pc, #508]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4a7e      	ldr	r2, [pc, #504]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d79c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7a0:	6013      	str	r3, [r2, #0]
 800d7a2:	4b7c      	ldr	r3, [pc, #496]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a7b      	ldr	r2, [pc, #492]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d7ac:	6013      	str	r3, [r2, #0]
 800d7ae:	e01d      	b.n	800d7ec <HAL_RCC_OscConfig+0xd8>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d7b8:	d10c      	bne.n	800d7d4 <HAL_RCC_OscConfig+0xc0>
 800d7ba:	4b76      	ldr	r3, [pc, #472]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4a75      	ldr	r2, [pc, #468]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	4b73      	ldr	r3, [pc, #460]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a72      	ldr	r2, [pc, #456]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7d0:	6013      	str	r3, [r2, #0]
 800d7d2:	e00b      	b.n	800d7ec <HAL_RCC_OscConfig+0xd8>
 800d7d4:	4b6f      	ldr	r3, [pc, #444]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a6e      	ldr	r2, [pc, #440]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7de:	6013      	str	r3, [r2, #0]
 800d7e0:	4b6c      	ldr	r3, [pc, #432]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a6b      	ldr	r2, [pc, #428]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d7e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d7ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d013      	beq.n	800d81c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7f4:	f7fd fa60 	bl	800acb8 <HAL_GetTick>
 800d7f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d7fa:	e008      	b.n	800d80e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d7fc:	f7fd fa5c 	bl	800acb8 <HAL_GetTick>
 800d800:	4602      	mov	r2, r0
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	1ad3      	subs	r3, r2, r3
 800d806:	2b64      	cmp	r3, #100	; 0x64
 800d808:	d901      	bls.n	800d80e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d80a:	2303      	movs	r3, #3
 800d80c:	e21f      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d80e:	4b61      	ldr	r3, [pc, #388]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d816:	2b00      	cmp	r3, #0
 800d818:	d0f0      	beq.n	800d7fc <HAL_RCC_OscConfig+0xe8>
 800d81a:	e014      	b.n	800d846 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d81c:	f7fd fa4c 	bl	800acb8 <HAL_GetTick>
 800d820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d822:	e008      	b.n	800d836 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d824:	f7fd fa48 	bl	800acb8 <HAL_GetTick>
 800d828:	4602      	mov	r2, r0
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	1ad3      	subs	r3, r2, r3
 800d82e:	2b64      	cmp	r3, #100	; 0x64
 800d830:	d901      	bls.n	800d836 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d832:	2303      	movs	r3, #3
 800d834:	e20b      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d836:	4b57      	ldr	r3, [pc, #348]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d1f0      	bne.n	800d824 <HAL_RCC_OscConfig+0x110>
 800d842:	e000      	b.n	800d846 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f003 0302 	and.w	r3, r3, #2
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d069      	beq.n	800d926 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d852:	4b50      	ldr	r3, [pc, #320]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d854:	689b      	ldr	r3, [r3, #8]
 800d856:	f003 030c 	and.w	r3, r3, #12
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d00b      	beq.n	800d876 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d85e:	4b4d      	ldr	r3, [pc, #308]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	f003 030c 	and.w	r3, r3, #12
 800d866:	2b08      	cmp	r3, #8
 800d868:	d11c      	bne.n	800d8a4 <HAL_RCC_OscConfig+0x190>
 800d86a:	4b4a      	ldr	r3, [pc, #296]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d872:	2b00      	cmp	r3, #0
 800d874:	d116      	bne.n	800d8a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d876:	4b47      	ldr	r3, [pc, #284]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f003 0302 	and.w	r3, r3, #2
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d005      	beq.n	800d88e <HAL_RCC_OscConfig+0x17a>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	68db      	ldr	r3, [r3, #12]
 800d886:	2b01      	cmp	r3, #1
 800d888:	d001      	beq.n	800d88e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d88a:	2301      	movs	r3, #1
 800d88c:	e1df      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d88e:	4b41      	ldr	r3, [pc, #260]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	691b      	ldr	r3, [r3, #16]
 800d89a:	00db      	lsls	r3, r3, #3
 800d89c:	493d      	ldr	r1, [pc, #244]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d8a2:	e040      	b.n	800d926 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d023      	beq.n	800d8f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d8ac:	4b39      	ldr	r3, [pc, #228]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a38      	ldr	r2, [pc, #224]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d8b2:	f043 0301 	orr.w	r3, r3, #1
 800d8b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8b8:	f7fd f9fe 	bl	800acb8 <HAL_GetTick>
 800d8bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d8be:	e008      	b.n	800d8d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d8c0:	f7fd f9fa 	bl	800acb8 <HAL_GetTick>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d901      	bls.n	800d8d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d8ce:	2303      	movs	r3, #3
 800d8d0:	e1bd      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d8d2:	4b30      	ldr	r3, [pc, #192]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f003 0302 	and.w	r3, r3, #2
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d0f0      	beq.n	800d8c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d8de:	4b2d      	ldr	r3, [pc, #180]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	691b      	ldr	r3, [r3, #16]
 800d8ea:	00db      	lsls	r3, r3, #3
 800d8ec:	4929      	ldr	r1, [pc, #164]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	600b      	str	r3, [r1, #0]
 800d8f2:	e018      	b.n	800d926 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d8f4:	4b27      	ldr	r3, [pc, #156]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4a26      	ldr	r2, [pc, #152]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d8fa:	f023 0301 	bic.w	r3, r3, #1
 800d8fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d900:	f7fd f9da 	bl	800acb8 <HAL_GetTick>
 800d904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d906:	e008      	b.n	800d91a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d908:	f7fd f9d6 	bl	800acb8 <HAL_GetTick>
 800d90c:	4602      	mov	r2, r0
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	2b02      	cmp	r3, #2
 800d914:	d901      	bls.n	800d91a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d916:	2303      	movs	r3, #3
 800d918:	e199      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d91a:	4b1e      	ldr	r3, [pc, #120]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f003 0302 	and.w	r3, r3, #2
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1f0      	bne.n	800d908 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f003 0308 	and.w	r3, r3, #8
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d038      	beq.n	800d9a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	695b      	ldr	r3, [r3, #20]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d019      	beq.n	800d96e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d93a:	4b16      	ldr	r3, [pc, #88]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d93c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d93e:	4a15      	ldr	r2, [pc, #84]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d940:	f043 0301 	orr.w	r3, r3, #1
 800d944:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d946:	f7fd f9b7 	bl	800acb8 <HAL_GetTick>
 800d94a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d94c:	e008      	b.n	800d960 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d94e:	f7fd f9b3 	bl	800acb8 <HAL_GetTick>
 800d952:	4602      	mov	r2, r0
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	1ad3      	subs	r3, r2, r3
 800d958:	2b02      	cmp	r3, #2
 800d95a:	d901      	bls.n	800d960 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d95c:	2303      	movs	r3, #3
 800d95e:	e176      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d960:	4b0c      	ldr	r3, [pc, #48]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d964:	f003 0302 	and.w	r3, r3, #2
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d0f0      	beq.n	800d94e <HAL_RCC_OscConfig+0x23a>
 800d96c:	e01a      	b.n	800d9a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d96e:	4b09      	ldr	r3, [pc, #36]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d972:	4a08      	ldr	r2, [pc, #32]	; (800d994 <HAL_RCC_OscConfig+0x280>)
 800d974:	f023 0301 	bic.w	r3, r3, #1
 800d978:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d97a:	f7fd f99d 	bl	800acb8 <HAL_GetTick>
 800d97e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d980:	e00a      	b.n	800d998 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d982:	f7fd f999 	bl	800acb8 <HAL_GetTick>
 800d986:	4602      	mov	r2, r0
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	1ad3      	subs	r3, r2, r3
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	d903      	bls.n	800d998 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d990:	2303      	movs	r3, #3
 800d992:	e15c      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
 800d994:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d998:	4b91      	ldr	r3, [pc, #580]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800d99a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d99c:	f003 0302 	and.w	r3, r3, #2
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1ee      	bne.n	800d982 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f003 0304 	and.w	r3, r3, #4
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f000 80a4 	beq.w	800dafa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d9b2:	4b8b      	ldr	r3, [pc, #556]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800d9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d10d      	bne.n	800d9da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d9be:	4b88      	ldr	r3, [pc, #544]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800d9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c2:	4a87      	ldr	r2, [pc, #540]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800d9c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9c8:	6413      	str	r3, [r2, #64]	; 0x40
 800d9ca:	4b85      	ldr	r3, [pc, #532]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800d9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9d2:	60bb      	str	r3, [r7, #8]
 800d9d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d9da:	4b82      	ldr	r3, [pc, #520]	; (800dbe4 <HAL_RCC_OscConfig+0x4d0>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d118      	bne.n	800da18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d9e6:	4b7f      	ldr	r3, [pc, #508]	; (800dbe4 <HAL_RCC_OscConfig+0x4d0>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4a7e      	ldr	r2, [pc, #504]	; (800dbe4 <HAL_RCC_OscConfig+0x4d0>)
 800d9ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d9f2:	f7fd f961 	bl	800acb8 <HAL_GetTick>
 800d9f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d9f8:	e008      	b.n	800da0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d9fa:	f7fd f95d 	bl	800acb8 <HAL_GetTick>
 800d9fe:	4602      	mov	r2, r0
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	1ad3      	subs	r3, r2, r3
 800da04:	2b64      	cmp	r3, #100	; 0x64
 800da06:	d901      	bls.n	800da0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800da08:	2303      	movs	r3, #3
 800da0a:	e120      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800da0c:	4b75      	ldr	r3, [pc, #468]	; (800dbe4 <HAL_RCC_OscConfig+0x4d0>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da14:	2b00      	cmp	r3, #0
 800da16:	d0f0      	beq.n	800d9fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d106      	bne.n	800da2e <HAL_RCC_OscConfig+0x31a>
 800da20:	4b6f      	ldr	r3, [pc, #444]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da24:	4a6e      	ldr	r2, [pc, #440]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da26:	f043 0301 	orr.w	r3, r3, #1
 800da2a:	6713      	str	r3, [r2, #112]	; 0x70
 800da2c:	e02d      	b.n	800da8a <HAL_RCC_OscConfig+0x376>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	689b      	ldr	r3, [r3, #8]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d10c      	bne.n	800da50 <HAL_RCC_OscConfig+0x33c>
 800da36:	4b6a      	ldr	r3, [pc, #424]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da3a:	4a69      	ldr	r2, [pc, #420]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da3c:	f023 0301 	bic.w	r3, r3, #1
 800da40:	6713      	str	r3, [r2, #112]	; 0x70
 800da42:	4b67      	ldr	r3, [pc, #412]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da46:	4a66      	ldr	r2, [pc, #408]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da48:	f023 0304 	bic.w	r3, r3, #4
 800da4c:	6713      	str	r3, [r2, #112]	; 0x70
 800da4e:	e01c      	b.n	800da8a <HAL_RCC_OscConfig+0x376>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	2b05      	cmp	r3, #5
 800da56:	d10c      	bne.n	800da72 <HAL_RCC_OscConfig+0x35e>
 800da58:	4b61      	ldr	r3, [pc, #388]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da5c:	4a60      	ldr	r2, [pc, #384]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da5e:	f043 0304 	orr.w	r3, r3, #4
 800da62:	6713      	str	r3, [r2, #112]	; 0x70
 800da64:	4b5e      	ldr	r3, [pc, #376]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da68:	4a5d      	ldr	r2, [pc, #372]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da6a:	f043 0301 	orr.w	r3, r3, #1
 800da6e:	6713      	str	r3, [r2, #112]	; 0x70
 800da70:	e00b      	b.n	800da8a <HAL_RCC_OscConfig+0x376>
 800da72:	4b5b      	ldr	r3, [pc, #364]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da76:	4a5a      	ldr	r2, [pc, #360]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da78:	f023 0301 	bic.w	r3, r3, #1
 800da7c:	6713      	str	r3, [r2, #112]	; 0x70
 800da7e:	4b58      	ldr	r3, [pc, #352]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da82:	4a57      	ldr	r2, [pc, #348]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800da84:	f023 0304 	bic.w	r3, r3, #4
 800da88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d015      	beq.n	800dabe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da92:	f7fd f911 	bl	800acb8 <HAL_GetTick>
 800da96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800da98:	e00a      	b.n	800dab0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da9a:	f7fd f90d 	bl	800acb8 <HAL_GetTick>
 800da9e:	4602      	mov	r2, r0
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	1ad3      	subs	r3, r2, r3
 800daa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d901      	bls.n	800dab0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800daac:	2303      	movs	r3, #3
 800daae:	e0ce      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dab0:	4b4b      	ldr	r3, [pc, #300]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800dab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dab4:	f003 0302 	and.w	r3, r3, #2
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d0ee      	beq.n	800da9a <HAL_RCC_OscConfig+0x386>
 800dabc:	e014      	b.n	800dae8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dabe:	f7fd f8fb 	bl	800acb8 <HAL_GetTick>
 800dac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dac4:	e00a      	b.n	800dadc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dac6:	f7fd f8f7 	bl	800acb8 <HAL_GetTick>
 800daca:	4602      	mov	r2, r0
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	1ad3      	subs	r3, r2, r3
 800dad0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d901      	bls.n	800dadc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800dad8:	2303      	movs	r3, #3
 800dada:	e0b8      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dadc:	4b40      	ldr	r3, [pc, #256]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800dade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dae0:	f003 0302 	and.w	r3, r3, #2
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d1ee      	bne.n	800dac6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800dae8:	7dfb      	ldrb	r3, [r7, #23]
 800daea:	2b01      	cmp	r3, #1
 800daec:	d105      	bne.n	800dafa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800daee:	4b3c      	ldr	r3, [pc, #240]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800daf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daf2:	4a3b      	ldr	r2, [pc, #236]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800daf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800daf8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	699b      	ldr	r3, [r3, #24]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	f000 80a4 	beq.w	800dc4c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800db04:	4b36      	ldr	r3, [pc, #216]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	f003 030c 	and.w	r3, r3, #12
 800db0c:	2b08      	cmp	r3, #8
 800db0e:	d06b      	beq.n	800dbe8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	699b      	ldr	r3, [r3, #24]
 800db14:	2b02      	cmp	r3, #2
 800db16:	d149      	bne.n	800dbac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db18:	4b31      	ldr	r3, [pc, #196]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a30      	ldr	r2, [pc, #192]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800db1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db24:	f7fd f8c8 	bl	800acb8 <HAL_GetTick>
 800db28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db2a:	e008      	b.n	800db3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db2c:	f7fd f8c4 	bl	800acb8 <HAL_GetTick>
 800db30:	4602      	mov	r2, r0
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	1ad3      	subs	r3, r2, r3
 800db36:	2b02      	cmp	r3, #2
 800db38:	d901      	bls.n	800db3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800db3a:	2303      	movs	r3, #3
 800db3c:	e087      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db3e:	4b28      	ldr	r3, [pc, #160]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1f0      	bne.n	800db2c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	69da      	ldr	r2, [r3, #28]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6a1b      	ldr	r3, [r3, #32]
 800db52:	431a      	orrs	r2, r3
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db58:	019b      	lsls	r3, r3, #6
 800db5a:	431a      	orrs	r2, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db60:	085b      	lsrs	r3, r3, #1
 800db62:	3b01      	subs	r3, #1
 800db64:	041b      	lsls	r3, r3, #16
 800db66:	431a      	orrs	r2, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6c:	061b      	lsls	r3, r3, #24
 800db6e:	4313      	orrs	r3, r2
 800db70:	4a1b      	ldr	r2, [pc, #108]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800db72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db76:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800db78:	4b19      	ldr	r3, [pc, #100]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a18      	ldr	r2, [pc, #96]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800db7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800db82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db84:	f7fd f898 	bl	800acb8 <HAL_GetTick>
 800db88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800db8a:	e008      	b.n	800db9e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db8c:	f7fd f894 	bl	800acb8 <HAL_GetTick>
 800db90:	4602      	mov	r2, r0
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	1ad3      	subs	r3, r2, r3
 800db96:	2b02      	cmp	r3, #2
 800db98:	d901      	bls.n	800db9e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800db9a:	2303      	movs	r3, #3
 800db9c:	e057      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800db9e:	4b10      	ldr	r3, [pc, #64]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d0f0      	beq.n	800db8c <HAL_RCC_OscConfig+0x478>
 800dbaa:	e04f      	b.n	800dc4c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dbac:	4b0c      	ldr	r3, [pc, #48]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a0b      	ldr	r2, [pc, #44]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800dbb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dbb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbb8:	f7fd f87e 	bl	800acb8 <HAL_GetTick>
 800dbbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dbbe:	e008      	b.n	800dbd2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbc0:	f7fd f87a 	bl	800acb8 <HAL_GetTick>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	1ad3      	subs	r3, r2, r3
 800dbca:	2b02      	cmp	r3, #2
 800dbcc:	d901      	bls.n	800dbd2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800dbce:	2303      	movs	r3, #3
 800dbd0:	e03d      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dbd2:	4b03      	ldr	r3, [pc, #12]	; (800dbe0 <HAL_RCC_OscConfig+0x4cc>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d1f0      	bne.n	800dbc0 <HAL_RCC_OscConfig+0x4ac>
 800dbde:	e035      	b.n	800dc4c <HAL_RCC_OscConfig+0x538>
 800dbe0:	40023800 	.word	0x40023800
 800dbe4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800dbe8:	4b1b      	ldr	r3, [pc, #108]	; (800dc58 <HAL_RCC_OscConfig+0x544>)
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	699b      	ldr	r3, [r3, #24]
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d028      	beq.n	800dc48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d121      	bne.n	800dc48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d11a      	bne.n	800dc48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc12:	68fa      	ldr	r2, [r7, #12]
 800dc14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dc18:	4013      	ands	r3, r2
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dc1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d111      	bne.n	800dc48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc2e:	085b      	lsrs	r3, r3, #1
 800dc30:	3b01      	subs	r3, #1
 800dc32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d107      	bne.n	800dc48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d001      	beq.n	800dc4c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800dc48:	2301      	movs	r3, #1
 800dc4a:	e000      	b.n	800dc4e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800dc4c:	2300      	movs	r3, #0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3718      	adds	r7, #24
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	40023800 	.word	0x40023800

0800dc5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800dc66:	2300      	movs	r3, #0
 800dc68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d101      	bne.n	800dc74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dc70:	2301      	movs	r3, #1
 800dc72:	e0d0      	b.n	800de16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dc74:	4b6a      	ldr	r3, [pc, #424]	; (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f003 030f 	and.w	r3, r3, #15
 800dc7c:	683a      	ldr	r2, [r7, #0]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d910      	bls.n	800dca4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc82:	4b67      	ldr	r3, [pc, #412]	; (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f023 020f 	bic.w	r2, r3, #15
 800dc8a:	4965      	ldr	r1, [pc, #404]	; (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc92:	4b63      	ldr	r3, [pc, #396]	; (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f003 030f 	and.w	r3, r3, #15
 800dc9a:	683a      	ldr	r2, [r7, #0]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d001      	beq.n	800dca4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	e0b8      	b.n	800de16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f003 0302 	and.w	r3, r3, #2
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d020      	beq.n	800dcf2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f003 0304 	and.w	r3, r3, #4
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d005      	beq.n	800dcc8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dcbc:	4b59      	ldr	r3, [pc, #356]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dcbe:	689b      	ldr	r3, [r3, #8]
 800dcc0:	4a58      	ldr	r2, [pc, #352]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dcc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dcc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f003 0308 	and.w	r3, r3, #8
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d005      	beq.n	800dce0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dcd4:	4b53      	ldr	r3, [pc, #332]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	4a52      	ldr	r2, [pc, #328]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dcda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dcde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dce0:	4b50      	ldr	r3, [pc, #320]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	689b      	ldr	r3, [r3, #8]
 800dcec:	494d      	ldr	r1, [pc, #308]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f003 0301 	and.w	r3, r3, #1
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d040      	beq.n	800dd80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d107      	bne.n	800dd16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd06:	4b47      	ldr	r3, [pc, #284]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d115      	bne.n	800dd3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	e07f      	b.n	800de16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	2b02      	cmp	r3, #2
 800dd1c:	d107      	bne.n	800dd2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd1e:	4b41      	ldr	r3, [pc, #260]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d109      	bne.n	800dd3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e073      	b.n	800de16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd2e:	4b3d      	ldr	r3, [pc, #244]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 0302 	and.w	r3, r3, #2
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d101      	bne.n	800dd3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	e06b      	b.n	800de16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dd3e:	4b39      	ldr	r3, [pc, #228]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dd40:	689b      	ldr	r3, [r3, #8]
 800dd42:	f023 0203 	bic.w	r2, r3, #3
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	4936      	ldr	r1, [pc, #216]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd50:	f7fc ffb2 	bl	800acb8 <HAL_GetTick>
 800dd54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd56:	e00a      	b.n	800dd6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dd58:	f7fc ffae 	bl	800acb8 <HAL_GetTick>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d901      	bls.n	800dd6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800dd6a:	2303      	movs	r3, #3
 800dd6c:	e053      	b.n	800de16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd6e:	4b2d      	ldr	r3, [pc, #180]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	f003 020c 	and.w	r2, r3, #12
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d1eb      	bne.n	800dd58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dd80:	4b27      	ldr	r3, [pc, #156]	; (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f003 030f 	and.w	r3, r3, #15
 800dd88:	683a      	ldr	r2, [r7, #0]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d210      	bcs.n	800ddb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd8e:	4b24      	ldr	r3, [pc, #144]	; (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f023 020f 	bic.w	r2, r3, #15
 800dd96:	4922      	ldr	r1, [pc, #136]	; (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd9e:	4b20      	ldr	r3, [pc, #128]	; (800de20 <HAL_RCC_ClockConfig+0x1c4>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f003 030f 	and.w	r3, r3, #15
 800dda6:	683a      	ldr	r2, [r7, #0]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d001      	beq.n	800ddb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ddac:	2301      	movs	r3, #1
 800ddae:	e032      	b.n	800de16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f003 0304 	and.w	r3, r3, #4
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d008      	beq.n	800ddce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ddbc:	4b19      	ldr	r3, [pc, #100]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	4916      	ldr	r1, [pc, #88]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f003 0308 	and.w	r3, r3, #8
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d009      	beq.n	800ddee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ddda:	4b12      	ldr	r3, [pc, #72]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800dddc:	689b      	ldr	r3, [r3, #8]
 800ddde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	691b      	ldr	r3, [r3, #16]
 800dde6:	00db      	lsls	r3, r3, #3
 800dde8:	490e      	ldr	r1, [pc, #56]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800ddea:	4313      	orrs	r3, r2
 800ddec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ddee:	f000 f821 	bl	800de34 <HAL_RCC_GetSysClockFreq>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	4b0b      	ldr	r3, [pc, #44]	; (800de24 <HAL_RCC_ClockConfig+0x1c8>)
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	091b      	lsrs	r3, r3, #4
 800ddfa:	f003 030f 	and.w	r3, r3, #15
 800ddfe:	490a      	ldr	r1, [pc, #40]	; (800de28 <HAL_RCC_ClockConfig+0x1cc>)
 800de00:	5ccb      	ldrb	r3, [r1, r3]
 800de02:	fa22 f303 	lsr.w	r3, r2, r3
 800de06:	4a09      	ldr	r2, [pc, #36]	; (800de2c <HAL_RCC_ClockConfig+0x1d0>)
 800de08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800de0a:	4b09      	ldr	r3, [pc, #36]	; (800de30 <HAL_RCC_ClockConfig+0x1d4>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fc fc18 	bl	800a644 <HAL_InitTick>

  return HAL_OK;
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	40023c00 	.word	0x40023c00
 800de24:	40023800 	.word	0x40023800
 800de28:	08028840 	.word	0x08028840
 800de2c:	20000008 	.word	0x20000008
 800de30:	2000000c 	.word	0x2000000c

0800de34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800de34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800de38:	b090      	sub	sp, #64	; 0x40
 800de3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800de3c:	2300      	movs	r3, #0
 800de3e:	637b      	str	r3, [r7, #52]	; 0x34
 800de40:	2300      	movs	r3, #0
 800de42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de44:	2300      	movs	r3, #0
 800de46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800de48:	2300      	movs	r3, #0
 800de4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800de4c:	4b59      	ldr	r3, [pc, #356]	; (800dfb4 <HAL_RCC_GetSysClockFreq+0x180>)
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	f003 030c 	and.w	r3, r3, #12
 800de54:	2b08      	cmp	r3, #8
 800de56:	d00d      	beq.n	800de74 <HAL_RCC_GetSysClockFreq+0x40>
 800de58:	2b08      	cmp	r3, #8
 800de5a:	f200 80a1 	bhi.w	800dfa0 <HAL_RCC_GetSysClockFreq+0x16c>
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d002      	beq.n	800de68 <HAL_RCC_GetSysClockFreq+0x34>
 800de62:	2b04      	cmp	r3, #4
 800de64:	d003      	beq.n	800de6e <HAL_RCC_GetSysClockFreq+0x3a>
 800de66:	e09b      	b.n	800dfa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800de68:	4b53      	ldr	r3, [pc, #332]	; (800dfb8 <HAL_RCC_GetSysClockFreq+0x184>)
 800de6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800de6c:	e09b      	b.n	800dfa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800de6e:	4b53      	ldr	r3, [pc, #332]	; (800dfbc <HAL_RCC_GetSysClockFreq+0x188>)
 800de70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800de72:	e098      	b.n	800dfa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800de74:	4b4f      	ldr	r3, [pc, #316]	; (800dfb4 <HAL_RCC_GetSysClockFreq+0x180>)
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de7c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800de7e:	4b4d      	ldr	r3, [pc, #308]	; (800dfb4 <HAL_RCC_GetSysClockFreq+0x180>)
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de86:	2b00      	cmp	r3, #0
 800de88:	d028      	beq.n	800dedc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800de8a:	4b4a      	ldr	r3, [pc, #296]	; (800dfb4 <HAL_RCC_GetSysClockFreq+0x180>)
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	099b      	lsrs	r3, r3, #6
 800de90:	2200      	movs	r2, #0
 800de92:	623b      	str	r3, [r7, #32]
 800de94:	627a      	str	r2, [r7, #36]	; 0x24
 800de96:	6a3b      	ldr	r3, [r7, #32]
 800de98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800de9c:	2100      	movs	r1, #0
 800de9e:	4b47      	ldr	r3, [pc, #284]	; (800dfbc <HAL_RCC_GetSysClockFreq+0x188>)
 800dea0:	fb03 f201 	mul.w	r2, r3, r1
 800dea4:	2300      	movs	r3, #0
 800dea6:	fb00 f303 	mul.w	r3, r0, r3
 800deaa:	4413      	add	r3, r2
 800deac:	4a43      	ldr	r2, [pc, #268]	; (800dfbc <HAL_RCC_GetSysClockFreq+0x188>)
 800deae:	fba0 1202 	umull	r1, r2, r0, r2
 800deb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800deb4:	460a      	mov	r2, r1
 800deb6:	62ba      	str	r2, [r7, #40]	; 0x28
 800deb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800deba:	4413      	add	r3, r2
 800debc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800debe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dec0:	2200      	movs	r2, #0
 800dec2:	61bb      	str	r3, [r7, #24]
 800dec4:	61fa      	str	r2, [r7, #28]
 800dec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800deca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dece:	f7f2 fe8b 	bl	8000be8 <__aeabi_uldivmod>
 800ded2:	4602      	mov	r2, r0
 800ded4:	460b      	mov	r3, r1
 800ded6:	4613      	mov	r3, r2
 800ded8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800deda:	e053      	b.n	800df84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dedc:	4b35      	ldr	r3, [pc, #212]	; (800dfb4 <HAL_RCC_GetSysClockFreq+0x180>)
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	099b      	lsrs	r3, r3, #6
 800dee2:	2200      	movs	r2, #0
 800dee4:	613b      	str	r3, [r7, #16]
 800dee6:	617a      	str	r2, [r7, #20]
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800deee:	f04f 0b00 	mov.w	fp, #0
 800def2:	4652      	mov	r2, sl
 800def4:	465b      	mov	r3, fp
 800def6:	f04f 0000 	mov.w	r0, #0
 800defa:	f04f 0100 	mov.w	r1, #0
 800defe:	0159      	lsls	r1, r3, #5
 800df00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800df04:	0150      	lsls	r0, r2, #5
 800df06:	4602      	mov	r2, r0
 800df08:	460b      	mov	r3, r1
 800df0a:	ebb2 080a 	subs.w	r8, r2, sl
 800df0e:	eb63 090b 	sbc.w	r9, r3, fp
 800df12:	f04f 0200 	mov.w	r2, #0
 800df16:	f04f 0300 	mov.w	r3, #0
 800df1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800df1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800df22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800df26:	ebb2 0408 	subs.w	r4, r2, r8
 800df2a:	eb63 0509 	sbc.w	r5, r3, r9
 800df2e:	f04f 0200 	mov.w	r2, #0
 800df32:	f04f 0300 	mov.w	r3, #0
 800df36:	00eb      	lsls	r3, r5, #3
 800df38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800df3c:	00e2      	lsls	r2, r4, #3
 800df3e:	4614      	mov	r4, r2
 800df40:	461d      	mov	r5, r3
 800df42:	eb14 030a 	adds.w	r3, r4, sl
 800df46:	603b      	str	r3, [r7, #0]
 800df48:	eb45 030b 	adc.w	r3, r5, fp
 800df4c:	607b      	str	r3, [r7, #4]
 800df4e:	f04f 0200 	mov.w	r2, #0
 800df52:	f04f 0300 	mov.w	r3, #0
 800df56:	e9d7 4500 	ldrd	r4, r5, [r7]
 800df5a:	4629      	mov	r1, r5
 800df5c:	028b      	lsls	r3, r1, #10
 800df5e:	4621      	mov	r1, r4
 800df60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800df64:	4621      	mov	r1, r4
 800df66:	028a      	lsls	r2, r1, #10
 800df68:	4610      	mov	r0, r2
 800df6a:	4619      	mov	r1, r3
 800df6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df6e:	2200      	movs	r2, #0
 800df70:	60bb      	str	r3, [r7, #8]
 800df72:	60fa      	str	r2, [r7, #12]
 800df74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800df78:	f7f2 fe36 	bl	8000be8 <__aeabi_uldivmod>
 800df7c:	4602      	mov	r2, r0
 800df7e:	460b      	mov	r3, r1
 800df80:	4613      	mov	r3, r2
 800df82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800df84:	4b0b      	ldr	r3, [pc, #44]	; (800dfb4 <HAL_RCC_GetSysClockFreq+0x180>)
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	0c1b      	lsrs	r3, r3, #16
 800df8a:	f003 0303 	and.w	r3, r3, #3
 800df8e:	3301      	adds	r3, #1
 800df90:	005b      	lsls	r3, r3, #1
 800df92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800df94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df98:	fbb2 f3f3 	udiv	r3, r2, r3
 800df9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800df9e:	e002      	b.n	800dfa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dfa0:	4b05      	ldr	r3, [pc, #20]	; (800dfb8 <HAL_RCC_GetSysClockFreq+0x184>)
 800dfa2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800dfa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3740      	adds	r7, #64	; 0x40
 800dfac:	46bd      	mov	sp, r7
 800dfae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dfb2:	bf00      	nop
 800dfb4:	40023800 	.word	0x40023800
 800dfb8:	00f42400 	.word	0x00f42400
 800dfbc:	017d7840 	.word	0x017d7840

0800dfc0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dfc4:	4b03      	ldr	r3, [pc, #12]	; (800dfd4 <HAL_RCC_GetHCLKFreq+0x14>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	20000008 	.word	0x20000008

0800dfd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dfdc:	f7ff fff0 	bl	800dfc0 <HAL_RCC_GetHCLKFreq>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	4b05      	ldr	r3, [pc, #20]	; (800dff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dfe4:	689b      	ldr	r3, [r3, #8]
 800dfe6:	0a9b      	lsrs	r3, r3, #10
 800dfe8:	f003 0307 	and.w	r3, r3, #7
 800dfec:	4903      	ldr	r1, [pc, #12]	; (800dffc <HAL_RCC_GetPCLK1Freq+0x24>)
 800dfee:	5ccb      	ldrb	r3, [r1, r3]
 800dff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	40023800 	.word	0x40023800
 800dffc:	08028850 	.word	0x08028850

0800e000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e004:	f7ff ffdc 	bl	800dfc0 <HAL_RCC_GetHCLKFreq>
 800e008:	4602      	mov	r2, r0
 800e00a:	4b05      	ldr	r3, [pc, #20]	; (800e020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e00c:	689b      	ldr	r3, [r3, #8]
 800e00e:	0b5b      	lsrs	r3, r3, #13
 800e010:	f003 0307 	and.w	r3, r3, #7
 800e014:	4903      	ldr	r1, [pc, #12]	; (800e024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e016:	5ccb      	ldrb	r3, [r1, r3]
 800e018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	40023800 	.word	0x40023800
 800e024:	08028850 	.word	0x08028850

0800e028 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	220f      	movs	r2, #15
 800e036:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e038:	4b12      	ldr	r3, [pc, #72]	; (800e084 <HAL_RCC_GetClockConfig+0x5c>)
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	f003 0203 	and.w	r2, r3, #3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e044:	4b0f      	ldr	r3, [pc, #60]	; (800e084 <HAL_RCC_GetClockConfig+0x5c>)
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e050:	4b0c      	ldr	r3, [pc, #48]	; (800e084 <HAL_RCC_GetClockConfig+0x5c>)
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800e05c:	4b09      	ldr	r3, [pc, #36]	; (800e084 <HAL_RCC_GetClockConfig+0x5c>)
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	08db      	lsrs	r3, r3, #3
 800e062:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e06a:	4b07      	ldr	r3, [pc, #28]	; (800e088 <HAL_RCC_GetClockConfig+0x60>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f003 020f 	and.w	r2, r3, #15
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	601a      	str	r2, [r3, #0]
}
 800e076:	bf00      	nop
 800e078:	370c      	adds	r7, #12
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	40023800 	.word	0x40023800
 800e088:	40023c00 	.word	0x40023c00

0800e08c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b088      	sub	sp, #32
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e094:	2300      	movs	r3, #0
 800e096:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800e098:	2300      	movs	r3, #0
 800e09a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800e09c:	2300      	movs	r3, #0
 800e09e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f003 0301 	and.w	r3, r3, #1
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d012      	beq.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e0b4:	4b69      	ldr	r3, [pc, #420]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0b6:	689b      	ldr	r3, [r3, #8]
 800e0b8:	4a68      	ldr	r2, [pc, #416]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e0be:	6093      	str	r3, [r2, #8]
 800e0c0:	4b66      	ldr	r3, [pc, #408]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0c2:	689a      	ldr	r2, [r3, #8]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0c8:	4964      	ldr	r1, [pc, #400]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d101      	bne.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d017      	beq.n	800e116 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e0e6:	4b5d      	ldr	r3, [pc, #372]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0f4:	4959      	ldr	r1, [pc, #356]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e104:	d101      	bne.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800e106:	2301      	movs	r3, #1
 800e108:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d101      	bne.n	800e116 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800e112:	2301      	movs	r3, #1
 800e114:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d017      	beq.n	800e152 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e122:	4b4e      	ldr	r3, [pc, #312]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e128:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e130:	494a      	ldr	r1, [pc, #296]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e132:	4313      	orrs	r3, r2
 800e134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e13c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e140:	d101      	bne.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800e142:	2301      	movs	r3, #1
 800e144:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d101      	bne.n	800e152 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800e14e:	2301      	movs	r3, #1
 800e150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d001      	beq.n	800e162 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800e15e:	2301      	movs	r3, #1
 800e160:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f003 0320 	and.w	r3, r3, #32
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f000 808b 	beq.w	800e286 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e170:	4b3a      	ldr	r3, [pc, #232]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e174:	4a39      	ldr	r2, [pc, #228]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e17a:	6413      	str	r3, [r2, #64]	; 0x40
 800e17c:	4b37      	ldr	r3, [pc, #220]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e184:	60bb      	str	r3, [r7, #8]
 800e186:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e188:	4b35      	ldr	r3, [pc, #212]	; (800e260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	4a34      	ldr	r2, [pc, #208]	; (800e260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e18e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e194:	f7fc fd90 	bl	800acb8 <HAL_GetTick>
 800e198:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e19a:	e008      	b.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e19c:	f7fc fd8c 	bl	800acb8 <HAL_GetTick>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	1ad3      	subs	r3, r2, r3
 800e1a6:	2b64      	cmp	r3, #100	; 0x64
 800e1a8:	d901      	bls.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800e1aa:	2303      	movs	r3, #3
 800e1ac:	e357      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e1ae:	4b2c      	ldr	r3, [pc, #176]	; (800e260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d0f0      	beq.n	800e19c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e1ba:	4b28      	ldr	r3, [pc, #160]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d035      	beq.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1d2:	693a      	ldr	r2, [r7, #16]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d02e      	beq.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e1d8:	4b20      	ldr	r3, [pc, #128]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e1e2:	4b1e      	ldr	r3, [pc, #120]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1e6:	4a1d      	ldr	r2, [pc, #116]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e1ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e1ee:	4b1b      	ldr	r3, [pc, #108]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1f2:	4a1a      	ldr	r2, [pc, #104]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e1f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e1fa:	4a18      	ldr	r2, [pc, #96]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e200:	4b16      	ldr	r3, [pc, #88]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e204:	f003 0301 	and.w	r3, r3, #1
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d114      	bne.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e20c:	f7fc fd54 	bl	800acb8 <HAL_GetTick>
 800e210:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e212:	e00a      	b.n	800e22a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e214:	f7fc fd50 	bl	800acb8 <HAL_GetTick>
 800e218:	4602      	mov	r2, r0
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	1ad3      	subs	r3, r2, r3
 800e21e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e222:	4293      	cmp	r3, r2
 800e224:	d901      	bls.n	800e22a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800e226:	2303      	movs	r3, #3
 800e228:	e319      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e22a:	4b0c      	ldr	r3, [pc, #48]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e22e:	f003 0302 	and.w	r3, r3, #2
 800e232:	2b00      	cmp	r3, #0
 800e234:	d0ee      	beq.n	800e214 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e23a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e23e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e242:	d111      	bne.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800e244:	4b05      	ldr	r3, [pc, #20]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e250:	4b04      	ldr	r3, [pc, #16]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800e252:	400b      	ands	r3, r1
 800e254:	4901      	ldr	r1, [pc, #4]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e256:	4313      	orrs	r3, r2
 800e258:	608b      	str	r3, [r1, #8]
 800e25a:	e00b      	b.n	800e274 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e25c:	40023800 	.word	0x40023800
 800e260:	40007000 	.word	0x40007000
 800e264:	0ffffcff 	.word	0x0ffffcff
 800e268:	4baa      	ldr	r3, [pc, #680]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e26a:	689b      	ldr	r3, [r3, #8]
 800e26c:	4aa9      	ldr	r2, [pc, #676]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e26e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e272:	6093      	str	r3, [r2, #8]
 800e274:	4ba7      	ldr	r3, [pc, #668]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e276:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e27c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e280:	49a4      	ldr	r1, [pc, #656]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e282:	4313      	orrs	r3, r2
 800e284:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f003 0310 	and.w	r3, r3, #16
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d010      	beq.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e292:	4ba0      	ldr	r3, [pc, #640]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e298:	4a9e      	ldr	r2, [pc, #632]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e29a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e29e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800e2a2:	4b9c      	ldr	r3, [pc, #624]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ac:	4999      	ldr	r1, [pc, #612]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00a      	beq.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e2c0:	4b94      	ldr	r3, [pc, #592]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2ce:	4991      	ldr	r1, [pc, #580]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00a      	beq.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e2e2:	4b8c      	ldr	r3, [pc, #560]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2f0:	4988      	ldr	r1, [pc, #544]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00a      	beq.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e304:	4b83      	ldr	r3, [pc, #524]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e30a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e312:	4980      	ldr	r1, [pc, #512]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e314:	4313      	orrs	r3, r2
 800e316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00a      	beq.n	800e33c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e326:	4b7b      	ldr	r3, [pc, #492]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e32c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e334:	4977      	ldr	r1, [pc, #476]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e336:	4313      	orrs	r3, r2
 800e338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00a      	beq.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e348:	4b72      	ldr	r3, [pc, #456]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e34e:	f023 0203 	bic.w	r2, r3, #3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e356:	496f      	ldr	r1, [pc, #444]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e358:	4313      	orrs	r3, r2
 800e35a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00a      	beq.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e36a:	4b6a      	ldr	r3, [pc, #424]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e36c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e370:	f023 020c 	bic.w	r2, r3, #12
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e378:	4966      	ldr	r1, [pc, #408]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e37a:	4313      	orrs	r3, r2
 800e37c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00a      	beq.n	800e3a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e38c:	4b61      	ldr	r3, [pc, #388]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e38e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e392:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e39a:	495e      	ldr	r1, [pc, #376]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e39c:	4313      	orrs	r3, r2
 800e39e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00a      	beq.n	800e3c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e3ae:	4b59      	ldr	r3, [pc, #356]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3bc:	4955      	ldr	r1, [pc, #340]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00a      	beq.n	800e3e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e3d0:	4b50      	ldr	r3, [pc, #320]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3de:	494d      	ldr	r1, [pc, #308]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00a      	beq.n	800e408 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e3f2:	4b48      	ldr	r3, [pc, #288]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e3f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e400:	4944      	ldr	r1, [pc, #272]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e402:	4313      	orrs	r3, r2
 800e404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e410:	2b00      	cmp	r3, #0
 800e412:	d00a      	beq.n	800e42a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e414:	4b3f      	ldr	r3, [pc, #252]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e41a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e422:	493c      	ldr	r1, [pc, #240]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e424:	4313      	orrs	r3, r2
 800e426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e432:	2b00      	cmp	r3, #0
 800e434:	d00a      	beq.n	800e44c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e436:	4b37      	ldr	r3, [pc, #220]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e43c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e444:	4933      	ldr	r1, [pc, #204]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e446:	4313      	orrs	r3, r2
 800e448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e454:	2b00      	cmp	r3, #0
 800e456:	d00a      	beq.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e458:	4b2e      	ldr	r3, [pc, #184]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e45e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e466:	492b      	ldr	r1, [pc, #172]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e468:	4313      	orrs	r3, r2
 800e46a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e476:	2b00      	cmp	r3, #0
 800e478:	d011      	beq.n	800e49e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e47a:	4b26      	ldr	r3, [pc, #152]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e480:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e488:	4922      	ldr	r1, [pc, #136]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e48a:	4313      	orrs	r3, r2
 800e48c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e498:	d101      	bne.n	800e49e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e49a:	2301      	movs	r3, #1
 800e49c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f003 0308 	and.w	r3, r3, #8
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00a      	beq.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e4ba:	4b16      	ldr	r3, [pc, #88]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4c8:	4912      	ldr	r1, [pc, #72]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d00b      	beq.n	800e4f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e4dc:	4b0d      	ldr	r3, [pc, #52]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4ec:	4909      	ldr	r1, [pc, #36]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d006      	beq.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e502:	2b00      	cmp	r3, #0
 800e504:	f000 80d9 	beq.w	800e6ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e508:	4b02      	ldr	r3, [pc, #8]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a01      	ldr	r2, [pc, #4]	; (800e514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e50e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e512:	e001      	b.n	800e518 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800e514:	40023800 	.word	0x40023800
 800e518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e51a:	f7fc fbcd 	bl	800acb8 <HAL_GetTick>
 800e51e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e520:	e008      	b.n	800e534 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e522:	f7fc fbc9 	bl	800acb8 <HAL_GetTick>
 800e526:	4602      	mov	r2, r0
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	1ad3      	subs	r3, r2, r3
 800e52c:	2b64      	cmp	r3, #100	; 0x64
 800e52e:	d901      	bls.n	800e534 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e530:	2303      	movs	r3, #3
 800e532:	e194      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e534:	4b6c      	ldr	r3, [pc, #432]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d1f0      	bne.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f003 0301 	and.w	r3, r3, #1
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d021      	beq.n	800e590 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e550:	2b00      	cmp	r3, #0
 800e552:	d11d      	bne.n	800e590 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e554:	4b64      	ldr	r3, [pc, #400]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e55a:	0c1b      	lsrs	r3, r3, #16
 800e55c:	f003 0303 	and.w	r3, r3, #3
 800e560:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e562:	4b61      	ldr	r3, [pc, #388]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e568:	0e1b      	lsrs	r3, r3, #24
 800e56a:	f003 030f 	and.w	r3, r3, #15
 800e56e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	019a      	lsls	r2, r3, #6
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	041b      	lsls	r3, r3, #16
 800e57a:	431a      	orrs	r2, r3
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	061b      	lsls	r3, r3, #24
 800e580:	431a      	orrs	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	689b      	ldr	r3, [r3, #8]
 800e586:	071b      	lsls	r3, r3, #28
 800e588:	4957      	ldr	r1, [pc, #348]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e58a:	4313      	orrs	r3, r2
 800e58c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d004      	beq.n	800e5a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5a4:	d00a      	beq.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d02e      	beq.n	800e610 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e5ba:	d129      	bne.n	800e610 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e5bc:	4b4a      	ldr	r3, [pc, #296]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5c2:	0c1b      	lsrs	r3, r3, #16
 800e5c4:	f003 0303 	and.w	r3, r3, #3
 800e5c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e5ca:	4b47      	ldr	r3, [pc, #284]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5d0:	0f1b      	lsrs	r3, r3, #28
 800e5d2:	f003 0307 	and.w	r3, r3, #7
 800e5d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	019a      	lsls	r2, r3, #6
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	041b      	lsls	r3, r3, #16
 800e5e2:	431a      	orrs	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	061b      	lsls	r3, r3, #24
 800e5ea:	431a      	orrs	r2, r3
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	071b      	lsls	r3, r3, #28
 800e5f0:	493d      	ldr	r1, [pc, #244]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e5f8:	4b3b      	ldr	r3, [pc, #236]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e5fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5fe:	f023 021f 	bic.w	r2, r3, #31
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e606:	3b01      	subs	r3, #1
 800e608:	4937      	ldr	r1, [pc, #220]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e60a:	4313      	orrs	r3, r2
 800e60c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d01d      	beq.n	800e658 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e61c:	4b32      	ldr	r3, [pc, #200]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e61e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e622:	0e1b      	lsrs	r3, r3, #24
 800e624:	f003 030f 	and.w	r3, r3, #15
 800e628:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e62a:	4b2f      	ldr	r3, [pc, #188]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e62c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e630:	0f1b      	lsrs	r3, r3, #28
 800e632:	f003 0307 	and.w	r3, r3, #7
 800e636:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	019a      	lsls	r2, r3, #6
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	691b      	ldr	r3, [r3, #16]
 800e642:	041b      	lsls	r3, r3, #16
 800e644:	431a      	orrs	r2, r3
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	061b      	lsls	r3, r3, #24
 800e64a:	431a      	orrs	r2, r3
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	071b      	lsls	r3, r3, #28
 800e650:	4925      	ldr	r1, [pc, #148]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e652:	4313      	orrs	r3, r2
 800e654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e660:	2b00      	cmp	r3, #0
 800e662:	d011      	beq.n	800e688 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	019a      	lsls	r2, r3, #6
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	691b      	ldr	r3, [r3, #16]
 800e66e:	041b      	lsls	r3, r3, #16
 800e670:	431a      	orrs	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	061b      	lsls	r3, r3, #24
 800e678:	431a      	orrs	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	071b      	lsls	r3, r3, #28
 800e680:	4919      	ldr	r1, [pc, #100]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e682:	4313      	orrs	r3, r2
 800e684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e688:	4b17      	ldr	r3, [pc, #92]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a16      	ldr	r2, [pc, #88]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e68e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e694:	f7fc fb10 	bl	800acb8 <HAL_GetTick>
 800e698:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e69a:	e008      	b.n	800e6ae <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e69c:	f7fc fb0c 	bl	800acb8 <HAL_GetTick>
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	1ad3      	subs	r3, r2, r3
 800e6a6:	2b64      	cmp	r3, #100	; 0x64
 800e6a8:	d901      	bls.n	800e6ae <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e6aa:	2303      	movs	r3, #3
 800e6ac:	e0d7      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e6ae:	4b0e      	ldr	r3, [pc, #56]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d0f0      	beq.n	800e69c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	f040 80cd 	bne.w	800e85c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e6c2:	4b09      	ldr	r3, [pc, #36]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a08      	ldr	r2, [pc, #32]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e6c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e6cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e6ce:	f7fc faf3 	bl	800acb8 <HAL_GetTick>
 800e6d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e6d4:	e00a      	b.n	800e6ec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e6d6:	f7fc faef 	bl	800acb8 <HAL_GetTick>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	1ad3      	subs	r3, r2, r3
 800e6e0:	2b64      	cmp	r3, #100	; 0x64
 800e6e2:	d903      	bls.n	800e6ec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e6e4:	2303      	movs	r3, #3
 800e6e6:	e0ba      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800e6e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e6ec:	4b5e      	ldr	r3, [pc, #376]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e6f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e6f8:	d0ed      	beq.n	800e6d6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e702:	2b00      	cmp	r3, #0
 800e704:	d003      	beq.n	800e70e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d009      	beq.n	800e722 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e716:	2b00      	cmp	r3, #0
 800e718:	d02e      	beq.n	800e778 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d12a      	bne.n	800e778 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e722:	4b51      	ldr	r3, [pc, #324]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e728:	0c1b      	lsrs	r3, r3, #16
 800e72a:	f003 0303 	and.w	r3, r3, #3
 800e72e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e730:	4b4d      	ldr	r3, [pc, #308]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e736:	0f1b      	lsrs	r3, r3, #28
 800e738:	f003 0307 	and.w	r3, r3, #7
 800e73c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	695b      	ldr	r3, [r3, #20]
 800e742:	019a      	lsls	r2, r3, #6
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	041b      	lsls	r3, r3, #16
 800e748:	431a      	orrs	r2, r3
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	699b      	ldr	r3, [r3, #24]
 800e74e:	061b      	lsls	r3, r3, #24
 800e750:	431a      	orrs	r2, r3
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	071b      	lsls	r3, r3, #28
 800e756:	4944      	ldr	r1, [pc, #272]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e758:	4313      	orrs	r3, r2
 800e75a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e75e:	4b42      	ldr	r3, [pc, #264]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e764:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e76c:	3b01      	subs	r3, #1
 800e76e:	021b      	lsls	r3, r3, #8
 800e770:	493d      	ldr	r1, [pc, #244]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e772:	4313      	orrs	r3, r2
 800e774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e780:	2b00      	cmp	r3, #0
 800e782:	d022      	beq.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e78c:	d11d      	bne.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e78e:	4b36      	ldr	r3, [pc, #216]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e794:	0e1b      	lsrs	r3, r3, #24
 800e796:	f003 030f 	and.w	r3, r3, #15
 800e79a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e79c:	4b32      	ldr	r3, [pc, #200]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e79e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7a2:	0f1b      	lsrs	r3, r3, #28
 800e7a4:	f003 0307 	and.w	r3, r3, #7
 800e7a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	695b      	ldr	r3, [r3, #20]
 800e7ae:	019a      	lsls	r2, r3, #6
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6a1b      	ldr	r3, [r3, #32]
 800e7b4:	041b      	lsls	r3, r3, #16
 800e7b6:	431a      	orrs	r2, r3
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	061b      	lsls	r3, r3, #24
 800e7bc:	431a      	orrs	r2, r3
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	071b      	lsls	r3, r3, #28
 800e7c2:	4929      	ldr	r1, [pc, #164]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f003 0308 	and.w	r3, r3, #8
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d028      	beq.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e7d6:	4b24      	ldr	r3, [pc, #144]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7dc:	0e1b      	lsrs	r3, r3, #24
 800e7de:	f003 030f 	and.w	r3, r3, #15
 800e7e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e7e4:	4b20      	ldr	r3, [pc, #128]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e7e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7ea:	0c1b      	lsrs	r3, r3, #16
 800e7ec:	f003 0303 	and.w	r3, r3, #3
 800e7f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	695b      	ldr	r3, [r3, #20]
 800e7f6:	019a      	lsls	r2, r3, #6
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	041b      	lsls	r3, r3, #16
 800e7fc:	431a      	orrs	r2, r3
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	061b      	lsls	r3, r3, #24
 800e802:	431a      	orrs	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	69db      	ldr	r3, [r3, #28]
 800e808:	071b      	lsls	r3, r3, #28
 800e80a:	4917      	ldr	r1, [pc, #92]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e80c:	4313      	orrs	r3, r2
 800e80e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e812:	4b15      	ldr	r3, [pc, #84]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e820:	4911      	ldr	r1, [pc, #68]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e822:	4313      	orrs	r3, r2
 800e824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e828:	4b0f      	ldr	r3, [pc, #60]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a0e      	ldr	r2, [pc, #56]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e82e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e834:	f7fc fa40 	bl	800acb8 <HAL_GetTick>
 800e838:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e83a:	e008      	b.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e83c:	f7fc fa3c 	bl	800acb8 <HAL_GetTick>
 800e840:	4602      	mov	r2, r0
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	2b64      	cmp	r3, #100	; 0x64
 800e848:	d901      	bls.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e84a:	2303      	movs	r3, #3
 800e84c:	e007      	b.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e84e:	4b06      	ldr	r3, [pc, #24]	; (800e868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e85a:	d1ef      	bne.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800e85c:	2300      	movs	r3, #0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3720      	adds	r7, #32
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	40023800 	.word	0x40023800

0800e86c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d101      	bne.n	800e882 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800e87e:	2301      	movs	r3, #1
 800e880:	e038      	b.n	800e8f4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e888:	b2db      	uxtb	r3, r3
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d106      	bne.n	800e89c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2200      	movs	r2, #0
 800e892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800e896:	68f8      	ldr	r0, [r7, #12]
 800e898:	f7fb feca 	bl	800a630 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681a      	ldr	r2, [r3, #0]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	4610      	mov	r0, r2
 800e8a8:	f002 f846 	bl	8010938 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	6818      	ldr	r0, [r3, #0]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	68b9      	ldr	r1, [r7, #8]
 800e8b8:	f002 f8ce 	bl	8010a58 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	6858      	ldr	r0, [r3, #4]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	689a      	ldr	r2, [r3, #8]
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c8:	6879      	ldr	r1, [r7, #4]
 800e8ca:	f002 f915 	bl	8010af8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	68fa      	ldr	r2, [r7, #12]
 800e8d4:	6892      	ldr	r2, [r2, #8]
 800e8d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	68fa      	ldr	r2, [r7, #12]
 800e8e0:	6892      	ldr	r2, [r2, #8]
 800e8e2:	f041 0101 	orr.w	r1, r1, #1
 800e8e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d101      	bne.n	800e90e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e90a:	2301      	movs	r3, #1
 800e90c:	e049      	b.n	800e9a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e914:	b2db      	uxtb	r3, r3
 800e916:	2b00      	cmp	r3, #0
 800e918:	d106      	bne.n	800e928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f7fb fc3a 	bl	800a19c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2202      	movs	r2, #2
 800e92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681a      	ldr	r2, [r3, #0]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	3304      	adds	r3, #4
 800e938:	4619      	mov	r1, r3
 800e93a:	4610      	mov	r0, r2
 800e93c:	f000 f9f6 	bl	800ed2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2201      	movs	r2, #1
 800e944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2201      	movs	r2, #1
 800e94c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2201      	movs	r2, #1
 800e954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2201      	movs	r2, #1
 800e95c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2201      	movs	r2, #1
 800e964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2201      	movs	r2, #1
 800e96c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2201      	movs	r2, #1
 800e974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2201      	movs	r2, #1
 800e97c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2201      	movs	r2, #1
 800e984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2201      	movs	r2, #1
 800e994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2201      	movs	r2, #1
 800e99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e9a0:	2300      	movs	r3, #0
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3708      	adds	r7, #8
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
	...

0800e9ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b085      	sub	sp, #20
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d001      	beq.n	800e9c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	e054      	b.n	800ea6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2202      	movs	r2, #2
 800e9c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	68da      	ldr	r2, [r3, #12]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f042 0201 	orr.w	r2, r2, #1
 800e9da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4a26      	ldr	r2, [pc, #152]	; (800ea7c <HAL_TIM_Base_Start_IT+0xd0>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d022      	beq.n	800ea2c <HAL_TIM_Base_Start_IT+0x80>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9ee:	d01d      	beq.n	800ea2c <HAL_TIM_Base_Start_IT+0x80>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a22      	ldr	r2, [pc, #136]	; (800ea80 <HAL_TIM_Base_Start_IT+0xd4>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d018      	beq.n	800ea2c <HAL_TIM_Base_Start_IT+0x80>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a21      	ldr	r2, [pc, #132]	; (800ea84 <HAL_TIM_Base_Start_IT+0xd8>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d013      	beq.n	800ea2c <HAL_TIM_Base_Start_IT+0x80>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a1f      	ldr	r2, [pc, #124]	; (800ea88 <HAL_TIM_Base_Start_IT+0xdc>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d00e      	beq.n	800ea2c <HAL_TIM_Base_Start_IT+0x80>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a1e      	ldr	r2, [pc, #120]	; (800ea8c <HAL_TIM_Base_Start_IT+0xe0>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d009      	beq.n	800ea2c <HAL_TIM_Base_Start_IT+0x80>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a1c      	ldr	r2, [pc, #112]	; (800ea90 <HAL_TIM_Base_Start_IT+0xe4>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d004      	beq.n	800ea2c <HAL_TIM_Base_Start_IT+0x80>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4a1b      	ldr	r2, [pc, #108]	; (800ea94 <HAL_TIM_Base_Start_IT+0xe8>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d115      	bne.n	800ea58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	689a      	ldr	r2, [r3, #8]
 800ea32:	4b19      	ldr	r3, [pc, #100]	; (800ea98 <HAL_TIM_Base_Start_IT+0xec>)
 800ea34:	4013      	ands	r3, r2
 800ea36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2b06      	cmp	r3, #6
 800ea3c:	d015      	beq.n	800ea6a <HAL_TIM_Base_Start_IT+0xbe>
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea44:	d011      	beq.n	800ea6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f042 0201 	orr.w	r2, r2, #1
 800ea54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea56:	e008      	b.n	800ea6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f042 0201 	orr.w	r2, r2, #1
 800ea66:	601a      	str	r2, [r3, #0]
 800ea68:	e000      	b.n	800ea6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea6c:	2300      	movs	r3, #0
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3714      	adds	r7, #20
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop
 800ea7c:	40010000 	.word	0x40010000
 800ea80:	40000400 	.word	0x40000400
 800ea84:	40000800 	.word	0x40000800
 800ea88:	40000c00 	.word	0x40000c00
 800ea8c:	40010400 	.word	0x40010400
 800ea90:	40014000 	.word	0x40014000
 800ea94:	40001800 	.word	0x40001800
 800ea98:	00010007 	.word	0x00010007

0800ea9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	691b      	ldr	r3, [r3, #16]
 800eaaa:	f003 0302 	and.w	r3, r3, #2
 800eaae:	2b02      	cmp	r3, #2
 800eab0:	d122      	bne.n	800eaf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	68db      	ldr	r3, [r3, #12]
 800eab8:	f003 0302 	and.w	r3, r3, #2
 800eabc:	2b02      	cmp	r3, #2
 800eabe:	d11b      	bne.n	800eaf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f06f 0202 	mvn.w	r2, #2
 800eac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2201      	movs	r2, #1
 800eace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	699b      	ldr	r3, [r3, #24]
 800ead6:	f003 0303 	and.w	r3, r3, #3
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d003      	beq.n	800eae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f000 f905 	bl	800ecee <HAL_TIM_IC_CaptureCallback>
 800eae4:	e005      	b.n	800eaf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 f8f7 	bl	800ecda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 f908 	bl	800ed02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	691b      	ldr	r3, [r3, #16]
 800eafe:	f003 0304 	and.w	r3, r3, #4
 800eb02:	2b04      	cmp	r3, #4
 800eb04:	d122      	bne.n	800eb4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	68db      	ldr	r3, [r3, #12]
 800eb0c:	f003 0304 	and.w	r3, r3, #4
 800eb10:	2b04      	cmp	r3, #4
 800eb12:	d11b      	bne.n	800eb4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f06f 0204 	mvn.w	r2, #4
 800eb1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2202      	movs	r2, #2
 800eb22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	699b      	ldr	r3, [r3, #24]
 800eb2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d003      	beq.n	800eb3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 f8db 	bl	800ecee <HAL_TIM_IC_CaptureCallback>
 800eb38:	e005      	b.n	800eb46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f000 f8cd 	bl	800ecda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f000 f8de 	bl	800ed02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	691b      	ldr	r3, [r3, #16]
 800eb52:	f003 0308 	and.w	r3, r3, #8
 800eb56:	2b08      	cmp	r3, #8
 800eb58:	d122      	bne.n	800eba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	68db      	ldr	r3, [r3, #12]
 800eb60:	f003 0308 	and.w	r3, r3, #8
 800eb64:	2b08      	cmp	r3, #8
 800eb66:	d11b      	bne.n	800eba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f06f 0208 	mvn.w	r2, #8
 800eb70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2204      	movs	r2, #4
 800eb76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	69db      	ldr	r3, [r3, #28]
 800eb7e:	f003 0303 	and.w	r3, r3, #3
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d003      	beq.n	800eb8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 f8b1 	bl	800ecee <HAL_TIM_IC_CaptureCallback>
 800eb8c:	e005      	b.n	800eb9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f000 f8a3 	bl	800ecda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f000 f8b4 	bl	800ed02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	691b      	ldr	r3, [r3, #16]
 800eba6:	f003 0310 	and.w	r3, r3, #16
 800ebaa:	2b10      	cmp	r3, #16
 800ebac:	d122      	bne.n	800ebf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	f003 0310 	and.w	r3, r3, #16
 800ebb8:	2b10      	cmp	r3, #16
 800ebba:	d11b      	bne.n	800ebf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f06f 0210 	mvn.w	r2, #16
 800ebc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2208      	movs	r2, #8
 800ebca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	69db      	ldr	r3, [r3, #28]
 800ebd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d003      	beq.n	800ebe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f000 f887 	bl	800ecee <HAL_TIM_IC_CaptureCallback>
 800ebe0:	e005      	b.n	800ebee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f000 f879 	bl	800ecda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f000 f88a 	bl	800ed02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	f003 0301 	and.w	r3, r3, #1
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	d10e      	bne.n	800ec20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	f003 0301 	and.w	r3, r3, #1
 800ec0c:	2b01      	cmp	r3, #1
 800ec0e:	d107      	bne.n	800ec20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f06f 0201 	mvn.w	r2, #1
 800ec18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f7f3 f904 	bl	8001e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	691b      	ldr	r3, [r3, #16]
 800ec26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec2a:	2b80      	cmp	r3, #128	; 0x80
 800ec2c:	d10e      	bne.n	800ec4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec38:	2b80      	cmp	r3, #128	; 0x80
 800ec3a:	d107      	bne.n	800ec4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ec44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 f9a8 	bl	800ef9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	691b      	ldr	r3, [r3, #16]
 800ec52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec5a:	d10e      	bne.n	800ec7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec66:	2b80      	cmp	r3, #128	; 0x80
 800ec68:	d107      	bne.n	800ec7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ec72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 f99b 	bl	800efb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	691b      	ldr	r3, [r3, #16]
 800ec80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec84:	2b40      	cmp	r3, #64	; 0x40
 800ec86:	d10e      	bne.n	800eca6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	68db      	ldr	r3, [r3, #12]
 800ec8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec92:	2b40      	cmp	r3, #64	; 0x40
 800ec94:	d107      	bne.n	800eca6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ec9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 f838 	bl	800ed16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	691b      	ldr	r3, [r3, #16]
 800ecac:	f003 0320 	and.w	r3, r3, #32
 800ecb0:	2b20      	cmp	r3, #32
 800ecb2:	d10e      	bne.n	800ecd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	68db      	ldr	r3, [r3, #12]
 800ecba:	f003 0320 	and.w	r3, r3, #32
 800ecbe:	2b20      	cmp	r3, #32
 800ecc0:	d107      	bne.n	800ecd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f06f 0220 	mvn.w	r2, #32
 800ecca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 f95b 	bl	800ef88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ecd2:	bf00      	nop
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ecda:	b480      	push	{r7}
 800ecdc:	b083      	sub	sp, #12
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ece2:	bf00      	nop
 800ece4:	370c      	adds	r7, #12
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr

0800ecee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ecee:	b480      	push	{r7}
 800ecf0:	b083      	sub	sp, #12
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ecf6:	bf00      	nop
 800ecf8:	370c      	adds	r7, #12
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr

0800ed02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ed02:	b480      	push	{r7}
 800ed04:	b083      	sub	sp, #12
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ed0a:	bf00      	nop
 800ed0c:	370c      	adds	r7, #12
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed14:	4770      	bx	lr

0800ed16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ed16:	b480      	push	{r7}
 800ed18:	b083      	sub	sp, #12
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ed1e:	bf00      	nop
 800ed20:	370c      	adds	r7, #12
 800ed22:	46bd      	mov	sp, r7
 800ed24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed28:	4770      	bx	lr
	...

0800ed2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b085      	sub	sp, #20
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	4a40      	ldr	r2, [pc, #256]	; (800ee40 <TIM_Base_SetConfig+0x114>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d013      	beq.n	800ed6c <TIM_Base_SetConfig+0x40>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed4a:	d00f      	beq.n	800ed6c <TIM_Base_SetConfig+0x40>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	4a3d      	ldr	r2, [pc, #244]	; (800ee44 <TIM_Base_SetConfig+0x118>)
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d00b      	beq.n	800ed6c <TIM_Base_SetConfig+0x40>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	4a3c      	ldr	r2, [pc, #240]	; (800ee48 <TIM_Base_SetConfig+0x11c>)
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d007      	beq.n	800ed6c <TIM_Base_SetConfig+0x40>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	4a3b      	ldr	r2, [pc, #236]	; (800ee4c <TIM_Base_SetConfig+0x120>)
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d003      	beq.n	800ed6c <TIM_Base_SetConfig+0x40>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	4a3a      	ldr	r2, [pc, #232]	; (800ee50 <TIM_Base_SetConfig+0x124>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d108      	bne.n	800ed7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	4a2f      	ldr	r2, [pc, #188]	; (800ee40 <TIM_Base_SetConfig+0x114>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d02b      	beq.n	800edde <TIM_Base_SetConfig+0xb2>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed8c:	d027      	beq.n	800edde <TIM_Base_SetConfig+0xb2>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	4a2c      	ldr	r2, [pc, #176]	; (800ee44 <TIM_Base_SetConfig+0x118>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d023      	beq.n	800edde <TIM_Base_SetConfig+0xb2>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	4a2b      	ldr	r2, [pc, #172]	; (800ee48 <TIM_Base_SetConfig+0x11c>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d01f      	beq.n	800edde <TIM_Base_SetConfig+0xb2>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	4a2a      	ldr	r2, [pc, #168]	; (800ee4c <TIM_Base_SetConfig+0x120>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d01b      	beq.n	800edde <TIM_Base_SetConfig+0xb2>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	4a29      	ldr	r2, [pc, #164]	; (800ee50 <TIM_Base_SetConfig+0x124>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d017      	beq.n	800edde <TIM_Base_SetConfig+0xb2>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	4a28      	ldr	r2, [pc, #160]	; (800ee54 <TIM_Base_SetConfig+0x128>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d013      	beq.n	800edde <TIM_Base_SetConfig+0xb2>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	4a27      	ldr	r2, [pc, #156]	; (800ee58 <TIM_Base_SetConfig+0x12c>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d00f      	beq.n	800edde <TIM_Base_SetConfig+0xb2>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4a26      	ldr	r2, [pc, #152]	; (800ee5c <TIM_Base_SetConfig+0x130>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d00b      	beq.n	800edde <TIM_Base_SetConfig+0xb2>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4a25      	ldr	r2, [pc, #148]	; (800ee60 <TIM_Base_SetConfig+0x134>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d007      	beq.n	800edde <TIM_Base_SetConfig+0xb2>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4a24      	ldr	r2, [pc, #144]	; (800ee64 <TIM_Base_SetConfig+0x138>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d003      	beq.n	800edde <TIM_Base_SetConfig+0xb2>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	4a23      	ldr	r2, [pc, #140]	; (800ee68 <TIM_Base_SetConfig+0x13c>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d108      	bne.n	800edf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ede4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	68db      	ldr	r3, [r3, #12]
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	4313      	orrs	r3, r2
 800edee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	695b      	ldr	r3, [r3, #20]
 800edfa:	4313      	orrs	r3, r2
 800edfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	689a      	ldr	r2, [r3, #8]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	681a      	ldr	r2, [r3, #0]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	4a0a      	ldr	r2, [pc, #40]	; (800ee40 <TIM_Base_SetConfig+0x114>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d003      	beq.n	800ee24 <TIM_Base_SetConfig+0xf8>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	4a0c      	ldr	r2, [pc, #48]	; (800ee50 <TIM_Base_SetConfig+0x124>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d103      	bne.n	800ee2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	691a      	ldr	r2, [r3, #16]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	615a      	str	r2, [r3, #20]
}
 800ee32:	bf00      	nop
 800ee34:	3714      	adds	r7, #20
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop
 800ee40:	40010000 	.word	0x40010000
 800ee44:	40000400 	.word	0x40000400
 800ee48:	40000800 	.word	0x40000800
 800ee4c:	40000c00 	.word	0x40000c00
 800ee50:	40010400 	.word	0x40010400
 800ee54:	40014000 	.word	0x40014000
 800ee58:	40014400 	.word	0x40014400
 800ee5c:	40014800 	.word	0x40014800
 800ee60:	40001800 	.word	0x40001800
 800ee64:	40001c00 	.word	0x40001c00
 800ee68:	40002000 	.word	0x40002000

0800ee6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b085      	sub	sp, #20
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d101      	bne.n	800ee84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ee80:	2302      	movs	r3, #2
 800ee82:	e06d      	b.n	800ef60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2201      	movs	r2, #1
 800ee88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2202      	movs	r2, #2
 800ee90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a30      	ldr	r2, [pc, #192]	; (800ef6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d004      	beq.n	800eeb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a2f      	ldr	r2, [pc, #188]	; (800ef70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d108      	bne.n	800eeca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800eebe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	68fa      	ldr	r2, [r7, #12]
 800eec6:	4313      	orrs	r3, r2
 800eec8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eed0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	68fa      	ldr	r2, [r7, #12]
 800eed8:	4313      	orrs	r3, r2
 800eeda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	4a20      	ldr	r2, [pc, #128]	; (800ef6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d022      	beq.n	800ef34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eef6:	d01d      	beq.n	800ef34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	4a1d      	ldr	r2, [pc, #116]	; (800ef74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d018      	beq.n	800ef34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4a1c      	ldr	r2, [pc, #112]	; (800ef78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d013      	beq.n	800ef34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4a1a      	ldr	r2, [pc, #104]	; (800ef7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d00e      	beq.n	800ef34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4a15      	ldr	r2, [pc, #84]	; (800ef70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d009      	beq.n	800ef34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4a16      	ldr	r2, [pc, #88]	; (800ef80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d004      	beq.n	800ef34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	4a15      	ldr	r2, [pc, #84]	; (800ef84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d10c      	bne.n	800ef4e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	68ba      	ldr	r2, [r7, #8]
 800ef42:	4313      	orrs	r3, r2
 800ef44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	68ba      	ldr	r2, [r7, #8]
 800ef4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2201      	movs	r2, #1
 800ef52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ef5e:	2300      	movs	r3, #0
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3714      	adds	r7, #20
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr
 800ef6c:	40010000 	.word	0x40010000
 800ef70:	40010400 	.word	0x40010400
 800ef74:	40000400 	.word	0x40000400
 800ef78:	40000800 	.word	0x40000800
 800ef7c:	40000c00 	.word	0x40000c00
 800ef80:	40014000 	.word	0x40014000
 800ef84:	40001800 	.word	0x40001800

0800ef88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ef90:	bf00      	nop
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr

0800ef9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800efa4:	bf00      	nop
 800efa6:	370c      	adds	r7, #12
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr

0800efb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800efb8:	bf00      	nop
 800efba:	370c      	adds	r7, #12
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr

0800efc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d101      	bne.n	800efd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800efd2:	2301      	movs	r3, #1
 800efd4:	e040      	b.n	800f058 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d106      	bne.n	800efec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2200      	movs	r2, #0
 800efe2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7fb f8fe 	bl	800a1e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2224      	movs	r2, #36	; 0x24
 800eff0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f022 0201 	bic.w	r2, r2, #1
 800f000:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f000 fd08 	bl	800fa18 <UART_SetConfig>
 800f008:	4603      	mov	r3, r0
 800f00a:	2b01      	cmp	r3, #1
 800f00c:	d101      	bne.n	800f012 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f00e:	2301      	movs	r3, #1
 800f010:	e022      	b.n	800f058 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f016:	2b00      	cmp	r3, #0
 800f018:	d002      	beq.n	800f020 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f000 ff60 	bl	800fee0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	685a      	ldr	r2, [r3, #4]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f02e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	689a      	ldr	r2, [r3, #8]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f03e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f042 0201 	orr.w	r2, r2, #1
 800f04e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 ffe7 	bl	8010024 <UART_CheckIdleState>
 800f056:	4603      	mov	r3, r0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3708      	adds	r7, #8
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b08a      	sub	sp, #40	; 0x28
 800f064:	af02      	add	r7, sp, #8
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	603b      	str	r3, [r7, #0]
 800f06c:	4613      	mov	r3, r2
 800f06e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f074:	2b20      	cmp	r3, #32
 800f076:	d171      	bne.n	800f15c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d002      	beq.n	800f084 <HAL_UART_Transmit+0x24>
 800f07e:	88fb      	ldrh	r3, [r7, #6]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d101      	bne.n	800f088 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f084:	2301      	movs	r3, #1
 800f086:	e06a      	b.n	800f15e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2200      	movs	r2, #0
 800f08c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	2221      	movs	r2, #33	; 0x21
 800f094:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f096:	f7fb fe0f 	bl	800acb8 <HAL_GetTick>
 800f09a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	88fa      	ldrh	r2, [r7, #6]
 800f0a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	88fa      	ldrh	r2, [r7, #6]
 800f0a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	689b      	ldr	r3, [r3, #8]
 800f0b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0b4:	d108      	bne.n	800f0c8 <HAL_UART_Transmit+0x68>
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	691b      	ldr	r3, [r3, #16]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d104      	bne.n	800f0c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	61bb      	str	r3, [r7, #24]
 800f0c6:	e003      	b.n	800f0d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f0d0:	e02c      	b.n	800f12c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	2180      	movs	r1, #128	; 0x80
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f000 ffd8 	bl	8010092 <UART_WaitOnFlagUntilTimeout>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d001      	beq.n	800f0ec <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800f0e8:	2303      	movs	r3, #3
 800f0ea:	e038      	b.n	800f15e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d10b      	bne.n	800f10a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f0f2:	69bb      	ldr	r3, [r7, #24]
 800f0f4:	881b      	ldrh	r3, [r3, #0]
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f100:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f102:	69bb      	ldr	r3, [r7, #24]
 800f104:	3302      	adds	r3, #2
 800f106:	61bb      	str	r3, [r7, #24]
 800f108:	e007      	b.n	800f11a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	781a      	ldrb	r2, [r3, #0]
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	3301      	adds	r3, #1
 800f118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f120:	b29b      	uxth	r3, r3
 800f122:	3b01      	subs	r3, #1
 800f124:	b29a      	uxth	r2, r3
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f132:	b29b      	uxth	r3, r3
 800f134:	2b00      	cmp	r3, #0
 800f136:	d1cc      	bne.n	800f0d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	9300      	str	r3, [sp, #0]
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	2200      	movs	r2, #0
 800f140:	2140      	movs	r1, #64	; 0x40
 800f142:	68f8      	ldr	r0, [r7, #12]
 800f144:	f000 ffa5 	bl	8010092 <UART_WaitOnFlagUntilTimeout>
 800f148:	4603      	mov	r3, r0
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d001      	beq.n	800f152 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800f14e:	2303      	movs	r3, #3
 800f150:	e005      	b.n	800f15e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2220      	movs	r2, #32
 800f156:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800f158:	2300      	movs	r3, #0
 800f15a:	e000      	b.n	800f15e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800f15c:	2302      	movs	r3, #2
  }
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3720      	adds	r7, #32
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b08a      	sub	sp, #40	; 0x28
 800f16a:	af02      	add	r7, sp, #8
 800f16c:	60f8      	str	r0, [r7, #12]
 800f16e:	60b9      	str	r1, [r7, #8]
 800f170:	603b      	str	r3, [r7, #0]
 800f172:	4613      	mov	r3, r2
 800f174:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f17c:	2b20      	cmp	r3, #32
 800f17e:	f040 80b1 	bne.w	800f2e4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d002      	beq.n	800f18e <HAL_UART_Receive+0x28>
 800f188:	88fb      	ldrh	r3, [r7, #6]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d101      	bne.n	800f192 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f18e:	2301      	movs	r3, #1
 800f190:	e0a9      	b.n	800f2e6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2200      	movs	r2, #0
 800f196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	2222      	movs	r2, #34	; 0x22
 800f19e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f1a8:	f7fb fd86 	bl	800acb8 <HAL_GetTick>
 800f1ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	88fa      	ldrh	r2, [r7, #6]
 800f1b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	88fa      	ldrh	r2, [r7, #6]
 800f1ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1c6:	d10e      	bne.n	800f1e6 <HAL_UART_Receive+0x80>
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	691b      	ldr	r3, [r3, #16]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d105      	bne.n	800f1dc <HAL_UART_Receive+0x76>
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f1d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f1da:	e02d      	b.n	800f238 <HAL_UART_Receive+0xd2>
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	22ff      	movs	r2, #255	; 0xff
 800f1e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f1e4:	e028      	b.n	800f238 <HAL_UART_Receive+0xd2>
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	689b      	ldr	r3, [r3, #8]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d10d      	bne.n	800f20a <HAL_UART_Receive+0xa4>
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	691b      	ldr	r3, [r3, #16]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d104      	bne.n	800f200 <HAL_UART_Receive+0x9a>
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	22ff      	movs	r2, #255	; 0xff
 800f1fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f1fe:	e01b      	b.n	800f238 <HAL_UART_Receive+0xd2>
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	227f      	movs	r2, #127	; 0x7f
 800f204:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f208:	e016      	b.n	800f238 <HAL_UART_Receive+0xd2>
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	689b      	ldr	r3, [r3, #8]
 800f20e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f212:	d10d      	bne.n	800f230 <HAL_UART_Receive+0xca>
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	691b      	ldr	r3, [r3, #16]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d104      	bne.n	800f226 <HAL_UART_Receive+0xc0>
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	227f      	movs	r2, #127	; 0x7f
 800f220:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f224:	e008      	b.n	800f238 <HAL_UART_Receive+0xd2>
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	223f      	movs	r2, #63	; 0x3f
 800f22a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f22e:	e003      	b.n	800f238 <HAL_UART_Receive+0xd2>
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2200      	movs	r2, #0
 800f234:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f23e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f248:	d108      	bne.n	800f25c <HAL_UART_Receive+0xf6>
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	691b      	ldr	r3, [r3, #16]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d104      	bne.n	800f25c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f252:	2300      	movs	r3, #0
 800f254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	61bb      	str	r3, [r7, #24]
 800f25a:	e003      	b.n	800f264 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f260:	2300      	movs	r3, #0
 800f262:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f264:	e032      	b.n	800f2cc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	9300      	str	r3, [sp, #0]
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	2200      	movs	r2, #0
 800f26e:	2120      	movs	r1, #32
 800f270:	68f8      	ldr	r0, [r7, #12]
 800f272:	f000 ff0e 	bl	8010092 <UART_WaitOnFlagUntilTimeout>
 800f276:	4603      	mov	r3, r0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d001      	beq.n	800f280 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800f27c:	2303      	movs	r3, #3
 800f27e:	e032      	b.n	800f2e6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d10c      	bne.n	800f2a0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f28c:	b29a      	uxth	r2, r3
 800f28e:	8a7b      	ldrh	r3, [r7, #18]
 800f290:	4013      	ands	r3, r2
 800f292:	b29a      	uxth	r2, r3
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	3302      	adds	r3, #2
 800f29c:	61bb      	str	r3, [r7, #24]
 800f29e:	e00c      	b.n	800f2ba <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2a6:	b2da      	uxtb	r2, r3
 800f2a8:	8a7b      	ldrh	r3, [r7, #18]
 800f2aa:	b2db      	uxtb	r3, r3
 800f2ac:	4013      	ands	r3, r2
 800f2ae:	b2da      	uxtb	r2, r3
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	3b01      	subs	r3, #1
 800f2c4:	b29a      	uxth	r2, r3
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d1c6      	bne.n	800f266 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2220      	movs	r2, #32
 800f2dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	e000      	b.n	800f2e6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800f2e4:	2302      	movs	r3, #2
  }
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3720      	adds	r7, #32
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
	...

0800f2f0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b08b      	sub	sp, #44	; 0x2c
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	4613      	mov	r3, r2
 800f2fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f302:	2b20      	cmp	r3, #32
 800f304:	d147      	bne.n	800f396 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d002      	beq.n	800f312 <HAL_UART_Transmit_IT+0x22>
 800f30c:	88fb      	ldrh	r3, [r7, #6]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d101      	bne.n	800f316 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800f312:	2301      	movs	r3, #1
 800f314:	e040      	b.n	800f398 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	68ba      	ldr	r2, [r7, #8]
 800f31a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	88fa      	ldrh	r2, [r7, #6]
 800f320:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	88fa      	ldrh	r2, [r7, #6]
 800f328:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2200      	movs	r2, #0
 800f330:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2200      	movs	r2, #0
 800f336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	2221      	movs	r2, #33	; 0x21
 800f33e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	689b      	ldr	r3, [r3, #8]
 800f344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f348:	d107      	bne.n	800f35a <HAL_UART_Transmit_IT+0x6a>
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	691b      	ldr	r3, [r3, #16]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d103      	bne.n	800f35a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	4a13      	ldr	r2, [pc, #76]	; (800f3a4 <HAL_UART_Transmit_IT+0xb4>)
 800f356:	66da      	str	r2, [r3, #108]	; 0x6c
 800f358:	e002      	b.n	800f360 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	4a12      	ldr	r2, [pc, #72]	; (800f3a8 <HAL_UART_Transmit_IT+0xb8>)
 800f35e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	e853 3f00 	ldrex	r3, [r3]
 800f36c:	613b      	str	r3, [r7, #16]
   return(result);
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f374:	627b      	str	r3, [r7, #36]	; 0x24
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	461a      	mov	r2, r3
 800f37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37e:	623b      	str	r3, [r7, #32]
 800f380:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f382:	69f9      	ldr	r1, [r7, #28]
 800f384:	6a3a      	ldr	r2, [r7, #32]
 800f386:	e841 2300 	strex	r3, r2, [r1]
 800f38a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f38c:	69bb      	ldr	r3, [r7, #24]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d1e6      	bne.n	800f360 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800f392:	2300      	movs	r3, #0
 800f394:	e000      	b.n	800f398 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800f396:	2302      	movs	r3, #2
  }
}
 800f398:	4618      	mov	r0, r3
 800f39a:	372c      	adds	r7, #44	; 0x2c
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr
 800f3a4:	08010557 	.word	0x08010557
 800f3a8:	080104a1 	.word	0x080104a1

0800f3ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b08a      	sub	sp, #40	; 0x28
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	4613      	mov	r3, r2
 800f3b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3c0:	2b20      	cmp	r3, #32
 800f3c2:	d132      	bne.n	800f42a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d002      	beq.n	800f3d0 <HAL_UART_Receive_IT+0x24>
 800f3ca:	88fb      	ldrh	r3, [r7, #6]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d101      	bne.n	800f3d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	e02b      	b.n	800f42c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d018      	beq.n	800f41a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	e853 3f00 	ldrex	r3, [r3]
 800f3f4:	613b      	str	r3, [r7, #16]
   return(result);
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f3fc:	627b      	str	r3, [r7, #36]	; 0x24
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	461a      	mov	r2, r3
 800f404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f406:	623b      	str	r3, [r7, #32]
 800f408:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f40a:	69f9      	ldr	r1, [r7, #28]
 800f40c:	6a3a      	ldr	r2, [r7, #32]
 800f40e:	e841 2300 	strex	r3, r2, [r1]
 800f412:	61bb      	str	r3, [r7, #24]
   return(result);
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d1e6      	bne.n	800f3e8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f41a:	88fb      	ldrh	r3, [r7, #6]
 800f41c:	461a      	mov	r2, r3
 800f41e:	68b9      	ldr	r1, [r7, #8]
 800f420:	68f8      	ldr	r0, [r7, #12]
 800f422:	f000 fefd 	bl	8010220 <UART_Start_Receive_IT>
 800f426:	4603      	mov	r3, r0
 800f428:	e000      	b.n	800f42c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800f42a:	2302      	movs	r3, #2
  }
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3728      	adds	r7, #40	; 0x28
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b0ba      	sub	sp, #232	; 0xe8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	69db      	ldr	r3, [r3, #28]
 800f442:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	689b      	ldr	r3, [r3, #8]
 800f456:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f45a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f45e:	f640 030f 	movw	r3, #2063	; 0x80f
 800f462:	4013      	ands	r3, r2
 800f464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f468:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d115      	bne.n	800f49c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f474:	f003 0320 	and.w	r3, r3, #32
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d00f      	beq.n	800f49c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f47c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f480:	f003 0320 	and.w	r3, r3, #32
 800f484:	2b00      	cmp	r3, #0
 800f486:	d009      	beq.n	800f49c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	f000 8297 	beq.w	800f9c0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	4798      	blx	r3
      }
      return;
 800f49a:	e291      	b.n	800f9c0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f49c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	f000 8117 	beq.w	800f6d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f4a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f4aa:	f003 0301 	and.w	r3, r3, #1
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d106      	bne.n	800f4c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f4b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f4b6:	4b85      	ldr	r3, [pc, #532]	; (800f6cc <HAL_UART_IRQHandler+0x298>)
 800f4b8:	4013      	ands	r3, r2
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	f000 810a 	beq.w	800f6d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4c4:	f003 0301 	and.w	r3, r3, #1
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d011      	beq.n	800f4f0 <HAL_UART_IRQHandler+0xbc>
 800f4cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d00b      	beq.n	800f4f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2201      	movs	r2, #1
 800f4de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4e6:	f043 0201 	orr.w	r2, r3, #1
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f4f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4f4:	f003 0302 	and.w	r3, r3, #2
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d011      	beq.n	800f520 <HAL_UART_IRQHandler+0xec>
 800f4fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f500:	f003 0301 	and.w	r3, r3, #1
 800f504:	2b00      	cmp	r3, #0
 800f506:	d00b      	beq.n	800f520 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2202      	movs	r2, #2
 800f50e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f516:	f043 0204 	orr.w	r2, r3, #4
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f524:	f003 0304 	and.w	r3, r3, #4
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d011      	beq.n	800f550 <HAL_UART_IRQHandler+0x11c>
 800f52c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f530:	f003 0301 	and.w	r3, r3, #1
 800f534:	2b00      	cmp	r3, #0
 800f536:	d00b      	beq.n	800f550 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2204      	movs	r2, #4
 800f53e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f546:	f043 0202 	orr.w	r2, r3, #2
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f554:	f003 0308 	and.w	r3, r3, #8
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d017      	beq.n	800f58c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f55c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f560:	f003 0320 	and.w	r3, r3, #32
 800f564:	2b00      	cmp	r3, #0
 800f566:	d105      	bne.n	800f574 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f56c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f570:	2b00      	cmp	r3, #0
 800f572:	d00b      	beq.n	800f58c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2208      	movs	r2, #8
 800f57a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f582:	f043 0208 	orr.w	r2, r3, #8
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f58c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f594:	2b00      	cmp	r3, #0
 800f596:	d012      	beq.n	800f5be <HAL_UART_IRQHandler+0x18a>
 800f598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f59c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d00c      	beq.n	800f5be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f5ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5b4:	f043 0220 	orr.w	r2, r3, #32
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f000 81fd 	beq.w	800f9c4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5ce:	f003 0320 	and.w	r3, r3, #32
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00d      	beq.n	800f5f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f5d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5da:	f003 0320 	and.w	r3, r3, #32
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d007      	beq.n	800f5f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d003      	beq.n	800f5f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	689b      	ldr	r3, [r3, #8]
 800f602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f606:	2b40      	cmp	r3, #64	; 0x40
 800f608:	d005      	beq.n	800f616 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f60a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f60e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f612:	2b00      	cmp	r3, #0
 800f614:	d04f      	beq.n	800f6b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f000 fec8 	bl	80103ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	689b      	ldr	r3, [r3, #8]
 800f622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f626:	2b40      	cmp	r3, #64	; 0x40
 800f628:	d141      	bne.n	800f6ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	3308      	adds	r3, #8
 800f630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f634:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f638:	e853 3f00 	ldrex	r3, [r3]
 800f63c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	3308      	adds	r3, #8
 800f652:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f656:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f65a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f65e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f662:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f666:	e841 2300 	strex	r3, r2, [r1]
 800f66a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f66e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f672:	2b00      	cmp	r3, #0
 800f674:	d1d9      	bne.n	800f62a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d013      	beq.n	800f6a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f682:	4a13      	ldr	r2, [pc, #76]	; (800f6d0 <HAL_UART_IRQHandler+0x29c>)
 800f684:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fc fbc4 	bl	800be18 <HAL_DMA_Abort_IT>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d017      	beq.n	800f6c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f69a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f69c:	687a      	ldr	r2, [r7, #4]
 800f69e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800f6a0:	4610      	mov	r0, r2
 800f6a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6a4:	e00f      	b.n	800f6c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f000 f9a0 	bl	800f9ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6ac:	e00b      	b.n	800f6c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f000 f99c 	bl	800f9ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6b4:	e007      	b.n	800f6c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 f998 	bl	800f9ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2200      	movs	r2, #0
 800f6c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800f6c4:	e17e      	b.n	800f9c4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6c6:	bf00      	nop
    return;
 800f6c8:	e17c      	b.n	800f9c4 <HAL_UART_IRQHandler+0x590>
 800f6ca:	bf00      	nop
 800f6cc:	04000120 	.word	0x04000120
 800f6d0:	08010475 	.word	0x08010475

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	f040 814c 	bne.w	800f976 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f6de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6e2:	f003 0310 	and.w	r3, r3, #16
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	f000 8145 	beq.w	800f976 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f6ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f6f0:	f003 0310 	and.w	r3, r3, #16
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	f000 813e 	beq.w	800f976 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2210      	movs	r2, #16
 800f700:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f70c:	2b40      	cmp	r3, #64	; 0x40
 800f70e:	f040 80b6 	bne.w	800f87e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	685b      	ldr	r3, [r3, #4]
 800f71a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f71e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f722:	2b00      	cmp	r3, #0
 800f724:	f000 8150 	beq.w	800f9c8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f72e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f732:	429a      	cmp	r2, r3
 800f734:	f080 8148 	bcs.w	800f9c8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f73e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f746:	69db      	ldr	r3, [r3, #28]
 800f748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f74c:	f000 8086 	beq.w	800f85c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f75c:	e853 3f00 	ldrex	r3, [r3]
 800f760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f76c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	461a      	mov	r2, r3
 800f776:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f77a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f77e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f782:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f786:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f78a:	e841 2300 	strex	r3, r2, [r1]
 800f78e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f796:	2b00      	cmp	r3, #0
 800f798:	d1da      	bne.n	800f750 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	3308      	adds	r3, #8
 800f7a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f7a4:	e853 3f00 	ldrex	r3, [r3]
 800f7a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f7aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f7ac:	f023 0301 	bic.w	r3, r3, #1
 800f7b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	3308      	adds	r3, #8
 800f7ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f7be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f7c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f7c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f7ca:	e841 2300 	strex	r3, r2, [r1]
 800f7ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f7d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d1e1      	bne.n	800f79a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	3308      	adds	r3, #8
 800f7dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7e0:	e853 3f00 	ldrex	r3, [r3]
 800f7e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f7e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	3308      	adds	r3, #8
 800f7f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f7fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f7fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f800:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f802:	e841 2300 	strex	r3, r2, [r1]
 800f806:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d1e3      	bne.n	800f7d6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2220      	movs	r2, #32
 800f812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2200      	movs	r2, #0
 800f81a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f824:	e853 3f00 	ldrex	r3, [r3]
 800f828:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f82a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f82c:	f023 0310 	bic.w	r3, r3, #16
 800f830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	461a      	mov	r2, r3
 800f83a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f83e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f840:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f842:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f846:	e841 2300 	strex	r3, r2, [r1]
 800f84a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f84c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d1e4      	bne.n	800f81c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f856:	4618      	mov	r0, r3
 800f858:	f7fc fa6e 	bl	800bd38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2202      	movs	r2, #2
 800f860:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f86e:	b29b      	uxth	r3, r3
 800f870:	1ad3      	subs	r3, r2, r3
 800f872:	b29b      	uxth	r3, r3
 800f874:	4619      	mov	r1, r3
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f000 f8c2 	bl	800fa00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f87c:	e0a4      	b.n	800f9c8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f88a:	b29b      	uxth	r3, r3
 800f88c:	1ad3      	subs	r3, r2, r3
 800f88e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f898:	b29b      	uxth	r3, r3
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f000 8096 	beq.w	800f9cc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800f8a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	f000 8091 	beq.w	800f9cc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b2:	e853 3f00 	ldrex	r3, [r3]
 800f8b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f8cc:	647b      	str	r3, [r7, #68]	; 0x44
 800f8ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8d4:	e841 2300 	strex	r3, r2, [r1]
 800f8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d1e4      	bne.n	800f8aa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	3308      	adds	r3, #8
 800f8e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ea:	e853 3f00 	ldrex	r3, [r3]
 800f8ee:	623b      	str	r3, [r7, #32]
   return(result);
 800f8f0:	6a3b      	ldr	r3, [r7, #32]
 800f8f2:	f023 0301 	bic.w	r3, r3, #1
 800f8f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	3308      	adds	r3, #8
 800f900:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f904:	633a      	str	r2, [r7, #48]	; 0x30
 800f906:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f90a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f90c:	e841 2300 	strex	r3, r2, [r1]
 800f910:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f914:	2b00      	cmp	r3, #0
 800f916:	d1e3      	bne.n	800f8e0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2220      	movs	r2, #32
 800f91c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2200      	movs	r2, #0
 800f924:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2200      	movs	r2, #0
 800f92a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	e853 3f00 	ldrex	r3, [r3]
 800f938:	60fb      	str	r3, [r7, #12]
   return(result);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f023 0310 	bic.w	r3, r3, #16
 800f940:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	461a      	mov	r2, r3
 800f94a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f94e:	61fb      	str	r3, [r7, #28]
 800f950:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f952:	69b9      	ldr	r1, [r7, #24]
 800f954:	69fa      	ldr	r2, [r7, #28]
 800f956:	e841 2300 	strex	r3, r2, [r1]
 800f95a:	617b      	str	r3, [r7, #20]
   return(result);
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d1e4      	bne.n	800f92c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2202      	movs	r2, #2
 800f966:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f968:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f96c:	4619      	mov	r1, r3
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f000 f846 	bl	800fa00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f974:	e02a      	b.n	800f9cc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f97a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d00e      	beq.n	800f9a0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d008      	beq.n	800f9a0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f992:	2b00      	cmp	r3, #0
 800f994:	d01c      	beq.n	800f9d0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	4798      	blx	r3
    }
    return;
 800f99e:	e017      	b.n	800f9d0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f9a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d012      	beq.n	800f9d2 <HAL_UART_IRQHandler+0x59e>
 800f9ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d00c      	beq.n	800f9d2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 fe2c 	bl	8010616 <UART_EndTransmit_IT>
    return;
 800f9be:	e008      	b.n	800f9d2 <HAL_UART_IRQHandler+0x59e>
      return;
 800f9c0:	bf00      	nop
 800f9c2:	e006      	b.n	800f9d2 <HAL_UART_IRQHandler+0x59e>
    return;
 800f9c4:	bf00      	nop
 800f9c6:	e004      	b.n	800f9d2 <HAL_UART_IRQHandler+0x59e>
      return;
 800f9c8:	bf00      	nop
 800f9ca:	e002      	b.n	800f9d2 <HAL_UART_IRQHandler+0x59e>
      return;
 800f9cc:	bf00      	nop
 800f9ce:	e000      	b.n	800f9d2 <HAL_UART_IRQHandler+0x59e>
    return;
 800f9d0:	bf00      	nop
  }

}
 800f9d2:	37e8      	adds	r7, #232	; 0xe8
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b083      	sub	sp, #12
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f9e0:	bf00      	nop
 800f9e2:	370c      	adds	r7, #12
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr

0800f9ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b083      	sub	sp, #12
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f9f4:	bf00      	nop
 800f9f6:	370c      	adds	r7, #12
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fe:	4770      	bx	lr

0800fa00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b083      	sub	sp, #12
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	460b      	mov	r3, r1
 800fa0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fa0c:	bf00      	nop
 800fa0e:	370c      	adds	r7, #12
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr

0800fa18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b088      	sub	sp, #32
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fa20:	2300      	movs	r3, #0
 800fa22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	689a      	ldr	r2, [r3, #8]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	691b      	ldr	r3, [r3, #16]
 800fa2c:	431a      	orrs	r2, r3
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	695b      	ldr	r3, [r3, #20]
 800fa32:	431a      	orrs	r2, r3
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	69db      	ldr	r3, [r3, #28]
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	681a      	ldr	r2, [r3, #0]
 800fa42:	4ba6      	ldr	r3, [pc, #664]	; (800fcdc <UART_SetConfig+0x2c4>)
 800fa44:	4013      	ands	r3, r2
 800fa46:	687a      	ldr	r2, [r7, #4]
 800fa48:	6812      	ldr	r2, [r2, #0]
 800fa4a:	6979      	ldr	r1, [r7, #20]
 800fa4c:	430b      	orrs	r3, r1
 800fa4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	68da      	ldr	r2, [r3, #12]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	430a      	orrs	r2, r1
 800fa64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	699b      	ldr	r3, [r3, #24]
 800fa6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6a1b      	ldr	r3, [r3, #32]
 800fa70:	697a      	ldr	r2, [r7, #20]
 800fa72:	4313      	orrs	r3, r2
 800fa74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	689b      	ldr	r3, [r3, #8]
 800fa7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	697a      	ldr	r2, [r7, #20]
 800fa86:	430a      	orrs	r2, r1
 800fa88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4a94      	ldr	r2, [pc, #592]	; (800fce0 <UART_SetConfig+0x2c8>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d120      	bne.n	800fad6 <UART_SetConfig+0xbe>
 800fa94:	4b93      	ldr	r3, [pc, #588]	; (800fce4 <UART_SetConfig+0x2cc>)
 800fa96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa9a:	f003 0303 	and.w	r3, r3, #3
 800fa9e:	2b03      	cmp	r3, #3
 800faa0:	d816      	bhi.n	800fad0 <UART_SetConfig+0xb8>
 800faa2:	a201      	add	r2, pc, #4	; (adr r2, 800faa8 <UART_SetConfig+0x90>)
 800faa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faa8:	0800fab9 	.word	0x0800fab9
 800faac:	0800fac5 	.word	0x0800fac5
 800fab0:	0800fabf 	.word	0x0800fabf
 800fab4:	0800facb 	.word	0x0800facb
 800fab8:	2301      	movs	r3, #1
 800faba:	77fb      	strb	r3, [r7, #31]
 800fabc:	e150      	b.n	800fd60 <UART_SetConfig+0x348>
 800fabe:	2302      	movs	r3, #2
 800fac0:	77fb      	strb	r3, [r7, #31]
 800fac2:	e14d      	b.n	800fd60 <UART_SetConfig+0x348>
 800fac4:	2304      	movs	r3, #4
 800fac6:	77fb      	strb	r3, [r7, #31]
 800fac8:	e14a      	b.n	800fd60 <UART_SetConfig+0x348>
 800faca:	2308      	movs	r3, #8
 800facc:	77fb      	strb	r3, [r7, #31]
 800face:	e147      	b.n	800fd60 <UART_SetConfig+0x348>
 800fad0:	2310      	movs	r3, #16
 800fad2:	77fb      	strb	r3, [r7, #31]
 800fad4:	e144      	b.n	800fd60 <UART_SetConfig+0x348>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	4a83      	ldr	r2, [pc, #524]	; (800fce8 <UART_SetConfig+0x2d0>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d132      	bne.n	800fb46 <UART_SetConfig+0x12e>
 800fae0:	4b80      	ldr	r3, [pc, #512]	; (800fce4 <UART_SetConfig+0x2cc>)
 800fae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fae6:	f003 030c 	and.w	r3, r3, #12
 800faea:	2b0c      	cmp	r3, #12
 800faec:	d828      	bhi.n	800fb40 <UART_SetConfig+0x128>
 800faee:	a201      	add	r2, pc, #4	; (adr r2, 800faf4 <UART_SetConfig+0xdc>)
 800faf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf4:	0800fb29 	.word	0x0800fb29
 800faf8:	0800fb41 	.word	0x0800fb41
 800fafc:	0800fb41 	.word	0x0800fb41
 800fb00:	0800fb41 	.word	0x0800fb41
 800fb04:	0800fb35 	.word	0x0800fb35
 800fb08:	0800fb41 	.word	0x0800fb41
 800fb0c:	0800fb41 	.word	0x0800fb41
 800fb10:	0800fb41 	.word	0x0800fb41
 800fb14:	0800fb2f 	.word	0x0800fb2f
 800fb18:	0800fb41 	.word	0x0800fb41
 800fb1c:	0800fb41 	.word	0x0800fb41
 800fb20:	0800fb41 	.word	0x0800fb41
 800fb24:	0800fb3b 	.word	0x0800fb3b
 800fb28:	2300      	movs	r3, #0
 800fb2a:	77fb      	strb	r3, [r7, #31]
 800fb2c:	e118      	b.n	800fd60 <UART_SetConfig+0x348>
 800fb2e:	2302      	movs	r3, #2
 800fb30:	77fb      	strb	r3, [r7, #31]
 800fb32:	e115      	b.n	800fd60 <UART_SetConfig+0x348>
 800fb34:	2304      	movs	r3, #4
 800fb36:	77fb      	strb	r3, [r7, #31]
 800fb38:	e112      	b.n	800fd60 <UART_SetConfig+0x348>
 800fb3a:	2308      	movs	r3, #8
 800fb3c:	77fb      	strb	r3, [r7, #31]
 800fb3e:	e10f      	b.n	800fd60 <UART_SetConfig+0x348>
 800fb40:	2310      	movs	r3, #16
 800fb42:	77fb      	strb	r3, [r7, #31]
 800fb44:	e10c      	b.n	800fd60 <UART_SetConfig+0x348>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	4a68      	ldr	r2, [pc, #416]	; (800fcec <UART_SetConfig+0x2d4>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d120      	bne.n	800fb92 <UART_SetConfig+0x17a>
 800fb50:	4b64      	ldr	r3, [pc, #400]	; (800fce4 <UART_SetConfig+0x2cc>)
 800fb52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fb5a:	2b30      	cmp	r3, #48	; 0x30
 800fb5c:	d013      	beq.n	800fb86 <UART_SetConfig+0x16e>
 800fb5e:	2b30      	cmp	r3, #48	; 0x30
 800fb60:	d814      	bhi.n	800fb8c <UART_SetConfig+0x174>
 800fb62:	2b20      	cmp	r3, #32
 800fb64:	d009      	beq.n	800fb7a <UART_SetConfig+0x162>
 800fb66:	2b20      	cmp	r3, #32
 800fb68:	d810      	bhi.n	800fb8c <UART_SetConfig+0x174>
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d002      	beq.n	800fb74 <UART_SetConfig+0x15c>
 800fb6e:	2b10      	cmp	r3, #16
 800fb70:	d006      	beq.n	800fb80 <UART_SetConfig+0x168>
 800fb72:	e00b      	b.n	800fb8c <UART_SetConfig+0x174>
 800fb74:	2300      	movs	r3, #0
 800fb76:	77fb      	strb	r3, [r7, #31]
 800fb78:	e0f2      	b.n	800fd60 <UART_SetConfig+0x348>
 800fb7a:	2302      	movs	r3, #2
 800fb7c:	77fb      	strb	r3, [r7, #31]
 800fb7e:	e0ef      	b.n	800fd60 <UART_SetConfig+0x348>
 800fb80:	2304      	movs	r3, #4
 800fb82:	77fb      	strb	r3, [r7, #31]
 800fb84:	e0ec      	b.n	800fd60 <UART_SetConfig+0x348>
 800fb86:	2308      	movs	r3, #8
 800fb88:	77fb      	strb	r3, [r7, #31]
 800fb8a:	e0e9      	b.n	800fd60 <UART_SetConfig+0x348>
 800fb8c:	2310      	movs	r3, #16
 800fb8e:	77fb      	strb	r3, [r7, #31]
 800fb90:	e0e6      	b.n	800fd60 <UART_SetConfig+0x348>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	4a56      	ldr	r2, [pc, #344]	; (800fcf0 <UART_SetConfig+0x2d8>)
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d120      	bne.n	800fbde <UART_SetConfig+0x1c6>
 800fb9c:	4b51      	ldr	r3, [pc, #324]	; (800fce4 <UART_SetConfig+0x2cc>)
 800fb9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fba2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fba6:	2bc0      	cmp	r3, #192	; 0xc0
 800fba8:	d013      	beq.n	800fbd2 <UART_SetConfig+0x1ba>
 800fbaa:	2bc0      	cmp	r3, #192	; 0xc0
 800fbac:	d814      	bhi.n	800fbd8 <UART_SetConfig+0x1c0>
 800fbae:	2b80      	cmp	r3, #128	; 0x80
 800fbb0:	d009      	beq.n	800fbc6 <UART_SetConfig+0x1ae>
 800fbb2:	2b80      	cmp	r3, #128	; 0x80
 800fbb4:	d810      	bhi.n	800fbd8 <UART_SetConfig+0x1c0>
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d002      	beq.n	800fbc0 <UART_SetConfig+0x1a8>
 800fbba:	2b40      	cmp	r3, #64	; 0x40
 800fbbc:	d006      	beq.n	800fbcc <UART_SetConfig+0x1b4>
 800fbbe:	e00b      	b.n	800fbd8 <UART_SetConfig+0x1c0>
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	77fb      	strb	r3, [r7, #31]
 800fbc4:	e0cc      	b.n	800fd60 <UART_SetConfig+0x348>
 800fbc6:	2302      	movs	r3, #2
 800fbc8:	77fb      	strb	r3, [r7, #31]
 800fbca:	e0c9      	b.n	800fd60 <UART_SetConfig+0x348>
 800fbcc:	2304      	movs	r3, #4
 800fbce:	77fb      	strb	r3, [r7, #31]
 800fbd0:	e0c6      	b.n	800fd60 <UART_SetConfig+0x348>
 800fbd2:	2308      	movs	r3, #8
 800fbd4:	77fb      	strb	r3, [r7, #31]
 800fbd6:	e0c3      	b.n	800fd60 <UART_SetConfig+0x348>
 800fbd8:	2310      	movs	r3, #16
 800fbda:	77fb      	strb	r3, [r7, #31]
 800fbdc:	e0c0      	b.n	800fd60 <UART_SetConfig+0x348>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4a44      	ldr	r2, [pc, #272]	; (800fcf4 <UART_SetConfig+0x2dc>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d125      	bne.n	800fc34 <UART_SetConfig+0x21c>
 800fbe8:	4b3e      	ldr	r3, [pc, #248]	; (800fce4 <UART_SetConfig+0x2cc>)
 800fbea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fbf6:	d017      	beq.n	800fc28 <UART_SetConfig+0x210>
 800fbf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fbfc:	d817      	bhi.n	800fc2e <UART_SetConfig+0x216>
 800fbfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc02:	d00b      	beq.n	800fc1c <UART_SetConfig+0x204>
 800fc04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc08:	d811      	bhi.n	800fc2e <UART_SetConfig+0x216>
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d003      	beq.n	800fc16 <UART_SetConfig+0x1fe>
 800fc0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc12:	d006      	beq.n	800fc22 <UART_SetConfig+0x20a>
 800fc14:	e00b      	b.n	800fc2e <UART_SetConfig+0x216>
 800fc16:	2300      	movs	r3, #0
 800fc18:	77fb      	strb	r3, [r7, #31]
 800fc1a:	e0a1      	b.n	800fd60 <UART_SetConfig+0x348>
 800fc1c:	2302      	movs	r3, #2
 800fc1e:	77fb      	strb	r3, [r7, #31]
 800fc20:	e09e      	b.n	800fd60 <UART_SetConfig+0x348>
 800fc22:	2304      	movs	r3, #4
 800fc24:	77fb      	strb	r3, [r7, #31]
 800fc26:	e09b      	b.n	800fd60 <UART_SetConfig+0x348>
 800fc28:	2308      	movs	r3, #8
 800fc2a:	77fb      	strb	r3, [r7, #31]
 800fc2c:	e098      	b.n	800fd60 <UART_SetConfig+0x348>
 800fc2e:	2310      	movs	r3, #16
 800fc30:	77fb      	strb	r3, [r7, #31]
 800fc32:	e095      	b.n	800fd60 <UART_SetConfig+0x348>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4a2f      	ldr	r2, [pc, #188]	; (800fcf8 <UART_SetConfig+0x2e0>)
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	d125      	bne.n	800fc8a <UART_SetConfig+0x272>
 800fc3e:	4b29      	ldr	r3, [pc, #164]	; (800fce4 <UART_SetConfig+0x2cc>)
 800fc40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fc48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fc4c:	d017      	beq.n	800fc7e <UART_SetConfig+0x266>
 800fc4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fc52:	d817      	bhi.n	800fc84 <UART_SetConfig+0x26c>
 800fc54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fc58:	d00b      	beq.n	800fc72 <UART_SetConfig+0x25a>
 800fc5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fc5e:	d811      	bhi.n	800fc84 <UART_SetConfig+0x26c>
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d003      	beq.n	800fc6c <UART_SetConfig+0x254>
 800fc64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc68:	d006      	beq.n	800fc78 <UART_SetConfig+0x260>
 800fc6a:	e00b      	b.n	800fc84 <UART_SetConfig+0x26c>
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	77fb      	strb	r3, [r7, #31]
 800fc70:	e076      	b.n	800fd60 <UART_SetConfig+0x348>
 800fc72:	2302      	movs	r3, #2
 800fc74:	77fb      	strb	r3, [r7, #31]
 800fc76:	e073      	b.n	800fd60 <UART_SetConfig+0x348>
 800fc78:	2304      	movs	r3, #4
 800fc7a:	77fb      	strb	r3, [r7, #31]
 800fc7c:	e070      	b.n	800fd60 <UART_SetConfig+0x348>
 800fc7e:	2308      	movs	r3, #8
 800fc80:	77fb      	strb	r3, [r7, #31]
 800fc82:	e06d      	b.n	800fd60 <UART_SetConfig+0x348>
 800fc84:	2310      	movs	r3, #16
 800fc86:	77fb      	strb	r3, [r7, #31]
 800fc88:	e06a      	b.n	800fd60 <UART_SetConfig+0x348>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	4a1b      	ldr	r2, [pc, #108]	; (800fcfc <UART_SetConfig+0x2e4>)
 800fc90:	4293      	cmp	r3, r2
 800fc92:	d138      	bne.n	800fd06 <UART_SetConfig+0x2ee>
 800fc94:	4b13      	ldr	r3, [pc, #76]	; (800fce4 <UART_SetConfig+0x2cc>)
 800fc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800fc9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fca2:	d017      	beq.n	800fcd4 <UART_SetConfig+0x2bc>
 800fca4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fca8:	d82a      	bhi.n	800fd00 <UART_SetConfig+0x2e8>
 800fcaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fcae:	d00b      	beq.n	800fcc8 <UART_SetConfig+0x2b0>
 800fcb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fcb4:	d824      	bhi.n	800fd00 <UART_SetConfig+0x2e8>
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d003      	beq.n	800fcc2 <UART_SetConfig+0x2aa>
 800fcba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcbe:	d006      	beq.n	800fcce <UART_SetConfig+0x2b6>
 800fcc0:	e01e      	b.n	800fd00 <UART_SetConfig+0x2e8>
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	77fb      	strb	r3, [r7, #31]
 800fcc6:	e04b      	b.n	800fd60 <UART_SetConfig+0x348>
 800fcc8:	2302      	movs	r3, #2
 800fcca:	77fb      	strb	r3, [r7, #31]
 800fccc:	e048      	b.n	800fd60 <UART_SetConfig+0x348>
 800fcce:	2304      	movs	r3, #4
 800fcd0:	77fb      	strb	r3, [r7, #31]
 800fcd2:	e045      	b.n	800fd60 <UART_SetConfig+0x348>
 800fcd4:	2308      	movs	r3, #8
 800fcd6:	77fb      	strb	r3, [r7, #31]
 800fcd8:	e042      	b.n	800fd60 <UART_SetConfig+0x348>
 800fcda:	bf00      	nop
 800fcdc:	efff69f3 	.word	0xefff69f3
 800fce0:	40011000 	.word	0x40011000
 800fce4:	40023800 	.word	0x40023800
 800fce8:	40004400 	.word	0x40004400
 800fcec:	40004800 	.word	0x40004800
 800fcf0:	40004c00 	.word	0x40004c00
 800fcf4:	40005000 	.word	0x40005000
 800fcf8:	40011400 	.word	0x40011400
 800fcfc:	40007800 	.word	0x40007800
 800fd00:	2310      	movs	r3, #16
 800fd02:	77fb      	strb	r3, [r7, #31]
 800fd04:	e02c      	b.n	800fd60 <UART_SetConfig+0x348>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4a72      	ldr	r2, [pc, #456]	; (800fed4 <UART_SetConfig+0x4bc>)
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d125      	bne.n	800fd5c <UART_SetConfig+0x344>
 800fd10:	4b71      	ldr	r3, [pc, #452]	; (800fed8 <UART_SetConfig+0x4c0>)
 800fd12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fd1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fd1e:	d017      	beq.n	800fd50 <UART_SetConfig+0x338>
 800fd20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fd24:	d817      	bhi.n	800fd56 <UART_SetConfig+0x33e>
 800fd26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd2a:	d00b      	beq.n	800fd44 <UART_SetConfig+0x32c>
 800fd2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd30:	d811      	bhi.n	800fd56 <UART_SetConfig+0x33e>
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d003      	beq.n	800fd3e <UART_SetConfig+0x326>
 800fd36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fd3a:	d006      	beq.n	800fd4a <UART_SetConfig+0x332>
 800fd3c:	e00b      	b.n	800fd56 <UART_SetConfig+0x33e>
 800fd3e:	2300      	movs	r3, #0
 800fd40:	77fb      	strb	r3, [r7, #31]
 800fd42:	e00d      	b.n	800fd60 <UART_SetConfig+0x348>
 800fd44:	2302      	movs	r3, #2
 800fd46:	77fb      	strb	r3, [r7, #31]
 800fd48:	e00a      	b.n	800fd60 <UART_SetConfig+0x348>
 800fd4a:	2304      	movs	r3, #4
 800fd4c:	77fb      	strb	r3, [r7, #31]
 800fd4e:	e007      	b.n	800fd60 <UART_SetConfig+0x348>
 800fd50:	2308      	movs	r3, #8
 800fd52:	77fb      	strb	r3, [r7, #31]
 800fd54:	e004      	b.n	800fd60 <UART_SetConfig+0x348>
 800fd56:	2310      	movs	r3, #16
 800fd58:	77fb      	strb	r3, [r7, #31]
 800fd5a:	e001      	b.n	800fd60 <UART_SetConfig+0x348>
 800fd5c:	2310      	movs	r3, #16
 800fd5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	69db      	ldr	r3, [r3, #28]
 800fd64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd68:	d15b      	bne.n	800fe22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800fd6a:	7ffb      	ldrb	r3, [r7, #31]
 800fd6c:	2b08      	cmp	r3, #8
 800fd6e:	d828      	bhi.n	800fdc2 <UART_SetConfig+0x3aa>
 800fd70:	a201      	add	r2, pc, #4	; (adr r2, 800fd78 <UART_SetConfig+0x360>)
 800fd72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd76:	bf00      	nop
 800fd78:	0800fd9d 	.word	0x0800fd9d
 800fd7c:	0800fda5 	.word	0x0800fda5
 800fd80:	0800fdad 	.word	0x0800fdad
 800fd84:	0800fdc3 	.word	0x0800fdc3
 800fd88:	0800fdb3 	.word	0x0800fdb3
 800fd8c:	0800fdc3 	.word	0x0800fdc3
 800fd90:	0800fdc3 	.word	0x0800fdc3
 800fd94:	0800fdc3 	.word	0x0800fdc3
 800fd98:	0800fdbb 	.word	0x0800fdbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd9c:	f7fe f91c 	bl	800dfd8 <HAL_RCC_GetPCLK1Freq>
 800fda0:	61b8      	str	r0, [r7, #24]
        break;
 800fda2:	e013      	b.n	800fdcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fda4:	f7fe f92c 	bl	800e000 <HAL_RCC_GetPCLK2Freq>
 800fda8:	61b8      	str	r0, [r7, #24]
        break;
 800fdaa:	e00f      	b.n	800fdcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fdac:	4b4b      	ldr	r3, [pc, #300]	; (800fedc <UART_SetConfig+0x4c4>)
 800fdae:	61bb      	str	r3, [r7, #24]
        break;
 800fdb0:	e00c      	b.n	800fdcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fdb2:	f7fe f83f 	bl	800de34 <HAL_RCC_GetSysClockFreq>
 800fdb6:	61b8      	str	r0, [r7, #24]
        break;
 800fdb8:	e008      	b.n	800fdcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fdba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fdbe:	61bb      	str	r3, [r7, #24]
        break;
 800fdc0:	e004      	b.n	800fdcc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	77bb      	strb	r3, [r7, #30]
        break;
 800fdca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fdcc:	69bb      	ldr	r3, [r7, #24]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d074      	beq.n	800febc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fdd2:	69bb      	ldr	r3, [r7, #24]
 800fdd4:	005a      	lsls	r2, r3, #1
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	085b      	lsrs	r3, r3, #1
 800fddc:	441a      	add	r2, r3
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fde6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	2b0f      	cmp	r3, #15
 800fdec:	d916      	bls.n	800fe1c <UART_SetConfig+0x404>
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdf4:	d212      	bcs.n	800fe1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	f023 030f 	bic.w	r3, r3, #15
 800fdfe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	085b      	lsrs	r3, r3, #1
 800fe04:	b29b      	uxth	r3, r3
 800fe06:	f003 0307 	and.w	r3, r3, #7
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	89fb      	ldrh	r3, [r7, #14]
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	89fa      	ldrh	r2, [r7, #14]
 800fe18:	60da      	str	r2, [r3, #12]
 800fe1a:	e04f      	b.n	800febc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	77bb      	strb	r3, [r7, #30]
 800fe20:	e04c      	b.n	800febc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fe22:	7ffb      	ldrb	r3, [r7, #31]
 800fe24:	2b08      	cmp	r3, #8
 800fe26:	d828      	bhi.n	800fe7a <UART_SetConfig+0x462>
 800fe28:	a201      	add	r2, pc, #4	; (adr r2, 800fe30 <UART_SetConfig+0x418>)
 800fe2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe2e:	bf00      	nop
 800fe30:	0800fe55 	.word	0x0800fe55
 800fe34:	0800fe5d 	.word	0x0800fe5d
 800fe38:	0800fe65 	.word	0x0800fe65
 800fe3c:	0800fe7b 	.word	0x0800fe7b
 800fe40:	0800fe6b 	.word	0x0800fe6b
 800fe44:	0800fe7b 	.word	0x0800fe7b
 800fe48:	0800fe7b 	.word	0x0800fe7b
 800fe4c:	0800fe7b 	.word	0x0800fe7b
 800fe50:	0800fe73 	.word	0x0800fe73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe54:	f7fe f8c0 	bl	800dfd8 <HAL_RCC_GetPCLK1Freq>
 800fe58:	61b8      	str	r0, [r7, #24]
        break;
 800fe5a:	e013      	b.n	800fe84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe5c:	f7fe f8d0 	bl	800e000 <HAL_RCC_GetPCLK2Freq>
 800fe60:	61b8      	str	r0, [r7, #24]
        break;
 800fe62:	e00f      	b.n	800fe84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fe64:	4b1d      	ldr	r3, [pc, #116]	; (800fedc <UART_SetConfig+0x4c4>)
 800fe66:	61bb      	str	r3, [r7, #24]
        break;
 800fe68:	e00c      	b.n	800fe84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fe6a:	f7fd ffe3 	bl	800de34 <HAL_RCC_GetSysClockFreq>
 800fe6e:	61b8      	str	r0, [r7, #24]
        break;
 800fe70:	e008      	b.n	800fe84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe76:	61bb      	str	r3, [r7, #24]
        break;
 800fe78:	e004      	b.n	800fe84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fe7e:	2301      	movs	r3, #1
 800fe80:	77bb      	strb	r3, [r7, #30]
        break;
 800fe82:	bf00      	nop
    }

    if (pclk != 0U)
 800fe84:	69bb      	ldr	r3, [r7, #24]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d018      	beq.n	800febc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	085a      	lsrs	r2, r3, #1
 800fe90:	69bb      	ldr	r3, [r7, #24]
 800fe92:	441a      	add	r2, r3
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	2b0f      	cmp	r3, #15
 800fea2:	d909      	bls.n	800feb8 <UART_SetConfig+0x4a0>
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800feaa:	d205      	bcs.n	800feb8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	b29a      	uxth	r2, r3
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	60da      	str	r2, [r3, #12]
 800feb6:	e001      	b.n	800febc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800feb8:	2301      	movs	r3, #1
 800feba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2200      	movs	r2, #0
 800fec6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800fec8:	7fbb      	ldrb	r3, [r7, #30]
}
 800feca:	4618      	mov	r0, r3
 800fecc:	3720      	adds	r7, #32
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	40007c00 	.word	0x40007c00
 800fed8:	40023800 	.word	0x40023800
 800fedc:	00f42400 	.word	0x00f42400

0800fee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b083      	sub	sp, #12
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feec:	f003 0301 	and.w	r3, r3, #1
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d00a      	beq.n	800ff0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	430a      	orrs	r2, r1
 800ff08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff0e:	f003 0302 	and.w	r3, r3, #2
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d00a      	beq.n	800ff2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	430a      	orrs	r2, r1
 800ff2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff30:	f003 0304 	and.w	r3, r3, #4
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d00a      	beq.n	800ff4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	430a      	orrs	r2, r1
 800ff4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff52:	f003 0308 	and.w	r3, r3, #8
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d00a      	beq.n	800ff70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	430a      	orrs	r2, r1
 800ff6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff74:	f003 0310 	and.w	r3, r3, #16
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d00a      	beq.n	800ff92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	689b      	ldr	r3, [r3, #8]
 800ff82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	430a      	orrs	r2, r1
 800ff90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff96:	f003 0320 	and.w	r3, r3, #32
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d00a      	beq.n	800ffb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	689b      	ldr	r3, [r3, #8]
 800ffa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	430a      	orrs	r2, r1
 800ffb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d01a      	beq.n	800fff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	430a      	orrs	r2, r1
 800ffd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffde:	d10a      	bne.n	800fff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	430a      	orrs	r2, r1
 800fff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d00a      	beq.n	8010018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	430a      	orrs	r2, r1
 8010016:	605a      	str	r2, [r3, #4]
  }
}
 8010018:	bf00      	nop
 801001a:	370c      	adds	r7, #12
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr

08010024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b086      	sub	sp, #24
 8010028:	af02      	add	r7, sp, #8
 801002a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010034:	f7fa fe40 	bl	800acb8 <HAL_GetTick>
 8010038:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	f003 0308 	and.w	r3, r3, #8
 8010044:	2b08      	cmp	r3, #8
 8010046:	d10e      	bne.n	8010066 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801004c:	9300      	str	r3, [sp, #0]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2200      	movs	r2, #0
 8010052:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f000 f81b 	bl	8010092 <UART_WaitOnFlagUntilTimeout>
 801005c:	4603      	mov	r3, r0
 801005e:	2b00      	cmp	r3, #0
 8010060:	d001      	beq.n	8010066 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010062:	2303      	movs	r3, #3
 8010064:	e011      	b.n	801008a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2220      	movs	r2, #32
 801006a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2220      	movs	r2, #32
 8010070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2200      	movs	r2, #0
 8010078:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2200      	movs	r2, #0
 801007e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2200      	movs	r2, #0
 8010084:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8010088:	2300      	movs	r3, #0
}
 801008a:	4618      	mov	r0, r3
 801008c:	3710      	adds	r7, #16
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010092:	b580      	push	{r7, lr}
 8010094:	b09c      	sub	sp, #112	; 0x70
 8010096:	af00      	add	r7, sp, #0
 8010098:	60f8      	str	r0, [r7, #12]
 801009a:	60b9      	str	r1, [r7, #8]
 801009c:	603b      	str	r3, [r7, #0]
 801009e:	4613      	mov	r3, r2
 80100a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100a2:	e0a7      	b.n	80101f4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80100a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80100aa:	f000 80a3 	beq.w	80101f4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100ae:	f7fa fe03 	bl	800acb8 <HAL_GetTick>
 80100b2:	4602      	mov	r2, r0
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d302      	bcc.n	80100c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80100be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d13f      	bne.n	8010144 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100cc:	e853 3f00 	ldrex	r3, [r3]
 80100d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80100d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80100d8:	667b      	str	r3, [r7, #100]	; 0x64
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	461a      	mov	r2, r3
 80100e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80100e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80100e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80100ea:	e841 2300 	strex	r3, r2, [r1]
 80100ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80100f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d1e6      	bne.n	80100c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	3308      	adds	r3, #8
 80100fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010100:	e853 3f00 	ldrex	r3, [r3]
 8010104:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010108:	f023 0301 	bic.w	r3, r3, #1
 801010c:	663b      	str	r3, [r7, #96]	; 0x60
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	3308      	adds	r3, #8
 8010114:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010116:	64ba      	str	r2, [r7, #72]	; 0x48
 8010118:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801011a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801011c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801011e:	e841 2300 	strex	r3, r2, [r1]
 8010122:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010126:	2b00      	cmp	r3, #0
 8010128:	d1e5      	bne.n	80100f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2220      	movs	r2, #32
 801012e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	2220      	movs	r2, #32
 8010134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	2200      	movs	r2, #0
 801013c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8010140:	2303      	movs	r3, #3
 8010142:	e068      	b.n	8010216 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f003 0304 	and.w	r3, r3, #4
 801014e:	2b00      	cmp	r3, #0
 8010150:	d050      	beq.n	80101f4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	69db      	ldr	r3, [r3, #28]
 8010158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801015c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010160:	d148      	bne.n	80101f4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801016a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010174:	e853 3f00 	ldrex	r3, [r3]
 8010178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801017a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010180:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	461a      	mov	r2, r3
 8010188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801018a:	637b      	str	r3, [r7, #52]	; 0x34
 801018c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801018e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010192:	e841 2300 	strex	r3, r2, [r1]
 8010196:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019a:	2b00      	cmp	r3, #0
 801019c:	d1e6      	bne.n	801016c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	3308      	adds	r3, #8
 80101a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	e853 3f00 	ldrex	r3, [r3]
 80101ac:	613b      	str	r3, [r7, #16]
   return(result);
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	f023 0301 	bic.w	r3, r3, #1
 80101b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	3308      	adds	r3, #8
 80101bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80101be:	623a      	str	r2, [r7, #32]
 80101c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101c2:	69f9      	ldr	r1, [r7, #28]
 80101c4:	6a3a      	ldr	r2, [r7, #32]
 80101c6:	e841 2300 	strex	r3, r2, [r1]
 80101ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d1e5      	bne.n	801019e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	2220      	movs	r2, #32
 80101d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2220      	movs	r2, #32
 80101dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2220      	movs	r2, #32
 80101e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	2200      	movs	r2, #0
 80101ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80101f0:	2303      	movs	r3, #3
 80101f2:	e010      	b.n	8010216 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	69da      	ldr	r2, [r3, #28]
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	4013      	ands	r3, r2
 80101fe:	68ba      	ldr	r2, [r7, #8]
 8010200:	429a      	cmp	r2, r3
 8010202:	bf0c      	ite	eq
 8010204:	2301      	moveq	r3, #1
 8010206:	2300      	movne	r3, #0
 8010208:	b2db      	uxtb	r3, r3
 801020a:	461a      	mov	r2, r3
 801020c:	79fb      	ldrb	r3, [r7, #7]
 801020e:	429a      	cmp	r2, r3
 8010210:	f43f af48 	beq.w	80100a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010214:	2300      	movs	r3, #0
}
 8010216:	4618      	mov	r0, r3
 8010218:	3770      	adds	r7, #112	; 0x70
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
	...

08010220 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010220:	b480      	push	{r7}
 8010222:	b097      	sub	sp, #92	; 0x5c
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	4613      	mov	r3, r2
 801022c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	68ba      	ldr	r2, [r7, #8]
 8010232:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	88fa      	ldrh	r2, [r7, #6]
 8010238:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	88fa      	ldrh	r2, [r7, #6]
 8010240:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2200      	movs	r2, #0
 8010248:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	689b      	ldr	r3, [r3, #8]
 801024e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010252:	d10e      	bne.n	8010272 <UART_Start_Receive_IT+0x52>
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	691b      	ldr	r3, [r3, #16]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d105      	bne.n	8010268 <UART_Start_Receive_IT+0x48>
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010262:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010266:	e02d      	b.n	80102c4 <UART_Start_Receive_IT+0xa4>
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	22ff      	movs	r2, #255	; 0xff
 801026c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010270:	e028      	b.n	80102c4 <UART_Start_Receive_IT+0xa4>
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	689b      	ldr	r3, [r3, #8]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d10d      	bne.n	8010296 <UART_Start_Receive_IT+0x76>
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	691b      	ldr	r3, [r3, #16]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d104      	bne.n	801028c <UART_Start_Receive_IT+0x6c>
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	22ff      	movs	r2, #255	; 0xff
 8010286:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801028a:	e01b      	b.n	80102c4 <UART_Start_Receive_IT+0xa4>
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	227f      	movs	r2, #127	; 0x7f
 8010290:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010294:	e016      	b.n	80102c4 <UART_Start_Receive_IT+0xa4>
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	689b      	ldr	r3, [r3, #8]
 801029a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801029e:	d10d      	bne.n	80102bc <UART_Start_Receive_IT+0x9c>
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	691b      	ldr	r3, [r3, #16]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d104      	bne.n	80102b2 <UART_Start_Receive_IT+0x92>
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	227f      	movs	r2, #127	; 0x7f
 80102ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80102b0:	e008      	b.n	80102c4 <UART_Start_Receive_IT+0xa4>
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	223f      	movs	r2, #63	; 0x3f
 80102b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80102ba:	e003      	b.n	80102c4 <UART_Start_Receive_IT+0xa4>
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2200      	movs	r2, #0
 80102c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	2200      	movs	r2, #0
 80102c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2222      	movs	r2, #34	; 0x22
 80102d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	3308      	adds	r3, #8
 80102da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102de:	e853 3f00 	ldrex	r3, [r3]
 80102e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80102e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e6:	f043 0301 	orr.w	r3, r3, #1
 80102ea:	657b      	str	r3, [r7, #84]	; 0x54
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	3308      	adds	r3, #8
 80102f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80102f6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80102fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102fc:	e841 2300 	strex	r3, r2, [r1]
 8010300:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010304:	2b00      	cmp	r3, #0
 8010306:	d1e5      	bne.n	80102d4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	689b      	ldr	r3, [r3, #8]
 801030c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010310:	d107      	bne.n	8010322 <UART_Start_Receive_IT+0x102>
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	691b      	ldr	r3, [r3, #16]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d103      	bne.n	8010322 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	4a21      	ldr	r2, [pc, #132]	; (80103a4 <UART_Start_Receive_IT+0x184>)
 801031e:	669a      	str	r2, [r3, #104]	; 0x68
 8010320:	e002      	b.n	8010328 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	4a20      	ldr	r2, [pc, #128]	; (80103a8 <UART_Start_Receive_IT+0x188>)
 8010326:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	691b      	ldr	r3, [r3, #16]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d019      	beq.n	8010364 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010338:	e853 3f00 	ldrex	r3, [r3]
 801033c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801033e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010340:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8010344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	461a      	mov	r2, r3
 801034c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801034e:	637b      	str	r3, [r7, #52]	; 0x34
 8010350:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010352:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010356:	e841 2300 	strex	r3, r2, [r1]
 801035a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801035c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801035e:	2b00      	cmp	r3, #0
 8010360:	d1e6      	bne.n	8010330 <UART_Start_Receive_IT+0x110>
 8010362:	e018      	b.n	8010396 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	e853 3f00 	ldrex	r3, [r3]
 8010370:	613b      	str	r3, [r7, #16]
   return(result);
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	f043 0320 	orr.w	r3, r3, #32
 8010378:	653b      	str	r3, [r7, #80]	; 0x50
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	461a      	mov	r2, r3
 8010380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010382:	623b      	str	r3, [r7, #32]
 8010384:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010386:	69f9      	ldr	r1, [r7, #28]
 8010388:	6a3a      	ldr	r2, [r7, #32]
 801038a:	e841 2300 	strex	r3, r2, [r1]
 801038e:	61bb      	str	r3, [r7, #24]
   return(result);
 8010390:	69bb      	ldr	r3, [r7, #24]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d1e6      	bne.n	8010364 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8010396:	2300      	movs	r3, #0
}
 8010398:	4618      	mov	r0, r3
 801039a:	375c      	adds	r7, #92	; 0x5c
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr
 80103a4:	080107d1 	.word	0x080107d1
 80103a8:	0801066b 	.word	0x0801066b

080103ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80103ac:	b480      	push	{r7}
 80103ae:	b095      	sub	sp, #84	; 0x54
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103bc:	e853 3f00 	ldrex	r3, [r3]
 80103c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80103c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80103c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	461a      	mov	r2, r3
 80103d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103d2:	643b      	str	r3, [r7, #64]	; 0x40
 80103d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80103d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80103da:	e841 2300 	strex	r3, r2, [r1]
 80103de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80103e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d1e6      	bne.n	80103b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	3308      	adds	r3, #8
 80103ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ee:	6a3b      	ldr	r3, [r7, #32]
 80103f0:	e853 3f00 	ldrex	r3, [r3]
 80103f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80103f6:	69fb      	ldr	r3, [r7, #28]
 80103f8:	f023 0301 	bic.w	r3, r3, #1
 80103fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	3308      	adds	r3, #8
 8010404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010408:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801040a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801040c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801040e:	e841 2300 	strex	r3, r2, [r1]
 8010412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1e5      	bne.n	80103e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801041e:	2b01      	cmp	r3, #1
 8010420:	d118      	bne.n	8010454 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	e853 3f00 	ldrex	r3, [r3]
 801042e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	f023 0310 	bic.w	r3, r3, #16
 8010436:	647b      	str	r3, [r7, #68]	; 0x44
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	461a      	mov	r2, r3
 801043e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010440:	61bb      	str	r3, [r7, #24]
 8010442:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010444:	6979      	ldr	r1, [r7, #20]
 8010446:	69ba      	ldr	r2, [r7, #24]
 8010448:	e841 2300 	strex	r3, r2, [r1]
 801044c:	613b      	str	r3, [r7, #16]
   return(result);
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d1e6      	bne.n	8010422 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2220      	movs	r2, #32
 8010458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2200      	movs	r2, #0
 8010460:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	669a      	str	r2, [r3, #104]	; 0x68
}
 8010468:	bf00      	nop
 801046a:	3754      	adds	r7, #84	; 0x54
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr

08010474 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010480:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2200      	movs	r2, #0
 8010486:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2200      	movs	r2, #0
 801048e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010492:	68f8      	ldr	r0, [r7, #12]
 8010494:	f7ff faaa 	bl	800f9ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010498:	bf00      	nop
 801049a:	3710      	adds	r7, #16
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b08f      	sub	sp, #60	; 0x3c
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104ac:	2b21      	cmp	r3, #33	; 0x21
 80104ae:	d14c      	bne.n	801054a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d132      	bne.n	8010522 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104c2:	6a3b      	ldr	r3, [r7, #32]
 80104c4:	e853 3f00 	ldrex	r3, [r3]
 80104c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104d0:	637b      	str	r3, [r7, #52]	; 0x34
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	461a      	mov	r2, r3
 80104d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104dc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104e2:	e841 2300 	strex	r3, r2, [r1]
 80104e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80104e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d1e6      	bne.n	80104bc <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	e853 3f00 	ldrex	r3, [r3]
 80104fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010502:	633b      	str	r3, [r7, #48]	; 0x30
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	461a      	mov	r2, r3
 801050a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050c:	61bb      	str	r3, [r7, #24]
 801050e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010510:	6979      	ldr	r1, [r7, #20]
 8010512:	69ba      	ldr	r2, [r7, #24]
 8010514:	e841 2300 	strex	r3, r2, [r1]
 8010518:	613b      	str	r3, [r7, #16]
   return(result);
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d1e6      	bne.n	80104ee <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8010520:	e013      	b.n	801054a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010526:	781a      	ldrb	r2, [r3, #0]
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010532:	1c5a      	adds	r2, r3, #1
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801053e:	b29b      	uxth	r3, r3
 8010540:	3b01      	subs	r3, #1
 8010542:	b29a      	uxth	r2, r3
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 801054a:	bf00      	nop
 801054c:	373c      	adds	r7, #60	; 0x3c
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr

08010556 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010556:	b480      	push	{r7}
 8010558:	b091      	sub	sp, #68	; 0x44
 801055a:	af00      	add	r7, sp, #0
 801055c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010562:	2b21      	cmp	r3, #33	; 0x21
 8010564:	d151      	bne.n	801060a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801056c:	b29b      	uxth	r3, r3
 801056e:	2b00      	cmp	r3, #0
 8010570:	d132      	bne.n	80105d8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057a:	e853 3f00 	ldrex	r3, [r3]
 801057e:	623b      	str	r3, [r7, #32]
   return(result);
 8010580:	6a3b      	ldr	r3, [r7, #32]
 8010582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010586:	63bb      	str	r3, [r7, #56]	; 0x38
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	461a      	mov	r2, r3
 801058e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010590:	633b      	str	r3, [r7, #48]	; 0x30
 8010592:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010594:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010598:	e841 2300 	strex	r3, r2, [r1]
 801059c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801059e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d1e6      	bne.n	8010572 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	e853 3f00 	ldrex	r3, [r3]
 80105b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105b8:	637b      	str	r3, [r7, #52]	; 0x34
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	461a      	mov	r2, r3
 80105c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105c2:	61fb      	str	r3, [r7, #28]
 80105c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c6:	69b9      	ldr	r1, [r7, #24]
 80105c8:	69fa      	ldr	r2, [r7, #28]
 80105ca:	e841 2300 	strex	r3, r2, [r1]
 80105ce:	617b      	str	r3, [r7, #20]
   return(result);
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d1e6      	bne.n	80105a4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80105d6:	e018      	b.n	801060a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105dc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80105de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105e0:	881b      	ldrh	r3, [r3, #0]
 80105e2:	461a      	mov	r2, r3
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80105ec:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105f2:	1c9a      	adds	r2, r3, #2
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80105fe:	b29b      	uxth	r3, r3
 8010600:	3b01      	subs	r3, #1
 8010602:	b29a      	uxth	r2, r3
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 801060a:	bf00      	nop
 801060c:	3744      	adds	r7, #68	; 0x44
 801060e:	46bd      	mov	sp, r7
 8010610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010614:	4770      	bx	lr

08010616 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010616:	b580      	push	{r7, lr}
 8010618:	b088      	sub	sp, #32
 801061a:	af00      	add	r7, sp, #0
 801061c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	e853 3f00 	ldrex	r3, [r3]
 801062a:	60bb      	str	r3, [r7, #8]
   return(result);
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010632:	61fb      	str	r3, [r7, #28]
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	461a      	mov	r2, r3
 801063a:	69fb      	ldr	r3, [r7, #28]
 801063c:	61bb      	str	r3, [r7, #24]
 801063e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010640:	6979      	ldr	r1, [r7, #20]
 8010642:	69ba      	ldr	r2, [r7, #24]
 8010644:	e841 2300 	strex	r3, r2, [r1]
 8010648:	613b      	str	r3, [r7, #16]
   return(result);
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1e6      	bne.n	801061e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2220      	movs	r2, #32
 8010654:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2200      	movs	r2, #0
 801065a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f7ff f9bb 	bl	800f9d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010662:	bf00      	nop
 8010664:	3720      	adds	r7, #32
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}

0801066a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801066a:	b580      	push	{r7, lr}
 801066c:	b096      	sub	sp, #88	; 0x58
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010678:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010682:	2b22      	cmp	r3, #34	; 0x22
 8010684:	f040 8098 	bne.w	80107b8 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801068e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010692:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8010696:	b2d9      	uxtb	r1, r3
 8010698:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801069c:	b2da      	uxtb	r2, r3
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106a2:	400a      	ands	r2, r1
 80106a4:	b2d2      	uxtb	r2, r2
 80106a6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106ac:	1c5a      	adds	r2, r3, #1
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80106b8:	b29b      	uxth	r3, r3
 80106ba:	3b01      	subs	r3, #1
 80106bc:	b29a      	uxth	r2, r3
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80106ca:	b29b      	uxth	r3, r3
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d17b      	bne.n	80107c8 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d8:	e853 3f00 	ldrex	r3, [r3]
 80106dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80106de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80106e4:	653b      	str	r3, [r7, #80]	; 0x50
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	461a      	mov	r2, r3
 80106ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106ee:	647b      	str	r3, [r7, #68]	; 0x44
 80106f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80106f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106f6:	e841 2300 	strex	r3, r2, [r1]
 80106fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80106fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1e6      	bne.n	80106d0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	3308      	adds	r3, #8
 8010708:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070c:	e853 3f00 	ldrex	r3, [r3]
 8010710:	623b      	str	r3, [r7, #32]
   return(result);
 8010712:	6a3b      	ldr	r3, [r7, #32]
 8010714:	f023 0301 	bic.w	r3, r3, #1
 8010718:	64fb      	str	r3, [r7, #76]	; 0x4c
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	3308      	adds	r3, #8
 8010720:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010722:	633a      	str	r2, [r7, #48]	; 0x30
 8010724:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801072a:	e841 2300 	strex	r3, r2, [r1]
 801072e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010732:	2b00      	cmp	r3, #0
 8010734:	d1e5      	bne.n	8010702 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2220      	movs	r2, #32
 801073a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2200      	movs	r2, #0
 8010742:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2200      	movs	r2, #0
 8010748:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801074e:	2b01      	cmp	r3, #1
 8010750:	d12e      	bne.n	80107b0 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2200      	movs	r2, #0
 8010756:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801075e:	693b      	ldr	r3, [r7, #16]
 8010760:	e853 3f00 	ldrex	r3, [r3]
 8010764:	60fb      	str	r3, [r7, #12]
   return(result);
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	f023 0310 	bic.w	r3, r3, #16
 801076c:	64bb      	str	r3, [r7, #72]	; 0x48
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	461a      	mov	r2, r3
 8010774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010776:	61fb      	str	r3, [r7, #28]
 8010778:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801077a:	69b9      	ldr	r1, [r7, #24]
 801077c:	69fa      	ldr	r2, [r7, #28]
 801077e:	e841 2300 	strex	r3, r2, [r1]
 8010782:	617b      	str	r3, [r7, #20]
   return(result);
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d1e6      	bne.n	8010758 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	69db      	ldr	r3, [r3, #28]
 8010790:	f003 0310 	and.w	r3, r3, #16
 8010794:	2b10      	cmp	r3, #16
 8010796:	d103      	bne.n	80107a0 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2210      	movs	r2, #16
 801079e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80107a6:	4619      	mov	r1, r3
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f7ff f929 	bl	800fa00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80107ae:	e00b      	b.n	80107c8 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f7f0 fbd5 	bl	8000f60 <HAL_UART_RxCpltCallback>
}
 80107b6:	e007      	b.n	80107c8 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	699a      	ldr	r2, [r3, #24]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f042 0208 	orr.w	r2, r2, #8
 80107c6:	619a      	str	r2, [r3, #24]
}
 80107c8:	bf00      	nop
 80107ca:	3758      	adds	r7, #88	; 0x58
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b096      	sub	sp, #88	; 0x58
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80107de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107e8:	2b22      	cmp	r3, #34	; 0x22
 80107ea:	f040 8098 	bne.w	801091e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107f4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107fc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80107fe:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010802:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010806:	4013      	ands	r3, r2
 8010808:	b29a      	uxth	r2, r3
 801080a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801080c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010812:	1c9a      	adds	r2, r3, #2
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801081e:	b29b      	uxth	r3, r3
 8010820:	3b01      	subs	r3, #1
 8010822:	b29a      	uxth	r2, r3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010830:	b29b      	uxth	r3, r3
 8010832:	2b00      	cmp	r3, #0
 8010834:	d17b      	bne.n	801092e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801083c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801083e:	e853 3f00 	ldrex	r3, [r3]
 8010842:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010846:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801084a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	461a      	mov	r2, r3
 8010852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010854:	643b      	str	r3, [r7, #64]	; 0x40
 8010856:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010858:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801085a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801085c:	e841 2300 	strex	r3, r2, [r1]
 8010860:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010864:	2b00      	cmp	r3, #0
 8010866:	d1e6      	bne.n	8010836 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	3308      	adds	r3, #8
 801086e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010870:	6a3b      	ldr	r3, [r7, #32]
 8010872:	e853 3f00 	ldrex	r3, [r3]
 8010876:	61fb      	str	r3, [r7, #28]
   return(result);
 8010878:	69fb      	ldr	r3, [r7, #28]
 801087a:	f023 0301 	bic.w	r3, r3, #1
 801087e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	3308      	adds	r3, #8
 8010886:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010888:	62fa      	str	r2, [r7, #44]	; 0x2c
 801088a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801088c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801088e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010890:	e841 2300 	strex	r3, r2, [r1]
 8010894:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010898:	2b00      	cmp	r3, #0
 801089a:	d1e5      	bne.n	8010868 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2220      	movs	r2, #32
 80108a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2200      	movs	r2, #0
 80108a8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2200      	movs	r2, #0
 80108ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80108b4:	2b01      	cmp	r3, #1
 80108b6:	d12e      	bne.n	8010916 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2200      	movs	r2, #0
 80108bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	e853 3f00 	ldrex	r3, [r3]
 80108ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	f023 0310 	bic.w	r3, r3, #16
 80108d2:	647b      	str	r3, [r7, #68]	; 0x44
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	461a      	mov	r2, r3
 80108da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108dc:	61bb      	str	r3, [r7, #24]
 80108de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108e0:	6979      	ldr	r1, [r7, #20]
 80108e2:	69ba      	ldr	r2, [r7, #24]
 80108e4:	e841 2300 	strex	r3, r2, [r1]
 80108e8:	613b      	str	r3, [r7, #16]
   return(result);
 80108ea:	693b      	ldr	r3, [r7, #16]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d1e6      	bne.n	80108be <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	69db      	ldr	r3, [r3, #28]
 80108f6:	f003 0310 	and.w	r3, r3, #16
 80108fa:	2b10      	cmp	r3, #16
 80108fc:	d103      	bne.n	8010906 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	2210      	movs	r2, #16
 8010904:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801090c:	4619      	mov	r1, r3
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f7ff f876 	bl	800fa00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010914:	e00b      	b.n	801092e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f7f0 fb22 	bl	8000f60 <HAL_UART_RxCpltCallback>
}
 801091c:	e007      	b.n	801092e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	699a      	ldr	r2, [r3, #24]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f042 0208 	orr.w	r2, r2, #8
 801092c:	619a      	str	r2, [r3, #24]
}
 801092e:	bf00      	nop
 8010930:	3758      	adds	r7, #88	; 0x58
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
	...

08010938 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8010938:	b480      	push	{r7}
 801093a:	b087      	sub	sp, #28
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	681a      	ldr	r2, [r3, #0]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801094c:	683a      	ldr	r2, [r7, #0]
 801094e:	6812      	ldr	r2, [r2, #0]
 8010950:	f023 0101 	bic.w	r1, r3, #1
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	689b      	ldr	r3, [r3, #8]
 801095e:	2b08      	cmp	r3, #8
 8010960:	d102      	bne.n	8010968 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8010962:	2340      	movs	r3, #64	; 0x40
 8010964:	617b      	str	r3, [r7, #20]
 8010966:	e001      	b.n	801096c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8010968:	2300      	movs	r3, #0
 801096a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8010978:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 801097e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8010984:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 801098a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8010990:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8010996:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 801099c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80109a2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80109a8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80109ae:	4313      	orrs	r3, r2
 80109b0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109b6:	693a      	ldr	r2, [r7, #16]
 80109b8:	4313      	orrs	r3, r2
 80109ba:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109c0:	693a      	ldr	r2, [r7, #16]
 80109c2:	4313      	orrs	r3, r2
 80109c4:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109ca:	693a      	ldr	r2, [r7, #16]
 80109cc:	4313      	orrs	r3, r2
 80109ce:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 80109d0:	4b20      	ldr	r3, [pc, #128]	; (8010a54 <FMC_NORSRAM_Init+0x11c>)
 80109d2:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109da:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80109e2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80109ea:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	681a      	ldr	r2, [r3, #0]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	43db      	mvns	r3, r3
 80109fa:	ea02 0103 	and.w	r1, r2, r3
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	681a      	ldr	r2, [r3, #0]
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	4319      	orrs	r1, r3
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a14:	d10c      	bne.n	8010a30 <FMC_NORSRAM_Init+0xf8>
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d008      	beq.n	8010a30 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a2a:	431a      	orrs	r2, r3
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d006      	beq.n	8010a46 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681a      	ldr	r2, [r3, #0]
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a40:	431a      	orrs	r2, r3
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8010a46:	2300      	movs	r3, #0
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	371c      	adds	r7, #28
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr
 8010a54:	0008fb7f 	.word	0x0008fb7f

08010a58 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b087      	sub	sp, #28
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	60f8      	str	r0, [r7, #12]
 8010a60:	60b9      	str	r1, [r7, #8]
 8010a62:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	1c5a      	adds	r2, r3, #1
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a6e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	681a      	ldr	r2, [r3, #0]
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	685b      	ldr	r3, [r3, #4]
 8010a7a:	011b      	lsls	r3, r3, #4
 8010a7c:	431a      	orrs	r2, r3
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	689b      	ldr	r3, [r3, #8]
 8010a82:	021b      	lsls	r3, r3, #8
 8010a84:	431a      	orrs	r2, r3
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	68db      	ldr	r3, [r3, #12]
 8010a8a:	041b      	lsls	r3, r3, #16
 8010a8c:	431a      	orrs	r2, r3
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	691b      	ldr	r3, [r3, #16]
 8010a92:	3b01      	subs	r3, #1
 8010a94:	051b      	lsls	r3, r3, #20
 8010a96:	431a      	orrs	r2, r3
 8010a98:	68bb      	ldr	r3, [r7, #8]
 8010a9a:	695b      	ldr	r3, [r3, #20]
 8010a9c:	3b02      	subs	r3, #2
 8010a9e:	061b      	lsls	r3, r3, #24
 8010aa0:	431a      	orrs	r2, r3
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	699b      	ldr	r3, [r3, #24]
 8010aa6:	4313      	orrs	r3, r2
 8010aa8:	687a      	ldr	r2, [r7, #4]
 8010aaa:	3201      	adds	r2, #1
 8010aac:	4319      	orrs	r1, r3
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ac0:	d113      	bne.n	8010aea <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010aca:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	691b      	ldr	r3, [r3, #16]
 8010ad0:	3b01      	subs	r3, #1
 8010ad2:	051b      	lsls	r3, r3, #20
 8010ad4:	697a      	ldr	r2, [r7, #20]
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	431a      	orrs	r2, r3
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8010aea:	2300      	movs	r3, #0
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	371c      	adds	r7, #28
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b085      	sub	sp, #20
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	607a      	str	r2, [r7, #4]
 8010b04:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010b0c:	d11d      	bne.n	8010b4a <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010b16:	4b13      	ldr	r3, [pc, #76]	; (8010b64 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8010b18:	4013      	ands	r3, r2
 8010b1a:	68ba      	ldr	r2, [r7, #8]
 8010b1c:	6811      	ldr	r1, [r2, #0]
 8010b1e:	68ba      	ldr	r2, [r7, #8]
 8010b20:	6852      	ldr	r2, [r2, #4]
 8010b22:	0112      	lsls	r2, r2, #4
 8010b24:	4311      	orrs	r1, r2
 8010b26:	68ba      	ldr	r2, [r7, #8]
 8010b28:	6892      	ldr	r2, [r2, #8]
 8010b2a:	0212      	lsls	r2, r2, #8
 8010b2c:	4311      	orrs	r1, r2
 8010b2e:	68ba      	ldr	r2, [r7, #8]
 8010b30:	6992      	ldr	r2, [r2, #24]
 8010b32:	4311      	orrs	r1, r2
 8010b34:	68ba      	ldr	r2, [r7, #8]
 8010b36:	68d2      	ldr	r2, [r2, #12]
 8010b38:	0412      	lsls	r2, r2, #16
 8010b3a:	430a      	orrs	r2, r1
 8010b3c:	ea43 0102 	orr.w	r1, r3, r2
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010b48:	e005      	b.n	8010b56 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8010b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8010b56:	2300      	movs	r3, #0
}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3714      	adds	r7, #20
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b62:	4770      	bx	lr
 8010b64:	cff00000 	.word	0xcff00000

08010b68 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8010b68:	b5b0      	push	{r4, r5, r7, lr}
 8010b6a:	b08c      	sub	sp, #48	; 0x30
 8010b6c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8010b6e:	4b96      	ldr	r3, [pc, #600]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010b70:	22c0      	movs	r2, #192	; 0xc0
 8010b72:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8010b74:	4b94      	ldr	r3, [pc, #592]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010b76:	22a8      	movs	r2, #168	; 0xa8
 8010b78:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8010b7a:	4b93      	ldr	r3, [pc, #588]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 30;
 8010b80:	4b91      	ldr	r3, [pc, #580]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010b82:	221e      	movs	r2, #30
 8010b84:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8010b86:	4b91      	ldr	r3, [pc, #580]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010b88:	22ff      	movs	r2, #255	; 0xff
 8010b8a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8010b8c:	4b8f      	ldr	r3, [pc, #572]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010b8e:	22ff      	movs	r2, #255	; 0xff
 8010b90:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8010b92:	4b8e      	ldr	r3, [pc, #568]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010b94:	22ff      	movs	r2, #255	; 0xff
 8010b96:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8010b98:	4b8c      	ldr	r3, [pc, #560]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8010b9e:	4b8c      	ldr	r3, [pc, #560]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010ba0:	22c0      	movs	r2, #192	; 0xc0
 8010ba2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8010ba4:	4b8a      	ldr	r3, [pc, #552]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010ba6:	22a8      	movs	r2, #168	; 0xa8
 8010ba8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8010baa:	4b89      	ldr	r3, [pc, #548]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010bac:	2201      	movs	r2, #1
 8010bae:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8010bb0:	4b87      	ldr	r3, [pc, #540]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8010bb6:	2100      	movs	r1, #0
 8010bb8:	2000      	movs	r0, #0
 8010bba:	f006 fa6d 	bl	8017098 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8010bbe:	4b82      	ldr	r3, [pc, #520]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	061a      	lsls	r2, r3, #24
 8010bc4:	4b80      	ldr	r3, [pc, #512]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010bc6:	785b      	ldrb	r3, [r3, #1]
 8010bc8:	041b      	lsls	r3, r3, #16
 8010bca:	431a      	orrs	r2, r3
 8010bcc:	4b7e      	ldr	r3, [pc, #504]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010bce:	789b      	ldrb	r3, [r3, #2]
 8010bd0:	021b      	lsls	r3, r3, #8
 8010bd2:	4313      	orrs	r3, r2
 8010bd4:	4a7c      	ldr	r2, [pc, #496]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010bd6:	78d2      	ldrb	r2, [r2, #3]
 8010bd8:	4313      	orrs	r3, r2
 8010bda:	061a      	lsls	r2, r3, #24
 8010bdc:	4b7a      	ldr	r3, [pc, #488]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	0619      	lsls	r1, r3, #24
 8010be2:	4b79      	ldr	r3, [pc, #484]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010be4:	785b      	ldrb	r3, [r3, #1]
 8010be6:	041b      	lsls	r3, r3, #16
 8010be8:	4319      	orrs	r1, r3
 8010bea:	4b77      	ldr	r3, [pc, #476]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010bec:	789b      	ldrb	r3, [r3, #2]
 8010bee:	021b      	lsls	r3, r3, #8
 8010bf0:	430b      	orrs	r3, r1
 8010bf2:	4975      	ldr	r1, [pc, #468]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010bf4:	78c9      	ldrb	r1, [r1, #3]
 8010bf6:	430b      	orrs	r3, r1
 8010bf8:	021b      	lsls	r3, r3, #8
 8010bfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010bfe:	431a      	orrs	r2, r3
 8010c00:	4b71      	ldr	r3, [pc, #452]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	0619      	lsls	r1, r3, #24
 8010c06:	4b70      	ldr	r3, [pc, #448]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010c08:	785b      	ldrb	r3, [r3, #1]
 8010c0a:	041b      	lsls	r3, r3, #16
 8010c0c:	4319      	orrs	r1, r3
 8010c0e:	4b6e      	ldr	r3, [pc, #440]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010c10:	789b      	ldrb	r3, [r3, #2]
 8010c12:	021b      	lsls	r3, r3, #8
 8010c14:	430b      	orrs	r3, r1
 8010c16:	496c      	ldr	r1, [pc, #432]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010c18:	78c9      	ldrb	r1, [r1, #3]
 8010c1a:	430b      	orrs	r3, r1
 8010c1c:	0a1b      	lsrs	r3, r3, #8
 8010c1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010c22:	431a      	orrs	r2, r3
 8010c24:	4b68      	ldr	r3, [pc, #416]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	0619      	lsls	r1, r3, #24
 8010c2a:	4b67      	ldr	r3, [pc, #412]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010c2c:	785b      	ldrb	r3, [r3, #1]
 8010c2e:	041b      	lsls	r3, r3, #16
 8010c30:	4319      	orrs	r1, r3
 8010c32:	4b65      	ldr	r3, [pc, #404]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010c34:	789b      	ldrb	r3, [r3, #2]
 8010c36:	021b      	lsls	r3, r3, #8
 8010c38:	430b      	orrs	r3, r1
 8010c3a:	4963      	ldr	r1, [pc, #396]	; (8010dc8 <MX_LWIP_Init+0x260>)
 8010c3c:	78c9      	ldrb	r1, [r1, #3]
 8010c3e:	430b      	orrs	r3, r1
 8010c40:	0e1b      	lsrs	r3, r3, #24
 8010c42:	4313      	orrs	r3, r2
 8010c44:	4a63      	ldr	r2, [pc, #396]	; (8010dd4 <MX_LWIP_Init+0x26c>)
 8010c46:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8010c48:	4b60      	ldr	r3, [pc, #384]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	061a      	lsls	r2, r3, #24
 8010c4e:	4b5f      	ldr	r3, [pc, #380]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010c50:	785b      	ldrb	r3, [r3, #1]
 8010c52:	041b      	lsls	r3, r3, #16
 8010c54:	431a      	orrs	r2, r3
 8010c56:	4b5d      	ldr	r3, [pc, #372]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010c58:	789b      	ldrb	r3, [r3, #2]
 8010c5a:	021b      	lsls	r3, r3, #8
 8010c5c:	4313      	orrs	r3, r2
 8010c5e:	4a5b      	ldr	r2, [pc, #364]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010c60:	78d2      	ldrb	r2, [r2, #3]
 8010c62:	4313      	orrs	r3, r2
 8010c64:	061a      	lsls	r2, r3, #24
 8010c66:	4b59      	ldr	r3, [pc, #356]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	0619      	lsls	r1, r3, #24
 8010c6c:	4b57      	ldr	r3, [pc, #348]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010c6e:	785b      	ldrb	r3, [r3, #1]
 8010c70:	041b      	lsls	r3, r3, #16
 8010c72:	4319      	orrs	r1, r3
 8010c74:	4b55      	ldr	r3, [pc, #340]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010c76:	789b      	ldrb	r3, [r3, #2]
 8010c78:	021b      	lsls	r3, r3, #8
 8010c7a:	430b      	orrs	r3, r1
 8010c7c:	4953      	ldr	r1, [pc, #332]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010c7e:	78c9      	ldrb	r1, [r1, #3]
 8010c80:	430b      	orrs	r3, r1
 8010c82:	021b      	lsls	r3, r3, #8
 8010c84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010c88:	431a      	orrs	r2, r3
 8010c8a:	4b50      	ldr	r3, [pc, #320]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010c8c:	781b      	ldrb	r3, [r3, #0]
 8010c8e:	0619      	lsls	r1, r3, #24
 8010c90:	4b4e      	ldr	r3, [pc, #312]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010c92:	785b      	ldrb	r3, [r3, #1]
 8010c94:	041b      	lsls	r3, r3, #16
 8010c96:	4319      	orrs	r1, r3
 8010c98:	4b4c      	ldr	r3, [pc, #304]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010c9a:	789b      	ldrb	r3, [r3, #2]
 8010c9c:	021b      	lsls	r3, r3, #8
 8010c9e:	430b      	orrs	r3, r1
 8010ca0:	494a      	ldr	r1, [pc, #296]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010ca2:	78c9      	ldrb	r1, [r1, #3]
 8010ca4:	430b      	orrs	r3, r1
 8010ca6:	0a1b      	lsrs	r3, r3, #8
 8010ca8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010cac:	431a      	orrs	r2, r3
 8010cae:	4b47      	ldr	r3, [pc, #284]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	0619      	lsls	r1, r3, #24
 8010cb4:	4b45      	ldr	r3, [pc, #276]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010cb6:	785b      	ldrb	r3, [r3, #1]
 8010cb8:	041b      	lsls	r3, r3, #16
 8010cba:	4319      	orrs	r1, r3
 8010cbc:	4b43      	ldr	r3, [pc, #268]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010cbe:	789b      	ldrb	r3, [r3, #2]
 8010cc0:	021b      	lsls	r3, r3, #8
 8010cc2:	430b      	orrs	r3, r1
 8010cc4:	4941      	ldr	r1, [pc, #260]	; (8010dcc <MX_LWIP_Init+0x264>)
 8010cc6:	78c9      	ldrb	r1, [r1, #3]
 8010cc8:	430b      	orrs	r3, r1
 8010cca:	0e1b      	lsrs	r3, r3, #24
 8010ccc:	4313      	orrs	r3, r2
 8010cce:	4a42      	ldr	r2, [pc, #264]	; (8010dd8 <MX_LWIP_Init+0x270>)
 8010cd0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8010cd2:	4b3f      	ldr	r3, [pc, #252]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010cd4:	781b      	ldrb	r3, [r3, #0]
 8010cd6:	061a      	lsls	r2, r3, #24
 8010cd8:	4b3d      	ldr	r3, [pc, #244]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010cda:	785b      	ldrb	r3, [r3, #1]
 8010cdc:	041b      	lsls	r3, r3, #16
 8010cde:	431a      	orrs	r2, r3
 8010ce0:	4b3b      	ldr	r3, [pc, #236]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010ce2:	789b      	ldrb	r3, [r3, #2]
 8010ce4:	021b      	lsls	r3, r3, #8
 8010ce6:	4313      	orrs	r3, r2
 8010ce8:	4a39      	ldr	r2, [pc, #228]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010cea:	78d2      	ldrb	r2, [r2, #3]
 8010cec:	4313      	orrs	r3, r2
 8010cee:	061a      	lsls	r2, r3, #24
 8010cf0:	4b37      	ldr	r3, [pc, #220]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	0619      	lsls	r1, r3, #24
 8010cf6:	4b36      	ldr	r3, [pc, #216]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010cf8:	785b      	ldrb	r3, [r3, #1]
 8010cfa:	041b      	lsls	r3, r3, #16
 8010cfc:	4319      	orrs	r1, r3
 8010cfe:	4b34      	ldr	r3, [pc, #208]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010d00:	789b      	ldrb	r3, [r3, #2]
 8010d02:	021b      	lsls	r3, r3, #8
 8010d04:	430b      	orrs	r3, r1
 8010d06:	4932      	ldr	r1, [pc, #200]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010d08:	78c9      	ldrb	r1, [r1, #3]
 8010d0a:	430b      	orrs	r3, r1
 8010d0c:	021b      	lsls	r3, r3, #8
 8010d0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010d12:	431a      	orrs	r2, r3
 8010d14:	4b2e      	ldr	r3, [pc, #184]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	0619      	lsls	r1, r3, #24
 8010d1a:	4b2d      	ldr	r3, [pc, #180]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010d1c:	785b      	ldrb	r3, [r3, #1]
 8010d1e:	041b      	lsls	r3, r3, #16
 8010d20:	4319      	orrs	r1, r3
 8010d22:	4b2b      	ldr	r3, [pc, #172]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010d24:	789b      	ldrb	r3, [r3, #2]
 8010d26:	021b      	lsls	r3, r3, #8
 8010d28:	430b      	orrs	r3, r1
 8010d2a:	4929      	ldr	r1, [pc, #164]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010d2c:	78c9      	ldrb	r1, [r1, #3]
 8010d2e:	430b      	orrs	r3, r1
 8010d30:	0a1b      	lsrs	r3, r3, #8
 8010d32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010d36:	431a      	orrs	r2, r3
 8010d38:	4b25      	ldr	r3, [pc, #148]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	0619      	lsls	r1, r3, #24
 8010d3e:	4b24      	ldr	r3, [pc, #144]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010d40:	785b      	ldrb	r3, [r3, #1]
 8010d42:	041b      	lsls	r3, r3, #16
 8010d44:	4319      	orrs	r1, r3
 8010d46:	4b22      	ldr	r3, [pc, #136]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010d48:	789b      	ldrb	r3, [r3, #2]
 8010d4a:	021b      	lsls	r3, r3, #8
 8010d4c:	430b      	orrs	r3, r1
 8010d4e:	4920      	ldr	r1, [pc, #128]	; (8010dd0 <MX_LWIP_Init+0x268>)
 8010d50:	78c9      	ldrb	r1, [r1, #3]
 8010d52:	430b      	orrs	r3, r1
 8010d54:	0e1b      	lsrs	r3, r3, #24
 8010d56:	4313      	orrs	r3, r2
 8010d58:	4a20      	ldr	r2, [pc, #128]	; (8010ddc <MX_LWIP_Init+0x274>)
 8010d5a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8010d5c:	4b20      	ldr	r3, [pc, #128]	; (8010de0 <MX_LWIP_Init+0x278>)
 8010d5e:	9302      	str	r3, [sp, #8]
 8010d60:	4b20      	ldr	r3, [pc, #128]	; (8010de4 <MX_LWIP_Init+0x27c>)
 8010d62:	9301      	str	r3, [sp, #4]
 8010d64:	2300      	movs	r3, #0
 8010d66:	9300      	str	r3, [sp, #0]
 8010d68:	4b1c      	ldr	r3, [pc, #112]	; (8010ddc <MX_LWIP_Init+0x274>)
 8010d6a:	4a1b      	ldr	r2, [pc, #108]	; (8010dd8 <MX_LWIP_Init+0x270>)
 8010d6c:	4919      	ldr	r1, [pc, #100]	; (8010dd4 <MX_LWIP_Init+0x26c>)
 8010d6e:	481e      	ldr	r0, [pc, #120]	; (8010de8 <MX_LWIP_Init+0x280>)
 8010d70:	f006 ff5c 	bl	8017c2c <netif_add>

  /* Registers the default network intcerface */
  netif_set_default(&gnetif);
 8010d74:	481c      	ldr	r0, [pc, #112]	; (8010de8 <MX_LWIP_Init+0x280>)
 8010d76:	f007 f90b 	bl	8017f90 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8010d7a:	4b1b      	ldr	r3, [pc, #108]	; (8010de8 <MX_LWIP_Init+0x280>)
 8010d7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d80:	089b      	lsrs	r3, r3, #2
 8010d82:	f003 0301 	and.w	r3, r3, #1
 8010d86:	b2db      	uxtb	r3, r3
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d003      	beq.n	8010d94 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8010d8c:	4816      	ldr	r0, [pc, #88]	; (8010de8 <MX_LWIP_Init+0x280>)
 8010d8e:	f007 f90f 	bl	8017fb0 <netif_set_up>
 8010d92:	e002      	b.n	8010d9a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8010d94:	4814      	ldr	r0, [pc, #80]	; (8010de8 <MX_LWIP_Init+0x280>)
 8010d96:	f007 f977 	bl	8018088 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8010d9a:	4914      	ldr	r1, [pc, #80]	; (8010dec <MX_LWIP_Init+0x284>)
 8010d9c:	4812      	ldr	r0, [pc, #72]	; (8010de8 <MX_LWIP_Init+0x280>)
 8010d9e:	f007 fa09 	bl	80181b4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8010da2:	4b13      	ldr	r3, [pc, #76]	; (8010df0 <MX_LWIP_Init+0x288>)
 8010da4:	1d3c      	adds	r4, r7, #4
 8010da6:	461d      	mov	r5, r3
 8010da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010dac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010db0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8010db4:	1d3b      	adds	r3, r7, #4
 8010db6:	490c      	ldr	r1, [pc, #48]	; (8010de8 <MX_LWIP_Init+0x280>)
 8010db8:	4618      	mov	r0, r3
 8010dba:	f000 fd45 	bl	8011848 <osThreadCreate>

/* USER CODE BEGIN 3 */
/*Create the Ethernet link Handler Thread*/

/* USER CODE END 3 */
}
 8010dbe:	bf00      	nop
 8010dc0:	3720      	adds	r7, #32
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	20001a58 	.word	0x20001a58
 8010dcc:	20001a5c 	.word	0x20001a5c
 8010dd0:	20001a60 	.word	0x20001a60
 8010dd4:	20001a4c 	.word	0x20001a4c
 8010dd8:	20001a50 	.word	0x20001a50
 8010ddc:	20001a54 	.word	0x20001a54
 8010de0:	08016fa9 	.word	0x08016fa9
 8010de4:	080112ed 	.word	0x080112ed
 8010de8:	20001a18 	.word	0x20001a18
 8010dec:	08010df5 	.word	0x08010df5
 8010df0:	08025284 	.word	0x08025284

08010df4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b083      	sub	sp, #12
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8010dfc:	bf00      	nop
 8010dfe:	370c      	adds	r7, #12
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr

08010e08 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b087      	sub	sp, #28
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8010e1a:	2320      	movs	r3, #32
 8010e1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8010e1e:	f3bf 8f4f 	dsb	sy
}
 8010e22:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8010e24:	e00b      	b.n	8010e3e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8010e26:	4a0d      	ldr	r2, [pc, #52]	; (8010e5c <SCB_InvalidateDCache_by_Addr+0x54>)
 8010e28:	693b      	ldr	r3, [r7, #16]
 8010e2a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	693a      	ldr	r2, [r7, #16]
 8010e32:	4413      	add	r3, r2
 8010e34:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8010e36:	697a      	ldr	r2, [r7, #20]
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	1ad3      	subs	r3, r2, r3
 8010e3c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	dcf0      	bgt.n	8010e26 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8010e44:	f3bf 8f4f 	dsb	sy
}
 8010e48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010e4a:	f3bf 8f6f 	isb	sy
}
 8010e4e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8010e50:	bf00      	nop
 8010e52:	371c      	adds	r7, #28
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr
 8010e5c:	e000ed00 	.word	0xe000ed00

08010e60 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8010e68:	4b04      	ldr	r3, [pc, #16]	; (8010e7c <HAL_ETH_RxCpltCallback+0x1c>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f000 fe67 	bl	8011b40 <osSemaphoreRelease>
}
 8010e72:	bf00      	nop
 8010e74:	3708      	adds	r7, #8
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	200063f0 	.word	0x200063f0

08010e80 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8010e88:	4b04      	ldr	r3, [pc, #16]	; (8010e9c <HAL_ETH_TxCpltCallback+0x1c>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f000 fe57 	bl	8011b40 <osSemaphoreRelease>
}
 8010e92:	bf00      	nop
 8010e94:	3708      	adds	r7, #8
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}
 8010e9a:	bf00      	nop
 8010e9c:	200063f4 	.word	0x200063f4

08010ea0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f7fb fdf5 	bl	800ca98 <HAL_ETH_GetDMAError>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010eb4:	2b80      	cmp	r3, #128	; 0x80
 8010eb6:	d104      	bne.n	8010ec2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8010eb8:	4b04      	ldr	r3, [pc, #16]	; (8010ecc <HAL_ETH_ErrorCallback+0x2c>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f000 fe3f 	bl	8011b40 <osSemaphoreRelease>
  }
}
 8010ec2:	bf00      	nop
 8010ec4:	3708      	adds	r7, #8
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	bf00      	nop
 8010ecc:	200063f0 	.word	0x200063f0

08010ed0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8010ed0:	b5b0      	push	{r4, r5, r7, lr}
 8010ed2:	b0a8      	sub	sp, #160	; 0xa0
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8010eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010eee:	2264      	movs	r2, #100	; 0x64
 8010ef0:	2100      	movs	r1, #0
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f012 fe5c 	bl	8023bb0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8010ef8:	4b85      	ldr	r3, [pc, #532]	; (8011110 <low_level_init+0x240>)
 8010efa:	4a86      	ldr	r2, [pc, #536]	; (8011114 <low_level_init+0x244>)
 8010efc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8010efe:	2300      	movs	r3, #0
 8010f00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8010f04:	2380      	movs	r3, #128	; 0x80
 8010f06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8010f0a:	23e1      	movs	r3, #225	; 0xe1
 8010f0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8010f10:	2300      	movs	r3, #0
 8010f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8010f16:	2300      	movs	r3, #0
 8010f18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8010f22:	4a7b      	ldr	r2, [pc, #492]	; (8011110 <low_level_init+0x240>)
 8010f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f28:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8010f2a:	4b79      	ldr	r3, [pc, #484]	; (8011110 <low_level_init+0x240>)
 8010f2c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8010f30:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8010f32:	4b77      	ldr	r3, [pc, #476]	; (8011110 <low_level_init+0x240>)
 8010f34:	4a78      	ldr	r2, [pc, #480]	; (8011118 <low_level_init+0x248>)
 8010f36:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8010f38:	4b75      	ldr	r3, [pc, #468]	; (8011110 <low_level_init+0x240>)
 8010f3a:	4a78      	ldr	r2, [pc, #480]	; (801111c <low_level_init+0x24c>)
 8010f3c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8010f3e:	4b74      	ldr	r3, [pc, #464]	; (8011110 <low_level_init+0x240>)
 8010f40:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8010f44:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8010f46:	4872      	ldr	r0, [pc, #456]	; (8011110 <low_level_init+0x240>)
 8010f48:	f7fa ff88 	bl	800be5c <HAL_ETH_Init>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8010f52:	2238      	movs	r2, #56	; 0x38
 8010f54:	2100      	movs	r1, #0
 8010f56:	4872      	ldr	r0, [pc, #456]	; (8011120 <low_level_init+0x250>)
 8010f58:	f012 fe2a 	bl	8023bb0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8010f5c:	4b70      	ldr	r3, [pc, #448]	; (8011120 <low_level_init+0x250>)
 8010f5e:	2221      	movs	r2, #33	; 0x21
 8010f60:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8010f62:	4b6f      	ldr	r3, [pc, #444]	; (8011120 <low_level_init+0x250>)
 8010f64:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8010f68:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8010f6a:	4b6d      	ldr	r3, [pc, #436]	; (8011120 <low_level_init+0x250>)
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8010f70:	486c      	ldr	r0, [pc, #432]	; (8011124 <low_level_init+0x254>)
 8010f72:	f006 fd15 	bl	80179a0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2206      	movs	r2, #6
 8010f7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8010f7e:	4b64      	ldr	r3, [pc, #400]	; (8011110 <low_level_init+0x240>)
 8010f80:	685b      	ldr	r3, [r3, #4]
 8010f82:	781a      	ldrb	r2, [r3, #0]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8010f8a:	4b61      	ldr	r3, [pc, #388]	; (8011110 <low_level_init+0x240>)
 8010f8c:	685b      	ldr	r3, [r3, #4]
 8010f8e:	785a      	ldrb	r2, [r3, #1]
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8010f96:	4b5e      	ldr	r3, [pc, #376]	; (8011110 <low_level_init+0x240>)
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	789a      	ldrb	r2, [r3, #2]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8010fa2:	4b5b      	ldr	r3, [pc, #364]	; (8011110 <low_level_init+0x240>)
 8010fa4:	685b      	ldr	r3, [r3, #4]
 8010fa6:	78da      	ldrb	r2, [r3, #3]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8010fae:	4b58      	ldr	r3, [pc, #352]	; (8011110 <low_level_init+0x240>)
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	791a      	ldrb	r2, [r3, #4]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8010fba:	4b55      	ldr	r3, [pc, #340]	; (8011110 <low_level_init+0x240>)
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	795a      	ldrb	r2, [r3, #5]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010fcc:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010fd4:	f043 030a 	orr.w	r3, r3, #10
 8010fd8:	b2da      	uxtb	r2, r3
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8010fe0:	2203      	movs	r2, #3
 8010fe2:	2100      	movs	r1, #0
 8010fe4:	2001      	movs	r0, #1
 8010fe6:	f001 f89b 	bl	8012120 <xQueueGenericCreate>
 8010fea:	4603      	mov	r3, r0
 8010fec:	4a4e      	ldr	r2, [pc, #312]	; (8011128 <low_level_init+0x258>)
 8010fee:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8010ff0:	2203      	movs	r2, #3
 8010ff2:	2100      	movs	r1, #0
 8010ff4:	2001      	movs	r0, #1
 8010ff6:	f001 f893 	bl	8012120 <xQueueGenericCreate>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	4a4b      	ldr	r2, [pc, #300]	; (801112c <low_level_init+0x25c>)
 8010ffe:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8011000:	4b4b      	ldr	r3, [pc, #300]	; (8011130 <low_level_init+0x260>)
 8011002:	f107 0408 	add.w	r4, r7, #8
 8011006:	461d      	mov	r5, r3
 8011008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801100a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801100c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8011014:	f107 0308 	add.w	r3, r7, #8
 8011018:	6879      	ldr	r1, [r7, #4]
 801101a:	4618      	mov	r0, r3
 801101c:	f000 fc14 	bl	8011848 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8011020:	4944      	ldr	r1, [pc, #272]	; (8011134 <low_level_init+0x264>)
 8011022:	4845      	ldr	r0, [pc, #276]	; (8011138 <low_level_init+0x268>)
 8011024:	f7f9 fcc5 	bl	800a9b2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8011028:	4843      	ldr	r0, [pc, #268]	; (8011138 <low_level_init+0x268>)
 801102a:	f7f9 fcf4 	bl	800aa16 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 801102e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8011032:	2b00      	cmp	r3, #0
 8011034:	d165      	bne.n	8011102 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8011036:	4840      	ldr	r0, [pc, #256]	; (8011138 <low_level_init+0x268>)
 8011038:	f7f9 fd95 	bl	800ab66 <LAN8742_GetLinkState>
 801103c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8011040:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011044:	2b01      	cmp	r3, #1
 8011046:	dc06      	bgt.n	8011056 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f007 f883 	bl	8018154 <netif_set_link_down>
      netif_set_down(netif);
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f007 f81a 	bl	8018088 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8011054:	e057      	b.n	8011106 <low_level_init+0x236>
      switch (PHYLinkState)
 8011056:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801105a:	3b02      	subs	r3, #2
 801105c:	2b03      	cmp	r3, #3
 801105e:	d82b      	bhi.n	80110b8 <low_level_init+0x1e8>
 8011060:	a201      	add	r2, pc, #4	; (adr r2, 8011068 <low_level_init+0x198>)
 8011062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011066:	bf00      	nop
 8011068:	08011079 	.word	0x08011079
 801106c:	0801108b 	.word	0x0801108b
 8011070:	0801109b 	.word	0x0801109b
 8011074:	080110ab 	.word	0x080110ab
        duplex = ETH_FULLDUPLEX_MODE;
 8011078:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801107c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8011080:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8011088:	e01f      	b.n	80110ca <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 801108a:	2300      	movs	r3, #0
 801108c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8011090:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8011098:	e017      	b.n	80110ca <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 801109a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801109e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80110a2:	2300      	movs	r3, #0
 80110a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80110a8:	e00f      	b.n	80110ca <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80110aa:	2300      	movs	r3, #0
 80110ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80110b0:	2300      	movs	r3, #0
 80110b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80110b6:	e008      	b.n	80110ca <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80110b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80110bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80110c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80110c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80110c8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80110ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80110ce:	4619      	mov	r1, r3
 80110d0:	480f      	ldr	r0, [pc, #60]	; (8011110 <low_level_init+0x240>)
 80110d2:	f7fb fb87 	bl	800c7e4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80110d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80110da:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 80110dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80110e0:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80110e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80110e6:	4619      	mov	r1, r3
 80110e8:	4809      	ldr	r0, [pc, #36]	; (8011110 <low_level_init+0x240>)
 80110ea:	f7fb fc65 	bl	800c9b8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80110ee:	4808      	ldr	r0, [pc, #32]	; (8011110 <low_level_init+0x240>)
 80110f0:	f7fa ff90 	bl	800c014 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f006 ff5b 	bl	8017fb0 <netif_set_up>
    netif_set_link_up(netif);
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f006 fff6 	bl	80180ec <netif_set_link_up>
}
 8011100:	e001      	b.n	8011106 <low_level_init+0x236>
    Error_Handler();
 8011102:	f7f0 fea3 	bl	8001e4c <Error_Handler>
}
 8011106:	bf00      	nop
 8011108:	37a0      	adds	r7, #160	; 0xa0
 801110a:	46bd      	mov	sp, r7
 801110c:	bdb0      	pop	{r4, r5, r7, pc}
 801110e:	bf00      	nop
 8011110:	200063f8 	.word	0x200063f8
 8011114:	40028000 	.word	0x40028000
 8011118:	20000144 	.word	0x20000144
 801111c:	200000a4 	.word	0x200000a4
 8011120:	200064a8 	.word	0x200064a8
 8011124:	08028858 	.word	0x08028858
 8011128:	200063f0 	.word	0x200063f0
 801112c:	200063f4 	.word	0x200063f4
 8011130:	080252a8 	.word	0x080252a8
 8011134:	20000014 	.word	0x20000014
 8011138:	200064e0 	.word	0x200064e0

0801113c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b092      	sub	sp, #72	; 0x48
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8011146:	2300      	movs	r3, #0
 8011148:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 801114a:	2300      	movs	r3, #0
 801114c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 801114e:	2300      	movs	r3, #0
 8011150:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8011154:	f107 030c 	add.w	r3, r7, #12
 8011158:	2230      	movs	r2, #48	; 0x30
 801115a:	2100      	movs	r1, #0
 801115c:	4618      	mov	r0, r3
 801115e:	f012 fd27 	bl	8023bb0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8011162:	f107 030c 	add.w	r3, r7, #12
 8011166:	2230      	movs	r2, #48	; 0x30
 8011168:	2100      	movs	r1, #0
 801116a:	4618      	mov	r0, r3
 801116c:	f012 fd20 	bl	8023bb0 <memset>

  for(q = p; q != NULL; q = q->next)
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	643b      	str	r3, [r7, #64]	; 0x40
 8011174:	e045      	b.n	8011202 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8011176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011178:	2b03      	cmp	r3, #3
 801117a:	d902      	bls.n	8011182 <low_level_output+0x46>
      return ERR_IF;
 801117c:	f06f 030b 	mvn.w	r3, #11
 8011180:	e065      	b.n	801124e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8011182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011184:	6859      	ldr	r1, [r3, #4]
 8011186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011188:	4613      	mov	r3, r2
 801118a:	005b      	lsls	r3, r3, #1
 801118c:	4413      	add	r3, r2
 801118e:	009b      	lsls	r3, r3, #2
 8011190:	3348      	adds	r3, #72	; 0x48
 8011192:	443b      	add	r3, r7
 8011194:	3b3c      	subs	r3, #60	; 0x3c
 8011196:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8011198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801119a:	895b      	ldrh	r3, [r3, #10]
 801119c:	4619      	mov	r1, r3
 801119e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111a0:	4613      	mov	r3, r2
 80111a2:	005b      	lsls	r3, r3, #1
 80111a4:	4413      	add	r3, r2
 80111a6:	009b      	lsls	r3, r3, #2
 80111a8:	3348      	adds	r3, #72	; 0x48
 80111aa:	443b      	add	r3, r7
 80111ac:	3b38      	subs	r3, #56	; 0x38
 80111ae:	6019      	str	r1, [r3, #0]

    if(i>0)
 80111b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d011      	beq.n	80111da <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80111b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111b8:	1e5a      	subs	r2, r3, #1
 80111ba:	f107 000c 	add.w	r0, r7, #12
 80111be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80111c0:	460b      	mov	r3, r1
 80111c2:	005b      	lsls	r3, r3, #1
 80111c4:	440b      	add	r3, r1
 80111c6:	009b      	lsls	r3, r3, #2
 80111c8:	18c1      	adds	r1, r0, r3
 80111ca:	4613      	mov	r3, r2
 80111cc:	005b      	lsls	r3, r3, #1
 80111ce:	4413      	add	r3, r2
 80111d0:	009b      	lsls	r3, r3, #2
 80111d2:	3348      	adds	r3, #72	; 0x48
 80111d4:	443b      	add	r3, r7
 80111d6:	3b34      	subs	r3, #52	; 0x34
 80111d8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80111da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d109      	bne.n	80111f6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80111e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111e4:	4613      	mov	r3, r2
 80111e6:	005b      	lsls	r3, r3, #1
 80111e8:	4413      	add	r3, r2
 80111ea:	009b      	lsls	r3, r3, #2
 80111ec:	3348      	adds	r3, #72	; 0x48
 80111ee:	443b      	add	r3, r7
 80111f0:	3b34      	subs	r3, #52	; 0x34
 80111f2:	2200      	movs	r2, #0
 80111f4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80111f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111f8:	3301      	adds	r3, #1
 80111fa:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80111fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	643b      	str	r3, [r7, #64]	; 0x40
 8011202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011204:	2b00      	cmp	r3, #0
 8011206:	d1b6      	bne.n	8011176 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	891b      	ldrh	r3, [r3, #8]
 801120c:	461a      	mov	r2, r3
 801120e:	4b12      	ldr	r3, [pc, #72]	; (8011258 <low_level_output+0x11c>)
 8011210:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8011212:	4a11      	ldr	r2, [pc, #68]	; (8011258 <low_level_output+0x11c>)
 8011214:	f107 030c 	add.w	r3, r7, #12
 8011218:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801121a:	4a0f      	ldr	r2, [pc, #60]	; (8011258 <low_level_output+0x11c>)
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8011220:	6838      	ldr	r0, [r7, #0]
 8011222:	f007 fc1b 	bl	8018a5c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8011226:	490c      	ldr	r1, [pc, #48]	; (8011258 <low_level_output+0x11c>)
 8011228:	480c      	ldr	r0, [pc, #48]	; (801125c <low_level_output+0x120>)
 801122a:	f7fa ff81 	bl	800c130 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 801122e:	bf00      	nop
 8011230:	4b0b      	ldr	r3, [pc, #44]	; (8011260 <low_level_output+0x124>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011238:	4618      	mov	r0, r3
 801123a:	f000 fc33 	bl	8011aa4 <osSemaphoreWait>
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d1f5      	bne.n	8011230 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8011244:	4805      	ldr	r0, [pc, #20]	; (801125c <low_level_output+0x120>)
 8011246:	f7fb f907 	bl	800c458 <HAL_ETH_ReleaseTxPacket>

  return errval;
 801124a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801124e:	4618      	mov	r0, r3
 8011250:	3748      	adds	r7, #72	; 0x48
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
 8011256:	bf00      	nop
 8011258:	200064a8 	.word	0x200064a8
 801125c:	200063f8 	.word	0x200063f8
 8011260:	200063f4 	.word	0x200063f4

08011264 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b084      	sub	sp, #16
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801126c:	2300      	movs	r3, #0
 801126e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8011270:	4b07      	ldr	r3, [pc, #28]	; (8011290 <low_level_input+0x2c>)
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d105      	bne.n	8011284 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8011278:	f107 030c 	add.w	r3, r7, #12
 801127c:	4619      	mov	r1, r3
 801127e:	4805      	ldr	r0, [pc, #20]	; (8011294 <low_level_input+0x30>)
 8011280:	f7fa ffb2 	bl	800c1e8 <HAL_ETH_ReadData>
  }

  return p;
 8011284:	68fb      	ldr	r3, [r7, #12]
}
 8011286:	4618      	mov	r0, r3
 8011288:	3710      	adds	r7, #16
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}
 801128e:	bf00      	nop
 8011290:	200063ec 	.word	0x200063ec
 8011294:	200063f8 	.word	0x200063f8

08011298 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b084      	sub	sp, #16
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80112a0:	2300      	movs	r3, #0
 80112a2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80112a8:	4b0f      	ldr	r3, [pc, #60]	; (80112e8 <ethernetif_input+0x50>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80112b0:	4618      	mov	r0, r3
 80112b2:	f000 fbf7 	bl	8011aa4 <osSemaphoreWait>
 80112b6:	4603      	mov	r3, r0
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d1f5      	bne.n	80112a8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80112bc:	68b8      	ldr	r0, [r7, #8]
 80112be:	f7ff ffd1 	bl	8011264 <low_level_input>
 80112c2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d00a      	beq.n	80112e0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	691b      	ldr	r3, [r3, #16]
 80112ce:	68b9      	ldr	r1, [r7, #8]
 80112d0:	68f8      	ldr	r0, [r7, #12]
 80112d2:	4798      	blx	r3
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d002      	beq.n	80112e0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80112da:	68f8      	ldr	r0, [r7, #12]
 80112dc:	f007 fb18 	bl	8018910 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d1ea      	bne.n	80112bc <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80112e6:	e7df      	b.n	80112a8 <ethernetif_input+0x10>
 80112e8:	200063f0 	.word	0x200063f0

080112ec <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d106      	bne.n	8011308 <ethernetif_init+0x1c>
 80112fa:	4b0e      	ldr	r3, [pc, #56]	; (8011334 <ethernetif_init+0x48>)
 80112fc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8011300:	490d      	ldr	r1, [pc, #52]	; (8011338 <ethernetif_init+0x4c>)
 8011302:	480e      	ldr	r0, [pc, #56]	; (801133c <ethernetif_init+0x50>)
 8011304:	f012 fd3c 	bl	8023d80 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2273      	movs	r2, #115	; 0x73
 801130c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2274      	movs	r2, #116	; 0x74
 8011314:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	4a09      	ldr	r2, [pc, #36]	; (8011340 <ethernetif_init+0x54>)
 801131c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	4a08      	ldr	r2, [pc, #32]	; (8011344 <ethernetif_init+0x58>)
 8011322:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f7ff fdd3 	bl	8010ed0 <low_level_init>

  return ERR_OK;
 801132a:	2300      	movs	r3, #0
}
 801132c:	4618      	mov	r0, r3
 801132e:	3708      	adds	r7, #8
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}
 8011334:	080252c4 	.word	0x080252c4
 8011338:	080252e0 	.word	0x080252e0
 801133c:	080252f0 	.word	0x080252f0
 8011340:	080207dd 	.word	0x080207dd
 8011344:	0801113d 	.word	0x0801113d

08011348 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8011354:	68f9      	ldr	r1, [r7, #12]
 8011356:	4809      	ldr	r0, [pc, #36]	; (801137c <pbuf_free_custom+0x34>)
 8011358:	f006 fc12 	bl	8017b80 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 801135c:	4b08      	ldr	r3, [pc, #32]	; (8011380 <pbuf_free_custom+0x38>)
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	2b01      	cmp	r3, #1
 8011362:	d107      	bne.n	8011374 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8011364:	4b06      	ldr	r3, [pc, #24]	; (8011380 <pbuf_free_custom+0x38>)
 8011366:	2200      	movs	r2, #0
 8011368:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 801136a:	4b06      	ldr	r3, [pc, #24]	; (8011384 <pbuf_free_custom+0x3c>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	4618      	mov	r0, r3
 8011370:	f000 fbe6 	bl	8011b40 <osSemaphoreRelease>
  }
}
 8011374:	bf00      	nop
 8011376:	3710      	adds	r7, #16
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}
 801137c:	08028858 	.word	0x08028858
 8011380:	200063ec 	.word	0x200063ec
 8011384:	200063f0 	.word	0x200063f0

08011388 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801138c:	f7f9 fc94 	bl	800acb8 <HAL_GetTick>
 8011390:	4603      	mov	r3, r0
}
 8011392:	4618      	mov	r0, r3
 8011394:	bd80      	pop	{r7, pc}
	...

08011398 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b08e      	sub	sp, #56	; 0x38
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80113a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80113a4:	2200      	movs	r2, #0
 80113a6:	601a      	str	r2, [r3, #0]
 80113a8:	605a      	str	r2, [r3, #4]
 80113aa:	609a      	str	r2, [r3, #8]
 80113ac:	60da      	str	r2, [r3, #12]
 80113ae:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4a52      	ldr	r2, [pc, #328]	; (8011500 <HAL_ETH_MspInit+0x168>)
 80113b6:	4293      	cmp	r3, r2
 80113b8:	f040 809e 	bne.w	80114f8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80113bc:	4b51      	ldr	r3, [pc, #324]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 80113be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113c0:	4a50      	ldr	r2, [pc, #320]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 80113c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80113c6:	6313      	str	r3, [r2, #48]	; 0x30
 80113c8:	4b4e      	ldr	r3, [pc, #312]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 80113ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80113d0:	623b      	str	r3, [r7, #32]
 80113d2:	6a3b      	ldr	r3, [r7, #32]
 80113d4:	4b4b      	ldr	r3, [pc, #300]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 80113d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113d8:	4a4a      	ldr	r2, [pc, #296]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 80113da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80113de:	6313      	str	r3, [r2, #48]	; 0x30
 80113e0:	4b48      	ldr	r3, [pc, #288]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 80113e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80113e8:	61fb      	str	r3, [r7, #28]
 80113ea:	69fb      	ldr	r3, [r7, #28]
 80113ec:	4b45      	ldr	r3, [pc, #276]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 80113ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113f0:	4a44      	ldr	r2, [pc, #272]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 80113f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80113f6:	6313      	str	r3, [r2, #48]	; 0x30
 80113f8:	4b42      	ldr	r3, [pc, #264]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 80113fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011400:	61bb      	str	r3, [r7, #24]
 8011402:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011404:	4b3f      	ldr	r3, [pc, #252]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 8011406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011408:	4a3e      	ldr	r2, [pc, #248]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 801140a:	f043 0304 	orr.w	r3, r3, #4
 801140e:	6313      	str	r3, [r2, #48]	; 0x30
 8011410:	4b3c      	ldr	r3, [pc, #240]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 8011412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011414:	f003 0304 	and.w	r3, r3, #4
 8011418:	617b      	str	r3, [r7, #20]
 801141a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801141c:	4b39      	ldr	r3, [pc, #228]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 801141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011420:	4a38      	ldr	r2, [pc, #224]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 8011422:	f043 0301 	orr.w	r3, r3, #1
 8011426:	6313      	str	r3, [r2, #48]	; 0x30
 8011428:	4b36      	ldr	r3, [pc, #216]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 801142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801142c:	f003 0301 	and.w	r3, r3, #1
 8011430:	613b      	str	r3, [r7, #16]
 8011432:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011434:	4b33      	ldr	r3, [pc, #204]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 8011436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011438:	4a32      	ldr	r2, [pc, #200]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 801143a:	f043 0302 	orr.w	r3, r3, #2
 801143e:	6313      	str	r3, [r2, #48]	; 0x30
 8011440:	4b30      	ldr	r3, [pc, #192]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 8011442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011444:	f003 0302 	and.w	r3, r3, #2
 8011448:	60fb      	str	r3, [r7, #12]
 801144a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801144c:	4b2d      	ldr	r3, [pc, #180]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 801144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011450:	4a2c      	ldr	r2, [pc, #176]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 8011452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011456:	6313      	str	r3, [r2, #48]	; 0x30
 8011458:	4b2a      	ldr	r3, [pc, #168]	; (8011504 <HAL_ETH_MspInit+0x16c>)
 801145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801145c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011460:	60bb      	str	r3, [r7, #8]
 8011462:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8011464:	2332      	movs	r3, #50	; 0x32
 8011466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011468:	2302      	movs	r3, #2
 801146a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801146c:	2300      	movs	r3, #0
 801146e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011470:	2303      	movs	r3, #3
 8011472:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011474:	230b      	movs	r3, #11
 8011476:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801147c:	4619      	mov	r1, r3
 801147e:	4822      	ldr	r0, [pc, #136]	; (8011508 <HAL_ETH_MspInit+0x170>)
 8011480:	f7fb ff1a 	bl	800d2b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8011484:	2386      	movs	r3, #134	; 0x86
 8011486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011488:	2302      	movs	r3, #2
 801148a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801148c:	2300      	movs	r3, #0
 801148e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011490:	2303      	movs	r3, #3
 8011492:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011494:	230b      	movs	r3, #11
 8011496:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801149c:	4619      	mov	r1, r3
 801149e:	481b      	ldr	r0, [pc, #108]	; (801150c <HAL_ETH_MspInit+0x174>)
 80114a0:	f7fb ff0a 	bl	800d2b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80114a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80114a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80114aa:	2302      	movs	r3, #2
 80114ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80114ae:	2300      	movs	r3, #0
 80114b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80114b2:	2303      	movs	r3, #3
 80114b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80114b6:	230b      	movs	r3, #11
 80114b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80114ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114be:	4619      	mov	r1, r3
 80114c0:	4813      	ldr	r0, [pc, #76]	; (8011510 <HAL_ETH_MspInit+0x178>)
 80114c2:	f7fb fef9 	bl	800d2b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80114c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80114ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80114cc:	2302      	movs	r3, #2
 80114ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80114d0:	2300      	movs	r3, #0
 80114d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80114d4:	2303      	movs	r3, #3
 80114d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80114d8:	230b      	movs	r3, #11
 80114da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80114dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114e0:	4619      	mov	r1, r3
 80114e2:	480c      	ldr	r0, [pc, #48]	; (8011514 <HAL_ETH_MspInit+0x17c>)
 80114e4:	f7fb fee8 	bl	800d2b8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80114e8:	2200      	movs	r2, #0
 80114ea:	2105      	movs	r1, #5
 80114ec:	203d      	movs	r0, #61	; 0x3d
 80114ee:	f7fa fbeb 	bl	800bcc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80114f2:	203d      	movs	r0, #61	; 0x3d
 80114f4:	f7fa fc04 	bl	800bd00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80114f8:	bf00      	nop
 80114fa:	3738      	adds	r7, #56	; 0x38
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}
 8011500:	40028000 	.word	0x40028000
 8011504:	40023800 	.word	0x40023800
 8011508:	40020800 	.word	0x40020800
 801150c:	40020000 	.word	0x40020000
 8011510:	40020400 	.word	0x40020400
 8011514:	40021800 	.word	0x40021800

08011518 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801151c:	4802      	ldr	r0, [pc, #8]	; (8011528 <ETH_PHY_IO_Init+0x10>)
 801151e:	f7fb fa65 	bl	800c9ec <HAL_ETH_SetMDIOClockRange>

  return 0;
 8011522:	2300      	movs	r3, #0
}
 8011524:	4618      	mov	r0, r3
 8011526:	bd80      	pop	{r7, pc}
 8011528:	200063f8 	.word	0x200063f8

0801152c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801152c:	b480      	push	{r7}
 801152e:	af00      	add	r7, sp, #0
  return 0;
 8011530:	2300      	movs	r3, #0
}
 8011532:	4618      	mov	r0, r3
 8011534:	46bd      	mov	sp, r7
 8011536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153a:	4770      	bx	lr

0801153c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b084      	sub	sp, #16
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	60b9      	str	r1, [r7, #8]
 8011546:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	68ba      	ldr	r2, [r7, #8]
 801154c:	68f9      	ldr	r1, [r7, #12]
 801154e:	4807      	ldr	r0, [pc, #28]	; (801156c <ETH_PHY_IO_ReadReg+0x30>)
 8011550:	f7fb f8b4 	bl	800c6bc <HAL_ETH_ReadPHYRegister>
 8011554:	4603      	mov	r3, r0
 8011556:	2b00      	cmp	r3, #0
 8011558:	d002      	beq.n	8011560 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801155a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801155e:	e000      	b.n	8011562 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8011560:	2300      	movs	r3, #0
}
 8011562:	4618      	mov	r0, r3
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
 801156a:	bf00      	nop
 801156c:	200063f8 	.word	0x200063f8

08011570 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	60b9      	str	r1, [r7, #8]
 801157a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	68ba      	ldr	r2, [r7, #8]
 8011580:	68f9      	ldr	r1, [r7, #12]
 8011582:	4807      	ldr	r0, [pc, #28]	; (80115a0 <ETH_PHY_IO_WriteReg+0x30>)
 8011584:	f7fb f8e5 	bl	800c752 <HAL_ETH_WritePHYRegister>
 8011588:	4603      	mov	r3, r0
 801158a:	2b00      	cmp	r3, #0
 801158c:	d002      	beq.n	8011594 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801158e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011592:	e000      	b.n	8011596 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8011594:	2300      	movs	r3, #0
}
 8011596:	4618      	mov	r0, r3
 8011598:	3710      	adds	r7, #16
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}
 801159e:	bf00      	nop
 80115a0:	200063f8 	.word	0x200063f8

080115a4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80115a8:	f7f9 fb86 	bl	800acb8 <HAL_GetTick>
 80115ac:	4603      	mov	r3, r0
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	bd80      	pop	{r7, pc}
	...

080115b4 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b0a0      	sub	sp, #128	; 0x80
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80115bc:	f107 0308 	add.w	r3, r7, #8
 80115c0:	2264      	movs	r2, #100	; 0x64
 80115c2:	2100      	movs	r1, #0
 80115c4:	4618      	mov	r0, r3
 80115c6:	f012 faf3 	bl	8023bb0 <memset>
  int32_t PHYLinkState = 0;
 80115ca:	2300      	movs	r3, #0
 80115cc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80115ce:	2300      	movs	r3, #0
 80115d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80115d2:	2300      	movs	r3, #0
 80115d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80115d6:	2300      	movs	r3, #0
 80115d8:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80115de:	4839      	ldr	r0, [pc, #228]	; (80116c4 <ethernet_link_thread+0x110>)
 80115e0:	f7f9 fac1 	bl	800ab66 <LAN8742_GetLinkState>
 80115e4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80115e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80115ec:	089b      	lsrs	r3, r3, #2
 80115ee:	f003 0301 	and.w	r3, r3, #1
 80115f2:	b2db      	uxtb	r3, r3
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d009      	beq.n	801160c <ethernet_link_thread+0x58>
 80115f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	dc06      	bgt.n	801160c <ethernet_link_thread+0x58>
  {
	//Due to no restart_IT point
	///////////////////////
    //HAL_ETH_Stop_IT(&heth);
    //////////////////////
    netif_set_down(netif);
 80115fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011600:	f006 fd42 	bl	8018088 <netif_set_down>
    netif_set_link_down(netif);
 8011604:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011606:	f006 fda5 	bl	8018154 <netif_set_link_down>
 801160a:	e056      	b.n	80116ba <ethernet_link_thread+0x106>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 801160c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801160e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011612:	f003 0304 	and.w	r3, r3, #4
 8011616:	2b00      	cmp	r3, #0
 8011618:	d14f      	bne.n	80116ba <ethernet_link_thread+0x106>
 801161a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801161c:	2b01      	cmp	r3, #1
 801161e:	dd4c      	ble.n	80116ba <ethernet_link_thread+0x106>
  {
    switch (PHYLinkState)
 8011620:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011622:	3b02      	subs	r3, #2
 8011624:	2b03      	cmp	r3, #3
 8011626:	d82b      	bhi.n	8011680 <ethernet_link_thread+0xcc>
 8011628:	a201      	add	r2, pc, #4	; (adr r2, 8011630 <ethernet_link_thread+0x7c>)
 801162a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801162e:	bf00      	nop
 8011630:	08011641 	.word	0x08011641
 8011634:	08011653 	.word	0x08011653
 8011638:	08011663 	.word	0x08011663
 801163c:	08011673 	.word	0x08011673
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8011640:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011644:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8011646:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801164a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801164c:	2301      	movs	r3, #1
 801164e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011650:	e017      	b.n	8011682 <ethernet_link_thread+0xce>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8011652:	2300      	movs	r3, #0
 8011654:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8011656:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801165a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801165c:	2301      	movs	r3, #1
 801165e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011660:	e00f      	b.n	8011682 <ethernet_link_thread+0xce>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8011662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011666:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8011668:	2300      	movs	r3, #0
 801166a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801166c:	2301      	movs	r3, #1
 801166e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011670:	e007      	b.n	8011682 <ethernet_link_thread+0xce>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8011672:	2300      	movs	r3, #0
 8011674:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8011676:	2300      	movs	r3, #0
 8011678:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801167a:	2301      	movs	r3, #1
 801167c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801167e:	e000      	b.n	8011682 <ethernet_link_thread+0xce>
    default:
      break;
 8011680:	bf00      	nop
    }

    if(linkchanged)
 8011682:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011684:	2b00      	cmp	r3, #0
 8011686:	d018      	beq.n	80116ba <ethernet_link_thread+0x106>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8011688:	f107 0308 	add.w	r3, r7, #8
 801168c:	4619      	mov	r1, r3
 801168e:	480e      	ldr	r0, [pc, #56]	; (80116c8 <ethernet_link_thread+0x114>)
 8011690:	f7fb f8a8 	bl	800c7e4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8011694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011696:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8011698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801169a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801169c:	f107 0308 	add.w	r3, r7, #8
 80116a0:	4619      	mov	r1, r3
 80116a2:	4809      	ldr	r0, [pc, #36]	; (80116c8 <ethernet_link_thread+0x114>)
 80116a4:	f7fb f988 	bl	800c9b8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80116a8:	4807      	ldr	r0, [pc, #28]	; (80116c8 <ethernet_link_thread+0x114>)
 80116aa:	f7fa fc53 	bl	800bf54 <HAL_ETH_Start>
      netif_set_up(netif);
 80116ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80116b0:	f006 fc7e 	bl	8017fb0 <netif_set_up>
      netif_set_link_up(netif);
 80116b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80116b6:	f006 fd19 	bl	80180ec <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(1000);
 80116ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80116be:	f000 f90f 	bl	80118e0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80116c2:	e78c      	b.n	80115de <ethernet_link_thread+0x2a>
 80116c4:	200064e0 	.word	0x200064e0
 80116c8:	200063f8 	.word	0x200063f8

080116cc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b086      	sub	sp, #24
 80116d0:	af02      	add	r7, sp, #8
 80116d2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80116d4:	4812      	ldr	r0, [pc, #72]	; (8011720 <HAL_ETH_RxAllocateCallback+0x54>)
 80116d6:	f006 f9df 	bl	8017a98 <memp_malloc_pool>
 80116da:	60f8      	str	r0, [r7, #12]
  if (p)
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d014      	beq.n	801170c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	f103 0220 	add.w	r2, r3, #32
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	4a0d      	ldr	r2, [pc, #52]	; (8011724 <HAL_ETH_RxAllocateCallback+0x58>)
 80116f0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80116fa:	9201      	str	r2, [sp, #4]
 80116fc:	9300      	str	r3, [sp, #0]
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	2241      	movs	r2, #65	; 0x41
 8011702:	2100      	movs	r1, #0
 8011704:	2000      	movs	r0, #0
 8011706:	f006 ff49 	bl	801859c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 801170a:	e005      	b.n	8011718 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 801170c:	4b06      	ldr	r3, [pc, #24]	; (8011728 <HAL_ETH_RxAllocateCallback+0x5c>)
 801170e:	2201      	movs	r2, #1
 8011710:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2200      	movs	r2, #0
 8011716:	601a      	str	r2, [r3, #0]
}
 8011718:	bf00      	nop
 801171a:	3710      	adds	r7, #16
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}
 8011720:	08028858 	.word	0x08028858
 8011724:	08011349 	.word	0x08011349
 8011728:	200063ec 	.word	0x200063ec

0801172c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b088      	sub	sp, #32
 8011730:	af00      	add	r7, sp, #0
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	60b9      	str	r1, [r7, #8]
 8011736:	607a      	str	r2, [r7, #4]
 8011738:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011742:	2300      	movs	r3, #0
 8011744:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	3b20      	subs	r3, #32
 801174a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	2200      	movs	r2, #0
 8011750:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8011752:	69fb      	ldr	r3, [r7, #28]
 8011754:	2200      	movs	r2, #0
 8011756:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8011758:	69fb      	ldr	r3, [r7, #28]
 801175a:	887a      	ldrh	r2, [r7, #2]
 801175c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 801175e:	69bb      	ldr	r3, [r7, #24]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d103      	bne.n	801176e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	69fa      	ldr	r2, [r7, #28]
 801176a:	601a      	str	r2, [r3, #0]
 801176c:	e003      	b.n	8011776 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	69fa      	ldr	r2, [r7, #28]
 8011774:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	69fa      	ldr	r2, [r7, #28]
 801177a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 801177c:	69bb      	ldr	r3, [r7, #24]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	61fb      	str	r3, [r7, #28]
 8011782:	e009      	b.n	8011798 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8011784:	69fb      	ldr	r3, [r7, #28]
 8011786:	891a      	ldrh	r2, [r3, #8]
 8011788:	887b      	ldrh	r3, [r7, #2]
 801178a:	4413      	add	r3, r2
 801178c:	b29a      	uxth	r2, r3
 801178e:	69fb      	ldr	r3, [r7, #28]
 8011790:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8011792:	69fb      	ldr	r3, [r7, #28]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	61fb      	str	r3, [r7, #28]
 8011798:	69fb      	ldr	r3, [r7, #28]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d1f2      	bne.n	8011784 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 801179e:	887b      	ldrh	r3, [r7, #2]
 80117a0:	4619      	mov	r1, r3
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f7ff fb30 	bl	8010e08 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80117a8:	bf00      	nop
 80117aa:	3720      	adds	r7, #32
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}

080117b0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f007 f8a9 	bl	8018910 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80117be:	bf00      	nop
 80117c0:	3708      	adds	r7, #8
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}

080117c6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80117c6:	b480      	push	{r7}
 80117c8:	b085      	sub	sp, #20
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	4603      	mov	r3, r0
 80117ce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80117d0:	2300      	movs	r3, #0
 80117d2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80117d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117d8:	2b84      	cmp	r3, #132	; 0x84
 80117da:	d005      	beq.n	80117e8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80117dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	4413      	add	r3, r2
 80117e4:	3303      	adds	r3, #3
 80117e6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80117e8:	68fb      	ldr	r3, [r7, #12]
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3714      	adds	r7, #20
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr

080117f6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80117f6:	b480      	push	{r7}
 80117f8:	b083      	sub	sp, #12
 80117fa:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80117fc:	f3ef 8305 	mrs	r3, IPSR
 8011800:	607b      	str	r3, [r7, #4]
  return(result);
 8011802:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011804:	2b00      	cmp	r3, #0
 8011806:	bf14      	ite	ne
 8011808:	2301      	movne	r3, #1
 801180a:	2300      	moveq	r3, #0
 801180c:	b2db      	uxtb	r3, r3
}
 801180e:	4618      	mov	r0, r3
 8011810:	370c      	adds	r7, #12
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr

0801181a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801181a:	b580      	push	{r7, lr}
 801181c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801181e:	f001 fe9f 	bl	8013560 <vTaskStartScheduler>
  
  return osOK;
 8011822:	2300      	movs	r3, #0
}
 8011824:	4618      	mov	r0, r3
 8011826:	bd80      	pop	{r7, pc}

08011828 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801182c:	f7ff ffe3 	bl	80117f6 <inHandlerMode>
 8011830:	4603      	mov	r3, r0
 8011832:	2b00      	cmp	r3, #0
 8011834:	d003      	beq.n	801183e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8011836:	f001 ffbd 	bl	80137b4 <xTaskGetTickCountFromISR>
 801183a:	4603      	mov	r3, r0
 801183c:	e002      	b.n	8011844 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801183e:	f001 ffa9 	bl	8013794 <xTaskGetTickCount>
 8011842:	4603      	mov	r3, r0
  }
}
 8011844:	4618      	mov	r0, r3
 8011846:	bd80      	pop	{r7, pc}

08011848 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801184a:	b089      	sub	sp, #36	; 0x24
 801184c:	af04      	add	r7, sp, #16
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	695b      	ldr	r3, [r3, #20]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d020      	beq.n	801189c <osThreadCreate+0x54>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	699b      	ldr	r3, [r3, #24]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d01c      	beq.n	801189c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	685c      	ldr	r4, [r3, #4]
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681d      	ldr	r5, [r3, #0]
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	691e      	ldr	r6, [r3, #16]
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011874:	4618      	mov	r0, r3
 8011876:	f7ff ffa6 	bl	80117c6 <makeFreeRtosPriority>
 801187a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	695b      	ldr	r3, [r3, #20]
 8011880:	687a      	ldr	r2, [r7, #4]
 8011882:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011884:	9202      	str	r2, [sp, #8]
 8011886:	9301      	str	r3, [sp, #4]
 8011888:	9100      	str	r1, [sp, #0]
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	4632      	mov	r2, r6
 801188e:	4629      	mov	r1, r5
 8011890:	4620      	mov	r0, r4
 8011892:	f001 fb67 	bl	8012f64 <xTaskCreateStatic>
 8011896:	4603      	mov	r3, r0
 8011898:	60fb      	str	r3, [r7, #12]
 801189a:	e01c      	b.n	80118d6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	685c      	ldr	r4, [r3, #4]
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80118a8:	b29e      	uxth	r6, r3
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7ff ff88 	bl	80117c6 <makeFreeRtosPriority>
 80118b6:	4602      	mov	r2, r0
 80118b8:	f107 030c 	add.w	r3, r7, #12
 80118bc:	9301      	str	r3, [sp, #4]
 80118be:	9200      	str	r2, [sp, #0]
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	4632      	mov	r2, r6
 80118c4:	4629      	mov	r1, r5
 80118c6:	4620      	mov	r0, r4
 80118c8:	f001 fbaf 	bl	801302a <xTaskCreate>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b01      	cmp	r3, #1
 80118d0:	d001      	beq.n	80118d6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80118d2:	2300      	movs	r3, #0
 80118d4:	e000      	b.n	80118d8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80118d6:	68fb      	ldr	r3, [r7, #12]
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3714      	adds	r7, #20
 80118dc:	46bd      	mov	sp, r7
 80118de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080118e0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d001      	beq.n	80118f6 <osDelay+0x16>
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	e000      	b.n	80118f8 <osDelay+0x18>
 80118f6:	2301      	movs	r3, #1
 80118f8:	4618      	mov	r0, r3
 80118fa:	f001 fdfb 	bl	80134f4 <vTaskDelay>
  
  return osOK;
 80118fe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011900:	4618      	mov	r0, r3
 8011902:	3710      	adds	r7, #16
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}

08011908 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d007      	beq.n	8011928 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	4619      	mov	r1, r3
 801191e:	2001      	movs	r0, #1
 8011920:	f000 fc91 	bl	8012246 <xQueueCreateMutexStatic>
 8011924:	4603      	mov	r3, r0
 8011926:	e003      	b.n	8011930 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011928:	2001      	movs	r0, #1
 801192a:	f000 fc74 	bl	8012216 <xQueueCreateMutex>
 801192e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011930:	4618      	mov	r0, r3
 8011932:	3708      	adds	r7, #8
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b084      	sub	sp, #16
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011942:	2300      	movs	r3, #0
 8011944:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d101      	bne.n	8011950 <osMutexWait+0x18>
    return osErrorParameter;
 801194c:	2380      	movs	r3, #128	; 0x80
 801194e:	e03a      	b.n	80119c6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011950:	2300      	movs	r3, #0
 8011952:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801195a:	d103      	bne.n	8011964 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 801195c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011960:	60fb      	str	r3, [r7, #12]
 8011962:	e009      	b.n	8011978 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d006      	beq.n	8011978 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d101      	bne.n	8011978 <osMutexWait+0x40>
      ticks = 1;
 8011974:	2301      	movs	r3, #1
 8011976:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011978:	f7ff ff3d 	bl	80117f6 <inHandlerMode>
 801197c:	4603      	mov	r3, r0
 801197e:	2b00      	cmp	r3, #0
 8011980:	d017      	beq.n	80119b2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011982:	f107 0308 	add.w	r3, r7, #8
 8011986:	461a      	mov	r2, r3
 8011988:	2100      	movs	r1, #0
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f001 f8ac 	bl	8012ae8 <xQueueReceiveFromISR>
 8011990:	4603      	mov	r3, r0
 8011992:	2b01      	cmp	r3, #1
 8011994:	d001      	beq.n	801199a <osMutexWait+0x62>
      return osErrorOS;
 8011996:	23ff      	movs	r3, #255	; 0xff
 8011998:	e015      	b.n	80119c6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801199a:	68bb      	ldr	r3, [r7, #8]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d011      	beq.n	80119c4 <osMutexWait+0x8c>
 80119a0:	4b0b      	ldr	r3, [pc, #44]	; (80119d0 <osMutexWait+0x98>)
 80119a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119a6:	601a      	str	r2, [r3, #0]
 80119a8:	f3bf 8f4f 	dsb	sy
 80119ac:	f3bf 8f6f 	isb	sy
 80119b0:	e008      	b.n	80119c4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80119b2:	68f9      	ldr	r1, [r7, #12]
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f000 ff83 	bl	80128c0 <xQueueSemaphoreTake>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b01      	cmp	r3, #1
 80119be:	d001      	beq.n	80119c4 <osMutexWait+0x8c>
    return osErrorOS;
 80119c0:	23ff      	movs	r3, #255	; 0xff
 80119c2:	e000      	b.n	80119c6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80119c4:	2300      	movs	r3, #0
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3710      	adds	r7, #16
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}
 80119ce:	bf00      	nop
 80119d0:	e000ed04 	.word	0xe000ed04

080119d4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b084      	sub	sp, #16
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80119dc:	2300      	movs	r3, #0
 80119de:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80119e0:	2300      	movs	r3, #0
 80119e2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80119e4:	f7ff ff07 	bl	80117f6 <inHandlerMode>
 80119e8:	4603      	mov	r3, r0
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d016      	beq.n	8011a1c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80119ee:	f107 0308 	add.w	r3, r7, #8
 80119f2:	4619      	mov	r1, r3
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f000 fde7 	bl	80125c8 <xQueueGiveFromISR>
 80119fa:	4603      	mov	r3, r0
 80119fc:	2b01      	cmp	r3, #1
 80119fe:	d001      	beq.n	8011a04 <osMutexRelease+0x30>
      return osErrorOS;
 8011a00:	23ff      	movs	r3, #255	; 0xff
 8011a02:	e017      	b.n	8011a34 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d013      	beq.n	8011a32 <osMutexRelease+0x5e>
 8011a0a:	4b0c      	ldr	r3, [pc, #48]	; (8011a3c <osMutexRelease+0x68>)
 8011a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a10:	601a      	str	r2, [r3, #0]
 8011a12:	f3bf 8f4f 	dsb	sy
 8011a16:	f3bf 8f6f 	isb	sy
 8011a1a:	e00a      	b.n	8011a32 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	2200      	movs	r2, #0
 8011a20:	2100      	movs	r1, #0
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 fc2a 	bl	801227c <xQueueGenericSend>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	2b01      	cmp	r3, #1
 8011a2c:	d001      	beq.n	8011a32 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011a2e:	23ff      	movs	r3, #255	; 0xff
 8011a30:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8011a32:	68fb      	ldr	r3, [r7, #12]
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	3710      	adds	r7, #16
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}
 8011a3c:	e000ed04 	.word	0xe000ed04

08011a40 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b086      	sub	sp, #24
 8011a44:	af02      	add	r7, sp, #8
 8011a46:	6078      	str	r0, [r7, #4]
 8011a48:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d00f      	beq.n	8011a72 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d10a      	bne.n	8011a6e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	2203      	movs	r2, #3
 8011a5e:	9200      	str	r2, [sp, #0]
 8011a60:	2200      	movs	r2, #0
 8011a62:	2100      	movs	r1, #0
 8011a64:	2001      	movs	r0, #1
 8011a66:	f000 fad9 	bl	801201c <xQueueGenericCreateStatic>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	e016      	b.n	8011a9c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	e014      	b.n	8011a9c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8011a72:	683b      	ldr	r3, [r7, #0]
 8011a74:	2b01      	cmp	r3, #1
 8011a76:	d110      	bne.n	8011a9a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8011a78:	2203      	movs	r2, #3
 8011a7a:	2100      	movs	r1, #0
 8011a7c:	2001      	movs	r0, #1
 8011a7e:	f000 fb4f 	bl	8012120 <xQueueGenericCreate>
 8011a82:	60f8      	str	r0, [r7, #12]
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d005      	beq.n	8011a96 <osSemaphoreCreate+0x56>
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	2100      	movs	r1, #0
 8011a90:	68f8      	ldr	r0, [r7, #12]
 8011a92:	f000 fbf3 	bl	801227c <xQueueGenericSend>
      return sema;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	e000      	b.n	8011a9c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8011a9a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3710      	adds	r7, #16
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011aae:	2300      	movs	r3, #0
 8011ab0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d101      	bne.n	8011abc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011ab8:	2380      	movs	r3, #128	; 0x80
 8011aba:	e03a      	b.n	8011b32 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011abc:	2300      	movs	r3, #0
 8011abe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ac6:	d103      	bne.n	8011ad0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011acc:	60fb      	str	r3, [r7, #12]
 8011ace:	e009      	b.n	8011ae4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d006      	beq.n	8011ae4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d101      	bne.n	8011ae4 <osSemaphoreWait+0x40>
      ticks = 1;
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011ae4:	f7ff fe87 	bl	80117f6 <inHandlerMode>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d017      	beq.n	8011b1e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011aee:	f107 0308 	add.w	r3, r7, #8
 8011af2:	461a      	mov	r2, r3
 8011af4:	2100      	movs	r1, #0
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f000 fff6 	bl	8012ae8 <xQueueReceiveFromISR>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b01      	cmp	r3, #1
 8011b00:	d001      	beq.n	8011b06 <osSemaphoreWait+0x62>
      return osErrorOS;
 8011b02:	23ff      	movs	r3, #255	; 0xff
 8011b04:	e015      	b.n	8011b32 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d011      	beq.n	8011b30 <osSemaphoreWait+0x8c>
 8011b0c:	4b0b      	ldr	r3, [pc, #44]	; (8011b3c <osSemaphoreWait+0x98>)
 8011b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b12:	601a      	str	r2, [r3, #0]
 8011b14:	f3bf 8f4f 	dsb	sy
 8011b18:	f3bf 8f6f 	isb	sy
 8011b1c:	e008      	b.n	8011b30 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011b1e:	68f9      	ldr	r1, [r7, #12]
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f000 fecd 	bl	80128c0 <xQueueSemaphoreTake>
 8011b26:	4603      	mov	r3, r0
 8011b28:	2b01      	cmp	r3, #1
 8011b2a:	d001      	beq.n	8011b30 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011b2c:	23ff      	movs	r3, #255	; 0xff
 8011b2e:	e000      	b.n	8011b32 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011b30:	2300      	movs	r3, #0
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3710      	adds	r7, #16
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}
 8011b3a:	bf00      	nop
 8011b3c:	e000ed04 	.word	0xe000ed04

08011b40 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b084      	sub	sp, #16
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011b50:	f7ff fe51 	bl	80117f6 <inHandlerMode>
 8011b54:	4603      	mov	r3, r0
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d016      	beq.n	8011b88 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011b5a:	f107 0308 	add.w	r3, r7, #8
 8011b5e:	4619      	mov	r1, r3
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f000 fd31 	bl	80125c8 <xQueueGiveFromISR>
 8011b66:	4603      	mov	r3, r0
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d001      	beq.n	8011b70 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011b6c:	23ff      	movs	r3, #255	; 0xff
 8011b6e:	e017      	b.n	8011ba0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d013      	beq.n	8011b9e <osSemaphoreRelease+0x5e>
 8011b76:	4b0c      	ldr	r3, [pc, #48]	; (8011ba8 <osSemaphoreRelease+0x68>)
 8011b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b7c:	601a      	str	r2, [r3, #0]
 8011b7e:	f3bf 8f4f 	dsb	sy
 8011b82:	f3bf 8f6f 	isb	sy
 8011b86:	e00a      	b.n	8011b9e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011b88:	2300      	movs	r3, #0
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f000 fb74 	bl	801227c <xQueueGenericSend>
 8011b94:	4603      	mov	r3, r0
 8011b96:	2b01      	cmp	r3, #1
 8011b98:	d001      	beq.n	8011b9e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011b9a:	23ff      	movs	r3, #255	; 0xff
 8011b9c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3710      	adds	r7, #16
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	e000ed04 	.word	0xe000ed04

08011bac <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011bb4:	f7ff fe1f 	bl	80117f6 <inHandlerMode>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d001      	beq.n	8011bc2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8011bbe:	2382      	movs	r3, #130	; 0x82
 8011bc0:	e003      	b.n	8011bca <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f001 f856 	bl	8012c74 <vQueueDelete>

  return osOK; 
 8011bc8:	2300      	movs	r3, #0
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3708      	adds	r7, #8
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}

08011bd2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011bd2:	b590      	push	{r4, r7, lr}
 8011bd4:	b085      	sub	sp, #20
 8011bd6:	af02      	add	r7, sp, #8
 8011bd8:	6078      	str	r0, [r7, #4]
 8011bda:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	689b      	ldr	r3, [r3, #8]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d011      	beq.n	8011c08 <osMessageCreate+0x36>
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	68db      	ldr	r3, [r3, #12]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d00d      	beq.n	8011c08 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	6818      	ldr	r0, [r3, #0]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	6859      	ldr	r1, [r3, #4]
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	689a      	ldr	r2, [r3, #8]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	68db      	ldr	r3, [r3, #12]
 8011bfc:	2400      	movs	r4, #0
 8011bfe:	9400      	str	r4, [sp, #0]
 8011c00:	f000 fa0c 	bl	801201c <xQueueGenericCreateStatic>
 8011c04:	4603      	mov	r3, r0
 8011c06:	e008      	b.n	8011c1a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6818      	ldr	r0, [r3, #0]
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	2200      	movs	r2, #0
 8011c12:	4619      	mov	r1, r3
 8011c14:	f000 fa84 	bl	8012120 <xQueueGenericCreate>
 8011c18:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	370c      	adds	r7, #12
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd90      	pop	{r4, r7, pc}
	...

08011c24 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b086      	sub	sp, #24
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	60f8      	str	r0, [r7, #12]
 8011c2c:	60b9      	str	r1, [r7, #8]
 8011c2e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011c30:	2300      	movs	r3, #0
 8011c32:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d101      	bne.n	8011c42 <osMessagePut+0x1e>
    ticks = 1;
 8011c3e:	2301      	movs	r3, #1
 8011c40:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8011c42:	f7ff fdd8 	bl	80117f6 <inHandlerMode>
 8011c46:	4603      	mov	r3, r0
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d018      	beq.n	8011c7e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011c4c:	f107 0210 	add.w	r2, r7, #16
 8011c50:	f107 0108 	add.w	r1, r7, #8
 8011c54:	2300      	movs	r3, #0
 8011c56:	68f8      	ldr	r0, [r7, #12]
 8011c58:	f000 fc16 	bl	8012488 <xQueueGenericSendFromISR>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	2b01      	cmp	r3, #1
 8011c60:	d001      	beq.n	8011c66 <osMessagePut+0x42>
      return osErrorOS;
 8011c62:	23ff      	movs	r3, #255	; 0xff
 8011c64:	e018      	b.n	8011c98 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d014      	beq.n	8011c96 <osMessagePut+0x72>
 8011c6c:	4b0c      	ldr	r3, [pc, #48]	; (8011ca0 <osMessagePut+0x7c>)
 8011c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c72:	601a      	str	r2, [r3, #0]
 8011c74:	f3bf 8f4f 	dsb	sy
 8011c78:	f3bf 8f6f 	isb	sy
 8011c7c:	e00b      	b.n	8011c96 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011c7e:	f107 0108 	add.w	r1, r7, #8
 8011c82:	2300      	movs	r3, #0
 8011c84:	697a      	ldr	r2, [r7, #20]
 8011c86:	68f8      	ldr	r0, [r7, #12]
 8011c88:	f000 faf8 	bl	801227c <xQueueGenericSend>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	2b01      	cmp	r3, #1
 8011c90:	d001      	beq.n	8011c96 <osMessagePut+0x72>
      return osErrorOS;
 8011c92:	23ff      	movs	r3, #255	; 0xff
 8011c94:	e000      	b.n	8011c98 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011c96:	2300      	movs	r3, #0
}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3718      	adds	r7, #24
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}
 8011ca0:	e000ed04 	.word	0xe000ed04

08011ca4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011ca4:	b590      	push	{r4, r7, lr}
 8011ca6:	b08b      	sub	sp, #44	; 0x2c
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	60f8      	str	r0, [r7, #12]
 8011cac:	60b9      	str	r1, [r7, #8]
 8011cae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d10a      	bne.n	8011cd4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011cbe:	2380      	movs	r3, #128	; 0x80
 8011cc0:	617b      	str	r3, [r7, #20]
    return event;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	461c      	mov	r4, r3
 8011cc6:	f107 0314 	add.w	r3, r7, #20
 8011cca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011cce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011cd2:	e054      	b.n	8011d7e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ce2:	d103      	bne.n	8011cec <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8011cea:	e009      	b.n	8011d00 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d006      	beq.n	8011d00 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8011cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d101      	bne.n	8011d00 <osMessageGet+0x5c>
      ticks = 1;
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011d00:	f7ff fd79 	bl	80117f6 <inHandlerMode>
 8011d04:	4603      	mov	r3, r0
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d01c      	beq.n	8011d44 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8011d0a:	f107 0220 	add.w	r2, r7, #32
 8011d0e:	f107 0314 	add.w	r3, r7, #20
 8011d12:	3304      	adds	r3, #4
 8011d14:	4619      	mov	r1, r3
 8011d16:	68b8      	ldr	r0, [r7, #8]
 8011d18:	f000 fee6 	bl	8012ae8 <xQueueReceiveFromISR>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	2b01      	cmp	r3, #1
 8011d20:	d102      	bne.n	8011d28 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8011d22:	2310      	movs	r3, #16
 8011d24:	617b      	str	r3, [r7, #20]
 8011d26:	e001      	b.n	8011d2c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011d2c:	6a3b      	ldr	r3, [r7, #32]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d01d      	beq.n	8011d6e <osMessageGet+0xca>
 8011d32:	4b15      	ldr	r3, [pc, #84]	; (8011d88 <osMessageGet+0xe4>)
 8011d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d38:	601a      	str	r2, [r3, #0]
 8011d3a:	f3bf 8f4f 	dsb	sy
 8011d3e:	f3bf 8f6f 	isb	sy
 8011d42:	e014      	b.n	8011d6e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011d44:	f107 0314 	add.w	r3, r7, #20
 8011d48:	3304      	adds	r3, #4
 8011d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d4c:	4619      	mov	r1, r3
 8011d4e:	68b8      	ldr	r0, [r7, #8]
 8011d50:	f000 fcd0 	bl	80126f4 <xQueueReceive>
 8011d54:	4603      	mov	r3, r0
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d102      	bne.n	8011d60 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011d5a:	2310      	movs	r3, #16
 8011d5c:	617b      	str	r3, [r7, #20]
 8011d5e:	e006      	b.n	8011d6e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d101      	bne.n	8011d6a <osMessageGet+0xc6>
 8011d66:	2300      	movs	r3, #0
 8011d68:	e000      	b.n	8011d6c <osMessageGet+0xc8>
 8011d6a:	2340      	movs	r3, #64	; 0x40
 8011d6c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	461c      	mov	r4, r3
 8011d72:	f107 0314 	add.w	r3, r7, #20
 8011d76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011d7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011d7e:	68f8      	ldr	r0, [r7, #12]
 8011d80:	372c      	adds	r7, #44	; 0x2c
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd90      	pop	{r4, r7, pc}
 8011d86:	bf00      	nop
 8011d88:	e000ed04 	.word	0xe000ed04

08011d8c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b082      	sub	sp, #8
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011d94:	f7ff fd2f 	bl	80117f6 <inHandlerMode>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d004      	beq.n	8011da8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f000 ff48 	bl	8012c34 <uxQueueMessagesWaitingFromISR>
 8011da4:	4603      	mov	r3, r0
 8011da6:	e003      	b.n	8011db0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f000 ff23 	bl	8012bf4 <uxQueueMessagesWaiting>
 8011dae:	4603      	mov	r3, r0
  }
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3708      	adds	r7, #8
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011dc0:	f7ff fd19 	bl	80117f6 <inHandlerMode>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d001      	beq.n	8011dce <osMessageDelete+0x16>
    return osErrorISR;
 8011dca:	2382      	movs	r3, #130	; 0x82
 8011dcc:	e003      	b.n	8011dd6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f000 ff50 	bl	8012c74 <vQueueDelete>

  return osOK; 
 8011dd4:	2300      	movs	r3, #0
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3708      	adds	r7, #8
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}

08011dde <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011dde:	b480      	push	{r7}
 8011de0:	b083      	sub	sp, #12
 8011de2:	af00      	add	r7, sp, #0
 8011de4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f103 0208 	add.w	r2, r3, #8
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011df6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f103 0208 	add.w	r2, r3, #8
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	f103 0208 	add.w	r2, r3, #8
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011e12:	bf00      	nop
 8011e14:	370c      	adds	r7, #12
 8011e16:	46bd      	mov	sp, r7
 8011e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1c:	4770      	bx	lr

08011e1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011e1e:	b480      	push	{r7}
 8011e20:	b083      	sub	sp, #12
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011e2c:	bf00      	nop
 8011e2e:	370c      	adds	r7, #12
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr

08011e38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011e38:	b480      	push	{r7}
 8011e3a:	b085      	sub	sp, #20
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	685b      	ldr	r3, [r3, #4]
 8011e46:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	68fa      	ldr	r2, [r7, #12]
 8011e4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	689a      	ldr	r2, [r3, #8]
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	689b      	ldr	r3, [r3, #8]
 8011e5a:	683a      	ldr	r2, [r7, #0]
 8011e5c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	683a      	ldr	r2, [r7, #0]
 8011e62:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	1c5a      	adds	r2, r3, #1
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	601a      	str	r2, [r3, #0]
}
 8011e74:	bf00      	nop
 8011e76:	3714      	adds	r7, #20
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7e:	4770      	bx	lr

08011e80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011e80:	b480      	push	{r7}
 8011e82:	b085      	sub	sp, #20
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e96:	d103      	bne.n	8011ea0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	691b      	ldr	r3, [r3, #16]
 8011e9c:	60fb      	str	r3, [r7, #12]
 8011e9e:	e00c      	b.n	8011eba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	3308      	adds	r3, #8
 8011ea4:	60fb      	str	r3, [r7, #12]
 8011ea6:	e002      	b.n	8011eae <vListInsert+0x2e>
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	685b      	ldr	r3, [r3, #4]
 8011eac:	60fb      	str	r3, [r7, #12]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	68ba      	ldr	r2, [r7, #8]
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d2f6      	bcs.n	8011ea8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	685a      	ldr	r2, [r3, #4]
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	683a      	ldr	r2, [r7, #0]
 8011ec8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	68fa      	ldr	r2, [r7, #12]
 8011ece:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	683a      	ldr	r2, [r7, #0]
 8011ed4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	687a      	ldr	r2, [r7, #4]
 8011eda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	1c5a      	adds	r2, r3, #1
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	601a      	str	r2, [r3, #0]
}
 8011ee6:	bf00      	nop
 8011ee8:	3714      	adds	r7, #20
 8011eea:	46bd      	mov	sp, r7
 8011eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef0:	4770      	bx	lr

08011ef2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011ef2:	b480      	push	{r7}
 8011ef4:	b085      	sub	sp, #20
 8011ef6:	af00      	add	r7, sp, #0
 8011ef8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	691b      	ldr	r3, [r3, #16]
 8011efe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	685b      	ldr	r3, [r3, #4]
 8011f04:	687a      	ldr	r2, [r7, #4]
 8011f06:	6892      	ldr	r2, [r2, #8]
 8011f08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	689b      	ldr	r3, [r3, #8]
 8011f0e:	687a      	ldr	r2, [r7, #4]
 8011f10:	6852      	ldr	r2, [r2, #4]
 8011f12:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	685b      	ldr	r3, [r3, #4]
 8011f18:	687a      	ldr	r2, [r7, #4]
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d103      	bne.n	8011f26 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	689a      	ldr	r2, [r3, #8]
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	2200      	movs	r2, #0
 8011f2a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	1e5a      	subs	r2, r3, #1
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	681b      	ldr	r3, [r3, #0]
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3714      	adds	r7, #20
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f44:	4770      	bx	lr
	...

08011f48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b084      	sub	sp, #16
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d10c      	bne.n	8011f76 <xQueueGenericReset+0x2e>
	__asm volatile
 8011f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f60:	b672      	cpsid	i
 8011f62:	f383 8811 	msr	BASEPRI, r3
 8011f66:	f3bf 8f6f 	isb	sy
 8011f6a:	f3bf 8f4f 	dsb	sy
 8011f6e:	b662      	cpsie	i
 8011f70:	60bb      	str	r3, [r7, #8]
}
 8011f72:	bf00      	nop
 8011f74:	e7fe      	b.n	8011f74 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8011f76:	f002 fa89 	bl	801448c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	681a      	ldr	r2, [r3, #0]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f82:	68f9      	ldr	r1, [r7, #12]
 8011f84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011f86:	fb01 f303 	mul.w	r3, r1, r3
 8011f8a:	441a      	add	r2, r3
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2200      	movs	r2, #0
 8011f94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	681a      	ldr	r2, [r3, #0]
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681a      	ldr	r2, [r3, #0]
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fa6:	3b01      	subs	r3, #1
 8011fa8:	68f9      	ldr	r1, [r7, #12]
 8011faa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011fac:	fb01 f303 	mul.w	r3, r1, r3
 8011fb0:	441a      	add	r2, r3
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	22ff      	movs	r2, #255	; 0xff
 8011fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	22ff      	movs	r2, #255	; 0xff
 8011fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d114      	bne.n	8011ff6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	691b      	ldr	r3, [r3, #16]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d01a      	beq.n	801200a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	3310      	adds	r3, #16
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f001 fd41 	bl	8013a60 <xTaskRemoveFromEventList>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d012      	beq.n	801200a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011fe4:	4b0c      	ldr	r3, [pc, #48]	; (8012018 <xQueueGenericReset+0xd0>)
 8011fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fea:	601a      	str	r2, [r3, #0]
 8011fec:	f3bf 8f4f 	dsb	sy
 8011ff0:	f3bf 8f6f 	isb	sy
 8011ff4:	e009      	b.n	801200a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	3310      	adds	r3, #16
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7ff feef 	bl	8011dde <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	3324      	adds	r3, #36	; 0x24
 8012004:	4618      	mov	r0, r3
 8012006:	f7ff feea 	bl	8011dde <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801200a:	f002 fa73 	bl	80144f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801200e:	2301      	movs	r3, #1
}
 8012010:	4618      	mov	r0, r3
 8012012:	3710      	adds	r7, #16
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}
 8012018:	e000ed04 	.word	0xe000ed04

0801201c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801201c:	b580      	push	{r7, lr}
 801201e:	b08e      	sub	sp, #56	; 0x38
 8012020:	af02      	add	r7, sp, #8
 8012022:	60f8      	str	r0, [r7, #12]
 8012024:	60b9      	str	r1, [r7, #8]
 8012026:	607a      	str	r2, [r7, #4]
 8012028:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d10c      	bne.n	801204a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8012030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012034:	b672      	cpsid	i
 8012036:	f383 8811 	msr	BASEPRI, r3
 801203a:	f3bf 8f6f 	isb	sy
 801203e:	f3bf 8f4f 	dsb	sy
 8012042:	b662      	cpsie	i
 8012044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012046:	bf00      	nop
 8012048:	e7fe      	b.n	8012048 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d10c      	bne.n	801206a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8012050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012054:	b672      	cpsid	i
 8012056:	f383 8811 	msr	BASEPRI, r3
 801205a:	f3bf 8f6f 	isb	sy
 801205e:	f3bf 8f4f 	dsb	sy
 8012062:	b662      	cpsie	i
 8012064:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012066:	bf00      	nop
 8012068:	e7fe      	b.n	8012068 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d002      	beq.n	8012076 <xQueueGenericCreateStatic+0x5a>
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d001      	beq.n	801207a <xQueueGenericCreateStatic+0x5e>
 8012076:	2301      	movs	r3, #1
 8012078:	e000      	b.n	801207c <xQueueGenericCreateStatic+0x60>
 801207a:	2300      	movs	r3, #0
 801207c:	2b00      	cmp	r3, #0
 801207e:	d10c      	bne.n	801209a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8012080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012084:	b672      	cpsid	i
 8012086:	f383 8811 	msr	BASEPRI, r3
 801208a:	f3bf 8f6f 	isb	sy
 801208e:	f3bf 8f4f 	dsb	sy
 8012092:	b662      	cpsie	i
 8012094:	623b      	str	r3, [r7, #32]
}
 8012096:	bf00      	nop
 8012098:	e7fe      	b.n	8012098 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d102      	bne.n	80120a6 <xQueueGenericCreateStatic+0x8a>
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d101      	bne.n	80120aa <xQueueGenericCreateStatic+0x8e>
 80120a6:	2301      	movs	r3, #1
 80120a8:	e000      	b.n	80120ac <xQueueGenericCreateStatic+0x90>
 80120aa:	2300      	movs	r3, #0
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d10c      	bne.n	80120ca <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80120b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b4:	b672      	cpsid	i
 80120b6:	f383 8811 	msr	BASEPRI, r3
 80120ba:	f3bf 8f6f 	isb	sy
 80120be:	f3bf 8f4f 	dsb	sy
 80120c2:	b662      	cpsie	i
 80120c4:	61fb      	str	r3, [r7, #28]
}
 80120c6:	bf00      	nop
 80120c8:	e7fe      	b.n	80120c8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80120ca:	2348      	movs	r3, #72	; 0x48
 80120cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	2b48      	cmp	r3, #72	; 0x48
 80120d2:	d00c      	beq.n	80120ee <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80120d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d8:	b672      	cpsid	i
 80120da:	f383 8811 	msr	BASEPRI, r3
 80120de:	f3bf 8f6f 	isb	sy
 80120e2:	f3bf 8f4f 	dsb	sy
 80120e6:	b662      	cpsie	i
 80120e8:	61bb      	str	r3, [r7, #24]
}
 80120ea:	bf00      	nop
 80120ec:	e7fe      	b.n	80120ec <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80120ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80120f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d00d      	beq.n	8012116 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80120fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fc:	2201      	movs	r2, #1
 80120fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012102:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012108:	9300      	str	r3, [sp, #0]
 801210a:	4613      	mov	r3, r2
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	68b9      	ldr	r1, [r7, #8]
 8012110:	68f8      	ldr	r0, [r7, #12]
 8012112:	f000 f847 	bl	80121a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012118:	4618      	mov	r0, r3
 801211a:	3730      	adds	r7, #48	; 0x30
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}

08012120 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012120:	b580      	push	{r7, lr}
 8012122:	b08a      	sub	sp, #40	; 0x28
 8012124:	af02      	add	r7, sp, #8
 8012126:	60f8      	str	r0, [r7, #12]
 8012128:	60b9      	str	r1, [r7, #8]
 801212a:	4613      	mov	r3, r2
 801212c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d10c      	bne.n	801214e <xQueueGenericCreate+0x2e>
	__asm volatile
 8012134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012138:	b672      	cpsid	i
 801213a:	f383 8811 	msr	BASEPRI, r3
 801213e:	f3bf 8f6f 	isb	sy
 8012142:	f3bf 8f4f 	dsb	sy
 8012146:	b662      	cpsie	i
 8012148:	613b      	str	r3, [r7, #16]
}
 801214a:	bf00      	nop
 801214c:	e7fe      	b.n	801214c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d102      	bne.n	801215a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012154:	2300      	movs	r3, #0
 8012156:	61fb      	str	r3, [r7, #28]
 8012158:	e004      	b.n	8012164 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	68ba      	ldr	r2, [r7, #8]
 801215e:	fb02 f303 	mul.w	r3, r2, r3
 8012162:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012164:	69fb      	ldr	r3, [r7, #28]
 8012166:	3348      	adds	r3, #72	; 0x48
 8012168:	4618      	mov	r0, r3
 801216a:	f7ef f926 	bl	80013ba <pvPortMalloc>
 801216e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012170:	69bb      	ldr	r3, [r7, #24]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d011      	beq.n	801219a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012176:	69bb      	ldr	r3, [r7, #24]
 8012178:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801217a:	697b      	ldr	r3, [r7, #20]
 801217c:	3348      	adds	r3, #72	; 0x48
 801217e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012180:	69bb      	ldr	r3, [r7, #24]
 8012182:	2200      	movs	r2, #0
 8012184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012188:	79fa      	ldrb	r2, [r7, #7]
 801218a:	69bb      	ldr	r3, [r7, #24]
 801218c:	9300      	str	r3, [sp, #0]
 801218e:	4613      	mov	r3, r2
 8012190:	697a      	ldr	r2, [r7, #20]
 8012192:	68b9      	ldr	r1, [r7, #8]
 8012194:	68f8      	ldr	r0, [r7, #12]
 8012196:	f000 f805 	bl	80121a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801219a:	69bb      	ldr	r3, [r7, #24]
	}
 801219c:	4618      	mov	r0, r3
 801219e:	3720      	adds	r7, #32
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}

080121a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b084      	sub	sp, #16
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	60f8      	str	r0, [r7, #12]
 80121ac:	60b9      	str	r1, [r7, #8]
 80121ae:	607a      	str	r2, [r7, #4]
 80121b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d103      	bne.n	80121c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80121b8:	69bb      	ldr	r3, [r7, #24]
 80121ba:	69ba      	ldr	r2, [r7, #24]
 80121bc:	601a      	str	r2, [r3, #0]
 80121be:	e002      	b.n	80121c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	687a      	ldr	r2, [r7, #4]
 80121c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	68fa      	ldr	r2, [r7, #12]
 80121ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80121cc:	69bb      	ldr	r3, [r7, #24]
 80121ce:	68ba      	ldr	r2, [r7, #8]
 80121d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80121d2:	2101      	movs	r1, #1
 80121d4:	69b8      	ldr	r0, [r7, #24]
 80121d6:	f7ff feb7 	bl	8011f48 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80121da:	bf00      	nop
 80121dc:	3710      	adds	r7, #16
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}

080121e2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80121e2:	b580      	push	{r7, lr}
 80121e4:	b082      	sub	sp, #8
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d00e      	beq.n	801220e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2200      	movs	r2, #0
 80121f4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2200      	movs	r2, #0
 80121fa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2200      	movs	r2, #0
 8012200:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012202:	2300      	movs	r3, #0
 8012204:	2200      	movs	r2, #0
 8012206:	2100      	movs	r1, #0
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f000 f837 	bl	801227c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801220e:	bf00      	nop
 8012210:	3708      	adds	r7, #8
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}

08012216 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012216:	b580      	push	{r7, lr}
 8012218:	b086      	sub	sp, #24
 801221a:	af00      	add	r7, sp, #0
 801221c:	4603      	mov	r3, r0
 801221e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012220:	2301      	movs	r3, #1
 8012222:	617b      	str	r3, [r7, #20]
 8012224:	2300      	movs	r3, #0
 8012226:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012228:	79fb      	ldrb	r3, [r7, #7]
 801222a:	461a      	mov	r2, r3
 801222c:	6939      	ldr	r1, [r7, #16]
 801222e:	6978      	ldr	r0, [r7, #20]
 8012230:	f7ff ff76 	bl	8012120 <xQueueGenericCreate>
 8012234:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012236:	68f8      	ldr	r0, [r7, #12]
 8012238:	f7ff ffd3 	bl	80121e2 <prvInitialiseMutex>

		return xNewQueue;
 801223c:	68fb      	ldr	r3, [r7, #12]
	}
 801223e:	4618      	mov	r0, r3
 8012240:	3718      	adds	r7, #24
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}

08012246 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012246:	b580      	push	{r7, lr}
 8012248:	b088      	sub	sp, #32
 801224a:	af02      	add	r7, sp, #8
 801224c:	4603      	mov	r3, r0
 801224e:	6039      	str	r1, [r7, #0]
 8012250:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012252:	2301      	movs	r3, #1
 8012254:	617b      	str	r3, [r7, #20]
 8012256:	2300      	movs	r3, #0
 8012258:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801225a:	79fb      	ldrb	r3, [r7, #7]
 801225c:	9300      	str	r3, [sp, #0]
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	2200      	movs	r2, #0
 8012262:	6939      	ldr	r1, [r7, #16]
 8012264:	6978      	ldr	r0, [r7, #20]
 8012266:	f7ff fed9 	bl	801201c <xQueueGenericCreateStatic>
 801226a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801226c:	68f8      	ldr	r0, [r7, #12]
 801226e:	f7ff ffb8 	bl	80121e2 <prvInitialiseMutex>

		return xNewQueue;
 8012272:	68fb      	ldr	r3, [r7, #12]
	}
 8012274:	4618      	mov	r0, r3
 8012276:	3718      	adds	r7, #24
 8012278:	46bd      	mov	sp, r7
 801227a:	bd80      	pop	{r7, pc}

0801227c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b08e      	sub	sp, #56	; 0x38
 8012280:	af00      	add	r7, sp, #0
 8012282:	60f8      	str	r0, [r7, #12]
 8012284:	60b9      	str	r1, [r7, #8]
 8012286:	607a      	str	r2, [r7, #4]
 8012288:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801228a:	2300      	movs	r3, #0
 801228c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012294:	2b00      	cmp	r3, #0
 8012296:	d10c      	bne.n	80122b2 <xQueueGenericSend+0x36>
	__asm volatile
 8012298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801229c:	b672      	cpsid	i
 801229e:	f383 8811 	msr	BASEPRI, r3
 80122a2:	f3bf 8f6f 	isb	sy
 80122a6:	f3bf 8f4f 	dsb	sy
 80122aa:	b662      	cpsie	i
 80122ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80122ae:	bf00      	nop
 80122b0:	e7fe      	b.n	80122b0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d103      	bne.n	80122c0 <xQueueGenericSend+0x44>
 80122b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d101      	bne.n	80122c4 <xQueueGenericSend+0x48>
 80122c0:	2301      	movs	r3, #1
 80122c2:	e000      	b.n	80122c6 <xQueueGenericSend+0x4a>
 80122c4:	2300      	movs	r3, #0
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d10c      	bne.n	80122e4 <xQueueGenericSend+0x68>
	__asm volatile
 80122ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ce:	b672      	cpsid	i
 80122d0:	f383 8811 	msr	BASEPRI, r3
 80122d4:	f3bf 8f6f 	isb	sy
 80122d8:	f3bf 8f4f 	dsb	sy
 80122dc:	b662      	cpsie	i
 80122de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80122e0:	bf00      	nop
 80122e2:	e7fe      	b.n	80122e2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	2b02      	cmp	r3, #2
 80122e8:	d103      	bne.n	80122f2 <xQueueGenericSend+0x76>
 80122ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122ee:	2b01      	cmp	r3, #1
 80122f0:	d101      	bne.n	80122f6 <xQueueGenericSend+0x7a>
 80122f2:	2301      	movs	r3, #1
 80122f4:	e000      	b.n	80122f8 <xQueueGenericSend+0x7c>
 80122f6:	2300      	movs	r3, #0
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d10c      	bne.n	8012316 <xQueueGenericSend+0x9a>
	__asm volatile
 80122fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012300:	b672      	cpsid	i
 8012302:	f383 8811 	msr	BASEPRI, r3
 8012306:	f3bf 8f6f 	isb	sy
 801230a:	f3bf 8f4f 	dsb	sy
 801230e:	b662      	cpsie	i
 8012310:	623b      	str	r3, [r7, #32]
}
 8012312:	bf00      	nop
 8012314:	e7fe      	b.n	8012314 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012316:	f001 fd6b 	bl	8013df0 <xTaskGetSchedulerState>
 801231a:	4603      	mov	r3, r0
 801231c:	2b00      	cmp	r3, #0
 801231e:	d102      	bne.n	8012326 <xQueueGenericSend+0xaa>
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d101      	bne.n	801232a <xQueueGenericSend+0xae>
 8012326:	2301      	movs	r3, #1
 8012328:	e000      	b.n	801232c <xQueueGenericSend+0xb0>
 801232a:	2300      	movs	r3, #0
 801232c:	2b00      	cmp	r3, #0
 801232e:	d10c      	bne.n	801234a <xQueueGenericSend+0xce>
	__asm volatile
 8012330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012334:	b672      	cpsid	i
 8012336:	f383 8811 	msr	BASEPRI, r3
 801233a:	f3bf 8f6f 	isb	sy
 801233e:	f3bf 8f4f 	dsb	sy
 8012342:	b662      	cpsie	i
 8012344:	61fb      	str	r3, [r7, #28]
}
 8012346:	bf00      	nop
 8012348:	e7fe      	b.n	8012348 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801234a:	f002 f89f 	bl	801448c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012356:	429a      	cmp	r2, r3
 8012358:	d302      	bcc.n	8012360 <xQueueGenericSend+0xe4>
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	2b02      	cmp	r3, #2
 801235e:	d129      	bne.n	80123b4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012360:	683a      	ldr	r2, [r7, #0]
 8012362:	68b9      	ldr	r1, [r7, #8]
 8012364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012366:	f000 fcc2 	bl	8012cee <prvCopyDataToQueue>
 801236a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012370:	2b00      	cmp	r3, #0
 8012372:	d010      	beq.n	8012396 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012376:	3324      	adds	r3, #36	; 0x24
 8012378:	4618      	mov	r0, r3
 801237a:	f001 fb71 	bl	8013a60 <xTaskRemoveFromEventList>
 801237e:	4603      	mov	r3, r0
 8012380:	2b00      	cmp	r3, #0
 8012382:	d013      	beq.n	80123ac <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012384:	4b3f      	ldr	r3, [pc, #252]	; (8012484 <xQueueGenericSend+0x208>)
 8012386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801238a:	601a      	str	r2, [r3, #0]
 801238c:	f3bf 8f4f 	dsb	sy
 8012390:	f3bf 8f6f 	isb	sy
 8012394:	e00a      	b.n	80123ac <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012398:	2b00      	cmp	r3, #0
 801239a:	d007      	beq.n	80123ac <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801239c:	4b39      	ldr	r3, [pc, #228]	; (8012484 <xQueueGenericSend+0x208>)
 801239e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123a2:	601a      	str	r2, [r3, #0]
 80123a4:	f3bf 8f4f 	dsb	sy
 80123a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80123ac:	f002 f8a2 	bl	80144f4 <vPortExitCritical>
				return pdPASS;
 80123b0:	2301      	movs	r3, #1
 80123b2:	e063      	b.n	801247c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d103      	bne.n	80123c2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80123ba:	f002 f89b 	bl	80144f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80123be:	2300      	movs	r3, #0
 80123c0:	e05c      	b.n	801247c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80123c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d106      	bne.n	80123d6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80123c8:	f107 0314 	add.w	r3, r7, #20
 80123cc:	4618      	mov	r0, r3
 80123ce:	f001 fbab 	bl	8013b28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80123d2:	2301      	movs	r3, #1
 80123d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80123d6:	f002 f88d 	bl	80144f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80123da:	f001 f92f 	bl	801363c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80123de:	f002 f855 	bl	801448c <vPortEnterCritical>
 80123e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123e8:	b25b      	sxtb	r3, r3
 80123ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123ee:	d103      	bne.n	80123f8 <xQueueGenericSend+0x17c>
 80123f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f2:	2200      	movs	r2, #0
 80123f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80123f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123fe:	b25b      	sxtb	r3, r3
 8012400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012404:	d103      	bne.n	801240e <xQueueGenericSend+0x192>
 8012406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012408:	2200      	movs	r2, #0
 801240a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801240e:	f002 f871 	bl	80144f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012412:	1d3a      	adds	r2, r7, #4
 8012414:	f107 0314 	add.w	r3, r7, #20
 8012418:	4611      	mov	r1, r2
 801241a:	4618      	mov	r0, r3
 801241c:	f001 fb9a 	bl	8013b54 <xTaskCheckForTimeOut>
 8012420:	4603      	mov	r3, r0
 8012422:	2b00      	cmp	r3, #0
 8012424:	d124      	bne.n	8012470 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012426:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012428:	f000 fd59 	bl	8012ede <prvIsQueueFull>
 801242c:	4603      	mov	r3, r0
 801242e:	2b00      	cmp	r3, #0
 8012430:	d018      	beq.n	8012464 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012434:	3310      	adds	r3, #16
 8012436:	687a      	ldr	r2, [r7, #4]
 8012438:	4611      	mov	r1, r2
 801243a:	4618      	mov	r0, r3
 801243c:	f001 faea 	bl	8013a14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012442:	f000 fce4 	bl	8012e0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012446:	f001 f907 	bl	8013658 <xTaskResumeAll>
 801244a:	4603      	mov	r3, r0
 801244c:	2b00      	cmp	r3, #0
 801244e:	f47f af7c 	bne.w	801234a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8012452:	4b0c      	ldr	r3, [pc, #48]	; (8012484 <xQueueGenericSend+0x208>)
 8012454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012458:	601a      	str	r2, [r3, #0]
 801245a:	f3bf 8f4f 	dsb	sy
 801245e:	f3bf 8f6f 	isb	sy
 8012462:	e772      	b.n	801234a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012466:	f000 fcd2 	bl	8012e0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801246a:	f001 f8f5 	bl	8013658 <xTaskResumeAll>
 801246e:	e76c      	b.n	801234a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012472:	f000 fccc 	bl	8012e0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012476:	f001 f8ef 	bl	8013658 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801247a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801247c:	4618      	mov	r0, r3
 801247e:	3738      	adds	r7, #56	; 0x38
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}
 8012484:	e000ed04 	.word	0xe000ed04

08012488 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b08e      	sub	sp, #56	; 0x38
 801248c:	af00      	add	r7, sp, #0
 801248e:	60f8      	str	r0, [r7, #12]
 8012490:	60b9      	str	r1, [r7, #8]
 8012492:	607a      	str	r2, [r7, #4]
 8012494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801249c:	2b00      	cmp	r3, #0
 801249e:	d10c      	bne.n	80124ba <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80124a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124a4:	b672      	cpsid	i
 80124a6:	f383 8811 	msr	BASEPRI, r3
 80124aa:	f3bf 8f6f 	isb	sy
 80124ae:	f3bf 8f4f 	dsb	sy
 80124b2:	b662      	cpsie	i
 80124b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80124b6:	bf00      	nop
 80124b8:	e7fe      	b.n	80124b8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d103      	bne.n	80124c8 <xQueueGenericSendFromISR+0x40>
 80124c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d101      	bne.n	80124cc <xQueueGenericSendFromISR+0x44>
 80124c8:	2301      	movs	r3, #1
 80124ca:	e000      	b.n	80124ce <xQueueGenericSendFromISR+0x46>
 80124cc:	2300      	movs	r3, #0
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d10c      	bne.n	80124ec <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80124d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d6:	b672      	cpsid	i
 80124d8:	f383 8811 	msr	BASEPRI, r3
 80124dc:	f3bf 8f6f 	isb	sy
 80124e0:	f3bf 8f4f 	dsb	sy
 80124e4:	b662      	cpsie	i
 80124e6:	623b      	str	r3, [r7, #32]
}
 80124e8:	bf00      	nop
 80124ea:	e7fe      	b.n	80124ea <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	2b02      	cmp	r3, #2
 80124f0:	d103      	bne.n	80124fa <xQueueGenericSendFromISR+0x72>
 80124f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d101      	bne.n	80124fe <xQueueGenericSendFromISR+0x76>
 80124fa:	2301      	movs	r3, #1
 80124fc:	e000      	b.n	8012500 <xQueueGenericSendFromISR+0x78>
 80124fe:	2300      	movs	r3, #0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d10c      	bne.n	801251e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8012504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012508:	b672      	cpsid	i
 801250a:	f383 8811 	msr	BASEPRI, r3
 801250e:	f3bf 8f6f 	isb	sy
 8012512:	f3bf 8f4f 	dsb	sy
 8012516:	b662      	cpsie	i
 8012518:	61fb      	str	r3, [r7, #28]
}
 801251a:	bf00      	nop
 801251c:	e7fe      	b.n	801251c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801251e:	f002 f89d 	bl	801465c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012522:	f3ef 8211 	mrs	r2, BASEPRI
 8012526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252a:	b672      	cpsid	i
 801252c:	f383 8811 	msr	BASEPRI, r3
 8012530:	f3bf 8f6f 	isb	sy
 8012534:	f3bf 8f4f 	dsb	sy
 8012538:	b662      	cpsie	i
 801253a:	61ba      	str	r2, [r7, #24]
 801253c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801253e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012540:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801254a:	429a      	cmp	r2, r3
 801254c:	d302      	bcc.n	8012554 <xQueueGenericSendFromISR+0xcc>
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	2b02      	cmp	r3, #2
 8012552:	d12c      	bne.n	80125ae <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801255a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801255e:	683a      	ldr	r2, [r7, #0]
 8012560:	68b9      	ldr	r1, [r7, #8]
 8012562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012564:	f000 fbc3 	bl	8012cee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012568:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801256c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012570:	d112      	bne.n	8012598 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012576:	2b00      	cmp	r3, #0
 8012578:	d016      	beq.n	80125a8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801257c:	3324      	adds	r3, #36	; 0x24
 801257e:	4618      	mov	r0, r3
 8012580:	f001 fa6e 	bl	8013a60 <xTaskRemoveFromEventList>
 8012584:	4603      	mov	r3, r0
 8012586:	2b00      	cmp	r3, #0
 8012588:	d00e      	beq.n	80125a8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d00b      	beq.n	80125a8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2201      	movs	r2, #1
 8012594:	601a      	str	r2, [r3, #0]
 8012596:	e007      	b.n	80125a8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012598:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801259c:	3301      	adds	r3, #1
 801259e:	b2db      	uxtb	r3, r3
 80125a0:	b25a      	sxtb	r2, r3
 80125a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80125a8:	2301      	movs	r3, #1
 80125aa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80125ac:	e001      	b.n	80125b2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80125ae:	2300      	movs	r3, #0
 80125b0:	637b      	str	r3, [r7, #52]	; 0x34
 80125b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80125bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80125be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	3738      	adds	r7, #56	; 0x38
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}

080125c8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b08e      	sub	sp, #56	; 0x38
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
 80125d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80125d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d10c      	bne.n	80125f6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80125dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e0:	b672      	cpsid	i
 80125e2:	f383 8811 	msr	BASEPRI, r3
 80125e6:	f3bf 8f6f 	isb	sy
 80125ea:	f3bf 8f4f 	dsb	sy
 80125ee:	b662      	cpsie	i
 80125f0:	623b      	str	r3, [r7, #32]
}
 80125f2:	bf00      	nop
 80125f4:	e7fe      	b.n	80125f4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80125f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d00c      	beq.n	8012618 <xQueueGiveFromISR+0x50>
	__asm volatile
 80125fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012602:	b672      	cpsid	i
 8012604:	f383 8811 	msr	BASEPRI, r3
 8012608:	f3bf 8f6f 	isb	sy
 801260c:	f3bf 8f4f 	dsb	sy
 8012610:	b662      	cpsie	i
 8012612:	61fb      	str	r3, [r7, #28]
}
 8012614:	bf00      	nop
 8012616:	e7fe      	b.n	8012616 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d103      	bne.n	8012628 <xQueueGiveFromISR+0x60>
 8012620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012622:	689b      	ldr	r3, [r3, #8]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d101      	bne.n	801262c <xQueueGiveFromISR+0x64>
 8012628:	2301      	movs	r3, #1
 801262a:	e000      	b.n	801262e <xQueueGiveFromISR+0x66>
 801262c:	2300      	movs	r3, #0
 801262e:	2b00      	cmp	r3, #0
 8012630:	d10c      	bne.n	801264c <xQueueGiveFromISR+0x84>
	__asm volatile
 8012632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012636:	b672      	cpsid	i
 8012638:	f383 8811 	msr	BASEPRI, r3
 801263c:	f3bf 8f6f 	isb	sy
 8012640:	f3bf 8f4f 	dsb	sy
 8012644:	b662      	cpsie	i
 8012646:	61bb      	str	r3, [r7, #24]
}
 8012648:	bf00      	nop
 801264a:	e7fe      	b.n	801264a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801264c:	f002 f806 	bl	801465c <vPortValidateInterruptPriority>
	__asm volatile
 8012650:	f3ef 8211 	mrs	r2, BASEPRI
 8012654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012658:	b672      	cpsid	i
 801265a:	f383 8811 	msr	BASEPRI, r3
 801265e:	f3bf 8f6f 	isb	sy
 8012662:	f3bf 8f4f 	dsb	sy
 8012666:	b662      	cpsie	i
 8012668:	617a      	str	r2, [r7, #20]
 801266a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801266c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801266e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012674:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801267a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801267c:	429a      	cmp	r2, r3
 801267e:	d22b      	bcs.n	80126d8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801268c:	1c5a      	adds	r2, r3, #1
 801268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012690:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012692:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801269a:	d112      	bne.n	80126c2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801269c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d016      	beq.n	80126d2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80126a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a6:	3324      	adds	r3, #36	; 0x24
 80126a8:	4618      	mov	r0, r3
 80126aa:	f001 f9d9 	bl	8013a60 <xTaskRemoveFromEventList>
 80126ae:	4603      	mov	r3, r0
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d00e      	beq.n	80126d2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d00b      	beq.n	80126d2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	2201      	movs	r2, #1
 80126be:	601a      	str	r2, [r3, #0]
 80126c0:	e007      	b.n	80126d2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80126c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126c6:	3301      	adds	r3, #1
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	b25a      	sxtb	r2, r3
 80126cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80126d2:	2301      	movs	r3, #1
 80126d4:	637b      	str	r3, [r7, #52]	; 0x34
 80126d6:	e001      	b.n	80126dc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80126d8:	2300      	movs	r3, #0
 80126da:	637b      	str	r3, [r7, #52]	; 0x34
 80126dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126de:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	f383 8811 	msr	BASEPRI, r3
}
 80126e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80126e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	3738      	adds	r7, #56	; 0x38
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}
	...

080126f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b08c      	sub	sp, #48	; 0x30
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	60f8      	str	r0, [r7, #12]
 80126fc:	60b9      	str	r1, [r7, #8]
 80126fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012700:	2300      	movs	r3, #0
 8012702:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801270a:	2b00      	cmp	r3, #0
 801270c:	d10c      	bne.n	8012728 <xQueueReceive+0x34>
	__asm volatile
 801270e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012712:	b672      	cpsid	i
 8012714:	f383 8811 	msr	BASEPRI, r3
 8012718:	f3bf 8f6f 	isb	sy
 801271c:	f3bf 8f4f 	dsb	sy
 8012720:	b662      	cpsie	i
 8012722:	623b      	str	r3, [r7, #32]
}
 8012724:	bf00      	nop
 8012726:	e7fe      	b.n	8012726 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d103      	bne.n	8012736 <xQueueReceive+0x42>
 801272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012732:	2b00      	cmp	r3, #0
 8012734:	d101      	bne.n	801273a <xQueueReceive+0x46>
 8012736:	2301      	movs	r3, #1
 8012738:	e000      	b.n	801273c <xQueueReceive+0x48>
 801273a:	2300      	movs	r3, #0
 801273c:	2b00      	cmp	r3, #0
 801273e:	d10c      	bne.n	801275a <xQueueReceive+0x66>
	__asm volatile
 8012740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012744:	b672      	cpsid	i
 8012746:	f383 8811 	msr	BASEPRI, r3
 801274a:	f3bf 8f6f 	isb	sy
 801274e:	f3bf 8f4f 	dsb	sy
 8012752:	b662      	cpsie	i
 8012754:	61fb      	str	r3, [r7, #28]
}
 8012756:	bf00      	nop
 8012758:	e7fe      	b.n	8012758 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801275a:	f001 fb49 	bl	8013df0 <xTaskGetSchedulerState>
 801275e:	4603      	mov	r3, r0
 8012760:	2b00      	cmp	r3, #0
 8012762:	d102      	bne.n	801276a <xQueueReceive+0x76>
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d101      	bne.n	801276e <xQueueReceive+0x7a>
 801276a:	2301      	movs	r3, #1
 801276c:	e000      	b.n	8012770 <xQueueReceive+0x7c>
 801276e:	2300      	movs	r3, #0
 8012770:	2b00      	cmp	r3, #0
 8012772:	d10c      	bne.n	801278e <xQueueReceive+0x9a>
	__asm volatile
 8012774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012778:	b672      	cpsid	i
 801277a:	f383 8811 	msr	BASEPRI, r3
 801277e:	f3bf 8f6f 	isb	sy
 8012782:	f3bf 8f4f 	dsb	sy
 8012786:	b662      	cpsie	i
 8012788:	61bb      	str	r3, [r7, #24]
}
 801278a:	bf00      	nop
 801278c:	e7fe      	b.n	801278c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801278e:	f001 fe7d 	bl	801448c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012796:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279a:	2b00      	cmp	r3, #0
 801279c:	d01f      	beq.n	80127de <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801279e:	68b9      	ldr	r1, [r7, #8]
 80127a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127a2:	f000 fb0e 	bl	8012dc2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80127a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a8:	1e5a      	subs	r2, r3, #1
 80127aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80127ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b0:	691b      	ldr	r3, [r3, #16]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d00f      	beq.n	80127d6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80127b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b8:	3310      	adds	r3, #16
 80127ba:	4618      	mov	r0, r3
 80127bc:	f001 f950 	bl	8013a60 <xTaskRemoveFromEventList>
 80127c0:	4603      	mov	r3, r0
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d007      	beq.n	80127d6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80127c6:	4b3d      	ldr	r3, [pc, #244]	; (80128bc <xQueueReceive+0x1c8>)
 80127c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127cc:	601a      	str	r2, [r3, #0]
 80127ce:	f3bf 8f4f 	dsb	sy
 80127d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80127d6:	f001 fe8d 	bl	80144f4 <vPortExitCritical>
				return pdPASS;
 80127da:	2301      	movs	r3, #1
 80127dc:	e069      	b.n	80128b2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d103      	bne.n	80127ec <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80127e4:	f001 fe86 	bl	80144f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80127e8:	2300      	movs	r3, #0
 80127ea:	e062      	b.n	80128b2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80127ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d106      	bne.n	8012800 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80127f2:	f107 0310 	add.w	r3, r7, #16
 80127f6:	4618      	mov	r0, r3
 80127f8:	f001 f996 	bl	8013b28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80127fc:	2301      	movs	r3, #1
 80127fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012800:	f001 fe78 	bl	80144f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012804:	f000 ff1a 	bl	801363c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012808:	f001 fe40 	bl	801448c <vPortEnterCritical>
 801280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012812:	b25b      	sxtb	r3, r3
 8012814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012818:	d103      	bne.n	8012822 <xQueueReceive+0x12e>
 801281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801281c:	2200      	movs	r2, #0
 801281e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012828:	b25b      	sxtb	r3, r3
 801282a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801282e:	d103      	bne.n	8012838 <xQueueReceive+0x144>
 8012830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012832:	2200      	movs	r2, #0
 8012834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012838:	f001 fe5c 	bl	80144f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801283c:	1d3a      	adds	r2, r7, #4
 801283e:	f107 0310 	add.w	r3, r7, #16
 8012842:	4611      	mov	r1, r2
 8012844:	4618      	mov	r0, r3
 8012846:	f001 f985 	bl	8013b54 <xTaskCheckForTimeOut>
 801284a:	4603      	mov	r3, r0
 801284c:	2b00      	cmp	r3, #0
 801284e:	d123      	bne.n	8012898 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012852:	f000 fb2e 	bl	8012eb2 <prvIsQueueEmpty>
 8012856:	4603      	mov	r3, r0
 8012858:	2b00      	cmp	r3, #0
 801285a:	d017      	beq.n	801288c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801285e:	3324      	adds	r3, #36	; 0x24
 8012860:	687a      	ldr	r2, [r7, #4]
 8012862:	4611      	mov	r1, r2
 8012864:	4618      	mov	r0, r3
 8012866:	f001 f8d5 	bl	8013a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801286a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801286c:	f000 facf 	bl	8012e0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012870:	f000 fef2 	bl	8013658 <xTaskResumeAll>
 8012874:	4603      	mov	r3, r0
 8012876:	2b00      	cmp	r3, #0
 8012878:	d189      	bne.n	801278e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801287a:	4b10      	ldr	r3, [pc, #64]	; (80128bc <xQueueReceive+0x1c8>)
 801287c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012880:	601a      	str	r2, [r3, #0]
 8012882:	f3bf 8f4f 	dsb	sy
 8012886:	f3bf 8f6f 	isb	sy
 801288a:	e780      	b.n	801278e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801288c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801288e:	f000 fabe 	bl	8012e0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012892:	f000 fee1 	bl	8013658 <xTaskResumeAll>
 8012896:	e77a      	b.n	801278e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801289a:	f000 fab8 	bl	8012e0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801289e:	f000 fedb 	bl	8013658 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80128a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128a4:	f000 fb05 	bl	8012eb2 <prvIsQueueEmpty>
 80128a8:	4603      	mov	r3, r0
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	f43f af6f 	beq.w	801278e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80128b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	3730      	adds	r7, #48	; 0x30
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}
 80128ba:	bf00      	nop
 80128bc:	e000ed04 	.word	0xe000ed04

080128c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b08e      	sub	sp, #56	; 0x38
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80128ca:	2300      	movs	r3, #0
 80128cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80128d2:	2300      	movs	r3, #0
 80128d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80128d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d10c      	bne.n	80128f6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80128dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e0:	b672      	cpsid	i
 80128e2:	f383 8811 	msr	BASEPRI, r3
 80128e6:	f3bf 8f6f 	isb	sy
 80128ea:	f3bf 8f4f 	dsb	sy
 80128ee:	b662      	cpsie	i
 80128f0:	623b      	str	r3, [r7, #32]
}
 80128f2:	bf00      	nop
 80128f4:	e7fe      	b.n	80128f4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80128f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d00c      	beq.n	8012918 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80128fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012902:	b672      	cpsid	i
 8012904:	f383 8811 	msr	BASEPRI, r3
 8012908:	f3bf 8f6f 	isb	sy
 801290c:	f3bf 8f4f 	dsb	sy
 8012910:	b662      	cpsie	i
 8012912:	61fb      	str	r3, [r7, #28]
}
 8012914:	bf00      	nop
 8012916:	e7fe      	b.n	8012916 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012918:	f001 fa6a 	bl	8013df0 <xTaskGetSchedulerState>
 801291c:	4603      	mov	r3, r0
 801291e:	2b00      	cmp	r3, #0
 8012920:	d102      	bne.n	8012928 <xQueueSemaphoreTake+0x68>
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d101      	bne.n	801292c <xQueueSemaphoreTake+0x6c>
 8012928:	2301      	movs	r3, #1
 801292a:	e000      	b.n	801292e <xQueueSemaphoreTake+0x6e>
 801292c:	2300      	movs	r3, #0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d10c      	bne.n	801294c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8012932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012936:	b672      	cpsid	i
 8012938:	f383 8811 	msr	BASEPRI, r3
 801293c:	f3bf 8f6f 	isb	sy
 8012940:	f3bf 8f4f 	dsb	sy
 8012944:	b662      	cpsie	i
 8012946:	61bb      	str	r3, [r7, #24]
}
 8012948:	bf00      	nop
 801294a:	e7fe      	b.n	801294a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801294c:	f001 fd9e 	bl	801448c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012954:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012958:	2b00      	cmp	r3, #0
 801295a:	d024      	beq.n	80129a6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295e:	1e5a      	subs	r2, r3, #1
 8012960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012962:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d104      	bne.n	8012976 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801296c:	f001 fc06 	bl	801417c <pvTaskIncrementMutexHeldCount>
 8012970:	4602      	mov	r2, r0
 8012972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012974:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012978:	691b      	ldr	r3, [r3, #16]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d00f      	beq.n	801299e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012980:	3310      	adds	r3, #16
 8012982:	4618      	mov	r0, r3
 8012984:	f001 f86c 	bl	8013a60 <xTaskRemoveFromEventList>
 8012988:	4603      	mov	r3, r0
 801298a:	2b00      	cmp	r3, #0
 801298c:	d007      	beq.n	801299e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801298e:	4b55      	ldr	r3, [pc, #340]	; (8012ae4 <xQueueSemaphoreTake+0x224>)
 8012990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012994:	601a      	str	r2, [r3, #0]
 8012996:	f3bf 8f4f 	dsb	sy
 801299a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801299e:	f001 fda9 	bl	80144f4 <vPortExitCritical>
				return pdPASS;
 80129a2:	2301      	movs	r3, #1
 80129a4:	e099      	b.n	8012ada <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d113      	bne.n	80129d4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80129ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d00c      	beq.n	80129cc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80129b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b6:	b672      	cpsid	i
 80129b8:	f383 8811 	msr	BASEPRI, r3
 80129bc:	f3bf 8f6f 	isb	sy
 80129c0:	f3bf 8f4f 	dsb	sy
 80129c4:	b662      	cpsie	i
 80129c6:	617b      	str	r3, [r7, #20]
}
 80129c8:	bf00      	nop
 80129ca:	e7fe      	b.n	80129ca <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80129cc:	f001 fd92 	bl	80144f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80129d0:	2300      	movs	r3, #0
 80129d2:	e082      	b.n	8012ada <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80129d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d106      	bne.n	80129e8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80129da:	f107 030c 	add.w	r3, r7, #12
 80129de:	4618      	mov	r0, r3
 80129e0:	f001 f8a2 	bl	8013b28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80129e4:	2301      	movs	r3, #1
 80129e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80129e8:	f001 fd84 	bl	80144f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80129ec:	f000 fe26 	bl	801363c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80129f0:	f001 fd4c 	bl	801448c <vPortEnterCritical>
 80129f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80129fa:	b25b      	sxtb	r3, r3
 80129fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a00:	d103      	bne.n	8012a0a <xQueueSemaphoreTake+0x14a>
 8012a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a04:	2200      	movs	r2, #0
 8012a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a10:	b25b      	sxtb	r3, r3
 8012a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a16:	d103      	bne.n	8012a20 <xQueueSemaphoreTake+0x160>
 8012a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a20:	f001 fd68 	bl	80144f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012a24:	463a      	mov	r2, r7
 8012a26:	f107 030c 	add.w	r3, r7, #12
 8012a2a:	4611      	mov	r1, r2
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f001 f891 	bl	8013b54 <xTaskCheckForTimeOut>
 8012a32:	4603      	mov	r3, r0
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d132      	bne.n	8012a9e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012a38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a3a:	f000 fa3a 	bl	8012eb2 <prvIsQueueEmpty>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d026      	beq.n	8012a92 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d109      	bne.n	8012a60 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8012a4c:	f001 fd1e 	bl	801448c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a52:	689b      	ldr	r3, [r3, #8]
 8012a54:	4618      	mov	r0, r3
 8012a56:	f001 f9e9 	bl	8013e2c <xTaskPriorityInherit>
 8012a5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012a5c:	f001 fd4a 	bl	80144f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a62:	3324      	adds	r3, #36	; 0x24
 8012a64:	683a      	ldr	r2, [r7, #0]
 8012a66:	4611      	mov	r1, r2
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f000 ffd3 	bl	8013a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012a6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a70:	f000 f9cd 	bl	8012e0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012a74:	f000 fdf0 	bl	8013658 <xTaskResumeAll>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	f47f af66 	bne.w	801294c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8012a80:	4b18      	ldr	r3, [pc, #96]	; (8012ae4 <xQueueSemaphoreTake+0x224>)
 8012a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a86:	601a      	str	r2, [r3, #0]
 8012a88:	f3bf 8f4f 	dsb	sy
 8012a8c:	f3bf 8f6f 	isb	sy
 8012a90:	e75c      	b.n	801294c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012a92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a94:	f000 f9bb 	bl	8012e0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012a98:	f000 fdde 	bl	8013658 <xTaskResumeAll>
 8012a9c:	e756      	b.n	801294c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012aa0:	f000 f9b5 	bl	8012e0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012aa4:	f000 fdd8 	bl	8013658 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012aa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012aaa:	f000 fa02 	bl	8012eb2 <prvIsQueueEmpty>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	f43f af4b 	beq.w	801294c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d00d      	beq.n	8012ad8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8012abc:	f001 fce6 	bl	801448c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012ac0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ac2:	f000 f8fc 	bl	8012cbe <prvGetDisinheritPriorityAfterTimeout>
 8012ac6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aca:	689b      	ldr	r3, [r3, #8]
 8012acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f001 fab6 	bl	8014040 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012ad4:	f001 fd0e 	bl	80144f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012ad8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3738      	adds	r7, #56	; 0x38
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
 8012ae2:	bf00      	nop
 8012ae4:	e000ed04 	.word	0xe000ed04

08012ae8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b08e      	sub	sp, #56	; 0x38
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	60f8      	str	r0, [r7, #12]
 8012af0:	60b9      	str	r1, [r7, #8]
 8012af2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d10c      	bne.n	8012b18 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8012afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b02:	b672      	cpsid	i
 8012b04:	f383 8811 	msr	BASEPRI, r3
 8012b08:	f3bf 8f6f 	isb	sy
 8012b0c:	f3bf 8f4f 	dsb	sy
 8012b10:	b662      	cpsie	i
 8012b12:	623b      	str	r3, [r7, #32]
}
 8012b14:	bf00      	nop
 8012b16:	e7fe      	b.n	8012b16 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d103      	bne.n	8012b26 <xQueueReceiveFromISR+0x3e>
 8012b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d101      	bne.n	8012b2a <xQueueReceiveFromISR+0x42>
 8012b26:	2301      	movs	r3, #1
 8012b28:	e000      	b.n	8012b2c <xQueueReceiveFromISR+0x44>
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d10c      	bne.n	8012b4a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8012b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b34:	b672      	cpsid	i
 8012b36:	f383 8811 	msr	BASEPRI, r3
 8012b3a:	f3bf 8f6f 	isb	sy
 8012b3e:	f3bf 8f4f 	dsb	sy
 8012b42:	b662      	cpsie	i
 8012b44:	61fb      	str	r3, [r7, #28]
}
 8012b46:	bf00      	nop
 8012b48:	e7fe      	b.n	8012b48 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b4a:	f001 fd87 	bl	801465c <vPortValidateInterruptPriority>
	__asm volatile
 8012b4e:	f3ef 8211 	mrs	r2, BASEPRI
 8012b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b56:	b672      	cpsid	i
 8012b58:	f383 8811 	msr	BASEPRI, r3
 8012b5c:	f3bf 8f6f 	isb	sy
 8012b60:	f3bf 8f4f 	dsb	sy
 8012b64:	b662      	cpsie	i
 8012b66:	61ba      	str	r2, [r7, #24]
 8012b68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012b6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d02f      	beq.n	8012bda <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012b84:	68b9      	ldr	r1, [r7, #8]
 8012b86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b88:	f000 f91b 	bl	8012dc2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b8e:	1e5a      	subs	r2, r3, #1
 8012b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b92:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012b94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b9c:	d112      	bne.n	8012bc4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba0:	691b      	ldr	r3, [r3, #16]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d016      	beq.n	8012bd4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba8:	3310      	adds	r3, #16
 8012baa:	4618      	mov	r0, r3
 8012bac:	f000 ff58 	bl	8013a60 <xTaskRemoveFromEventList>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d00e      	beq.n	8012bd4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d00b      	beq.n	8012bd4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	601a      	str	r2, [r3, #0]
 8012bc2:	e007      	b.n	8012bd4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bc8:	3301      	adds	r3, #1
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	b25a      	sxtb	r2, r3
 8012bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8012bd8:	e001      	b.n	8012bde <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8012bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012be2:	693b      	ldr	r3, [r7, #16]
 8012be4:	f383 8811 	msr	BASEPRI, r3
}
 8012be8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012bec:	4618      	mov	r0, r3
 8012bee:	3738      	adds	r7, #56	; 0x38
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}

08012bf4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b084      	sub	sp, #16
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d10c      	bne.n	8012c1c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8012c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c06:	b672      	cpsid	i
 8012c08:	f383 8811 	msr	BASEPRI, r3
 8012c0c:	f3bf 8f6f 	isb	sy
 8012c10:	f3bf 8f4f 	dsb	sy
 8012c14:	b662      	cpsie	i
 8012c16:	60bb      	str	r3, [r7, #8]
}
 8012c18:	bf00      	nop
 8012c1a:	e7fe      	b.n	8012c1a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8012c1c:	f001 fc36 	bl	801448c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c24:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8012c26:	f001 fc65 	bl	80144f4 <vPortExitCritical>

	return uxReturn;
 8012c2a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3710      	adds	r7, #16
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}

08012c34 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8012c34:	b480      	push	{r7}
 8012c36:	b087      	sub	sp, #28
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d10c      	bne.n	8012c60 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8012c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c4a:	b672      	cpsid	i
 8012c4c:	f383 8811 	msr	BASEPRI, r3
 8012c50:	f3bf 8f6f 	isb	sy
 8012c54:	f3bf 8f4f 	dsb	sy
 8012c58:	b662      	cpsie	i
 8012c5a:	60fb      	str	r3, [r7, #12]
}
 8012c5c:	bf00      	nop
 8012c5e:	e7fe      	b.n	8012c5e <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c64:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8012c66:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012c68:	4618      	mov	r0, r3
 8012c6a:	371c      	adds	r7, #28
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c72:	4770      	bx	lr

08012c74 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b084      	sub	sp, #16
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d10c      	bne.n	8012ca0 <vQueueDelete+0x2c>
	__asm volatile
 8012c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c8a:	b672      	cpsid	i
 8012c8c:	f383 8811 	msr	BASEPRI, r3
 8012c90:	f3bf 8f6f 	isb	sy
 8012c94:	f3bf 8f4f 	dsb	sy
 8012c98:	b662      	cpsie	i
 8012c9a:	60bb      	str	r3, [r7, #8]
}
 8012c9c:	bf00      	nop
 8012c9e:	e7fe      	b.n	8012c9e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012ca0:	68f8      	ldr	r0, [r7, #12]
 8012ca2:	f000 f935 	bl	8012f10 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d102      	bne.n	8012cb6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8012cb0:	68f8      	ldr	r0, [r7, #12]
 8012cb2:	f7ee fb90 	bl	80013d6 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012cb6:	bf00      	nop
 8012cb8:	3710      	adds	r7, #16
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}

08012cbe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012cbe:	b480      	push	{r7}
 8012cc0:	b085      	sub	sp, #20
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d006      	beq.n	8012cdc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	f1c3 0307 	rsb	r3, r3, #7
 8012cd8:	60fb      	str	r3, [r7, #12]
 8012cda:	e001      	b.n	8012ce0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012cdc:	2300      	movs	r3, #0
 8012cde:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
	}
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	3714      	adds	r7, #20
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cec:	4770      	bx	lr

08012cee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012cee:	b580      	push	{r7, lr}
 8012cf0:	b086      	sub	sp, #24
 8012cf2:	af00      	add	r7, sp, #0
 8012cf4:	60f8      	str	r0, [r7, #12]
 8012cf6:	60b9      	str	r1, [r7, #8]
 8012cf8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d10d      	bne.n	8012d28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d14d      	bne.n	8012db0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	689b      	ldr	r3, [r3, #8]
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f001 f907 	bl	8013f2c <xTaskPriorityDisinherit>
 8012d1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	2200      	movs	r2, #0
 8012d24:	609a      	str	r2, [r3, #8]
 8012d26:	e043      	b.n	8012db0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d119      	bne.n	8012d62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	6858      	ldr	r0, [r3, #4]
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d36:	461a      	mov	r2, r3
 8012d38:	68b9      	ldr	r1, [r7, #8]
 8012d3a:	f010 ff11 	bl	8023b60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	685a      	ldr	r2, [r3, #4]
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d46:	441a      	add	r2, r3
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	685a      	ldr	r2, [r3, #4]
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	689b      	ldr	r3, [r3, #8]
 8012d54:	429a      	cmp	r2, r3
 8012d56:	d32b      	bcc.n	8012db0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	681a      	ldr	r2, [r3, #0]
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	605a      	str	r2, [r3, #4]
 8012d60:	e026      	b.n	8012db0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	68d8      	ldr	r0, [r3, #12]
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	68b9      	ldr	r1, [r7, #8]
 8012d6e:	f010 fef7 	bl	8023b60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	68da      	ldr	r2, [r3, #12]
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d7a:	425b      	negs	r3, r3
 8012d7c:	441a      	add	r2, r3
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	68da      	ldr	r2, [r3, #12]
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d207      	bcs.n	8012d9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	689a      	ldr	r2, [r3, #8]
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d96:	425b      	negs	r3, r3
 8012d98:	441a      	add	r2, r3
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2b02      	cmp	r3, #2
 8012da2:	d105      	bne.n	8012db0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012da4:	693b      	ldr	r3, [r7, #16]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d002      	beq.n	8012db0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012daa:	693b      	ldr	r3, [r7, #16]
 8012dac:	3b01      	subs	r3, #1
 8012dae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012db0:	693b      	ldr	r3, [r7, #16]
 8012db2:	1c5a      	adds	r2, r3, #1
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012db8:	697b      	ldr	r3, [r7, #20]
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3718      	adds	r7, #24
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}

08012dc2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012dc2:	b580      	push	{r7, lr}
 8012dc4:	b082      	sub	sp, #8
 8012dc6:	af00      	add	r7, sp, #0
 8012dc8:	6078      	str	r0, [r7, #4]
 8012dca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d018      	beq.n	8012e06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	68da      	ldr	r2, [r3, #12]
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ddc:	441a      	add	r2, r3
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	68da      	ldr	r2, [r3, #12]
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	689b      	ldr	r3, [r3, #8]
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d303      	bcc.n	8012df6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	681a      	ldr	r2, [r3, #0]
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	68d9      	ldr	r1, [r3, #12]
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dfe:	461a      	mov	r2, r3
 8012e00:	6838      	ldr	r0, [r7, #0]
 8012e02:	f010 fead 	bl	8023b60 <memcpy>
	}
}
 8012e06:	bf00      	nop
 8012e08:	3708      	adds	r7, #8
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}

08012e0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012e0e:	b580      	push	{r7, lr}
 8012e10:	b084      	sub	sp, #16
 8012e12:	af00      	add	r7, sp, #0
 8012e14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012e16:	f001 fb39 	bl	801448c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012e20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e22:	e011      	b.n	8012e48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d012      	beq.n	8012e52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	3324      	adds	r3, #36	; 0x24
 8012e30:	4618      	mov	r0, r3
 8012e32:	f000 fe15 	bl	8013a60 <xTaskRemoveFromEventList>
 8012e36:	4603      	mov	r3, r0
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d001      	beq.n	8012e40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012e3c:	f000 fef0 	bl	8013c20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012e40:	7bfb      	ldrb	r3, [r7, #15]
 8012e42:	3b01      	subs	r3, #1
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	dce9      	bgt.n	8012e24 <prvUnlockQueue+0x16>
 8012e50:	e000      	b.n	8012e54 <prvUnlockQueue+0x46>
					break;
 8012e52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	22ff      	movs	r2, #255	; 0xff
 8012e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012e5c:	f001 fb4a 	bl	80144f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012e60:	f001 fb14 	bl	801448c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012e6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e6c:	e011      	b.n	8012e92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	691b      	ldr	r3, [r3, #16]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d012      	beq.n	8012e9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	3310      	adds	r3, #16
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f000 fdf0 	bl	8013a60 <xTaskRemoveFromEventList>
 8012e80:	4603      	mov	r3, r0
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d001      	beq.n	8012e8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012e86:	f000 fecb 	bl	8013c20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012e8a:	7bbb      	ldrb	r3, [r7, #14]
 8012e8c:	3b01      	subs	r3, #1
 8012e8e:	b2db      	uxtb	r3, r3
 8012e90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	dce9      	bgt.n	8012e6e <prvUnlockQueue+0x60>
 8012e9a:	e000      	b.n	8012e9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012e9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	22ff      	movs	r2, #255	; 0xff
 8012ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012ea6:	f001 fb25 	bl	80144f4 <vPortExitCritical>
}
 8012eaa:	bf00      	nop
 8012eac:	3710      	adds	r7, #16
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}

08012eb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012eb2:	b580      	push	{r7, lr}
 8012eb4:	b084      	sub	sp, #16
 8012eb6:	af00      	add	r7, sp, #0
 8012eb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012eba:	f001 fae7 	bl	801448c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d102      	bne.n	8012ecc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	60fb      	str	r3, [r7, #12]
 8012eca:	e001      	b.n	8012ed0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012ed0:	f001 fb10 	bl	80144f4 <vPortExitCritical>

	return xReturn;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3710      	adds	r7, #16
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}

08012ede <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012ede:	b580      	push	{r7, lr}
 8012ee0:	b084      	sub	sp, #16
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012ee6:	f001 fad1 	bl	801448c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d102      	bne.n	8012efc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	60fb      	str	r3, [r7, #12]
 8012efa:	e001      	b.n	8012f00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012efc:	2300      	movs	r3, #0
 8012efe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012f00:	f001 faf8 	bl	80144f4 <vPortExitCritical>

	return xReturn;
 8012f04:	68fb      	ldr	r3, [r7, #12]
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3710      	adds	r7, #16
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}
	...

08012f10 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012f10:	b480      	push	{r7}
 8012f12:	b085      	sub	sp, #20
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012f18:	2300      	movs	r3, #0
 8012f1a:	60fb      	str	r3, [r7, #12]
 8012f1c:	e016      	b.n	8012f4c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012f1e:	4a10      	ldr	r2, [pc, #64]	; (8012f60 <vQueueUnregisterQueue+0x50>)
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	00db      	lsls	r3, r3, #3
 8012f24:	4413      	add	r3, r2
 8012f26:	685b      	ldr	r3, [r3, #4]
 8012f28:	687a      	ldr	r2, [r7, #4]
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d10b      	bne.n	8012f46 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012f2e:	4a0c      	ldr	r2, [pc, #48]	; (8012f60 <vQueueUnregisterQueue+0x50>)
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	2100      	movs	r1, #0
 8012f34:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012f38:	4a09      	ldr	r2, [pc, #36]	; (8012f60 <vQueueUnregisterQueue+0x50>)
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	00db      	lsls	r3, r3, #3
 8012f3e:	4413      	add	r3, r2
 8012f40:	2200      	movs	r2, #0
 8012f42:	605a      	str	r2, [r3, #4]
				break;
 8012f44:	e006      	b.n	8012f54 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	3301      	adds	r3, #1
 8012f4a:	60fb      	str	r3, [r7, #12]
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	2b07      	cmp	r3, #7
 8012f50:	d9e5      	bls.n	8012f1e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012f52:	bf00      	nop
 8012f54:	bf00      	nop
 8012f56:	3714      	adds	r7, #20
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5e:	4770      	bx	lr
 8012f60:	20006500 	.word	0x20006500

08012f64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b08e      	sub	sp, #56	; 0x38
 8012f68:	af04      	add	r7, sp, #16
 8012f6a:	60f8      	str	r0, [r7, #12]
 8012f6c:	60b9      	str	r1, [r7, #8]
 8012f6e:	607a      	str	r2, [r7, #4]
 8012f70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d10c      	bne.n	8012f92 <xTaskCreateStatic+0x2e>
	__asm volatile
 8012f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f7c:	b672      	cpsid	i
 8012f7e:	f383 8811 	msr	BASEPRI, r3
 8012f82:	f3bf 8f6f 	isb	sy
 8012f86:	f3bf 8f4f 	dsb	sy
 8012f8a:	b662      	cpsie	i
 8012f8c:	623b      	str	r3, [r7, #32]
}
 8012f8e:	bf00      	nop
 8012f90:	e7fe      	b.n	8012f90 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8012f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d10c      	bne.n	8012fb2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8012f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f9c:	b672      	cpsid	i
 8012f9e:	f383 8811 	msr	BASEPRI, r3
 8012fa2:	f3bf 8f6f 	isb	sy
 8012fa6:	f3bf 8f4f 	dsb	sy
 8012faa:	b662      	cpsie	i
 8012fac:	61fb      	str	r3, [r7, #28]
}
 8012fae:	bf00      	nop
 8012fb0:	e7fe      	b.n	8012fb0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012fb2:	23b4      	movs	r3, #180	; 0xb4
 8012fb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012fb6:	693b      	ldr	r3, [r7, #16]
 8012fb8:	2bb4      	cmp	r3, #180	; 0xb4
 8012fba:	d00c      	beq.n	8012fd6 <xTaskCreateStatic+0x72>
	__asm volatile
 8012fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fc0:	b672      	cpsid	i
 8012fc2:	f383 8811 	msr	BASEPRI, r3
 8012fc6:	f3bf 8f6f 	isb	sy
 8012fca:	f3bf 8f4f 	dsb	sy
 8012fce:	b662      	cpsie	i
 8012fd0:	61bb      	str	r3, [r7, #24]
}
 8012fd2:	bf00      	nop
 8012fd4:	e7fe      	b.n	8012fd4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012fd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d01e      	beq.n	801301c <xTaskCreateStatic+0xb8>
 8012fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d01b      	beq.n	801301c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012fec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ff0:	2202      	movs	r2, #2
 8012ff2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	9303      	str	r3, [sp, #12]
 8012ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ffc:	9302      	str	r3, [sp, #8]
 8012ffe:	f107 0314 	add.w	r3, r7, #20
 8013002:	9301      	str	r3, [sp, #4]
 8013004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013006:	9300      	str	r3, [sp, #0]
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	68b9      	ldr	r1, [r7, #8]
 801300e:	68f8      	ldr	r0, [r7, #12]
 8013010:	f000 f850 	bl	80130b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013016:	f000 f8ed 	bl	80131f4 <prvAddNewTaskToReadyList>
 801301a:	e001      	b.n	8013020 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 801301c:	2300      	movs	r3, #0
 801301e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013020:	697b      	ldr	r3, [r7, #20]
	}
 8013022:	4618      	mov	r0, r3
 8013024:	3728      	adds	r7, #40	; 0x28
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}

0801302a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801302a:	b580      	push	{r7, lr}
 801302c:	b08c      	sub	sp, #48	; 0x30
 801302e:	af04      	add	r7, sp, #16
 8013030:	60f8      	str	r0, [r7, #12]
 8013032:	60b9      	str	r1, [r7, #8]
 8013034:	603b      	str	r3, [r7, #0]
 8013036:	4613      	mov	r3, r2
 8013038:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801303a:	88fb      	ldrh	r3, [r7, #6]
 801303c:	009b      	lsls	r3, r3, #2
 801303e:	4618      	mov	r0, r3
 8013040:	f7ee f9bb 	bl	80013ba <pvPortMalloc>
 8013044:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d00e      	beq.n	801306a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801304c:	20b4      	movs	r0, #180	; 0xb4
 801304e:	f7ee f9b4 	bl	80013ba <pvPortMalloc>
 8013052:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013054:	69fb      	ldr	r3, [r7, #28]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d003      	beq.n	8013062 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801305a:	69fb      	ldr	r3, [r7, #28]
 801305c:	697a      	ldr	r2, [r7, #20]
 801305e:	631a      	str	r2, [r3, #48]	; 0x30
 8013060:	e005      	b.n	801306e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013062:	6978      	ldr	r0, [r7, #20]
 8013064:	f7ee f9b7 	bl	80013d6 <vPortFree>
 8013068:	e001      	b.n	801306e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801306a:	2300      	movs	r3, #0
 801306c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801306e:	69fb      	ldr	r3, [r7, #28]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d017      	beq.n	80130a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013074:	69fb      	ldr	r3, [r7, #28]
 8013076:	2200      	movs	r2, #0
 8013078:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801307c:	88fa      	ldrh	r2, [r7, #6]
 801307e:	2300      	movs	r3, #0
 8013080:	9303      	str	r3, [sp, #12]
 8013082:	69fb      	ldr	r3, [r7, #28]
 8013084:	9302      	str	r3, [sp, #8]
 8013086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013088:	9301      	str	r3, [sp, #4]
 801308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801308c:	9300      	str	r3, [sp, #0]
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	68b9      	ldr	r1, [r7, #8]
 8013092:	68f8      	ldr	r0, [r7, #12]
 8013094:	f000 f80e 	bl	80130b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013098:	69f8      	ldr	r0, [r7, #28]
 801309a:	f000 f8ab 	bl	80131f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801309e:	2301      	movs	r3, #1
 80130a0:	61bb      	str	r3, [r7, #24]
 80130a2:	e002      	b.n	80130aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80130a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80130aa:	69bb      	ldr	r3, [r7, #24]
	}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3720      	adds	r7, #32
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}

080130b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b088      	sub	sp, #32
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	60f8      	str	r0, [r7, #12]
 80130bc:	60b9      	str	r1, [r7, #8]
 80130be:	607a      	str	r2, [r7, #4]
 80130c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80130c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80130c6:	6879      	ldr	r1, [r7, #4]
 80130c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80130cc:	440b      	add	r3, r1
 80130ce:	009b      	lsls	r3, r3, #2
 80130d0:	4413      	add	r3, r2
 80130d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80130d4:	69bb      	ldr	r3, [r7, #24]
 80130d6:	f023 0307 	bic.w	r3, r3, #7
 80130da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80130dc:	69bb      	ldr	r3, [r7, #24]
 80130de:	f003 0307 	and.w	r3, r3, #7
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d00c      	beq.n	8013100 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80130e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ea:	b672      	cpsid	i
 80130ec:	f383 8811 	msr	BASEPRI, r3
 80130f0:	f3bf 8f6f 	isb	sy
 80130f4:	f3bf 8f4f 	dsb	sy
 80130f8:	b662      	cpsie	i
 80130fa:	617b      	str	r3, [r7, #20]
}
 80130fc:	bf00      	nop
 80130fe:	e7fe      	b.n	80130fe <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d01f      	beq.n	8013146 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013106:	2300      	movs	r3, #0
 8013108:	61fb      	str	r3, [r7, #28]
 801310a:	e012      	b.n	8013132 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801310c:	68ba      	ldr	r2, [r7, #8]
 801310e:	69fb      	ldr	r3, [r7, #28]
 8013110:	4413      	add	r3, r2
 8013112:	7819      	ldrb	r1, [r3, #0]
 8013114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013116:	69fb      	ldr	r3, [r7, #28]
 8013118:	4413      	add	r3, r2
 801311a:	3334      	adds	r3, #52	; 0x34
 801311c:	460a      	mov	r2, r1
 801311e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013120:	68ba      	ldr	r2, [r7, #8]
 8013122:	69fb      	ldr	r3, [r7, #28]
 8013124:	4413      	add	r3, r2
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d006      	beq.n	801313a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801312c:	69fb      	ldr	r3, [r7, #28]
 801312e:	3301      	adds	r3, #1
 8013130:	61fb      	str	r3, [r7, #28]
 8013132:	69fb      	ldr	r3, [r7, #28]
 8013134:	2b0f      	cmp	r3, #15
 8013136:	d9e9      	bls.n	801310c <prvInitialiseNewTask+0x58>
 8013138:	e000      	b.n	801313c <prvInitialiseNewTask+0x88>
			{
				break;
 801313a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313e:	2200      	movs	r2, #0
 8013140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013144:	e003      	b.n	801314e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013148:	2200      	movs	r2, #0
 801314a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013150:	2b06      	cmp	r3, #6
 8013152:	d901      	bls.n	8013158 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013154:	2306      	movs	r3, #6
 8013156:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801315a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801315c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013162:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013166:	2200      	movs	r2, #0
 8013168:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801316c:	3304      	adds	r3, #4
 801316e:	4618      	mov	r0, r3
 8013170:	f7fe fe55 	bl	8011e1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013176:	3318      	adds	r3, #24
 8013178:	4618      	mov	r0, r3
 801317a:	f7fe fe50 	bl	8011e1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013182:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013186:	f1c3 0207 	rsb	r2, r3, #7
 801318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801318c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013192:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013196:	2200      	movs	r2, #0
 8013198:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801319e:	2200      	movs	r2, #0
 80131a0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80131a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131a6:	334c      	adds	r3, #76	; 0x4c
 80131a8:	2260      	movs	r2, #96	; 0x60
 80131aa:	2100      	movs	r1, #0
 80131ac:	4618      	mov	r0, r3
 80131ae:	f010 fcff 	bl	8023bb0 <memset>
 80131b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131b4:	4a0c      	ldr	r2, [pc, #48]	; (80131e8 <prvInitialiseNewTask+0x134>)
 80131b6:	651a      	str	r2, [r3, #80]	; 0x50
 80131b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ba:	4a0c      	ldr	r2, [pc, #48]	; (80131ec <prvInitialiseNewTask+0x138>)
 80131bc:	655a      	str	r2, [r3, #84]	; 0x54
 80131be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c0:	4a0b      	ldr	r2, [pc, #44]	; (80131f0 <prvInitialiseNewTask+0x13c>)
 80131c2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80131c4:	683a      	ldr	r2, [r7, #0]
 80131c6:	68f9      	ldr	r1, [r7, #12]
 80131c8:	69b8      	ldr	r0, [r7, #24]
 80131ca:	f001 f851 	bl	8014270 <pxPortInitialiseStack>
 80131ce:	4602      	mov	r2, r0
 80131d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80131d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d002      	beq.n	80131e0 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80131da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80131e0:	bf00      	nop
 80131e2:	3720      	adds	r7, #32
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}
 80131e8:	08028a58 	.word	0x08028a58
 80131ec:	08028a78 	.word	0x08028a78
 80131f0:	08028a38 	.word	0x08028a38

080131f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b082      	sub	sp, #8
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80131fc:	f001 f946 	bl	801448c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013200:	4b2a      	ldr	r3, [pc, #168]	; (80132ac <prvAddNewTaskToReadyList+0xb8>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	3301      	adds	r3, #1
 8013206:	4a29      	ldr	r2, [pc, #164]	; (80132ac <prvAddNewTaskToReadyList+0xb8>)
 8013208:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801320a:	4b29      	ldr	r3, [pc, #164]	; (80132b0 <prvAddNewTaskToReadyList+0xbc>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d109      	bne.n	8013226 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013212:	4a27      	ldr	r2, [pc, #156]	; (80132b0 <prvAddNewTaskToReadyList+0xbc>)
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013218:	4b24      	ldr	r3, [pc, #144]	; (80132ac <prvAddNewTaskToReadyList+0xb8>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	2b01      	cmp	r3, #1
 801321e:	d110      	bne.n	8013242 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013220:	f000 fd22 	bl	8013c68 <prvInitialiseTaskLists>
 8013224:	e00d      	b.n	8013242 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013226:	4b23      	ldr	r3, [pc, #140]	; (80132b4 <prvAddNewTaskToReadyList+0xc0>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d109      	bne.n	8013242 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801322e:	4b20      	ldr	r3, [pc, #128]	; (80132b0 <prvAddNewTaskToReadyList+0xbc>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013238:	429a      	cmp	r2, r3
 801323a:	d802      	bhi.n	8013242 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801323c:	4a1c      	ldr	r2, [pc, #112]	; (80132b0 <prvAddNewTaskToReadyList+0xbc>)
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013242:	4b1d      	ldr	r3, [pc, #116]	; (80132b8 <prvAddNewTaskToReadyList+0xc4>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	3301      	adds	r3, #1
 8013248:	4a1b      	ldr	r2, [pc, #108]	; (80132b8 <prvAddNewTaskToReadyList+0xc4>)
 801324a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013250:	2201      	movs	r2, #1
 8013252:	409a      	lsls	r2, r3
 8013254:	4b19      	ldr	r3, [pc, #100]	; (80132bc <prvAddNewTaskToReadyList+0xc8>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	4313      	orrs	r3, r2
 801325a:	4a18      	ldr	r2, [pc, #96]	; (80132bc <prvAddNewTaskToReadyList+0xc8>)
 801325c:	6013      	str	r3, [r2, #0]
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013262:	4613      	mov	r3, r2
 8013264:	009b      	lsls	r3, r3, #2
 8013266:	4413      	add	r3, r2
 8013268:	009b      	lsls	r3, r3, #2
 801326a:	4a15      	ldr	r2, [pc, #84]	; (80132c0 <prvAddNewTaskToReadyList+0xcc>)
 801326c:	441a      	add	r2, r3
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	3304      	adds	r3, #4
 8013272:	4619      	mov	r1, r3
 8013274:	4610      	mov	r0, r2
 8013276:	f7fe fddf 	bl	8011e38 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801327a:	f001 f93b 	bl	80144f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801327e:	4b0d      	ldr	r3, [pc, #52]	; (80132b4 <prvAddNewTaskToReadyList+0xc0>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d00e      	beq.n	80132a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013286:	4b0a      	ldr	r3, [pc, #40]	; (80132b0 <prvAddNewTaskToReadyList+0xbc>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013290:	429a      	cmp	r2, r3
 8013292:	d207      	bcs.n	80132a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013294:	4b0b      	ldr	r3, [pc, #44]	; (80132c4 <prvAddNewTaskToReadyList+0xd0>)
 8013296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801329a:	601a      	str	r2, [r3, #0]
 801329c:	f3bf 8f4f 	dsb	sy
 80132a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80132a4:	bf00      	nop
 80132a6:	3708      	adds	r7, #8
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	20006640 	.word	0x20006640
 80132b0:	20006540 	.word	0x20006540
 80132b4:	2000664c 	.word	0x2000664c
 80132b8:	2000665c 	.word	0x2000665c
 80132bc:	20006648 	.word	0x20006648
 80132c0:	20006544 	.word	0x20006544
 80132c4:	e000ed04 	.word	0xe000ed04

080132c8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b084      	sub	sp, #16
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80132d0:	f001 f8dc 	bl	801448c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d102      	bne.n	80132e0 <vTaskDelete+0x18>
 80132da:	4b3a      	ldr	r3, [pc, #232]	; (80133c4 <vTaskDelete+0xfc>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	e000      	b.n	80132e2 <vTaskDelete+0x1a>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	3304      	adds	r3, #4
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7fe fe02 	bl	8011ef2 <uxListRemove>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d115      	bne.n	8013320 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132f8:	4933      	ldr	r1, [pc, #204]	; (80133c8 <vTaskDelete+0x100>)
 80132fa:	4613      	mov	r3, r2
 80132fc:	009b      	lsls	r3, r3, #2
 80132fe:	4413      	add	r3, r2
 8013300:	009b      	lsls	r3, r3, #2
 8013302:	440b      	add	r3, r1
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d10a      	bne.n	8013320 <vTaskDelete+0x58>
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801330e:	2201      	movs	r2, #1
 8013310:	fa02 f303 	lsl.w	r3, r2, r3
 8013314:	43da      	mvns	r2, r3
 8013316:	4b2d      	ldr	r3, [pc, #180]	; (80133cc <vTaskDelete+0x104>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	4013      	ands	r3, r2
 801331c:	4a2b      	ldr	r2, [pc, #172]	; (80133cc <vTaskDelete+0x104>)
 801331e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013324:	2b00      	cmp	r3, #0
 8013326:	d004      	beq.n	8013332 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	3318      	adds	r3, #24
 801332c:	4618      	mov	r0, r3
 801332e:	f7fe fde0 	bl	8011ef2 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8013332:	4b27      	ldr	r3, [pc, #156]	; (80133d0 <vTaskDelete+0x108>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	3301      	adds	r3, #1
 8013338:	4a25      	ldr	r2, [pc, #148]	; (80133d0 <vTaskDelete+0x108>)
 801333a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801333c:	4b21      	ldr	r3, [pc, #132]	; (80133c4 <vTaskDelete+0xfc>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	68fa      	ldr	r2, [r7, #12]
 8013342:	429a      	cmp	r2, r3
 8013344:	d10b      	bne.n	801335e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	3304      	adds	r3, #4
 801334a:	4619      	mov	r1, r3
 801334c:	4821      	ldr	r0, [pc, #132]	; (80133d4 <vTaskDelete+0x10c>)
 801334e:	f7fe fd73 	bl	8011e38 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8013352:	4b21      	ldr	r3, [pc, #132]	; (80133d8 <vTaskDelete+0x110>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	3301      	adds	r3, #1
 8013358:	4a1f      	ldr	r2, [pc, #124]	; (80133d8 <vTaskDelete+0x110>)
 801335a:	6013      	str	r3, [r2, #0]
 801335c:	e009      	b.n	8013372 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801335e:	4b1f      	ldr	r3, [pc, #124]	; (80133dc <vTaskDelete+0x114>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	3b01      	subs	r3, #1
 8013364:	4a1d      	ldr	r2, [pc, #116]	; (80133dc <vTaskDelete+0x114>)
 8013366:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8013368:	68f8      	ldr	r0, [r7, #12]
 801336a:	f000 fceb 	bl	8013d44 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801336e:	f000 fd1f 	bl	8013db0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8013372:	f001 f8bf 	bl	80144f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8013376:	4b1a      	ldr	r3, [pc, #104]	; (80133e0 <vTaskDelete+0x118>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d01d      	beq.n	80133ba <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 801337e:	4b11      	ldr	r3, [pc, #68]	; (80133c4 <vTaskDelete+0xfc>)
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	68fa      	ldr	r2, [r7, #12]
 8013384:	429a      	cmp	r2, r3
 8013386:	d118      	bne.n	80133ba <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8013388:	4b16      	ldr	r3, [pc, #88]	; (80133e4 <vTaskDelete+0x11c>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d00c      	beq.n	80133aa <vTaskDelete+0xe2>
	__asm volatile
 8013390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013394:	b672      	cpsid	i
 8013396:	f383 8811 	msr	BASEPRI, r3
 801339a:	f3bf 8f6f 	isb	sy
 801339e:	f3bf 8f4f 	dsb	sy
 80133a2:	b662      	cpsie	i
 80133a4:	60bb      	str	r3, [r7, #8]
}
 80133a6:	bf00      	nop
 80133a8:	e7fe      	b.n	80133a8 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 80133aa:	4b0f      	ldr	r3, [pc, #60]	; (80133e8 <vTaskDelete+0x120>)
 80133ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133b0:	601a      	str	r2, [r3, #0]
 80133b2:	f3bf 8f4f 	dsb	sy
 80133b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80133ba:	bf00      	nop
 80133bc:	3710      	adds	r7, #16
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}
 80133c2:	bf00      	nop
 80133c4:	20006540 	.word	0x20006540
 80133c8:	20006544 	.word	0x20006544
 80133cc:	20006648 	.word	0x20006648
 80133d0:	2000665c 	.word	0x2000665c
 80133d4:	20006614 	.word	0x20006614
 80133d8:	20006628 	.word	0x20006628
 80133dc:	20006640 	.word	0x20006640
 80133e0:	2000664c 	.word	0x2000664c
 80133e4:	20006668 	.word	0x20006668
 80133e8:	e000ed04 	.word	0xe000ed04

080133ec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b08a      	sub	sp, #40	; 0x28
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
 80133f4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80133f6:	2300      	movs	r3, #0
 80133f8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d10c      	bne.n	801341a <vTaskDelayUntil+0x2e>
	__asm volatile
 8013400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013404:	b672      	cpsid	i
 8013406:	f383 8811 	msr	BASEPRI, r3
 801340a:	f3bf 8f6f 	isb	sy
 801340e:	f3bf 8f4f 	dsb	sy
 8013412:	b662      	cpsie	i
 8013414:	617b      	str	r3, [r7, #20]
}
 8013416:	bf00      	nop
 8013418:	e7fe      	b.n	8013418 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d10c      	bne.n	801343a <vTaskDelayUntil+0x4e>
	__asm volatile
 8013420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013424:	b672      	cpsid	i
 8013426:	f383 8811 	msr	BASEPRI, r3
 801342a:	f3bf 8f6f 	isb	sy
 801342e:	f3bf 8f4f 	dsb	sy
 8013432:	b662      	cpsie	i
 8013434:	613b      	str	r3, [r7, #16]
}
 8013436:	bf00      	nop
 8013438:	e7fe      	b.n	8013438 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 801343a:	4b2b      	ldr	r3, [pc, #172]	; (80134e8 <vTaskDelayUntil+0xfc>)
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d00c      	beq.n	801345c <vTaskDelayUntil+0x70>
	__asm volatile
 8013442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013446:	b672      	cpsid	i
 8013448:	f383 8811 	msr	BASEPRI, r3
 801344c:	f3bf 8f6f 	isb	sy
 8013450:	f3bf 8f4f 	dsb	sy
 8013454:	b662      	cpsie	i
 8013456:	60fb      	str	r3, [r7, #12]
}
 8013458:	bf00      	nop
 801345a:	e7fe      	b.n	801345a <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 801345c:	f000 f8ee 	bl	801363c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8013460:	4b22      	ldr	r3, [pc, #136]	; (80134ec <vTaskDelayUntil+0x100>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	683a      	ldr	r2, [r7, #0]
 801346c:	4413      	add	r3, r2
 801346e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	6a3a      	ldr	r2, [r7, #32]
 8013476:	429a      	cmp	r2, r3
 8013478:	d20b      	bcs.n	8013492 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	69fa      	ldr	r2, [r7, #28]
 8013480:	429a      	cmp	r2, r3
 8013482:	d211      	bcs.n	80134a8 <vTaskDelayUntil+0xbc>
 8013484:	69fa      	ldr	r2, [r7, #28]
 8013486:	6a3b      	ldr	r3, [r7, #32]
 8013488:	429a      	cmp	r2, r3
 801348a:	d90d      	bls.n	80134a8 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 801348c:	2301      	movs	r3, #1
 801348e:	627b      	str	r3, [r7, #36]	; 0x24
 8013490:	e00a      	b.n	80134a8 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	69fa      	ldr	r2, [r7, #28]
 8013498:	429a      	cmp	r2, r3
 801349a:	d303      	bcc.n	80134a4 <vTaskDelayUntil+0xb8>
 801349c:	69fa      	ldr	r2, [r7, #28]
 801349e:	6a3b      	ldr	r3, [r7, #32]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d901      	bls.n	80134a8 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80134a4:	2301      	movs	r3, #1
 80134a6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	69fa      	ldr	r2, [r7, #28]
 80134ac:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80134ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d006      	beq.n	80134c2 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80134b4:	69fa      	ldr	r2, [r7, #28]
 80134b6:	6a3b      	ldr	r3, [r7, #32]
 80134b8:	1ad3      	subs	r3, r2, r3
 80134ba:	2100      	movs	r1, #0
 80134bc:	4618      	mov	r0, r3
 80134be:	f000 fe71 	bl	80141a4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80134c2:	f000 f8c9 	bl	8013658 <xTaskResumeAll>
 80134c6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d107      	bne.n	80134de <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 80134ce:	4b08      	ldr	r3, [pc, #32]	; (80134f0 <vTaskDelayUntil+0x104>)
 80134d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134d4:	601a      	str	r2, [r3, #0]
 80134d6:	f3bf 8f4f 	dsb	sy
 80134da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80134de:	bf00      	nop
 80134e0:	3728      	adds	r7, #40	; 0x28
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}
 80134e6:	bf00      	nop
 80134e8:	20006668 	.word	0x20006668
 80134ec:	20006644 	.word	0x20006644
 80134f0:	e000ed04 	.word	0xe000ed04

080134f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b084      	sub	sp, #16
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80134fc:	2300      	movs	r3, #0
 80134fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d019      	beq.n	801353a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013506:	4b14      	ldr	r3, [pc, #80]	; (8013558 <vTaskDelay+0x64>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d00c      	beq.n	8013528 <vTaskDelay+0x34>
	__asm volatile
 801350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013512:	b672      	cpsid	i
 8013514:	f383 8811 	msr	BASEPRI, r3
 8013518:	f3bf 8f6f 	isb	sy
 801351c:	f3bf 8f4f 	dsb	sy
 8013520:	b662      	cpsie	i
 8013522:	60bb      	str	r3, [r7, #8]
}
 8013524:	bf00      	nop
 8013526:	e7fe      	b.n	8013526 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8013528:	f000 f888 	bl	801363c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801352c:	2100      	movs	r1, #0
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	f000 fe38 	bl	80141a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013534:	f000 f890 	bl	8013658 <xTaskResumeAll>
 8013538:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d107      	bne.n	8013550 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8013540:	4b06      	ldr	r3, [pc, #24]	; (801355c <vTaskDelay+0x68>)
 8013542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013546:	601a      	str	r2, [r3, #0]
 8013548:	f3bf 8f4f 	dsb	sy
 801354c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013550:	bf00      	nop
 8013552:	3710      	adds	r7, #16
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}
 8013558:	20006668 	.word	0x20006668
 801355c:	e000ed04 	.word	0xe000ed04

08013560 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b08a      	sub	sp, #40	; 0x28
 8013564:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013566:	2300      	movs	r3, #0
 8013568:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801356a:	2300      	movs	r3, #0
 801356c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801356e:	463a      	mov	r2, r7
 8013570:	1d39      	adds	r1, r7, #4
 8013572:	f107 0308 	add.w	r3, r7, #8
 8013576:	4618      	mov	r0, r3
 8013578:	f7f6 fc04 	bl	8009d84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801357c:	6839      	ldr	r1, [r7, #0]
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	68ba      	ldr	r2, [r7, #8]
 8013582:	9202      	str	r2, [sp, #8]
 8013584:	9301      	str	r3, [sp, #4]
 8013586:	2300      	movs	r3, #0
 8013588:	9300      	str	r3, [sp, #0]
 801358a:	2300      	movs	r3, #0
 801358c:	460a      	mov	r2, r1
 801358e:	4923      	ldr	r1, [pc, #140]	; (801361c <vTaskStartScheduler+0xbc>)
 8013590:	4823      	ldr	r0, [pc, #140]	; (8013620 <vTaskStartScheduler+0xc0>)
 8013592:	f7ff fce7 	bl	8012f64 <xTaskCreateStatic>
 8013596:	4603      	mov	r3, r0
 8013598:	4a22      	ldr	r2, [pc, #136]	; (8013624 <vTaskStartScheduler+0xc4>)
 801359a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801359c:	4b21      	ldr	r3, [pc, #132]	; (8013624 <vTaskStartScheduler+0xc4>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d002      	beq.n	80135aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80135a4:	2301      	movs	r3, #1
 80135a6:	617b      	str	r3, [r7, #20]
 80135a8:	e001      	b.n	80135ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80135aa:	2300      	movs	r3, #0
 80135ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80135ae:	697b      	ldr	r3, [r7, #20]
 80135b0:	2b01      	cmp	r3, #1
 80135b2:	d11d      	bne.n	80135f0 <vTaskStartScheduler+0x90>
	__asm volatile
 80135b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135b8:	b672      	cpsid	i
 80135ba:	f383 8811 	msr	BASEPRI, r3
 80135be:	f3bf 8f6f 	isb	sy
 80135c2:	f3bf 8f4f 	dsb	sy
 80135c6:	b662      	cpsie	i
 80135c8:	613b      	str	r3, [r7, #16]
}
 80135ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80135cc:	4b16      	ldr	r3, [pc, #88]	; (8013628 <vTaskStartScheduler+0xc8>)
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	334c      	adds	r3, #76	; 0x4c
 80135d2:	4a16      	ldr	r2, [pc, #88]	; (801362c <vTaskStartScheduler+0xcc>)
 80135d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80135d6:	4b16      	ldr	r3, [pc, #88]	; (8013630 <vTaskStartScheduler+0xd0>)
 80135d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80135de:	4b15      	ldr	r3, [pc, #84]	; (8013634 <vTaskStartScheduler+0xd4>)
 80135e0:	2201      	movs	r2, #1
 80135e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80135e4:	4b14      	ldr	r3, [pc, #80]	; (8013638 <vTaskStartScheduler+0xd8>)
 80135e6:	2200      	movs	r2, #0
 80135e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80135ea:	f000 fed1 	bl	8014390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80135ee:	e010      	b.n	8013612 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80135f6:	d10c      	bne.n	8013612 <vTaskStartScheduler+0xb2>
	__asm volatile
 80135f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135fc:	b672      	cpsid	i
 80135fe:	f383 8811 	msr	BASEPRI, r3
 8013602:	f3bf 8f6f 	isb	sy
 8013606:	f3bf 8f4f 	dsb	sy
 801360a:	b662      	cpsie	i
 801360c:	60fb      	str	r3, [r7, #12]
}
 801360e:	bf00      	nop
 8013610:	e7fe      	b.n	8013610 <vTaskStartScheduler+0xb0>
}
 8013612:	bf00      	nop
 8013614:	3718      	adds	r7, #24
 8013616:	46bd      	mov	sp, r7
 8013618:	bd80      	pop	{r7, pc}
 801361a:	bf00      	nop
 801361c:	08025318 	.word	0x08025318
 8013620:	08013c39 	.word	0x08013c39
 8013624:	20006664 	.word	0x20006664
 8013628:	20006540 	.word	0x20006540
 801362c:	2000003c 	.word	0x2000003c
 8013630:	20006660 	.word	0x20006660
 8013634:	2000664c 	.word	0x2000664c
 8013638:	20006644 	.word	0x20006644

0801363c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801363c:	b480      	push	{r7}
 801363e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013640:	4b04      	ldr	r3, [pc, #16]	; (8013654 <vTaskSuspendAll+0x18>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	3301      	adds	r3, #1
 8013646:	4a03      	ldr	r2, [pc, #12]	; (8013654 <vTaskSuspendAll+0x18>)
 8013648:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801364a:	bf00      	nop
 801364c:	46bd      	mov	sp, r7
 801364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013652:	4770      	bx	lr
 8013654:	20006668 	.word	0x20006668

08013658 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b084      	sub	sp, #16
 801365c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801365e:	2300      	movs	r3, #0
 8013660:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013662:	2300      	movs	r3, #0
 8013664:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013666:	4b42      	ldr	r3, [pc, #264]	; (8013770 <xTaskResumeAll+0x118>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d10c      	bne.n	8013688 <xTaskResumeAll+0x30>
	__asm volatile
 801366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013672:	b672      	cpsid	i
 8013674:	f383 8811 	msr	BASEPRI, r3
 8013678:	f3bf 8f6f 	isb	sy
 801367c:	f3bf 8f4f 	dsb	sy
 8013680:	b662      	cpsie	i
 8013682:	603b      	str	r3, [r7, #0]
}
 8013684:	bf00      	nop
 8013686:	e7fe      	b.n	8013686 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013688:	f000 ff00 	bl	801448c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801368c:	4b38      	ldr	r3, [pc, #224]	; (8013770 <xTaskResumeAll+0x118>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	3b01      	subs	r3, #1
 8013692:	4a37      	ldr	r2, [pc, #220]	; (8013770 <xTaskResumeAll+0x118>)
 8013694:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013696:	4b36      	ldr	r3, [pc, #216]	; (8013770 <xTaskResumeAll+0x118>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d161      	bne.n	8013762 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801369e:	4b35      	ldr	r3, [pc, #212]	; (8013774 <xTaskResumeAll+0x11c>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d05d      	beq.n	8013762 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80136a6:	e02e      	b.n	8013706 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136a8:	4b33      	ldr	r3, [pc, #204]	; (8013778 <xTaskResumeAll+0x120>)
 80136aa:	68db      	ldr	r3, [r3, #12]
 80136ac:	68db      	ldr	r3, [r3, #12]
 80136ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	3318      	adds	r3, #24
 80136b4:	4618      	mov	r0, r3
 80136b6:	f7fe fc1c 	bl	8011ef2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	3304      	adds	r3, #4
 80136be:	4618      	mov	r0, r3
 80136c0:	f7fe fc17 	bl	8011ef2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c8:	2201      	movs	r2, #1
 80136ca:	409a      	lsls	r2, r3
 80136cc:	4b2b      	ldr	r3, [pc, #172]	; (801377c <xTaskResumeAll+0x124>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	4313      	orrs	r3, r2
 80136d2:	4a2a      	ldr	r2, [pc, #168]	; (801377c <xTaskResumeAll+0x124>)
 80136d4:	6013      	str	r3, [r2, #0]
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136da:	4613      	mov	r3, r2
 80136dc:	009b      	lsls	r3, r3, #2
 80136de:	4413      	add	r3, r2
 80136e0:	009b      	lsls	r3, r3, #2
 80136e2:	4a27      	ldr	r2, [pc, #156]	; (8013780 <xTaskResumeAll+0x128>)
 80136e4:	441a      	add	r2, r3
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	3304      	adds	r3, #4
 80136ea:	4619      	mov	r1, r3
 80136ec:	4610      	mov	r0, r2
 80136ee:	f7fe fba3 	bl	8011e38 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136f6:	4b23      	ldr	r3, [pc, #140]	; (8013784 <xTaskResumeAll+0x12c>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136fc:	429a      	cmp	r2, r3
 80136fe:	d302      	bcc.n	8013706 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013700:	4b21      	ldr	r3, [pc, #132]	; (8013788 <xTaskResumeAll+0x130>)
 8013702:	2201      	movs	r2, #1
 8013704:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013706:	4b1c      	ldr	r3, [pc, #112]	; (8013778 <xTaskResumeAll+0x120>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d1cc      	bne.n	80136a8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d001      	beq.n	8013718 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013714:	f000 fb4c 	bl	8013db0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013718:	4b1c      	ldr	r3, [pc, #112]	; (801378c <xTaskResumeAll+0x134>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d010      	beq.n	8013746 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013724:	f000 f858 	bl	80137d8 <xTaskIncrementTick>
 8013728:	4603      	mov	r3, r0
 801372a:	2b00      	cmp	r3, #0
 801372c:	d002      	beq.n	8013734 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801372e:	4b16      	ldr	r3, [pc, #88]	; (8013788 <xTaskResumeAll+0x130>)
 8013730:	2201      	movs	r2, #1
 8013732:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	3b01      	subs	r3, #1
 8013738:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d1f1      	bne.n	8013724 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8013740:	4b12      	ldr	r3, [pc, #72]	; (801378c <xTaskResumeAll+0x134>)
 8013742:	2200      	movs	r2, #0
 8013744:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013746:	4b10      	ldr	r3, [pc, #64]	; (8013788 <xTaskResumeAll+0x130>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d009      	beq.n	8013762 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801374e:	2301      	movs	r3, #1
 8013750:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013752:	4b0f      	ldr	r3, [pc, #60]	; (8013790 <xTaskResumeAll+0x138>)
 8013754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013758:	601a      	str	r2, [r3, #0]
 801375a:	f3bf 8f4f 	dsb	sy
 801375e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013762:	f000 fec7 	bl	80144f4 <vPortExitCritical>

	return xAlreadyYielded;
 8013766:	68bb      	ldr	r3, [r7, #8]
}
 8013768:	4618      	mov	r0, r3
 801376a:	3710      	adds	r7, #16
 801376c:	46bd      	mov	sp, r7
 801376e:	bd80      	pop	{r7, pc}
 8013770:	20006668 	.word	0x20006668
 8013774:	20006640 	.word	0x20006640
 8013778:	20006600 	.word	0x20006600
 801377c:	20006648 	.word	0x20006648
 8013780:	20006544 	.word	0x20006544
 8013784:	20006540 	.word	0x20006540
 8013788:	20006654 	.word	0x20006654
 801378c:	20006650 	.word	0x20006650
 8013790:	e000ed04 	.word	0xe000ed04

08013794 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013794:	b480      	push	{r7}
 8013796:	b083      	sub	sp, #12
 8013798:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801379a:	4b05      	ldr	r3, [pc, #20]	; (80137b0 <xTaskGetTickCount+0x1c>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80137a0:	687b      	ldr	r3, [r7, #4]
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	370c      	adds	r7, #12
 80137a6:	46bd      	mov	sp, r7
 80137a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ac:	4770      	bx	lr
 80137ae:	bf00      	nop
 80137b0:	20006644 	.word	0x20006644

080137b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b082      	sub	sp, #8
 80137b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80137ba:	f000 ff4f 	bl	801465c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80137be:	2300      	movs	r3, #0
 80137c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80137c2:	4b04      	ldr	r3, [pc, #16]	; (80137d4 <xTaskGetTickCountFromISR+0x20>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80137c8:	683b      	ldr	r3, [r7, #0]
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3708      	adds	r7, #8
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop
 80137d4:	20006644 	.word	0x20006644

080137d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b086      	sub	sp, #24
 80137dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80137de:	2300      	movs	r3, #0
 80137e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80137e2:	4b4f      	ldr	r3, [pc, #316]	; (8013920 <xTaskIncrementTick+0x148>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	f040 808a 	bne.w	8013900 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80137ec:	4b4d      	ldr	r3, [pc, #308]	; (8013924 <xTaskIncrementTick+0x14c>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	3301      	adds	r3, #1
 80137f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80137f4:	4a4b      	ldr	r2, [pc, #300]	; (8013924 <xTaskIncrementTick+0x14c>)
 80137f6:	693b      	ldr	r3, [r7, #16]
 80137f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80137fa:	693b      	ldr	r3, [r7, #16]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d122      	bne.n	8013846 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8013800:	4b49      	ldr	r3, [pc, #292]	; (8013928 <xTaskIncrementTick+0x150>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d00c      	beq.n	8013824 <xTaskIncrementTick+0x4c>
	__asm volatile
 801380a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801380e:	b672      	cpsid	i
 8013810:	f383 8811 	msr	BASEPRI, r3
 8013814:	f3bf 8f6f 	isb	sy
 8013818:	f3bf 8f4f 	dsb	sy
 801381c:	b662      	cpsie	i
 801381e:	603b      	str	r3, [r7, #0]
}
 8013820:	bf00      	nop
 8013822:	e7fe      	b.n	8013822 <xTaskIncrementTick+0x4a>
 8013824:	4b40      	ldr	r3, [pc, #256]	; (8013928 <xTaskIncrementTick+0x150>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	60fb      	str	r3, [r7, #12]
 801382a:	4b40      	ldr	r3, [pc, #256]	; (801392c <xTaskIncrementTick+0x154>)
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	4a3e      	ldr	r2, [pc, #248]	; (8013928 <xTaskIncrementTick+0x150>)
 8013830:	6013      	str	r3, [r2, #0]
 8013832:	4a3e      	ldr	r2, [pc, #248]	; (801392c <xTaskIncrementTick+0x154>)
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	6013      	str	r3, [r2, #0]
 8013838:	4b3d      	ldr	r3, [pc, #244]	; (8013930 <xTaskIncrementTick+0x158>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	3301      	adds	r3, #1
 801383e:	4a3c      	ldr	r2, [pc, #240]	; (8013930 <xTaskIncrementTick+0x158>)
 8013840:	6013      	str	r3, [r2, #0]
 8013842:	f000 fab5 	bl	8013db0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013846:	4b3b      	ldr	r3, [pc, #236]	; (8013934 <xTaskIncrementTick+0x15c>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	693a      	ldr	r2, [r7, #16]
 801384c:	429a      	cmp	r2, r3
 801384e:	d348      	bcc.n	80138e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013850:	4b35      	ldr	r3, [pc, #212]	; (8013928 <xTaskIncrementTick+0x150>)
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d104      	bne.n	8013864 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801385a:	4b36      	ldr	r3, [pc, #216]	; (8013934 <xTaskIncrementTick+0x15c>)
 801385c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013860:	601a      	str	r2, [r3, #0]
					break;
 8013862:	e03e      	b.n	80138e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013864:	4b30      	ldr	r3, [pc, #192]	; (8013928 <xTaskIncrementTick+0x150>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	68db      	ldr	r3, [r3, #12]
 801386a:	68db      	ldr	r3, [r3, #12]
 801386c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	685b      	ldr	r3, [r3, #4]
 8013872:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013874:	693a      	ldr	r2, [r7, #16]
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	429a      	cmp	r2, r3
 801387a:	d203      	bcs.n	8013884 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801387c:	4a2d      	ldr	r2, [pc, #180]	; (8013934 <xTaskIncrementTick+0x15c>)
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013882:	e02e      	b.n	80138e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	3304      	adds	r3, #4
 8013888:	4618      	mov	r0, r3
 801388a:	f7fe fb32 	bl	8011ef2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013892:	2b00      	cmp	r3, #0
 8013894:	d004      	beq.n	80138a0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013896:	68bb      	ldr	r3, [r7, #8]
 8013898:	3318      	adds	r3, #24
 801389a:	4618      	mov	r0, r3
 801389c:	f7fe fb29 	bl	8011ef2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138a4:	2201      	movs	r2, #1
 80138a6:	409a      	lsls	r2, r3
 80138a8:	4b23      	ldr	r3, [pc, #140]	; (8013938 <xTaskIncrementTick+0x160>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	4313      	orrs	r3, r2
 80138ae:	4a22      	ldr	r2, [pc, #136]	; (8013938 <xTaskIncrementTick+0x160>)
 80138b0:	6013      	str	r3, [r2, #0]
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138b6:	4613      	mov	r3, r2
 80138b8:	009b      	lsls	r3, r3, #2
 80138ba:	4413      	add	r3, r2
 80138bc:	009b      	lsls	r3, r3, #2
 80138be:	4a1f      	ldr	r2, [pc, #124]	; (801393c <xTaskIncrementTick+0x164>)
 80138c0:	441a      	add	r2, r3
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	3304      	adds	r3, #4
 80138c6:	4619      	mov	r1, r3
 80138c8:	4610      	mov	r0, r2
 80138ca:	f7fe fab5 	bl	8011e38 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138d2:	4b1b      	ldr	r3, [pc, #108]	; (8013940 <xTaskIncrementTick+0x168>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138d8:	429a      	cmp	r2, r3
 80138da:	d3b9      	bcc.n	8013850 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80138dc:	2301      	movs	r3, #1
 80138de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80138e0:	e7b6      	b.n	8013850 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80138e2:	4b17      	ldr	r3, [pc, #92]	; (8013940 <xTaskIncrementTick+0x168>)
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138e8:	4914      	ldr	r1, [pc, #80]	; (801393c <xTaskIncrementTick+0x164>)
 80138ea:	4613      	mov	r3, r2
 80138ec:	009b      	lsls	r3, r3, #2
 80138ee:	4413      	add	r3, r2
 80138f0:	009b      	lsls	r3, r3, #2
 80138f2:	440b      	add	r3, r1
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	2b01      	cmp	r3, #1
 80138f8:	d907      	bls.n	801390a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80138fa:	2301      	movs	r3, #1
 80138fc:	617b      	str	r3, [r7, #20]
 80138fe:	e004      	b.n	801390a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013900:	4b10      	ldr	r3, [pc, #64]	; (8013944 <xTaskIncrementTick+0x16c>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	3301      	adds	r3, #1
 8013906:	4a0f      	ldr	r2, [pc, #60]	; (8013944 <xTaskIncrementTick+0x16c>)
 8013908:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801390a:	4b0f      	ldr	r3, [pc, #60]	; (8013948 <xTaskIncrementTick+0x170>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d001      	beq.n	8013916 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8013912:	2301      	movs	r3, #1
 8013914:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013916:	697b      	ldr	r3, [r7, #20]
}
 8013918:	4618      	mov	r0, r3
 801391a:	3718      	adds	r7, #24
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}
 8013920:	20006668 	.word	0x20006668
 8013924:	20006644 	.word	0x20006644
 8013928:	200065f8 	.word	0x200065f8
 801392c:	200065fc 	.word	0x200065fc
 8013930:	20006658 	.word	0x20006658
 8013934:	20006660 	.word	0x20006660
 8013938:	20006648 	.word	0x20006648
 801393c:	20006544 	.word	0x20006544
 8013940:	20006540 	.word	0x20006540
 8013944:	20006650 	.word	0x20006650
 8013948:	20006654 	.word	0x20006654

0801394c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801394c:	b480      	push	{r7}
 801394e:	b087      	sub	sp, #28
 8013950:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013952:	4b2a      	ldr	r3, [pc, #168]	; (80139fc <vTaskSwitchContext+0xb0>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d003      	beq.n	8013962 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801395a:	4b29      	ldr	r3, [pc, #164]	; (8013a00 <vTaskSwitchContext+0xb4>)
 801395c:	2201      	movs	r2, #1
 801395e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013960:	e046      	b.n	80139f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8013962:	4b27      	ldr	r3, [pc, #156]	; (8013a00 <vTaskSwitchContext+0xb4>)
 8013964:	2200      	movs	r2, #0
 8013966:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013968:	4b26      	ldr	r3, [pc, #152]	; (8013a04 <vTaskSwitchContext+0xb8>)
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	fab3 f383 	clz	r3, r3
 8013974:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013976:	7afb      	ldrb	r3, [r7, #11]
 8013978:	f1c3 031f 	rsb	r3, r3, #31
 801397c:	617b      	str	r3, [r7, #20]
 801397e:	4922      	ldr	r1, [pc, #136]	; (8013a08 <vTaskSwitchContext+0xbc>)
 8013980:	697a      	ldr	r2, [r7, #20]
 8013982:	4613      	mov	r3, r2
 8013984:	009b      	lsls	r3, r3, #2
 8013986:	4413      	add	r3, r2
 8013988:	009b      	lsls	r3, r3, #2
 801398a:	440b      	add	r3, r1
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d10c      	bne.n	80139ac <vTaskSwitchContext+0x60>
	__asm volatile
 8013992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013996:	b672      	cpsid	i
 8013998:	f383 8811 	msr	BASEPRI, r3
 801399c:	f3bf 8f6f 	isb	sy
 80139a0:	f3bf 8f4f 	dsb	sy
 80139a4:	b662      	cpsie	i
 80139a6:	607b      	str	r3, [r7, #4]
}
 80139a8:	bf00      	nop
 80139aa:	e7fe      	b.n	80139aa <vTaskSwitchContext+0x5e>
 80139ac:	697a      	ldr	r2, [r7, #20]
 80139ae:	4613      	mov	r3, r2
 80139b0:	009b      	lsls	r3, r3, #2
 80139b2:	4413      	add	r3, r2
 80139b4:	009b      	lsls	r3, r3, #2
 80139b6:	4a14      	ldr	r2, [pc, #80]	; (8013a08 <vTaskSwitchContext+0xbc>)
 80139b8:	4413      	add	r3, r2
 80139ba:	613b      	str	r3, [r7, #16]
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	685b      	ldr	r3, [r3, #4]
 80139c0:	685a      	ldr	r2, [r3, #4]
 80139c2:	693b      	ldr	r3, [r7, #16]
 80139c4:	605a      	str	r2, [r3, #4]
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	685a      	ldr	r2, [r3, #4]
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	3308      	adds	r3, #8
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d104      	bne.n	80139dc <vTaskSwitchContext+0x90>
 80139d2:	693b      	ldr	r3, [r7, #16]
 80139d4:	685b      	ldr	r3, [r3, #4]
 80139d6:	685a      	ldr	r2, [r3, #4]
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	605a      	str	r2, [r3, #4]
 80139dc:	693b      	ldr	r3, [r7, #16]
 80139de:	685b      	ldr	r3, [r3, #4]
 80139e0:	68db      	ldr	r3, [r3, #12]
 80139e2:	4a0a      	ldr	r2, [pc, #40]	; (8013a0c <vTaskSwitchContext+0xc0>)
 80139e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80139e6:	4b09      	ldr	r3, [pc, #36]	; (8013a0c <vTaskSwitchContext+0xc0>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	334c      	adds	r3, #76	; 0x4c
 80139ec:	4a08      	ldr	r2, [pc, #32]	; (8013a10 <vTaskSwitchContext+0xc4>)
 80139ee:	6013      	str	r3, [r2, #0]
}
 80139f0:	bf00      	nop
 80139f2:	371c      	adds	r7, #28
 80139f4:	46bd      	mov	sp, r7
 80139f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fa:	4770      	bx	lr
 80139fc:	20006668 	.word	0x20006668
 8013a00:	20006654 	.word	0x20006654
 8013a04:	20006648 	.word	0x20006648
 8013a08:	20006544 	.word	0x20006544
 8013a0c:	20006540 	.word	0x20006540
 8013a10:	2000003c 	.word	0x2000003c

08013a14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b084      	sub	sp, #16
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
 8013a1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d10c      	bne.n	8013a3e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8013a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a28:	b672      	cpsid	i
 8013a2a:	f383 8811 	msr	BASEPRI, r3
 8013a2e:	f3bf 8f6f 	isb	sy
 8013a32:	f3bf 8f4f 	dsb	sy
 8013a36:	b662      	cpsie	i
 8013a38:	60fb      	str	r3, [r7, #12]
}
 8013a3a:	bf00      	nop
 8013a3c:	e7fe      	b.n	8013a3c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013a3e:	4b07      	ldr	r3, [pc, #28]	; (8013a5c <vTaskPlaceOnEventList+0x48>)
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	3318      	adds	r3, #24
 8013a44:	4619      	mov	r1, r3
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f7fe fa1a 	bl	8011e80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013a4c:	2101      	movs	r1, #1
 8013a4e:	6838      	ldr	r0, [r7, #0]
 8013a50:	f000 fba8 	bl	80141a4 <prvAddCurrentTaskToDelayedList>
}
 8013a54:	bf00      	nop
 8013a56:	3710      	adds	r7, #16
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}
 8013a5c:	20006540 	.word	0x20006540

08013a60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b086      	sub	sp, #24
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	68db      	ldr	r3, [r3, #12]
 8013a6c:	68db      	ldr	r3, [r3, #12]
 8013a6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d10c      	bne.n	8013a90 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8013a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a7a:	b672      	cpsid	i
 8013a7c:	f383 8811 	msr	BASEPRI, r3
 8013a80:	f3bf 8f6f 	isb	sy
 8013a84:	f3bf 8f4f 	dsb	sy
 8013a88:	b662      	cpsie	i
 8013a8a:	60fb      	str	r3, [r7, #12]
}
 8013a8c:	bf00      	nop
 8013a8e:	e7fe      	b.n	8013a8e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	3318      	adds	r3, #24
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7fe fa2c 	bl	8011ef2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a9a:	4b1d      	ldr	r3, [pc, #116]	; (8013b10 <xTaskRemoveFromEventList+0xb0>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d11c      	bne.n	8013adc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	3304      	adds	r3, #4
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7fe fa23 	bl	8011ef2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013aac:	693b      	ldr	r3, [r7, #16]
 8013aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ab0:	2201      	movs	r2, #1
 8013ab2:	409a      	lsls	r2, r3
 8013ab4:	4b17      	ldr	r3, [pc, #92]	; (8013b14 <xTaskRemoveFromEventList+0xb4>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	4313      	orrs	r3, r2
 8013aba:	4a16      	ldr	r2, [pc, #88]	; (8013b14 <xTaskRemoveFromEventList+0xb4>)
 8013abc:	6013      	str	r3, [r2, #0]
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ac2:	4613      	mov	r3, r2
 8013ac4:	009b      	lsls	r3, r3, #2
 8013ac6:	4413      	add	r3, r2
 8013ac8:	009b      	lsls	r3, r3, #2
 8013aca:	4a13      	ldr	r2, [pc, #76]	; (8013b18 <xTaskRemoveFromEventList+0xb8>)
 8013acc:	441a      	add	r2, r3
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	3304      	adds	r3, #4
 8013ad2:	4619      	mov	r1, r3
 8013ad4:	4610      	mov	r0, r2
 8013ad6:	f7fe f9af 	bl	8011e38 <vListInsertEnd>
 8013ada:	e005      	b.n	8013ae8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013adc:	693b      	ldr	r3, [r7, #16]
 8013ade:	3318      	adds	r3, #24
 8013ae0:	4619      	mov	r1, r3
 8013ae2:	480e      	ldr	r0, [pc, #56]	; (8013b1c <xTaskRemoveFromEventList+0xbc>)
 8013ae4:	f7fe f9a8 	bl	8011e38 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013ae8:	693b      	ldr	r3, [r7, #16]
 8013aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aec:	4b0c      	ldr	r3, [pc, #48]	; (8013b20 <xTaskRemoveFromEventList+0xc0>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013af2:	429a      	cmp	r2, r3
 8013af4:	d905      	bls.n	8013b02 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013af6:	2301      	movs	r3, #1
 8013af8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013afa:	4b0a      	ldr	r3, [pc, #40]	; (8013b24 <xTaskRemoveFromEventList+0xc4>)
 8013afc:	2201      	movs	r2, #1
 8013afe:	601a      	str	r2, [r3, #0]
 8013b00:	e001      	b.n	8013b06 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8013b02:	2300      	movs	r3, #0
 8013b04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013b06:	697b      	ldr	r3, [r7, #20]
}
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3718      	adds	r7, #24
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}
 8013b10:	20006668 	.word	0x20006668
 8013b14:	20006648 	.word	0x20006648
 8013b18:	20006544 	.word	0x20006544
 8013b1c:	20006600 	.word	0x20006600
 8013b20:	20006540 	.word	0x20006540
 8013b24:	20006654 	.word	0x20006654

08013b28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013b28:	b480      	push	{r7}
 8013b2a:	b083      	sub	sp, #12
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013b30:	4b06      	ldr	r3, [pc, #24]	; (8013b4c <vTaskInternalSetTimeOutState+0x24>)
 8013b32:	681a      	ldr	r2, [r3, #0]
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013b38:	4b05      	ldr	r3, [pc, #20]	; (8013b50 <vTaskInternalSetTimeOutState+0x28>)
 8013b3a:	681a      	ldr	r2, [r3, #0]
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	605a      	str	r2, [r3, #4]
}
 8013b40:	bf00      	nop
 8013b42:	370c      	adds	r7, #12
 8013b44:	46bd      	mov	sp, r7
 8013b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4a:	4770      	bx	lr
 8013b4c:	20006658 	.word	0x20006658
 8013b50:	20006644 	.word	0x20006644

08013b54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b088      	sub	sp, #32
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
 8013b5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d10c      	bne.n	8013b7e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8013b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b68:	b672      	cpsid	i
 8013b6a:	f383 8811 	msr	BASEPRI, r3
 8013b6e:	f3bf 8f6f 	isb	sy
 8013b72:	f3bf 8f4f 	dsb	sy
 8013b76:	b662      	cpsie	i
 8013b78:	613b      	str	r3, [r7, #16]
}
 8013b7a:	bf00      	nop
 8013b7c:	e7fe      	b.n	8013b7c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8013b7e:	683b      	ldr	r3, [r7, #0]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d10c      	bne.n	8013b9e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8013b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b88:	b672      	cpsid	i
 8013b8a:	f383 8811 	msr	BASEPRI, r3
 8013b8e:	f3bf 8f6f 	isb	sy
 8013b92:	f3bf 8f4f 	dsb	sy
 8013b96:	b662      	cpsie	i
 8013b98:	60fb      	str	r3, [r7, #12]
}
 8013b9a:	bf00      	nop
 8013b9c:	e7fe      	b.n	8013b9c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8013b9e:	f000 fc75 	bl	801448c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013ba2:	4b1d      	ldr	r3, [pc, #116]	; (8013c18 <xTaskCheckForTimeOut+0xc4>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	685b      	ldr	r3, [r3, #4]
 8013bac:	69ba      	ldr	r2, [r7, #24]
 8013bae:	1ad3      	subs	r3, r2, r3
 8013bb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013bba:	d102      	bne.n	8013bc2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	61fb      	str	r3, [r7, #28]
 8013bc0:	e023      	b.n	8013c0a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681a      	ldr	r2, [r3, #0]
 8013bc6:	4b15      	ldr	r3, [pc, #84]	; (8013c1c <xTaskCheckForTimeOut+0xc8>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	d007      	beq.n	8013bde <xTaskCheckForTimeOut+0x8a>
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	685b      	ldr	r3, [r3, #4]
 8013bd2:	69ba      	ldr	r2, [r7, #24]
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d302      	bcc.n	8013bde <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013bd8:	2301      	movs	r3, #1
 8013bda:	61fb      	str	r3, [r7, #28]
 8013bdc:	e015      	b.n	8013c0a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013bde:	683b      	ldr	r3, [r7, #0]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	697a      	ldr	r2, [r7, #20]
 8013be4:	429a      	cmp	r2, r3
 8013be6:	d20b      	bcs.n	8013c00 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	681a      	ldr	r2, [r3, #0]
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	1ad2      	subs	r2, r2, r3
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f7ff ff97 	bl	8013b28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	61fb      	str	r3, [r7, #28]
 8013bfe:	e004      	b.n	8013c0a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8013c00:	683b      	ldr	r3, [r7, #0]
 8013c02:	2200      	movs	r2, #0
 8013c04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013c06:	2301      	movs	r3, #1
 8013c08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013c0a:	f000 fc73 	bl	80144f4 <vPortExitCritical>

	return xReturn;
 8013c0e:	69fb      	ldr	r3, [r7, #28]
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	3720      	adds	r7, #32
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}
 8013c18:	20006644 	.word	0x20006644
 8013c1c:	20006658 	.word	0x20006658

08013c20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013c20:	b480      	push	{r7}
 8013c22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013c24:	4b03      	ldr	r3, [pc, #12]	; (8013c34 <vTaskMissedYield+0x14>)
 8013c26:	2201      	movs	r2, #1
 8013c28:	601a      	str	r2, [r3, #0]
}
 8013c2a:	bf00      	nop
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c32:	4770      	bx	lr
 8013c34:	20006654 	.word	0x20006654

08013c38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b082      	sub	sp, #8
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013c40:	f000 f852 	bl	8013ce8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013c44:	4b06      	ldr	r3, [pc, #24]	; (8013c60 <prvIdleTask+0x28>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	2b01      	cmp	r3, #1
 8013c4a:	d9f9      	bls.n	8013c40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013c4c:	4b05      	ldr	r3, [pc, #20]	; (8013c64 <prvIdleTask+0x2c>)
 8013c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c52:	601a      	str	r2, [r3, #0]
 8013c54:	f3bf 8f4f 	dsb	sy
 8013c58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013c5c:	e7f0      	b.n	8013c40 <prvIdleTask+0x8>
 8013c5e:	bf00      	nop
 8013c60:	20006544 	.word	0x20006544
 8013c64:	e000ed04 	.word	0xe000ed04

08013c68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013c6e:	2300      	movs	r3, #0
 8013c70:	607b      	str	r3, [r7, #4]
 8013c72:	e00c      	b.n	8013c8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013c74:	687a      	ldr	r2, [r7, #4]
 8013c76:	4613      	mov	r3, r2
 8013c78:	009b      	lsls	r3, r3, #2
 8013c7a:	4413      	add	r3, r2
 8013c7c:	009b      	lsls	r3, r3, #2
 8013c7e:	4a12      	ldr	r2, [pc, #72]	; (8013cc8 <prvInitialiseTaskLists+0x60>)
 8013c80:	4413      	add	r3, r2
 8013c82:	4618      	mov	r0, r3
 8013c84:	f7fe f8ab 	bl	8011dde <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	3301      	adds	r3, #1
 8013c8c:	607b      	str	r3, [r7, #4]
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	2b06      	cmp	r3, #6
 8013c92:	d9ef      	bls.n	8013c74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013c94:	480d      	ldr	r0, [pc, #52]	; (8013ccc <prvInitialiseTaskLists+0x64>)
 8013c96:	f7fe f8a2 	bl	8011dde <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013c9a:	480d      	ldr	r0, [pc, #52]	; (8013cd0 <prvInitialiseTaskLists+0x68>)
 8013c9c:	f7fe f89f 	bl	8011dde <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013ca0:	480c      	ldr	r0, [pc, #48]	; (8013cd4 <prvInitialiseTaskLists+0x6c>)
 8013ca2:	f7fe f89c 	bl	8011dde <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013ca6:	480c      	ldr	r0, [pc, #48]	; (8013cd8 <prvInitialiseTaskLists+0x70>)
 8013ca8:	f7fe f899 	bl	8011dde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013cac:	480b      	ldr	r0, [pc, #44]	; (8013cdc <prvInitialiseTaskLists+0x74>)
 8013cae:	f7fe f896 	bl	8011dde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013cb2:	4b0b      	ldr	r3, [pc, #44]	; (8013ce0 <prvInitialiseTaskLists+0x78>)
 8013cb4:	4a05      	ldr	r2, [pc, #20]	; (8013ccc <prvInitialiseTaskLists+0x64>)
 8013cb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013cb8:	4b0a      	ldr	r3, [pc, #40]	; (8013ce4 <prvInitialiseTaskLists+0x7c>)
 8013cba:	4a05      	ldr	r2, [pc, #20]	; (8013cd0 <prvInitialiseTaskLists+0x68>)
 8013cbc:	601a      	str	r2, [r3, #0]
}
 8013cbe:	bf00      	nop
 8013cc0:	3708      	adds	r7, #8
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}
 8013cc6:	bf00      	nop
 8013cc8:	20006544 	.word	0x20006544
 8013ccc:	200065d0 	.word	0x200065d0
 8013cd0:	200065e4 	.word	0x200065e4
 8013cd4:	20006600 	.word	0x20006600
 8013cd8:	20006614 	.word	0x20006614
 8013cdc:	2000662c 	.word	0x2000662c
 8013ce0:	200065f8 	.word	0x200065f8
 8013ce4:	200065fc 	.word	0x200065fc

08013ce8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013cee:	e019      	b.n	8013d24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013cf0:	f000 fbcc 	bl	801448c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013cf4:	4b10      	ldr	r3, [pc, #64]	; (8013d38 <prvCheckTasksWaitingTermination+0x50>)
 8013cf6:	68db      	ldr	r3, [r3, #12]
 8013cf8:	68db      	ldr	r3, [r3, #12]
 8013cfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	3304      	adds	r3, #4
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7fe f8f6 	bl	8011ef2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013d06:	4b0d      	ldr	r3, [pc, #52]	; (8013d3c <prvCheckTasksWaitingTermination+0x54>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	3b01      	subs	r3, #1
 8013d0c:	4a0b      	ldr	r2, [pc, #44]	; (8013d3c <prvCheckTasksWaitingTermination+0x54>)
 8013d0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013d10:	4b0b      	ldr	r3, [pc, #44]	; (8013d40 <prvCheckTasksWaitingTermination+0x58>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	3b01      	subs	r3, #1
 8013d16:	4a0a      	ldr	r2, [pc, #40]	; (8013d40 <prvCheckTasksWaitingTermination+0x58>)
 8013d18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013d1a:	f000 fbeb 	bl	80144f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f000 f810 	bl	8013d44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013d24:	4b06      	ldr	r3, [pc, #24]	; (8013d40 <prvCheckTasksWaitingTermination+0x58>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d1e1      	bne.n	8013cf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013d2c:	bf00      	nop
 8013d2e:	bf00      	nop
 8013d30:	3708      	adds	r7, #8
 8013d32:	46bd      	mov	sp, r7
 8013d34:	bd80      	pop	{r7, pc}
 8013d36:	bf00      	nop
 8013d38:	20006614 	.word	0x20006614
 8013d3c:	20006640 	.word	0x20006640
 8013d40:	20006628 	.word	0x20006628

08013d44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b084      	sub	sp, #16
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	334c      	adds	r3, #76	; 0x4c
 8013d50:	4618      	mov	r0, r3
 8013d52:	f010 f879 	bl	8023e48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d108      	bne.n	8013d72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7ed fb36 	bl	80013d6 <vPortFree>
				vPortFree( pxTCB );
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	f7ed fb33 	bl	80013d6 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013d70:	e01a      	b.n	8013da8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013d78:	2b01      	cmp	r3, #1
 8013d7a:	d103      	bne.n	8013d84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f7ed fb2a 	bl	80013d6 <vPortFree>
	}
 8013d82:	e011      	b.n	8013da8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013d8a:	2b02      	cmp	r3, #2
 8013d8c:	d00c      	beq.n	8013da8 <prvDeleteTCB+0x64>
	__asm volatile
 8013d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d92:	b672      	cpsid	i
 8013d94:	f383 8811 	msr	BASEPRI, r3
 8013d98:	f3bf 8f6f 	isb	sy
 8013d9c:	f3bf 8f4f 	dsb	sy
 8013da0:	b662      	cpsie	i
 8013da2:	60fb      	str	r3, [r7, #12]
}
 8013da4:	bf00      	nop
 8013da6:	e7fe      	b.n	8013da6 <prvDeleteTCB+0x62>
	}
 8013da8:	bf00      	nop
 8013daa:	3710      	adds	r7, #16
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}

08013db0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013db0:	b480      	push	{r7}
 8013db2:	b083      	sub	sp, #12
 8013db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013db6:	4b0c      	ldr	r3, [pc, #48]	; (8013de8 <prvResetNextTaskUnblockTime+0x38>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d104      	bne.n	8013dca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013dc0:	4b0a      	ldr	r3, [pc, #40]	; (8013dec <prvResetNextTaskUnblockTime+0x3c>)
 8013dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013dc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013dc8:	e008      	b.n	8013ddc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013dca:	4b07      	ldr	r3, [pc, #28]	; (8013de8 <prvResetNextTaskUnblockTime+0x38>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	68db      	ldr	r3, [r3, #12]
 8013dd0:	68db      	ldr	r3, [r3, #12]
 8013dd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	685b      	ldr	r3, [r3, #4]
 8013dd8:	4a04      	ldr	r2, [pc, #16]	; (8013dec <prvResetNextTaskUnblockTime+0x3c>)
 8013dda:	6013      	str	r3, [r2, #0]
}
 8013ddc:	bf00      	nop
 8013dde:	370c      	adds	r7, #12
 8013de0:	46bd      	mov	sp, r7
 8013de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de6:	4770      	bx	lr
 8013de8:	200065f8 	.word	0x200065f8
 8013dec:	20006660 	.word	0x20006660

08013df0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013df0:	b480      	push	{r7}
 8013df2:	b083      	sub	sp, #12
 8013df4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013df6:	4b0b      	ldr	r3, [pc, #44]	; (8013e24 <xTaskGetSchedulerState+0x34>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d102      	bne.n	8013e04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013dfe:	2301      	movs	r3, #1
 8013e00:	607b      	str	r3, [r7, #4]
 8013e02:	e008      	b.n	8013e16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e04:	4b08      	ldr	r3, [pc, #32]	; (8013e28 <xTaskGetSchedulerState+0x38>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d102      	bne.n	8013e12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013e0c:	2302      	movs	r3, #2
 8013e0e:	607b      	str	r3, [r7, #4]
 8013e10:	e001      	b.n	8013e16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013e12:	2300      	movs	r3, #0
 8013e14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013e16:	687b      	ldr	r3, [r7, #4]
	}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	370c      	adds	r7, #12
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e22:	4770      	bx	lr
 8013e24:	2000664c 	.word	0x2000664c
 8013e28:	20006668 	.word	0x20006668

08013e2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b084      	sub	sp, #16
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013e38:	2300      	movs	r3, #0
 8013e3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d069      	beq.n	8013f16 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e46:	4b36      	ldr	r3, [pc, #216]	; (8013f20 <xTaskPriorityInherit+0xf4>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d259      	bcs.n	8013f04 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013e50:	68bb      	ldr	r3, [r7, #8]
 8013e52:	699b      	ldr	r3, [r3, #24]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	db06      	blt.n	8013e66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e58:	4b31      	ldr	r3, [pc, #196]	; (8013f20 <xTaskPriorityInherit+0xf4>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e5e:	f1c3 0207 	rsb	r2, r3, #7
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	6959      	ldr	r1, [r3, #20]
 8013e6a:	68bb      	ldr	r3, [r7, #8]
 8013e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e6e:	4613      	mov	r3, r2
 8013e70:	009b      	lsls	r3, r3, #2
 8013e72:	4413      	add	r3, r2
 8013e74:	009b      	lsls	r3, r3, #2
 8013e76:	4a2b      	ldr	r2, [pc, #172]	; (8013f24 <xTaskPriorityInherit+0xf8>)
 8013e78:	4413      	add	r3, r2
 8013e7a:	4299      	cmp	r1, r3
 8013e7c:	d13a      	bne.n	8013ef4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	3304      	adds	r3, #4
 8013e82:	4618      	mov	r0, r3
 8013e84:	f7fe f835 	bl	8011ef2 <uxListRemove>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d115      	bne.n	8013eba <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e92:	4924      	ldr	r1, [pc, #144]	; (8013f24 <xTaskPriorityInherit+0xf8>)
 8013e94:	4613      	mov	r3, r2
 8013e96:	009b      	lsls	r3, r3, #2
 8013e98:	4413      	add	r3, r2
 8013e9a:	009b      	lsls	r3, r3, #2
 8013e9c:	440b      	add	r3, r1
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d10a      	bne.n	8013eba <xTaskPriorityInherit+0x8e>
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ea8:	2201      	movs	r2, #1
 8013eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8013eae:	43da      	mvns	r2, r3
 8013eb0:	4b1d      	ldr	r3, [pc, #116]	; (8013f28 <xTaskPriorityInherit+0xfc>)
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	4013      	ands	r3, r2
 8013eb6:	4a1c      	ldr	r2, [pc, #112]	; (8013f28 <xTaskPriorityInherit+0xfc>)
 8013eb8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013eba:	4b19      	ldr	r3, [pc, #100]	; (8013f20 <xTaskPriorityInherit+0xf4>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ec8:	2201      	movs	r2, #1
 8013eca:	409a      	lsls	r2, r3
 8013ecc:	4b16      	ldr	r3, [pc, #88]	; (8013f28 <xTaskPriorityInherit+0xfc>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	4313      	orrs	r3, r2
 8013ed2:	4a15      	ldr	r2, [pc, #84]	; (8013f28 <xTaskPriorityInherit+0xfc>)
 8013ed4:	6013      	str	r3, [r2, #0]
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eda:	4613      	mov	r3, r2
 8013edc:	009b      	lsls	r3, r3, #2
 8013ede:	4413      	add	r3, r2
 8013ee0:	009b      	lsls	r3, r3, #2
 8013ee2:	4a10      	ldr	r2, [pc, #64]	; (8013f24 <xTaskPriorityInherit+0xf8>)
 8013ee4:	441a      	add	r2, r3
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	3304      	adds	r3, #4
 8013eea:	4619      	mov	r1, r3
 8013eec:	4610      	mov	r0, r2
 8013eee:	f7fd ffa3 	bl	8011e38 <vListInsertEnd>
 8013ef2:	e004      	b.n	8013efe <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013ef4:	4b0a      	ldr	r3, [pc, #40]	; (8013f20 <xTaskPriorityInherit+0xf4>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013efa:	68bb      	ldr	r3, [r7, #8]
 8013efc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013efe:	2301      	movs	r3, #1
 8013f00:	60fb      	str	r3, [r7, #12]
 8013f02:	e008      	b.n	8013f16 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f08:	4b05      	ldr	r3, [pc, #20]	; (8013f20 <xTaskPriorityInherit+0xf4>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d201      	bcs.n	8013f16 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013f12:	2301      	movs	r3, #1
 8013f14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013f16:	68fb      	ldr	r3, [r7, #12]
	}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3710      	adds	r7, #16
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}
 8013f20:	20006540 	.word	0x20006540
 8013f24:	20006544 	.word	0x20006544
 8013f28:	20006648 	.word	0x20006648

08013f2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b086      	sub	sp, #24
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013f38:	2300      	movs	r3, #0
 8013f3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d072      	beq.n	8014028 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013f42:	4b3c      	ldr	r3, [pc, #240]	; (8014034 <xTaskPriorityDisinherit+0x108>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	693a      	ldr	r2, [r7, #16]
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d00c      	beq.n	8013f66 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8013f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f50:	b672      	cpsid	i
 8013f52:	f383 8811 	msr	BASEPRI, r3
 8013f56:	f3bf 8f6f 	isb	sy
 8013f5a:	f3bf 8f4f 	dsb	sy
 8013f5e:	b662      	cpsie	i
 8013f60:	60fb      	str	r3, [r7, #12]
}
 8013f62:	bf00      	nop
 8013f64:	e7fe      	b.n	8013f64 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8013f66:	693b      	ldr	r3, [r7, #16]
 8013f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d10c      	bne.n	8013f88 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8013f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f72:	b672      	cpsid	i
 8013f74:	f383 8811 	msr	BASEPRI, r3
 8013f78:	f3bf 8f6f 	isb	sy
 8013f7c:	f3bf 8f4f 	dsb	sy
 8013f80:	b662      	cpsie	i
 8013f82:	60bb      	str	r3, [r7, #8]
}
 8013f84:	bf00      	nop
 8013f86:	e7fe      	b.n	8013f86 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8013f88:	693b      	ldr	r3, [r7, #16]
 8013f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f8c:	1e5a      	subs	r2, r3, #1
 8013f8e:	693b      	ldr	r3, [r7, #16]
 8013f90:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013f92:	693b      	ldr	r3, [r7, #16]
 8013f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f96:	693b      	ldr	r3, [r7, #16]
 8013f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	d044      	beq.n	8014028 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013f9e:	693b      	ldr	r3, [r7, #16]
 8013fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d140      	bne.n	8014028 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013fa6:	693b      	ldr	r3, [r7, #16]
 8013fa8:	3304      	adds	r3, #4
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7fd ffa1 	bl	8011ef2 <uxListRemove>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d115      	bne.n	8013fe2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fba:	491f      	ldr	r1, [pc, #124]	; (8014038 <xTaskPriorityDisinherit+0x10c>)
 8013fbc:	4613      	mov	r3, r2
 8013fbe:	009b      	lsls	r3, r3, #2
 8013fc0:	4413      	add	r3, r2
 8013fc2:	009b      	lsls	r3, r3, #2
 8013fc4:	440b      	add	r3, r1
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d10a      	bne.n	8013fe2 <xTaskPriorityDisinherit+0xb6>
 8013fcc:	693b      	ldr	r3, [r7, #16]
 8013fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fd0:	2201      	movs	r2, #1
 8013fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8013fd6:	43da      	mvns	r2, r3
 8013fd8:	4b18      	ldr	r3, [pc, #96]	; (801403c <xTaskPriorityDisinherit+0x110>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	4013      	ands	r3, r2
 8013fde:	4a17      	ldr	r2, [pc, #92]	; (801403c <xTaskPriorityDisinherit+0x110>)
 8013fe0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013fe2:	693b      	ldr	r3, [r7, #16]
 8013fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013fe6:	693b      	ldr	r3, [r7, #16]
 8013fe8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013fea:	693b      	ldr	r3, [r7, #16]
 8013fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fee:	f1c3 0207 	rsb	r2, r3, #7
 8013ff2:	693b      	ldr	r3, [r7, #16]
 8013ff4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013ff6:	693b      	ldr	r3, [r7, #16]
 8013ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ffa:	2201      	movs	r2, #1
 8013ffc:	409a      	lsls	r2, r3
 8013ffe:	4b0f      	ldr	r3, [pc, #60]	; (801403c <xTaskPriorityDisinherit+0x110>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	4313      	orrs	r3, r2
 8014004:	4a0d      	ldr	r2, [pc, #52]	; (801403c <xTaskPriorityDisinherit+0x110>)
 8014006:	6013      	str	r3, [r2, #0]
 8014008:	693b      	ldr	r3, [r7, #16]
 801400a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801400c:	4613      	mov	r3, r2
 801400e:	009b      	lsls	r3, r3, #2
 8014010:	4413      	add	r3, r2
 8014012:	009b      	lsls	r3, r3, #2
 8014014:	4a08      	ldr	r2, [pc, #32]	; (8014038 <xTaskPriorityDisinherit+0x10c>)
 8014016:	441a      	add	r2, r3
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	3304      	adds	r3, #4
 801401c:	4619      	mov	r1, r3
 801401e:	4610      	mov	r0, r2
 8014020:	f7fd ff0a 	bl	8011e38 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014024:	2301      	movs	r3, #1
 8014026:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014028:	697b      	ldr	r3, [r7, #20]
	}
 801402a:	4618      	mov	r0, r3
 801402c:	3718      	adds	r7, #24
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}
 8014032:	bf00      	nop
 8014034:	20006540 	.word	0x20006540
 8014038:	20006544 	.word	0x20006544
 801403c:	20006648 	.word	0x20006648

08014040 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014040:	b580      	push	{r7, lr}
 8014042:	b088      	sub	sp, #32
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801404e:	2301      	movs	r3, #1
 8014050:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2b00      	cmp	r3, #0
 8014056:	f000 8087 	beq.w	8014168 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801405a:	69bb      	ldr	r3, [r7, #24]
 801405c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801405e:	2b00      	cmp	r3, #0
 8014060:	d10c      	bne.n	801407c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8014062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014066:	b672      	cpsid	i
 8014068:	f383 8811 	msr	BASEPRI, r3
 801406c:	f3bf 8f6f 	isb	sy
 8014070:	f3bf 8f4f 	dsb	sy
 8014074:	b662      	cpsie	i
 8014076:	60fb      	str	r3, [r7, #12]
}
 8014078:	bf00      	nop
 801407a:	e7fe      	b.n	801407a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801407c:	69bb      	ldr	r3, [r7, #24]
 801407e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014080:	683a      	ldr	r2, [r7, #0]
 8014082:	429a      	cmp	r2, r3
 8014084:	d902      	bls.n	801408c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	61fb      	str	r3, [r7, #28]
 801408a:	e002      	b.n	8014092 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801408c:	69bb      	ldr	r3, [r7, #24]
 801408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014090:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014092:	69bb      	ldr	r3, [r7, #24]
 8014094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014096:	69fa      	ldr	r2, [r7, #28]
 8014098:	429a      	cmp	r2, r3
 801409a:	d065      	beq.n	8014168 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801409c:	69bb      	ldr	r3, [r7, #24]
 801409e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80140a0:	697a      	ldr	r2, [r7, #20]
 80140a2:	429a      	cmp	r2, r3
 80140a4:	d160      	bne.n	8014168 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80140a6:	4b32      	ldr	r3, [pc, #200]	; (8014170 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	69ba      	ldr	r2, [r7, #24]
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d10c      	bne.n	80140ca <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 80140b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140b4:	b672      	cpsid	i
 80140b6:	f383 8811 	msr	BASEPRI, r3
 80140ba:	f3bf 8f6f 	isb	sy
 80140be:	f3bf 8f4f 	dsb	sy
 80140c2:	b662      	cpsie	i
 80140c4:	60bb      	str	r3, [r7, #8]
}
 80140c6:	bf00      	nop
 80140c8:	e7fe      	b.n	80140c8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80140ca:	69bb      	ldr	r3, [r7, #24]
 80140cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140ce:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80140d0:	69bb      	ldr	r3, [r7, #24]
 80140d2:	69fa      	ldr	r2, [r7, #28]
 80140d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80140d6:	69bb      	ldr	r3, [r7, #24]
 80140d8:	699b      	ldr	r3, [r3, #24]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	db04      	blt.n	80140e8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140de:	69fb      	ldr	r3, [r7, #28]
 80140e0:	f1c3 0207 	rsb	r2, r3, #7
 80140e4:	69bb      	ldr	r3, [r7, #24]
 80140e6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80140e8:	69bb      	ldr	r3, [r7, #24]
 80140ea:	6959      	ldr	r1, [r3, #20]
 80140ec:	693a      	ldr	r2, [r7, #16]
 80140ee:	4613      	mov	r3, r2
 80140f0:	009b      	lsls	r3, r3, #2
 80140f2:	4413      	add	r3, r2
 80140f4:	009b      	lsls	r3, r3, #2
 80140f6:	4a1f      	ldr	r2, [pc, #124]	; (8014174 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80140f8:	4413      	add	r3, r2
 80140fa:	4299      	cmp	r1, r3
 80140fc:	d134      	bne.n	8014168 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80140fe:	69bb      	ldr	r3, [r7, #24]
 8014100:	3304      	adds	r3, #4
 8014102:	4618      	mov	r0, r3
 8014104:	f7fd fef5 	bl	8011ef2 <uxListRemove>
 8014108:	4603      	mov	r3, r0
 801410a:	2b00      	cmp	r3, #0
 801410c:	d115      	bne.n	801413a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801410e:	69bb      	ldr	r3, [r7, #24]
 8014110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014112:	4918      	ldr	r1, [pc, #96]	; (8014174 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014114:	4613      	mov	r3, r2
 8014116:	009b      	lsls	r3, r3, #2
 8014118:	4413      	add	r3, r2
 801411a:	009b      	lsls	r3, r3, #2
 801411c:	440b      	add	r3, r1
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d10a      	bne.n	801413a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8014124:	69bb      	ldr	r3, [r7, #24]
 8014126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014128:	2201      	movs	r2, #1
 801412a:	fa02 f303 	lsl.w	r3, r2, r3
 801412e:	43da      	mvns	r2, r3
 8014130:	4b11      	ldr	r3, [pc, #68]	; (8014178 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	4013      	ands	r3, r2
 8014136:	4a10      	ldr	r2, [pc, #64]	; (8014178 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014138:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801413e:	2201      	movs	r2, #1
 8014140:	409a      	lsls	r2, r3
 8014142:	4b0d      	ldr	r3, [pc, #52]	; (8014178 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	4313      	orrs	r3, r2
 8014148:	4a0b      	ldr	r2, [pc, #44]	; (8014178 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801414a:	6013      	str	r3, [r2, #0]
 801414c:	69bb      	ldr	r3, [r7, #24]
 801414e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014150:	4613      	mov	r3, r2
 8014152:	009b      	lsls	r3, r3, #2
 8014154:	4413      	add	r3, r2
 8014156:	009b      	lsls	r3, r3, #2
 8014158:	4a06      	ldr	r2, [pc, #24]	; (8014174 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801415a:	441a      	add	r2, r3
 801415c:	69bb      	ldr	r3, [r7, #24]
 801415e:	3304      	adds	r3, #4
 8014160:	4619      	mov	r1, r3
 8014162:	4610      	mov	r0, r2
 8014164:	f7fd fe68 	bl	8011e38 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014168:	bf00      	nop
 801416a:	3720      	adds	r7, #32
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}
 8014170:	20006540 	.word	0x20006540
 8014174:	20006544 	.word	0x20006544
 8014178:	20006648 	.word	0x20006648

0801417c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801417c:	b480      	push	{r7}
 801417e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014180:	4b07      	ldr	r3, [pc, #28]	; (80141a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d004      	beq.n	8014192 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014188:	4b05      	ldr	r3, [pc, #20]	; (80141a0 <pvTaskIncrementMutexHeldCount+0x24>)
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801418e:	3201      	adds	r2, #1
 8014190:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8014192:	4b03      	ldr	r3, [pc, #12]	; (80141a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8014194:	681b      	ldr	r3, [r3, #0]
	}
 8014196:	4618      	mov	r0, r3
 8014198:	46bd      	mov	sp, r7
 801419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419e:	4770      	bx	lr
 80141a0:	20006540 	.word	0x20006540

080141a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b084      	sub	sp, #16
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
 80141ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80141ae:	4b29      	ldr	r3, [pc, #164]	; (8014254 <prvAddCurrentTaskToDelayedList+0xb0>)
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80141b4:	4b28      	ldr	r3, [pc, #160]	; (8014258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	3304      	adds	r3, #4
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7fd fe99 	bl	8011ef2 <uxListRemove>
 80141c0:	4603      	mov	r3, r0
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d10b      	bne.n	80141de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80141c6:	4b24      	ldr	r3, [pc, #144]	; (8014258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141cc:	2201      	movs	r2, #1
 80141ce:	fa02 f303 	lsl.w	r3, r2, r3
 80141d2:	43da      	mvns	r2, r3
 80141d4:	4b21      	ldr	r3, [pc, #132]	; (801425c <prvAddCurrentTaskToDelayedList+0xb8>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	4013      	ands	r3, r2
 80141da:	4a20      	ldr	r2, [pc, #128]	; (801425c <prvAddCurrentTaskToDelayedList+0xb8>)
 80141dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141e4:	d10a      	bne.n	80141fc <prvAddCurrentTaskToDelayedList+0x58>
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d007      	beq.n	80141fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80141ec:	4b1a      	ldr	r3, [pc, #104]	; (8014258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	3304      	adds	r3, #4
 80141f2:	4619      	mov	r1, r3
 80141f4:	481a      	ldr	r0, [pc, #104]	; (8014260 <prvAddCurrentTaskToDelayedList+0xbc>)
 80141f6:	f7fd fe1f 	bl	8011e38 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80141fa:	e026      	b.n	801424a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80141fc:	68fa      	ldr	r2, [r7, #12]
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	4413      	add	r3, r2
 8014202:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014204:	4b14      	ldr	r3, [pc, #80]	; (8014258 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	68ba      	ldr	r2, [r7, #8]
 801420a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801420c:	68ba      	ldr	r2, [r7, #8]
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	429a      	cmp	r2, r3
 8014212:	d209      	bcs.n	8014228 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014214:	4b13      	ldr	r3, [pc, #76]	; (8014264 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014216:	681a      	ldr	r2, [r3, #0]
 8014218:	4b0f      	ldr	r3, [pc, #60]	; (8014258 <prvAddCurrentTaskToDelayedList+0xb4>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	3304      	adds	r3, #4
 801421e:	4619      	mov	r1, r3
 8014220:	4610      	mov	r0, r2
 8014222:	f7fd fe2d 	bl	8011e80 <vListInsert>
}
 8014226:	e010      	b.n	801424a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014228:	4b0f      	ldr	r3, [pc, #60]	; (8014268 <prvAddCurrentTaskToDelayedList+0xc4>)
 801422a:	681a      	ldr	r2, [r3, #0]
 801422c:	4b0a      	ldr	r3, [pc, #40]	; (8014258 <prvAddCurrentTaskToDelayedList+0xb4>)
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	3304      	adds	r3, #4
 8014232:	4619      	mov	r1, r3
 8014234:	4610      	mov	r0, r2
 8014236:	f7fd fe23 	bl	8011e80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801423a:	4b0c      	ldr	r3, [pc, #48]	; (801426c <prvAddCurrentTaskToDelayedList+0xc8>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	68ba      	ldr	r2, [r7, #8]
 8014240:	429a      	cmp	r2, r3
 8014242:	d202      	bcs.n	801424a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014244:	4a09      	ldr	r2, [pc, #36]	; (801426c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	6013      	str	r3, [r2, #0]
}
 801424a:	bf00      	nop
 801424c:	3710      	adds	r7, #16
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}
 8014252:	bf00      	nop
 8014254:	20006644 	.word	0x20006644
 8014258:	20006540 	.word	0x20006540
 801425c:	20006648 	.word	0x20006648
 8014260:	2000662c 	.word	0x2000662c
 8014264:	200065fc 	.word	0x200065fc
 8014268:	200065f8 	.word	0x200065f8
 801426c:	20006660 	.word	0x20006660

08014270 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014270:	b480      	push	{r7}
 8014272:	b085      	sub	sp, #20
 8014274:	af00      	add	r7, sp, #0
 8014276:	60f8      	str	r0, [r7, #12]
 8014278:	60b9      	str	r1, [r7, #8]
 801427a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	3b04      	subs	r3, #4
 8014280:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014288:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	3b04      	subs	r3, #4
 801428e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014290:	68bb      	ldr	r3, [r7, #8]
 8014292:	f023 0201 	bic.w	r2, r3, #1
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	3b04      	subs	r3, #4
 801429e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80142a0:	4a0c      	ldr	r2, [pc, #48]	; (80142d4 <pxPortInitialiseStack+0x64>)
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	3b14      	subs	r3, #20
 80142aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80142ac:	687a      	ldr	r2, [r7, #4]
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	3b04      	subs	r3, #4
 80142b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	f06f 0202 	mvn.w	r2, #2
 80142be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	3b20      	subs	r3, #32
 80142c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80142c6:	68fb      	ldr	r3, [r7, #12]
}
 80142c8:	4618      	mov	r0, r3
 80142ca:	3714      	adds	r7, #20
 80142cc:	46bd      	mov	sp, r7
 80142ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d2:	4770      	bx	lr
 80142d4:	080142d9 	.word	0x080142d9

080142d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80142d8:	b480      	push	{r7}
 80142da:	b085      	sub	sp, #20
 80142dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80142de:	2300      	movs	r3, #0
 80142e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80142e2:	4b14      	ldr	r3, [pc, #80]	; (8014334 <prvTaskExitError+0x5c>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142ea:	d00c      	beq.n	8014306 <prvTaskExitError+0x2e>
	__asm volatile
 80142ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f0:	b672      	cpsid	i
 80142f2:	f383 8811 	msr	BASEPRI, r3
 80142f6:	f3bf 8f6f 	isb	sy
 80142fa:	f3bf 8f4f 	dsb	sy
 80142fe:	b662      	cpsie	i
 8014300:	60fb      	str	r3, [r7, #12]
}
 8014302:	bf00      	nop
 8014304:	e7fe      	b.n	8014304 <prvTaskExitError+0x2c>
	__asm volatile
 8014306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801430a:	b672      	cpsid	i
 801430c:	f383 8811 	msr	BASEPRI, r3
 8014310:	f3bf 8f6f 	isb	sy
 8014314:	f3bf 8f4f 	dsb	sy
 8014318:	b662      	cpsie	i
 801431a:	60bb      	str	r3, [r7, #8]
}
 801431c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801431e:	bf00      	nop
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d0fc      	beq.n	8014320 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014326:	bf00      	nop
 8014328:	bf00      	nop
 801432a:	3714      	adds	r7, #20
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr
 8014334:	20000028 	.word	0x20000028
	...

08014340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014340:	4b07      	ldr	r3, [pc, #28]	; (8014360 <pxCurrentTCBConst2>)
 8014342:	6819      	ldr	r1, [r3, #0]
 8014344:	6808      	ldr	r0, [r1, #0]
 8014346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801434a:	f380 8809 	msr	PSP, r0
 801434e:	f3bf 8f6f 	isb	sy
 8014352:	f04f 0000 	mov.w	r0, #0
 8014356:	f380 8811 	msr	BASEPRI, r0
 801435a:	4770      	bx	lr
 801435c:	f3af 8000 	nop.w

08014360 <pxCurrentTCBConst2>:
 8014360:	20006540 	.word	0x20006540
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014364:	bf00      	nop
 8014366:	bf00      	nop

08014368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014368:	4808      	ldr	r0, [pc, #32]	; (801438c <prvPortStartFirstTask+0x24>)
 801436a:	6800      	ldr	r0, [r0, #0]
 801436c:	6800      	ldr	r0, [r0, #0]
 801436e:	f380 8808 	msr	MSP, r0
 8014372:	f04f 0000 	mov.w	r0, #0
 8014376:	f380 8814 	msr	CONTROL, r0
 801437a:	b662      	cpsie	i
 801437c:	b661      	cpsie	f
 801437e:	f3bf 8f4f 	dsb	sy
 8014382:	f3bf 8f6f 	isb	sy
 8014386:	df00      	svc	0
 8014388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801438a:	bf00      	nop
 801438c:	e000ed08 	.word	0xe000ed08

08014390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b084      	sub	sp, #16
 8014394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014396:	4b37      	ldr	r3, [pc, #220]	; (8014474 <xPortStartScheduler+0xe4>)
 8014398:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	b2db      	uxtb	r3, r3
 80143a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	22ff      	movs	r2, #255	; 0xff
 80143a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	b2db      	uxtb	r3, r3
 80143ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80143b0:	78fb      	ldrb	r3, [r7, #3]
 80143b2:	b2db      	uxtb	r3, r3
 80143b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80143b8:	b2da      	uxtb	r2, r3
 80143ba:	4b2f      	ldr	r3, [pc, #188]	; (8014478 <xPortStartScheduler+0xe8>)
 80143bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80143be:	4b2f      	ldr	r3, [pc, #188]	; (801447c <xPortStartScheduler+0xec>)
 80143c0:	2207      	movs	r2, #7
 80143c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80143c4:	e009      	b.n	80143da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80143c6:	4b2d      	ldr	r3, [pc, #180]	; (801447c <xPortStartScheduler+0xec>)
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	3b01      	subs	r3, #1
 80143cc:	4a2b      	ldr	r2, [pc, #172]	; (801447c <xPortStartScheduler+0xec>)
 80143ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80143d0:	78fb      	ldrb	r3, [r7, #3]
 80143d2:	b2db      	uxtb	r3, r3
 80143d4:	005b      	lsls	r3, r3, #1
 80143d6:	b2db      	uxtb	r3, r3
 80143d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80143da:	78fb      	ldrb	r3, [r7, #3]
 80143dc:	b2db      	uxtb	r3, r3
 80143de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80143e2:	2b80      	cmp	r3, #128	; 0x80
 80143e4:	d0ef      	beq.n	80143c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80143e6:	4b25      	ldr	r3, [pc, #148]	; (801447c <xPortStartScheduler+0xec>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	f1c3 0307 	rsb	r3, r3, #7
 80143ee:	2b04      	cmp	r3, #4
 80143f0:	d00c      	beq.n	801440c <xPortStartScheduler+0x7c>
	__asm volatile
 80143f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143f6:	b672      	cpsid	i
 80143f8:	f383 8811 	msr	BASEPRI, r3
 80143fc:	f3bf 8f6f 	isb	sy
 8014400:	f3bf 8f4f 	dsb	sy
 8014404:	b662      	cpsie	i
 8014406:	60bb      	str	r3, [r7, #8]
}
 8014408:	bf00      	nop
 801440a:	e7fe      	b.n	801440a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801440c:	4b1b      	ldr	r3, [pc, #108]	; (801447c <xPortStartScheduler+0xec>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	021b      	lsls	r3, r3, #8
 8014412:	4a1a      	ldr	r2, [pc, #104]	; (801447c <xPortStartScheduler+0xec>)
 8014414:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014416:	4b19      	ldr	r3, [pc, #100]	; (801447c <xPortStartScheduler+0xec>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801441e:	4a17      	ldr	r2, [pc, #92]	; (801447c <xPortStartScheduler+0xec>)
 8014420:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	b2da      	uxtb	r2, r3
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801442a:	4b15      	ldr	r3, [pc, #84]	; (8014480 <xPortStartScheduler+0xf0>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	4a14      	ldr	r2, [pc, #80]	; (8014480 <xPortStartScheduler+0xf0>)
 8014430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014434:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014436:	4b12      	ldr	r3, [pc, #72]	; (8014480 <xPortStartScheduler+0xf0>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	4a11      	ldr	r2, [pc, #68]	; (8014480 <xPortStartScheduler+0xf0>)
 801443c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014440:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014442:	f000 f8dd 	bl	8014600 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014446:	4b0f      	ldr	r3, [pc, #60]	; (8014484 <xPortStartScheduler+0xf4>)
 8014448:	2200      	movs	r2, #0
 801444a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801444c:	f000 f8fc 	bl	8014648 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014450:	4b0d      	ldr	r3, [pc, #52]	; (8014488 <xPortStartScheduler+0xf8>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	4a0c      	ldr	r2, [pc, #48]	; (8014488 <xPortStartScheduler+0xf8>)
 8014456:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801445a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801445c:	f7ff ff84 	bl	8014368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014460:	f7ff fa74 	bl	801394c <vTaskSwitchContext>
	prvTaskExitError();
 8014464:	f7ff ff38 	bl	80142d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014468:	2300      	movs	r3, #0
}
 801446a:	4618      	mov	r0, r3
 801446c:	3710      	adds	r7, #16
 801446e:	46bd      	mov	sp, r7
 8014470:	bd80      	pop	{r7, pc}
 8014472:	bf00      	nop
 8014474:	e000e400 	.word	0xe000e400
 8014478:	2000666c 	.word	0x2000666c
 801447c:	20006670 	.word	0x20006670
 8014480:	e000ed20 	.word	0xe000ed20
 8014484:	20000028 	.word	0x20000028
 8014488:	e000ef34 	.word	0xe000ef34

0801448c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801448c:	b480      	push	{r7}
 801448e:	b083      	sub	sp, #12
 8014490:	af00      	add	r7, sp, #0
	__asm volatile
 8014492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014496:	b672      	cpsid	i
 8014498:	f383 8811 	msr	BASEPRI, r3
 801449c:	f3bf 8f6f 	isb	sy
 80144a0:	f3bf 8f4f 	dsb	sy
 80144a4:	b662      	cpsie	i
 80144a6:	607b      	str	r3, [r7, #4]
}
 80144a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80144aa:	4b10      	ldr	r3, [pc, #64]	; (80144ec <vPortEnterCritical+0x60>)
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	3301      	adds	r3, #1
 80144b0:	4a0e      	ldr	r2, [pc, #56]	; (80144ec <vPortEnterCritical+0x60>)
 80144b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80144b4:	4b0d      	ldr	r3, [pc, #52]	; (80144ec <vPortEnterCritical+0x60>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	2b01      	cmp	r3, #1
 80144ba:	d111      	bne.n	80144e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80144bc:	4b0c      	ldr	r3, [pc, #48]	; (80144f0 <vPortEnterCritical+0x64>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	b2db      	uxtb	r3, r3
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d00c      	beq.n	80144e0 <vPortEnterCritical+0x54>
	__asm volatile
 80144c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ca:	b672      	cpsid	i
 80144cc:	f383 8811 	msr	BASEPRI, r3
 80144d0:	f3bf 8f6f 	isb	sy
 80144d4:	f3bf 8f4f 	dsb	sy
 80144d8:	b662      	cpsie	i
 80144da:	603b      	str	r3, [r7, #0]
}
 80144dc:	bf00      	nop
 80144de:	e7fe      	b.n	80144de <vPortEnterCritical+0x52>
	}
}
 80144e0:	bf00      	nop
 80144e2:	370c      	adds	r7, #12
 80144e4:	46bd      	mov	sp, r7
 80144e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ea:	4770      	bx	lr
 80144ec:	20000028 	.word	0x20000028
 80144f0:	e000ed04 	.word	0xe000ed04

080144f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80144f4:	b480      	push	{r7}
 80144f6:	b083      	sub	sp, #12
 80144f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80144fa:	4b13      	ldr	r3, [pc, #76]	; (8014548 <vPortExitCritical+0x54>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d10c      	bne.n	801451c <vPortExitCritical+0x28>
	__asm volatile
 8014502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014506:	b672      	cpsid	i
 8014508:	f383 8811 	msr	BASEPRI, r3
 801450c:	f3bf 8f6f 	isb	sy
 8014510:	f3bf 8f4f 	dsb	sy
 8014514:	b662      	cpsie	i
 8014516:	607b      	str	r3, [r7, #4]
}
 8014518:	bf00      	nop
 801451a:	e7fe      	b.n	801451a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801451c:	4b0a      	ldr	r3, [pc, #40]	; (8014548 <vPortExitCritical+0x54>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	3b01      	subs	r3, #1
 8014522:	4a09      	ldr	r2, [pc, #36]	; (8014548 <vPortExitCritical+0x54>)
 8014524:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014526:	4b08      	ldr	r3, [pc, #32]	; (8014548 <vPortExitCritical+0x54>)
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d105      	bne.n	801453a <vPortExitCritical+0x46>
 801452e:	2300      	movs	r3, #0
 8014530:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014532:	683b      	ldr	r3, [r7, #0]
 8014534:	f383 8811 	msr	BASEPRI, r3
}
 8014538:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801453a:	bf00      	nop
 801453c:	370c      	adds	r7, #12
 801453e:	46bd      	mov	sp, r7
 8014540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014544:	4770      	bx	lr
 8014546:	bf00      	nop
 8014548:	20000028 	.word	0x20000028
 801454c:	00000000 	.word	0x00000000

08014550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014550:	f3ef 8009 	mrs	r0, PSP
 8014554:	f3bf 8f6f 	isb	sy
 8014558:	4b15      	ldr	r3, [pc, #84]	; (80145b0 <pxCurrentTCBConst>)
 801455a:	681a      	ldr	r2, [r3, #0]
 801455c:	f01e 0f10 	tst.w	lr, #16
 8014560:	bf08      	it	eq
 8014562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801456a:	6010      	str	r0, [r2, #0]
 801456c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014574:	b672      	cpsid	i
 8014576:	f380 8811 	msr	BASEPRI, r0
 801457a:	f3bf 8f4f 	dsb	sy
 801457e:	f3bf 8f6f 	isb	sy
 8014582:	b662      	cpsie	i
 8014584:	f7ff f9e2 	bl	801394c <vTaskSwitchContext>
 8014588:	f04f 0000 	mov.w	r0, #0
 801458c:	f380 8811 	msr	BASEPRI, r0
 8014590:	bc09      	pop	{r0, r3}
 8014592:	6819      	ldr	r1, [r3, #0]
 8014594:	6808      	ldr	r0, [r1, #0]
 8014596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801459a:	f01e 0f10 	tst.w	lr, #16
 801459e:	bf08      	it	eq
 80145a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80145a4:	f380 8809 	msr	PSP, r0
 80145a8:	f3bf 8f6f 	isb	sy
 80145ac:	4770      	bx	lr
 80145ae:	bf00      	nop

080145b0 <pxCurrentTCBConst>:
 80145b0:	20006540 	.word	0x20006540
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80145b4:	bf00      	nop
 80145b6:	bf00      	nop

080145b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0
	__asm volatile
 80145be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145c2:	b672      	cpsid	i
 80145c4:	f383 8811 	msr	BASEPRI, r3
 80145c8:	f3bf 8f6f 	isb	sy
 80145cc:	f3bf 8f4f 	dsb	sy
 80145d0:	b662      	cpsie	i
 80145d2:	607b      	str	r3, [r7, #4]
}
 80145d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80145d6:	f7ff f8ff 	bl	80137d8 <xTaskIncrementTick>
 80145da:	4603      	mov	r3, r0
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d003      	beq.n	80145e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80145e0:	4b06      	ldr	r3, [pc, #24]	; (80145fc <SysTick_Handler+0x44>)
 80145e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145e6:	601a      	str	r2, [r3, #0]
 80145e8:	2300      	movs	r3, #0
 80145ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	f383 8811 	msr	BASEPRI, r3
}
 80145f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80145f4:	bf00      	nop
 80145f6:	3708      	adds	r7, #8
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	e000ed04 	.word	0xe000ed04

08014600 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014600:	b480      	push	{r7}
 8014602:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014604:	4b0b      	ldr	r3, [pc, #44]	; (8014634 <vPortSetupTimerInterrupt+0x34>)
 8014606:	2200      	movs	r2, #0
 8014608:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801460a:	4b0b      	ldr	r3, [pc, #44]	; (8014638 <vPortSetupTimerInterrupt+0x38>)
 801460c:	2200      	movs	r2, #0
 801460e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014610:	4b0a      	ldr	r3, [pc, #40]	; (801463c <vPortSetupTimerInterrupt+0x3c>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	4a0a      	ldr	r2, [pc, #40]	; (8014640 <vPortSetupTimerInterrupt+0x40>)
 8014616:	fba2 2303 	umull	r2, r3, r2, r3
 801461a:	099b      	lsrs	r3, r3, #6
 801461c:	4a09      	ldr	r2, [pc, #36]	; (8014644 <vPortSetupTimerInterrupt+0x44>)
 801461e:	3b01      	subs	r3, #1
 8014620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014622:	4b04      	ldr	r3, [pc, #16]	; (8014634 <vPortSetupTimerInterrupt+0x34>)
 8014624:	2207      	movs	r2, #7
 8014626:	601a      	str	r2, [r3, #0]
}
 8014628:	bf00      	nop
 801462a:	46bd      	mov	sp, r7
 801462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014630:	4770      	bx	lr
 8014632:	bf00      	nop
 8014634:	e000e010 	.word	0xe000e010
 8014638:	e000e018 	.word	0xe000e018
 801463c:	20000008 	.word	0x20000008
 8014640:	10624dd3 	.word	0x10624dd3
 8014644:	e000e014 	.word	0xe000e014

08014648 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014648:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014658 <vPortEnableVFP+0x10>
 801464c:	6801      	ldr	r1, [r0, #0]
 801464e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014652:	6001      	str	r1, [r0, #0]
 8014654:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014656:	bf00      	nop
 8014658:	e000ed88 	.word	0xe000ed88

0801465c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801465c:	b480      	push	{r7}
 801465e:	b085      	sub	sp, #20
 8014660:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014662:	f3ef 8305 	mrs	r3, IPSR
 8014666:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	2b0f      	cmp	r3, #15
 801466c:	d916      	bls.n	801469c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801466e:	4a19      	ldr	r2, [pc, #100]	; (80146d4 <vPortValidateInterruptPriority+0x78>)
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	4413      	add	r3, r2
 8014674:	781b      	ldrb	r3, [r3, #0]
 8014676:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014678:	4b17      	ldr	r3, [pc, #92]	; (80146d8 <vPortValidateInterruptPriority+0x7c>)
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	7afa      	ldrb	r2, [r7, #11]
 801467e:	429a      	cmp	r2, r3
 8014680:	d20c      	bcs.n	801469c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8014682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014686:	b672      	cpsid	i
 8014688:	f383 8811 	msr	BASEPRI, r3
 801468c:	f3bf 8f6f 	isb	sy
 8014690:	f3bf 8f4f 	dsb	sy
 8014694:	b662      	cpsie	i
 8014696:	607b      	str	r3, [r7, #4]
}
 8014698:	bf00      	nop
 801469a:	e7fe      	b.n	801469a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801469c:	4b0f      	ldr	r3, [pc, #60]	; (80146dc <vPortValidateInterruptPriority+0x80>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80146a4:	4b0e      	ldr	r3, [pc, #56]	; (80146e0 <vPortValidateInterruptPriority+0x84>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d90c      	bls.n	80146c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80146ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b0:	b672      	cpsid	i
 80146b2:	f383 8811 	msr	BASEPRI, r3
 80146b6:	f3bf 8f6f 	isb	sy
 80146ba:	f3bf 8f4f 	dsb	sy
 80146be:	b662      	cpsie	i
 80146c0:	603b      	str	r3, [r7, #0]
}
 80146c2:	bf00      	nop
 80146c4:	e7fe      	b.n	80146c4 <vPortValidateInterruptPriority+0x68>
	}
 80146c6:	bf00      	nop
 80146c8:	3714      	adds	r7, #20
 80146ca:	46bd      	mov	sp, r7
 80146cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d0:	4770      	bx	lr
 80146d2:	bf00      	nop
 80146d4:	e000e3f0 	.word	0xe000e3f0
 80146d8:	2000666c 	.word	0x2000666c
 80146dc:	e000ed0c 	.word	0xe000ed0c
 80146e0:	20006670 	.word	0x20006670

080146e4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b084      	sub	sp, #16
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
 80146ec:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80146ee:	683b      	ldr	r3, [r7, #0]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	330c      	adds	r3, #12
 80146f4:	461a      	mov	r2, r3
 80146f6:	6839      	ldr	r1, [r7, #0]
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f002 fcb7 	bl	801706c <tcpip_send_msg_wait_sem>
 80146fe:	4603      	mov	r3, r0
 8014700:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8014702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d103      	bne.n	8014712 <netconn_apimsg+0x2e>
    return apimsg->err;
 801470a:	683b      	ldr	r3, [r7, #0]
 801470c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014710:	e001      	b.n	8014716 <netconn_apimsg+0x32>
  }
  return err;
 8014712:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014716:	4618      	mov	r0, r3
 8014718:	3710      	adds	r7, #16
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}
	...

08014720 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b08c      	sub	sp, #48	; 0x30
 8014724:	af00      	add	r7, sp, #0
 8014726:	4603      	mov	r3, r0
 8014728:	603a      	str	r2, [r7, #0]
 801472a:	71fb      	strb	r3, [r7, #7]
 801472c:	460b      	mov	r3, r1
 801472e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8014730:	79fb      	ldrb	r3, [r7, #7]
 8014732:	6839      	ldr	r1, [r7, #0]
 8014734:	4618      	mov	r0, r3
 8014736:	f001 f989 	bl	8015a4c <netconn_alloc>
 801473a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 801473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801473e:	2b00      	cmp	r3, #0
 8014740:	d054      	beq.n	80147ec <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8014742:	79bb      	ldrb	r3, [r7, #6]
 8014744:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8014746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014748:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801474a:	f107 0308 	add.w	r3, r7, #8
 801474e:	4619      	mov	r1, r3
 8014750:	4829      	ldr	r0, [pc, #164]	; (80147f8 <netconn_new_with_proto_and_callback+0xd8>)
 8014752:	f7ff ffc7 	bl	80146e4 <netconn_apimsg>
 8014756:	4603      	mov	r3, r0
 8014758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 801475c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8014760:	2b00      	cmp	r3, #0
 8014762:	d043      	beq.n	80147ec <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8014764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014766:	685b      	ldr	r3, [r3, #4]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d005      	beq.n	8014778 <netconn_new_with_proto_and_callback+0x58>
 801476c:	4b23      	ldr	r3, [pc, #140]	; (80147fc <netconn_new_with_proto_and_callback+0xdc>)
 801476e:	22a3      	movs	r2, #163	; 0xa3
 8014770:	4923      	ldr	r1, [pc, #140]	; (8014800 <netconn_new_with_proto_and_callback+0xe0>)
 8014772:	4824      	ldr	r0, [pc, #144]	; (8014804 <netconn_new_with_proto_and_callback+0xe4>)
 8014774:	f00f fb04 	bl	8023d80 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8014778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801477a:	3310      	adds	r3, #16
 801477c:	4618      	mov	r0, r3
 801477e:	f00d ff50 	bl	8022622 <sys_mbox_valid>
 8014782:	4603      	mov	r3, r0
 8014784:	2b00      	cmp	r3, #0
 8014786:	d105      	bne.n	8014794 <netconn_new_with_proto_and_callback+0x74>
 8014788:	4b1c      	ldr	r3, [pc, #112]	; (80147fc <netconn_new_with_proto_and_callback+0xdc>)
 801478a:	22a4      	movs	r2, #164	; 0xa4
 801478c:	491e      	ldr	r1, [pc, #120]	; (8014808 <netconn_new_with_proto_and_callback+0xe8>)
 801478e:	481d      	ldr	r0, [pc, #116]	; (8014804 <netconn_new_with_proto_and_callback+0xe4>)
 8014790:	f00f faf6 	bl	8023d80 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8014794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014796:	3314      	adds	r3, #20
 8014798:	4618      	mov	r0, r3
 801479a:	f00d ff42 	bl	8022622 <sys_mbox_valid>
 801479e:	4603      	mov	r3, r0
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d005      	beq.n	80147b0 <netconn_new_with_proto_and_callback+0x90>
 80147a4:	4b15      	ldr	r3, [pc, #84]	; (80147fc <netconn_new_with_proto_and_callback+0xdc>)
 80147a6:	22a6      	movs	r2, #166	; 0xa6
 80147a8:	4918      	ldr	r1, [pc, #96]	; (801480c <netconn_new_with_proto_and_callback+0xec>)
 80147aa:	4816      	ldr	r0, [pc, #88]	; (8014804 <netconn_new_with_proto_and_callback+0xe4>)
 80147ac:	f00f fae8 	bl	8023d80 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80147b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b2:	330c      	adds	r3, #12
 80147b4:	4618      	mov	r0, r3
 80147b6:	f00d ffc5 	bl	8022744 <sys_sem_valid>
 80147ba:	4603      	mov	r3, r0
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d105      	bne.n	80147cc <netconn_new_with_proto_and_callback+0xac>
 80147c0:	4b0e      	ldr	r3, [pc, #56]	; (80147fc <netconn_new_with_proto_and_callback+0xdc>)
 80147c2:	22a9      	movs	r2, #169	; 0xa9
 80147c4:	4912      	ldr	r1, [pc, #72]	; (8014810 <netconn_new_with_proto_and_callback+0xf0>)
 80147c6:	480f      	ldr	r0, [pc, #60]	; (8014804 <netconn_new_with_proto_and_callback+0xe4>)
 80147c8:	f00f fada 	bl	8023d80 <iprintf>
      sys_sem_free(&conn->op_completed);
 80147cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ce:	330c      	adds	r3, #12
 80147d0:	4618      	mov	r0, r3
 80147d2:	f00d ffaa 	bl	802272a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80147d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147d8:	3310      	adds	r3, #16
 80147da:	4618      	mov	r0, r3
 80147dc:	f00d fe9a 	bl	8022514 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80147e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80147e2:	2007      	movs	r0, #7
 80147e4:	f003 f9f0 	bl	8017bc8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80147e8:	2300      	movs	r3, #0
 80147ea:	e000      	b.n	80147ee <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80147ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80147ee:	4618      	mov	r0, r3
 80147f0:	3730      	adds	r7, #48	; 0x30
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}
 80147f6:	bf00      	nop
 80147f8:	08015a21 	.word	0x08015a21
 80147fc:	08025320 	.word	0x08025320
 8014800:	08025354 	.word	0x08025354
 8014804:	08025378 	.word	0x08025378
 8014808:	080253a0 	.word	0x080253a0
 801480c:	080253b8 	.word	0x080253b8
 8014810:	080253dc 	.word	0x080253dc

08014814 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b08c      	sub	sp, #48	; 0x30
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d101      	bne.n	8014826 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8014822:	2300      	movs	r3, #0
 8014824:	e014      	b.n	8014850 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801482a:	2329      	movs	r3, #41	; 0x29
 801482c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 801482e:	f107 030c 	add.w	r3, r7, #12
 8014832:	4619      	mov	r1, r3
 8014834:	4808      	ldr	r0, [pc, #32]	; (8014858 <netconn_prepare_delete+0x44>)
 8014836:	f7ff ff55 	bl	80146e4 <netconn_apimsg>
 801483a:	4603      	mov	r3, r0
 801483c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8014840:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8014844:	2b00      	cmp	r3, #0
 8014846:	d002      	beq.n	801484e <netconn_prepare_delete+0x3a>
    return err;
 8014848:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801484c:	e000      	b.n	8014850 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 801484e:	2300      	movs	r3, #0
}
 8014850:	4618      	mov	r0, r3
 8014852:	3730      	adds	r7, #48	; 0x30
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}
 8014858:	08015f8d 	.word	0x08015f8d

0801485c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b084      	sub	sp, #16
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d101      	bne.n	801486e <netconn_delete+0x12>
    return ERR_OK;
 801486a:	2300      	movs	r3, #0
 801486c:	e00d      	b.n	801488a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 801486e:	6878      	ldr	r0, [r7, #4]
 8014870:	f7ff ffd0 	bl	8014814 <netconn_prepare_delete>
 8014874:	4603      	mov	r3, r0
 8014876:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8014878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d102      	bne.n	8014886 <netconn_delete+0x2a>
    netconn_free(conn);
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f001 f951 	bl	8015b28 <netconn_free>
  }
  return err;
 8014886:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801488a:	4618      	mov	r0, r3
 801488c:	3710      	adds	r7, #16
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}
	...

08014894 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b08e      	sub	sp, #56	; 0x38
 8014898:	af00      	add	r7, sp, #0
 801489a:	60f8      	str	r0, [r7, #12]
 801489c:	60b9      	str	r1, [r7, #8]
 801489e:	4613      	mov	r3, r2
 80148a0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d109      	bne.n	80148bc <netconn_bind+0x28>
 80148a8:	4b11      	ldr	r3, [pc, #68]	; (80148f0 <netconn_bind+0x5c>)
 80148aa:	f44f 729c 	mov.w	r2, #312	; 0x138
 80148ae:	4911      	ldr	r1, [pc, #68]	; (80148f4 <netconn_bind+0x60>)
 80148b0:	4811      	ldr	r0, [pc, #68]	; (80148f8 <netconn_bind+0x64>)
 80148b2:	f00f fa65 	bl	8023d80 <iprintf>
 80148b6:	f06f 030f 	mvn.w	r3, #15
 80148ba:	e015      	b.n	80148e8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80148bc:	68bb      	ldr	r3, [r7, #8]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d101      	bne.n	80148c6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80148c2:	4b0e      	ldr	r3, [pc, #56]	; (80148fc <netconn_bind+0x68>)
 80148c4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80148ce:	88fb      	ldrh	r3, [r7, #6]
 80148d0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80148d2:	f107 0314 	add.w	r3, r7, #20
 80148d6:	4619      	mov	r1, r3
 80148d8:	4809      	ldr	r0, [pc, #36]	; (8014900 <netconn_bind+0x6c>)
 80148da:	f7ff ff03 	bl	80146e4 <netconn_apimsg>
 80148de:	4603      	mov	r3, r0
 80148e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80148e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80148e8:	4618      	mov	r0, r3
 80148ea:	3738      	adds	r7, #56	; 0x38
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd80      	pop	{r7, pc}
 80148f0:	08025320 	.word	0x08025320
 80148f4:	08025458 	.word	0x08025458
 80148f8:	08025378 	.word	0x08025378
 80148fc:	08028978 	.word	0x08028978
 8014900:	08016155 	.word	0x08016155

08014904 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b08e      	sub	sp, #56	; 0x38
 8014908:	af00      	add	r7, sp, #0
 801490a:	60f8      	str	r0, [r7, #12]
 801490c:	60b9      	str	r1, [r7, #8]
 801490e:	4613      	mov	r3, r2
 8014910:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d109      	bne.n	801492c <netconn_connect+0x28>
 8014918:	4b11      	ldr	r3, [pc, #68]	; (8014960 <netconn_connect+0x5c>)
 801491a:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 801491e:	4911      	ldr	r1, [pc, #68]	; (8014964 <netconn_connect+0x60>)
 8014920:	4811      	ldr	r0, [pc, #68]	; (8014968 <netconn_connect+0x64>)
 8014922:	f00f fa2d 	bl	8023d80 <iprintf>
 8014926:	f06f 030f 	mvn.w	r3, #15
 801492a:	e015      	b.n	8014958 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 801492c:	68bb      	ldr	r3, [r7, #8]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d101      	bne.n	8014936 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8014932:	4b0e      	ldr	r3, [pc, #56]	; (801496c <netconn_connect+0x68>)
 8014934:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 801493e:	88fb      	ldrh	r3, [r7, #6]
 8014940:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8014942:	f107 0314 	add.w	r3, r7, #20
 8014946:	4619      	mov	r1, r3
 8014948:	4809      	ldr	r0, [pc, #36]	; (8014970 <netconn_connect+0x6c>)
 801494a:	f7ff fecb 	bl	80146e4 <netconn_apimsg>
 801494e:	4603      	mov	r3, r0
 8014950:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8014954:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8014958:	4618      	mov	r0, r3
 801495a:	3738      	adds	r7, #56	; 0x38
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	08025320 	.word	0x08025320
 8014964:	08025494 	.word	0x08025494
 8014968:	08025378 	.word	0x08025378
 801496c:	08028978 	.word	0x08028978
 8014970:	080162e9 	.word	0x080162e9

08014974 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b08c      	sub	sp, #48	; 0x30
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
 801497c:	460b      	mov	r3, r1
 801497e:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d109      	bne.n	801499a <netconn_listen_with_backlog+0x26>
 8014986:	4b0d      	ldr	r3, [pc, #52]	; (80149bc <netconn_listen_with_backlog+0x48>)
 8014988:	f240 12bb 	movw	r2, #443	; 0x1bb
 801498c:	490c      	ldr	r1, [pc, #48]	; (80149c0 <netconn_listen_with_backlog+0x4c>)
 801498e:	480d      	ldr	r0, [pc, #52]	; (80149c4 <netconn_listen_with_backlog+0x50>)
 8014990:	f00f f9f6 	bl	8023d80 <iprintf>
 8014994:	f06f 030f 	mvn.w	r3, #15
 8014998:	e00c      	b.n	80149b4 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 801499e:	f107 030c 	add.w	r3, r7, #12
 80149a2:	4619      	mov	r1, r3
 80149a4:	4808      	ldr	r0, [pc, #32]	; (80149c8 <netconn_listen_with_backlog+0x54>)
 80149a6:	f7ff fe9d 	bl	80146e4 <netconn_apimsg>
 80149aa:	4603      	mov	r3, r0
 80149ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80149b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80149b4:	4618      	mov	r0, r3
 80149b6:	3730      	adds	r7, #48	; 0x30
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}
 80149bc:	08025320 	.word	0x08025320
 80149c0:	080254d8 	.word	0x080254d8
 80149c4:	08025378 	.word	0x08025378
 80149c8:	08016465 	.word	0x08016465

080149cc <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b086      	sub	sp, #24
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
 80149d4:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d109      	bne.n	80149f0 <netconn_accept+0x24>
 80149dc:	4b3d      	ldr	r3, [pc, #244]	; (8014ad4 <netconn_accept+0x108>)
 80149de:	f240 12e1 	movw	r2, #481	; 0x1e1
 80149e2:	493d      	ldr	r1, [pc, #244]	; (8014ad8 <netconn_accept+0x10c>)
 80149e4:	483d      	ldr	r0, [pc, #244]	; (8014adc <netconn_accept+0x110>)
 80149e6:	f00f f9cb 	bl	8023d80 <iprintf>
 80149ea:	f06f 030f 	mvn.w	r3, #15
 80149ee:	e06c      	b.n	8014aca <netconn_accept+0xfe>
  *new_conn = NULL;
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	2200      	movs	r2, #0
 80149f4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d109      	bne.n	8014a10 <netconn_accept+0x44>
 80149fc:	4b35      	ldr	r3, [pc, #212]	; (8014ad4 <netconn_accept+0x108>)
 80149fe:	f240 12e3 	movw	r2, #483	; 0x1e3
 8014a02:	4937      	ldr	r1, [pc, #220]	; (8014ae0 <netconn_accept+0x114>)
 8014a04:	4835      	ldr	r0, [pc, #212]	; (8014adc <netconn_accept+0x110>)
 8014a06:	f00f f9bb 	bl	8023d80 <iprintf>
 8014a0a:	f06f 030f 	mvn.w	r3, #15
 8014a0e:	e05c      	b.n	8014aca <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f000 fb9a 	bl	801514a <netconn_err>
 8014a16:	4603      	mov	r3, r0
 8014a18:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8014a1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d002      	beq.n	8014a28 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8014a22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014a26:	e050      	b.n	8014aca <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	3314      	adds	r3, #20
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f00d fdf8 	bl	8022622 <sys_mbox_valid>
 8014a32:	4603      	mov	r3, r0
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d005      	beq.n	8014a44 <netconn_accept+0x78>
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	7f1b      	ldrb	r3, [r3, #28]
 8014a3c:	f003 0301 	and.w	r3, r3, #1
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d002      	beq.n	8014a4a <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8014a44:	f06f 030e 	mvn.w	r3, #14
 8014a48:	e03f      	b.n	8014aca <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	7f1b      	ldrb	r3, [r3, #28]
 8014a4e:	f003 0302 	and.w	r3, r3, #2
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d00e      	beq.n	8014a74 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	3314      	adds	r3, #20
 8014a5a:	f107 020c 	add.w	r2, r7, #12
 8014a5e:	4611      	mov	r1, r2
 8014a60:	4618      	mov	r0, r3
 8014a62:	f00d fdc2 	bl	80225ea <sys_arch_mbox_tryfetch>
 8014a66:	4603      	mov	r3, r0
 8014a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a6c:	d10a      	bne.n	8014a84 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8014a6e:	f06f 0306 	mvn.w	r3, #6
 8014a72:	e02a      	b.n	8014aca <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	3314      	adds	r3, #20
 8014a78:	f107 010c 	add.w	r1, r7, #12
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f00d fd74 	bl	802256c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d005      	beq.n	8014a98 <netconn_accept+0xcc>
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a90:	2200      	movs	r2, #0
 8014a92:	2101      	movs	r1, #1
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	f107 0213 	add.w	r2, r7, #19
 8014a9e:	4611      	mov	r1, r2
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f000 fba3 	bl	80151ec <lwip_netconn_is_err_msg>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d002      	beq.n	8014ab2 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8014aac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014ab0:	e00b      	b.n	8014aca <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d102      	bne.n	8014abe <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8014ab8:	f06f 030e 	mvn.w	r3, #14
 8014abc:	e005      	b.n	8014aca <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	697a      	ldr	r2, [r7, #20]
 8014ac6:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8014ac8:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	3718      	adds	r7, #24
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}
 8014ad2:	bf00      	nop
 8014ad4:	08025320 	.word	0x08025320
 8014ad8:	080254f8 	.word	0x080254f8
 8014adc:	08025378 	.word	0x08025378
 8014ae0:	08025518 	.word	0x08025518

08014ae4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b088      	sub	sp, #32
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	60f8      	str	r0, [r7, #12]
 8014aec:	60b9      	str	r1, [r7, #8]
 8014aee:	4613      	mov	r3, r2
 8014af0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8014af2:	2300      	movs	r3, #0
 8014af4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014af6:	68bb      	ldr	r3, [r7, #8]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d109      	bne.n	8014b10 <netconn_recv_data+0x2c>
 8014afc:	4b58      	ldr	r3, [pc, #352]	; (8014c60 <netconn_recv_data+0x17c>)
 8014afe:	f44f 7212 	mov.w	r2, #584	; 0x248
 8014b02:	4958      	ldr	r1, [pc, #352]	; (8014c64 <netconn_recv_data+0x180>)
 8014b04:	4858      	ldr	r0, [pc, #352]	; (8014c68 <netconn_recv_data+0x184>)
 8014b06:	f00f f93b 	bl	8023d80 <iprintf>
 8014b0a:	f06f 030f 	mvn.w	r3, #15
 8014b0e:	e0a2      	b.n	8014c56 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	2200      	movs	r2, #0
 8014b14:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d109      	bne.n	8014b30 <netconn_recv_data+0x4c>
 8014b1c:	4b50      	ldr	r3, [pc, #320]	; (8014c60 <netconn_recv_data+0x17c>)
 8014b1e:	f240 224a 	movw	r2, #586	; 0x24a
 8014b22:	4952      	ldr	r1, [pc, #328]	; (8014c6c <netconn_recv_data+0x188>)
 8014b24:	4850      	ldr	r0, [pc, #320]	; (8014c68 <netconn_recv_data+0x184>)
 8014b26:	f00f f92b 	bl	8023d80 <iprintf>
 8014b2a:	f06f 030f 	mvn.w	r3, #15
 8014b2e:	e092      	b.n	8014c56 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	3310      	adds	r3, #16
 8014b34:	4618      	mov	r0, r3
 8014b36:	f00d fd74 	bl	8022622 <sys_mbox_valid>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d10e      	bne.n	8014b5e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8014b40:	68f8      	ldr	r0, [r7, #12]
 8014b42:	f000 fb02 	bl	801514a <netconn_err>
 8014b46:	4603      	mov	r3, r0
 8014b48:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8014b4a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d002      	beq.n	8014b58 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8014b52:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8014b56:	e07e      	b.n	8014c56 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8014b58:	f06f 030a 	mvn.w	r3, #10
 8014b5c:	e07b      	b.n	8014c56 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	7f1b      	ldrb	r3, [r3, #28]
 8014b62:	f003 0302 	and.w	r3, r3, #2
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d10f      	bne.n	8014b8a <netconn_recv_data+0xa6>
 8014b6a:	79fb      	ldrb	r3, [r7, #7]
 8014b6c:	f003 0304 	and.w	r3, r3, #4
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d10a      	bne.n	8014b8a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	7f1b      	ldrb	r3, [r3, #28]
 8014b78:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d104      	bne.n	8014b8a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d023      	beq.n	8014bd2 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	3310      	adds	r3, #16
 8014b8e:	f107 0218 	add.w	r2, r7, #24
 8014b92:	4611      	mov	r1, r2
 8014b94:	4618      	mov	r0, r3
 8014b96:	f00d fd28 	bl	80225ea <sys_arch_mbox_tryfetch>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014ba0:	d11f      	bne.n	8014be2 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8014ba2:	68f8      	ldr	r0, [r7, #12]
 8014ba4:	f000 fad1 	bl	801514a <netconn_err>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8014bac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d002      	beq.n	8014bba <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8014bb4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014bb8:	e04d      	b.n	8014c56 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	7f1b      	ldrb	r3, [r3, #28]
 8014bbe:	f003 0301 	and.w	r3, r3, #1
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d002      	beq.n	8014bcc <netconn_recv_data+0xe8>
        return ERR_CONN;
 8014bc6:	f06f 030a 	mvn.w	r3, #10
 8014bca:	e044      	b.n	8014c56 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8014bcc:	f06f 0306 	mvn.w	r3, #6
 8014bd0:	e041      	b.n	8014c56 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	3310      	adds	r3, #16
 8014bd6:	f107 0118 	add.w	r1, r7, #24
 8014bda:	2200      	movs	r2, #0
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f00d fcc5 	bl	802256c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	781b      	ldrb	r3, [r3, #0]
 8014be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014bea:	2b10      	cmp	r3, #16
 8014bec:	d117      	bne.n	8014c1e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8014bee:	69bb      	ldr	r3, [r7, #24]
 8014bf0:	f107 0217 	add.w	r2, r7, #23
 8014bf4:	4611      	mov	r1, r2
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f000 faf8 	bl	80151ec <lwip_netconn_is_err_msg>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d009      	beq.n	8014c16 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8014c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014c06:	f113 0f0f 	cmn.w	r3, #15
 8014c0a:	d101      	bne.n	8014c10 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	e022      	b.n	8014c56 <netconn_recv_data+0x172>
      }
      return err;
 8014c10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014c14:	e01f      	b.n	8014c56 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8014c16:	69bb      	ldr	r3, [r7, #24]
 8014c18:	891b      	ldrh	r3, [r3, #8]
 8014c1a:	83fb      	strh	r3, [r7, #30]
 8014c1c:	e00d      	b.n	8014c3a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8014c1e:	69bb      	ldr	r3, [r7, #24]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d106      	bne.n	8014c32 <netconn_recv_data+0x14e>
 8014c24:	4b0e      	ldr	r3, [pc, #56]	; (8014c60 <netconn_recv_data+0x17c>)
 8014c26:	f240 2291 	movw	r2, #657	; 0x291
 8014c2a:	4911      	ldr	r1, [pc, #68]	; (8014c70 <netconn_recv_data+0x18c>)
 8014c2c:	480e      	ldr	r0, [pc, #56]	; (8014c68 <netconn_recv_data+0x184>)
 8014c2e:	f00f f8a7 	bl	8023d80 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8014c32:	69bb      	ldr	r3, [r7, #24]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	891b      	ldrh	r3, [r3, #8]
 8014c38:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d005      	beq.n	8014c4e <netconn_recv_data+0x16a>
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c46:	8bfa      	ldrh	r2, [r7, #30]
 8014c48:	2101      	movs	r1, #1
 8014c4a:	68f8      	ldr	r0, [r7, #12]
 8014c4c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8014c4e:	69ba      	ldr	r2, [r7, #24]
 8014c50:	68bb      	ldr	r3, [r7, #8]
 8014c52:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8014c54:	2300      	movs	r3, #0
}
 8014c56:	4618      	mov	r0, r3
 8014c58:	3720      	adds	r7, #32
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}
 8014c5e:	bf00      	nop
 8014c60:	08025320 	.word	0x08025320
 8014c64:	08025538 	.word	0x08025538
 8014c68:	08025378 	.word	0x08025378
 8014c6c:	08025558 	.word	0x08025558
 8014c70:	08025574 	.word	0x08025574

08014c74 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b084      	sub	sp, #16
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	60f8      	str	r0, [r7, #12]
 8014c7c:	60b9      	str	r1, [r7, #8]
 8014c7e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d005      	beq.n	8014c92 <netconn_tcp_recvd_msg+0x1e>
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	781b      	ldrb	r3, [r3, #0]
 8014c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c8e:	2b10      	cmp	r3, #16
 8014c90:	d009      	beq.n	8014ca6 <netconn_tcp_recvd_msg+0x32>
 8014c92:	4b0c      	ldr	r3, [pc, #48]	; (8014cc4 <netconn_tcp_recvd_msg+0x50>)
 8014c94:	f240 22a7 	movw	r2, #679	; 0x2a7
 8014c98:	490b      	ldr	r1, [pc, #44]	; (8014cc8 <netconn_tcp_recvd_msg+0x54>)
 8014c9a:	480c      	ldr	r0, [pc, #48]	; (8014ccc <netconn_tcp_recvd_msg+0x58>)
 8014c9c:	f00f f870 	bl	8023d80 <iprintf>
 8014ca0:	f06f 030f 	mvn.w	r3, #15
 8014ca4:	e00a      	b.n	8014cbc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	68fa      	ldr	r2, [r7, #12]
 8014caa:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	68ba      	ldr	r2, [r7, #8]
 8014cb0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8014cb2:	6879      	ldr	r1, [r7, #4]
 8014cb4:	4806      	ldr	r0, [pc, #24]	; (8014cd0 <netconn_tcp_recvd_msg+0x5c>)
 8014cb6:	f7ff fd15 	bl	80146e4 <netconn_apimsg>
 8014cba:	4603      	mov	r3, r0
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3710      	adds	r7, #16
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}
 8014cc4:	08025320 	.word	0x08025320
 8014cc8:	08025580 	.word	0x08025580
 8014ccc:	08025378 	.word	0x08025378
 8014cd0:	0801662f 	.word	0x0801662f

08014cd4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b090      	sub	sp, #64	; 0x40
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	60f8      	str	r0, [r7, #12]
 8014cdc:	60b9      	str	r1, [r7, #8]
 8014cde:	4613      	mov	r3, r2
 8014ce0:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	3310      	adds	r3, #16
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f00d fc9b 	bl	8022622 <sys_mbox_valid>
 8014cec:	4603      	mov	r3, r0
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d102      	bne.n	8014cf8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8014cf2:	f06f 030a 	mvn.w	r3, #10
 8014cf6:	e06d      	b.n	8014dd4 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	7f1b      	ldrb	r3, [r3, #28]
 8014cfc:	b25b      	sxtb	r3, r3
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	da07      	bge.n	8014d12 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	7f1b      	ldrb	r3, [r3, #28]
 8014d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d0a:	b2da      	uxtb	r2, r3
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8014d10:	e039      	b.n	8014d86 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8014d12:	79fb      	ldrb	r3, [r7, #7]
 8014d14:	461a      	mov	r2, r3
 8014d16:	68b9      	ldr	r1, [r7, #8]
 8014d18:	68f8      	ldr	r0, [r7, #12]
 8014d1a:	f7ff fee3 	bl	8014ae4 <netconn_recv_data>
 8014d1e:	4603      	mov	r3, r0
 8014d20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8014d24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d002      	beq.n	8014d32 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8014d2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014d30:	e050      	b.n	8014dd4 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8014d38:	79fb      	ldrb	r3, [r7, #7]
 8014d3a:	f003 0308 	and.w	r3, r3, #8
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d10e      	bne.n	8014d60 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8014d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d002      	beq.n	8014d4e <netconn_recv_data_tcp+0x7a>
 8014d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d4a:	891b      	ldrh	r3, [r3, #8]
 8014d4c:	e000      	b.n	8014d50 <netconn_recv_data_tcp+0x7c>
 8014d4e:	2301      	movs	r3, #1
 8014d50:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8014d52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014d54:	f107 0214 	add.w	r2, r7, #20
 8014d58:	4619      	mov	r1, r3
 8014d5a:	68f8      	ldr	r0, [r7, #12]
 8014d5c:	f7ff ff8a 	bl	8014c74 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8014d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d134      	bne.n	8014dd0 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8014d66:	79fb      	ldrb	r3, [r7, #7]
 8014d68:	f003 0310 	and.w	r3, r3, #16
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d009      	beq.n	8014d84 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	7f1b      	ldrb	r3, [r3, #28]
 8014d74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014d78:	b2da      	uxtb	r2, r3
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8014d7e:	f06f 0306 	mvn.w	r3, #6
 8014d82:	e027      	b.n	8014dd4 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8014d84:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d005      	beq.n	8014d9a <netconn_recv_data_tcp+0xc6>
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d92:	2200      	movs	r2, #0
 8014d94:	2101      	movs	r1, #1
 8014d96:	68f8      	ldr	r0, [r7, #12]
 8014d98:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	685b      	ldr	r3, [r3, #4]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d10f      	bne.n	8014dc2 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8014da2:	68f8      	ldr	r0, [r7, #12]
 8014da4:	f000 f9d1 	bl	801514a <netconn_err>
 8014da8:	4603      	mov	r3, r0
 8014daa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8014dae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d002      	beq.n	8014dbc <netconn_recv_data_tcp+0xe8>
          return err;
 8014db6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014dba:	e00b      	b.n	8014dd4 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8014dbc:	f06f 030d 	mvn.w	r3, #13
 8014dc0:	e008      	b.n	8014dd4 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8014dc2:	2101      	movs	r1, #1
 8014dc4:	68f8      	ldr	r0, [r7, #12]
 8014dc6:	f000 f983 	bl	80150d0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8014dca:	f06f 030e 	mvn.w	r3, #14
 8014dce:	e001      	b.n	8014dd4 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8014dd0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	3740      	adds	r7, #64	; 0x40
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b086      	sub	sp, #24
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8014de6:	2300      	movs	r3, #0
 8014de8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d109      	bne.n	8014e04 <netconn_recv+0x28>
 8014df0:	4b32      	ldr	r3, [pc, #200]	; (8014ebc <netconn_recv+0xe0>)
 8014df2:	f240 3263 	movw	r2, #867	; 0x363
 8014df6:	4932      	ldr	r1, [pc, #200]	; (8014ec0 <netconn_recv+0xe4>)
 8014df8:	4832      	ldr	r0, [pc, #200]	; (8014ec4 <netconn_recv+0xe8>)
 8014dfa:	f00e ffc1 	bl	8023d80 <iprintf>
 8014dfe:	f06f 030f 	mvn.w	r3, #15
 8014e02:	e056      	b.n	8014eb2 <netconn_recv+0xd6>
  *new_buf = NULL;
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	2200      	movs	r2, #0
 8014e08:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d109      	bne.n	8014e24 <netconn_recv+0x48>
 8014e10:	4b2a      	ldr	r3, [pc, #168]	; (8014ebc <netconn_recv+0xe0>)
 8014e12:	f240 3265 	movw	r2, #869	; 0x365
 8014e16:	492c      	ldr	r1, [pc, #176]	; (8014ec8 <netconn_recv+0xec>)
 8014e18:	482a      	ldr	r0, [pc, #168]	; (8014ec4 <netconn_recv+0xe8>)
 8014e1a:	f00e ffb1 	bl	8023d80 <iprintf>
 8014e1e:	f06f 030f 	mvn.w	r3, #15
 8014e22:	e046      	b.n	8014eb2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	781b      	ldrb	r3, [r3, #0]
 8014e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e2c:	2b10      	cmp	r3, #16
 8014e2e:	d13a      	bne.n	8014ea6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8014e30:	2300      	movs	r3, #0
 8014e32:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8014e34:	2006      	movs	r0, #6
 8014e36:	f002 fe51 	bl	8017adc <memp_malloc>
 8014e3a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d102      	bne.n	8014e48 <netconn_recv+0x6c>
      return ERR_MEM;
 8014e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e46:	e034      	b.n	8014eb2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8014e48:	f107 030c 	add.w	r3, r7, #12
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	4619      	mov	r1, r3
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f7ff ff3f 	bl	8014cd4 <netconn_recv_data_tcp>
 8014e56:	4603      	mov	r3, r0
 8014e58:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014e5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d006      	beq.n	8014e70 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8014e62:	6979      	ldr	r1, [r7, #20]
 8014e64:	2006      	movs	r0, #6
 8014e66:	f002 feaf 	bl	8017bc8 <memp_free>
      return err;
 8014e6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014e6e:	e020      	b.n	8014eb2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d106      	bne.n	8014e84 <netconn_recv+0xa8>
 8014e76:	4b11      	ldr	r3, [pc, #68]	; (8014ebc <netconn_recv+0xe0>)
 8014e78:	f240 3279 	movw	r2, #889	; 0x379
 8014e7c:	4913      	ldr	r1, [pc, #76]	; (8014ecc <netconn_recv+0xf0>)
 8014e7e:	4811      	ldr	r0, [pc, #68]	; (8014ec4 <netconn_recv+0xe8>)
 8014e80:	f00e ff7e 	bl	8023d80 <iprintf>

    buf->p = p;
 8014e84:	68fa      	ldr	r2, [r7, #12]
 8014e86:	697b      	ldr	r3, [r7, #20]
 8014e88:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8014e8a:	68fa      	ldr	r2, [r7, #12]
 8014e8c:	697b      	ldr	r3, [r7, #20]
 8014e8e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8014e90:	697b      	ldr	r3, [r7, #20]
 8014e92:	2200      	movs	r2, #0
 8014e94:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8014e96:	697b      	ldr	r3, [r7, #20]
 8014e98:	2200      	movs	r2, #0
 8014e9a:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	697a      	ldr	r2, [r7, #20]
 8014ea0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	e005      	b.n	8014eb2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	6839      	ldr	r1, [r7, #0]
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f7ff fe1a 	bl	8014ae4 <netconn_recv_data>
 8014eb0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	3718      	adds	r7, #24
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	08025320 	.word	0x08025320
 8014ec0:	08025538 	.word	0x08025538
 8014ec4:	08025378 	.word	0x08025378
 8014ec8:	08025558 	.word	0x08025558
 8014ecc:	080255d0 	.word	0x080255d0

08014ed0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b08c      	sub	sp, #48	; 0x30
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d109      	bne.n	8014ef4 <netconn_send+0x24>
 8014ee0:	4b0e      	ldr	r3, [pc, #56]	; (8014f1c <netconn_send+0x4c>)
 8014ee2:	f240 32b2 	movw	r2, #946	; 0x3b2
 8014ee6:	490e      	ldr	r1, [pc, #56]	; (8014f20 <netconn_send+0x50>)
 8014ee8:	480e      	ldr	r0, [pc, #56]	; (8014f24 <netconn_send+0x54>)
 8014eea:	f00e ff49 	bl	8023d80 <iprintf>
 8014eee:	f06f 030f 	mvn.w	r3, #15
 8014ef2:	e00e      	b.n	8014f12 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8014efc:	f107 030c 	add.w	r3, r7, #12
 8014f00:	4619      	mov	r1, r3
 8014f02:	4809      	ldr	r0, [pc, #36]	; (8014f28 <netconn_send+0x58>)
 8014f04:	f7ff fbee 	bl	80146e4 <netconn_apimsg>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8014f0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8014f12:	4618      	mov	r0, r3
 8014f14:	3730      	adds	r7, #48	; 0x30
 8014f16:	46bd      	mov	sp, r7
 8014f18:	bd80      	pop	{r7, pc}
 8014f1a:	bf00      	nop
 8014f1c:	08025320 	.word	0x08025320
 8014f20:	080255dc 	.word	0x080255dc
 8014f24:	08025378 	.word	0x08025378
 8014f28:	08016595 	.word	0x08016595

08014f2c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b088      	sub	sp, #32
 8014f30:	af02      	add	r7, sp, #8
 8014f32:	60f8      	str	r0, [r7, #12]
 8014f34:	60b9      	str	r1, [r7, #8]
 8014f36:	607a      	str	r2, [r7, #4]
 8014f38:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8014f3a:	68bb      	ldr	r3, [r7, #8]
 8014f3c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8014f42:	78fa      	ldrb	r2, [r7, #3]
 8014f44:	f107 0110 	add.w	r1, r7, #16
 8014f48:	6a3b      	ldr	r3, [r7, #32]
 8014f4a:	9300      	str	r3, [sp, #0]
 8014f4c:	4613      	mov	r3, r2
 8014f4e:	2201      	movs	r2, #1
 8014f50:	68f8      	ldr	r0, [r7, #12]
 8014f52:	f000 f805 	bl	8014f60 <netconn_write_vectors_partly>
 8014f56:	4603      	mov	r3, r0
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3718      	adds	r7, #24
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}

08014f60 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b092      	sub	sp, #72	; 0x48
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	60f8      	str	r0, [r7, #12]
 8014f68:	60b9      	str	r1, [r7, #8]
 8014f6a:	4611      	mov	r1, r2
 8014f6c:	461a      	mov	r2, r3
 8014f6e:	460b      	mov	r3, r1
 8014f70:	80fb      	strh	r3, [r7, #6]
 8014f72:	4613      	mov	r3, r2
 8014f74:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d109      	bne.n	8014f90 <netconn_write_vectors_partly+0x30>
 8014f7c:	4b4e      	ldr	r3, [pc, #312]	; (80150b8 <netconn_write_vectors_partly+0x158>)
 8014f7e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8014f82:	494e      	ldr	r1, [pc, #312]	; (80150bc <netconn_write_vectors_partly+0x15c>)
 8014f84:	484e      	ldr	r0, [pc, #312]	; (80150c0 <netconn_write_vectors_partly+0x160>)
 8014f86:	f00e fefb 	bl	8023d80 <iprintf>
 8014f8a:	f06f 030f 	mvn.w	r3, #15
 8014f8e:	e08e      	b.n	80150ae <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	781b      	ldrb	r3, [r3, #0]
 8014f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f98:	2b10      	cmp	r3, #16
 8014f9a:	d009      	beq.n	8014fb0 <netconn_write_vectors_partly+0x50>
 8014f9c:	4b46      	ldr	r3, [pc, #280]	; (80150b8 <netconn_write_vectors_partly+0x158>)
 8014f9e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8014fa2:	4948      	ldr	r1, [pc, #288]	; (80150c4 <netconn_write_vectors_partly+0x164>)
 8014fa4:	4846      	ldr	r0, [pc, #280]	; (80150c0 <netconn_write_vectors_partly+0x160>)
 8014fa6:	f00e feeb 	bl	8023d80 <iprintf>
 8014faa:	f06f 0305 	mvn.w	r3, #5
 8014fae:	e07e      	b.n	80150ae <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	7f1b      	ldrb	r3, [r3, #28]
 8014fb4:	f003 0302 	and.w	r3, r3, #2
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d104      	bne.n	8014fc6 <netconn_write_vectors_partly+0x66>
 8014fbc:	797b      	ldrb	r3, [r7, #5]
 8014fbe:	f003 0304 	and.w	r3, r3, #4
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d001      	beq.n	8014fca <netconn_write_vectors_partly+0x6a>
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	e000      	b.n	8014fcc <netconn_write_vectors_partly+0x6c>
 8014fca:	2300      	movs	r3, #0
 8014fcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8014fd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d005      	beq.n	8014fe4 <netconn_write_vectors_partly+0x84>
 8014fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d102      	bne.n	8014fe4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8014fde:	f06f 0305 	mvn.w	r3, #5
 8014fe2:	e064      	b.n	80150ae <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8014fe8:	2300      	movs	r3, #0
 8014fea:	643b      	str	r3, [r7, #64]	; 0x40
 8014fec:	e015      	b.n	801501a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8014fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ff0:	00db      	lsls	r3, r3, #3
 8014ff2:	68ba      	ldr	r2, [r7, #8]
 8014ff4:	4413      	add	r3, r2
 8014ff6:	685b      	ldr	r3, [r3, #4]
 8014ff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014ffa:	4413      	add	r3, r2
 8014ffc:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8014ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015000:	00db      	lsls	r3, r3, #3
 8015002:	68ba      	ldr	r2, [r7, #8]
 8015004:	4413      	add	r3, r2
 8015006:	685b      	ldr	r3, [r3, #4]
 8015008:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801500a:	429a      	cmp	r2, r3
 801500c:	d202      	bcs.n	8015014 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 801500e:	f06f 0305 	mvn.w	r3, #5
 8015012:	e04c      	b.n	80150ae <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8015014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015016:	3301      	adds	r3, #1
 8015018:	643b      	str	r3, [r7, #64]	; 0x40
 801501a:	88fb      	ldrh	r3, [r7, #6]
 801501c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801501e:	429a      	cmp	r2, r3
 8015020:	dbe5      	blt.n	8014fee <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8015022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015024:	2b00      	cmp	r3, #0
 8015026:	d101      	bne.n	801502c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8015028:	2300      	movs	r3, #0
 801502a:	e040      	b.n	80150ae <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 801502c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801502e:	2b00      	cmp	r3, #0
 8015030:	da0a      	bge.n	8015048 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8015032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015034:	2b00      	cmp	r3, #0
 8015036:	d102      	bne.n	801503e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8015038:	f06f 0305 	mvn.w	r3, #5
 801503c:	e037      	b.n	80150ae <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 801503e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015042:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8015044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015046:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 801504c:	68bb      	ldr	r3, [r7, #8]
 801504e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8015050:	88fb      	ldrh	r3, [r7, #6]
 8015052:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8015054:	2300      	movs	r3, #0
 8015056:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8015058:	797b      	ldrb	r3, [r7, #5]
 801505a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 801505e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015060:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8015062:	2300      	movs	r3, #0
 8015064:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8015066:	f107 0314 	add.w	r3, r7, #20
 801506a:	4619      	mov	r1, r3
 801506c:	4816      	ldr	r0, [pc, #88]	; (80150c8 <netconn_write_vectors_partly+0x168>)
 801506e:	f7ff fb39 	bl	80146e4 <netconn_apimsg>
 8015072:	4603      	mov	r3, r0
 8015074:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8015078:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801507c:	2b00      	cmp	r3, #0
 801507e:	d114      	bne.n	80150aa <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8015080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015082:	2b00      	cmp	r3, #0
 8015084:	d002      	beq.n	801508c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8015086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801508a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 801508c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015090:	2b00      	cmp	r3, #0
 8015092:	d10a      	bne.n	80150aa <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8015094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015098:	429a      	cmp	r2, r3
 801509a:	d006      	beq.n	80150aa <netconn_write_vectors_partly+0x14a>
 801509c:	4b06      	ldr	r3, [pc, #24]	; (80150b8 <netconn_write_vectors_partly+0x158>)
 801509e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80150a2:	490a      	ldr	r1, [pc, #40]	; (80150cc <netconn_write_vectors_partly+0x16c>)
 80150a4:	4806      	ldr	r0, [pc, #24]	; (80150c0 <netconn_write_vectors_partly+0x160>)
 80150a6:	f00e fe6b 	bl	8023d80 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80150aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80150ae:	4618      	mov	r0, r3
 80150b0:	3748      	adds	r7, #72	; 0x48
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}
 80150b6:	bf00      	nop
 80150b8:	08025320 	.word	0x08025320
 80150bc:	080255f8 	.word	0x080255f8
 80150c0:	08025378 	.word	0x08025378
 80150c4:	08025614 	.word	0x08025614
 80150c8:	08016a31 	.word	0x08016a31
 80150cc:	08025638 	.word	0x08025638

080150d0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b08c      	sub	sp, #48	; 0x30
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	460b      	mov	r3, r1
 80150da:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d109      	bne.n	80150f6 <netconn_close_shutdown+0x26>
 80150e2:	4b0f      	ldr	r3, [pc, #60]	; (8015120 <netconn_close_shutdown+0x50>)
 80150e4:	f240 4247 	movw	r2, #1095	; 0x447
 80150e8:	490e      	ldr	r1, [pc, #56]	; (8015124 <netconn_close_shutdown+0x54>)
 80150ea:	480f      	ldr	r0, [pc, #60]	; (8015128 <netconn_close_shutdown+0x58>)
 80150ec:	f00e fe48 	bl	8023d80 <iprintf>
 80150f0:	f06f 030f 	mvn.w	r3, #15
 80150f4:	e010      	b.n	8015118 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80150fa:	78fb      	ldrb	r3, [r7, #3]
 80150fc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80150fe:	2329      	movs	r3, #41	; 0x29
 8015100:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8015102:	f107 030c 	add.w	r3, r7, #12
 8015106:	4619      	mov	r1, r3
 8015108:	4808      	ldr	r0, [pc, #32]	; (801512c <netconn_close_shutdown+0x5c>)
 801510a:	f7ff faeb 	bl	80146e4 <netconn_apimsg>
 801510e:	4603      	mov	r3, r0
 8015110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8015114:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8015118:	4618      	mov	r0, r3
 801511a:	3730      	adds	r7, #48	; 0x30
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}
 8015120:	08025320 	.word	0x08025320
 8015124:	0802565c 	.word	0x0802565c
 8015128:	08025378 	.word	0x08025378
 801512c:	08016b49 	.word	0x08016b49

08015130 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b082      	sub	sp, #8
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8015138:	2103      	movs	r1, #3
 801513a:	6878      	ldr	r0, [r7, #4]
 801513c:	f7ff ffc8 	bl	80150d0 <netconn_close_shutdown>
 8015140:	4603      	mov	r3, r0
}
 8015142:	4618      	mov	r0, r3
 8015144:	3708      	adds	r7, #8
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}

0801514a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 801514a:	b580      	push	{r7, lr}
 801514c:	b084      	sub	sp, #16
 801514e:	af00      	add	r7, sp, #0
 8015150:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d101      	bne.n	801515c <netconn_err+0x12>
    return ERR_OK;
 8015158:	2300      	movs	r3, #0
 801515a:	e00d      	b.n	8015178 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 801515c:	f00d fb7c 	bl	8022858 <sys_arch_protect>
 8015160:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	7a1b      	ldrb	r3, [r3, #8]
 8015166:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	2200      	movs	r2, #0
 801516c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 801516e:	68f8      	ldr	r0, [r7, #12]
 8015170:	f00d fb80 	bl	8022874 <sys_arch_unprotect>
  return err;
 8015174:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015178:	4618      	mov	r0, r3
 801517a:	3710      	adds	r7, #16
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}

08015180 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	af00      	add	r7, sp, #0
 8015186:	4603      	mov	r3, r0
 8015188:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 801518a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801518e:	f113 0f0d 	cmn.w	r3, #13
 8015192:	d009      	beq.n	80151a8 <lwip_netconn_err_to_msg+0x28>
 8015194:	f113 0f0d 	cmn.w	r3, #13
 8015198:	dc0c      	bgt.n	80151b4 <lwip_netconn_err_to_msg+0x34>
 801519a:	f113 0f0f 	cmn.w	r3, #15
 801519e:	d007      	beq.n	80151b0 <lwip_netconn_err_to_msg+0x30>
 80151a0:	f113 0f0e 	cmn.w	r3, #14
 80151a4:	d002      	beq.n	80151ac <lwip_netconn_err_to_msg+0x2c>
 80151a6:	e005      	b.n	80151b4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80151a8:	4b0a      	ldr	r3, [pc, #40]	; (80151d4 <lwip_netconn_err_to_msg+0x54>)
 80151aa:	e00e      	b.n	80151ca <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80151ac:	4b0a      	ldr	r3, [pc, #40]	; (80151d8 <lwip_netconn_err_to_msg+0x58>)
 80151ae:	e00c      	b.n	80151ca <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80151b0:	4b0a      	ldr	r3, [pc, #40]	; (80151dc <lwip_netconn_err_to_msg+0x5c>)
 80151b2:	e00a      	b.n	80151ca <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80151b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d005      	beq.n	80151c8 <lwip_netconn_err_to_msg+0x48>
 80151bc:	4b08      	ldr	r3, [pc, #32]	; (80151e0 <lwip_netconn_err_to_msg+0x60>)
 80151be:	227d      	movs	r2, #125	; 0x7d
 80151c0:	4908      	ldr	r1, [pc, #32]	; (80151e4 <lwip_netconn_err_to_msg+0x64>)
 80151c2:	4809      	ldr	r0, [pc, #36]	; (80151e8 <lwip_netconn_err_to_msg+0x68>)
 80151c4:	f00e fddc 	bl	8023d80 <iprintf>
      return NULL;
 80151c8:	2300      	movs	r3, #0
  }
}
 80151ca:	4618      	mov	r0, r3
 80151cc:	3708      	adds	r7, #8
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	bf00      	nop
 80151d4:	08028864 	.word	0x08028864
 80151d8:	08028865 	.word	0x08028865
 80151dc:	08028866 	.word	0x08028866
 80151e0:	08025678 	.word	0x08025678
 80151e4:	080256ac 	.word	0x080256ac
 80151e8:	080256bc 	.word	0x080256bc

080151ec <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b082      	sub	sp, #8
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80151f6:	683b      	ldr	r3, [r7, #0]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d105      	bne.n	8015208 <lwip_netconn_is_err_msg+0x1c>
 80151fc:	4b12      	ldr	r3, [pc, #72]	; (8015248 <lwip_netconn_is_err_msg+0x5c>)
 80151fe:	2285      	movs	r2, #133	; 0x85
 8015200:	4912      	ldr	r1, [pc, #72]	; (801524c <lwip_netconn_is_err_msg+0x60>)
 8015202:	4813      	ldr	r0, [pc, #76]	; (8015250 <lwip_netconn_is_err_msg+0x64>)
 8015204:	f00e fdbc 	bl	8023d80 <iprintf>

  if (msg == &netconn_aborted) {
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	4a12      	ldr	r2, [pc, #72]	; (8015254 <lwip_netconn_is_err_msg+0x68>)
 801520c:	4293      	cmp	r3, r2
 801520e:	d104      	bne.n	801521a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8015210:	683b      	ldr	r3, [r7, #0]
 8015212:	22f3      	movs	r2, #243	; 0xf3
 8015214:	701a      	strb	r2, [r3, #0]
    return 1;
 8015216:	2301      	movs	r3, #1
 8015218:	e012      	b.n	8015240 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	4a0e      	ldr	r2, [pc, #56]	; (8015258 <lwip_netconn_is_err_msg+0x6c>)
 801521e:	4293      	cmp	r3, r2
 8015220:	d104      	bne.n	801522c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	22f2      	movs	r2, #242	; 0xf2
 8015226:	701a      	strb	r2, [r3, #0]
    return 1;
 8015228:	2301      	movs	r3, #1
 801522a:	e009      	b.n	8015240 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	4a0b      	ldr	r2, [pc, #44]	; (801525c <lwip_netconn_is_err_msg+0x70>)
 8015230:	4293      	cmp	r3, r2
 8015232:	d104      	bne.n	801523e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	22f1      	movs	r2, #241	; 0xf1
 8015238:	701a      	strb	r2, [r3, #0]
    return 1;
 801523a:	2301      	movs	r3, #1
 801523c:	e000      	b.n	8015240 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 801523e:	2300      	movs	r3, #0
}
 8015240:	4618      	mov	r0, r3
 8015242:	3708      	adds	r7, #8
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}
 8015248:	08025678 	.word	0x08025678
 801524c:	080256e4 	.word	0x080256e4
 8015250:	080256bc 	.word	0x080256bc
 8015254:	08028864 	.word	0x08028864
 8015258:	08028865 	.word	0x08028865
 801525c:	08028866 	.word	0x08028866

08015260 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b088      	sub	sp, #32
 8015264:	af00      	add	r7, sp, #0
 8015266:	60f8      	str	r0, [r7, #12]
 8015268:	60b9      	str	r1, [r7, #8]
 801526a:	607a      	str	r2, [r7, #4]
 801526c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d105      	bne.n	8015280 <recv_udp+0x20>
 8015274:	4b34      	ldr	r3, [pc, #208]	; (8015348 <recv_udp+0xe8>)
 8015276:	22e5      	movs	r2, #229	; 0xe5
 8015278:	4934      	ldr	r1, [pc, #208]	; (801534c <recv_udp+0xec>)
 801527a:	4835      	ldr	r0, [pc, #212]	; (8015350 <recv_udp+0xf0>)
 801527c:	f00e fd80 	bl	8023d80 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d105      	bne.n	8015292 <recv_udp+0x32>
 8015286:	4b30      	ldr	r3, [pc, #192]	; (8015348 <recv_udp+0xe8>)
 8015288:	22e6      	movs	r2, #230	; 0xe6
 801528a:	4932      	ldr	r1, [pc, #200]	; (8015354 <recv_udp+0xf4>)
 801528c:	4830      	ldr	r0, [pc, #192]	; (8015350 <recv_udp+0xf0>)
 801528e:	f00e fd77 	bl	8023d80 <iprintf>
  conn = (struct netconn *)arg;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8015296:	69fb      	ldr	r3, [r7, #28]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d103      	bne.n	80152a4 <recv_udp+0x44>
    pbuf_free(p);
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f003 fb37 	bl	8018910 <pbuf_free>
    return;
 80152a2:	e04d      	b.n	8015340 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80152a4:	69fb      	ldr	r3, [r7, #28]
 80152a6:	685b      	ldr	r3, [r3, #4]
 80152a8:	68ba      	ldr	r2, [r7, #8]
 80152aa:	429a      	cmp	r2, r3
 80152ac:	d005      	beq.n	80152ba <recv_udp+0x5a>
 80152ae:	4b26      	ldr	r3, [pc, #152]	; (8015348 <recv_udp+0xe8>)
 80152b0:	22ee      	movs	r2, #238	; 0xee
 80152b2:	4929      	ldr	r1, [pc, #164]	; (8015358 <recv_udp+0xf8>)
 80152b4:	4826      	ldr	r0, [pc, #152]	; (8015350 <recv_udp+0xf0>)
 80152b6:	f00e fd63 	bl	8023d80 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80152ba:	69fb      	ldr	r3, [r7, #28]
 80152bc:	3310      	adds	r3, #16
 80152be:	4618      	mov	r0, r3
 80152c0:	f00d f9af 	bl	8022622 <sys_mbox_valid>
 80152c4:	4603      	mov	r3, r0
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d103      	bne.n	80152d2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80152ca:	6878      	ldr	r0, [r7, #4]
 80152cc:	f003 fb20 	bl	8018910 <pbuf_free>
    return;
 80152d0:	e036      	b.n	8015340 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80152d2:	2006      	movs	r0, #6
 80152d4:	f002 fc02 	bl	8017adc <memp_malloc>
 80152d8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80152da:	69bb      	ldr	r3, [r7, #24]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d103      	bne.n	80152e8 <recv_udp+0x88>
    pbuf_free(p);
 80152e0:	6878      	ldr	r0, [r7, #4]
 80152e2:	f003 fb15 	bl	8018910 <pbuf_free>
    return;
 80152e6:	e02b      	b.n	8015340 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80152e8:	69bb      	ldr	r3, [r7, #24]
 80152ea:	687a      	ldr	r2, [r7, #4]
 80152ec:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80152ee:	69bb      	ldr	r3, [r7, #24]
 80152f0:	687a      	ldr	r2, [r7, #4]
 80152f2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80152f4:	683b      	ldr	r3, [r7, #0]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d002      	beq.n	8015300 <recv_udp+0xa0>
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	e000      	b.n	8015302 <recv_udp+0xa2>
 8015300:	2300      	movs	r3, #0
 8015302:	69ba      	ldr	r2, [r7, #24]
 8015304:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8015306:	69bb      	ldr	r3, [r7, #24]
 8015308:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801530a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	891b      	ldrh	r3, [r3, #8]
 8015310:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	3310      	adds	r3, #16
 8015316:	69b9      	ldr	r1, [r7, #24]
 8015318:	4618      	mov	r0, r3
 801531a:	f00d f90d 	bl	8022538 <sys_mbox_trypost>
 801531e:	4603      	mov	r3, r0
 8015320:	2b00      	cmp	r3, #0
 8015322:	d003      	beq.n	801532c <recv_udp+0xcc>
    netbuf_delete(buf);
 8015324:	69b8      	ldr	r0, [r7, #24]
 8015326:	f001 fcaf 	bl	8016c88 <netbuf_delete>
    return;
 801532a:	e009      	b.n	8015340 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015330:	2b00      	cmp	r3, #0
 8015332:	d005      	beq.n	8015340 <recv_udp+0xe0>
 8015334:	69fb      	ldr	r3, [r7, #28]
 8015336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015338:	8afa      	ldrh	r2, [r7, #22]
 801533a:	2100      	movs	r1, #0
 801533c:	69f8      	ldr	r0, [r7, #28]
 801533e:	4798      	blx	r3
  }
}
 8015340:	3720      	adds	r7, #32
 8015342:	46bd      	mov	sp, r7
 8015344:	bd80      	pop	{r7, pc}
 8015346:	bf00      	nop
 8015348:	08025678 	.word	0x08025678
 801534c:	080256f0 	.word	0x080256f0
 8015350:	080256bc 	.word	0x080256bc
 8015354:	08025714 	.word	0x08025714
 8015358:	08025734 	.word	0x08025734

0801535c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b088      	sub	sp, #32
 8015360:	af00      	add	r7, sp, #0
 8015362:	60f8      	str	r0, [r7, #12]
 8015364:	60b9      	str	r1, [r7, #8]
 8015366:	607a      	str	r2, [r7, #4]
 8015368:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 801536a:	68bb      	ldr	r3, [r7, #8]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d106      	bne.n	801537e <recv_tcp+0x22>
 8015370:	4b36      	ldr	r3, [pc, #216]	; (801544c <recv_tcp+0xf0>)
 8015372:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015376:	4936      	ldr	r1, [pc, #216]	; (8015450 <recv_tcp+0xf4>)
 8015378:	4836      	ldr	r0, [pc, #216]	; (8015454 <recv_tcp+0xf8>)
 801537a:	f00e fd01 	bl	8023d80 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d106      	bne.n	8015392 <recv_tcp+0x36>
 8015384:	4b31      	ldr	r3, [pc, #196]	; (801544c <recv_tcp+0xf0>)
 8015386:	f240 122d 	movw	r2, #301	; 0x12d
 801538a:	4933      	ldr	r1, [pc, #204]	; (8015458 <recv_tcp+0xfc>)
 801538c:	4831      	ldr	r0, [pc, #196]	; (8015454 <recv_tcp+0xf8>)
 801538e:	f00e fcf7 	bl	8023d80 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8015392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d006      	beq.n	80153a8 <recv_tcp+0x4c>
 801539a:	4b2c      	ldr	r3, [pc, #176]	; (801544c <recv_tcp+0xf0>)
 801539c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80153a0:	492e      	ldr	r1, [pc, #184]	; (801545c <recv_tcp+0x100>)
 80153a2:	482c      	ldr	r0, [pc, #176]	; (8015454 <recv_tcp+0xf8>)
 80153a4:	f00e fcec 	bl	8023d80 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80153ac:	697b      	ldr	r3, [r7, #20]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d102      	bne.n	80153b8 <recv_tcp+0x5c>
    return ERR_VAL;
 80153b2:	f06f 0305 	mvn.w	r3, #5
 80153b6:	e045      	b.n	8015444 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80153b8:	697b      	ldr	r3, [r7, #20]
 80153ba:	685b      	ldr	r3, [r3, #4]
 80153bc:	68ba      	ldr	r2, [r7, #8]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d006      	beq.n	80153d0 <recv_tcp+0x74>
 80153c2:	4b22      	ldr	r3, [pc, #136]	; (801544c <recv_tcp+0xf0>)
 80153c4:	f240 1235 	movw	r2, #309	; 0x135
 80153c8:	4925      	ldr	r1, [pc, #148]	; (8015460 <recv_tcp+0x104>)
 80153ca:	4822      	ldr	r0, [pc, #136]	; (8015454 <recv_tcp+0xf8>)
 80153cc:	f00e fcd8 	bl	8023d80 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80153d0:	697b      	ldr	r3, [r7, #20]
 80153d2:	3310      	adds	r3, #16
 80153d4:	4618      	mov	r0, r3
 80153d6:	f00d f924 	bl	8022622 <sys_mbox_valid>
 80153da:	4603      	mov	r3, r0
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d10d      	bne.n	80153fc <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d008      	beq.n	80153f8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	891b      	ldrh	r3, [r3, #8]
 80153ea:	4619      	mov	r1, r3
 80153ec:	68b8      	ldr	r0, [r7, #8]
 80153ee:	f004 fa57 	bl	80198a0 <tcp_recved>
      pbuf_free(p);
 80153f2:	6878      	ldr	r0, [r7, #4]
 80153f4:	f003 fa8c 	bl	8018910 <pbuf_free>
    }
    return ERR_OK;
 80153f8:	2300      	movs	r3, #0
 80153fa:	e023      	b.n	8015444 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d005      	beq.n	801540e <recv_tcp+0xb2>
    msg = p;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	891b      	ldrh	r3, [r3, #8]
 801540a:	83fb      	strh	r3, [r7, #30]
 801540c:	e003      	b.n	8015416 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801540e:	4b15      	ldr	r3, [pc, #84]	; (8015464 <recv_tcp+0x108>)
 8015410:	61bb      	str	r3, [r7, #24]
    len = 0;
 8015412:	2300      	movs	r3, #0
 8015414:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8015416:	697b      	ldr	r3, [r7, #20]
 8015418:	3310      	adds	r3, #16
 801541a:	69b9      	ldr	r1, [r7, #24]
 801541c:	4618      	mov	r0, r3
 801541e:	f00d f88b 	bl	8022538 <sys_mbox_trypost>
 8015422:	4603      	mov	r3, r0
 8015424:	2b00      	cmp	r3, #0
 8015426:	d002      	beq.n	801542e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8015428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801542c:	e00a      	b.n	8015444 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801542e:	697b      	ldr	r3, [r7, #20]
 8015430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015432:	2b00      	cmp	r3, #0
 8015434:	d005      	beq.n	8015442 <recv_tcp+0xe6>
 8015436:	697b      	ldr	r3, [r7, #20]
 8015438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801543a:	8bfa      	ldrh	r2, [r7, #30]
 801543c:	2100      	movs	r1, #0
 801543e:	6978      	ldr	r0, [r7, #20]
 8015440:	4798      	blx	r3
  }

  return ERR_OK;
 8015442:	2300      	movs	r3, #0
}
 8015444:	4618      	mov	r0, r3
 8015446:	3720      	adds	r7, #32
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}
 801544c:	08025678 	.word	0x08025678
 8015450:	08025754 	.word	0x08025754
 8015454:	080256bc 	.word	0x080256bc
 8015458:	08025778 	.word	0x08025778
 801545c:	08025798 	.word	0x08025798
 8015460:	080257b0 	.word	0x080257b0
 8015464:	08028866 	.word	0x08028866

08015468 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b084      	sub	sp, #16
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
 8015470:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d106      	bne.n	801548a <poll_tcp+0x22>
 801547c:	4b29      	ldr	r3, [pc, #164]	; (8015524 <poll_tcp+0xbc>)
 801547e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8015482:	4929      	ldr	r1, [pc, #164]	; (8015528 <poll_tcp+0xc0>)
 8015484:	4829      	ldr	r0, [pc, #164]	; (801552c <poll_tcp+0xc4>)
 8015486:	f00e fc7b 	bl	8023d80 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	785b      	ldrb	r3, [r3, #1]
 801548e:	2b01      	cmp	r3, #1
 8015490:	d104      	bne.n	801549c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8015492:	2101      	movs	r1, #1
 8015494:	68f8      	ldr	r0, [r7, #12]
 8015496:	f001 f8ff 	bl	8016698 <lwip_netconn_do_writemore>
 801549a:	e016      	b.n	80154ca <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	785b      	ldrb	r3, [r3, #1]
 80154a0:	2b04      	cmp	r3, #4
 80154a2:	d112      	bne.n	80154ca <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	6a1b      	ldr	r3, [r3, #32]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d00a      	beq.n	80154c2 <poll_tcp+0x5a>
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	6a1b      	ldr	r3, [r3, #32]
 80154b0:	7a5b      	ldrb	r3, [r3, #9]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d005      	beq.n	80154c2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	6a1b      	ldr	r3, [r3, #32]
 80154ba:	7a5a      	ldrb	r2, [r3, #9]
 80154bc:	3a01      	subs	r2, #1
 80154be:	b2d2      	uxtb	r2, r2
 80154c0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80154c2:	2101      	movs	r1, #1
 80154c4:	68f8      	ldr	r0, [r7, #12]
 80154c6:	f000 fbf7 	bl	8015cb8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	7f1b      	ldrb	r3, [r3, #28]
 80154ce:	f003 0310 	and.w	r3, r3, #16
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d021      	beq.n	801551a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d01d      	beq.n	801551a <poll_tcp+0xb2>
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	685b      	ldr	r3, [r3, #4]
 80154e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80154e6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80154ea:	d316      	bcc.n	801551a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	685b      	ldr	r3, [r3, #4]
 80154f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80154f4:	2b04      	cmp	r3, #4
 80154f6:	d810      	bhi.n	801551a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	7f1b      	ldrb	r3, [r3, #28]
 80154fc:	f023 0310 	bic.w	r3, r3, #16
 8015500:	b2da      	uxtb	r2, r3
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801550a:	2b00      	cmp	r3, #0
 801550c:	d005      	beq.n	801551a <poll_tcp+0xb2>
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015512:	2200      	movs	r2, #0
 8015514:	2102      	movs	r1, #2
 8015516:	68f8      	ldr	r0, [r7, #12]
 8015518:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801551a:	2300      	movs	r3, #0
}
 801551c:	4618      	mov	r0, r3
 801551e:	3710      	adds	r7, #16
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}
 8015524:	08025678 	.word	0x08025678
 8015528:	080257d0 	.word	0x080257d0
 801552c:	080256bc 	.word	0x080256bc

08015530 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b086      	sub	sp, #24
 8015534:	af00      	add	r7, sp, #0
 8015536:	60f8      	str	r0, [r7, #12]
 8015538:	60b9      	str	r1, [r7, #8]
 801553a:	4613      	mov	r3, r2
 801553c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d106      	bne.n	8015556 <sent_tcp+0x26>
 8015548:	4b20      	ldr	r3, [pc, #128]	; (80155cc <sent_tcp+0x9c>)
 801554a:	f240 1293 	movw	r2, #403	; 0x193
 801554e:	4920      	ldr	r1, [pc, #128]	; (80155d0 <sent_tcp+0xa0>)
 8015550:	4820      	ldr	r0, [pc, #128]	; (80155d4 <sent_tcp+0xa4>)
 8015552:	f00e fc15 	bl	8023d80 <iprintf>

  if (conn) {
 8015556:	697b      	ldr	r3, [r7, #20]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d032      	beq.n	80155c2 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	785b      	ldrb	r3, [r3, #1]
 8015560:	2b01      	cmp	r3, #1
 8015562:	d104      	bne.n	801556e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8015564:	2101      	movs	r1, #1
 8015566:	6978      	ldr	r0, [r7, #20]
 8015568:	f001 f896 	bl	8016698 <lwip_netconn_do_writemore>
 801556c:	e007      	b.n	801557e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	785b      	ldrb	r3, [r3, #1]
 8015572:	2b04      	cmp	r3, #4
 8015574:	d103      	bne.n	801557e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8015576:	2101      	movs	r1, #1
 8015578:	6978      	ldr	r0, [r7, #20]
 801557a:	f000 fb9d 	bl	8015cb8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801557e:	697b      	ldr	r3, [r7, #20]
 8015580:	685b      	ldr	r3, [r3, #4]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d01d      	beq.n	80155c2 <sent_tcp+0x92>
 8015586:	697b      	ldr	r3, [r7, #20]
 8015588:	685b      	ldr	r3, [r3, #4]
 801558a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801558e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8015592:	d316      	bcc.n	80155c2 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8015594:	697b      	ldr	r3, [r7, #20]
 8015596:	685b      	ldr	r3, [r3, #4]
 8015598:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801559c:	2b04      	cmp	r3, #4
 801559e:	d810      	bhi.n	80155c2 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	7f1b      	ldrb	r3, [r3, #28]
 80155a4:	f023 0310 	bic.w	r3, r3, #16
 80155a8:	b2da      	uxtb	r2, r3
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d005      	beq.n	80155c2 <sent_tcp+0x92>
 80155b6:	697b      	ldr	r3, [r7, #20]
 80155b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155ba:	88fa      	ldrh	r2, [r7, #6]
 80155bc:	2102      	movs	r1, #2
 80155be:	6978      	ldr	r0, [r7, #20]
 80155c0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80155c2:	2300      	movs	r3, #0
}
 80155c4:	4618      	mov	r0, r3
 80155c6:	3718      	adds	r7, #24
 80155c8:	46bd      	mov	sp, r7
 80155ca:	bd80      	pop	{r7, pc}
 80155cc:	08025678 	.word	0x08025678
 80155d0:	080257d0 	.word	0x080257d0
 80155d4:	080256bc 	.word	0x080256bc

080155d8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b088      	sub	sp, #32
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
 80155e0:	460b      	mov	r3, r1
 80155e2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80155e8:	69fb      	ldr	r3, [r7, #28]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d106      	bne.n	80155fc <err_tcp+0x24>
 80155ee:	4b5f      	ldr	r3, [pc, #380]	; (801576c <err_tcp+0x194>)
 80155f0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80155f4:	495e      	ldr	r1, [pc, #376]	; (8015770 <err_tcp+0x198>)
 80155f6:	485f      	ldr	r0, [pc, #380]	; (8015774 <err_tcp+0x19c>)
 80155f8:	f00e fbc2 	bl	8023d80 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80155fc:	f00d f92c 	bl	8022858 <sys_arch_protect>
 8015600:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8015602:	69fb      	ldr	r3, [r7, #28]
 8015604:	2200      	movs	r2, #0
 8015606:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8015608:	69fb      	ldr	r3, [r7, #28]
 801560a:	78fa      	ldrb	r2, [r7, #3]
 801560c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 801560e:	69fb      	ldr	r3, [r7, #28]
 8015610:	7f1b      	ldrb	r3, [r3, #28]
 8015612:	f043 0301 	orr.w	r3, r3, #1
 8015616:	b2da      	uxtb	r2, r3
 8015618:	69fb      	ldr	r3, [r7, #28]
 801561a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 801561c:	69fb      	ldr	r3, [r7, #28]
 801561e:	785b      	ldrb	r3, [r3, #1]
 8015620:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8015622:	69fb      	ldr	r3, [r7, #28]
 8015624:	2200      	movs	r2, #0
 8015626:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8015628:	69b8      	ldr	r0, [r7, #24]
 801562a:	f00d f923 	bl	8022874 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801562e:	69fb      	ldr	r3, [r7, #28]
 8015630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015632:	2b00      	cmp	r3, #0
 8015634:	d005      	beq.n	8015642 <err_tcp+0x6a>
 8015636:	69fb      	ldr	r3, [r7, #28]
 8015638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801563a:	2200      	movs	r2, #0
 801563c:	2104      	movs	r1, #4
 801563e:	69f8      	ldr	r0, [r7, #28]
 8015640:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015642:	69fb      	ldr	r3, [r7, #28]
 8015644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015646:	2b00      	cmp	r3, #0
 8015648:	d005      	beq.n	8015656 <err_tcp+0x7e>
 801564a:	69fb      	ldr	r3, [r7, #28]
 801564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801564e:	2200      	movs	r2, #0
 8015650:	2100      	movs	r1, #0
 8015652:	69f8      	ldr	r0, [r7, #28]
 8015654:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015656:	69fb      	ldr	r3, [r7, #28]
 8015658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801565a:	2b00      	cmp	r3, #0
 801565c:	d005      	beq.n	801566a <err_tcp+0x92>
 801565e:	69fb      	ldr	r3, [r7, #28]
 8015660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015662:	2200      	movs	r2, #0
 8015664:	2102      	movs	r1, #2
 8015666:	69f8      	ldr	r0, [r7, #28]
 8015668:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 801566a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801566e:	4618      	mov	r0, r3
 8015670:	f7ff fd86 	bl	8015180 <lwip_netconn_err_to_msg>
 8015674:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8015676:	69fb      	ldr	r3, [r7, #28]
 8015678:	3310      	adds	r3, #16
 801567a:	4618      	mov	r0, r3
 801567c:	f00c ffd1 	bl	8022622 <sys_mbox_valid>
 8015680:	4603      	mov	r3, r0
 8015682:	2b00      	cmp	r3, #0
 8015684:	d005      	beq.n	8015692 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8015686:	69fb      	ldr	r3, [r7, #28]
 8015688:	3310      	adds	r3, #16
 801568a:	6939      	ldr	r1, [r7, #16]
 801568c:	4618      	mov	r0, r3
 801568e:	f00c ff53 	bl	8022538 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8015692:	69fb      	ldr	r3, [r7, #28]
 8015694:	3314      	adds	r3, #20
 8015696:	4618      	mov	r0, r3
 8015698:	f00c ffc3 	bl	8022622 <sys_mbox_valid>
 801569c:	4603      	mov	r3, r0
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d005      	beq.n	80156ae <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80156a2:	69fb      	ldr	r3, [r7, #28]
 80156a4:	3314      	adds	r3, #20
 80156a6:	6939      	ldr	r1, [r7, #16]
 80156a8:	4618      	mov	r0, r3
 80156aa:	f00c ff45 	bl	8022538 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80156ae:	7dfb      	ldrb	r3, [r7, #23]
 80156b0:	2b01      	cmp	r3, #1
 80156b2:	d005      	beq.n	80156c0 <err_tcp+0xe8>
 80156b4:	7dfb      	ldrb	r3, [r7, #23]
 80156b6:	2b04      	cmp	r3, #4
 80156b8:	d002      	beq.n	80156c0 <err_tcp+0xe8>
 80156ba:	7dfb      	ldrb	r3, [r7, #23]
 80156bc:	2b03      	cmp	r3, #3
 80156be:	d143      	bne.n	8015748 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80156c0:	69fb      	ldr	r3, [r7, #28]
 80156c2:	7f1b      	ldrb	r3, [r3, #28]
 80156c4:	f003 0304 	and.w	r3, r3, #4
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	bf14      	ite	ne
 80156cc:	2301      	movne	r3, #1
 80156ce:	2300      	moveq	r3, #0
 80156d0:	b2db      	uxtb	r3, r3
 80156d2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80156d4:	69fb      	ldr	r3, [r7, #28]
 80156d6:	7f1b      	ldrb	r3, [r3, #28]
 80156d8:	f023 0304 	bic.w	r3, r3, #4
 80156dc:	b2da      	uxtb	r2, r3
 80156de:	69fb      	ldr	r3, [r7, #28]
 80156e0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d13b      	bne.n	8015760 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80156e8:	69fb      	ldr	r3, [r7, #28]
 80156ea:	6a1b      	ldr	r3, [r3, #32]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d106      	bne.n	80156fe <err_tcp+0x126>
 80156f0:	4b1e      	ldr	r3, [pc, #120]	; (801576c <err_tcp+0x194>)
 80156f2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80156f6:	4920      	ldr	r1, [pc, #128]	; (8015778 <err_tcp+0x1a0>)
 80156f8:	481e      	ldr	r0, [pc, #120]	; (8015774 <err_tcp+0x19c>)
 80156fa:	f00e fb41 	bl	8023d80 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80156fe:	7dfb      	ldrb	r3, [r7, #23]
 8015700:	2b04      	cmp	r3, #4
 8015702:	d104      	bne.n	801570e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8015704:	69fb      	ldr	r3, [r7, #28]
 8015706:	6a1b      	ldr	r3, [r3, #32]
 8015708:	2200      	movs	r2, #0
 801570a:	711a      	strb	r2, [r3, #4]
 801570c:	e003      	b.n	8015716 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 801570e:	69fb      	ldr	r3, [r7, #28]
 8015710:	6a1b      	ldr	r3, [r3, #32]
 8015712:	78fa      	ldrb	r2, [r7, #3]
 8015714:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015716:	69fb      	ldr	r3, [r7, #28]
 8015718:	6a1b      	ldr	r3, [r3, #32]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	330c      	adds	r3, #12
 801571e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8015720:	68b8      	ldr	r0, [r7, #8]
 8015722:	f00d f80f 	bl	8022744 <sys_sem_valid>
 8015726:	4603      	mov	r3, r0
 8015728:	2b00      	cmp	r3, #0
 801572a:	d106      	bne.n	801573a <err_tcp+0x162>
 801572c:	4b0f      	ldr	r3, [pc, #60]	; (801576c <err_tcp+0x194>)
 801572e:	f240 12ef 	movw	r2, #495	; 0x1ef
 8015732:	4912      	ldr	r1, [pc, #72]	; (801577c <err_tcp+0x1a4>)
 8015734:	480f      	ldr	r0, [pc, #60]	; (8015774 <err_tcp+0x19c>)
 8015736:	f00e fb23 	bl	8023d80 <iprintf>
      conn->current_msg = NULL;
 801573a:	69fb      	ldr	r3, [r7, #28]
 801573c:	2200      	movs	r2, #0
 801573e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8015740:	68b8      	ldr	r0, [r7, #8]
 8015742:	f00c ffe5 	bl	8022710 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8015746:	e00b      	b.n	8015760 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8015748:	69fb      	ldr	r3, [r7, #28]
 801574a:	6a1b      	ldr	r3, [r3, #32]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d008      	beq.n	8015762 <err_tcp+0x18a>
 8015750:	4b06      	ldr	r3, [pc, #24]	; (801576c <err_tcp+0x194>)
 8015752:	f240 12f7 	movw	r2, #503	; 0x1f7
 8015756:	490a      	ldr	r1, [pc, #40]	; (8015780 <err_tcp+0x1a8>)
 8015758:	4806      	ldr	r0, [pc, #24]	; (8015774 <err_tcp+0x19c>)
 801575a:	f00e fb11 	bl	8023d80 <iprintf>
  }
}
 801575e:	e000      	b.n	8015762 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8015760:	bf00      	nop
}
 8015762:	bf00      	nop
 8015764:	3720      	adds	r7, #32
 8015766:	46bd      	mov	sp, r7
 8015768:	bd80      	pop	{r7, pc}
 801576a:	bf00      	nop
 801576c:	08025678 	.word	0x08025678
 8015770:	080257d0 	.word	0x080257d0
 8015774:	080256bc 	.word	0x080256bc
 8015778:	080257e0 	.word	0x080257e0
 801577c:	080257fc 	.word	0x080257fc
 8015780:	08025818 	.word	0x08025818

08015784 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b084      	sub	sp, #16
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	685b      	ldr	r3, [r3, #4]
 8015790:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8015792:	6879      	ldr	r1, [r7, #4]
 8015794:	68f8      	ldr	r0, [r7, #12]
 8015796:	f005 f861 	bl	801a85c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 801579a:	490a      	ldr	r1, [pc, #40]	; (80157c4 <setup_tcp+0x40>)
 801579c:	68f8      	ldr	r0, [r7, #12]
 801579e:	f005 f86f 	bl	801a880 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80157a2:	4909      	ldr	r1, [pc, #36]	; (80157c8 <setup_tcp+0x44>)
 80157a4:	68f8      	ldr	r0, [r7, #12]
 80157a6:	f005 f88d 	bl	801a8c4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80157aa:	2202      	movs	r2, #2
 80157ac:	4907      	ldr	r1, [pc, #28]	; (80157cc <setup_tcp+0x48>)
 80157ae:	68f8      	ldr	r0, [r7, #12]
 80157b0:	f005 f8e4 	bl	801a97c <tcp_poll>
  tcp_err(pcb, err_tcp);
 80157b4:	4906      	ldr	r1, [pc, #24]	; (80157d0 <setup_tcp+0x4c>)
 80157b6:	68f8      	ldr	r0, [r7, #12]
 80157b8:	f005 f8a6 	bl	801a908 <tcp_err>
}
 80157bc:	bf00      	nop
 80157be:	3710      	adds	r7, #16
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}
 80157c4:	0801535d 	.word	0x0801535d
 80157c8:	08015531 	.word	0x08015531
 80157cc:	08015469 	.word	0x08015469
 80157d0:	080155d9 	.word	0x080155d9

080157d4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80157d4:	b590      	push	{r4, r7, lr}
 80157d6:	b089      	sub	sp, #36	; 0x24
 80157d8:	af00      	add	r7, sp, #0
 80157da:	60f8      	str	r0, [r7, #12]
 80157dc:	60b9      	str	r1, [r7, #8]
 80157de:	4613      	mov	r3, r2
 80157e0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80157e6:	69fb      	ldr	r3, [r7, #28]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d102      	bne.n	80157f2 <accept_function+0x1e>
    return ERR_VAL;
 80157ec:	f06f 0305 	mvn.w	r3, #5
 80157f0:	e0a1      	b.n	8015936 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80157f2:	69fb      	ldr	r3, [r7, #28]
 80157f4:	3314      	adds	r3, #20
 80157f6:	4618      	mov	r0, r3
 80157f8:	f00c ff13 	bl	8022622 <sys_mbox_valid>
 80157fc:	4603      	mov	r3, r0
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d102      	bne.n	8015808 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8015802:	f06f 0305 	mvn.w	r3, #5
 8015806:	e096      	b.n	8015936 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d11b      	bne.n	8015846 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 801580e:	69fb      	ldr	r3, [r7, #28]
 8015810:	f103 0414 	add.w	r4, r3, #20
 8015814:	f06f 000c 	mvn.w	r0, #12
 8015818:	f7ff fcb2 	bl	8015180 <lwip_netconn_err_to_msg>
 801581c:	4603      	mov	r3, r0
 801581e:	4619      	mov	r1, r3
 8015820:	4620      	mov	r0, r4
 8015822:	f00c fe89 	bl	8022538 <sys_mbox_trypost>
 8015826:	4603      	mov	r3, r0
 8015828:	2b00      	cmp	r3, #0
 801582a:	d109      	bne.n	8015840 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801582c:	69fb      	ldr	r3, [r7, #28]
 801582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015830:	2b00      	cmp	r3, #0
 8015832:	d005      	beq.n	8015840 <accept_function+0x6c>
 8015834:	69fb      	ldr	r3, [r7, #28]
 8015836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015838:	2200      	movs	r2, #0
 801583a:	2100      	movs	r1, #0
 801583c:	69f8      	ldr	r0, [r7, #28]
 801583e:	4798      	blx	r3
    }
    return ERR_VAL;
 8015840:	f06f 0305 	mvn.w	r3, #5
 8015844:	e077      	b.n	8015936 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8015846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d006      	beq.n	801585c <accept_function+0x88>
 801584e:	4b3c      	ldr	r3, [pc, #240]	; (8015940 <accept_function+0x16c>)
 8015850:	f240 222a 	movw	r2, #554	; 0x22a
 8015854:	493b      	ldr	r1, [pc, #236]	; (8015944 <accept_function+0x170>)
 8015856:	483c      	ldr	r0, [pc, #240]	; (8015948 <accept_function+0x174>)
 8015858:	f00e fa92 	bl	8023d80 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 801585c:	69fb      	ldr	r3, [r7, #28]
 801585e:	781a      	ldrb	r2, [r3, #0]
 8015860:	69fb      	ldr	r3, [r7, #28]
 8015862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015864:	4619      	mov	r1, r3
 8015866:	4610      	mov	r0, r2
 8015868:	f000 f8f0 	bl	8015a4c <netconn_alloc>
 801586c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 801586e:	69bb      	ldr	r3, [r7, #24]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d11b      	bne.n	80158ac <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8015874:	69fb      	ldr	r3, [r7, #28]
 8015876:	f103 0414 	add.w	r4, r3, #20
 801587a:	f06f 000c 	mvn.w	r0, #12
 801587e:	f7ff fc7f 	bl	8015180 <lwip_netconn_err_to_msg>
 8015882:	4603      	mov	r3, r0
 8015884:	4619      	mov	r1, r3
 8015886:	4620      	mov	r0, r4
 8015888:	f00c fe56 	bl	8022538 <sys_mbox_trypost>
 801588c:	4603      	mov	r3, r0
 801588e:	2b00      	cmp	r3, #0
 8015890:	d109      	bne.n	80158a6 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015892:	69fb      	ldr	r3, [r7, #28]
 8015894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015896:	2b00      	cmp	r3, #0
 8015898:	d005      	beq.n	80158a6 <accept_function+0xd2>
 801589a:	69fb      	ldr	r3, [r7, #28]
 801589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801589e:	2200      	movs	r2, #0
 80158a0:	2100      	movs	r1, #0
 80158a2:	69f8      	ldr	r0, [r7, #28]
 80158a4:	4798      	blx	r3
    }
    return ERR_MEM;
 80158a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80158aa:	e044      	b.n	8015936 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80158ac:	69bb      	ldr	r3, [r7, #24]
 80158ae:	68ba      	ldr	r2, [r7, #8]
 80158b0:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80158b2:	69b8      	ldr	r0, [r7, #24]
 80158b4:	f7ff ff66 	bl	8015784 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80158b8:	69fb      	ldr	r3, [r7, #28]
 80158ba:	3314      	adds	r3, #20
 80158bc:	69b9      	ldr	r1, [r7, #24]
 80158be:	4618      	mov	r0, r3
 80158c0:	f00c fe3a 	bl	8022538 <sys_mbox_trypost>
 80158c4:	4603      	mov	r3, r0
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d02a      	beq.n	8015920 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80158ca:	69bb      	ldr	r3, [r7, #24]
 80158cc:	685b      	ldr	r3, [r3, #4]
 80158ce:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80158d0:	2100      	movs	r1, #0
 80158d2:	6978      	ldr	r0, [r7, #20]
 80158d4:	f004 ffc2 	bl	801a85c <tcp_arg>
    tcp_recv(pcb, NULL);
 80158d8:	2100      	movs	r1, #0
 80158da:	6978      	ldr	r0, [r7, #20]
 80158dc:	f004 ffd0 	bl	801a880 <tcp_recv>
    tcp_sent(pcb, NULL);
 80158e0:	2100      	movs	r1, #0
 80158e2:	6978      	ldr	r0, [r7, #20]
 80158e4:	f004 ffee 	bl	801a8c4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80158e8:	2200      	movs	r2, #0
 80158ea:	2100      	movs	r1, #0
 80158ec:	6978      	ldr	r0, [r7, #20]
 80158ee:	f005 f845 	bl	801a97c <tcp_poll>
    tcp_err(pcb, NULL);
 80158f2:	2100      	movs	r1, #0
 80158f4:	6978      	ldr	r0, [r7, #20]
 80158f6:	f005 f807 	bl	801a908 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80158fa:	69bb      	ldr	r3, [r7, #24]
 80158fc:	2200      	movs	r2, #0
 80158fe:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8015900:	69bb      	ldr	r3, [r7, #24]
 8015902:	3310      	adds	r3, #16
 8015904:	4618      	mov	r0, r3
 8015906:	f00c fe05 	bl	8022514 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 801590a:	69bb      	ldr	r3, [r7, #24]
 801590c:	3310      	adds	r3, #16
 801590e:	4618      	mov	r0, r3
 8015910:	f00c fe98 	bl	8022644 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8015914:	69b8      	ldr	r0, [r7, #24]
 8015916:	f000 f907 	bl	8015b28 <netconn_free>
    return ERR_MEM;
 801591a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801591e:	e00a      	b.n	8015936 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015920:	69fb      	ldr	r3, [r7, #28]
 8015922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015924:	2b00      	cmp	r3, #0
 8015926:	d005      	beq.n	8015934 <accept_function+0x160>
 8015928:	69fb      	ldr	r3, [r7, #28]
 801592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801592c:	2200      	movs	r2, #0
 801592e:	2100      	movs	r1, #0
 8015930:	69f8      	ldr	r0, [r7, #28]
 8015932:	4798      	blx	r3
  }

  return ERR_OK;
 8015934:	2300      	movs	r3, #0
}
 8015936:	4618      	mov	r0, r3
 8015938:	3724      	adds	r7, #36	; 0x24
 801593a:	46bd      	mov	sp, r7
 801593c:	bd90      	pop	{r4, r7, pc}
 801593e:	bf00      	nop
 8015940:	08025678 	.word	0x08025678
 8015944:	08025834 	.word	0x08025834
 8015948:	080256bc 	.word	0x080256bc

0801594c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 801594c:	b590      	push	{r4, r7, lr}
 801594e:	b085      	sub	sp, #20
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8015954:	2300      	movs	r3, #0
 8015956:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	685b      	ldr	r3, [r3, #4]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d006      	beq.n	8015970 <pcb_new+0x24>
 8015962:	4b2b      	ldr	r3, [pc, #172]	; (8015a10 <pcb_new+0xc4>)
 8015964:	f240 2265 	movw	r2, #613	; 0x265
 8015968:	492a      	ldr	r1, [pc, #168]	; (8015a14 <pcb_new+0xc8>)
 801596a:	482b      	ldr	r0, [pc, #172]	; (8015a18 <pcb_new+0xcc>)
 801596c:	f00e fa08 	bl	8023d80 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	781b      	ldrb	r3, [r3, #0]
 8015976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801597a:	2b10      	cmp	r3, #16
 801597c:	d022      	beq.n	80159c4 <pcb_new+0x78>
 801597e:	2b20      	cmp	r3, #32
 8015980:	d133      	bne.n	80159ea <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	681c      	ldr	r4, [r3, #0]
 8015986:	7bfb      	ldrb	r3, [r7, #15]
 8015988:	4618      	mov	r0, r3
 801598a:	f00a fa9e 	bl	801feca <udp_new_ip_type>
 801598e:	4603      	mov	r3, r0
 8015990:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d02a      	beq.n	80159f2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	781b      	ldrb	r3, [r3, #0]
 80159a2:	2b22      	cmp	r3, #34	; 0x22
 80159a4:	d104      	bne.n	80159b0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	685b      	ldr	r3, [r3, #4]
 80159ac:	2201      	movs	r2, #1
 80159ae:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	6858      	ldr	r0, [r3, #4]
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	461a      	mov	r2, r3
 80159bc:	4917      	ldr	r1, [pc, #92]	; (8015a1c <pcb_new+0xd0>)
 80159be:	f00a fa0b 	bl	801fdd8 <udp_recv>
      }
      break;
 80159c2:	e016      	b.n	80159f2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681c      	ldr	r4, [r3, #0]
 80159c8:	7bfb      	ldrb	r3, [r7, #15]
 80159ca:	4618      	mov	r0, r3
 80159cc:	f004 ff38 	bl	801a840 <tcp_new_ip_type>
 80159d0:	4603      	mov	r3, r0
 80159d2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	685b      	ldr	r3, [r3, #4]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d00b      	beq.n	80159f6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	4618      	mov	r0, r3
 80159e4:	f7ff fece 	bl	8015784 <setup_tcp>
      }
      break;
 80159e8:	e005      	b.n	80159f6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	22fa      	movs	r2, #250	; 0xfa
 80159ee:	711a      	strb	r2, [r3, #4]
      return;
 80159f0:	e00a      	b.n	8015a08 <pcb_new+0xbc>
      break;
 80159f2:	bf00      	nop
 80159f4:	e000      	b.n	80159f8 <pcb_new+0xac>
      break;
 80159f6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	685b      	ldr	r3, [r3, #4]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d102      	bne.n	8015a08 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	22ff      	movs	r2, #255	; 0xff
 8015a06:	711a      	strb	r2, [r3, #4]
  }
}
 8015a08:	3714      	adds	r7, #20
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	bd90      	pop	{r4, r7, pc}
 8015a0e:	bf00      	nop
 8015a10:	08025678 	.word	0x08025678
 8015a14:	0802585c 	.word	0x0802585c
 8015a18:	080256bc 	.word	0x080256bc
 8015a1c:	08015261 	.word	0x08015261

08015a20 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b084      	sub	sp, #16
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	685b      	ldr	r3, [r3, #4]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d102      	bne.n	8015a42 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8015a3c:	68f8      	ldr	r0, [r7, #12]
 8015a3e:	f7ff ff85 	bl	801594c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8015a42:	bf00      	nop
 8015a44:	3710      	adds	r7, #16
 8015a46:	46bd      	mov	sp, r7
 8015a48:	bd80      	pop	{r7, pc}
	...

08015a4c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b086      	sub	sp, #24
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	4603      	mov	r3, r0
 8015a54:	6039      	str	r1, [r7, #0]
 8015a56:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8015a58:	2300      	movs	r3, #0
 8015a5a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8015a5c:	2007      	movs	r0, #7
 8015a5e:	f002 f83d 	bl	8017adc <memp_malloc>
 8015a62:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d101      	bne.n	8015a6e <netconn_alloc+0x22>
    return NULL;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	e052      	b.n	8015b14 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	2200      	movs	r2, #0
 8015a72:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	79fa      	ldrb	r2, [r7, #7]
 8015a78:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8015a80:	79fb      	ldrb	r3, [r7, #7]
 8015a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015a86:	2b10      	cmp	r3, #16
 8015a88:	d004      	beq.n	8015a94 <netconn_alloc+0x48>
 8015a8a:	2b20      	cmp	r3, #32
 8015a8c:	d105      	bne.n	8015a9a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8015a8e:	2306      	movs	r3, #6
 8015a90:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8015a92:	e00a      	b.n	8015aaa <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8015a94:	2306      	movs	r3, #6
 8015a96:	617b      	str	r3, [r7, #20]
      break;
 8015a98:	e007      	b.n	8015aaa <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8015a9a:	4b20      	ldr	r3, [pc, #128]	; (8015b1c <netconn_alloc+0xd0>)
 8015a9c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8015aa0:	491f      	ldr	r1, [pc, #124]	; (8015b20 <netconn_alloc+0xd4>)
 8015aa2:	4820      	ldr	r0, [pc, #128]	; (8015b24 <netconn_alloc+0xd8>)
 8015aa4:	f00e f96c 	bl	8023d80 <iprintf>
      goto free_and_return;
 8015aa8:	e02f      	b.n	8015b0a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	3310      	adds	r3, #16
 8015aae:	6979      	ldr	r1, [r7, #20]
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f00c fd0d 	bl	80224d0 <sys_mbox_new>
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d125      	bne.n	8015b08 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	330c      	adds	r3, #12
 8015ac0:	2100      	movs	r1, #0
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f00c fdcb 	bl	802265e <sys_sem_new>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d005      	beq.n	8015ada <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	3310      	adds	r3, #16
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f00c fd1e 	bl	8022514 <sys_mbox_free>
    goto free_and_return;
 8015ad8:	e017      	b.n	8015b0a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	3314      	adds	r3, #20
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f00c fdb0 	bl	8022644 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015af0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	683a      	ldr	r2, [r7, #0]
 8015af6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	2200      	movs	r2, #0
 8015afc:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	7cfa      	ldrb	r2, [r7, #19]
 8015b02:	771a      	strb	r2, [r3, #28]
  return conn;
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	e005      	b.n	8015b14 <netconn_alloc+0xc8>
    goto free_and_return;
 8015b08:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8015b0a:	68f9      	ldr	r1, [r7, #12]
 8015b0c:	2007      	movs	r0, #7
 8015b0e:	f002 f85b 	bl	8017bc8 <memp_free>
  return NULL;
 8015b12:	2300      	movs	r3, #0
}
 8015b14:	4618      	mov	r0, r3
 8015b16:	3718      	adds	r7, #24
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bd80      	pop	{r7, pc}
 8015b1c:	08025678 	.word	0x08025678
 8015b20:	0802587c 	.word	0x0802587c
 8015b24:	080256bc 	.word	0x080256bc

08015b28 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b082      	sub	sp, #8
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	685b      	ldr	r3, [r3, #4]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d006      	beq.n	8015b46 <netconn_free+0x1e>
 8015b38:	4b1b      	ldr	r3, [pc, #108]	; (8015ba8 <netconn_free+0x80>)
 8015b3a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015b3e:	491b      	ldr	r1, [pc, #108]	; (8015bac <netconn_free+0x84>)
 8015b40:	481b      	ldr	r0, [pc, #108]	; (8015bb0 <netconn_free+0x88>)
 8015b42:	f00e f91d 	bl	8023d80 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	3310      	adds	r3, #16
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f00c fd69 	bl	8022622 <sys_mbox_valid>
 8015b50:	4603      	mov	r3, r0
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d006      	beq.n	8015b64 <netconn_free+0x3c>
 8015b56:	4b14      	ldr	r3, [pc, #80]	; (8015ba8 <netconn_free+0x80>)
 8015b58:	f240 3223 	movw	r2, #803	; 0x323
 8015b5c:	4915      	ldr	r1, [pc, #84]	; (8015bb4 <netconn_free+0x8c>)
 8015b5e:	4814      	ldr	r0, [pc, #80]	; (8015bb0 <netconn_free+0x88>)
 8015b60:	f00e f90e 	bl	8023d80 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	3314      	adds	r3, #20
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f00c fd5a 	bl	8022622 <sys_mbox_valid>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d006      	beq.n	8015b82 <netconn_free+0x5a>
 8015b74:	4b0c      	ldr	r3, [pc, #48]	; (8015ba8 <netconn_free+0x80>)
 8015b76:	f240 3226 	movw	r2, #806	; 0x326
 8015b7a:	490f      	ldr	r1, [pc, #60]	; (8015bb8 <netconn_free+0x90>)
 8015b7c:	480c      	ldr	r0, [pc, #48]	; (8015bb0 <netconn_free+0x88>)
 8015b7e:	f00e f8ff 	bl	8023d80 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	330c      	adds	r3, #12
 8015b86:	4618      	mov	r0, r3
 8015b88:	f00c fdcf 	bl	802272a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	330c      	adds	r3, #12
 8015b90:	4618      	mov	r0, r3
 8015b92:	f00c fde8 	bl	8022766 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8015b96:	6879      	ldr	r1, [r7, #4]
 8015b98:	2007      	movs	r0, #7
 8015b9a:	f002 f815 	bl	8017bc8 <memp_free>
}
 8015b9e:	bf00      	nop
 8015ba0:	3708      	adds	r7, #8
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	08025678 	.word	0x08025678
 8015bac:	080258a4 	.word	0x080258a4
 8015bb0:	080256bc 	.word	0x080256bc
 8015bb4:	080258d4 	.word	0x080258d4
 8015bb8:	08025910 	.word	0x08025910

08015bbc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b086      	sub	sp, #24
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	3310      	adds	r3, #16
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f00c fd2a 	bl	8022622 <sys_mbox_valid>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d02f      	beq.n	8015c34 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8015bd4:	e018      	b.n	8015c08 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015bde:	2b10      	cmp	r3, #16
 8015be0:	d10e      	bne.n	8015c00 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8015be2:	693b      	ldr	r3, [r7, #16]
 8015be4:	f107 020f 	add.w	r2, r7, #15
 8015be8:	4611      	mov	r1, r2
 8015bea:	4618      	mov	r0, r3
 8015bec:	f7ff fafe 	bl	80151ec <lwip_netconn_is_err_msg>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d108      	bne.n	8015c08 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8015bf6:	693b      	ldr	r3, [r7, #16]
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f002 fe89 	bl	8018910 <pbuf_free>
 8015bfe:	e003      	b.n	8015c08 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8015c00:	693b      	ldr	r3, [r7, #16]
 8015c02:	4618      	mov	r0, r3
 8015c04:	f001 f840 	bl	8016c88 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	3310      	adds	r3, #16
 8015c0c:	f107 0210 	add.w	r2, r7, #16
 8015c10:	4611      	mov	r1, r2
 8015c12:	4618      	mov	r0, r3
 8015c14:	f00c fce9 	bl	80225ea <sys_arch_mbox_tryfetch>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015c1e:	d1da      	bne.n	8015bd6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	3310      	adds	r3, #16
 8015c24:	4618      	mov	r0, r3
 8015c26:	f00c fc75 	bl	8022514 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	3310      	adds	r3, #16
 8015c2e:	4618      	mov	r0, r3
 8015c30:	f00c fd08 	bl	8022644 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	3314      	adds	r3, #20
 8015c38:	4618      	mov	r0, r3
 8015c3a:	f00c fcf2 	bl	8022622 <sys_mbox_valid>
 8015c3e:	4603      	mov	r3, r0
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d034      	beq.n	8015cae <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8015c44:	e01d      	b.n	8015c82 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8015c46:	693b      	ldr	r3, [r7, #16]
 8015c48:	f107 020e 	add.w	r2, r7, #14
 8015c4c:	4611      	mov	r1, r2
 8015c4e:	4618      	mov	r0, r3
 8015c50:	f7ff facc 	bl	80151ec <lwip_netconn_is_err_msg>
 8015c54:	4603      	mov	r3, r0
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d113      	bne.n	8015c82 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8015c5a:	693b      	ldr	r3, [r7, #16]
 8015c5c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8015c5e:	6978      	ldr	r0, [r7, #20]
 8015c60:	f7ff ffac 	bl	8015bbc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8015c64:	697b      	ldr	r3, [r7, #20]
 8015c66:	685b      	ldr	r3, [r3, #4]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d007      	beq.n	8015c7c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8015c6c:	697b      	ldr	r3, [r7, #20]
 8015c6e:	685b      	ldr	r3, [r3, #4]
 8015c70:	4618      	mov	r0, r3
 8015c72:	f003 fc4d 	bl	8019510 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8015c76:	697b      	ldr	r3, [r7, #20]
 8015c78:	2200      	movs	r2, #0
 8015c7a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8015c7c:	6978      	ldr	r0, [r7, #20]
 8015c7e:	f7ff ff53 	bl	8015b28 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	3314      	adds	r3, #20
 8015c86:	f107 0210 	add.w	r2, r7, #16
 8015c8a:	4611      	mov	r1, r2
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f00c fcac 	bl	80225ea <sys_arch_mbox_tryfetch>
 8015c92:	4603      	mov	r3, r0
 8015c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015c98:	d1d5      	bne.n	8015c46 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	3314      	adds	r3, #20
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f00c fc38 	bl	8022514 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	3314      	adds	r3, #20
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f00c fccb 	bl	8022644 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8015cae:	bf00      	nop
 8015cb0:	3718      	adds	r7, #24
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
	...

08015cb8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b086      	sub	sp, #24
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
 8015cc0:	460b      	mov	r3, r1
 8015cc2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d106      	bne.n	8015cdc <lwip_netconn_do_close_internal+0x24>
 8015cce:	4b87      	ldr	r3, [pc, #540]	; (8015eec <lwip_netconn_do_close_internal+0x234>)
 8015cd0:	f240 32a2 	movw	r2, #930	; 0x3a2
 8015cd4:	4986      	ldr	r1, [pc, #536]	; (8015ef0 <lwip_netconn_do_close_internal+0x238>)
 8015cd6:	4887      	ldr	r0, [pc, #540]	; (8015ef4 <lwip_netconn_do_close_internal+0x23c>)
 8015cd8:	f00e f852 	bl	8023d80 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	781b      	ldrb	r3, [r3, #0]
 8015ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015ce4:	2b10      	cmp	r3, #16
 8015ce6:	d006      	beq.n	8015cf6 <lwip_netconn_do_close_internal+0x3e>
 8015ce8:	4b80      	ldr	r3, [pc, #512]	; (8015eec <lwip_netconn_do_close_internal+0x234>)
 8015cea:	f240 32a3 	movw	r2, #931	; 0x3a3
 8015cee:	4982      	ldr	r1, [pc, #520]	; (8015ef8 <lwip_netconn_do_close_internal+0x240>)
 8015cf0:	4880      	ldr	r0, [pc, #512]	; (8015ef4 <lwip_netconn_do_close_internal+0x23c>)
 8015cf2:	f00e f845 	bl	8023d80 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	785b      	ldrb	r3, [r3, #1]
 8015cfa:	2b04      	cmp	r3, #4
 8015cfc:	d006      	beq.n	8015d0c <lwip_netconn_do_close_internal+0x54>
 8015cfe:	4b7b      	ldr	r3, [pc, #492]	; (8015eec <lwip_netconn_do_close_internal+0x234>)
 8015d00:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8015d04:	497d      	ldr	r1, [pc, #500]	; (8015efc <lwip_netconn_do_close_internal+0x244>)
 8015d06:	487b      	ldr	r0, [pc, #492]	; (8015ef4 <lwip_netconn_do_close_internal+0x23c>)
 8015d08:	f00e f83a 	bl	8023d80 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	685b      	ldr	r3, [r3, #4]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d106      	bne.n	8015d22 <lwip_netconn_do_close_internal+0x6a>
 8015d14:	4b75      	ldr	r3, [pc, #468]	; (8015eec <lwip_netconn_do_close_internal+0x234>)
 8015d16:	f240 32a5 	movw	r2, #933	; 0x3a5
 8015d1a:	4979      	ldr	r1, [pc, #484]	; (8015f00 <lwip_netconn_do_close_internal+0x248>)
 8015d1c:	4875      	ldr	r0, [pc, #468]	; (8015ef4 <lwip_netconn_do_close_internal+0x23c>)
 8015d1e:	f00e f82f 	bl	8023d80 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	6a1b      	ldr	r3, [r3, #32]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d106      	bne.n	8015d38 <lwip_netconn_do_close_internal+0x80>
 8015d2a:	4b70      	ldr	r3, [pc, #448]	; (8015eec <lwip_netconn_do_close_internal+0x234>)
 8015d2c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015d30:	4974      	ldr	r1, [pc, #464]	; (8015f04 <lwip_netconn_do_close_internal+0x24c>)
 8015d32:	4870      	ldr	r0, [pc, #448]	; (8015ef4 <lwip_netconn_do_close_internal+0x23c>)
 8015d34:	f00e f824 	bl	8023d80 <iprintf>

  tpcb = conn->pcb.tcp;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	685b      	ldr	r3, [r3, #4]
 8015d3c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	6a1b      	ldr	r3, [r3, #32]
 8015d42:	7a1b      	ldrb	r3, [r3, #8]
 8015d44:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8015d46:	7bfb      	ldrb	r3, [r7, #15]
 8015d48:	f003 0301 	and.w	r3, r3, #1
 8015d4c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8015d4e:	7bfb      	ldrb	r3, [r7, #15]
 8015d50:	f003 0302 	and.w	r3, r3, #2
 8015d54:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8015d56:	7bfb      	ldrb	r3, [r7, #15]
 8015d58:	2b03      	cmp	r3, #3
 8015d5a:	d102      	bne.n	8015d62 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8015d5c:	2301      	movs	r3, #1
 8015d5e:	75bb      	strb	r3, [r7, #22]
 8015d60:	e01f      	b.n	8015da2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8015d62:	7bbb      	ldrb	r3, [r7, #14]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d00e      	beq.n	8015d86 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8015d68:	693b      	ldr	r3, [r7, #16]
 8015d6a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8015d6c:	2b05      	cmp	r3, #5
 8015d6e:	d007      	beq.n	8015d80 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8015d70:	693b      	ldr	r3, [r7, #16]
 8015d72:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8015d74:	2b06      	cmp	r3, #6
 8015d76:	d003      	beq.n	8015d80 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8015d78:	693b      	ldr	r3, [r7, #16]
 8015d7a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8015d7c:	2b08      	cmp	r3, #8
 8015d7e:	d102      	bne.n	8015d86 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8015d80:	2301      	movs	r3, #1
 8015d82:	75bb      	strb	r3, [r7, #22]
 8015d84:	e00d      	b.n	8015da2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8015d86:	7b7b      	ldrb	r3, [r7, #13]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d008      	beq.n	8015d9e <lwip_netconn_do_close_internal+0xe6>
 8015d8c:	693b      	ldr	r3, [r7, #16]
 8015d8e:	8b5b      	ldrh	r3, [r3, #26]
 8015d90:	f003 0310 	and.w	r3, r3, #16
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d002      	beq.n	8015d9e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8015d98:	2301      	movs	r3, #1
 8015d9a:	75bb      	strb	r3, [r7, #22]
 8015d9c:	e001      	b.n	8015da2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8015d9e:	2300      	movs	r3, #0
 8015da0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8015da2:	7dbb      	ldrb	r3, [r7, #22]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d003      	beq.n	8015db0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8015da8:	2100      	movs	r1, #0
 8015daa:	6938      	ldr	r0, [r7, #16]
 8015dac:	f004 fd56 	bl	801a85c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8015db0:	693b      	ldr	r3, [r7, #16]
 8015db2:	7d1b      	ldrb	r3, [r3, #20]
 8015db4:	2b01      	cmp	r3, #1
 8015db6:	d104      	bne.n	8015dc2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8015db8:	2100      	movs	r1, #0
 8015dba:	6938      	ldr	r0, [r7, #16]
 8015dbc:	f004 fdc6 	bl	801a94c <tcp_accept>
 8015dc0:	e01d      	b.n	8015dfe <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8015dc2:	7bbb      	ldrb	r3, [r7, #14]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d007      	beq.n	8015dd8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8015dc8:	2100      	movs	r1, #0
 8015dca:	6938      	ldr	r0, [r7, #16]
 8015dcc:	f004 fd58 	bl	801a880 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8015dd0:	2100      	movs	r1, #0
 8015dd2:	6938      	ldr	r0, [r7, #16]
 8015dd4:	f004 fdba 	bl	801a94c <tcp_accept>
    }
    if (shut_tx) {
 8015dd8:	7b7b      	ldrb	r3, [r7, #13]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d003      	beq.n	8015de6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8015dde:	2100      	movs	r1, #0
 8015de0:	6938      	ldr	r0, [r7, #16]
 8015de2:	f004 fd6f 	bl	801a8c4 <tcp_sent>
    }
    if (shut_close) {
 8015de6:	7dbb      	ldrb	r3, [r7, #22]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d008      	beq.n	8015dfe <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8015dec:	2200      	movs	r2, #0
 8015dee:	2100      	movs	r1, #0
 8015df0:	6938      	ldr	r0, [r7, #16]
 8015df2:	f004 fdc3 	bl	801a97c <tcp_poll>
      tcp_err(tpcb, NULL);
 8015df6:	2100      	movs	r1, #0
 8015df8:	6938      	ldr	r0, [r7, #16]
 8015dfa:	f004 fd85 	bl	801a908 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8015dfe:	7dbb      	ldrb	r3, [r7, #22]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d005      	beq.n	8015e10 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8015e04:	6938      	ldr	r0, [r7, #16]
 8015e06:	f003 fa3d 	bl	8019284 <tcp_close>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	75fb      	strb	r3, [r7, #23]
 8015e0e:	e007      	b.n	8015e20 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8015e10:	7bbb      	ldrb	r3, [r7, #14]
 8015e12:	7b7a      	ldrb	r2, [r7, #13]
 8015e14:	4619      	mov	r1, r3
 8015e16:	6938      	ldr	r0, [r7, #16]
 8015e18:	f003 fa60 	bl	80192dc <tcp_shutdown>
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8015e20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d102      	bne.n	8015e2e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8015e28:	2301      	movs	r3, #1
 8015e2a:	757b      	strb	r3, [r7, #21]
 8015e2c:	e016      	b.n	8015e5c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8015e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e36:	d10f      	bne.n	8015e58 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	6a1b      	ldr	r3, [r3, #32]
 8015e3c:	7a5b      	ldrb	r3, [r3, #9]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d10c      	bne.n	8015e5c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8015e42:	2301      	movs	r3, #1
 8015e44:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8015e46:	7dbb      	ldrb	r3, [r7, #22]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d007      	beq.n	8015e5c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8015e4c:	6938      	ldr	r0, [r7, #16]
 8015e4e:	f003 fb5f 	bl	8019510 <tcp_abort>
          err = ERR_OK;
 8015e52:	2300      	movs	r3, #0
 8015e54:	75fb      	strb	r3, [r7, #23]
 8015e56:	e001      	b.n	8015e5c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8015e58:	2301      	movs	r3, #1
 8015e5a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8015e5c:	7d7b      	ldrb	r3, [r7, #21]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d052      	beq.n	8015f08 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	6a1b      	ldr	r3, [r3, #32]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	330c      	adds	r3, #12
 8015e6a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	6a1b      	ldr	r3, [r3, #32]
 8015e70:	7dfa      	ldrb	r2, [r7, #23]
 8015e72:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	2200      	movs	r2, #0
 8015e78:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	2200      	movs	r2, #0
 8015e7e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8015e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d129      	bne.n	8015edc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8015e88:	7dbb      	ldrb	r3, [r7, #22]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d00c      	beq.n	8015ea8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2200      	movs	r2, #0
 8015e92:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d005      	beq.n	8015ea8 <lwip_netconn_do_close_internal+0x1f0>
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	2104      	movs	r1, #4
 8015ea4:	6878      	ldr	r0, [r7, #4]
 8015ea6:	4798      	blx	r3
      }
      if (shut_rx) {
 8015ea8:	7bbb      	ldrb	r3, [r7, #14]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d009      	beq.n	8015ec2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d005      	beq.n	8015ec2 <lwip_netconn_do_close_internal+0x20a>
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eba:	2200      	movs	r2, #0
 8015ebc:	2100      	movs	r1, #0
 8015ebe:	6878      	ldr	r0, [r7, #4]
 8015ec0:	4798      	blx	r3
      }
      if (shut_tx) {
 8015ec2:	7b7b      	ldrb	r3, [r7, #13]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d009      	beq.n	8015edc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d005      	beq.n	8015edc <lwip_netconn_do_close_internal+0x224>
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	2102      	movs	r1, #2
 8015ed8:	6878      	ldr	r0, [r7, #4]
 8015eda:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8015edc:	78fb      	ldrb	r3, [r7, #3]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d002      	beq.n	8015ee8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8015ee2:	68b8      	ldr	r0, [r7, #8]
 8015ee4:	f00c fc14 	bl	8022710 <sys_sem_signal>
    }
    return ERR_OK;
 8015ee8:	2300      	movs	r3, #0
 8015eea:	e03c      	b.n	8015f66 <lwip_netconn_do_close_internal+0x2ae>
 8015eec:	08025678 	.word	0x08025678
 8015ef0:	0802594c 	.word	0x0802594c
 8015ef4:	080256bc 	.word	0x080256bc
 8015ef8:	0802595c 	.word	0x0802595c
 8015efc:	0802597c 	.word	0x0802597c
 8015f00:	080259a0 	.word	0x080259a0
 8015f04:	080257e0 	.word	0x080257e0
  }
  if (!close_finished) {
 8015f08:	7d7b      	ldrb	r3, [r7, #21]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d11e      	bne.n	8015f4c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8015f0e:	693b      	ldr	r3, [r7, #16]
 8015f10:	7d1b      	ldrb	r3, [r3, #20]
 8015f12:	2b01      	cmp	r3, #1
 8015f14:	d106      	bne.n	8015f24 <lwip_netconn_do_close_internal+0x26c>
 8015f16:	4b16      	ldr	r3, [pc, #88]	; (8015f70 <lwip_netconn_do_close_internal+0x2b8>)
 8015f18:	f240 4241 	movw	r2, #1089	; 0x441
 8015f1c:	4915      	ldr	r1, [pc, #84]	; (8015f74 <lwip_netconn_do_close_internal+0x2bc>)
 8015f1e:	4816      	ldr	r0, [pc, #88]	; (8015f78 <lwip_netconn_do_close_internal+0x2c0>)
 8015f20:	f00d ff2e 	bl	8023d80 <iprintf>
    if (shut_tx) {
 8015f24:	7b7b      	ldrb	r3, [r7, #13]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d003      	beq.n	8015f32 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8015f2a:	4914      	ldr	r1, [pc, #80]	; (8015f7c <lwip_netconn_do_close_internal+0x2c4>)
 8015f2c:	6938      	ldr	r0, [r7, #16]
 8015f2e:	f004 fcc9 	bl	801a8c4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8015f32:	2201      	movs	r2, #1
 8015f34:	4912      	ldr	r1, [pc, #72]	; (8015f80 <lwip_netconn_do_close_internal+0x2c8>)
 8015f36:	6938      	ldr	r0, [r7, #16]
 8015f38:	f004 fd20 	bl	801a97c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8015f3c:	4911      	ldr	r1, [pc, #68]	; (8015f84 <lwip_netconn_do_close_internal+0x2cc>)
 8015f3e:	6938      	ldr	r0, [r7, #16]
 8015f40:	f004 fce2 	bl	801a908 <tcp_err>
    tcp_arg(tpcb, conn);
 8015f44:	6879      	ldr	r1, [r7, #4]
 8015f46:	6938      	ldr	r0, [r7, #16]
 8015f48:	f004 fc88 	bl	801a85c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8015f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d106      	bne.n	8015f62 <lwip_netconn_do_close_internal+0x2aa>
 8015f54:	4b06      	ldr	r3, [pc, #24]	; (8015f70 <lwip_netconn_do_close_internal+0x2b8>)
 8015f56:	f240 424d 	movw	r2, #1101	; 0x44d
 8015f5a:	490b      	ldr	r1, [pc, #44]	; (8015f88 <lwip_netconn_do_close_internal+0x2d0>)
 8015f5c:	4806      	ldr	r0, [pc, #24]	; (8015f78 <lwip_netconn_do_close_internal+0x2c0>)
 8015f5e:	f00d ff0f 	bl	8023d80 <iprintf>
  return err;
 8015f62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015f66:	4618      	mov	r0, r3
 8015f68:	3718      	adds	r7, #24
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}
 8015f6e:	bf00      	nop
 8015f70:	08025678 	.word	0x08025678
 8015f74:	080259b4 	.word	0x080259b4
 8015f78:	080256bc 	.word	0x080256bc
 8015f7c:	08015531 	.word	0x08015531
 8015f80:	08015469 	.word	0x08015469
 8015f84:	080155d9 	.word	0x080155d9
 8015f88:	080259d8 	.word	0x080259d8

08015f8c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b084      	sub	sp, #16
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	785b      	ldrb	r3, [r3, #1]
 8015f9e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8015fa0:	7afb      	ldrb	r3, [r7, #11]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d00d      	beq.n	8015fc2 <lwip_netconn_do_delconn+0x36>
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	781b      	ldrb	r3, [r3, #0]
 8015fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015fb0:	2b10      	cmp	r3, #16
 8015fb2:	d006      	beq.n	8015fc2 <lwip_netconn_do_delconn+0x36>
 8015fb4:	4b60      	ldr	r3, [pc, #384]	; (8016138 <lwip_netconn_do_delconn+0x1ac>)
 8015fb6:	f240 425e 	movw	r2, #1118	; 0x45e
 8015fba:	4960      	ldr	r1, [pc, #384]	; (801613c <lwip_netconn_do_delconn+0x1b0>)
 8015fbc:	4860      	ldr	r0, [pc, #384]	; (8016140 <lwip_netconn_do_delconn+0x1b4>)
 8015fbe:	f00d fedf 	bl	8023d80 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8015fc2:	7afb      	ldrb	r3, [r7, #11]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d005      	beq.n	8015fd4 <lwip_netconn_do_delconn+0x48>
 8015fc8:	7afb      	ldrb	r3, [r7, #11]
 8015fca:	2b02      	cmp	r3, #2
 8015fcc:	d002      	beq.n	8015fd4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8015fce:	7afb      	ldrb	r3, [r7, #11]
 8015fd0:	2b03      	cmp	r3, #3
 8015fd2:	d109      	bne.n	8015fe8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8015fd4:	7afb      	ldrb	r3, [r7, #11]
 8015fd6:	2b03      	cmp	r3, #3
 8015fd8:	d10a      	bne.n	8015ff0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	7f1b      	ldrb	r3, [r3, #28]
 8015fe0:	f003 0304 	and.w	r3, r3, #4
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d103      	bne.n	8015ff0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	22fb      	movs	r2, #251	; 0xfb
 8015fec:	711a      	strb	r2, [r3, #4]
 8015fee:	e097      	b.n	8016120 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8015ff0:	7afb      	ldrb	r3, [r7, #11]
 8015ff2:	2b03      	cmp	r3, #3
 8015ff4:	d10d      	bne.n	8016012 <lwip_netconn_do_delconn+0x86>
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	7f1b      	ldrb	r3, [r3, #28]
 8015ffc:	f003 0304 	and.w	r3, r3, #4
 8016000:	2b00      	cmp	r3, #0
 8016002:	d106      	bne.n	8016012 <lwip_netconn_do_delconn+0x86>
 8016004:	4b4c      	ldr	r3, [pc, #304]	; (8016138 <lwip_netconn_do_delconn+0x1ac>)
 8016006:	f240 427a 	movw	r2, #1146	; 0x47a
 801600a:	494e      	ldr	r1, [pc, #312]	; (8016144 <lwip_netconn_do_delconn+0x1b8>)
 801600c:	484c      	ldr	r0, [pc, #304]	; (8016140 <lwip_netconn_do_delconn+0x1b4>)
 801600e:	f00d feb7 	bl	8023d80 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	2200      	movs	r2, #0
 8016016:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	4618      	mov	r0, r3
 801601e:	f7ff fdcd 	bl	8015bbc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	685b      	ldr	r3, [r3, #4]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d05f      	beq.n	80160ec <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	781b      	ldrb	r3, [r3, #0]
 8016032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016036:	2b10      	cmp	r3, #16
 8016038:	d00d      	beq.n	8016056 <lwip_netconn_do_delconn+0xca>
 801603a:	2b20      	cmp	r3, #32
 801603c:	d151      	bne.n	80160e2 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	685b      	ldr	r3, [r3, #4]
 8016044:	2200      	movs	r2, #0
 8016046:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	685b      	ldr	r3, [r3, #4]
 801604e:	4618      	mov	r0, r3
 8016050:	f009 fee2 	bl	801fe18 <udp_remove>
          break;
 8016054:	e046      	b.n	80160e4 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	6a1b      	ldr	r3, [r3, #32]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d006      	beq.n	801606e <lwip_netconn_do_delconn+0xe2>
 8016060:	4b35      	ldr	r3, [pc, #212]	; (8016138 <lwip_netconn_do_delconn+0x1ac>)
 8016062:	f240 4294 	movw	r2, #1172	; 0x494
 8016066:	4938      	ldr	r1, [pc, #224]	; (8016148 <lwip_netconn_do_delconn+0x1bc>)
 8016068:	4835      	ldr	r0, [pc, #212]	; (8016140 <lwip_netconn_do_delconn+0x1b4>)
 801606a:	f00d fe89 	bl	8023d80 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	2204      	movs	r2, #4
 8016074:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	2203      	movs	r2, #3
 801607a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	68fa      	ldr	r2, [r7, #12]
 8016082:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	2100      	movs	r1, #0
 801608a:	4618      	mov	r0, r3
 801608c:	f7ff fe14 	bl	8015cb8 <lwip_netconn_do_close_internal>
 8016090:	4603      	mov	r3, r0
 8016092:	2b00      	cmp	r3, #0
 8016094:	d04b      	beq.n	801612e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	785b      	ldrb	r3, [r3, #1]
 801609c:	2b04      	cmp	r3, #4
 801609e:	d006      	beq.n	80160ae <lwip_netconn_do_delconn+0x122>
 80160a0:	4b25      	ldr	r3, [pc, #148]	; (8016138 <lwip_netconn_do_delconn+0x1ac>)
 80160a2:	f240 429a 	movw	r2, #1178	; 0x49a
 80160a6:	4929      	ldr	r1, [pc, #164]	; (801614c <lwip_netconn_do_delconn+0x1c0>)
 80160a8:	4825      	ldr	r0, [pc, #148]	; (8016140 <lwip_netconn_do_delconn+0x1b4>)
 80160aa:	f00d fe69 	bl	8023d80 <iprintf>
            UNLOCK_TCPIP_CORE();
 80160ae:	4828      	ldr	r0, [pc, #160]	; (8016150 <lwip_netconn_do_delconn+0x1c4>)
 80160b0:	f00c fb9f 	bl	80227f2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	330c      	adds	r3, #12
 80160ba:	2100      	movs	r1, #0
 80160bc:	4618      	mov	r0, r3
 80160be:	f00c faf6 	bl	80226ae <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80160c2:	4823      	ldr	r0, [pc, #140]	; (8016150 <lwip_netconn_do_delconn+0x1c4>)
 80160c4:	f00c fb86 	bl	80227d4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	785b      	ldrb	r3, [r3, #1]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d02d      	beq.n	801612e <lwip_netconn_do_delconn+0x1a2>
 80160d2:	4b19      	ldr	r3, [pc, #100]	; (8016138 <lwip_netconn_do_delconn+0x1ac>)
 80160d4:	f240 429e 	movw	r2, #1182	; 0x49e
 80160d8:	491c      	ldr	r1, [pc, #112]	; (801614c <lwip_netconn_do_delconn+0x1c0>)
 80160da:	4819      	ldr	r0, [pc, #100]	; (8016140 <lwip_netconn_do_delconn+0x1b4>)
 80160dc:	f00d fe50 	bl	8023d80 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80160e0:	e025      	b.n	801612e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80160e2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	2200      	movs	r2, #0
 80160ea:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d007      	beq.n	8016106 <lwip_netconn_do_delconn+0x17a>
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160fc:	68fa      	ldr	r2, [r7, #12]
 80160fe:	6810      	ldr	r0, [r2, #0]
 8016100:	2200      	movs	r2, #0
 8016102:	2100      	movs	r1, #0
 8016104:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801610c:	2b00      	cmp	r3, #0
 801610e:	d007      	beq.n	8016120 <lwip_netconn_do_delconn+0x194>
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016116:	68fa      	ldr	r2, [r7, #12]
 8016118:	6810      	ldr	r0, [r2, #0]
 801611a:	2200      	movs	r2, #0
 801611c:	2102      	movs	r1, #2
 801611e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	330c      	adds	r3, #12
 8016126:	4618      	mov	r0, r3
 8016128:	f00c fb0c 	bl	8022744 <sys_sem_valid>
 801612c:	e000      	b.n	8016130 <lwip_netconn_do_delconn+0x1a4>
          return;
 801612e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8016130:	3710      	adds	r7, #16
 8016132:	46bd      	mov	sp, r7
 8016134:	bd80      	pop	{r7, pc}
 8016136:	bf00      	nop
 8016138:	08025678 	.word	0x08025678
 801613c:	080259e8 	.word	0x080259e8
 8016140:	080256bc 	.word	0x080256bc
 8016144:	080259fc 	.word	0x080259fc
 8016148:	08025a1c 	.word	0x08025a1c
 801614c:	08025a38 	.word	0x08025a38
 8016150:	20006680 	.word	0x20006680

08016154 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b084      	sub	sp, #16
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8016160:	68bb      	ldr	r3, [r7, #8]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	685b      	ldr	r3, [r3, #4]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d025      	beq.n	80161b6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	781b      	ldrb	r3, [r3, #0]
 8016170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016174:	2b10      	cmp	r3, #16
 8016176:	d00e      	beq.n	8016196 <lwip_netconn_do_bind+0x42>
 8016178:	2b20      	cmp	r3, #32
 801617a:	d119      	bne.n	80161b0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801617c:	68bb      	ldr	r3, [r7, #8]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	6858      	ldr	r0, [r3, #4]
 8016182:	68bb      	ldr	r3, [r7, #8]
 8016184:	6899      	ldr	r1, [r3, #8]
 8016186:	68bb      	ldr	r3, [r7, #8]
 8016188:	899b      	ldrh	r3, [r3, #12]
 801618a:	461a      	mov	r2, r3
 801618c:	f009 fd2e 	bl	801fbec <udp_bind>
 8016190:	4603      	mov	r3, r0
 8016192:	73fb      	strb	r3, [r7, #15]
        break;
 8016194:	e011      	b.n	80161ba <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016196:	68bb      	ldr	r3, [r7, #8]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	6858      	ldr	r0, [r3, #4]
 801619c:	68bb      	ldr	r3, [r7, #8]
 801619e:	6899      	ldr	r1, [r3, #8]
 80161a0:	68bb      	ldr	r3, [r7, #8]
 80161a2:	899b      	ldrh	r3, [r3, #12]
 80161a4:	461a      	mov	r2, r3
 80161a6:	f003 f9bf 	bl	8019528 <tcp_bind>
 80161aa:	4603      	mov	r3, r0
 80161ac:	73fb      	strb	r3, [r7, #15]
        break;
 80161ae:	e004      	b.n	80161ba <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80161b0:	23fa      	movs	r3, #250	; 0xfa
 80161b2:	73fb      	strb	r3, [r7, #15]
        break;
 80161b4:	e001      	b.n	80161ba <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80161b6:	23fa      	movs	r3, #250	; 0xfa
 80161b8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80161ba:	68bb      	ldr	r3, [r7, #8]
 80161bc:	7bfa      	ldrb	r2, [r7, #15]
 80161be:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80161c0:	bf00      	nop
 80161c2:	3710      	adds	r7, #16
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}

080161c8 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b088      	sub	sp, #32
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	60f8      	str	r0, [r7, #12]
 80161d0:	60b9      	str	r1, [r7, #8]
 80161d2:	4613      	mov	r3, r2
 80161d4:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 80161d6:	2300      	movs	r3, #0
 80161d8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80161de:	69bb      	ldr	r3, [r7, #24]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d102      	bne.n	80161ea <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 80161e4:	f06f 0305 	mvn.w	r3, #5
 80161e8:	e070      	b.n	80162cc <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 80161ea:	69bb      	ldr	r3, [r7, #24]
 80161ec:	785b      	ldrb	r3, [r3, #1]
 80161ee:	2b03      	cmp	r3, #3
 80161f0:	d006      	beq.n	8016200 <lwip_netconn_do_connected+0x38>
 80161f2:	4b38      	ldr	r3, [pc, #224]	; (80162d4 <lwip_netconn_do_connected+0x10c>)
 80161f4:	f240 5223 	movw	r2, #1315	; 0x523
 80161f8:	4937      	ldr	r1, [pc, #220]	; (80162d8 <lwip_netconn_do_connected+0x110>)
 80161fa:	4838      	ldr	r0, [pc, #224]	; (80162dc <lwip_netconn_do_connected+0x114>)
 80161fc:	f00d fdc0 	bl	8023d80 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8016200:	69bb      	ldr	r3, [r7, #24]
 8016202:	6a1b      	ldr	r3, [r3, #32]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d10c      	bne.n	8016222 <lwip_netconn_do_connected+0x5a>
 8016208:	69bb      	ldr	r3, [r7, #24]
 801620a:	7f1b      	ldrb	r3, [r3, #28]
 801620c:	f003 0304 	and.w	r3, r3, #4
 8016210:	2b00      	cmp	r3, #0
 8016212:	d106      	bne.n	8016222 <lwip_netconn_do_connected+0x5a>
 8016214:	4b2f      	ldr	r3, [pc, #188]	; (80162d4 <lwip_netconn_do_connected+0x10c>)
 8016216:	f240 5224 	movw	r2, #1316	; 0x524
 801621a:	4931      	ldr	r1, [pc, #196]	; (80162e0 <lwip_netconn_do_connected+0x118>)
 801621c:	482f      	ldr	r0, [pc, #188]	; (80162dc <lwip_netconn_do_connected+0x114>)
 801621e:	f00d fdaf 	bl	8023d80 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8016222:	69bb      	ldr	r3, [r7, #24]
 8016224:	6a1b      	ldr	r3, [r3, #32]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d008      	beq.n	801623c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 801622a:	69bb      	ldr	r3, [r7, #24]
 801622c:	6a1b      	ldr	r3, [r3, #32]
 801622e:	79fa      	ldrb	r2, [r7, #7]
 8016230:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016232:	69bb      	ldr	r3, [r7, #24]
 8016234:	6a1b      	ldr	r3, [r3, #32]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	330c      	adds	r3, #12
 801623a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 801623c:	69bb      	ldr	r3, [r7, #24]
 801623e:	781b      	ldrb	r3, [r3, #0]
 8016240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016244:	2b10      	cmp	r3, #16
 8016246:	d106      	bne.n	8016256 <lwip_netconn_do_connected+0x8e>
 8016248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d102      	bne.n	8016256 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8016250:	69b8      	ldr	r0, [r7, #24]
 8016252:	f7ff fa97 	bl	8015784 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8016256:	69bb      	ldr	r3, [r7, #24]
 8016258:	7f1b      	ldrb	r3, [r3, #28]
 801625a:	f003 0304 	and.w	r3, r3, #4
 801625e:	2b00      	cmp	r3, #0
 8016260:	bf0c      	ite	eq
 8016262:	2301      	moveq	r3, #1
 8016264:	2300      	movne	r3, #0
 8016266:	b2db      	uxtb	r3, r3
 8016268:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 801626a:	69bb      	ldr	r3, [r7, #24]
 801626c:	7f1b      	ldrb	r3, [r3, #28]
 801626e:	f023 0304 	bic.w	r3, r3, #4
 8016272:	b2da      	uxtb	r2, r3
 8016274:	69bb      	ldr	r3, [r7, #24]
 8016276:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8016278:	697b      	ldr	r3, [r7, #20]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d002      	beq.n	8016284 <lwip_netconn_do_connected+0xbc>
 801627e:	69fb      	ldr	r3, [r7, #28]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d10c      	bne.n	801629e <lwip_netconn_do_connected+0xd6>
 8016284:	697b      	ldr	r3, [r7, #20]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d102      	bne.n	8016290 <lwip_netconn_do_connected+0xc8>
 801628a:	69fb      	ldr	r3, [r7, #28]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d006      	beq.n	801629e <lwip_netconn_do_connected+0xd6>
 8016290:	4b10      	ldr	r3, [pc, #64]	; (80162d4 <lwip_netconn_do_connected+0x10c>)
 8016292:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8016296:	4913      	ldr	r1, [pc, #76]	; (80162e4 <lwip_netconn_do_connected+0x11c>)
 8016298:	4810      	ldr	r0, [pc, #64]	; (80162dc <lwip_netconn_do_connected+0x114>)
 801629a:	f00d fd71 	bl	8023d80 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 801629e:	69bb      	ldr	r3, [r7, #24]
 80162a0:	2200      	movs	r2, #0
 80162a2:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 80162a4:	69bb      	ldr	r3, [r7, #24]
 80162a6:	2200      	movs	r2, #0
 80162a8:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80162aa:	69bb      	ldr	r3, [r7, #24]
 80162ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d005      	beq.n	80162be <lwip_netconn_do_connected+0xf6>
 80162b2:	69bb      	ldr	r3, [r7, #24]
 80162b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162b6:	2200      	movs	r2, #0
 80162b8:	2102      	movs	r1, #2
 80162ba:	69b8      	ldr	r0, [r7, #24]
 80162bc:	4798      	blx	r3

  if (was_blocking) {
 80162be:	697b      	ldr	r3, [r7, #20]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d002      	beq.n	80162ca <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 80162c4:	69f8      	ldr	r0, [r7, #28]
 80162c6:	f00c fa23 	bl	8022710 <sys_sem_signal>
  }
  return ERR_OK;
 80162ca:	2300      	movs	r3, #0
}
 80162cc:	4618      	mov	r0, r3
 80162ce:	3720      	adds	r7, #32
 80162d0:	46bd      	mov	sp, r7
 80162d2:	bd80      	pop	{r7, pc}
 80162d4:	08025678 	.word	0x08025678
 80162d8:	08025a40 	.word	0x08025a40
 80162dc:	080256bc 	.word	0x080256bc
 80162e0:	08025a60 	.word	0x08025a60
 80162e4:	08025aa0 	.word	0x08025aa0

080162e8 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b086      	sub	sp, #24
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 80162f4:	693b      	ldr	r3, [r7, #16]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	685b      	ldr	r3, [r3, #4]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d102      	bne.n	8016304 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 80162fe:	23f1      	movs	r3, #241	; 0xf1
 8016300:	75fb      	strb	r3, [r7, #23]
 8016302:	e09b      	b.n	801643c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016304:	693b      	ldr	r3, [r7, #16]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	781b      	ldrb	r3, [r3, #0]
 801630a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801630e:	2b10      	cmp	r3, #16
 8016310:	d00f      	beq.n	8016332 <lwip_netconn_do_connect+0x4a>
 8016312:	2b20      	cmp	r3, #32
 8016314:	f040 8087 	bne.w	8016426 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016318:	693b      	ldr	r3, [r7, #16]
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	6858      	ldr	r0, [r3, #4]
 801631e:	693b      	ldr	r3, [r7, #16]
 8016320:	6899      	ldr	r1, [r3, #8]
 8016322:	693b      	ldr	r3, [r7, #16]
 8016324:	899b      	ldrh	r3, [r3, #12]
 8016326:	461a      	mov	r2, r3
 8016328:	f009 fce8 	bl	801fcfc <udp_connect>
 801632c:	4603      	mov	r3, r0
 801632e:	75fb      	strb	r3, [r7, #23]
        break;
 8016330:	e084      	b.n	801643c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8016332:	693b      	ldr	r3, [r7, #16]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	785b      	ldrb	r3, [r3, #1]
 8016338:	2b03      	cmp	r3, #3
 801633a:	d102      	bne.n	8016342 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 801633c:	23f7      	movs	r3, #247	; 0xf7
 801633e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8016340:	e07b      	b.n	801643a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8016342:	693b      	ldr	r3, [r7, #16]
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	785b      	ldrb	r3, [r3, #1]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d002      	beq.n	8016352 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 801634c:	23f6      	movs	r3, #246	; 0xf6
 801634e:	75fb      	strb	r3, [r7, #23]
        break;
 8016350:	e073      	b.n	801643a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8016352:	693b      	ldr	r3, [r7, #16]
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	4618      	mov	r0, r3
 8016358:	f7ff fa14 	bl	8015784 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 801635c:	693b      	ldr	r3, [r7, #16]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	6858      	ldr	r0, [r3, #4]
 8016362:	693b      	ldr	r3, [r7, #16]
 8016364:	6899      	ldr	r1, [r3, #8]
 8016366:	693b      	ldr	r3, [r7, #16]
 8016368:	899a      	ldrh	r2, [r3, #12]
 801636a:	4b38      	ldr	r3, [pc, #224]	; (801644c <lwip_netconn_do_connect+0x164>)
 801636c:	f003 fb2e 	bl	80199cc <tcp_connect>
 8016370:	4603      	mov	r3, r0
 8016372:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8016374:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d15e      	bne.n	801643a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 801637c:	693b      	ldr	r3, [r7, #16]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	7f1b      	ldrb	r3, [r3, #28]
 8016382:	f003 0302 	and.w	r3, r3, #2
 8016386:	2b00      	cmp	r3, #0
 8016388:	bf14      	ite	ne
 801638a:	2301      	movne	r3, #1
 801638c:	2300      	moveq	r3, #0
 801638e:	b2db      	uxtb	r3, r3
 8016390:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8016392:	693b      	ldr	r3, [r7, #16]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	2203      	movs	r2, #3
 8016398:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 801639a:	7bfb      	ldrb	r3, [r7, #15]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d009      	beq.n	80163b4 <lwip_netconn_do_connect+0xcc>
 80163a0:	693b      	ldr	r3, [r7, #16]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	7f1a      	ldrb	r2, [r3, #28]
 80163a6:	693b      	ldr	r3, [r7, #16]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	f042 0204 	orr.w	r2, r2, #4
 80163ae:	b2d2      	uxtb	r2, r2
 80163b0:	771a      	strb	r2, [r3, #28]
 80163b2:	e008      	b.n	80163c6 <lwip_netconn_do_connect+0xde>
 80163b4:	693b      	ldr	r3, [r7, #16]
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	7f1a      	ldrb	r2, [r3, #28]
 80163ba:	693b      	ldr	r3, [r7, #16]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	f022 0204 	bic.w	r2, r2, #4
 80163c2:	b2d2      	uxtb	r2, r2
 80163c4:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 80163c6:	7bfb      	ldrb	r3, [r7, #15]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d002      	beq.n	80163d2 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 80163cc:	23fb      	movs	r3, #251	; 0xfb
 80163ce:	75fb      	strb	r3, [r7, #23]
        break;
 80163d0:	e033      	b.n	801643a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 80163d2:	693b      	ldr	r3, [r7, #16]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	693a      	ldr	r2, [r7, #16]
 80163d8:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 80163da:	693b      	ldr	r3, [r7, #16]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	785b      	ldrb	r3, [r3, #1]
 80163e0:	2b03      	cmp	r3, #3
 80163e2:	d006      	beq.n	80163f2 <lwip_netconn_do_connect+0x10a>
 80163e4:	4b1a      	ldr	r3, [pc, #104]	; (8016450 <lwip_netconn_do_connect+0x168>)
 80163e6:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80163ea:	491a      	ldr	r1, [pc, #104]	; (8016454 <lwip_netconn_do_connect+0x16c>)
 80163ec:	481a      	ldr	r0, [pc, #104]	; (8016458 <lwip_netconn_do_connect+0x170>)
 80163ee:	f00d fcc7 	bl	8023d80 <iprintf>
              UNLOCK_TCPIP_CORE();
 80163f2:	481a      	ldr	r0, [pc, #104]	; (801645c <lwip_netconn_do_connect+0x174>)
 80163f4:	f00c f9fd 	bl	80227f2 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80163f8:	693b      	ldr	r3, [r7, #16]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	330c      	adds	r3, #12
 80163fe:	2100      	movs	r1, #0
 8016400:	4618      	mov	r0, r3
 8016402:	f00c f954 	bl	80226ae <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8016406:	4815      	ldr	r0, [pc, #84]	; (801645c <lwip_netconn_do_connect+0x174>)
 8016408:	f00c f9e4 	bl	80227d4 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 801640c:	693b      	ldr	r3, [r7, #16]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	785b      	ldrb	r3, [r3, #1]
 8016412:	2b03      	cmp	r3, #3
 8016414:	d116      	bne.n	8016444 <lwip_netconn_do_connect+0x15c>
 8016416:	4b0e      	ldr	r3, [pc, #56]	; (8016450 <lwip_netconn_do_connect+0x168>)
 8016418:	f240 5274 	movw	r2, #1396	; 0x574
 801641c:	490d      	ldr	r1, [pc, #52]	; (8016454 <lwip_netconn_do_connect+0x16c>)
 801641e:	480e      	ldr	r0, [pc, #56]	; (8016458 <lwip_netconn_do_connect+0x170>)
 8016420:	f00d fcae 	bl	8023d80 <iprintf>
              return;
 8016424:	e00e      	b.n	8016444 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8016426:	4b0a      	ldr	r3, [pc, #40]	; (8016450 <lwip_netconn_do_connect+0x168>)
 8016428:	f240 527d 	movw	r2, #1405	; 0x57d
 801642c:	490c      	ldr	r1, [pc, #48]	; (8016460 <lwip_netconn_do_connect+0x178>)
 801642e:	480a      	ldr	r0, [pc, #40]	; (8016458 <lwip_netconn_do_connect+0x170>)
 8016430:	f00d fca6 	bl	8023d80 <iprintf>
 8016434:	23fa      	movs	r3, #250	; 0xfa
 8016436:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8016438:	e000      	b.n	801643c <lwip_netconn_do_connect+0x154>
        break;
 801643a:	bf00      	nop
    }
  }
  msg->err = err;
 801643c:	693b      	ldr	r3, [r7, #16]
 801643e:	7dfa      	ldrb	r2, [r7, #23]
 8016440:	711a      	strb	r2, [r3, #4]
 8016442:	e000      	b.n	8016446 <lwip_netconn_do_connect+0x15e>
              return;
 8016444:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8016446:	3718      	adds	r7, #24
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}
 801644c:	080161c9 	.word	0x080161c9
 8016450:	08025678 	.word	0x08025678
 8016454:	08025a38 	.word	0x08025a38
 8016458:	080256bc 	.word	0x080256bc
 801645c:	20006680 	.word	0x20006680
 8016460:	08025ac0 	.word	0x08025ac0

08016464 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b086      	sub	sp, #24
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8016470:	697b      	ldr	r3, [r7, #20]
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	685b      	ldr	r3, [r3, #4]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d07f      	beq.n	801657a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801647a:	697b      	ldr	r3, [r7, #20]
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	781b      	ldrb	r3, [r3, #0]
 8016480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016484:	2b10      	cmp	r3, #16
 8016486:	d175      	bne.n	8016574 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8016488:	697b      	ldr	r3, [r7, #20]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	785b      	ldrb	r3, [r3, #1]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d165      	bne.n	801655e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8016492:	697b      	ldr	r3, [r7, #20]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	685b      	ldr	r3, [r3, #4]
 8016498:	7d1b      	ldrb	r3, [r3, #20]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d002      	beq.n	80164a4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 801649e:	23fa      	movs	r3, #250	; 0xfa
 80164a0:	72fb      	strb	r3, [r7, #11]
 80164a2:	e06c      	b.n	801657e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80164a4:	23ff      	movs	r3, #255	; 0xff
 80164a6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80164a8:	697b      	ldr	r3, [r7, #20]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	685b      	ldr	r3, [r3, #4]
 80164ae:	f107 020b 	add.w	r2, r7, #11
 80164b2:	7cf9      	ldrb	r1, [r7, #19]
 80164b4:	4618      	mov	r0, r3
 80164b6:	f003 f8ef 	bl	8019698 <tcp_listen_with_backlog_and_err>
 80164ba:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d05d      	beq.n	801657e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80164c2:	697b      	ldr	r3, [r7, #20]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	3310      	adds	r3, #16
 80164c8:	4618      	mov	r0, r3
 80164ca:	f00c f8aa 	bl	8022622 <sys_mbox_valid>
 80164ce:	4603      	mov	r3, r0
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d00b      	beq.n	80164ec <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	3310      	adds	r3, #16
 80164da:	4618      	mov	r0, r3
 80164dc:	f00c f81a 	bl	8022514 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80164e0:	697b      	ldr	r3, [r7, #20]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	3310      	adds	r3, #16
 80164e6:	4618      	mov	r0, r3
 80164e8:	f00c f8ac 	bl	8022644 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80164ec:	2300      	movs	r3, #0
 80164ee:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	3314      	adds	r3, #20
 80164f6:	4618      	mov	r0, r3
 80164f8:	f00c f893 	bl	8022622 <sys_mbox_valid>
 80164fc:	4603      	mov	r3, r0
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d108      	bne.n	8016514 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8016502:	697b      	ldr	r3, [r7, #20]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	3314      	adds	r3, #20
 8016508:	2106      	movs	r1, #6
 801650a:	4618      	mov	r0, r3
 801650c:	f00b ffe0 	bl	80224d0 <sys_mbox_new>
 8016510:	4603      	mov	r3, r0
 8016512:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8016514:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d118      	bne.n	801654e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 801651c:	697b      	ldr	r3, [r7, #20]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	2202      	movs	r2, #2
 8016522:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8016524:	697b      	ldr	r3, [r7, #20]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	68fa      	ldr	r2, [r7, #12]
 801652a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 801652c:	697b      	ldr	r3, [r7, #20]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	685a      	ldr	r2, [r3, #4]
 8016532:	697b      	ldr	r3, [r7, #20]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	4619      	mov	r1, r3
 8016538:	4610      	mov	r0, r2
 801653a:	f004 f98f 	bl	801a85c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801653e:	697b      	ldr	r3, [r7, #20]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	685b      	ldr	r3, [r3, #4]
 8016544:	4912      	ldr	r1, [pc, #72]	; (8016590 <lwip_netconn_do_listen+0x12c>)
 8016546:	4618      	mov	r0, r3
 8016548:	f004 fa00 	bl	801a94c <tcp_accept>
 801654c:	e017      	b.n	801657e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 801654e:	68f8      	ldr	r0, [r7, #12]
 8016550:	f002 fe98 	bl	8019284 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8016554:	697b      	ldr	r3, [r7, #20]
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	2200      	movs	r2, #0
 801655a:	605a      	str	r2, [r3, #4]
 801655c:	e00f      	b.n	801657e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801655e:	697b      	ldr	r3, [r7, #20]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	785b      	ldrb	r3, [r3, #1]
 8016564:	2b02      	cmp	r3, #2
 8016566:	d102      	bne.n	801656e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8016568:	2300      	movs	r3, #0
 801656a:	72fb      	strb	r3, [r7, #11]
 801656c:	e007      	b.n	801657e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 801656e:	23f5      	movs	r3, #245	; 0xf5
 8016570:	72fb      	strb	r3, [r7, #11]
 8016572:	e004      	b.n	801657e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8016574:	23f0      	movs	r3, #240	; 0xf0
 8016576:	72fb      	strb	r3, [r7, #11]
 8016578:	e001      	b.n	801657e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 801657a:	23f5      	movs	r3, #245	; 0xf5
 801657c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 801657e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8016582:	697b      	ldr	r3, [r7, #20]
 8016584:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8016586:	bf00      	nop
 8016588:	3718      	adds	r7, #24
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}
 801658e:	bf00      	nop
 8016590:	080157d5 	.word	0x080157d5

08016594 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b084      	sub	sp, #16
 8016598:	af00      	add	r7, sp, #0
 801659a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80165a0:	68bb      	ldr	r3, [r7, #8]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	4618      	mov	r0, r3
 80165a6:	f7fe fdd0 	bl	801514a <netconn_err>
 80165aa:	4603      	mov	r3, r0
 80165ac:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80165ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d134      	bne.n	8016620 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 80165b6:	68bb      	ldr	r3, [r7, #8]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	685b      	ldr	r3, [r3, #4]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d02d      	beq.n	801661c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80165c0:	68bb      	ldr	r3, [r7, #8]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	781b      	ldrb	r3, [r3, #0]
 80165c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80165ca:	2b20      	cmp	r3, #32
 80165cc:	d123      	bne.n	8016616 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80165ce:	68bb      	ldr	r3, [r7, #8]
 80165d0:	689b      	ldr	r3, [r3, #8]
 80165d2:	689b      	ldr	r3, [r3, #8]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d10c      	bne.n	80165f2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80165d8:	68bb      	ldr	r3, [r7, #8]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	685a      	ldr	r2, [r3, #4]
 80165de:	68bb      	ldr	r3, [r7, #8]
 80165e0:	689b      	ldr	r3, [r3, #8]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	4619      	mov	r1, r3
 80165e6:	4610      	mov	r0, r2
 80165e8:	f009 f916 	bl	801f818 <udp_send>
 80165ec:	4603      	mov	r3, r0
 80165ee:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 80165f0:	e016      	b.n	8016620 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80165f2:	68bb      	ldr	r3, [r7, #8]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	6858      	ldr	r0, [r3, #4]
 80165f8:	68bb      	ldr	r3, [r7, #8]
 80165fa:	689b      	ldr	r3, [r3, #8]
 80165fc:	6819      	ldr	r1, [r3, #0]
 80165fe:	68bb      	ldr	r3, [r7, #8]
 8016600:	689b      	ldr	r3, [r3, #8]
 8016602:	f103 0208 	add.w	r2, r3, #8
 8016606:	68bb      	ldr	r3, [r7, #8]
 8016608:	689b      	ldr	r3, [r3, #8]
 801660a:	899b      	ldrh	r3, [r3, #12]
 801660c:	f009 f938 	bl	801f880 <udp_sendto>
 8016610:	4603      	mov	r3, r0
 8016612:	73fb      	strb	r3, [r7, #15]
          break;
 8016614:	e004      	b.n	8016620 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8016616:	23f5      	movs	r3, #245	; 0xf5
 8016618:	73fb      	strb	r3, [r7, #15]
          break;
 801661a:	e001      	b.n	8016620 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 801661c:	23f5      	movs	r3, #245	; 0xf5
 801661e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8016620:	68bb      	ldr	r3, [r7, #8]
 8016622:	7bfa      	ldrb	r2, [r7, #15]
 8016624:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8016626:	bf00      	nop
 8016628:	3710      	adds	r7, #16
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}

0801662e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 801662e:	b580      	push	{r7, lr}
 8016630:	b086      	sub	sp, #24
 8016632:	af00      	add	r7, sp, #0
 8016634:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 801663a:	693b      	ldr	r3, [r7, #16]
 801663c:	2200      	movs	r2, #0
 801663e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	685b      	ldr	r3, [r3, #4]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d022      	beq.n	8016690 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801664a:	693b      	ldr	r3, [r7, #16]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	781b      	ldrb	r3, [r3, #0]
 8016650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016654:	2b10      	cmp	r3, #16
 8016656:	d11b      	bne.n	8016690 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8016658:	693b      	ldr	r3, [r7, #16]
 801665a:	689b      	ldr	r3, [r3, #8]
 801665c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 801665e:	697b      	ldr	r3, [r7, #20]
 8016660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016664:	d202      	bcs.n	801666c <lwip_netconn_do_recv+0x3e>
 8016666:	697b      	ldr	r3, [r7, #20]
 8016668:	b29b      	uxth	r3, r3
 801666a:	e001      	b.n	8016670 <lwip_netconn_do_recv+0x42>
 801666c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016670:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8016672:	693b      	ldr	r3, [r7, #16]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	685b      	ldr	r3, [r3, #4]
 8016678:	89fa      	ldrh	r2, [r7, #14]
 801667a:	4611      	mov	r1, r2
 801667c:	4618      	mov	r0, r3
 801667e:	f003 f90f 	bl	80198a0 <tcp_recved>
        remaining -= recved;
 8016682:	89fb      	ldrh	r3, [r7, #14]
 8016684:	697a      	ldr	r2, [r7, #20]
 8016686:	1ad3      	subs	r3, r2, r3
 8016688:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 801668a:	697b      	ldr	r3, [r7, #20]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d1e6      	bne.n	801665e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8016690:	bf00      	nop
 8016692:	3718      	adds	r7, #24
 8016694:	46bd      	mov	sp, r7
 8016696:	bd80      	pop	{r7, pc}

08016698 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b088      	sub	sp, #32
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
 80166a0:	460b      	mov	r3, r1
 80166a2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80166a4:	2300      	movs	r3, #0
 80166a6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d106      	bne.n	80166bc <lwip_netconn_do_writemore+0x24>
 80166ae:	4b96      	ldr	r3, [pc, #600]	; (8016908 <lwip_netconn_do_writemore+0x270>)
 80166b0:	f240 6273 	movw	r2, #1651	; 0x673
 80166b4:	4995      	ldr	r1, [pc, #596]	; (801690c <lwip_netconn_do_writemore+0x274>)
 80166b6:	4896      	ldr	r0, [pc, #600]	; (8016910 <lwip_netconn_do_writemore+0x278>)
 80166b8:	f00d fb62 	bl	8023d80 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	785b      	ldrb	r3, [r3, #1]
 80166c0:	2b01      	cmp	r3, #1
 80166c2:	d006      	beq.n	80166d2 <lwip_netconn_do_writemore+0x3a>
 80166c4:	4b90      	ldr	r3, [pc, #576]	; (8016908 <lwip_netconn_do_writemore+0x270>)
 80166c6:	f240 6274 	movw	r2, #1652	; 0x674
 80166ca:	4992      	ldr	r1, [pc, #584]	; (8016914 <lwip_netconn_do_writemore+0x27c>)
 80166cc:	4890      	ldr	r0, [pc, #576]	; (8016910 <lwip_netconn_do_writemore+0x278>)
 80166ce:	f00d fb57 	bl	8023d80 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	6a1b      	ldr	r3, [r3, #32]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d106      	bne.n	80166e8 <lwip_netconn_do_writemore+0x50>
 80166da:	4b8b      	ldr	r3, [pc, #556]	; (8016908 <lwip_netconn_do_writemore+0x270>)
 80166dc:	f240 6275 	movw	r2, #1653	; 0x675
 80166e0:	498d      	ldr	r1, [pc, #564]	; (8016918 <lwip_netconn_do_writemore+0x280>)
 80166e2:	488b      	ldr	r0, [pc, #556]	; (8016910 <lwip_netconn_do_writemore+0x278>)
 80166e4:	f00d fb4c 	bl	8023d80 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	685b      	ldr	r3, [r3, #4]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d106      	bne.n	80166fe <lwip_netconn_do_writemore+0x66>
 80166f0:	4b85      	ldr	r3, [pc, #532]	; (8016908 <lwip_netconn_do_writemore+0x270>)
 80166f2:	f240 6276 	movw	r2, #1654	; 0x676
 80166f6:	4989      	ldr	r1, [pc, #548]	; (801691c <lwip_netconn_do_writemore+0x284>)
 80166f8:	4885      	ldr	r0, [pc, #532]	; (8016910 <lwip_netconn_do_writemore+0x278>)
 80166fa:	f00d fb41 	bl	8023d80 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	6a1b      	ldr	r3, [r3, #32]
 8016702:	699a      	ldr	r2, [r3, #24]
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	6a1b      	ldr	r3, [r3, #32]
 8016708:	695b      	ldr	r3, [r3, #20]
 801670a:	429a      	cmp	r2, r3
 801670c:	d306      	bcc.n	801671c <lwip_netconn_do_writemore+0x84>
 801670e:	4b7e      	ldr	r3, [pc, #504]	; (8016908 <lwip_netconn_do_writemore+0x270>)
 8016710:	f240 6277 	movw	r2, #1655	; 0x677
 8016714:	4982      	ldr	r1, [pc, #520]	; (8016920 <lwip_netconn_do_writemore+0x288>)
 8016716:	487e      	ldr	r0, [pc, #504]	; (8016910 <lwip_netconn_do_writemore+0x278>)
 8016718:	f00d fb32 	bl	8023d80 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	6a1b      	ldr	r3, [r3, #32]
 8016720:	899b      	ldrh	r3, [r3, #12]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d106      	bne.n	8016734 <lwip_netconn_do_writemore+0x9c>
 8016726:	4b78      	ldr	r3, [pc, #480]	; (8016908 <lwip_netconn_do_writemore+0x270>)
 8016728:	f240 6279 	movw	r2, #1657	; 0x679
 801672c:	497d      	ldr	r1, [pc, #500]	; (8016924 <lwip_netconn_do_writemore+0x28c>)
 801672e:	4878      	ldr	r0, [pc, #480]	; (8016910 <lwip_netconn_do_writemore+0x278>)
 8016730:	f00d fb26 	bl	8023d80 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	6a1b      	ldr	r3, [r3, #32]
 8016738:	7f1b      	ldrb	r3, [r3, #28]
 801673a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	7f1b      	ldrb	r3, [r3, #28]
 8016740:	f003 0302 	and.w	r3, r3, #2
 8016744:	2b00      	cmp	r3, #0
 8016746:	d104      	bne.n	8016752 <lwip_netconn_do_writemore+0xba>
 8016748:	7ebb      	ldrb	r3, [r7, #26]
 801674a:	f003 0304 	and.w	r3, r3, #4
 801674e:	2b00      	cmp	r3, #0
 8016750:	d001      	beq.n	8016756 <lwip_netconn_do_writemore+0xbe>
 8016752:	2301      	movs	r3, #1
 8016754:	e000      	b.n	8016758 <lwip_netconn_do_writemore+0xc0>
 8016756:	2300      	movs	r3, #0
 8016758:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	6a1b      	ldr	r3, [r3, #32]
 801675e:	689b      	ldr	r3, [r3, #8]
 8016760:	681a      	ldr	r2, [r3, #0]
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	6a1b      	ldr	r3, [r3, #32]
 8016766:	691b      	ldr	r3, [r3, #16]
 8016768:	4413      	add	r3, r2
 801676a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	6a1b      	ldr	r3, [r3, #32]
 8016770:	689b      	ldr	r3, [r3, #8]
 8016772:	685a      	ldr	r2, [r3, #4]
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	6a1b      	ldr	r3, [r3, #32]
 8016778:	691b      	ldr	r3, [r3, #16]
 801677a:	1ad3      	subs	r3, r2, r3
 801677c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801677e:	693b      	ldr	r3, [r7, #16]
 8016780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016784:	d307      	bcc.n	8016796 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8016786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801678a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 801678c:	7ebb      	ldrb	r3, [r7, #26]
 801678e:	f043 0302 	orr.w	r3, r3, #2
 8016792:	76bb      	strb	r3, [r7, #26]
 8016794:	e001      	b.n	801679a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8016796:	693b      	ldr	r3, [r7, #16]
 8016798:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	685b      	ldr	r3, [r3, #4]
 801679e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80167a2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80167a4:	89fa      	ldrh	r2, [r7, #14]
 80167a6:	8bbb      	ldrh	r3, [r7, #28]
 80167a8:	429a      	cmp	r2, r3
 80167aa:	d216      	bcs.n	80167da <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80167ac:	89fb      	ldrh	r3, [r7, #14]
 80167ae:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80167b0:	7e3b      	ldrb	r3, [r7, #24]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d00d      	beq.n	80167d2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80167b6:	8bbb      	ldrh	r3, [r7, #28]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d10e      	bne.n	80167da <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	6a1b      	ldr	r3, [r3, #32]
 80167c0:	699b      	ldr	r3, [r3, #24]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d102      	bne.n	80167cc <lwip_netconn_do_writemore+0x134>
 80167c6:	f06f 0306 	mvn.w	r3, #6
 80167ca:	e000      	b.n	80167ce <lwip_netconn_do_writemore+0x136>
 80167cc:	2300      	movs	r3, #0
 80167ce:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80167d0:	e07d      	b.n	80168ce <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80167d2:	7ebb      	ldrb	r3, [r7, #26]
 80167d4:	f043 0302 	orr.w	r3, r3, #2
 80167d8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	6a1b      	ldr	r3, [r3, #32]
 80167de:	691a      	ldr	r2, [r3, #16]
 80167e0:	8bbb      	ldrh	r3, [r7, #28]
 80167e2:	441a      	add	r2, r3
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	6a1b      	ldr	r3, [r3, #32]
 80167e8:	689b      	ldr	r3, [r3, #8]
 80167ea:	685b      	ldr	r3, [r3, #4]
 80167ec:	429a      	cmp	r2, r3
 80167ee:	d906      	bls.n	80167fe <lwip_netconn_do_writemore+0x166>
 80167f0:	4b45      	ldr	r3, [pc, #276]	; (8016908 <lwip_netconn_do_writemore+0x270>)
 80167f2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80167f6:	494c      	ldr	r1, [pc, #304]	; (8016928 <lwip_netconn_do_writemore+0x290>)
 80167f8:	4845      	ldr	r0, [pc, #276]	; (8016910 <lwip_netconn_do_writemore+0x278>)
 80167fa:	f00d fac1 	bl	8023d80 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80167fe:	8bbb      	ldrh	r3, [r7, #28]
 8016800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016804:	4293      	cmp	r3, r2
 8016806:	d103      	bne.n	8016810 <lwip_netconn_do_writemore+0x178>
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801680e:	d209      	bcs.n	8016824 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8016814:	8bba      	ldrh	r2, [r7, #28]
 8016816:	429a      	cmp	r2, r3
 8016818:	d10b      	bne.n	8016832 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	6a1b      	ldr	r3, [r3, #32]
 801681e:	899b      	ldrh	r3, [r3, #12]
 8016820:	2b01      	cmp	r3, #1
 8016822:	d906      	bls.n	8016832 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8016824:	2301      	movs	r3, #1
 8016826:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8016828:	7ebb      	ldrb	r3, [r7, #26]
 801682a:	f043 0302 	orr.w	r3, r3, #2
 801682e:	76bb      	strb	r3, [r7, #26]
 8016830:	e001      	b.n	8016836 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8016832:	2300      	movs	r3, #0
 8016834:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	6858      	ldr	r0, [r3, #4]
 801683a:	7ebb      	ldrb	r3, [r7, #26]
 801683c:	8bba      	ldrh	r2, [r7, #28]
 801683e:	6979      	ldr	r1, [r7, #20]
 8016840:	f006 ff4e 	bl	801d6e0 <tcp_write>
 8016844:	4603      	mov	r3, r0
 8016846:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8016848:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d12c      	bne.n	80168aa <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	6a1b      	ldr	r3, [r3, #32]
 8016854:	6999      	ldr	r1, [r3, #24]
 8016856:	8bba      	ldrh	r2, [r7, #28]
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	6a1b      	ldr	r3, [r3, #32]
 801685c:	440a      	add	r2, r1
 801685e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	6a1b      	ldr	r3, [r3, #32]
 8016864:	6919      	ldr	r1, [r3, #16]
 8016866:	8bba      	ldrh	r2, [r7, #28]
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	6a1b      	ldr	r3, [r3, #32]
 801686c:	440a      	add	r2, r1
 801686e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	6a1b      	ldr	r3, [r3, #32]
 8016874:	691a      	ldr	r2, [r3, #16]
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	6a1b      	ldr	r3, [r3, #32]
 801687a:	689b      	ldr	r3, [r3, #8]
 801687c:	685b      	ldr	r3, [r3, #4]
 801687e:	429a      	cmp	r2, r3
 8016880:	d113      	bne.n	80168aa <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	6a1b      	ldr	r3, [r3, #32]
 8016886:	899a      	ldrh	r2, [r3, #12]
 8016888:	3a01      	subs	r2, #1
 801688a:	b292      	uxth	r2, r2
 801688c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	6a1b      	ldr	r3, [r3, #32]
 8016892:	899b      	ldrh	r3, [r3, #12]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d008      	beq.n	80168aa <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	6a1b      	ldr	r3, [r3, #32]
 801689c:	689a      	ldr	r2, [r3, #8]
 801689e:	3208      	adds	r2, #8
 80168a0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	6a1b      	ldr	r3, [r3, #32]
 80168a6:	2200      	movs	r2, #0
 80168a8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80168aa:	7e7b      	ldrb	r3, [r7, #25]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d004      	beq.n	80168ba <lwip_netconn_do_writemore+0x222>
 80168b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	f43f af50 	beq.w	801675a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80168ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d004      	beq.n	80168cc <lwip_netconn_do_writemore+0x234>
 80168c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80168c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80168ca:	d146      	bne.n	801695a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80168cc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80168ce:	7e3b      	ldrb	r3, [r7, #24]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d02b      	beq.n	801692c <lwip_netconn_do_writemore+0x294>
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	6a1b      	ldr	r3, [r3, #32]
 80168d8:	699a      	ldr	r2, [r3, #24]
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	6a1b      	ldr	r3, [r3, #32]
 80168de:	695b      	ldr	r3, [r3, #20]
 80168e0:	429a      	cmp	r2, r3
 80168e2:	d223      	bcs.n	801692c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d005      	beq.n	80168f8 <lwip_netconn_do_writemore+0x260>
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168f0:	2200      	movs	r2, #0
 80168f2:	2103      	movs	r1, #3
 80168f4:	6878      	ldr	r0, [r7, #4]
 80168f6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	7f1b      	ldrb	r3, [r3, #28]
 80168fc:	f043 0310 	orr.w	r3, r3, #16
 8016900:	b2da      	uxtb	r2, r3
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	771a      	strb	r2, [r3, #28]
 8016906:	e028      	b.n	801695a <lwip_netconn_do_writemore+0x2c2>
 8016908:	08025678 	.word	0x08025678
 801690c:	080257d0 	.word	0x080257d0
 8016910:	080256bc 	.word	0x080256bc
 8016914:	08025ad8 	.word	0x08025ad8
 8016918:	080257e0 	.word	0x080257e0
 801691c:	08025af8 	.word	0x08025af8
 8016920:	08025b10 	.word	0x08025b10
 8016924:	08025b50 	.word	0x08025b50
 8016928:	08025b78 	.word	0x08025b78
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	685b      	ldr	r3, [r3, #4]
 8016930:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016934:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8016938:	d305      	bcc.n	8016946 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	685b      	ldr	r3, [r3, #4]
 801693e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8016942:	2b04      	cmp	r3, #4
 8016944:	d909      	bls.n	801695a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801694a:	2b00      	cmp	r3, #0
 801694c:	d005      	beq.n	801695a <lwip_netconn_do_writemore+0x2c2>
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016952:	2200      	movs	r2, #0
 8016954:	2103      	movs	r1, #3
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 801695a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d11d      	bne.n	801699e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	6a1b      	ldr	r3, [r3, #32]
 8016966:	699a      	ldr	r2, [r3, #24]
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	6a1b      	ldr	r3, [r3, #32]
 801696c:	695b      	ldr	r3, [r3, #20]
 801696e:	429a      	cmp	r2, r3
 8016970:	d002      	beq.n	8016978 <lwip_netconn_do_writemore+0x2e0>
 8016972:	7e3b      	ldrb	r3, [r7, #24]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d001      	beq.n	801697c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8016978:	2301      	movs	r3, #1
 801697a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	685b      	ldr	r3, [r3, #4]
 8016980:	4618      	mov	r0, r3
 8016982:	f007 fc97 	bl	801e2b4 <tcp_output>
 8016986:	4603      	mov	r3, r0
 8016988:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 801698a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801698e:	f113 0f04 	cmn.w	r3, #4
 8016992:	d12c      	bne.n	80169ee <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8016994:	7b3b      	ldrb	r3, [r7, #12]
 8016996:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016998:	2301      	movs	r3, #1
 801699a:	76fb      	strb	r3, [r7, #27]
 801699c:	e027      	b.n	80169ee <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801699e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80169a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80169a6:	d120      	bne.n	80169ea <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	685b      	ldr	r3, [r3, #4]
 80169ac:	4618      	mov	r0, r3
 80169ae:	f007 fc81 	bl	801e2b4 <tcp_output>
 80169b2:	4603      	mov	r3, r0
 80169b4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80169b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80169ba:	f113 0f04 	cmn.w	r3, #4
 80169be:	d104      	bne.n	80169ca <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80169c0:	7b7b      	ldrb	r3, [r7, #13]
 80169c2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80169c4:	2301      	movs	r3, #1
 80169c6:	76fb      	strb	r3, [r7, #27]
 80169c8:	e011      	b.n	80169ee <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80169ca:	7e3b      	ldrb	r3, [r7, #24]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d00e      	beq.n	80169ee <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	6a1b      	ldr	r3, [r3, #32]
 80169d4:	699b      	ldr	r3, [r3, #24]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d102      	bne.n	80169e0 <lwip_netconn_do_writemore+0x348>
 80169da:	f06f 0306 	mvn.w	r3, #6
 80169de:	e000      	b.n	80169e2 <lwip_netconn_do_writemore+0x34a>
 80169e0:	2300      	movs	r3, #0
 80169e2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80169e4:	2301      	movs	r3, #1
 80169e6:	76fb      	strb	r3, [r7, #27]
 80169e8:	e001      	b.n	80169ee <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80169ea:	2301      	movs	r3, #1
 80169ec:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80169ee:	7efb      	ldrb	r3, [r7, #27]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d015      	beq.n	8016a20 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	6a1b      	ldr	r3, [r3, #32]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	330c      	adds	r3, #12
 80169fc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	6a1b      	ldr	r3, [r3, #32]
 8016a02:	7ffa      	ldrb	r2, [r7, #31]
 8016a04:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	2200      	movs	r2, #0
 8016a0a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	2200      	movs	r2, #0
 8016a10:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8016a12:	78fb      	ldrb	r3, [r7, #3]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d006      	beq.n	8016a26 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8016a18:	68b8      	ldr	r0, [r7, #8]
 8016a1a:	f00b fe79 	bl	8022710 <sys_sem_signal>
 8016a1e:	e002      	b.n	8016a26 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8016a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a24:	e000      	b.n	8016a28 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8016a26:	2300      	movs	r3, #0
}
 8016a28:	4618      	mov	r0, r3
 8016a2a:	3720      	adds	r7, #32
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}

08016a30 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b084      	sub	sp, #16
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8016a3c:	68bb      	ldr	r3, [r7, #8]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7fe fb82 	bl	801514a <netconn_err>
 8016a46:	4603      	mov	r3, r0
 8016a48:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8016a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d166      	bne.n	8016b20 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8016a52:	68bb      	ldr	r3, [r7, #8]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a5c:	2b10      	cmp	r3, #16
 8016a5e:	d15d      	bne.n	8016b1c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8016a60:	68bb      	ldr	r3, [r7, #8]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	785b      	ldrb	r3, [r3, #1]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d002      	beq.n	8016a70 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8016a6a:	23fb      	movs	r3, #251	; 0xfb
 8016a6c:	73fb      	strb	r3, [r7, #15]
 8016a6e:	e057      	b.n	8016b20 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8016a70:	68bb      	ldr	r3, [r7, #8]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	685b      	ldr	r3, [r3, #4]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d04d      	beq.n	8016b16 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8016a7a:	68bb      	ldr	r3, [r7, #8]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	2201      	movs	r2, #1
 8016a80:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016a82:	68bb      	ldr	r3, [r7, #8]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	6a1b      	ldr	r3, [r3, #32]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d006      	beq.n	8016a9a <lwip_netconn_do_write+0x6a>
 8016a8c:	4b28      	ldr	r3, [pc, #160]	; (8016b30 <lwip_netconn_do_write+0x100>)
 8016a8e:	f240 7223 	movw	r2, #1827	; 0x723
 8016a92:	4928      	ldr	r1, [pc, #160]	; (8016b34 <lwip_netconn_do_write+0x104>)
 8016a94:	4828      	ldr	r0, [pc, #160]	; (8016b38 <lwip_netconn_do_write+0x108>)
 8016a96:	f00d f973 	bl	8023d80 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8016a9a:	68bb      	ldr	r3, [r7, #8]
 8016a9c:	695b      	ldr	r3, [r3, #20]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d106      	bne.n	8016ab0 <lwip_netconn_do_write+0x80>
 8016aa2:	4b23      	ldr	r3, [pc, #140]	; (8016b30 <lwip_netconn_do_write+0x100>)
 8016aa4:	f240 7224 	movw	r2, #1828	; 0x724
 8016aa8:	4924      	ldr	r1, [pc, #144]	; (8016b3c <lwip_netconn_do_write+0x10c>)
 8016aaa:	4823      	ldr	r0, [pc, #140]	; (8016b38 <lwip_netconn_do_write+0x108>)
 8016aac:	f00d f968 	bl	8023d80 <iprintf>
        msg->conn->current_msg = msg;
 8016ab0:	68bb      	ldr	r3, [r7, #8]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	68ba      	ldr	r2, [r7, #8]
 8016ab6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8016ab8:	68bb      	ldr	r3, [r7, #8]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	2100      	movs	r1, #0
 8016abe:	4618      	mov	r0, r3
 8016ac0:	f7ff fdea 	bl	8016698 <lwip_netconn_do_writemore>
 8016ac4:	4603      	mov	r3, r0
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d02e      	beq.n	8016b28 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8016aca:	68bb      	ldr	r3, [r7, #8]
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	785b      	ldrb	r3, [r3, #1]
 8016ad0:	2b01      	cmp	r3, #1
 8016ad2:	d006      	beq.n	8016ae2 <lwip_netconn_do_write+0xb2>
 8016ad4:	4b16      	ldr	r3, [pc, #88]	; (8016b30 <lwip_netconn_do_write+0x100>)
 8016ad6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8016ada:	4919      	ldr	r1, [pc, #100]	; (8016b40 <lwip_netconn_do_write+0x110>)
 8016adc:	4816      	ldr	r0, [pc, #88]	; (8016b38 <lwip_netconn_do_write+0x108>)
 8016ade:	f00d f94f 	bl	8023d80 <iprintf>
          UNLOCK_TCPIP_CORE();
 8016ae2:	4818      	ldr	r0, [pc, #96]	; (8016b44 <lwip_netconn_do_write+0x114>)
 8016ae4:	f00b fe85 	bl	80227f2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016ae8:	68bb      	ldr	r3, [r7, #8]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	330c      	adds	r3, #12
 8016aee:	2100      	movs	r1, #0
 8016af0:	4618      	mov	r0, r3
 8016af2:	f00b fddc 	bl	80226ae <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8016af6:	4813      	ldr	r0, [pc, #76]	; (8016b44 <lwip_netconn_do_write+0x114>)
 8016af8:	f00b fe6c 	bl	80227d4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	785b      	ldrb	r3, [r3, #1]
 8016b02:	2b01      	cmp	r3, #1
 8016b04:	d110      	bne.n	8016b28 <lwip_netconn_do_write+0xf8>
 8016b06:	4b0a      	ldr	r3, [pc, #40]	; (8016b30 <lwip_netconn_do_write+0x100>)
 8016b08:	f240 722c 	movw	r2, #1836	; 0x72c
 8016b0c:	490c      	ldr	r1, [pc, #48]	; (8016b40 <lwip_netconn_do_write+0x110>)
 8016b0e:	480a      	ldr	r0, [pc, #40]	; (8016b38 <lwip_netconn_do_write+0x108>)
 8016b10:	f00d f936 	bl	8023d80 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8016b14:	e008      	b.n	8016b28 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8016b16:	23f5      	movs	r3, #245	; 0xf5
 8016b18:	73fb      	strb	r3, [r7, #15]
 8016b1a:	e001      	b.n	8016b20 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8016b1c:	23fa      	movs	r3, #250	; 0xfa
 8016b1e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8016b20:	68bb      	ldr	r3, [r7, #8]
 8016b22:	7bfa      	ldrb	r2, [r7, #15]
 8016b24:	711a      	strb	r2, [r3, #4]
 8016b26:	e000      	b.n	8016b2a <lwip_netconn_do_write+0xfa>
        return;
 8016b28:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8016b2a:	3710      	adds	r7, #16
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	bd80      	pop	{r7, pc}
 8016b30:	08025678 	.word	0x08025678
 8016b34:	08025a1c 	.word	0x08025a1c
 8016b38:	080256bc 	.word	0x080256bc
 8016b3c:	08025ba4 	.word	0x08025ba4
 8016b40:	08025a38 	.word	0x08025a38
 8016b44:	20006680 	.word	0x20006680

08016b48 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b084      	sub	sp, #16
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	785b      	ldrb	r3, [r3, #1]
 8016b5a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	685b      	ldr	r3, [r3, #4]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d069      	beq.n	8016c3a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	781b      	ldrb	r3, [r3, #0]
 8016b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8016b70:	2b10      	cmp	r3, #16
 8016b72:	d162      	bne.n	8016c3a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8016b78:	2b03      	cmp	r3, #3
 8016b7a:	d002      	beq.n	8016b82 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8016b7c:	7afb      	ldrb	r3, [r7, #11]
 8016b7e:	2b02      	cmp	r3, #2
 8016b80:	d05b      	beq.n	8016c3a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8016b82:	7afb      	ldrb	r3, [r7, #11]
 8016b84:	2b03      	cmp	r3, #3
 8016b86:	d103      	bne.n	8016b90 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	22f5      	movs	r2, #245	; 0xf5
 8016b8c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8016b8e:	e059      	b.n	8016c44 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8016b90:	7afb      	ldrb	r3, [r7, #11]
 8016b92:	2b01      	cmp	r3, #1
 8016b94:	d103      	bne.n	8016b9e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	22fb      	movs	r2, #251	; 0xfb
 8016b9a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8016b9c:	e052      	b.n	8016c44 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	7a1b      	ldrb	r3, [r3, #8]
 8016ba2:	f003 0301 	and.w	r3, r3, #1
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d004      	beq.n	8016bb4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	4618      	mov	r0, r3
 8016bb0:	f7ff f804 	bl	8015bbc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	6a1b      	ldr	r3, [r3, #32]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d006      	beq.n	8016bcc <lwip_netconn_do_close+0x84>
 8016bbe:	4b23      	ldr	r3, [pc, #140]	; (8016c4c <lwip_netconn_do_close+0x104>)
 8016bc0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8016bc4:	4922      	ldr	r1, [pc, #136]	; (8016c50 <lwip_netconn_do_close+0x108>)
 8016bc6:	4823      	ldr	r0, [pc, #140]	; (8016c54 <lwip_netconn_do_close+0x10c>)
 8016bc8:	f00d f8da 	bl	8023d80 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	2204      	movs	r2, #4
 8016bd2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	68fa      	ldr	r2, [r7, #12]
 8016bda:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	2100      	movs	r1, #0
 8016be2:	4618      	mov	r0, r3
 8016be4:	f7ff f868 	bl	8015cb8 <lwip_netconn_do_close_internal>
 8016be8:	4603      	mov	r3, r0
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d029      	beq.n	8016c42 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	785b      	ldrb	r3, [r3, #1]
 8016bf4:	2b04      	cmp	r3, #4
 8016bf6:	d006      	beq.n	8016c06 <lwip_netconn_do_close+0xbe>
 8016bf8:	4b14      	ldr	r3, [pc, #80]	; (8016c4c <lwip_netconn_do_close+0x104>)
 8016bfa:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8016bfe:	4916      	ldr	r1, [pc, #88]	; (8016c58 <lwip_netconn_do_close+0x110>)
 8016c00:	4814      	ldr	r0, [pc, #80]	; (8016c54 <lwip_netconn_do_close+0x10c>)
 8016c02:	f00d f8bd 	bl	8023d80 <iprintf>
        UNLOCK_TCPIP_CORE();
 8016c06:	4815      	ldr	r0, [pc, #84]	; (8016c5c <lwip_netconn_do_close+0x114>)
 8016c08:	f00b fdf3 	bl	80227f2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	330c      	adds	r3, #12
 8016c12:	2100      	movs	r1, #0
 8016c14:	4618      	mov	r0, r3
 8016c16:	f00b fd4a 	bl	80226ae <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8016c1a:	4810      	ldr	r0, [pc, #64]	; (8016c5c <lwip_netconn_do_close+0x114>)
 8016c1c:	f00b fdda 	bl	80227d4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	785b      	ldrb	r3, [r3, #1]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d00b      	beq.n	8016c42 <lwip_netconn_do_close+0xfa>
 8016c2a:	4b08      	ldr	r3, [pc, #32]	; (8016c4c <lwip_netconn_do_close+0x104>)
 8016c2c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8016c30:	4909      	ldr	r1, [pc, #36]	; (8016c58 <lwip_netconn_do_close+0x110>)
 8016c32:	4808      	ldr	r0, [pc, #32]	; (8016c54 <lwip_netconn_do_close+0x10c>)
 8016c34:	f00d f8a4 	bl	8023d80 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8016c38:	e003      	b.n	8016c42 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	22f5      	movs	r2, #245	; 0xf5
 8016c3e:	711a      	strb	r2, [r3, #4]
 8016c40:	e000      	b.n	8016c44 <lwip_netconn_do_close+0xfc>
      return;
 8016c42:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8016c44:	3710      	adds	r7, #16
 8016c46:	46bd      	mov	sp, r7
 8016c48:	bd80      	pop	{r7, pc}
 8016c4a:	bf00      	nop
 8016c4c:	08025678 	.word	0x08025678
 8016c50:	08025a1c 	.word	0x08025a1c
 8016c54:	080256bc 	.word	0x080256bc
 8016c58:	08025a38 	.word	0x08025a38
 8016c5c:	20006680 	.word	0x20006680

08016c60 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8016c66:	2006      	movs	r0, #6
 8016c68:	f000 ff38 	bl	8017adc <memp_malloc>
 8016c6c:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d004      	beq.n	8016c7e <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8016c74:	2210      	movs	r2, #16
 8016c76:	2100      	movs	r1, #0
 8016c78:	6878      	ldr	r0, [r7, #4]
 8016c7a:	f00c ff99 	bl	8023bb0 <memset>
  }
  return buf;
 8016c7e:	687b      	ldr	r3, [r7, #4]
}
 8016c80:	4618      	mov	r0, r3
 8016c82:	3708      	adds	r7, #8
 8016c84:	46bd      	mov	sp, r7
 8016c86:	bd80      	pop	{r7, pc}

08016c88 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b082      	sub	sp, #8
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d013      	beq.n	8016cbe <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d00b      	beq.n	8016cb6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f001 fe34 	bl	8018910 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	2200      	movs	r2, #0
 8016cac:	605a      	str	r2, [r3, #4]
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	685a      	ldr	r2, [r3, #4]
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8016cb6:	6879      	ldr	r1, [r7, #4]
 8016cb8:	2006      	movs	r0, #6
 8016cba:	f000 ff85 	bl	8017bc8 <memp_free>
  }
}
 8016cbe:	bf00      	nop
 8016cc0:	3708      	adds	r7, #8
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bd80      	pop	{r7, pc}
	...

08016cc8 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b084      	sub	sp, #16
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	60f8      	str	r0, [r7, #12]
 8016cd0:	60b9      	str	r1, [r7, #8]
 8016cd2:	4613      	mov	r3, r2
 8016cd4:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d108      	bne.n	8016cee <netbuf_ref+0x26>
 8016cdc:	4b1c      	ldr	r3, [pc, #112]	; (8016d50 <netbuf_ref+0x88>)
 8016cde:	2299      	movs	r2, #153	; 0x99
 8016ce0:	491c      	ldr	r1, [pc, #112]	; (8016d54 <netbuf_ref+0x8c>)
 8016ce2:	481d      	ldr	r0, [pc, #116]	; (8016d58 <netbuf_ref+0x90>)
 8016ce4:	f00d f84c 	bl	8023d80 <iprintf>
 8016ce8:	f06f 030f 	mvn.w	r3, #15
 8016cec:	e02b      	b.n	8016d46 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d004      	beq.n	8016d00 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f001 fe08 	bl	8018910 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8016d00:	2241      	movs	r2, #65	; 0x41
 8016d02:	2100      	movs	r1, #0
 8016d04:	2036      	movs	r0, #54	; 0x36
 8016d06:	f001 fb1f 	bl	8018348 <pbuf_alloc>
 8016d0a:	4602      	mov	r2, r0
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d105      	bne.n	8016d24 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8016d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d22:	e010      	b.n	8016d46 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	68ba      	ldr	r2, [r7, #8]
 8016d2a:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	88fa      	ldrh	r2, [r7, #6]
 8016d32:	811a      	strh	r2, [r3, #8]
 8016d34:	68fa      	ldr	r2, [r7, #12]
 8016d36:	6812      	ldr	r2, [r2, #0]
 8016d38:	891b      	ldrh	r3, [r3, #8]
 8016d3a:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	681a      	ldr	r2, [r3, #0]
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8016d44:	2300      	movs	r3, #0
}
 8016d46:	4618      	mov	r0, r3
 8016d48:	3710      	adds	r7, #16
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	bd80      	pop	{r7, pc}
 8016d4e:	bf00      	nop
 8016d50:	08025bd0 	.word	0x08025bd0
 8016d54:	08025c88 	.word	0x08025c88
 8016d58:	08025c20 	.word	0x08025c20

08016d5c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b082      	sub	sp, #8
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d108      	bne.n	8016d7c <netbuf_next+0x20>
 8016d6a:	4b11      	ldr	r3, [pc, #68]	; (8016db0 <netbuf_next+0x54>)
 8016d6c:	22e0      	movs	r2, #224	; 0xe0
 8016d6e:	4911      	ldr	r1, [pc, #68]	; (8016db4 <netbuf_next+0x58>)
 8016d70:	4811      	ldr	r0, [pc, #68]	; (8016db8 <netbuf_next+0x5c>)
 8016d72:	f00d f805 	bl	8023d80 <iprintf>
 8016d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d7a:	e014      	b.n	8016da6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	685b      	ldr	r3, [r3, #4]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d102      	bne.n	8016d8c <netbuf_next+0x30>
    return -1;
 8016d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d8a:	e00c      	b.n	8016da6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	685b      	ldr	r3, [r3, #4]
 8016d90:	681a      	ldr	r2, [r3, #0]
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	685b      	ldr	r3, [r3, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d101      	bne.n	8016da4 <netbuf_next+0x48>
    return 1;
 8016da0:	2301      	movs	r3, #1
 8016da2:	e000      	b.n	8016da6 <netbuf_next+0x4a>
  }
  return 0;
 8016da4:	2300      	movs	r3, #0
}
 8016da6:	4618      	mov	r0, r3
 8016da8:	3708      	adds	r7, #8
 8016daa:	46bd      	mov	sp, r7
 8016dac:	bd80      	pop	{r7, pc}
 8016dae:	bf00      	nop
 8016db0:	08025bd0 	.word	0x08025bd0
 8016db4:	08025d30 	.word	0x08025d30
 8016db8:	08025c20 	.word	0x08025c20

08016dbc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b084      	sub	sp, #16
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]
 8016dc4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8016dc6:	f008 fb2d 	bl	801f424 <sys_timeouts_sleeptime>
 8016dca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016dd2:	d10b      	bne.n	8016dec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8016dd4:	4813      	ldr	r0, [pc, #76]	; (8016e24 <tcpip_timeouts_mbox_fetch+0x68>)
 8016dd6:	f00b fd0c 	bl	80227f2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016dda:	2200      	movs	r2, #0
 8016ddc:	6839      	ldr	r1, [r7, #0]
 8016dde:	6878      	ldr	r0, [r7, #4]
 8016de0:	f00b fbc4 	bl	802256c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8016de4:	480f      	ldr	r0, [pc, #60]	; (8016e24 <tcpip_timeouts_mbox_fetch+0x68>)
 8016de6:	f00b fcf5 	bl	80227d4 <sys_mutex_lock>
    return;
 8016dea:	e018      	b.n	8016e1e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d102      	bne.n	8016df8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8016df2:	f008 fadd 	bl	801f3b0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016df6:	e7e6      	b.n	8016dc6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8016df8:	480a      	ldr	r0, [pc, #40]	; (8016e24 <tcpip_timeouts_mbox_fetch+0x68>)
 8016dfa:	f00b fcfa 	bl	80227f2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8016dfe:	68fa      	ldr	r2, [r7, #12]
 8016e00:	6839      	ldr	r1, [r7, #0]
 8016e02:	6878      	ldr	r0, [r7, #4]
 8016e04:	f00b fbb2 	bl	802256c <sys_arch_mbox_fetch>
 8016e08:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8016e0a:	4806      	ldr	r0, [pc, #24]	; (8016e24 <tcpip_timeouts_mbox_fetch+0x68>)
 8016e0c:	f00b fce2 	bl	80227d4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8016e10:	68bb      	ldr	r3, [r7, #8]
 8016e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016e16:	d102      	bne.n	8016e1e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016e18:	f008 faca 	bl	801f3b0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016e1c:	e7d3      	b.n	8016dc6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8016e1e:	3710      	adds	r7, #16
 8016e20:	46bd      	mov	sp, r7
 8016e22:	bd80      	pop	{r7, pc}
 8016e24:	20006680 	.word	0x20006680

08016e28 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b084      	sub	sp, #16
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8016e30:	4810      	ldr	r0, [pc, #64]	; (8016e74 <tcpip_thread+0x4c>)
 8016e32:	f00b fccf 	bl	80227d4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8016e36:	4b10      	ldr	r3, [pc, #64]	; (8016e78 <tcpip_thread+0x50>)
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d005      	beq.n	8016e4a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8016e3e:	4b0e      	ldr	r3, [pc, #56]	; (8016e78 <tcpip_thread+0x50>)
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	4a0e      	ldr	r2, [pc, #56]	; (8016e7c <tcpip_thread+0x54>)
 8016e44:	6812      	ldr	r2, [r2, #0]
 8016e46:	4610      	mov	r0, r2
 8016e48:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016e4a:	f107 030c 	add.w	r3, r7, #12
 8016e4e:	4619      	mov	r1, r3
 8016e50:	480b      	ldr	r0, [pc, #44]	; (8016e80 <tcpip_thread+0x58>)
 8016e52:	f7ff ffb3 	bl	8016dbc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d106      	bne.n	8016e6a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016e5c:	4b09      	ldr	r3, [pc, #36]	; (8016e84 <tcpip_thread+0x5c>)
 8016e5e:	2291      	movs	r2, #145	; 0x91
 8016e60:	4909      	ldr	r1, [pc, #36]	; (8016e88 <tcpip_thread+0x60>)
 8016e62:	480a      	ldr	r0, [pc, #40]	; (8016e8c <tcpip_thread+0x64>)
 8016e64:	f00c ff8c 	bl	8023d80 <iprintf>
      continue;
 8016e68:	e003      	b.n	8016e72 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	f000 f80f 	bl	8016e90 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016e72:	e7ea      	b.n	8016e4a <tcpip_thread+0x22>
 8016e74:	20006680 	.word	0x20006680
 8016e78:	20006674 	.word	0x20006674
 8016e7c:	20006678 	.word	0x20006678
 8016e80:	2000667c 	.word	0x2000667c
 8016e84:	08025d68 	.word	0x08025d68
 8016e88:	08025d98 	.word	0x08025d98
 8016e8c:	08025db8 	.word	0x08025db8

08016e90 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b082      	sub	sp, #8
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	781b      	ldrb	r3, [r3, #0]
 8016e9c:	2b02      	cmp	r3, #2
 8016e9e:	d026      	beq.n	8016eee <tcpip_thread_handle_msg+0x5e>
 8016ea0:	2b02      	cmp	r3, #2
 8016ea2:	dc2b      	bgt.n	8016efc <tcpip_thread_handle_msg+0x6c>
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d002      	beq.n	8016eae <tcpip_thread_handle_msg+0x1e>
 8016ea8:	2b01      	cmp	r3, #1
 8016eaa:	d015      	beq.n	8016ed8 <tcpip_thread_handle_msg+0x48>
 8016eac:	e026      	b.n	8016efc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	68db      	ldr	r3, [r3, #12]
 8016eb2:	687a      	ldr	r2, [r7, #4]
 8016eb4:	6850      	ldr	r0, [r2, #4]
 8016eb6:	687a      	ldr	r2, [r7, #4]
 8016eb8:	6892      	ldr	r2, [r2, #8]
 8016eba:	4611      	mov	r1, r2
 8016ebc:	4798      	blx	r3
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d004      	beq.n	8016ece <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	685b      	ldr	r3, [r3, #4]
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f001 fd21 	bl	8018910 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016ece:	6879      	ldr	r1, [r7, #4]
 8016ed0:	2009      	movs	r0, #9
 8016ed2:	f000 fe79 	bl	8017bc8 <memp_free>
      break;
 8016ed6:	e018      	b.n	8016f0a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	685b      	ldr	r3, [r3, #4]
 8016edc:	687a      	ldr	r2, [r7, #4]
 8016ede:	6892      	ldr	r2, [r2, #8]
 8016ee0:	4610      	mov	r0, r2
 8016ee2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016ee4:	6879      	ldr	r1, [r7, #4]
 8016ee6:	2008      	movs	r0, #8
 8016ee8:	f000 fe6e 	bl	8017bc8 <memp_free>
      break;
 8016eec:	e00d      	b.n	8016f0a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	685b      	ldr	r3, [r3, #4]
 8016ef2:	687a      	ldr	r2, [r7, #4]
 8016ef4:	6892      	ldr	r2, [r2, #8]
 8016ef6:	4610      	mov	r0, r2
 8016ef8:	4798      	blx	r3
      break;
 8016efa:	e006      	b.n	8016f0a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016efc:	4b05      	ldr	r3, [pc, #20]	; (8016f14 <tcpip_thread_handle_msg+0x84>)
 8016efe:	22cf      	movs	r2, #207	; 0xcf
 8016f00:	4905      	ldr	r1, [pc, #20]	; (8016f18 <tcpip_thread_handle_msg+0x88>)
 8016f02:	4806      	ldr	r0, [pc, #24]	; (8016f1c <tcpip_thread_handle_msg+0x8c>)
 8016f04:	f00c ff3c 	bl	8023d80 <iprintf>
      break;
 8016f08:	bf00      	nop
  }
}
 8016f0a:	bf00      	nop
 8016f0c:	3708      	adds	r7, #8
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	bd80      	pop	{r7, pc}
 8016f12:	bf00      	nop
 8016f14:	08025d68 	.word	0x08025d68
 8016f18:	08025d98 	.word	0x08025d98
 8016f1c:	08025db8 	.word	0x08025db8

08016f20 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b086      	sub	sp, #24
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	60f8      	str	r0, [r7, #12]
 8016f28:	60b9      	str	r1, [r7, #8]
 8016f2a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016f2c:	481a      	ldr	r0, [pc, #104]	; (8016f98 <tcpip_inpkt+0x78>)
 8016f2e:	f00b fb78 	bl	8022622 <sys_mbox_valid>
 8016f32:	4603      	mov	r3, r0
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d105      	bne.n	8016f44 <tcpip_inpkt+0x24>
 8016f38:	4b18      	ldr	r3, [pc, #96]	; (8016f9c <tcpip_inpkt+0x7c>)
 8016f3a:	22fc      	movs	r2, #252	; 0xfc
 8016f3c:	4918      	ldr	r1, [pc, #96]	; (8016fa0 <tcpip_inpkt+0x80>)
 8016f3e:	4819      	ldr	r0, [pc, #100]	; (8016fa4 <tcpip_inpkt+0x84>)
 8016f40:	f00c ff1e 	bl	8023d80 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8016f44:	2009      	movs	r0, #9
 8016f46:	f000 fdc9 	bl	8017adc <memp_malloc>
 8016f4a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8016f4c:	697b      	ldr	r3, [r7, #20]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d102      	bne.n	8016f58 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8016f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f56:	e01a      	b.n	8016f8e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8016f58:	697b      	ldr	r3, [r7, #20]
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8016f5e:	697b      	ldr	r3, [r7, #20]
 8016f60:	68fa      	ldr	r2, [r7, #12]
 8016f62:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8016f64:	697b      	ldr	r3, [r7, #20]
 8016f66:	68ba      	ldr	r2, [r7, #8]
 8016f68:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8016f6a:	697b      	ldr	r3, [r7, #20]
 8016f6c:	687a      	ldr	r2, [r7, #4]
 8016f6e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016f70:	6979      	ldr	r1, [r7, #20]
 8016f72:	4809      	ldr	r0, [pc, #36]	; (8016f98 <tcpip_inpkt+0x78>)
 8016f74:	f00b fae0 	bl	8022538 <sys_mbox_trypost>
 8016f78:	4603      	mov	r3, r0
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d006      	beq.n	8016f8c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016f7e:	6979      	ldr	r1, [r7, #20]
 8016f80:	2009      	movs	r0, #9
 8016f82:	f000 fe21 	bl	8017bc8 <memp_free>
    return ERR_MEM;
 8016f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f8a:	e000      	b.n	8016f8e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8016f8c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8016f8e:	4618      	mov	r0, r3
 8016f90:	3718      	adds	r7, #24
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bd80      	pop	{r7, pc}
 8016f96:	bf00      	nop
 8016f98:	2000667c 	.word	0x2000667c
 8016f9c:	08025d68 	.word	0x08025d68
 8016fa0:	08025de0 	.word	0x08025de0
 8016fa4:	08025db8 	.word	0x08025db8

08016fa8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b082      	sub	sp, #8
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]
 8016fb0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8016fb2:	683b      	ldr	r3, [r7, #0]
 8016fb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016fb8:	f003 0318 	and.w	r3, r3, #24
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d006      	beq.n	8016fce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8016fc0:	4a08      	ldr	r2, [pc, #32]	; (8016fe4 <tcpip_input+0x3c>)
 8016fc2:	6839      	ldr	r1, [r7, #0]
 8016fc4:	6878      	ldr	r0, [r7, #4]
 8016fc6:	f7ff ffab 	bl	8016f20 <tcpip_inpkt>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	e005      	b.n	8016fda <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8016fce:	4a06      	ldr	r2, [pc, #24]	; (8016fe8 <tcpip_input+0x40>)
 8016fd0:	6839      	ldr	r1, [r7, #0]
 8016fd2:	6878      	ldr	r0, [r7, #4]
 8016fd4:	f7ff ffa4 	bl	8016f20 <tcpip_inpkt>
 8016fd8:	4603      	mov	r3, r0
}
 8016fda:	4618      	mov	r0, r3
 8016fdc:	3708      	adds	r7, #8
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	bd80      	pop	{r7, pc}
 8016fe2:	bf00      	nop
 8016fe4:	08022325 	.word	0x08022325
 8016fe8:	0802122d 	.word	0x0802122d

08016fec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b084      	sub	sp, #16
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
 8016ff4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016ff6:	4819      	ldr	r0, [pc, #100]	; (801705c <tcpip_try_callback+0x70>)
 8016ff8:	f00b fb13 	bl	8022622 <sys_mbox_valid>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d106      	bne.n	8017010 <tcpip_try_callback+0x24>
 8017002:	4b17      	ldr	r3, [pc, #92]	; (8017060 <tcpip_try_callback+0x74>)
 8017004:	f240 125d 	movw	r2, #349	; 0x15d
 8017008:	4916      	ldr	r1, [pc, #88]	; (8017064 <tcpip_try_callback+0x78>)
 801700a:	4817      	ldr	r0, [pc, #92]	; (8017068 <tcpip_try_callback+0x7c>)
 801700c:	f00c feb8 	bl	8023d80 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8017010:	2008      	movs	r0, #8
 8017012:	f000 fd63 	bl	8017adc <memp_malloc>
 8017016:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d102      	bne.n	8017024 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801701e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017022:	e017      	b.n	8017054 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	2201      	movs	r2, #1
 8017028:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	687a      	ldr	r2, [r7, #4]
 801702e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	683a      	ldr	r2, [r7, #0]
 8017034:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017036:	68f9      	ldr	r1, [r7, #12]
 8017038:	4808      	ldr	r0, [pc, #32]	; (801705c <tcpip_try_callback+0x70>)
 801703a:	f00b fa7d 	bl	8022538 <sys_mbox_trypost>
 801703e:	4603      	mov	r3, r0
 8017040:	2b00      	cmp	r3, #0
 8017042:	d006      	beq.n	8017052 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8017044:	68f9      	ldr	r1, [r7, #12]
 8017046:	2008      	movs	r0, #8
 8017048:	f000 fdbe 	bl	8017bc8 <memp_free>
    return ERR_MEM;
 801704c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017050:	e000      	b.n	8017054 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8017052:	2300      	movs	r3, #0
}
 8017054:	4618      	mov	r0, r3
 8017056:	3710      	adds	r7, #16
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}
 801705c:	2000667c 	.word	0x2000667c
 8017060:	08025d68 	.word	0x08025d68
 8017064:	08025de0 	.word	0x08025de0
 8017068:	08025db8 	.word	0x08025db8

0801706c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b084      	sub	sp, #16
 8017070:	af00      	add	r7, sp, #0
 8017072:	60f8      	str	r0, [r7, #12]
 8017074:	60b9      	str	r1, [r7, #8]
 8017076:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8017078:	4806      	ldr	r0, [pc, #24]	; (8017094 <tcpip_send_msg_wait_sem+0x28>)
 801707a:	f00b fbab 	bl	80227d4 <sys_mutex_lock>
  fn(apimsg);
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	68b8      	ldr	r0, [r7, #8]
 8017082:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8017084:	4803      	ldr	r0, [pc, #12]	; (8017094 <tcpip_send_msg_wait_sem+0x28>)
 8017086:	f00b fbb4 	bl	80227f2 <sys_mutex_unlock>
  return ERR_OK;
 801708a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801708c:	4618      	mov	r0, r3
 801708e:	3710      	adds	r7, #16
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}
 8017094:	20006680 	.word	0x20006680

08017098 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8017098:	b580      	push	{r7, lr}
 801709a:	b084      	sub	sp, #16
 801709c:	af02      	add	r7, sp, #8
 801709e:	6078      	str	r0, [r7, #4]
 80170a0:	6039      	str	r1, [r7, #0]
  lwip_init();
 80170a2:	f000 f871 	bl	8017188 <lwip_init>

  tcpip_init_done = initfunc;
 80170a6:	4a17      	ldr	r2, [pc, #92]	; (8017104 <tcpip_init+0x6c>)
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80170ac:	4a16      	ldr	r2, [pc, #88]	; (8017108 <tcpip_init+0x70>)
 80170ae:	683b      	ldr	r3, [r7, #0]
 80170b0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80170b2:	2106      	movs	r1, #6
 80170b4:	4815      	ldr	r0, [pc, #84]	; (801710c <tcpip_init+0x74>)
 80170b6:	f00b fa0b 	bl	80224d0 <sys_mbox_new>
 80170ba:	4603      	mov	r3, r0
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d006      	beq.n	80170ce <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80170c0:	4b13      	ldr	r3, [pc, #76]	; (8017110 <tcpip_init+0x78>)
 80170c2:	f240 2261 	movw	r2, #609	; 0x261
 80170c6:	4913      	ldr	r1, [pc, #76]	; (8017114 <tcpip_init+0x7c>)
 80170c8:	4813      	ldr	r0, [pc, #76]	; (8017118 <tcpip_init+0x80>)
 80170ca:	f00c fe59 	bl	8023d80 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80170ce:	4813      	ldr	r0, [pc, #76]	; (801711c <tcpip_init+0x84>)
 80170d0:	f00b fb64 	bl	802279c <sys_mutex_new>
 80170d4:	4603      	mov	r3, r0
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d006      	beq.n	80170e8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80170da:	4b0d      	ldr	r3, [pc, #52]	; (8017110 <tcpip_init+0x78>)
 80170dc:	f240 2265 	movw	r2, #613	; 0x265
 80170e0:	490f      	ldr	r1, [pc, #60]	; (8017120 <tcpip_init+0x88>)
 80170e2:	480d      	ldr	r0, [pc, #52]	; (8017118 <tcpip_init+0x80>)
 80170e4:	f00c fe4c 	bl	8023d80 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80170e8:	2300      	movs	r3, #0
 80170ea:	9300      	str	r3, [sp, #0]
 80170ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80170f0:	2200      	movs	r2, #0
 80170f2:	490c      	ldr	r1, [pc, #48]	; (8017124 <tcpip_init+0x8c>)
 80170f4:	480c      	ldr	r0, [pc, #48]	; (8017128 <tcpip_init+0x90>)
 80170f6:	f00b fb89 	bl	802280c <sys_thread_new>
}
 80170fa:	bf00      	nop
 80170fc:	3708      	adds	r7, #8
 80170fe:	46bd      	mov	sp, r7
 8017100:	bd80      	pop	{r7, pc}
 8017102:	bf00      	nop
 8017104:	20006674 	.word	0x20006674
 8017108:	20006678 	.word	0x20006678
 801710c:	2000667c 	.word	0x2000667c
 8017110:	08025d68 	.word	0x08025d68
 8017114:	08025df0 	.word	0x08025df0
 8017118:	08025db8 	.word	0x08025db8
 801711c:	20006680 	.word	0x20006680
 8017120:	08025e14 	.word	0x08025e14
 8017124:	08016e29 	.word	0x08016e29
 8017128:	08025e38 	.word	0x08025e38

0801712c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801712c:	b480      	push	{r7}
 801712e:	b083      	sub	sp, #12
 8017130:	af00      	add	r7, sp, #0
 8017132:	4603      	mov	r3, r0
 8017134:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8017136:	88fb      	ldrh	r3, [r7, #6]
 8017138:	021b      	lsls	r3, r3, #8
 801713a:	b21a      	sxth	r2, r3
 801713c:	88fb      	ldrh	r3, [r7, #6]
 801713e:	0a1b      	lsrs	r3, r3, #8
 8017140:	b29b      	uxth	r3, r3
 8017142:	b21b      	sxth	r3, r3
 8017144:	4313      	orrs	r3, r2
 8017146:	b21b      	sxth	r3, r3
 8017148:	b29b      	uxth	r3, r3
}
 801714a:	4618      	mov	r0, r3
 801714c:	370c      	adds	r7, #12
 801714e:	46bd      	mov	sp, r7
 8017150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017154:	4770      	bx	lr

08017156 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8017156:	b480      	push	{r7}
 8017158:	b083      	sub	sp, #12
 801715a:	af00      	add	r7, sp, #0
 801715c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	061a      	lsls	r2, r3, #24
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	021b      	lsls	r3, r3, #8
 8017166:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801716a:	431a      	orrs	r2, r3
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	0a1b      	lsrs	r3, r3, #8
 8017170:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017174:	431a      	orrs	r2, r3
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	0e1b      	lsrs	r3, r3, #24
 801717a:	4313      	orrs	r3, r2
}
 801717c:	4618      	mov	r0, r3
 801717e:	370c      	adds	r7, #12
 8017180:	46bd      	mov	sp, r7
 8017182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017186:	4770      	bx	lr

08017188 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b082      	sub	sp, #8
 801718c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801718e:	2300      	movs	r3, #0
 8017190:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8017192:	f00b faf5 	bl	8022780 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8017196:	f000 f8d5 	bl	8017344 <mem_init>
  memp_init();
 801719a:	f000 fc31 	bl	8017a00 <memp_init>
  pbuf_init();
  netif_init();
 801719e:	f000 fd3d 	bl	8017c1c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80171a2:	f008 f977 	bl	801f494 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80171a6:	f001 fe5d 	bl	8018e64 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80171aa:	f008 f8b9 	bl	801f320 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80171ae:	bf00      	nop
 80171b0:	3708      	adds	r7, #8
 80171b2:	46bd      	mov	sp, r7
 80171b4:	bd80      	pop	{r7, pc}
	...

080171b8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80171b8:	b480      	push	{r7}
 80171ba:	b083      	sub	sp, #12
 80171bc:	af00      	add	r7, sp, #0
 80171be:	4603      	mov	r3, r0
 80171c0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80171c2:	4b05      	ldr	r3, [pc, #20]	; (80171d8 <ptr_to_mem+0x20>)
 80171c4:	681a      	ldr	r2, [r3, #0]
 80171c6:	88fb      	ldrh	r3, [r7, #6]
 80171c8:	4413      	add	r3, r2
}
 80171ca:	4618      	mov	r0, r3
 80171cc:	370c      	adds	r7, #12
 80171ce:	46bd      	mov	sp, r7
 80171d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d4:	4770      	bx	lr
 80171d6:	bf00      	nop
 80171d8:	20008eb0 	.word	0x20008eb0

080171dc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80171dc:	b480      	push	{r7}
 80171de:	b083      	sub	sp, #12
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80171e4:	4b05      	ldr	r3, [pc, #20]	; (80171fc <mem_to_ptr+0x20>)
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	687a      	ldr	r2, [r7, #4]
 80171ea:	1ad3      	subs	r3, r2, r3
 80171ec:	b29b      	uxth	r3, r3
}
 80171ee:	4618      	mov	r0, r3
 80171f0:	370c      	adds	r7, #12
 80171f2:	46bd      	mov	sp, r7
 80171f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f8:	4770      	bx	lr
 80171fa:	bf00      	nop
 80171fc:	20008eb0 	.word	0x20008eb0

08017200 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8017200:	b590      	push	{r4, r7, lr}
 8017202:	b085      	sub	sp, #20
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017208:	4b45      	ldr	r3, [pc, #276]	; (8017320 <plug_holes+0x120>)
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	687a      	ldr	r2, [r7, #4]
 801720e:	429a      	cmp	r2, r3
 8017210:	d206      	bcs.n	8017220 <plug_holes+0x20>
 8017212:	4b44      	ldr	r3, [pc, #272]	; (8017324 <plug_holes+0x124>)
 8017214:	f240 12df 	movw	r2, #479	; 0x1df
 8017218:	4943      	ldr	r1, [pc, #268]	; (8017328 <plug_holes+0x128>)
 801721a:	4844      	ldr	r0, [pc, #272]	; (801732c <plug_holes+0x12c>)
 801721c:	f00c fdb0 	bl	8023d80 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8017220:	4b43      	ldr	r3, [pc, #268]	; (8017330 <plug_holes+0x130>)
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	687a      	ldr	r2, [r7, #4]
 8017226:	429a      	cmp	r2, r3
 8017228:	d306      	bcc.n	8017238 <plug_holes+0x38>
 801722a:	4b3e      	ldr	r3, [pc, #248]	; (8017324 <plug_holes+0x124>)
 801722c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017230:	4940      	ldr	r1, [pc, #256]	; (8017334 <plug_holes+0x134>)
 8017232:	483e      	ldr	r0, [pc, #248]	; (801732c <plug_holes+0x12c>)
 8017234:	f00c fda4 	bl	8023d80 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	791b      	ldrb	r3, [r3, #4]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d006      	beq.n	801724e <plug_holes+0x4e>
 8017240:	4b38      	ldr	r3, [pc, #224]	; (8017324 <plug_holes+0x124>)
 8017242:	f240 12e1 	movw	r2, #481	; 0x1e1
 8017246:	493c      	ldr	r1, [pc, #240]	; (8017338 <plug_holes+0x138>)
 8017248:	4838      	ldr	r0, [pc, #224]	; (801732c <plug_holes+0x12c>)
 801724a:	f00c fd99 	bl	8023d80 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	881b      	ldrh	r3, [r3, #0]
 8017252:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017256:	d906      	bls.n	8017266 <plug_holes+0x66>
 8017258:	4b32      	ldr	r3, [pc, #200]	; (8017324 <plug_holes+0x124>)
 801725a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801725e:	4937      	ldr	r1, [pc, #220]	; (801733c <plug_holes+0x13c>)
 8017260:	4832      	ldr	r0, [pc, #200]	; (801732c <plug_holes+0x12c>)
 8017262:	f00c fd8d 	bl	8023d80 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	881b      	ldrh	r3, [r3, #0]
 801726a:	4618      	mov	r0, r3
 801726c:	f7ff ffa4 	bl	80171b8 <ptr_to_mem>
 8017270:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8017272:	687a      	ldr	r2, [r7, #4]
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	429a      	cmp	r2, r3
 8017278:	d024      	beq.n	80172c4 <plug_holes+0xc4>
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	791b      	ldrb	r3, [r3, #4]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d120      	bne.n	80172c4 <plug_holes+0xc4>
 8017282:	4b2b      	ldr	r3, [pc, #172]	; (8017330 <plug_holes+0x130>)
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	68fa      	ldr	r2, [r7, #12]
 8017288:	429a      	cmp	r2, r3
 801728a:	d01b      	beq.n	80172c4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801728c:	4b2c      	ldr	r3, [pc, #176]	; (8017340 <plug_holes+0x140>)
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	68fa      	ldr	r2, [r7, #12]
 8017292:	429a      	cmp	r2, r3
 8017294:	d102      	bne.n	801729c <plug_holes+0x9c>
      lfree = mem;
 8017296:	4a2a      	ldr	r2, [pc, #168]	; (8017340 <plug_holes+0x140>)
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	881a      	ldrh	r2, [r3, #0]
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	881b      	ldrh	r3, [r3, #0]
 80172a8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80172ac:	d00a      	beq.n	80172c4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	881b      	ldrh	r3, [r3, #0]
 80172b2:	4618      	mov	r0, r3
 80172b4:	f7ff ff80 	bl	80171b8 <ptr_to_mem>
 80172b8:	4604      	mov	r4, r0
 80172ba:	6878      	ldr	r0, [r7, #4]
 80172bc:	f7ff ff8e 	bl	80171dc <mem_to_ptr>
 80172c0:	4603      	mov	r3, r0
 80172c2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	885b      	ldrh	r3, [r3, #2]
 80172c8:	4618      	mov	r0, r3
 80172ca:	f7ff ff75 	bl	80171b8 <ptr_to_mem>
 80172ce:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80172d0:	68ba      	ldr	r2, [r7, #8]
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	429a      	cmp	r2, r3
 80172d6:	d01f      	beq.n	8017318 <plug_holes+0x118>
 80172d8:	68bb      	ldr	r3, [r7, #8]
 80172da:	791b      	ldrb	r3, [r3, #4]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d11b      	bne.n	8017318 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80172e0:	4b17      	ldr	r3, [pc, #92]	; (8017340 <plug_holes+0x140>)
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	687a      	ldr	r2, [r7, #4]
 80172e6:	429a      	cmp	r2, r3
 80172e8:	d102      	bne.n	80172f0 <plug_holes+0xf0>
      lfree = pmem;
 80172ea:	4a15      	ldr	r2, [pc, #84]	; (8017340 <plug_holes+0x140>)
 80172ec:	68bb      	ldr	r3, [r7, #8]
 80172ee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	881a      	ldrh	r2, [r3, #0]
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	881b      	ldrh	r3, [r3, #0]
 80172fc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017300:	d00a      	beq.n	8017318 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	881b      	ldrh	r3, [r3, #0]
 8017306:	4618      	mov	r0, r3
 8017308:	f7ff ff56 	bl	80171b8 <ptr_to_mem>
 801730c:	4604      	mov	r4, r0
 801730e:	68b8      	ldr	r0, [r7, #8]
 8017310:	f7ff ff64 	bl	80171dc <mem_to_ptr>
 8017314:	4603      	mov	r3, r0
 8017316:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8017318:	bf00      	nop
 801731a:	3714      	adds	r7, #20
 801731c:	46bd      	mov	sp, r7
 801731e:	bd90      	pop	{r4, r7, pc}
 8017320:	20008eb0 	.word	0x20008eb0
 8017324:	08025e48 	.word	0x08025e48
 8017328:	08025e78 	.word	0x08025e78
 801732c:	08025e90 	.word	0x08025e90
 8017330:	20008eb4 	.word	0x20008eb4
 8017334:	08025eb8 	.word	0x08025eb8
 8017338:	08025ed4 	.word	0x08025ed4
 801733c:	08025ef0 	.word	0x08025ef0
 8017340:	20008ebc 	.word	0x20008ebc

08017344 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8017344:	b580      	push	{r7, lr}
 8017346:	b082      	sub	sp, #8
 8017348:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801734a:	4b1f      	ldr	r3, [pc, #124]	; (80173c8 <mem_init+0x84>)
 801734c:	3303      	adds	r3, #3
 801734e:	f023 0303 	bic.w	r3, r3, #3
 8017352:	461a      	mov	r2, r3
 8017354:	4b1d      	ldr	r3, [pc, #116]	; (80173cc <mem_init+0x88>)
 8017356:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8017358:	4b1c      	ldr	r3, [pc, #112]	; (80173cc <mem_init+0x88>)
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017364:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	2200      	movs	r2, #0
 801736a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	2200      	movs	r2, #0
 8017370:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8017372:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8017376:	f7ff ff1f 	bl	80171b8 <ptr_to_mem>
 801737a:	4603      	mov	r3, r0
 801737c:	4a14      	ldr	r2, [pc, #80]	; (80173d0 <mem_init+0x8c>)
 801737e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8017380:	4b13      	ldr	r3, [pc, #76]	; (80173d0 <mem_init+0x8c>)
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	2201      	movs	r2, #1
 8017386:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8017388:	4b11      	ldr	r3, [pc, #68]	; (80173d0 <mem_init+0x8c>)
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017390:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8017392:	4b0f      	ldr	r3, [pc, #60]	; (80173d0 <mem_init+0x8c>)
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 801739a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801739c:	4b0b      	ldr	r3, [pc, #44]	; (80173cc <mem_init+0x88>)
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	4a0c      	ldr	r2, [pc, #48]	; (80173d4 <mem_init+0x90>)
 80173a2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80173a4:	480c      	ldr	r0, [pc, #48]	; (80173d8 <mem_init+0x94>)
 80173a6:	f00b f9f9 	bl	802279c <sys_mutex_new>
 80173aa:	4603      	mov	r3, r0
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d006      	beq.n	80173be <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80173b0:	4b0a      	ldr	r3, [pc, #40]	; (80173dc <mem_init+0x98>)
 80173b2:	f240 221f 	movw	r2, #543	; 0x21f
 80173b6:	490a      	ldr	r1, [pc, #40]	; (80173e0 <mem_init+0x9c>)
 80173b8:	480a      	ldr	r0, [pc, #40]	; (80173e4 <mem_init+0xa0>)
 80173ba:	f00c fce1 	bl	8023d80 <iprintf>
  }
}
 80173be:	bf00      	nop
 80173c0:	3708      	adds	r7, #8
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bd80      	pop	{r7, pc}
 80173c6:	bf00      	nop
 80173c8:	2000669c 	.word	0x2000669c
 80173cc:	20008eb0 	.word	0x20008eb0
 80173d0:	20008eb4 	.word	0x20008eb4
 80173d4:	20008ebc 	.word	0x20008ebc
 80173d8:	20008eb8 	.word	0x20008eb8
 80173dc:	08025e48 	.word	0x08025e48
 80173e0:	08025f1c 	.word	0x08025f1c
 80173e4:	08025e90 	.word	0x08025e90

080173e8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b086      	sub	sp, #24
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80173f0:	6878      	ldr	r0, [r7, #4]
 80173f2:	f7ff fef3 	bl	80171dc <mem_to_ptr>
 80173f6:	4603      	mov	r3, r0
 80173f8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	881b      	ldrh	r3, [r3, #0]
 80173fe:	4618      	mov	r0, r3
 8017400:	f7ff feda 	bl	80171b8 <ptr_to_mem>
 8017404:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	885b      	ldrh	r3, [r3, #2]
 801740a:	4618      	mov	r0, r3
 801740c:	f7ff fed4 	bl	80171b8 <ptr_to_mem>
 8017410:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	881b      	ldrh	r3, [r3, #0]
 8017416:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801741a:	d818      	bhi.n	801744e <mem_link_valid+0x66>
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	885b      	ldrh	r3, [r3, #2]
 8017420:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017424:	d813      	bhi.n	801744e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801742a:	8afa      	ldrh	r2, [r7, #22]
 801742c:	429a      	cmp	r2, r3
 801742e:	d004      	beq.n	801743a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	881b      	ldrh	r3, [r3, #0]
 8017434:	8afa      	ldrh	r2, [r7, #22]
 8017436:	429a      	cmp	r2, r3
 8017438:	d109      	bne.n	801744e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801743a:	4b08      	ldr	r3, [pc, #32]	; (801745c <mem_link_valid+0x74>)
 801743c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801743e:	693a      	ldr	r2, [r7, #16]
 8017440:	429a      	cmp	r2, r3
 8017442:	d006      	beq.n	8017452 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017444:	693b      	ldr	r3, [r7, #16]
 8017446:	885b      	ldrh	r3, [r3, #2]
 8017448:	8afa      	ldrh	r2, [r7, #22]
 801744a:	429a      	cmp	r2, r3
 801744c:	d001      	beq.n	8017452 <mem_link_valid+0x6a>
    return 0;
 801744e:	2300      	movs	r3, #0
 8017450:	e000      	b.n	8017454 <mem_link_valid+0x6c>
  }
  return 1;
 8017452:	2301      	movs	r3, #1
}
 8017454:	4618      	mov	r0, r3
 8017456:	3718      	adds	r7, #24
 8017458:	46bd      	mov	sp, r7
 801745a:	bd80      	pop	{r7, pc}
 801745c:	20008eb4 	.word	0x20008eb4

08017460 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8017460:	b580      	push	{r7, lr}
 8017462:	b088      	sub	sp, #32
 8017464:	af00      	add	r7, sp, #0
 8017466:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d070      	beq.n	8017550 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	f003 0303 	and.w	r3, r3, #3
 8017474:	2b00      	cmp	r3, #0
 8017476:	d00d      	beq.n	8017494 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8017478:	4b37      	ldr	r3, [pc, #220]	; (8017558 <mem_free+0xf8>)
 801747a:	f240 2273 	movw	r2, #627	; 0x273
 801747e:	4937      	ldr	r1, [pc, #220]	; (801755c <mem_free+0xfc>)
 8017480:	4837      	ldr	r0, [pc, #220]	; (8017560 <mem_free+0x100>)
 8017482:	f00c fc7d 	bl	8023d80 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017486:	f00b f9e7 	bl	8022858 <sys_arch_protect>
 801748a:	60f8      	str	r0, [r7, #12]
 801748c:	68f8      	ldr	r0, [r7, #12]
 801748e:	f00b f9f1 	bl	8022874 <sys_arch_unprotect>
    return;
 8017492:	e05e      	b.n	8017552 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	3b08      	subs	r3, #8
 8017498:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801749a:	4b32      	ldr	r3, [pc, #200]	; (8017564 <mem_free+0x104>)
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	69fa      	ldr	r2, [r7, #28]
 80174a0:	429a      	cmp	r2, r3
 80174a2:	d306      	bcc.n	80174b2 <mem_free+0x52>
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	f103 020c 	add.w	r2, r3, #12
 80174aa:	4b2f      	ldr	r3, [pc, #188]	; (8017568 <mem_free+0x108>)
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	429a      	cmp	r2, r3
 80174b0:	d90d      	bls.n	80174ce <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80174b2:	4b29      	ldr	r3, [pc, #164]	; (8017558 <mem_free+0xf8>)
 80174b4:	f240 227f 	movw	r2, #639	; 0x27f
 80174b8:	492c      	ldr	r1, [pc, #176]	; (801756c <mem_free+0x10c>)
 80174ba:	4829      	ldr	r0, [pc, #164]	; (8017560 <mem_free+0x100>)
 80174bc:	f00c fc60 	bl	8023d80 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80174c0:	f00b f9ca 	bl	8022858 <sys_arch_protect>
 80174c4:	6138      	str	r0, [r7, #16]
 80174c6:	6938      	ldr	r0, [r7, #16]
 80174c8:	f00b f9d4 	bl	8022874 <sys_arch_unprotect>
    return;
 80174cc:	e041      	b.n	8017552 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80174ce:	4828      	ldr	r0, [pc, #160]	; (8017570 <mem_free+0x110>)
 80174d0:	f00b f980 	bl	80227d4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80174d4:	69fb      	ldr	r3, [r7, #28]
 80174d6:	791b      	ldrb	r3, [r3, #4]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d110      	bne.n	80174fe <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80174dc:	4b1e      	ldr	r3, [pc, #120]	; (8017558 <mem_free+0xf8>)
 80174de:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80174e2:	4924      	ldr	r1, [pc, #144]	; (8017574 <mem_free+0x114>)
 80174e4:	481e      	ldr	r0, [pc, #120]	; (8017560 <mem_free+0x100>)
 80174e6:	f00c fc4b 	bl	8023d80 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80174ea:	4821      	ldr	r0, [pc, #132]	; (8017570 <mem_free+0x110>)
 80174ec:	f00b f981 	bl	80227f2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80174f0:	f00b f9b2 	bl	8022858 <sys_arch_protect>
 80174f4:	6178      	str	r0, [r7, #20]
 80174f6:	6978      	ldr	r0, [r7, #20]
 80174f8:	f00b f9bc 	bl	8022874 <sys_arch_unprotect>
    return;
 80174fc:	e029      	b.n	8017552 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80174fe:	69f8      	ldr	r0, [r7, #28]
 8017500:	f7ff ff72 	bl	80173e8 <mem_link_valid>
 8017504:	4603      	mov	r3, r0
 8017506:	2b00      	cmp	r3, #0
 8017508:	d110      	bne.n	801752c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801750a:	4b13      	ldr	r3, [pc, #76]	; (8017558 <mem_free+0xf8>)
 801750c:	f240 2295 	movw	r2, #661	; 0x295
 8017510:	4919      	ldr	r1, [pc, #100]	; (8017578 <mem_free+0x118>)
 8017512:	4813      	ldr	r0, [pc, #76]	; (8017560 <mem_free+0x100>)
 8017514:	f00c fc34 	bl	8023d80 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8017518:	4815      	ldr	r0, [pc, #84]	; (8017570 <mem_free+0x110>)
 801751a:	f00b f96a 	bl	80227f2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801751e:	f00b f99b 	bl	8022858 <sys_arch_protect>
 8017522:	61b8      	str	r0, [r7, #24]
 8017524:	69b8      	ldr	r0, [r7, #24]
 8017526:	f00b f9a5 	bl	8022874 <sys_arch_unprotect>
    return;
 801752a:	e012      	b.n	8017552 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801752c:	69fb      	ldr	r3, [r7, #28]
 801752e:	2200      	movs	r2, #0
 8017530:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8017532:	4b12      	ldr	r3, [pc, #72]	; (801757c <mem_free+0x11c>)
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	69fa      	ldr	r2, [r7, #28]
 8017538:	429a      	cmp	r2, r3
 801753a:	d202      	bcs.n	8017542 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801753c:	4a0f      	ldr	r2, [pc, #60]	; (801757c <mem_free+0x11c>)
 801753e:	69fb      	ldr	r3, [r7, #28]
 8017540:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8017542:	69f8      	ldr	r0, [r7, #28]
 8017544:	f7ff fe5c 	bl	8017200 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017548:	4809      	ldr	r0, [pc, #36]	; (8017570 <mem_free+0x110>)
 801754a:	f00b f952 	bl	80227f2 <sys_mutex_unlock>
 801754e:	e000      	b.n	8017552 <mem_free+0xf2>
    return;
 8017550:	bf00      	nop
}
 8017552:	3720      	adds	r7, #32
 8017554:	46bd      	mov	sp, r7
 8017556:	bd80      	pop	{r7, pc}
 8017558:	08025e48 	.word	0x08025e48
 801755c:	08025f38 	.word	0x08025f38
 8017560:	08025e90 	.word	0x08025e90
 8017564:	20008eb0 	.word	0x20008eb0
 8017568:	20008eb4 	.word	0x20008eb4
 801756c:	08025f5c 	.word	0x08025f5c
 8017570:	20008eb8 	.word	0x20008eb8
 8017574:	08025f78 	.word	0x08025f78
 8017578:	08025fa0 	.word	0x08025fa0
 801757c:	20008ebc 	.word	0x20008ebc

08017580 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8017580:	b580      	push	{r7, lr}
 8017582:	b088      	sub	sp, #32
 8017584:	af00      	add	r7, sp, #0
 8017586:	6078      	str	r0, [r7, #4]
 8017588:	460b      	mov	r3, r1
 801758a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801758c:	887b      	ldrh	r3, [r7, #2]
 801758e:	3303      	adds	r3, #3
 8017590:	b29b      	uxth	r3, r3
 8017592:	f023 0303 	bic.w	r3, r3, #3
 8017596:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8017598:	8bfb      	ldrh	r3, [r7, #30]
 801759a:	2b0b      	cmp	r3, #11
 801759c:	d801      	bhi.n	80175a2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801759e:	230c      	movs	r3, #12
 80175a0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80175a2:	8bfb      	ldrh	r3, [r7, #30]
 80175a4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80175a8:	d803      	bhi.n	80175b2 <mem_trim+0x32>
 80175aa:	8bfa      	ldrh	r2, [r7, #30]
 80175ac:	887b      	ldrh	r3, [r7, #2]
 80175ae:	429a      	cmp	r2, r3
 80175b0:	d201      	bcs.n	80175b6 <mem_trim+0x36>
    return NULL;
 80175b2:	2300      	movs	r3, #0
 80175b4:	e0d8      	b.n	8017768 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80175b6:	4b6e      	ldr	r3, [pc, #440]	; (8017770 <mem_trim+0x1f0>)
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	687a      	ldr	r2, [r7, #4]
 80175bc:	429a      	cmp	r2, r3
 80175be:	d304      	bcc.n	80175ca <mem_trim+0x4a>
 80175c0:	4b6c      	ldr	r3, [pc, #432]	; (8017774 <mem_trim+0x1f4>)
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	687a      	ldr	r2, [r7, #4]
 80175c6:	429a      	cmp	r2, r3
 80175c8:	d306      	bcc.n	80175d8 <mem_trim+0x58>
 80175ca:	4b6b      	ldr	r3, [pc, #428]	; (8017778 <mem_trim+0x1f8>)
 80175cc:	f240 22d1 	movw	r2, #721	; 0x2d1
 80175d0:	496a      	ldr	r1, [pc, #424]	; (801777c <mem_trim+0x1fc>)
 80175d2:	486b      	ldr	r0, [pc, #428]	; (8017780 <mem_trim+0x200>)
 80175d4:	f00c fbd4 	bl	8023d80 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80175d8:	4b65      	ldr	r3, [pc, #404]	; (8017770 <mem_trim+0x1f0>)
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	687a      	ldr	r2, [r7, #4]
 80175de:	429a      	cmp	r2, r3
 80175e0:	d304      	bcc.n	80175ec <mem_trim+0x6c>
 80175e2:	4b64      	ldr	r3, [pc, #400]	; (8017774 <mem_trim+0x1f4>)
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	687a      	ldr	r2, [r7, #4]
 80175e8:	429a      	cmp	r2, r3
 80175ea:	d307      	bcc.n	80175fc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80175ec:	f00b f934 	bl	8022858 <sys_arch_protect>
 80175f0:	60b8      	str	r0, [r7, #8]
 80175f2:	68b8      	ldr	r0, [r7, #8]
 80175f4:	f00b f93e 	bl	8022874 <sys_arch_unprotect>
    return rmem;
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	e0b5      	b.n	8017768 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	3b08      	subs	r3, #8
 8017600:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8017602:	69b8      	ldr	r0, [r7, #24]
 8017604:	f7ff fdea 	bl	80171dc <mem_to_ptr>
 8017608:	4603      	mov	r3, r0
 801760a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801760c:	69bb      	ldr	r3, [r7, #24]
 801760e:	881a      	ldrh	r2, [r3, #0]
 8017610:	8afb      	ldrh	r3, [r7, #22]
 8017612:	1ad3      	subs	r3, r2, r3
 8017614:	b29b      	uxth	r3, r3
 8017616:	3b08      	subs	r3, #8
 8017618:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801761a:	8bfa      	ldrh	r2, [r7, #30]
 801761c:	8abb      	ldrh	r3, [r7, #20]
 801761e:	429a      	cmp	r2, r3
 8017620:	d906      	bls.n	8017630 <mem_trim+0xb0>
 8017622:	4b55      	ldr	r3, [pc, #340]	; (8017778 <mem_trim+0x1f8>)
 8017624:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8017628:	4956      	ldr	r1, [pc, #344]	; (8017784 <mem_trim+0x204>)
 801762a:	4855      	ldr	r0, [pc, #340]	; (8017780 <mem_trim+0x200>)
 801762c:	f00c fba8 	bl	8023d80 <iprintf>
  if (newsize > size) {
 8017630:	8bfa      	ldrh	r2, [r7, #30]
 8017632:	8abb      	ldrh	r3, [r7, #20]
 8017634:	429a      	cmp	r2, r3
 8017636:	d901      	bls.n	801763c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8017638:	2300      	movs	r3, #0
 801763a:	e095      	b.n	8017768 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801763c:	8bfa      	ldrh	r2, [r7, #30]
 801763e:	8abb      	ldrh	r3, [r7, #20]
 8017640:	429a      	cmp	r2, r3
 8017642:	d101      	bne.n	8017648 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	e08f      	b.n	8017768 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017648:	484f      	ldr	r0, [pc, #316]	; (8017788 <mem_trim+0x208>)
 801764a:	f00b f8c3 	bl	80227d4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801764e:	69bb      	ldr	r3, [r7, #24]
 8017650:	881b      	ldrh	r3, [r3, #0]
 8017652:	4618      	mov	r0, r3
 8017654:	f7ff fdb0 	bl	80171b8 <ptr_to_mem>
 8017658:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801765a:	693b      	ldr	r3, [r7, #16]
 801765c:	791b      	ldrb	r3, [r3, #4]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d13f      	bne.n	80176e2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017662:	69bb      	ldr	r3, [r7, #24]
 8017664:	881b      	ldrh	r3, [r3, #0]
 8017666:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801766a:	d106      	bne.n	801767a <mem_trim+0xfa>
 801766c:	4b42      	ldr	r3, [pc, #264]	; (8017778 <mem_trim+0x1f8>)
 801766e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8017672:	4946      	ldr	r1, [pc, #280]	; (801778c <mem_trim+0x20c>)
 8017674:	4842      	ldr	r0, [pc, #264]	; (8017780 <mem_trim+0x200>)
 8017676:	f00c fb83 	bl	8023d80 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801767a:	693b      	ldr	r3, [r7, #16]
 801767c:	881b      	ldrh	r3, [r3, #0]
 801767e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017680:	8afa      	ldrh	r2, [r7, #22]
 8017682:	8bfb      	ldrh	r3, [r7, #30]
 8017684:	4413      	add	r3, r2
 8017686:	b29b      	uxth	r3, r3
 8017688:	3308      	adds	r3, #8
 801768a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801768c:	4b40      	ldr	r3, [pc, #256]	; (8017790 <mem_trim+0x210>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	693a      	ldr	r2, [r7, #16]
 8017692:	429a      	cmp	r2, r3
 8017694:	d106      	bne.n	80176a4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8017696:	89fb      	ldrh	r3, [r7, #14]
 8017698:	4618      	mov	r0, r3
 801769a:	f7ff fd8d 	bl	80171b8 <ptr_to_mem>
 801769e:	4603      	mov	r3, r0
 80176a0:	4a3b      	ldr	r2, [pc, #236]	; (8017790 <mem_trim+0x210>)
 80176a2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80176a4:	89fb      	ldrh	r3, [r7, #14]
 80176a6:	4618      	mov	r0, r3
 80176a8:	f7ff fd86 	bl	80171b8 <ptr_to_mem>
 80176ac:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80176ae:	693b      	ldr	r3, [r7, #16]
 80176b0:	2200      	movs	r2, #0
 80176b2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80176b4:	693b      	ldr	r3, [r7, #16]
 80176b6:	89ba      	ldrh	r2, [r7, #12]
 80176b8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80176ba:	693b      	ldr	r3, [r7, #16]
 80176bc:	8afa      	ldrh	r2, [r7, #22]
 80176be:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80176c0:	69bb      	ldr	r3, [r7, #24]
 80176c2:	89fa      	ldrh	r2, [r7, #14]
 80176c4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80176c6:	693b      	ldr	r3, [r7, #16]
 80176c8:	881b      	ldrh	r3, [r3, #0]
 80176ca:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80176ce:	d047      	beq.n	8017760 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80176d0:	693b      	ldr	r3, [r7, #16]
 80176d2:	881b      	ldrh	r3, [r3, #0]
 80176d4:	4618      	mov	r0, r3
 80176d6:	f7ff fd6f 	bl	80171b8 <ptr_to_mem>
 80176da:	4602      	mov	r2, r0
 80176dc:	89fb      	ldrh	r3, [r7, #14]
 80176de:	8053      	strh	r3, [r2, #2]
 80176e0:	e03e      	b.n	8017760 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80176e2:	8bfb      	ldrh	r3, [r7, #30]
 80176e4:	f103 0214 	add.w	r2, r3, #20
 80176e8:	8abb      	ldrh	r3, [r7, #20]
 80176ea:	429a      	cmp	r2, r3
 80176ec:	d838      	bhi.n	8017760 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80176ee:	8afa      	ldrh	r2, [r7, #22]
 80176f0:	8bfb      	ldrh	r3, [r7, #30]
 80176f2:	4413      	add	r3, r2
 80176f4:	b29b      	uxth	r3, r3
 80176f6:	3308      	adds	r3, #8
 80176f8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80176fa:	69bb      	ldr	r3, [r7, #24]
 80176fc:	881b      	ldrh	r3, [r3, #0]
 80176fe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017702:	d106      	bne.n	8017712 <mem_trim+0x192>
 8017704:	4b1c      	ldr	r3, [pc, #112]	; (8017778 <mem_trim+0x1f8>)
 8017706:	f240 3216 	movw	r2, #790	; 0x316
 801770a:	4920      	ldr	r1, [pc, #128]	; (801778c <mem_trim+0x20c>)
 801770c:	481c      	ldr	r0, [pc, #112]	; (8017780 <mem_trim+0x200>)
 801770e:	f00c fb37 	bl	8023d80 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8017712:	89fb      	ldrh	r3, [r7, #14]
 8017714:	4618      	mov	r0, r3
 8017716:	f7ff fd4f 	bl	80171b8 <ptr_to_mem>
 801771a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801771c:	4b1c      	ldr	r3, [pc, #112]	; (8017790 <mem_trim+0x210>)
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	693a      	ldr	r2, [r7, #16]
 8017722:	429a      	cmp	r2, r3
 8017724:	d202      	bcs.n	801772c <mem_trim+0x1ac>
      lfree = mem2;
 8017726:	4a1a      	ldr	r2, [pc, #104]	; (8017790 <mem_trim+0x210>)
 8017728:	693b      	ldr	r3, [r7, #16]
 801772a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801772c:	693b      	ldr	r3, [r7, #16]
 801772e:	2200      	movs	r2, #0
 8017730:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8017732:	69bb      	ldr	r3, [r7, #24]
 8017734:	881a      	ldrh	r2, [r3, #0]
 8017736:	693b      	ldr	r3, [r7, #16]
 8017738:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801773a:	693b      	ldr	r3, [r7, #16]
 801773c:	8afa      	ldrh	r2, [r7, #22]
 801773e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8017740:	69bb      	ldr	r3, [r7, #24]
 8017742:	89fa      	ldrh	r2, [r7, #14]
 8017744:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017746:	693b      	ldr	r3, [r7, #16]
 8017748:	881b      	ldrh	r3, [r3, #0]
 801774a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801774e:	d007      	beq.n	8017760 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017750:	693b      	ldr	r3, [r7, #16]
 8017752:	881b      	ldrh	r3, [r3, #0]
 8017754:	4618      	mov	r0, r3
 8017756:	f7ff fd2f 	bl	80171b8 <ptr_to_mem>
 801775a:	4602      	mov	r2, r0
 801775c:	89fb      	ldrh	r3, [r7, #14]
 801775e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017760:	4809      	ldr	r0, [pc, #36]	; (8017788 <mem_trim+0x208>)
 8017762:	f00b f846 	bl	80227f2 <sys_mutex_unlock>
  return rmem;
 8017766:	687b      	ldr	r3, [r7, #4]
}
 8017768:	4618      	mov	r0, r3
 801776a:	3720      	adds	r7, #32
 801776c:	46bd      	mov	sp, r7
 801776e:	bd80      	pop	{r7, pc}
 8017770:	20008eb0 	.word	0x20008eb0
 8017774:	20008eb4 	.word	0x20008eb4
 8017778:	08025e48 	.word	0x08025e48
 801777c:	08025fd4 	.word	0x08025fd4
 8017780:	08025e90 	.word	0x08025e90
 8017784:	08025fec 	.word	0x08025fec
 8017788:	20008eb8 	.word	0x20008eb8
 801778c:	0802600c 	.word	0x0802600c
 8017790:	20008ebc 	.word	0x20008ebc

08017794 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8017794:	b580      	push	{r7, lr}
 8017796:	b088      	sub	sp, #32
 8017798:	af00      	add	r7, sp, #0
 801779a:	4603      	mov	r3, r0
 801779c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801779e:	88fb      	ldrh	r3, [r7, #6]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d101      	bne.n	80177a8 <mem_malloc+0x14>
    return NULL;
 80177a4:	2300      	movs	r3, #0
 80177a6:	e0e2      	b.n	801796e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80177a8:	88fb      	ldrh	r3, [r7, #6]
 80177aa:	3303      	adds	r3, #3
 80177ac:	b29b      	uxth	r3, r3
 80177ae:	f023 0303 	bic.w	r3, r3, #3
 80177b2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80177b4:	8bbb      	ldrh	r3, [r7, #28]
 80177b6:	2b0b      	cmp	r3, #11
 80177b8:	d801      	bhi.n	80177be <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80177ba:	230c      	movs	r3, #12
 80177bc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80177be:	8bbb      	ldrh	r3, [r7, #28]
 80177c0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80177c4:	d803      	bhi.n	80177ce <mem_malloc+0x3a>
 80177c6:	8bba      	ldrh	r2, [r7, #28]
 80177c8:	88fb      	ldrh	r3, [r7, #6]
 80177ca:	429a      	cmp	r2, r3
 80177cc:	d201      	bcs.n	80177d2 <mem_malloc+0x3e>
    return NULL;
 80177ce:	2300      	movs	r3, #0
 80177d0:	e0cd      	b.n	801796e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80177d2:	4869      	ldr	r0, [pc, #420]	; (8017978 <mem_malloc+0x1e4>)
 80177d4:	f00a fffe 	bl	80227d4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80177d8:	4b68      	ldr	r3, [pc, #416]	; (801797c <mem_malloc+0x1e8>)
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	4618      	mov	r0, r3
 80177de:	f7ff fcfd 	bl	80171dc <mem_to_ptr>
 80177e2:	4603      	mov	r3, r0
 80177e4:	83fb      	strh	r3, [r7, #30]
 80177e6:	e0b7      	b.n	8017958 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80177e8:	8bfb      	ldrh	r3, [r7, #30]
 80177ea:	4618      	mov	r0, r3
 80177ec:	f7ff fce4 	bl	80171b8 <ptr_to_mem>
 80177f0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80177f2:	697b      	ldr	r3, [r7, #20]
 80177f4:	791b      	ldrb	r3, [r3, #4]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	f040 80a7 	bne.w	801794a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80177fc:	697b      	ldr	r3, [r7, #20]
 80177fe:	881b      	ldrh	r3, [r3, #0]
 8017800:	461a      	mov	r2, r3
 8017802:	8bfb      	ldrh	r3, [r7, #30]
 8017804:	1ad3      	subs	r3, r2, r3
 8017806:	f1a3 0208 	sub.w	r2, r3, #8
 801780a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801780c:	429a      	cmp	r2, r3
 801780e:	f0c0 809c 	bcc.w	801794a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017812:	697b      	ldr	r3, [r7, #20]
 8017814:	881b      	ldrh	r3, [r3, #0]
 8017816:	461a      	mov	r2, r3
 8017818:	8bfb      	ldrh	r3, [r7, #30]
 801781a:	1ad3      	subs	r3, r2, r3
 801781c:	f1a3 0208 	sub.w	r2, r3, #8
 8017820:	8bbb      	ldrh	r3, [r7, #28]
 8017822:	3314      	adds	r3, #20
 8017824:	429a      	cmp	r2, r3
 8017826:	d333      	bcc.n	8017890 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8017828:	8bfa      	ldrh	r2, [r7, #30]
 801782a:	8bbb      	ldrh	r3, [r7, #28]
 801782c:	4413      	add	r3, r2
 801782e:	b29b      	uxth	r3, r3
 8017830:	3308      	adds	r3, #8
 8017832:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8017834:	8a7b      	ldrh	r3, [r7, #18]
 8017836:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801783a:	d106      	bne.n	801784a <mem_malloc+0xb6>
 801783c:	4b50      	ldr	r3, [pc, #320]	; (8017980 <mem_malloc+0x1ec>)
 801783e:	f240 3287 	movw	r2, #903	; 0x387
 8017842:	4950      	ldr	r1, [pc, #320]	; (8017984 <mem_malloc+0x1f0>)
 8017844:	4850      	ldr	r0, [pc, #320]	; (8017988 <mem_malloc+0x1f4>)
 8017846:	f00c fa9b 	bl	8023d80 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801784a:	8a7b      	ldrh	r3, [r7, #18]
 801784c:	4618      	mov	r0, r3
 801784e:	f7ff fcb3 	bl	80171b8 <ptr_to_mem>
 8017852:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	2200      	movs	r2, #0
 8017858:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801785a:	697b      	ldr	r3, [r7, #20]
 801785c:	881a      	ldrh	r2, [r3, #0]
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	8bfa      	ldrh	r2, [r7, #30]
 8017866:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8017868:	697b      	ldr	r3, [r7, #20]
 801786a:	8a7a      	ldrh	r2, [r7, #18]
 801786c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801786e:	697b      	ldr	r3, [r7, #20]
 8017870:	2201      	movs	r2, #1
 8017872:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	881b      	ldrh	r3, [r3, #0]
 8017878:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801787c:	d00b      	beq.n	8017896 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	881b      	ldrh	r3, [r3, #0]
 8017882:	4618      	mov	r0, r3
 8017884:	f7ff fc98 	bl	80171b8 <ptr_to_mem>
 8017888:	4602      	mov	r2, r0
 801788a:	8a7b      	ldrh	r3, [r7, #18]
 801788c:	8053      	strh	r3, [r2, #2]
 801788e:	e002      	b.n	8017896 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8017890:	697b      	ldr	r3, [r7, #20]
 8017892:	2201      	movs	r2, #1
 8017894:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8017896:	4b39      	ldr	r3, [pc, #228]	; (801797c <mem_malloc+0x1e8>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	697a      	ldr	r2, [r7, #20]
 801789c:	429a      	cmp	r2, r3
 801789e:	d127      	bne.n	80178f0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80178a0:	4b36      	ldr	r3, [pc, #216]	; (801797c <mem_malloc+0x1e8>)
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80178a6:	e005      	b.n	80178b4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80178a8:	69bb      	ldr	r3, [r7, #24]
 80178aa:	881b      	ldrh	r3, [r3, #0]
 80178ac:	4618      	mov	r0, r3
 80178ae:	f7ff fc83 	bl	80171b8 <ptr_to_mem>
 80178b2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80178b4:	69bb      	ldr	r3, [r7, #24]
 80178b6:	791b      	ldrb	r3, [r3, #4]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d004      	beq.n	80178c6 <mem_malloc+0x132>
 80178bc:	4b33      	ldr	r3, [pc, #204]	; (801798c <mem_malloc+0x1f8>)
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	69ba      	ldr	r2, [r7, #24]
 80178c2:	429a      	cmp	r2, r3
 80178c4:	d1f0      	bne.n	80178a8 <mem_malloc+0x114>
          }
          lfree = cur;
 80178c6:	4a2d      	ldr	r2, [pc, #180]	; (801797c <mem_malloc+0x1e8>)
 80178c8:	69bb      	ldr	r3, [r7, #24]
 80178ca:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80178cc:	4b2b      	ldr	r3, [pc, #172]	; (801797c <mem_malloc+0x1e8>)
 80178ce:	681a      	ldr	r2, [r3, #0]
 80178d0:	4b2e      	ldr	r3, [pc, #184]	; (801798c <mem_malloc+0x1f8>)
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	429a      	cmp	r2, r3
 80178d6:	d00b      	beq.n	80178f0 <mem_malloc+0x15c>
 80178d8:	4b28      	ldr	r3, [pc, #160]	; (801797c <mem_malloc+0x1e8>)
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	791b      	ldrb	r3, [r3, #4]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d006      	beq.n	80178f0 <mem_malloc+0x15c>
 80178e2:	4b27      	ldr	r3, [pc, #156]	; (8017980 <mem_malloc+0x1ec>)
 80178e4:	f240 32b5 	movw	r2, #949	; 0x3b5
 80178e8:	4929      	ldr	r1, [pc, #164]	; (8017990 <mem_malloc+0x1fc>)
 80178ea:	4827      	ldr	r0, [pc, #156]	; (8017988 <mem_malloc+0x1f4>)
 80178ec:	f00c fa48 	bl	8023d80 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80178f0:	4821      	ldr	r0, [pc, #132]	; (8017978 <mem_malloc+0x1e4>)
 80178f2:	f00a ff7e 	bl	80227f2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80178f6:	8bba      	ldrh	r2, [r7, #28]
 80178f8:	697b      	ldr	r3, [r7, #20]
 80178fa:	4413      	add	r3, r2
 80178fc:	3308      	adds	r3, #8
 80178fe:	4a23      	ldr	r2, [pc, #140]	; (801798c <mem_malloc+0x1f8>)
 8017900:	6812      	ldr	r2, [r2, #0]
 8017902:	4293      	cmp	r3, r2
 8017904:	d906      	bls.n	8017914 <mem_malloc+0x180>
 8017906:	4b1e      	ldr	r3, [pc, #120]	; (8017980 <mem_malloc+0x1ec>)
 8017908:	f240 32b9 	movw	r2, #953	; 0x3b9
 801790c:	4921      	ldr	r1, [pc, #132]	; (8017994 <mem_malloc+0x200>)
 801790e:	481e      	ldr	r0, [pc, #120]	; (8017988 <mem_malloc+0x1f4>)
 8017910:	f00c fa36 	bl	8023d80 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017914:	697b      	ldr	r3, [r7, #20]
 8017916:	f003 0303 	and.w	r3, r3, #3
 801791a:	2b00      	cmp	r3, #0
 801791c:	d006      	beq.n	801792c <mem_malloc+0x198>
 801791e:	4b18      	ldr	r3, [pc, #96]	; (8017980 <mem_malloc+0x1ec>)
 8017920:	f240 32bb 	movw	r2, #955	; 0x3bb
 8017924:	491c      	ldr	r1, [pc, #112]	; (8017998 <mem_malloc+0x204>)
 8017926:	4818      	ldr	r0, [pc, #96]	; (8017988 <mem_malloc+0x1f4>)
 8017928:	f00c fa2a 	bl	8023d80 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801792c:	697b      	ldr	r3, [r7, #20]
 801792e:	f003 0303 	and.w	r3, r3, #3
 8017932:	2b00      	cmp	r3, #0
 8017934:	d006      	beq.n	8017944 <mem_malloc+0x1b0>
 8017936:	4b12      	ldr	r3, [pc, #72]	; (8017980 <mem_malloc+0x1ec>)
 8017938:	f240 32bd 	movw	r2, #957	; 0x3bd
 801793c:	4917      	ldr	r1, [pc, #92]	; (801799c <mem_malloc+0x208>)
 801793e:	4812      	ldr	r0, [pc, #72]	; (8017988 <mem_malloc+0x1f4>)
 8017940:	f00c fa1e 	bl	8023d80 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	3308      	adds	r3, #8
 8017948:	e011      	b.n	801796e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801794a:	8bfb      	ldrh	r3, [r7, #30]
 801794c:	4618      	mov	r0, r3
 801794e:	f7ff fc33 	bl	80171b8 <ptr_to_mem>
 8017952:	4603      	mov	r3, r0
 8017954:	881b      	ldrh	r3, [r3, #0]
 8017956:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017958:	8bfa      	ldrh	r2, [r7, #30]
 801795a:	8bbb      	ldrh	r3, [r7, #28]
 801795c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8017960:	429a      	cmp	r2, r3
 8017962:	f4ff af41 	bcc.w	80177e8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8017966:	4804      	ldr	r0, [pc, #16]	; (8017978 <mem_malloc+0x1e4>)
 8017968:	f00a ff43 	bl	80227f2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801796c:	2300      	movs	r3, #0
}
 801796e:	4618      	mov	r0, r3
 8017970:	3720      	adds	r7, #32
 8017972:	46bd      	mov	sp, r7
 8017974:	bd80      	pop	{r7, pc}
 8017976:	bf00      	nop
 8017978:	20008eb8 	.word	0x20008eb8
 801797c:	20008ebc 	.word	0x20008ebc
 8017980:	08025e48 	.word	0x08025e48
 8017984:	0802600c 	.word	0x0802600c
 8017988:	08025e90 	.word	0x08025e90
 801798c:	20008eb4 	.word	0x20008eb4
 8017990:	08026020 	.word	0x08026020
 8017994:	0802603c 	.word	0x0802603c
 8017998:	0802606c 	.word	0x0802606c
 801799c:	0802609c 	.word	0x0802609c

080179a0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80179a0:	b480      	push	{r7}
 80179a2:	b085      	sub	sp, #20
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	689b      	ldr	r3, [r3, #8]
 80179ac:	2200      	movs	r2, #0
 80179ae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	685b      	ldr	r3, [r3, #4]
 80179b4:	3303      	adds	r3, #3
 80179b6:	f023 0303 	bic.w	r3, r3, #3
 80179ba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80179bc:	2300      	movs	r3, #0
 80179be:	60fb      	str	r3, [r7, #12]
 80179c0:	e011      	b.n	80179e6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	689b      	ldr	r3, [r3, #8]
 80179c6:	681a      	ldr	r2, [r3, #0]
 80179c8:	68bb      	ldr	r3, [r7, #8]
 80179ca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	689b      	ldr	r3, [r3, #8]
 80179d0:	68ba      	ldr	r2, [r7, #8]
 80179d2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	881b      	ldrh	r3, [r3, #0]
 80179d8:	461a      	mov	r2, r3
 80179da:	68bb      	ldr	r3, [r7, #8]
 80179dc:	4413      	add	r3, r2
 80179de:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	3301      	adds	r3, #1
 80179e4:	60fb      	str	r3, [r7, #12]
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	885b      	ldrh	r3, [r3, #2]
 80179ea:	461a      	mov	r2, r3
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	4293      	cmp	r3, r2
 80179f0:	dbe7      	blt.n	80179c2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80179f2:	bf00      	nop
 80179f4:	bf00      	nop
 80179f6:	3714      	adds	r7, #20
 80179f8:	46bd      	mov	sp, r7
 80179fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fe:	4770      	bx	lr

08017a00 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8017a00:	b580      	push	{r7, lr}
 8017a02:	b082      	sub	sp, #8
 8017a04:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017a06:	2300      	movs	r3, #0
 8017a08:	80fb      	strh	r3, [r7, #6]
 8017a0a:	e009      	b.n	8017a20 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8017a0c:	88fb      	ldrh	r3, [r7, #6]
 8017a0e:	4a08      	ldr	r2, [pc, #32]	; (8017a30 <memp_init+0x30>)
 8017a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017a14:	4618      	mov	r0, r3
 8017a16:	f7ff ffc3 	bl	80179a0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017a1a:	88fb      	ldrh	r3, [r7, #6]
 8017a1c:	3301      	adds	r3, #1
 8017a1e:	80fb      	strh	r3, [r7, #6]
 8017a20:	88fb      	ldrh	r3, [r7, #6]
 8017a22:	2b0c      	cmp	r3, #12
 8017a24:	d9f2      	bls.n	8017a0c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8017a26:	bf00      	nop
 8017a28:	bf00      	nop
 8017a2a:	3708      	adds	r7, #8
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	bd80      	pop	{r7, pc}
 8017a30:	08028904 	.word	0x08028904

08017a34 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b084      	sub	sp, #16
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8017a3c:	f00a ff0c 	bl	8022858 <sys_arch_protect>
 8017a40:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	689b      	ldr	r3, [r3, #8]
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8017a4a:	68bb      	ldr	r3, [r7, #8]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d015      	beq.n	8017a7c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	689b      	ldr	r3, [r3, #8]
 8017a54:	68ba      	ldr	r2, [r7, #8]
 8017a56:	6812      	ldr	r2, [r2, #0]
 8017a58:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8017a5a:	68bb      	ldr	r3, [r7, #8]
 8017a5c:	f003 0303 	and.w	r3, r3, #3
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d006      	beq.n	8017a72 <do_memp_malloc_pool+0x3e>
 8017a64:	4b09      	ldr	r3, [pc, #36]	; (8017a8c <do_memp_malloc_pool+0x58>)
 8017a66:	f44f 728c 	mov.w	r2, #280	; 0x118
 8017a6a:	4909      	ldr	r1, [pc, #36]	; (8017a90 <do_memp_malloc_pool+0x5c>)
 8017a6c:	4809      	ldr	r0, [pc, #36]	; (8017a94 <do_memp_malloc_pool+0x60>)
 8017a6e:	f00c f987 	bl	8023d80 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017a72:	68f8      	ldr	r0, [r7, #12]
 8017a74:	f00a fefe 	bl	8022874 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8017a78:	68bb      	ldr	r3, [r7, #8]
 8017a7a:	e003      	b.n	8017a84 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017a7c:	68f8      	ldr	r0, [r7, #12]
 8017a7e:	f00a fef9 	bl	8022874 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8017a82:	2300      	movs	r3, #0
}
 8017a84:	4618      	mov	r0, r3
 8017a86:	3710      	adds	r7, #16
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	bd80      	pop	{r7, pc}
 8017a8c:	080260c0 	.word	0x080260c0
 8017a90:	080260f0 	.word	0x080260f0
 8017a94:	08026114 	.word	0x08026114

08017a98 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b082      	sub	sp, #8
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d106      	bne.n	8017ab4 <memp_malloc_pool+0x1c>
 8017aa6:	4b0a      	ldr	r3, [pc, #40]	; (8017ad0 <memp_malloc_pool+0x38>)
 8017aa8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8017aac:	4909      	ldr	r1, [pc, #36]	; (8017ad4 <memp_malloc_pool+0x3c>)
 8017aae:	480a      	ldr	r0, [pc, #40]	; (8017ad8 <memp_malloc_pool+0x40>)
 8017ab0:	f00c f966 	bl	8023d80 <iprintf>
  if (desc == NULL) {
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d101      	bne.n	8017abe <memp_malloc_pool+0x26>
    return NULL;
 8017aba:	2300      	movs	r3, #0
 8017abc:	e003      	b.n	8017ac6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8017abe:	6878      	ldr	r0, [r7, #4]
 8017ac0:	f7ff ffb8 	bl	8017a34 <do_memp_malloc_pool>
 8017ac4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	3708      	adds	r7, #8
 8017aca:	46bd      	mov	sp, r7
 8017acc:	bd80      	pop	{r7, pc}
 8017ace:	bf00      	nop
 8017ad0:	080260c0 	.word	0x080260c0
 8017ad4:	0802613c 	.word	0x0802613c
 8017ad8:	08026114 	.word	0x08026114

08017adc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b084      	sub	sp, #16
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	4603      	mov	r3, r0
 8017ae4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8017ae6:	79fb      	ldrb	r3, [r7, #7]
 8017ae8:	2b0c      	cmp	r3, #12
 8017aea:	d908      	bls.n	8017afe <memp_malloc+0x22>
 8017aec:	4b0a      	ldr	r3, [pc, #40]	; (8017b18 <memp_malloc+0x3c>)
 8017aee:	f240 1257 	movw	r2, #343	; 0x157
 8017af2:	490a      	ldr	r1, [pc, #40]	; (8017b1c <memp_malloc+0x40>)
 8017af4:	480a      	ldr	r0, [pc, #40]	; (8017b20 <memp_malloc+0x44>)
 8017af6:	f00c f943 	bl	8023d80 <iprintf>
 8017afa:	2300      	movs	r3, #0
 8017afc:	e008      	b.n	8017b10 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8017afe:	79fb      	ldrb	r3, [r7, #7]
 8017b00:	4a08      	ldr	r2, [pc, #32]	; (8017b24 <memp_malloc+0x48>)
 8017b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b06:	4618      	mov	r0, r3
 8017b08:	f7ff ff94 	bl	8017a34 <do_memp_malloc_pool>
 8017b0c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8017b0e:	68fb      	ldr	r3, [r7, #12]
}
 8017b10:	4618      	mov	r0, r3
 8017b12:	3710      	adds	r7, #16
 8017b14:	46bd      	mov	sp, r7
 8017b16:	bd80      	pop	{r7, pc}
 8017b18:	080260c0 	.word	0x080260c0
 8017b1c:	08026150 	.word	0x08026150
 8017b20:	08026114 	.word	0x08026114
 8017b24:	08028904 	.word	0x08028904

08017b28 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b084      	sub	sp, #16
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
 8017b30:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8017b32:	683b      	ldr	r3, [r7, #0]
 8017b34:	f003 0303 	and.w	r3, r3, #3
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d006      	beq.n	8017b4a <do_memp_free_pool+0x22>
 8017b3c:	4b0d      	ldr	r3, [pc, #52]	; (8017b74 <do_memp_free_pool+0x4c>)
 8017b3e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8017b42:	490d      	ldr	r1, [pc, #52]	; (8017b78 <do_memp_free_pool+0x50>)
 8017b44:	480d      	ldr	r0, [pc, #52]	; (8017b7c <do_memp_free_pool+0x54>)
 8017b46:	f00c f91b 	bl	8023d80 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8017b4a:	683b      	ldr	r3, [r7, #0]
 8017b4c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8017b4e:	f00a fe83 	bl	8022858 <sys_arch_protect>
 8017b52:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	689b      	ldr	r3, [r3, #8]
 8017b58:	681a      	ldr	r2, [r3, #0]
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	689b      	ldr	r3, [r3, #8]
 8017b62:	68fa      	ldr	r2, [r7, #12]
 8017b64:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8017b66:	68b8      	ldr	r0, [r7, #8]
 8017b68:	f00a fe84 	bl	8022874 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8017b6c:	bf00      	nop
 8017b6e:	3710      	adds	r7, #16
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}
 8017b74:	080260c0 	.word	0x080260c0
 8017b78:	08026170 	.word	0x08026170
 8017b7c:	08026114 	.word	0x08026114

08017b80 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b082      	sub	sp, #8
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]
 8017b88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d106      	bne.n	8017b9e <memp_free_pool+0x1e>
 8017b90:	4b0a      	ldr	r3, [pc, #40]	; (8017bbc <memp_free_pool+0x3c>)
 8017b92:	f240 1295 	movw	r2, #405	; 0x195
 8017b96:	490a      	ldr	r1, [pc, #40]	; (8017bc0 <memp_free_pool+0x40>)
 8017b98:	480a      	ldr	r0, [pc, #40]	; (8017bc4 <memp_free_pool+0x44>)
 8017b9a:	f00c f8f1 	bl	8023d80 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d007      	beq.n	8017bb4 <memp_free_pool+0x34>
 8017ba4:	683b      	ldr	r3, [r7, #0]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d004      	beq.n	8017bb4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8017baa:	6839      	ldr	r1, [r7, #0]
 8017bac:	6878      	ldr	r0, [r7, #4]
 8017bae:	f7ff ffbb 	bl	8017b28 <do_memp_free_pool>
 8017bb2:	e000      	b.n	8017bb6 <memp_free_pool+0x36>
    return;
 8017bb4:	bf00      	nop
}
 8017bb6:	3708      	adds	r7, #8
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	bd80      	pop	{r7, pc}
 8017bbc:	080260c0 	.word	0x080260c0
 8017bc0:	0802613c 	.word	0x0802613c
 8017bc4:	08026114 	.word	0x08026114

08017bc8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8017bc8:	b580      	push	{r7, lr}
 8017bca:	b082      	sub	sp, #8
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	4603      	mov	r3, r0
 8017bd0:	6039      	str	r1, [r7, #0]
 8017bd2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8017bd4:	79fb      	ldrb	r3, [r7, #7]
 8017bd6:	2b0c      	cmp	r3, #12
 8017bd8:	d907      	bls.n	8017bea <memp_free+0x22>
 8017bda:	4b0c      	ldr	r3, [pc, #48]	; (8017c0c <memp_free+0x44>)
 8017bdc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8017be0:	490b      	ldr	r1, [pc, #44]	; (8017c10 <memp_free+0x48>)
 8017be2:	480c      	ldr	r0, [pc, #48]	; (8017c14 <memp_free+0x4c>)
 8017be4:	f00c f8cc 	bl	8023d80 <iprintf>
 8017be8:	e00c      	b.n	8017c04 <memp_free+0x3c>

  if (mem == NULL) {
 8017bea:	683b      	ldr	r3, [r7, #0]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d008      	beq.n	8017c02 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8017bf0:	79fb      	ldrb	r3, [r7, #7]
 8017bf2:	4a09      	ldr	r2, [pc, #36]	; (8017c18 <memp_free+0x50>)
 8017bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017bf8:	6839      	ldr	r1, [r7, #0]
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f7ff ff94 	bl	8017b28 <do_memp_free_pool>
 8017c00:	e000      	b.n	8017c04 <memp_free+0x3c>
    return;
 8017c02:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8017c04:	3708      	adds	r7, #8
 8017c06:	46bd      	mov	sp, r7
 8017c08:	bd80      	pop	{r7, pc}
 8017c0a:	bf00      	nop
 8017c0c:	080260c0 	.word	0x080260c0
 8017c10:	08026190 	.word	0x08026190
 8017c14:	08026114 	.word	0x08026114
 8017c18:	08028904 	.word	0x08028904

08017c1c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8017c1c:	b480      	push	{r7}
 8017c1e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8017c20:	bf00      	nop
 8017c22:	46bd      	mov	sp, r7
 8017c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c28:	4770      	bx	lr
	...

08017c2c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8017c2c:	b580      	push	{r7, lr}
 8017c2e:	b086      	sub	sp, #24
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	60f8      	str	r0, [r7, #12]
 8017c34:	60b9      	str	r1, [r7, #8]
 8017c36:	607a      	str	r2, [r7, #4]
 8017c38:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d108      	bne.n	8017c52 <netif_add+0x26>
 8017c40:	4b57      	ldr	r3, [pc, #348]	; (8017da0 <netif_add+0x174>)
 8017c42:	f240 1227 	movw	r2, #295	; 0x127
 8017c46:	4957      	ldr	r1, [pc, #348]	; (8017da4 <netif_add+0x178>)
 8017c48:	4857      	ldr	r0, [pc, #348]	; (8017da8 <netif_add+0x17c>)
 8017c4a:	f00c f899 	bl	8023d80 <iprintf>
 8017c4e:	2300      	movs	r3, #0
 8017c50:	e0a2      	b.n	8017d98 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8017c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d108      	bne.n	8017c6a <netif_add+0x3e>
 8017c58:	4b51      	ldr	r3, [pc, #324]	; (8017da0 <netif_add+0x174>)
 8017c5a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8017c5e:	4953      	ldr	r1, [pc, #332]	; (8017dac <netif_add+0x180>)
 8017c60:	4851      	ldr	r0, [pc, #324]	; (8017da8 <netif_add+0x17c>)
 8017c62:	f00c f88d 	bl	8023d80 <iprintf>
 8017c66:	2300      	movs	r3, #0
 8017c68:	e096      	b.n	8017d98 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8017c6a:	68bb      	ldr	r3, [r7, #8]
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d101      	bne.n	8017c74 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8017c70:	4b4f      	ldr	r3, [pc, #316]	; (8017db0 <netif_add+0x184>)
 8017c72:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d101      	bne.n	8017c7e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8017c7a:	4b4d      	ldr	r3, [pc, #308]	; (8017db0 <netif_add+0x184>)
 8017c7c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8017c7e:	683b      	ldr	r3, [r7, #0]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d101      	bne.n	8017c88 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8017c84:	4b4a      	ldr	r3, [pc, #296]	; (8017db0 <netif_add+0x184>)
 8017c86:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	2200      	movs	r2, #0
 8017c92:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	2200      	movs	r2, #0
 8017c98:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	4a45      	ldr	r2, [pc, #276]	; (8017db4 <netif_add+0x188>)
 8017c9e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	2200      	movs	r2, #0
 8017caa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	6a3a      	ldr	r2, [r7, #32]
 8017cb8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8017cba:	4b3f      	ldr	r3, [pc, #252]	; (8017db8 <netif_add+0x18c>)
 8017cbc:	781a      	ldrb	r2, [r3, #0]
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017cc8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8017cca:	683b      	ldr	r3, [r7, #0]
 8017ccc:	687a      	ldr	r2, [r7, #4]
 8017cce:	68b9      	ldr	r1, [r7, #8]
 8017cd0:	68f8      	ldr	r0, [r7, #12]
 8017cd2:	f000 f913 	bl	8017efc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8017cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cd8:	68f8      	ldr	r0, [r7, #12]
 8017cda:	4798      	blx	r3
 8017cdc:	4603      	mov	r3, r0
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d001      	beq.n	8017ce6 <netif_add+0xba>
    return NULL;
 8017ce2:	2300      	movs	r3, #0
 8017ce4:	e058      	b.n	8017d98 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017cec:	2bff      	cmp	r3, #255	; 0xff
 8017cee:	d103      	bne.n	8017cf8 <netif_add+0xcc>
        netif->num = 0;
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8017cfc:	4b2f      	ldr	r3, [pc, #188]	; (8017dbc <netif_add+0x190>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	617b      	str	r3, [r7, #20]
 8017d02:	e02b      	b.n	8017d5c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8017d04:	697a      	ldr	r2, [r7, #20]
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	d106      	bne.n	8017d1a <netif_add+0xee>
 8017d0c:	4b24      	ldr	r3, [pc, #144]	; (8017da0 <netif_add+0x174>)
 8017d0e:	f240 128b 	movw	r2, #395	; 0x18b
 8017d12:	492b      	ldr	r1, [pc, #172]	; (8017dc0 <netif_add+0x194>)
 8017d14:	4824      	ldr	r0, [pc, #144]	; (8017da8 <netif_add+0x17c>)
 8017d16:	f00c f833 	bl	8023d80 <iprintf>
        num_netifs++;
 8017d1a:	693b      	ldr	r3, [r7, #16]
 8017d1c:	3301      	adds	r3, #1
 8017d1e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8017d20:	693b      	ldr	r3, [r7, #16]
 8017d22:	2bff      	cmp	r3, #255	; 0xff
 8017d24:	dd06      	ble.n	8017d34 <netif_add+0x108>
 8017d26:	4b1e      	ldr	r3, [pc, #120]	; (8017da0 <netif_add+0x174>)
 8017d28:	f240 128d 	movw	r2, #397	; 0x18d
 8017d2c:	4925      	ldr	r1, [pc, #148]	; (8017dc4 <netif_add+0x198>)
 8017d2e:	481e      	ldr	r0, [pc, #120]	; (8017da8 <netif_add+0x17c>)
 8017d30:	f00c f826 	bl	8023d80 <iprintf>
        if (netif2->num == netif->num) {
 8017d34:	697b      	ldr	r3, [r7, #20]
 8017d36:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017d40:	429a      	cmp	r2, r3
 8017d42:	d108      	bne.n	8017d56 <netif_add+0x12a>
          netif->num++;
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017d4a:	3301      	adds	r3, #1
 8017d4c:	b2da      	uxtb	r2, r3
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8017d54:	e005      	b.n	8017d62 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8017d56:	697b      	ldr	r3, [r7, #20]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	617b      	str	r3, [r7, #20]
 8017d5c:	697b      	ldr	r3, [r7, #20]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d1d0      	bne.n	8017d04 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8017d62:	697b      	ldr	r3, [r7, #20]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d1be      	bne.n	8017ce6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017d6e:	2bfe      	cmp	r3, #254	; 0xfe
 8017d70:	d103      	bne.n	8017d7a <netif_add+0x14e>
    netif_num = 0;
 8017d72:	4b11      	ldr	r3, [pc, #68]	; (8017db8 <netif_add+0x18c>)
 8017d74:	2200      	movs	r2, #0
 8017d76:	701a      	strb	r2, [r3, #0]
 8017d78:	e006      	b.n	8017d88 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017d80:	3301      	adds	r3, #1
 8017d82:	b2da      	uxtb	r2, r3
 8017d84:	4b0c      	ldr	r3, [pc, #48]	; (8017db8 <netif_add+0x18c>)
 8017d86:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8017d88:	4b0c      	ldr	r3, [pc, #48]	; (8017dbc <netif_add+0x190>)
 8017d8a:	681a      	ldr	r2, [r3, #0]
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8017d90:	4a0a      	ldr	r2, [pc, #40]	; (8017dbc <netif_add+0x190>)
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8017d96:	68fb      	ldr	r3, [r7, #12]
}
 8017d98:	4618      	mov	r0, r3
 8017d9a:	3718      	adds	r7, #24
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	bd80      	pop	{r7, pc}
 8017da0:	080261ac 	.word	0x080261ac
 8017da4:	08026240 	.word	0x08026240
 8017da8:	080261fc 	.word	0x080261fc
 8017dac:	0802625c 	.word	0x0802625c
 8017db0:	08028978 	.word	0x08028978
 8017db4:	080181d7 	.word	0x080181d7
 8017db8:	2000bf94 	.word	0x2000bf94
 8017dbc:	2000bf8c 	.word	0x2000bf8c
 8017dc0:	08026280 	.word	0x08026280
 8017dc4:	08026294 	.word	0x08026294

08017dc8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b082      	sub	sp, #8
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
 8017dd0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8017dd2:	6839      	ldr	r1, [r7, #0]
 8017dd4:	6878      	ldr	r0, [r7, #4]
 8017dd6:	f002 ff77 	bl	801acc8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8017dda:	6839      	ldr	r1, [r7, #0]
 8017ddc:	6878      	ldr	r0, [r7, #4]
 8017dde:	f008 f881 	bl	801fee4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8017de2:	bf00      	nop
 8017de4:	3708      	adds	r7, #8
 8017de6:	46bd      	mov	sp, r7
 8017de8:	bd80      	pop	{r7, pc}
	...

08017dec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8017dec:	b580      	push	{r7, lr}
 8017dee:	b086      	sub	sp, #24
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	60f8      	str	r0, [r7, #12]
 8017df4:	60b9      	str	r1, [r7, #8]
 8017df6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d106      	bne.n	8017e0c <netif_do_set_ipaddr+0x20>
 8017dfe:	4b1d      	ldr	r3, [pc, #116]	; (8017e74 <netif_do_set_ipaddr+0x88>)
 8017e00:	f240 12cb 	movw	r2, #459	; 0x1cb
 8017e04:	491c      	ldr	r1, [pc, #112]	; (8017e78 <netif_do_set_ipaddr+0x8c>)
 8017e06:	481d      	ldr	r0, [pc, #116]	; (8017e7c <netif_do_set_ipaddr+0x90>)
 8017e08:	f00b ffba 	bl	8023d80 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d106      	bne.n	8017e20 <netif_do_set_ipaddr+0x34>
 8017e12:	4b18      	ldr	r3, [pc, #96]	; (8017e74 <netif_do_set_ipaddr+0x88>)
 8017e14:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8017e18:	4917      	ldr	r1, [pc, #92]	; (8017e78 <netif_do_set_ipaddr+0x8c>)
 8017e1a:	4818      	ldr	r0, [pc, #96]	; (8017e7c <netif_do_set_ipaddr+0x90>)
 8017e1c:	f00b ffb0 	bl	8023d80 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8017e20:	68bb      	ldr	r3, [r7, #8]
 8017e22:	681a      	ldr	r2, [r3, #0]
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	3304      	adds	r3, #4
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	429a      	cmp	r2, r3
 8017e2c:	d01c      	beq.n	8017e68 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8017e2e:	68bb      	ldr	r3, [r7, #8]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	3304      	adds	r3, #4
 8017e38:	681a      	ldr	r2, [r3, #0]
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8017e3e:	f107 0314 	add.w	r3, r7, #20
 8017e42:	4619      	mov	r1, r3
 8017e44:	6878      	ldr	r0, [r7, #4]
 8017e46:	f7ff ffbf 	bl	8017dc8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8017e4a:	68bb      	ldr	r3, [r7, #8]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d002      	beq.n	8017e56 <netif_do_set_ipaddr+0x6a>
 8017e50:	68bb      	ldr	r3, [r7, #8]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	e000      	b.n	8017e58 <netif_do_set_ipaddr+0x6c>
 8017e56:	2300      	movs	r3, #0
 8017e58:	68fa      	ldr	r2, [r7, #12]
 8017e5a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8017e5c:	2101      	movs	r1, #1
 8017e5e:	68f8      	ldr	r0, [r7, #12]
 8017e60:	f000 f8d2 	bl	8018008 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8017e64:	2301      	movs	r3, #1
 8017e66:	e000      	b.n	8017e6a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8017e68:	2300      	movs	r3, #0
}
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	3718      	adds	r7, #24
 8017e6e:	46bd      	mov	sp, r7
 8017e70:	bd80      	pop	{r7, pc}
 8017e72:	bf00      	nop
 8017e74:	080261ac 	.word	0x080261ac
 8017e78:	080262c4 	.word	0x080262c4
 8017e7c:	080261fc 	.word	0x080261fc

08017e80 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8017e80:	b480      	push	{r7}
 8017e82:	b085      	sub	sp, #20
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	60f8      	str	r0, [r7, #12]
 8017e88:	60b9      	str	r1, [r7, #8]
 8017e8a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8017e8c:	68bb      	ldr	r3, [r7, #8]
 8017e8e:	681a      	ldr	r2, [r3, #0]
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	3308      	adds	r3, #8
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	429a      	cmp	r2, r3
 8017e98:	d00a      	beq.n	8017eb0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8017e9a:	68bb      	ldr	r3, [r7, #8]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d002      	beq.n	8017ea6 <netif_do_set_netmask+0x26>
 8017ea0:	68bb      	ldr	r3, [r7, #8]
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	e000      	b.n	8017ea8 <netif_do_set_netmask+0x28>
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	68fa      	ldr	r2, [r7, #12]
 8017eaa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8017eac:	2301      	movs	r3, #1
 8017eae:	e000      	b.n	8017eb2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8017eb0:	2300      	movs	r3, #0
}
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	3714      	adds	r7, #20
 8017eb6:	46bd      	mov	sp, r7
 8017eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ebc:	4770      	bx	lr

08017ebe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8017ebe:	b480      	push	{r7}
 8017ec0:	b085      	sub	sp, #20
 8017ec2:	af00      	add	r7, sp, #0
 8017ec4:	60f8      	str	r0, [r7, #12]
 8017ec6:	60b9      	str	r1, [r7, #8]
 8017ec8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8017eca:	68bb      	ldr	r3, [r7, #8]
 8017ecc:	681a      	ldr	r2, [r3, #0]
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	330c      	adds	r3, #12
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d00a      	beq.n	8017eee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8017ed8:	68bb      	ldr	r3, [r7, #8]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d002      	beq.n	8017ee4 <netif_do_set_gw+0x26>
 8017ede:	68bb      	ldr	r3, [r7, #8]
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	e000      	b.n	8017ee6 <netif_do_set_gw+0x28>
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	68fa      	ldr	r2, [r7, #12]
 8017ee8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8017eea:	2301      	movs	r3, #1
 8017eec:	e000      	b.n	8017ef0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8017eee:	2300      	movs	r3, #0
}
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	3714      	adds	r7, #20
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017efa:	4770      	bx	lr

08017efc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b088      	sub	sp, #32
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	60f8      	str	r0, [r7, #12]
 8017f04:	60b9      	str	r1, [r7, #8]
 8017f06:	607a      	str	r2, [r7, #4]
 8017f08:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8017f0e:	2300      	movs	r3, #0
 8017f10:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017f12:	68bb      	ldr	r3, [r7, #8]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d101      	bne.n	8017f1c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8017f18:	4b1c      	ldr	r3, [pc, #112]	; (8017f8c <netif_set_addr+0x90>)
 8017f1a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d101      	bne.n	8017f26 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8017f22:	4b1a      	ldr	r3, [pc, #104]	; (8017f8c <netif_set_addr+0x90>)
 8017f24:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8017f26:	683b      	ldr	r3, [r7, #0]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d101      	bne.n	8017f30 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8017f2c:	4b17      	ldr	r3, [pc, #92]	; (8017f8c <netif_set_addr+0x90>)
 8017f2e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8017f30:	68bb      	ldr	r3, [r7, #8]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d003      	beq.n	8017f3e <netif_set_addr+0x42>
 8017f36:	68bb      	ldr	r3, [r7, #8]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d101      	bne.n	8017f42 <netif_set_addr+0x46>
 8017f3e:	2301      	movs	r3, #1
 8017f40:	e000      	b.n	8017f44 <netif_set_addr+0x48>
 8017f42:	2300      	movs	r3, #0
 8017f44:	617b      	str	r3, [r7, #20]
  if (remove) {
 8017f46:	697b      	ldr	r3, [r7, #20]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d006      	beq.n	8017f5a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017f4c:	f107 0310 	add.w	r3, r7, #16
 8017f50:	461a      	mov	r2, r3
 8017f52:	68b9      	ldr	r1, [r7, #8]
 8017f54:	68f8      	ldr	r0, [r7, #12]
 8017f56:	f7ff ff49 	bl	8017dec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8017f5a:	69fa      	ldr	r2, [r7, #28]
 8017f5c:	6879      	ldr	r1, [r7, #4]
 8017f5e:	68f8      	ldr	r0, [r7, #12]
 8017f60:	f7ff ff8e 	bl	8017e80 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8017f64:	69ba      	ldr	r2, [r7, #24]
 8017f66:	6839      	ldr	r1, [r7, #0]
 8017f68:	68f8      	ldr	r0, [r7, #12]
 8017f6a:	f7ff ffa8 	bl	8017ebe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8017f6e:	697b      	ldr	r3, [r7, #20]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d106      	bne.n	8017f82 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017f74:	f107 0310 	add.w	r3, r7, #16
 8017f78:	461a      	mov	r2, r3
 8017f7a:	68b9      	ldr	r1, [r7, #8]
 8017f7c:	68f8      	ldr	r0, [r7, #12]
 8017f7e:	f7ff ff35 	bl	8017dec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8017f82:	bf00      	nop
 8017f84:	3720      	adds	r7, #32
 8017f86:	46bd      	mov	sp, r7
 8017f88:	bd80      	pop	{r7, pc}
 8017f8a:	bf00      	nop
 8017f8c:	08028978 	.word	0x08028978

08017f90 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8017f90:	b480      	push	{r7}
 8017f92:	b083      	sub	sp, #12
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8017f98:	4a04      	ldr	r2, [pc, #16]	; (8017fac <netif_set_default+0x1c>)
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8017f9e:	bf00      	nop
 8017fa0:	370c      	adds	r7, #12
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa8:	4770      	bx	lr
 8017faa:	bf00      	nop
 8017fac:	2000bf90 	.word	0x2000bf90

08017fb0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b082      	sub	sp, #8
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d107      	bne.n	8017fce <netif_set_up+0x1e>
 8017fbe:	4b0f      	ldr	r3, [pc, #60]	; (8017ffc <netif_set_up+0x4c>)
 8017fc0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8017fc4:	490e      	ldr	r1, [pc, #56]	; (8018000 <netif_set_up+0x50>)
 8017fc6:	480f      	ldr	r0, [pc, #60]	; (8018004 <netif_set_up+0x54>)
 8017fc8:	f00b feda 	bl	8023d80 <iprintf>
 8017fcc:	e013      	b.n	8017ff6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017fd4:	f003 0301 	and.w	r3, r3, #1
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d10c      	bne.n	8017ff6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017fe2:	f043 0301 	orr.w	r3, r3, #1
 8017fe6:	b2da      	uxtb	r2, r3
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8017fee:	2103      	movs	r1, #3
 8017ff0:	6878      	ldr	r0, [r7, #4]
 8017ff2:	f000 f809 	bl	8018008 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8017ff6:	3708      	adds	r7, #8
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bd80      	pop	{r7, pc}
 8017ffc:	080261ac 	.word	0x080261ac
 8018000:	08026334 	.word	0x08026334
 8018004:	080261fc 	.word	0x080261fc

08018008 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8018008:	b580      	push	{r7, lr}
 801800a:	b082      	sub	sp, #8
 801800c:	af00      	add	r7, sp, #0
 801800e:	6078      	str	r0, [r7, #4]
 8018010:	460b      	mov	r3, r1
 8018012:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	2b00      	cmp	r3, #0
 8018018:	d106      	bne.n	8018028 <netif_issue_reports+0x20>
 801801a:	4b18      	ldr	r3, [pc, #96]	; (801807c <netif_issue_reports+0x74>)
 801801c:	f240 326d 	movw	r2, #877	; 0x36d
 8018020:	4917      	ldr	r1, [pc, #92]	; (8018080 <netif_issue_reports+0x78>)
 8018022:	4818      	ldr	r0, [pc, #96]	; (8018084 <netif_issue_reports+0x7c>)
 8018024:	f00b feac 	bl	8023d80 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801802e:	f003 0304 	and.w	r3, r3, #4
 8018032:	2b00      	cmp	r3, #0
 8018034:	d01e      	beq.n	8018074 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801803c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8018040:	2b00      	cmp	r3, #0
 8018042:	d017      	beq.n	8018074 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8018044:	78fb      	ldrb	r3, [r7, #3]
 8018046:	f003 0301 	and.w	r3, r3, #1
 801804a:	2b00      	cmp	r3, #0
 801804c:	d013      	beq.n	8018076 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	3304      	adds	r3, #4
 8018052:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8018054:	2b00      	cmp	r3, #0
 8018056:	d00e      	beq.n	8018076 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801805e:	f003 0308 	and.w	r3, r3, #8
 8018062:	2b00      	cmp	r3, #0
 8018064:	d007      	beq.n	8018076 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	3304      	adds	r3, #4
 801806a:	4619      	mov	r1, r3
 801806c:	6878      	ldr	r0, [r7, #4]
 801806e:	f008 fea3 	bl	8020db8 <etharp_request>
 8018072:	e000      	b.n	8018076 <netif_issue_reports+0x6e>
    return;
 8018074:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8018076:	3708      	adds	r7, #8
 8018078:	46bd      	mov	sp, r7
 801807a:	bd80      	pop	{r7, pc}
 801807c:	080261ac 	.word	0x080261ac
 8018080:	08026350 	.word	0x08026350
 8018084:	080261fc 	.word	0x080261fc

08018088 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8018088:	b580      	push	{r7, lr}
 801808a:	b082      	sub	sp, #8
 801808c:	af00      	add	r7, sp, #0
 801808e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d107      	bne.n	80180a6 <netif_set_down+0x1e>
 8018096:	4b12      	ldr	r3, [pc, #72]	; (80180e0 <netif_set_down+0x58>)
 8018098:	f240 329b 	movw	r2, #923	; 0x39b
 801809c:	4911      	ldr	r1, [pc, #68]	; (80180e4 <netif_set_down+0x5c>)
 801809e:	4812      	ldr	r0, [pc, #72]	; (80180e8 <netif_set_down+0x60>)
 80180a0:	f00b fe6e 	bl	8023d80 <iprintf>
 80180a4:	e019      	b.n	80180da <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180ac:	f003 0301 	and.w	r3, r3, #1
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d012      	beq.n	80180da <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180ba:	f023 0301 	bic.w	r3, r3, #1
 80180be:	b2da      	uxtb	r2, r3
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180cc:	f003 0308 	and.w	r3, r3, #8
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d002      	beq.n	80180da <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80180d4:	6878      	ldr	r0, [r7, #4]
 80180d6:	f008 fa2d 	bl	8020534 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80180da:	3708      	adds	r7, #8
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}
 80180e0:	080261ac 	.word	0x080261ac
 80180e4:	08026374 	.word	0x08026374
 80180e8:	080261fc 	.word	0x080261fc

080180ec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b082      	sub	sp, #8
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d107      	bne.n	801810a <netif_set_link_up+0x1e>
 80180fa:	4b13      	ldr	r3, [pc, #76]	; (8018148 <netif_set_link_up+0x5c>)
 80180fc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8018100:	4912      	ldr	r1, [pc, #72]	; (801814c <netif_set_link_up+0x60>)
 8018102:	4813      	ldr	r0, [pc, #76]	; (8018150 <netif_set_link_up+0x64>)
 8018104:	f00b fe3c 	bl	8023d80 <iprintf>
 8018108:	e01b      	b.n	8018142 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018110:	f003 0304 	and.w	r3, r3, #4
 8018114:	2b00      	cmp	r3, #0
 8018116:	d114      	bne.n	8018142 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801811e:	f043 0304 	orr.w	r3, r3, #4
 8018122:	b2da      	uxtb	r2, r3
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801812a:	2103      	movs	r1, #3
 801812c:	6878      	ldr	r0, [r7, #4]
 801812e:	f7ff ff6b 	bl	8018008 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	69db      	ldr	r3, [r3, #28]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d003      	beq.n	8018142 <netif_set_link_up+0x56>
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	69db      	ldr	r3, [r3, #28]
 801813e:	6878      	ldr	r0, [r7, #4]
 8018140:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8018142:	3708      	adds	r7, #8
 8018144:	46bd      	mov	sp, r7
 8018146:	bd80      	pop	{r7, pc}
 8018148:	080261ac 	.word	0x080261ac
 801814c:	08026394 	.word	0x08026394
 8018150:	080261fc 	.word	0x080261fc

08018154 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b082      	sub	sp, #8
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d107      	bne.n	8018172 <netif_set_link_down+0x1e>
 8018162:	4b11      	ldr	r3, [pc, #68]	; (80181a8 <netif_set_link_down+0x54>)
 8018164:	f240 4206 	movw	r2, #1030	; 0x406
 8018168:	4910      	ldr	r1, [pc, #64]	; (80181ac <netif_set_link_down+0x58>)
 801816a:	4811      	ldr	r0, [pc, #68]	; (80181b0 <netif_set_link_down+0x5c>)
 801816c:	f00b fe08 	bl	8023d80 <iprintf>
 8018170:	e017      	b.n	80181a2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018178:	f003 0304 	and.w	r3, r3, #4
 801817c:	2b00      	cmp	r3, #0
 801817e:	d010      	beq.n	80181a2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018186:	f023 0304 	bic.w	r3, r3, #4
 801818a:	b2da      	uxtb	r2, r3
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	69db      	ldr	r3, [r3, #28]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d003      	beq.n	80181a2 <netif_set_link_down+0x4e>
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	69db      	ldr	r3, [r3, #28]
 801819e:	6878      	ldr	r0, [r7, #4]
 80181a0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80181a2:	3708      	adds	r7, #8
 80181a4:	46bd      	mov	sp, r7
 80181a6:	bd80      	pop	{r7, pc}
 80181a8:	080261ac 	.word	0x080261ac
 80181ac:	080263b8 	.word	0x080263b8
 80181b0:	080261fc 	.word	0x080261fc

080181b4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80181b4:	b480      	push	{r7}
 80181b6:	b083      	sub	sp, #12
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	6078      	str	r0, [r7, #4]
 80181bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d002      	beq.n	80181ca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	683a      	ldr	r2, [r7, #0]
 80181c8:	61da      	str	r2, [r3, #28]
  }
}
 80181ca:	bf00      	nop
 80181cc:	370c      	adds	r7, #12
 80181ce:	46bd      	mov	sp, r7
 80181d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d4:	4770      	bx	lr

080181d6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80181d6:	b480      	push	{r7}
 80181d8:	b085      	sub	sp, #20
 80181da:	af00      	add	r7, sp, #0
 80181dc:	60f8      	str	r0, [r7, #12]
 80181de:	60b9      	str	r1, [r7, #8]
 80181e0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80181e2:	f06f 030b 	mvn.w	r3, #11
}
 80181e6:	4618      	mov	r0, r3
 80181e8:	3714      	adds	r7, #20
 80181ea:	46bd      	mov	sp, r7
 80181ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181f0:	4770      	bx	lr
	...

080181f4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80181f4:	b480      	push	{r7}
 80181f6:	b085      	sub	sp, #20
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	4603      	mov	r3, r0
 80181fc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80181fe:	79fb      	ldrb	r3, [r7, #7]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d013      	beq.n	801822c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8018204:	4b0d      	ldr	r3, [pc, #52]	; (801823c <netif_get_by_index+0x48>)
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	60fb      	str	r3, [r7, #12]
 801820a:	e00c      	b.n	8018226 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018212:	3301      	adds	r3, #1
 8018214:	b2db      	uxtb	r3, r3
 8018216:	79fa      	ldrb	r2, [r7, #7]
 8018218:	429a      	cmp	r2, r3
 801821a:	d101      	bne.n	8018220 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	e006      	b.n	801822e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	60fb      	str	r3, [r7, #12]
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d1ef      	bne.n	801820c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801822c:	2300      	movs	r3, #0
}
 801822e:	4618      	mov	r0, r3
 8018230:	3714      	adds	r7, #20
 8018232:	46bd      	mov	sp, r7
 8018234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018238:	4770      	bx	lr
 801823a:	bf00      	nop
 801823c:	2000bf8c 	.word	0x2000bf8c

08018240 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8018240:	b580      	push	{r7, lr}
 8018242:	b082      	sub	sp, #8
 8018244:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8018246:	f00a fb07 	bl	8022858 <sys_arch_protect>
 801824a:	6038      	str	r0, [r7, #0]
 801824c:	4b0d      	ldr	r3, [pc, #52]	; (8018284 <pbuf_free_ooseq+0x44>)
 801824e:	2200      	movs	r2, #0
 8018250:	701a      	strb	r2, [r3, #0]
 8018252:	6838      	ldr	r0, [r7, #0]
 8018254:	f00a fb0e 	bl	8022874 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018258:	4b0b      	ldr	r3, [pc, #44]	; (8018288 <pbuf_free_ooseq+0x48>)
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	607b      	str	r3, [r7, #4]
 801825e:	e00a      	b.n	8018276 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018264:	2b00      	cmp	r3, #0
 8018266:	d003      	beq.n	8018270 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8018268:	6878      	ldr	r0, [r7, #4]
 801826a:	f002 fd6b 	bl	801ad44 <tcp_free_ooseq>
      return;
 801826e:	e005      	b.n	801827c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	68db      	ldr	r3, [r3, #12]
 8018274:	607b      	str	r3, [r7, #4]
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d1f1      	bne.n	8018260 <pbuf_free_ooseq+0x20>
    }
  }
}
 801827c:	3708      	adds	r7, #8
 801827e:	46bd      	mov	sp, r7
 8018280:	bd80      	pop	{r7, pc}
 8018282:	bf00      	nop
 8018284:	2000bf95 	.word	0x2000bf95
 8018288:	2000bfa4 	.word	0x2000bfa4

0801828c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801828c:	b580      	push	{r7, lr}
 801828e:	b082      	sub	sp, #8
 8018290:	af00      	add	r7, sp, #0
 8018292:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8018294:	f7ff ffd4 	bl	8018240 <pbuf_free_ooseq>
}
 8018298:	bf00      	nop
 801829a:	3708      	adds	r7, #8
 801829c:	46bd      	mov	sp, r7
 801829e:	bd80      	pop	{r7, pc}

080182a0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80182a0:	b580      	push	{r7, lr}
 80182a2:	b082      	sub	sp, #8
 80182a4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80182a6:	f00a fad7 	bl	8022858 <sys_arch_protect>
 80182aa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80182ac:	4b0f      	ldr	r3, [pc, #60]	; (80182ec <pbuf_pool_is_empty+0x4c>)
 80182ae:	781b      	ldrb	r3, [r3, #0]
 80182b0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80182b2:	4b0e      	ldr	r3, [pc, #56]	; (80182ec <pbuf_pool_is_empty+0x4c>)
 80182b4:	2201      	movs	r2, #1
 80182b6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80182b8:	6878      	ldr	r0, [r7, #4]
 80182ba:	f00a fadb 	bl	8022874 <sys_arch_unprotect>

  if (!queued) {
 80182be:	78fb      	ldrb	r3, [r7, #3]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d10f      	bne.n	80182e4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80182c4:	2100      	movs	r1, #0
 80182c6:	480a      	ldr	r0, [pc, #40]	; (80182f0 <pbuf_pool_is_empty+0x50>)
 80182c8:	f7fe fe90 	bl	8016fec <tcpip_try_callback>
 80182cc:	4603      	mov	r3, r0
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d008      	beq.n	80182e4 <pbuf_pool_is_empty+0x44>
 80182d2:	f00a fac1 	bl	8022858 <sys_arch_protect>
 80182d6:	6078      	str	r0, [r7, #4]
 80182d8:	4b04      	ldr	r3, [pc, #16]	; (80182ec <pbuf_pool_is_empty+0x4c>)
 80182da:	2200      	movs	r2, #0
 80182dc:	701a      	strb	r2, [r3, #0]
 80182de:	6878      	ldr	r0, [r7, #4]
 80182e0:	f00a fac8 	bl	8022874 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80182e4:	bf00      	nop
 80182e6:	3708      	adds	r7, #8
 80182e8:	46bd      	mov	sp, r7
 80182ea:	bd80      	pop	{r7, pc}
 80182ec:	2000bf95 	.word	0x2000bf95
 80182f0:	0801828d 	.word	0x0801828d

080182f4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80182f4:	b480      	push	{r7}
 80182f6:	b085      	sub	sp, #20
 80182f8:	af00      	add	r7, sp, #0
 80182fa:	60f8      	str	r0, [r7, #12]
 80182fc:	60b9      	str	r1, [r7, #8]
 80182fe:	4611      	mov	r1, r2
 8018300:	461a      	mov	r2, r3
 8018302:	460b      	mov	r3, r1
 8018304:	80fb      	strh	r3, [r7, #6]
 8018306:	4613      	mov	r3, r2
 8018308:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	2200      	movs	r2, #0
 801830e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	68ba      	ldr	r2, [r7, #8]
 8018314:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	88fa      	ldrh	r2, [r7, #6]
 801831a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	88ba      	ldrh	r2, [r7, #4]
 8018320:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8018322:	8b3b      	ldrh	r3, [r7, #24]
 8018324:	b2da      	uxtb	r2, r3
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	7f3a      	ldrb	r2, [r7, #28]
 801832e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8018330:	68fb      	ldr	r3, [r7, #12]
 8018332:	2201      	movs	r2, #1
 8018334:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	2200      	movs	r2, #0
 801833a:	73da      	strb	r2, [r3, #15]
}
 801833c:	bf00      	nop
 801833e:	3714      	adds	r7, #20
 8018340:	46bd      	mov	sp, r7
 8018342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018346:	4770      	bx	lr

08018348 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b08c      	sub	sp, #48	; 0x30
 801834c:	af02      	add	r7, sp, #8
 801834e:	4603      	mov	r3, r0
 8018350:	71fb      	strb	r3, [r7, #7]
 8018352:	460b      	mov	r3, r1
 8018354:	80bb      	strh	r3, [r7, #4]
 8018356:	4613      	mov	r3, r2
 8018358:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801835a:	79fb      	ldrb	r3, [r7, #7]
 801835c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801835e:	887b      	ldrh	r3, [r7, #2]
 8018360:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8018364:	d07f      	beq.n	8018466 <pbuf_alloc+0x11e>
 8018366:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801836a:	f300 80c8 	bgt.w	80184fe <pbuf_alloc+0x1b6>
 801836e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8018372:	d010      	beq.n	8018396 <pbuf_alloc+0x4e>
 8018374:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8018378:	f300 80c1 	bgt.w	80184fe <pbuf_alloc+0x1b6>
 801837c:	2b01      	cmp	r3, #1
 801837e:	d002      	beq.n	8018386 <pbuf_alloc+0x3e>
 8018380:	2b41      	cmp	r3, #65	; 0x41
 8018382:	f040 80bc 	bne.w	80184fe <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8018386:	887a      	ldrh	r2, [r7, #2]
 8018388:	88bb      	ldrh	r3, [r7, #4]
 801838a:	4619      	mov	r1, r3
 801838c:	2000      	movs	r0, #0
 801838e:	f000 f8d1 	bl	8018534 <pbuf_alloc_reference>
 8018392:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8018394:	e0bd      	b.n	8018512 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8018396:	2300      	movs	r3, #0
 8018398:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801839a:	2300      	movs	r3, #0
 801839c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801839e:	88bb      	ldrh	r3, [r7, #4]
 80183a0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80183a2:	200c      	movs	r0, #12
 80183a4:	f7ff fb9a 	bl	8017adc <memp_malloc>
 80183a8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80183aa:	693b      	ldr	r3, [r7, #16]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d109      	bne.n	80183c4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80183b0:	f7ff ff76 	bl	80182a0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80183b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d002      	beq.n	80183c0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80183ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80183bc:	f000 faa8 	bl	8018910 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80183c0:	2300      	movs	r3, #0
 80183c2:	e0a7      	b.n	8018514 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80183c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80183c6:	3303      	adds	r3, #3
 80183c8:	b29b      	uxth	r3, r3
 80183ca:	f023 0303 	bic.w	r3, r3, #3
 80183ce:	b29b      	uxth	r3, r3
 80183d0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80183d4:	b29b      	uxth	r3, r3
 80183d6:	8b7a      	ldrh	r2, [r7, #26]
 80183d8:	4293      	cmp	r3, r2
 80183da:	bf28      	it	cs
 80183dc:	4613      	movcs	r3, r2
 80183de:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80183e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80183e2:	3310      	adds	r3, #16
 80183e4:	693a      	ldr	r2, [r7, #16]
 80183e6:	4413      	add	r3, r2
 80183e8:	3303      	adds	r3, #3
 80183ea:	f023 0303 	bic.w	r3, r3, #3
 80183ee:	4618      	mov	r0, r3
 80183f0:	89f9      	ldrh	r1, [r7, #14]
 80183f2:	8b7a      	ldrh	r2, [r7, #26]
 80183f4:	2300      	movs	r3, #0
 80183f6:	9301      	str	r3, [sp, #4]
 80183f8:	887b      	ldrh	r3, [r7, #2]
 80183fa:	9300      	str	r3, [sp, #0]
 80183fc:	460b      	mov	r3, r1
 80183fe:	4601      	mov	r1, r0
 8018400:	6938      	ldr	r0, [r7, #16]
 8018402:	f7ff ff77 	bl	80182f4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8018406:	693b      	ldr	r3, [r7, #16]
 8018408:	685b      	ldr	r3, [r3, #4]
 801840a:	f003 0303 	and.w	r3, r3, #3
 801840e:	2b00      	cmp	r3, #0
 8018410:	d006      	beq.n	8018420 <pbuf_alloc+0xd8>
 8018412:	4b42      	ldr	r3, [pc, #264]	; (801851c <pbuf_alloc+0x1d4>)
 8018414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018418:	4941      	ldr	r1, [pc, #260]	; (8018520 <pbuf_alloc+0x1d8>)
 801841a:	4842      	ldr	r0, [pc, #264]	; (8018524 <pbuf_alloc+0x1dc>)
 801841c:	f00b fcb0 	bl	8023d80 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8018420:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018422:	3303      	adds	r3, #3
 8018424:	f023 0303 	bic.w	r3, r3, #3
 8018428:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801842c:	d106      	bne.n	801843c <pbuf_alloc+0xf4>
 801842e:	4b3b      	ldr	r3, [pc, #236]	; (801851c <pbuf_alloc+0x1d4>)
 8018430:	f44f 7281 	mov.w	r2, #258	; 0x102
 8018434:	493c      	ldr	r1, [pc, #240]	; (8018528 <pbuf_alloc+0x1e0>)
 8018436:	483b      	ldr	r0, [pc, #236]	; (8018524 <pbuf_alloc+0x1dc>)
 8018438:	f00b fca2 	bl	8023d80 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801843e:	2b00      	cmp	r3, #0
 8018440:	d102      	bne.n	8018448 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8018442:	693b      	ldr	r3, [r7, #16]
 8018444:	627b      	str	r3, [r7, #36]	; 0x24
 8018446:	e002      	b.n	801844e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8018448:	69fb      	ldr	r3, [r7, #28]
 801844a:	693a      	ldr	r2, [r7, #16]
 801844c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801844e:	693b      	ldr	r3, [r7, #16]
 8018450:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8018452:	8b7a      	ldrh	r2, [r7, #26]
 8018454:	89fb      	ldrh	r3, [r7, #14]
 8018456:	1ad3      	subs	r3, r2, r3
 8018458:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801845a:	2300      	movs	r3, #0
 801845c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801845e:	8b7b      	ldrh	r3, [r7, #26]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d19e      	bne.n	80183a2 <pbuf_alloc+0x5a>
      break;
 8018464:	e055      	b.n	8018512 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8018466:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018468:	3303      	adds	r3, #3
 801846a:	b29b      	uxth	r3, r3
 801846c:	f023 0303 	bic.w	r3, r3, #3
 8018470:	b29a      	uxth	r2, r3
 8018472:	88bb      	ldrh	r3, [r7, #4]
 8018474:	3303      	adds	r3, #3
 8018476:	b29b      	uxth	r3, r3
 8018478:	f023 0303 	bic.w	r3, r3, #3
 801847c:	b29b      	uxth	r3, r3
 801847e:	4413      	add	r3, r2
 8018480:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8018482:	8b3b      	ldrh	r3, [r7, #24]
 8018484:	3310      	adds	r3, #16
 8018486:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018488:	8b3a      	ldrh	r2, [r7, #24]
 801848a:	88bb      	ldrh	r3, [r7, #4]
 801848c:	3303      	adds	r3, #3
 801848e:	f023 0303 	bic.w	r3, r3, #3
 8018492:	429a      	cmp	r2, r3
 8018494:	d306      	bcc.n	80184a4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8018496:	8afa      	ldrh	r2, [r7, #22]
 8018498:	88bb      	ldrh	r3, [r7, #4]
 801849a:	3303      	adds	r3, #3
 801849c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80184a0:	429a      	cmp	r2, r3
 80184a2:	d201      	bcs.n	80184a8 <pbuf_alloc+0x160>
        return NULL;
 80184a4:	2300      	movs	r3, #0
 80184a6:	e035      	b.n	8018514 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80184a8:	8afb      	ldrh	r3, [r7, #22]
 80184aa:	4618      	mov	r0, r3
 80184ac:	f7ff f972 	bl	8017794 <mem_malloc>
 80184b0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80184b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d101      	bne.n	80184bc <pbuf_alloc+0x174>
        return NULL;
 80184b8:	2300      	movs	r3, #0
 80184ba:	e02b      	b.n	8018514 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80184bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80184be:	3310      	adds	r3, #16
 80184c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184c2:	4413      	add	r3, r2
 80184c4:	3303      	adds	r3, #3
 80184c6:	f023 0303 	bic.w	r3, r3, #3
 80184ca:	4618      	mov	r0, r3
 80184cc:	88b9      	ldrh	r1, [r7, #4]
 80184ce:	88ba      	ldrh	r2, [r7, #4]
 80184d0:	2300      	movs	r3, #0
 80184d2:	9301      	str	r3, [sp, #4]
 80184d4:	887b      	ldrh	r3, [r7, #2]
 80184d6:	9300      	str	r3, [sp, #0]
 80184d8:	460b      	mov	r3, r1
 80184da:	4601      	mov	r1, r0
 80184dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184de:	f7ff ff09 	bl	80182f4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80184e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184e4:	685b      	ldr	r3, [r3, #4]
 80184e6:	f003 0303 	and.w	r3, r3, #3
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d010      	beq.n	8018510 <pbuf_alloc+0x1c8>
 80184ee:	4b0b      	ldr	r3, [pc, #44]	; (801851c <pbuf_alloc+0x1d4>)
 80184f0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80184f4:	490d      	ldr	r1, [pc, #52]	; (801852c <pbuf_alloc+0x1e4>)
 80184f6:	480b      	ldr	r0, [pc, #44]	; (8018524 <pbuf_alloc+0x1dc>)
 80184f8:	f00b fc42 	bl	8023d80 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80184fc:	e008      	b.n	8018510 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80184fe:	4b07      	ldr	r3, [pc, #28]	; (801851c <pbuf_alloc+0x1d4>)
 8018500:	f240 1227 	movw	r2, #295	; 0x127
 8018504:	490a      	ldr	r1, [pc, #40]	; (8018530 <pbuf_alloc+0x1e8>)
 8018506:	4807      	ldr	r0, [pc, #28]	; (8018524 <pbuf_alloc+0x1dc>)
 8018508:	f00b fc3a 	bl	8023d80 <iprintf>
      return NULL;
 801850c:	2300      	movs	r3, #0
 801850e:	e001      	b.n	8018514 <pbuf_alloc+0x1cc>
      break;
 8018510:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8018512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018514:	4618      	mov	r0, r3
 8018516:	3728      	adds	r7, #40	; 0x28
 8018518:	46bd      	mov	sp, r7
 801851a:	bd80      	pop	{r7, pc}
 801851c:	080263dc 	.word	0x080263dc
 8018520:	0802640c 	.word	0x0802640c
 8018524:	0802643c 	.word	0x0802643c
 8018528:	08026464 	.word	0x08026464
 801852c:	08026498 	.word	0x08026498
 8018530:	080264c4 	.word	0x080264c4

08018534 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b086      	sub	sp, #24
 8018538:	af02      	add	r7, sp, #8
 801853a:	6078      	str	r0, [r7, #4]
 801853c:	460b      	mov	r3, r1
 801853e:	807b      	strh	r3, [r7, #2]
 8018540:	4613      	mov	r3, r2
 8018542:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8018544:	883b      	ldrh	r3, [r7, #0]
 8018546:	2b41      	cmp	r3, #65	; 0x41
 8018548:	d009      	beq.n	801855e <pbuf_alloc_reference+0x2a>
 801854a:	883b      	ldrh	r3, [r7, #0]
 801854c:	2b01      	cmp	r3, #1
 801854e:	d006      	beq.n	801855e <pbuf_alloc_reference+0x2a>
 8018550:	4b0f      	ldr	r3, [pc, #60]	; (8018590 <pbuf_alloc_reference+0x5c>)
 8018552:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8018556:	490f      	ldr	r1, [pc, #60]	; (8018594 <pbuf_alloc_reference+0x60>)
 8018558:	480f      	ldr	r0, [pc, #60]	; (8018598 <pbuf_alloc_reference+0x64>)
 801855a:	f00b fc11 	bl	8023d80 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801855e:	200b      	movs	r0, #11
 8018560:	f7ff fabc 	bl	8017adc <memp_malloc>
 8018564:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d101      	bne.n	8018570 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801856c:	2300      	movs	r3, #0
 801856e:	e00b      	b.n	8018588 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8018570:	8879      	ldrh	r1, [r7, #2]
 8018572:	887a      	ldrh	r2, [r7, #2]
 8018574:	2300      	movs	r3, #0
 8018576:	9301      	str	r3, [sp, #4]
 8018578:	883b      	ldrh	r3, [r7, #0]
 801857a:	9300      	str	r3, [sp, #0]
 801857c:	460b      	mov	r3, r1
 801857e:	6879      	ldr	r1, [r7, #4]
 8018580:	68f8      	ldr	r0, [r7, #12]
 8018582:	f7ff feb7 	bl	80182f4 <pbuf_init_alloced_pbuf>
  return p;
 8018586:	68fb      	ldr	r3, [r7, #12]
}
 8018588:	4618      	mov	r0, r3
 801858a:	3710      	adds	r7, #16
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}
 8018590:	080263dc 	.word	0x080263dc
 8018594:	080264e0 	.word	0x080264e0
 8018598:	0802643c 	.word	0x0802643c

0801859c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b088      	sub	sp, #32
 80185a0:	af02      	add	r7, sp, #8
 80185a2:	607b      	str	r3, [r7, #4]
 80185a4:	4603      	mov	r3, r0
 80185a6:	73fb      	strb	r3, [r7, #15]
 80185a8:	460b      	mov	r3, r1
 80185aa:	81bb      	strh	r3, [r7, #12]
 80185ac:	4613      	mov	r3, r2
 80185ae:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80185b0:	7bfb      	ldrb	r3, [r7, #15]
 80185b2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80185b4:	8a7b      	ldrh	r3, [r7, #18]
 80185b6:	3303      	adds	r3, #3
 80185b8:	f023 0203 	bic.w	r2, r3, #3
 80185bc:	89bb      	ldrh	r3, [r7, #12]
 80185be:	441a      	add	r2, r3
 80185c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80185c2:	429a      	cmp	r2, r3
 80185c4:	d901      	bls.n	80185ca <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80185c6:	2300      	movs	r3, #0
 80185c8:	e018      	b.n	80185fc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80185ca:	6a3b      	ldr	r3, [r7, #32]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d007      	beq.n	80185e0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80185d0:	8a7b      	ldrh	r3, [r7, #18]
 80185d2:	3303      	adds	r3, #3
 80185d4:	f023 0303 	bic.w	r3, r3, #3
 80185d8:	6a3a      	ldr	r2, [r7, #32]
 80185da:	4413      	add	r3, r2
 80185dc:	617b      	str	r3, [r7, #20]
 80185de:	e001      	b.n	80185e4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80185e0:	2300      	movs	r3, #0
 80185e2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80185e4:	6878      	ldr	r0, [r7, #4]
 80185e6:	89b9      	ldrh	r1, [r7, #12]
 80185e8:	89ba      	ldrh	r2, [r7, #12]
 80185ea:	2302      	movs	r3, #2
 80185ec:	9301      	str	r3, [sp, #4]
 80185ee:	897b      	ldrh	r3, [r7, #10]
 80185f0:	9300      	str	r3, [sp, #0]
 80185f2:	460b      	mov	r3, r1
 80185f4:	6979      	ldr	r1, [r7, #20]
 80185f6:	f7ff fe7d 	bl	80182f4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80185fa:	687b      	ldr	r3, [r7, #4]
}
 80185fc:	4618      	mov	r0, r3
 80185fe:	3718      	adds	r7, #24
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}

08018604 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b084      	sub	sp, #16
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
 801860c:	460b      	mov	r3, r1
 801860e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d106      	bne.n	8018624 <pbuf_realloc+0x20>
 8018616:	4b3a      	ldr	r3, [pc, #232]	; (8018700 <pbuf_realloc+0xfc>)
 8018618:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801861c:	4939      	ldr	r1, [pc, #228]	; (8018704 <pbuf_realloc+0x100>)
 801861e:	483a      	ldr	r0, [pc, #232]	; (8018708 <pbuf_realloc+0x104>)
 8018620:	f00b fbae 	bl	8023d80 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	891b      	ldrh	r3, [r3, #8]
 8018628:	887a      	ldrh	r2, [r7, #2]
 801862a:	429a      	cmp	r2, r3
 801862c:	d263      	bcs.n	80186f6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	891a      	ldrh	r2, [r3, #8]
 8018632:	887b      	ldrh	r3, [r7, #2]
 8018634:	1ad3      	subs	r3, r2, r3
 8018636:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8018638:	887b      	ldrh	r3, [r7, #2]
 801863a:	817b      	strh	r3, [r7, #10]
  q = p;
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8018640:	e018      	b.n	8018674 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	895b      	ldrh	r3, [r3, #10]
 8018646:	897a      	ldrh	r2, [r7, #10]
 8018648:	1ad3      	subs	r3, r2, r3
 801864a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	891a      	ldrh	r2, [r3, #8]
 8018650:	893b      	ldrh	r3, [r7, #8]
 8018652:	1ad3      	subs	r3, r2, r3
 8018654:	b29a      	uxth	r2, r3
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d106      	bne.n	8018674 <pbuf_realloc+0x70>
 8018666:	4b26      	ldr	r3, [pc, #152]	; (8018700 <pbuf_realloc+0xfc>)
 8018668:	f240 12af 	movw	r2, #431	; 0x1af
 801866c:	4927      	ldr	r1, [pc, #156]	; (801870c <pbuf_realloc+0x108>)
 801866e:	4826      	ldr	r0, [pc, #152]	; (8018708 <pbuf_realloc+0x104>)
 8018670:	f00b fb86 	bl	8023d80 <iprintf>
  while (rem_len > q->len) {
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	895b      	ldrh	r3, [r3, #10]
 8018678:	897a      	ldrh	r2, [r7, #10]
 801867a:	429a      	cmp	r2, r3
 801867c:	d8e1      	bhi.n	8018642 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	7b1b      	ldrb	r3, [r3, #12]
 8018682:	f003 030f 	and.w	r3, r3, #15
 8018686:	2b00      	cmp	r3, #0
 8018688:	d121      	bne.n	80186ce <pbuf_realloc+0xca>
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	895b      	ldrh	r3, [r3, #10]
 801868e:	897a      	ldrh	r2, [r7, #10]
 8018690:	429a      	cmp	r2, r3
 8018692:	d01c      	beq.n	80186ce <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	7b5b      	ldrb	r3, [r3, #13]
 8018698:	f003 0302 	and.w	r3, r3, #2
 801869c:	2b00      	cmp	r3, #0
 801869e:	d116      	bne.n	80186ce <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	685a      	ldr	r2, [r3, #4]
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	1ad3      	subs	r3, r2, r3
 80186a8:	b29a      	uxth	r2, r3
 80186aa:	897b      	ldrh	r3, [r7, #10]
 80186ac:	4413      	add	r3, r2
 80186ae:	b29b      	uxth	r3, r3
 80186b0:	4619      	mov	r1, r3
 80186b2:	68f8      	ldr	r0, [r7, #12]
 80186b4:	f7fe ff64 	bl	8017580 <mem_trim>
 80186b8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d106      	bne.n	80186ce <pbuf_realloc+0xca>
 80186c0:	4b0f      	ldr	r3, [pc, #60]	; (8018700 <pbuf_realloc+0xfc>)
 80186c2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80186c6:	4912      	ldr	r1, [pc, #72]	; (8018710 <pbuf_realloc+0x10c>)
 80186c8:	480f      	ldr	r0, [pc, #60]	; (8018708 <pbuf_realloc+0x104>)
 80186ca:	f00b fb59 	bl	8023d80 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	897a      	ldrh	r2, [r7, #10]
 80186d2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	895a      	ldrh	r2, [r3, #10]
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d004      	beq.n	80186ee <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	4618      	mov	r0, r3
 80186ea:	f000 f911 	bl	8018910 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	2200      	movs	r2, #0
 80186f2:	601a      	str	r2, [r3, #0]
 80186f4:	e000      	b.n	80186f8 <pbuf_realloc+0xf4>
    return;
 80186f6:	bf00      	nop

}
 80186f8:	3710      	adds	r7, #16
 80186fa:	46bd      	mov	sp, r7
 80186fc:	bd80      	pop	{r7, pc}
 80186fe:	bf00      	nop
 8018700:	080263dc 	.word	0x080263dc
 8018704:	080264f4 	.word	0x080264f4
 8018708:	0802643c 	.word	0x0802643c
 801870c:	0802650c 	.word	0x0802650c
 8018710:	08026524 	.word	0x08026524

08018714 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8018714:	b580      	push	{r7, lr}
 8018716:	b086      	sub	sp, #24
 8018718:	af00      	add	r7, sp, #0
 801871a:	60f8      	str	r0, [r7, #12]
 801871c:	60b9      	str	r1, [r7, #8]
 801871e:	4613      	mov	r3, r2
 8018720:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d106      	bne.n	8018736 <pbuf_add_header_impl+0x22>
 8018728:	4b2b      	ldr	r3, [pc, #172]	; (80187d8 <pbuf_add_header_impl+0xc4>)
 801872a:	f240 12df 	movw	r2, #479	; 0x1df
 801872e:	492b      	ldr	r1, [pc, #172]	; (80187dc <pbuf_add_header_impl+0xc8>)
 8018730:	482b      	ldr	r0, [pc, #172]	; (80187e0 <pbuf_add_header_impl+0xcc>)
 8018732:	f00b fb25 	bl	8023d80 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d003      	beq.n	8018744 <pbuf_add_header_impl+0x30>
 801873c:	68bb      	ldr	r3, [r7, #8]
 801873e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018742:	d301      	bcc.n	8018748 <pbuf_add_header_impl+0x34>
    return 1;
 8018744:	2301      	movs	r3, #1
 8018746:	e043      	b.n	80187d0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d101      	bne.n	8018752 <pbuf_add_header_impl+0x3e>
    return 0;
 801874e:	2300      	movs	r3, #0
 8018750:	e03e      	b.n	80187d0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8018752:	68bb      	ldr	r3, [r7, #8]
 8018754:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	891a      	ldrh	r2, [r3, #8]
 801875a:	8a7b      	ldrh	r3, [r7, #18]
 801875c:	4413      	add	r3, r2
 801875e:	b29b      	uxth	r3, r3
 8018760:	8a7a      	ldrh	r2, [r7, #18]
 8018762:	429a      	cmp	r2, r3
 8018764:	d901      	bls.n	801876a <pbuf_add_header_impl+0x56>
    return 1;
 8018766:	2301      	movs	r3, #1
 8018768:	e032      	b.n	80187d0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	7b1b      	ldrb	r3, [r3, #12]
 801876e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8018770:	8a3b      	ldrh	r3, [r7, #16]
 8018772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018776:	2b00      	cmp	r3, #0
 8018778:	d00c      	beq.n	8018794 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	685a      	ldr	r2, [r3, #4]
 801877e:	68bb      	ldr	r3, [r7, #8]
 8018780:	425b      	negs	r3, r3
 8018782:	4413      	add	r3, r2
 8018784:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	3310      	adds	r3, #16
 801878a:	697a      	ldr	r2, [r7, #20]
 801878c:	429a      	cmp	r2, r3
 801878e:	d20d      	bcs.n	80187ac <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8018790:	2301      	movs	r3, #1
 8018792:	e01d      	b.n	80187d0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8018794:	79fb      	ldrb	r3, [r7, #7]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d006      	beq.n	80187a8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801879a:	68fb      	ldr	r3, [r7, #12]
 801879c:	685a      	ldr	r2, [r3, #4]
 801879e:	68bb      	ldr	r3, [r7, #8]
 80187a0:	425b      	negs	r3, r3
 80187a2:	4413      	add	r3, r2
 80187a4:	617b      	str	r3, [r7, #20]
 80187a6:	e001      	b.n	80187ac <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80187a8:	2301      	movs	r3, #1
 80187aa:	e011      	b.n	80187d0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	697a      	ldr	r2, [r7, #20]
 80187b0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	895a      	ldrh	r2, [r3, #10]
 80187b6:	8a7b      	ldrh	r3, [r7, #18]
 80187b8:	4413      	add	r3, r2
 80187ba:	b29a      	uxth	r2, r3
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	891a      	ldrh	r2, [r3, #8]
 80187c4:	8a7b      	ldrh	r3, [r7, #18]
 80187c6:	4413      	add	r3, r2
 80187c8:	b29a      	uxth	r2, r3
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	811a      	strh	r2, [r3, #8]


  return 0;
 80187ce:	2300      	movs	r3, #0
}
 80187d0:	4618      	mov	r0, r3
 80187d2:	3718      	adds	r7, #24
 80187d4:	46bd      	mov	sp, r7
 80187d6:	bd80      	pop	{r7, pc}
 80187d8:	080263dc 	.word	0x080263dc
 80187dc:	08026540 	.word	0x08026540
 80187e0:	0802643c 	.word	0x0802643c

080187e4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b082      	sub	sp, #8
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
 80187ec:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80187ee:	2200      	movs	r2, #0
 80187f0:	6839      	ldr	r1, [r7, #0]
 80187f2:	6878      	ldr	r0, [r7, #4]
 80187f4:	f7ff ff8e 	bl	8018714 <pbuf_add_header_impl>
 80187f8:	4603      	mov	r3, r0
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	3708      	adds	r7, #8
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}
	...

08018804 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b084      	sub	sp, #16
 8018808:	af00      	add	r7, sp, #0
 801880a:	6078      	str	r0, [r7, #4]
 801880c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d106      	bne.n	8018822 <pbuf_remove_header+0x1e>
 8018814:	4b20      	ldr	r3, [pc, #128]	; (8018898 <pbuf_remove_header+0x94>)
 8018816:	f240 224b 	movw	r2, #587	; 0x24b
 801881a:	4920      	ldr	r1, [pc, #128]	; (801889c <pbuf_remove_header+0x98>)
 801881c:	4820      	ldr	r0, [pc, #128]	; (80188a0 <pbuf_remove_header+0x9c>)
 801881e:	f00b faaf 	bl	8023d80 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d003      	beq.n	8018830 <pbuf_remove_header+0x2c>
 8018828:	683b      	ldr	r3, [r7, #0]
 801882a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801882e:	d301      	bcc.n	8018834 <pbuf_remove_header+0x30>
    return 1;
 8018830:	2301      	movs	r3, #1
 8018832:	e02c      	b.n	801888e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8018834:	683b      	ldr	r3, [r7, #0]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d101      	bne.n	801883e <pbuf_remove_header+0x3a>
    return 0;
 801883a:	2300      	movs	r3, #0
 801883c:	e027      	b.n	801888e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801883e:	683b      	ldr	r3, [r7, #0]
 8018840:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	895b      	ldrh	r3, [r3, #10]
 8018846:	89fa      	ldrh	r2, [r7, #14]
 8018848:	429a      	cmp	r2, r3
 801884a:	d908      	bls.n	801885e <pbuf_remove_header+0x5a>
 801884c:	4b12      	ldr	r3, [pc, #72]	; (8018898 <pbuf_remove_header+0x94>)
 801884e:	f240 2255 	movw	r2, #597	; 0x255
 8018852:	4914      	ldr	r1, [pc, #80]	; (80188a4 <pbuf_remove_header+0xa0>)
 8018854:	4812      	ldr	r0, [pc, #72]	; (80188a0 <pbuf_remove_header+0x9c>)
 8018856:	f00b fa93 	bl	8023d80 <iprintf>
 801885a:	2301      	movs	r3, #1
 801885c:	e017      	b.n	801888e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	685b      	ldr	r3, [r3, #4]
 8018862:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	685a      	ldr	r2, [r3, #4]
 8018868:	683b      	ldr	r3, [r7, #0]
 801886a:	441a      	add	r2, r3
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	895a      	ldrh	r2, [r3, #10]
 8018874:	89fb      	ldrh	r3, [r7, #14]
 8018876:	1ad3      	subs	r3, r2, r3
 8018878:	b29a      	uxth	r2, r3
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	891a      	ldrh	r2, [r3, #8]
 8018882:	89fb      	ldrh	r3, [r7, #14]
 8018884:	1ad3      	subs	r3, r2, r3
 8018886:	b29a      	uxth	r2, r3
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801888c:	2300      	movs	r3, #0
}
 801888e:	4618      	mov	r0, r3
 8018890:	3710      	adds	r7, #16
 8018892:	46bd      	mov	sp, r7
 8018894:	bd80      	pop	{r7, pc}
 8018896:	bf00      	nop
 8018898:	080263dc 	.word	0x080263dc
 801889c:	08026540 	.word	0x08026540
 80188a0:	0802643c 	.word	0x0802643c
 80188a4:	0802654c 	.word	0x0802654c

080188a8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b082      	sub	sp, #8
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
 80188b0:	460b      	mov	r3, r1
 80188b2:	807b      	strh	r3, [r7, #2]
 80188b4:	4613      	mov	r3, r2
 80188b6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80188b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	da08      	bge.n	80188d2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80188c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80188c4:	425b      	negs	r3, r3
 80188c6:	4619      	mov	r1, r3
 80188c8:	6878      	ldr	r0, [r7, #4]
 80188ca:	f7ff ff9b 	bl	8018804 <pbuf_remove_header>
 80188ce:	4603      	mov	r3, r0
 80188d0:	e007      	b.n	80188e2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80188d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80188d6:	787a      	ldrb	r2, [r7, #1]
 80188d8:	4619      	mov	r1, r3
 80188da:	6878      	ldr	r0, [r7, #4]
 80188dc:	f7ff ff1a 	bl	8018714 <pbuf_add_header_impl>
 80188e0:	4603      	mov	r3, r0
  }
}
 80188e2:	4618      	mov	r0, r3
 80188e4:	3708      	adds	r7, #8
 80188e6:	46bd      	mov	sp, r7
 80188e8:	bd80      	pop	{r7, pc}

080188ea <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80188ea:	b580      	push	{r7, lr}
 80188ec:	b082      	sub	sp, #8
 80188ee:	af00      	add	r7, sp, #0
 80188f0:	6078      	str	r0, [r7, #4]
 80188f2:	460b      	mov	r3, r1
 80188f4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80188f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80188fa:	2201      	movs	r2, #1
 80188fc:	4619      	mov	r1, r3
 80188fe:	6878      	ldr	r0, [r7, #4]
 8018900:	f7ff ffd2 	bl	80188a8 <pbuf_header_impl>
 8018904:	4603      	mov	r3, r0
}
 8018906:	4618      	mov	r0, r3
 8018908:	3708      	adds	r7, #8
 801890a:	46bd      	mov	sp, r7
 801890c:	bd80      	pop	{r7, pc}
	...

08018910 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b088      	sub	sp, #32
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d10b      	bne.n	8018936 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d106      	bne.n	8018932 <pbuf_free+0x22>
 8018924:	4b3b      	ldr	r3, [pc, #236]	; (8018a14 <pbuf_free+0x104>)
 8018926:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801892a:	493b      	ldr	r1, [pc, #236]	; (8018a18 <pbuf_free+0x108>)
 801892c:	483b      	ldr	r0, [pc, #236]	; (8018a1c <pbuf_free+0x10c>)
 801892e:	f00b fa27 	bl	8023d80 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8018932:	2300      	movs	r3, #0
 8018934:	e069      	b.n	8018a0a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8018936:	2300      	movs	r3, #0
 8018938:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801893a:	e062      	b.n	8018a02 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801893c:	f009 ff8c 	bl	8022858 <sys_arch_protect>
 8018940:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	7b9b      	ldrb	r3, [r3, #14]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d106      	bne.n	8018958 <pbuf_free+0x48>
 801894a:	4b32      	ldr	r3, [pc, #200]	; (8018a14 <pbuf_free+0x104>)
 801894c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8018950:	4933      	ldr	r1, [pc, #204]	; (8018a20 <pbuf_free+0x110>)
 8018952:	4832      	ldr	r0, [pc, #200]	; (8018a1c <pbuf_free+0x10c>)
 8018954:	f00b fa14 	bl	8023d80 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	7b9b      	ldrb	r3, [r3, #14]
 801895c:	3b01      	subs	r3, #1
 801895e:	b2da      	uxtb	r2, r3
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	739a      	strb	r2, [r3, #14]
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	7b9b      	ldrb	r3, [r3, #14]
 8018968:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801896a:	69b8      	ldr	r0, [r7, #24]
 801896c:	f009 ff82 	bl	8022874 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8018970:	7dfb      	ldrb	r3, [r7, #23]
 8018972:	2b00      	cmp	r3, #0
 8018974:	d143      	bne.n	80189fe <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	7b1b      	ldrb	r3, [r3, #12]
 8018980:	f003 030f 	and.w	r3, r3, #15
 8018984:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	7b5b      	ldrb	r3, [r3, #13]
 801898a:	f003 0302 	and.w	r3, r3, #2
 801898e:	2b00      	cmp	r3, #0
 8018990:	d011      	beq.n	80189b6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8018996:	68bb      	ldr	r3, [r7, #8]
 8018998:	691b      	ldr	r3, [r3, #16]
 801899a:	2b00      	cmp	r3, #0
 801899c:	d106      	bne.n	80189ac <pbuf_free+0x9c>
 801899e:	4b1d      	ldr	r3, [pc, #116]	; (8018a14 <pbuf_free+0x104>)
 80189a0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80189a4:	491f      	ldr	r1, [pc, #124]	; (8018a24 <pbuf_free+0x114>)
 80189a6:	481d      	ldr	r0, [pc, #116]	; (8018a1c <pbuf_free+0x10c>)
 80189a8:	f00b f9ea 	bl	8023d80 <iprintf>
        pc->custom_free_function(p);
 80189ac:	68bb      	ldr	r3, [r7, #8]
 80189ae:	691b      	ldr	r3, [r3, #16]
 80189b0:	6878      	ldr	r0, [r7, #4]
 80189b2:	4798      	blx	r3
 80189b4:	e01d      	b.n	80189f2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80189b6:	7bfb      	ldrb	r3, [r7, #15]
 80189b8:	2b02      	cmp	r3, #2
 80189ba:	d104      	bne.n	80189c6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80189bc:	6879      	ldr	r1, [r7, #4]
 80189be:	200c      	movs	r0, #12
 80189c0:	f7ff f902 	bl	8017bc8 <memp_free>
 80189c4:	e015      	b.n	80189f2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80189c6:	7bfb      	ldrb	r3, [r7, #15]
 80189c8:	2b01      	cmp	r3, #1
 80189ca:	d104      	bne.n	80189d6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80189cc:	6879      	ldr	r1, [r7, #4]
 80189ce:	200b      	movs	r0, #11
 80189d0:	f7ff f8fa 	bl	8017bc8 <memp_free>
 80189d4:	e00d      	b.n	80189f2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80189d6:	7bfb      	ldrb	r3, [r7, #15]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d103      	bne.n	80189e4 <pbuf_free+0xd4>
          mem_free(p);
 80189dc:	6878      	ldr	r0, [r7, #4]
 80189de:	f7fe fd3f 	bl	8017460 <mem_free>
 80189e2:	e006      	b.n	80189f2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80189e4:	4b0b      	ldr	r3, [pc, #44]	; (8018a14 <pbuf_free+0x104>)
 80189e6:	f240 320f 	movw	r2, #783	; 0x30f
 80189ea:	490f      	ldr	r1, [pc, #60]	; (8018a28 <pbuf_free+0x118>)
 80189ec:	480b      	ldr	r0, [pc, #44]	; (8018a1c <pbuf_free+0x10c>)
 80189ee:	f00b f9c7 	bl	8023d80 <iprintf>
        }
      }
      count++;
 80189f2:	7ffb      	ldrb	r3, [r7, #31]
 80189f4:	3301      	adds	r3, #1
 80189f6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80189f8:	693b      	ldr	r3, [r7, #16]
 80189fa:	607b      	str	r3, [r7, #4]
 80189fc:	e001      	b.n	8018a02 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80189fe:	2300      	movs	r3, #0
 8018a00:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d199      	bne.n	801893c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8018a08:	7ffb      	ldrb	r3, [r7, #31]
}
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	3720      	adds	r7, #32
 8018a0e:	46bd      	mov	sp, r7
 8018a10:	bd80      	pop	{r7, pc}
 8018a12:	bf00      	nop
 8018a14:	080263dc 	.word	0x080263dc
 8018a18:	08026540 	.word	0x08026540
 8018a1c:	0802643c 	.word	0x0802643c
 8018a20:	0802656c 	.word	0x0802656c
 8018a24:	08026584 	.word	0x08026584
 8018a28:	080265a8 	.word	0x080265a8

08018a2c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8018a2c:	b480      	push	{r7}
 8018a2e:	b085      	sub	sp, #20
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8018a34:	2300      	movs	r3, #0
 8018a36:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8018a38:	e005      	b.n	8018a46 <pbuf_clen+0x1a>
    ++len;
 8018a3a:	89fb      	ldrh	r3, [r7, #14]
 8018a3c:	3301      	adds	r3, #1
 8018a3e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d1f6      	bne.n	8018a3a <pbuf_clen+0xe>
  }
  return len;
 8018a4c:	89fb      	ldrh	r3, [r7, #14]
}
 8018a4e:	4618      	mov	r0, r3
 8018a50:	3714      	adds	r7, #20
 8018a52:	46bd      	mov	sp, r7
 8018a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a58:	4770      	bx	lr
	...

08018a5c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8018a5c:	b580      	push	{r7, lr}
 8018a5e:	b084      	sub	sp, #16
 8018a60:	af00      	add	r7, sp, #0
 8018a62:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d016      	beq.n	8018a98 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8018a6a:	f009 fef5 	bl	8022858 <sys_arch_protect>
 8018a6e:	60f8      	str	r0, [r7, #12]
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	7b9b      	ldrb	r3, [r3, #14]
 8018a74:	3301      	adds	r3, #1
 8018a76:	b2da      	uxtb	r2, r3
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	739a      	strb	r2, [r3, #14]
 8018a7c:	68f8      	ldr	r0, [r7, #12]
 8018a7e:	f009 fef9 	bl	8022874 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	7b9b      	ldrb	r3, [r3, #14]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d106      	bne.n	8018a98 <pbuf_ref+0x3c>
 8018a8a:	4b05      	ldr	r3, [pc, #20]	; (8018aa0 <pbuf_ref+0x44>)
 8018a8c:	f240 3242 	movw	r2, #834	; 0x342
 8018a90:	4904      	ldr	r1, [pc, #16]	; (8018aa4 <pbuf_ref+0x48>)
 8018a92:	4805      	ldr	r0, [pc, #20]	; (8018aa8 <pbuf_ref+0x4c>)
 8018a94:	f00b f974 	bl	8023d80 <iprintf>
  }
}
 8018a98:	bf00      	nop
 8018a9a:	3710      	adds	r7, #16
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	bd80      	pop	{r7, pc}
 8018aa0:	080263dc 	.word	0x080263dc
 8018aa4:	080265bc 	.word	0x080265bc
 8018aa8:	0802643c 	.word	0x0802643c

08018aac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b084      	sub	sp, #16
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	6078      	str	r0, [r7, #4]
 8018ab4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d002      	beq.n	8018ac2 <pbuf_cat+0x16>
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d107      	bne.n	8018ad2 <pbuf_cat+0x26>
 8018ac2:	4b20      	ldr	r3, [pc, #128]	; (8018b44 <pbuf_cat+0x98>)
 8018ac4:	f240 3259 	movw	r2, #857	; 0x359
 8018ac8:	491f      	ldr	r1, [pc, #124]	; (8018b48 <pbuf_cat+0x9c>)
 8018aca:	4820      	ldr	r0, [pc, #128]	; (8018b4c <pbuf_cat+0xa0>)
 8018acc:	f00b f958 	bl	8023d80 <iprintf>
 8018ad0:	e034      	b.n	8018b3c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	60fb      	str	r3, [r7, #12]
 8018ad6:	e00a      	b.n	8018aee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	891a      	ldrh	r2, [r3, #8]
 8018adc:	683b      	ldr	r3, [r7, #0]
 8018ade:	891b      	ldrh	r3, [r3, #8]
 8018ae0:	4413      	add	r3, r2
 8018ae2:	b29a      	uxth	r2, r3
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	60fb      	str	r3, [r7, #12]
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d1f0      	bne.n	8018ad8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	891a      	ldrh	r2, [r3, #8]
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	895b      	ldrh	r3, [r3, #10]
 8018afe:	429a      	cmp	r2, r3
 8018b00:	d006      	beq.n	8018b10 <pbuf_cat+0x64>
 8018b02:	4b10      	ldr	r3, [pc, #64]	; (8018b44 <pbuf_cat+0x98>)
 8018b04:	f240 3262 	movw	r2, #866	; 0x362
 8018b08:	4911      	ldr	r1, [pc, #68]	; (8018b50 <pbuf_cat+0xa4>)
 8018b0a:	4810      	ldr	r0, [pc, #64]	; (8018b4c <pbuf_cat+0xa0>)
 8018b0c:	f00b f938 	bl	8023d80 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d006      	beq.n	8018b26 <pbuf_cat+0x7a>
 8018b18:	4b0a      	ldr	r3, [pc, #40]	; (8018b44 <pbuf_cat+0x98>)
 8018b1a:	f240 3263 	movw	r2, #867	; 0x363
 8018b1e:	490d      	ldr	r1, [pc, #52]	; (8018b54 <pbuf_cat+0xa8>)
 8018b20:	480a      	ldr	r0, [pc, #40]	; (8018b4c <pbuf_cat+0xa0>)
 8018b22:	f00b f92d 	bl	8023d80 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	891a      	ldrh	r2, [r3, #8]
 8018b2a:	683b      	ldr	r3, [r7, #0]
 8018b2c:	891b      	ldrh	r3, [r3, #8]
 8018b2e:	4413      	add	r3, r2
 8018b30:	b29a      	uxth	r2, r3
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	683a      	ldr	r2, [r7, #0]
 8018b3a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8018b3c:	3710      	adds	r7, #16
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	bd80      	pop	{r7, pc}
 8018b42:	bf00      	nop
 8018b44:	080263dc 	.word	0x080263dc
 8018b48:	080265d0 	.word	0x080265d0
 8018b4c:	0802643c 	.word	0x0802643c
 8018b50:	08026608 	.word	0x08026608
 8018b54:	08026638 	.word	0x08026638

08018b58 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b082      	sub	sp, #8
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
 8018b60:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8018b62:	6839      	ldr	r1, [r7, #0]
 8018b64:	6878      	ldr	r0, [r7, #4]
 8018b66:	f7ff ffa1 	bl	8018aac <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8018b6a:	6838      	ldr	r0, [r7, #0]
 8018b6c:	f7ff ff76 	bl	8018a5c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8018b70:	bf00      	nop
 8018b72:	3708      	adds	r7, #8
 8018b74:	46bd      	mov	sp, r7
 8018b76:	bd80      	pop	{r7, pc}

08018b78 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b086      	sub	sp, #24
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
 8018b80:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8018b82:	2300      	movs	r3, #0
 8018b84:	617b      	str	r3, [r7, #20]
 8018b86:	2300      	movs	r3, #0
 8018b88:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d008      	beq.n	8018ba2 <pbuf_copy+0x2a>
 8018b90:	683b      	ldr	r3, [r7, #0]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d005      	beq.n	8018ba2 <pbuf_copy+0x2a>
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	891a      	ldrh	r2, [r3, #8]
 8018b9a:	683b      	ldr	r3, [r7, #0]
 8018b9c:	891b      	ldrh	r3, [r3, #8]
 8018b9e:	429a      	cmp	r2, r3
 8018ba0:	d209      	bcs.n	8018bb6 <pbuf_copy+0x3e>
 8018ba2:	4b57      	ldr	r3, [pc, #348]	; (8018d00 <pbuf_copy+0x188>)
 8018ba4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8018ba8:	4956      	ldr	r1, [pc, #344]	; (8018d04 <pbuf_copy+0x18c>)
 8018baa:	4857      	ldr	r0, [pc, #348]	; (8018d08 <pbuf_copy+0x190>)
 8018bac:	f00b f8e8 	bl	8023d80 <iprintf>
 8018bb0:	f06f 030f 	mvn.w	r3, #15
 8018bb4:	e09f      	b.n	8018cf6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	895b      	ldrh	r3, [r3, #10]
 8018bba:	461a      	mov	r2, r3
 8018bbc:	697b      	ldr	r3, [r7, #20]
 8018bbe:	1ad2      	subs	r2, r2, r3
 8018bc0:	683b      	ldr	r3, [r7, #0]
 8018bc2:	895b      	ldrh	r3, [r3, #10]
 8018bc4:	4619      	mov	r1, r3
 8018bc6:	693b      	ldr	r3, [r7, #16]
 8018bc8:	1acb      	subs	r3, r1, r3
 8018bca:	429a      	cmp	r2, r3
 8018bcc:	d306      	bcc.n	8018bdc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8018bce:	683b      	ldr	r3, [r7, #0]
 8018bd0:	895b      	ldrh	r3, [r3, #10]
 8018bd2:	461a      	mov	r2, r3
 8018bd4:	693b      	ldr	r3, [r7, #16]
 8018bd6:	1ad3      	subs	r3, r2, r3
 8018bd8:	60fb      	str	r3, [r7, #12]
 8018bda:	e005      	b.n	8018be8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	895b      	ldrh	r3, [r3, #10]
 8018be0:	461a      	mov	r2, r3
 8018be2:	697b      	ldr	r3, [r7, #20]
 8018be4:	1ad3      	subs	r3, r2, r3
 8018be6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	685a      	ldr	r2, [r3, #4]
 8018bec:	697b      	ldr	r3, [r7, #20]
 8018bee:	18d0      	adds	r0, r2, r3
 8018bf0:	683b      	ldr	r3, [r7, #0]
 8018bf2:	685a      	ldr	r2, [r3, #4]
 8018bf4:	693b      	ldr	r3, [r7, #16]
 8018bf6:	4413      	add	r3, r2
 8018bf8:	68fa      	ldr	r2, [r7, #12]
 8018bfa:	4619      	mov	r1, r3
 8018bfc:	f00a ffb0 	bl	8023b60 <memcpy>
    offset_to += len;
 8018c00:	697a      	ldr	r2, [r7, #20]
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	4413      	add	r3, r2
 8018c06:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8018c08:	693a      	ldr	r2, [r7, #16]
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	4413      	add	r3, r2
 8018c0e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	895b      	ldrh	r3, [r3, #10]
 8018c14:	461a      	mov	r2, r3
 8018c16:	697b      	ldr	r3, [r7, #20]
 8018c18:	4293      	cmp	r3, r2
 8018c1a:	d906      	bls.n	8018c2a <pbuf_copy+0xb2>
 8018c1c:	4b38      	ldr	r3, [pc, #224]	; (8018d00 <pbuf_copy+0x188>)
 8018c1e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8018c22:	493a      	ldr	r1, [pc, #232]	; (8018d0c <pbuf_copy+0x194>)
 8018c24:	4838      	ldr	r0, [pc, #224]	; (8018d08 <pbuf_copy+0x190>)
 8018c26:	f00b f8ab 	bl	8023d80 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8018c2a:	683b      	ldr	r3, [r7, #0]
 8018c2c:	895b      	ldrh	r3, [r3, #10]
 8018c2e:	461a      	mov	r2, r3
 8018c30:	693b      	ldr	r3, [r7, #16]
 8018c32:	4293      	cmp	r3, r2
 8018c34:	d906      	bls.n	8018c44 <pbuf_copy+0xcc>
 8018c36:	4b32      	ldr	r3, [pc, #200]	; (8018d00 <pbuf_copy+0x188>)
 8018c38:	f240 32da 	movw	r2, #986	; 0x3da
 8018c3c:	4934      	ldr	r1, [pc, #208]	; (8018d10 <pbuf_copy+0x198>)
 8018c3e:	4832      	ldr	r0, [pc, #200]	; (8018d08 <pbuf_copy+0x190>)
 8018c40:	f00b f89e 	bl	8023d80 <iprintf>
    if (offset_from >= p_from->len) {
 8018c44:	683b      	ldr	r3, [r7, #0]
 8018c46:	895b      	ldrh	r3, [r3, #10]
 8018c48:	461a      	mov	r2, r3
 8018c4a:	693b      	ldr	r3, [r7, #16]
 8018c4c:	4293      	cmp	r3, r2
 8018c4e:	d304      	bcc.n	8018c5a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8018c50:	2300      	movs	r3, #0
 8018c52:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8018c54:	683b      	ldr	r3, [r7, #0]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	895b      	ldrh	r3, [r3, #10]
 8018c5e:	461a      	mov	r2, r3
 8018c60:	697b      	ldr	r3, [r7, #20]
 8018c62:	4293      	cmp	r3, r2
 8018c64:	d114      	bne.n	8018c90 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8018c66:	2300      	movs	r3, #0
 8018c68:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d10c      	bne.n	8018c90 <pbuf_copy+0x118>
 8018c76:	683b      	ldr	r3, [r7, #0]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d009      	beq.n	8018c90 <pbuf_copy+0x118>
 8018c7c:	4b20      	ldr	r3, [pc, #128]	; (8018d00 <pbuf_copy+0x188>)
 8018c7e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8018c82:	4924      	ldr	r1, [pc, #144]	; (8018d14 <pbuf_copy+0x19c>)
 8018c84:	4820      	ldr	r0, [pc, #128]	; (8018d08 <pbuf_copy+0x190>)
 8018c86:	f00b f87b 	bl	8023d80 <iprintf>
 8018c8a:	f06f 030f 	mvn.w	r3, #15
 8018c8e:	e032      	b.n	8018cf6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8018c90:	683b      	ldr	r3, [r7, #0]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d013      	beq.n	8018cbe <pbuf_copy+0x146>
 8018c96:	683b      	ldr	r3, [r7, #0]
 8018c98:	895a      	ldrh	r2, [r3, #10]
 8018c9a:	683b      	ldr	r3, [r7, #0]
 8018c9c:	891b      	ldrh	r3, [r3, #8]
 8018c9e:	429a      	cmp	r2, r3
 8018ca0:	d10d      	bne.n	8018cbe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018ca2:	683b      	ldr	r3, [r7, #0]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d009      	beq.n	8018cbe <pbuf_copy+0x146>
 8018caa:	4b15      	ldr	r3, [pc, #84]	; (8018d00 <pbuf_copy+0x188>)
 8018cac:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8018cb0:	4919      	ldr	r1, [pc, #100]	; (8018d18 <pbuf_copy+0x1a0>)
 8018cb2:	4815      	ldr	r0, [pc, #84]	; (8018d08 <pbuf_copy+0x190>)
 8018cb4:	f00b f864 	bl	8023d80 <iprintf>
 8018cb8:	f06f 0305 	mvn.w	r3, #5
 8018cbc:	e01b      	b.n	8018cf6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d013      	beq.n	8018cec <pbuf_copy+0x174>
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	895a      	ldrh	r2, [r3, #10]
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	891b      	ldrh	r3, [r3, #8]
 8018ccc:	429a      	cmp	r2, r3
 8018cce:	d10d      	bne.n	8018cec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d009      	beq.n	8018cec <pbuf_copy+0x174>
 8018cd8:	4b09      	ldr	r3, [pc, #36]	; (8018d00 <pbuf_copy+0x188>)
 8018cda:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8018cde:	490e      	ldr	r1, [pc, #56]	; (8018d18 <pbuf_copy+0x1a0>)
 8018ce0:	4809      	ldr	r0, [pc, #36]	; (8018d08 <pbuf_copy+0x190>)
 8018ce2:	f00b f84d 	bl	8023d80 <iprintf>
 8018ce6:	f06f 0305 	mvn.w	r3, #5
 8018cea:	e004      	b.n	8018cf6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8018cec:	683b      	ldr	r3, [r7, #0]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	f47f af61 	bne.w	8018bb6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8018cf4:	2300      	movs	r3, #0
}
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	3718      	adds	r7, #24
 8018cfa:	46bd      	mov	sp, r7
 8018cfc:	bd80      	pop	{r7, pc}
 8018cfe:	bf00      	nop
 8018d00:	080263dc 	.word	0x080263dc
 8018d04:	08026684 	.word	0x08026684
 8018d08:	0802643c 	.word	0x0802643c
 8018d0c:	080266b4 	.word	0x080266b4
 8018d10:	080266cc 	.word	0x080266cc
 8018d14:	080266e8 	.word	0x080266e8
 8018d18:	080266f8 	.word	0x080266f8

08018d1c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b088      	sub	sp, #32
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	60f8      	str	r0, [r7, #12]
 8018d24:	60b9      	str	r1, [r7, #8]
 8018d26:	4611      	mov	r1, r2
 8018d28:	461a      	mov	r2, r3
 8018d2a:	460b      	mov	r3, r1
 8018d2c:	80fb      	strh	r3, [r7, #6]
 8018d2e:	4613      	mov	r3, r2
 8018d30:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8018d32:	2300      	movs	r3, #0
 8018d34:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8018d36:	2300      	movs	r3, #0
 8018d38:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d108      	bne.n	8018d52 <pbuf_copy_partial+0x36>
 8018d40:	4b2b      	ldr	r3, [pc, #172]	; (8018df0 <pbuf_copy_partial+0xd4>)
 8018d42:	f240 420a 	movw	r2, #1034	; 0x40a
 8018d46:	492b      	ldr	r1, [pc, #172]	; (8018df4 <pbuf_copy_partial+0xd8>)
 8018d48:	482b      	ldr	r0, [pc, #172]	; (8018df8 <pbuf_copy_partial+0xdc>)
 8018d4a:	f00b f819 	bl	8023d80 <iprintf>
 8018d4e:	2300      	movs	r3, #0
 8018d50:	e04a      	b.n	8018de8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8018d52:	68bb      	ldr	r3, [r7, #8]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d108      	bne.n	8018d6a <pbuf_copy_partial+0x4e>
 8018d58:	4b25      	ldr	r3, [pc, #148]	; (8018df0 <pbuf_copy_partial+0xd4>)
 8018d5a:	f240 420b 	movw	r2, #1035	; 0x40b
 8018d5e:	4927      	ldr	r1, [pc, #156]	; (8018dfc <pbuf_copy_partial+0xe0>)
 8018d60:	4825      	ldr	r0, [pc, #148]	; (8018df8 <pbuf_copy_partial+0xdc>)
 8018d62:	f00b f80d 	bl	8023d80 <iprintf>
 8018d66:	2300      	movs	r3, #0
 8018d68:	e03e      	b.n	8018de8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	61fb      	str	r3, [r7, #28]
 8018d6e:	e034      	b.n	8018dda <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8018d70:	88bb      	ldrh	r3, [r7, #4]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d00a      	beq.n	8018d8c <pbuf_copy_partial+0x70>
 8018d76:	69fb      	ldr	r3, [r7, #28]
 8018d78:	895b      	ldrh	r3, [r3, #10]
 8018d7a:	88ba      	ldrh	r2, [r7, #4]
 8018d7c:	429a      	cmp	r2, r3
 8018d7e:	d305      	bcc.n	8018d8c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8018d80:	69fb      	ldr	r3, [r7, #28]
 8018d82:	895b      	ldrh	r3, [r3, #10]
 8018d84:	88ba      	ldrh	r2, [r7, #4]
 8018d86:	1ad3      	subs	r3, r2, r3
 8018d88:	80bb      	strh	r3, [r7, #4]
 8018d8a:	e023      	b.n	8018dd4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8018d8c:	69fb      	ldr	r3, [r7, #28]
 8018d8e:	895a      	ldrh	r2, [r3, #10]
 8018d90:	88bb      	ldrh	r3, [r7, #4]
 8018d92:	1ad3      	subs	r3, r2, r3
 8018d94:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8018d96:	8b3a      	ldrh	r2, [r7, #24]
 8018d98:	88fb      	ldrh	r3, [r7, #6]
 8018d9a:	429a      	cmp	r2, r3
 8018d9c:	d901      	bls.n	8018da2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8018d9e:	88fb      	ldrh	r3, [r7, #6]
 8018da0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8018da2:	8b7b      	ldrh	r3, [r7, #26]
 8018da4:	68ba      	ldr	r2, [r7, #8]
 8018da6:	18d0      	adds	r0, r2, r3
 8018da8:	69fb      	ldr	r3, [r7, #28]
 8018daa:	685a      	ldr	r2, [r3, #4]
 8018dac:	88bb      	ldrh	r3, [r7, #4]
 8018dae:	4413      	add	r3, r2
 8018db0:	8b3a      	ldrh	r2, [r7, #24]
 8018db2:	4619      	mov	r1, r3
 8018db4:	f00a fed4 	bl	8023b60 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8018db8:	8afa      	ldrh	r2, [r7, #22]
 8018dba:	8b3b      	ldrh	r3, [r7, #24]
 8018dbc:	4413      	add	r3, r2
 8018dbe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8018dc0:	8b7a      	ldrh	r2, [r7, #26]
 8018dc2:	8b3b      	ldrh	r3, [r7, #24]
 8018dc4:	4413      	add	r3, r2
 8018dc6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8018dc8:	88fa      	ldrh	r2, [r7, #6]
 8018dca:	8b3b      	ldrh	r3, [r7, #24]
 8018dcc:	1ad3      	subs	r3, r2, r3
 8018dce:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018dd4:	69fb      	ldr	r3, [r7, #28]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	61fb      	str	r3, [r7, #28]
 8018dda:	88fb      	ldrh	r3, [r7, #6]
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d002      	beq.n	8018de6 <pbuf_copy_partial+0xca>
 8018de0:	69fb      	ldr	r3, [r7, #28]
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d1c4      	bne.n	8018d70 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8018de6:	8afb      	ldrh	r3, [r7, #22]
}
 8018de8:	4618      	mov	r0, r3
 8018dea:	3720      	adds	r7, #32
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd80      	pop	{r7, pc}
 8018df0:	080263dc 	.word	0x080263dc
 8018df4:	08026724 	.word	0x08026724
 8018df8:	0802643c 	.word	0x0802643c
 8018dfc:	08026744 	.word	0x08026744

08018e00 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b084      	sub	sp, #16
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	4603      	mov	r3, r0
 8018e08:	603a      	str	r2, [r7, #0]
 8018e0a:	71fb      	strb	r3, [r7, #7]
 8018e0c:	460b      	mov	r3, r1
 8018e0e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8018e10:	683b      	ldr	r3, [r7, #0]
 8018e12:	8919      	ldrh	r1, [r3, #8]
 8018e14:	88ba      	ldrh	r2, [r7, #4]
 8018e16:	79fb      	ldrb	r3, [r7, #7]
 8018e18:	4618      	mov	r0, r3
 8018e1a:	f7ff fa95 	bl	8018348 <pbuf_alloc>
 8018e1e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d101      	bne.n	8018e2a <pbuf_clone+0x2a>
    return NULL;
 8018e26:	2300      	movs	r3, #0
 8018e28:	e011      	b.n	8018e4e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8018e2a:	6839      	ldr	r1, [r7, #0]
 8018e2c:	68f8      	ldr	r0, [r7, #12]
 8018e2e:	f7ff fea3 	bl	8018b78 <pbuf_copy>
 8018e32:	4603      	mov	r3, r0
 8018e34:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8018e36:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d006      	beq.n	8018e4c <pbuf_clone+0x4c>
 8018e3e:	4b06      	ldr	r3, [pc, #24]	; (8018e58 <pbuf_clone+0x58>)
 8018e40:	f240 5224 	movw	r2, #1316	; 0x524
 8018e44:	4905      	ldr	r1, [pc, #20]	; (8018e5c <pbuf_clone+0x5c>)
 8018e46:	4806      	ldr	r0, [pc, #24]	; (8018e60 <pbuf_clone+0x60>)
 8018e48:	f00a ff9a 	bl	8023d80 <iprintf>
  return q;
 8018e4c:	68fb      	ldr	r3, [r7, #12]
}
 8018e4e:	4618      	mov	r0, r3
 8018e50:	3710      	adds	r7, #16
 8018e52:	46bd      	mov	sp, r7
 8018e54:	bd80      	pop	{r7, pc}
 8018e56:	bf00      	nop
 8018e58:	080263dc 	.word	0x080263dc
 8018e5c:	08026850 	.word	0x08026850
 8018e60:	0802643c 	.word	0x0802643c

08018e64 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8018e64:	b580      	push	{r7, lr}
 8018e66:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018e68:	f00a ffa2 	bl	8023db0 <rand>
 8018e6c:	4603      	mov	r3, r0
 8018e6e:	b29b      	uxth	r3, r3
 8018e70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018e74:	b29b      	uxth	r3, r3
 8018e76:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018e7a:	b29a      	uxth	r2, r3
 8018e7c:	4b01      	ldr	r3, [pc, #4]	; (8018e84 <tcp_init+0x20>)
 8018e7e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018e80:	bf00      	nop
 8018e82:	bd80      	pop	{r7, pc}
 8018e84:	2000002c 	.word	0x2000002c

08018e88 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b082      	sub	sp, #8
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	7d1b      	ldrb	r3, [r3, #20]
 8018e94:	2b01      	cmp	r3, #1
 8018e96:	d105      	bne.n	8018ea4 <tcp_free+0x1c>
 8018e98:	4b06      	ldr	r3, [pc, #24]	; (8018eb4 <tcp_free+0x2c>)
 8018e9a:	22d4      	movs	r2, #212	; 0xd4
 8018e9c:	4906      	ldr	r1, [pc, #24]	; (8018eb8 <tcp_free+0x30>)
 8018e9e:	4807      	ldr	r0, [pc, #28]	; (8018ebc <tcp_free+0x34>)
 8018ea0:	f00a ff6e 	bl	8023d80 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8018ea4:	6879      	ldr	r1, [r7, #4]
 8018ea6:	2001      	movs	r0, #1
 8018ea8:	f7fe fe8e 	bl	8017bc8 <memp_free>
}
 8018eac:	bf00      	nop
 8018eae:	3708      	adds	r7, #8
 8018eb0:	46bd      	mov	sp, r7
 8018eb2:	bd80      	pop	{r7, pc}
 8018eb4:	080268dc 	.word	0x080268dc
 8018eb8:	0802690c 	.word	0x0802690c
 8018ebc:	08026920 	.word	0x08026920

08018ec0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8018ec0:	b580      	push	{r7, lr}
 8018ec2:	b082      	sub	sp, #8
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	7d1b      	ldrb	r3, [r3, #20]
 8018ecc:	2b01      	cmp	r3, #1
 8018ece:	d105      	bne.n	8018edc <tcp_free_listen+0x1c>
 8018ed0:	4b06      	ldr	r3, [pc, #24]	; (8018eec <tcp_free_listen+0x2c>)
 8018ed2:	22df      	movs	r2, #223	; 0xdf
 8018ed4:	4906      	ldr	r1, [pc, #24]	; (8018ef0 <tcp_free_listen+0x30>)
 8018ed6:	4807      	ldr	r0, [pc, #28]	; (8018ef4 <tcp_free_listen+0x34>)
 8018ed8:	f00a ff52 	bl	8023d80 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8018edc:	6879      	ldr	r1, [r7, #4]
 8018ede:	2002      	movs	r0, #2
 8018ee0:	f7fe fe72 	bl	8017bc8 <memp_free>
}
 8018ee4:	bf00      	nop
 8018ee6:	3708      	adds	r7, #8
 8018ee8:	46bd      	mov	sp, r7
 8018eea:	bd80      	pop	{r7, pc}
 8018eec:	080268dc 	.word	0x080268dc
 8018ef0:	08026948 	.word	0x08026948
 8018ef4:	08026920 	.word	0x08026920

08018ef8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8018ef8:	b580      	push	{r7, lr}
 8018efa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8018efc:	f001 f9be 	bl	801a27c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8018f00:	4b07      	ldr	r3, [pc, #28]	; (8018f20 <tcp_tmr+0x28>)
 8018f02:	781b      	ldrb	r3, [r3, #0]
 8018f04:	3301      	adds	r3, #1
 8018f06:	b2da      	uxtb	r2, r3
 8018f08:	4b05      	ldr	r3, [pc, #20]	; (8018f20 <tcp_tmr+0x28>)
 8018f0a:	701a      	strb	r2, [r3, #0]
 8018f0c:	4b04      	ldr	r3, [pc, #16]	; (8018f20 <tcp_tmr+0x28>)
 8018f0e:	781b      	ldrb	r3, [r3, #0]
 8018f10:	f003 0301 	and.w	r3, r3, #1
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d001      	beq.n	8018f1c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8018f18:	f000 fe70 	bl	8019bfc <tcp_slowtmr>
  }
}
 8018f1c:	bf00      	nop
 8018f1e:	bd80      	pop	{r7, pc}
 8018f20:	2000bfad 	.word	0x2000bfad

08018f24 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b084      	sub	sp, #16
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
 8018f2c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8018f2e:	683b      	ldr	r3, [r7, #0]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d105      	bne.n	8018f40 <tcp_remove_listener+0x1c>
 8018f34:	4b0d      	ldr	r3, [pc, #52]	; (8018f6c <tcp_remove_listener+0x48>)
 8018f36:	22ff      	movs	r2, #255	; 0xff
 8018f38:	490d      	ldr	r1, [pc, #52]	; (8018f70 <tcp_remove_listener+0x4c>)
 8018f3a:	480e      	ldr	r0, [pc, #56]	; (8018f74 <tcp_remove_listener+0x50>)
 8018f3c:	f00a ff20 	bl	8023d80 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	60fb      	str	r3, [r7, #12]
 8018f44:	e00a      	b.n	8018f5c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018f4a:	683a      	ldr	r2, [r7, #0]
 8018f4c:	429a      	cmp	r2, r3
 8018f4e:	d102      	bne.n	8018f56 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	2200      	movs	r2, #0
 8018f54:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	68db      	ldr	r3, [r3, #12]
 8018f5a:	60fb      	str	r3, [r7, #12]
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d1f1      	bne.n	8018f46 <tcp_remove_listener+0x22>
    }
  }
}
 8018f62:	bf00      	nop
 8018f64:	bf00      	nop
 8018f66:	3710      	adds	r7, #16
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	bd80      	pop	{r7, pc}
 8018f6c:	080268dc 	.word	0x080268dc
 8018f70:	08026964 	.word	0x08026964
 8018f74:	08026920 	.word	0x08026920

08018f78 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8018f78:	b580      	push	{r7, lr}
 8018f7a:	b084      	sub	sp, #16
 8018f7c:	af00      	add	r7, sp, #0
 8018f7e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d106      	bne.n	8018f94 <tcp_listen_closed+0x1c>
 8018f86:	4b14      	ldr	r3, [pc, #80]	; (8018fd8 <tcp_listen_closed+0x60>)
 8018f88:	f240 1211 	movw	r2, #273	; 0x111
 8018f8c:	4913      	ldr	r1, [pc, #76]	; (8018fdc <tcp_listen_closed+0x64>)
 8018f8e:	4814      	ldr	r0, [pc, #80]	; (8018fe0 <tcp_listen_closed+0x68>)
 8018f90:	f00a fef6 	bl	8023d80 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	7d1b      	ldrb	r3, [r3, #20]
 8018f98:	2b01      	cmp	r3, #1
 8018f9a:	d006      	beq.n	8018faa <tcp_listen_closed+0x32>
 8018f9c:	4b0e      	ldr	r3, [pc, #56]	; (8018fd8 <tcp_listen_closed+0x60>)
 8018f9e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8018fa2:	4910      	ldr	r1, [pc, #64]	; (8018fe4 <tcp_listen_closed+0x6c>)
 8018fa4:	480e      	ldr	r0, [pc, #56]	; (8018fe0 <tcp_listen_closed+0x68>)
 8018fa6:	f00a feeb 	bl	8023d80 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018faa:	2301      	movs	r3, #1
 8018fac:	60fb      	str	r3, [r7, #12]
 8018fae:	e00b      	b.n	8018fc8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8018fb0:	4a0d      	ldr	r2, [pc, #52]	; (8018fe8 <tcp_listen_closed+0x70>)
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	6879      	ldr	r1, [r7, #4]
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	f7ff ffb1 	bl	8018f24 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	3301      	adds	r3, #1
 8018fc6:	60fb      	str	r3, [r7, #12]
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	2b03      	cmp	r3, #3
 8018fcc:	d9f0      	bls.n	8018fb0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8018fce:	bf00      	nop
 8018fd0:	bf00      	nop
 8018fd2:	3710      	adds	r7, #16
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	bd80      	pop	{r7, pc}
 8018fd8:	080268dc 	.word	0x080268dc
 8018fdc:	0802698c 	.word	0x0802698c
 8018fe0:	08026920 	.word	0x08026920
 8018fe4:	08026998 	.word	0x08026998
 8018fe8:	08028950 	.word	0x08028950

08018fec <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8018fec:	b5b0      	push	{r4, r5, r7, lr}
 8018fee:	b088      	sub	sp, #32
 8018ff0:	af04      	add	r7, sp, #16
 8018ff2:	6078      	str	r0, [r7, #4]
 8018ff4:	460b      	mov	r3, r1
 8018ff6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d106      	bne.n	801900c <tcp_close_shutdown+0x20>
 8018ffe:	4b63      	ldr	r3, [pc, #396]	; (801918c <tcp_close_shutdown+0x1a0>)
 8019000:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8019004:	4962      	ldr	r1, [pc, #392]	; (8019190 <tcp_close_shutdown+0x1a4>)
 8019006:	4863      	ldr	r0, [pc, #396]	; (8019194 <tcp_close_shutdown+0x1a8>)
 8019008:	f00a feba 	bl	8023d80 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801900c:	78fb      	ldrb	r3, [r7, #3]
 801900e:	2b00      	cmp	r3, #0
 8019010:	d066      	beq.n	80190e0 <tcp_close_shutdown+0xf4>
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	7d1b      	ldrb	r3, [r3, #20]
 8019016:	2b04      	cmp	r3, #4
 8019018:	d003      	beq.n	8019022 <tcp_close_shutdown+0x36>
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	7d1b      	ldrb	r3, [r3, #20]
 801901e:	2b07      	cmp	r3, #7
 8019020:	d15e      	bne.n	80190e0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019026:	2b00      	cmp	r3, #0
 8019028:	d104      	bne.n	8019034 <tcp_close_shutdown+0x48>
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801902e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019032:	d055      	beq.n	80190e0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	8b5b      	ldrh	r3, [r3, #26]
 8019038:	f003 0310 	and.w	r3, r3, #16
 801903c:	2b00      	cmp	r3, #0
 801903e:	d106      	bne.n	801904e <tcp_close_shutdown+0x62>
 8019040:	4b52      	ldr	r3, [pc, #328]	; (801918c <tcp_close_shutdown+0x1a0>)
 8019042:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8019046:	4954      	ldr	r1, [pc, #336]	; (8019198 <tcp_close_shutdown+0x1ac>)
 8019048:	4852      	ldr	r0, [pc, #328]	; (8019194 <tcp_close_shutdown+0x1a8>)
 801904a:	f00a fe99 	bl	8023d80 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019056:	687d      	ldr	r5, [r7, #4]
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	3304      	adds	r3, #4
 801905c:	687a      	ldr	r2, [r7, #4]
 801905e:	8ad2      	ldrh	r2, [r2, #22]
 8019060:	6879      	ldr	r1, [r7, #4]
 8019062:	8b09      	ldrh	r1, [r1, #24]
 8019064:	9102      	str	r1, [sp, #8]
 8019066:	9201      	str	r2, [sp, #4]
 8019068:	9300      	str	r3, [sp, #0]
 801906a:	462b      	mov	r3, r5
 801906c:	4622      	mov	r2, r4
 801906e:	4601      	mov	r1, r0
 8019070:	6878      	ldr	r0, [r7, #4]
 8019072:	f005 fed3 	bl	801ee1c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8019076:	6878      	ldr	r0, [r7, #4]
 8019078:	f001 fcb0 	bl	801a9dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801907c:	4b47      	ldr	r3, [pc, #284]	; (801919c <tcp_close_shutdown+0x1b0>)
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	687a      	ldr	r2, [r7, #4]
 8019082:	429a      	cmp	r2, r3
 8019084:	d105      	bne.n	8019092 <tcp_close_shutdown+0xa6>
 8019086:	4b45      	ldr	r3, [pc, #276]	; (801919c <tcp_close_shutdown+0x1b0>)
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	68db      	ldr	r3, [r3, #12]
 801908c:	4a43      	ldr	r2, [pc, #268]	; (801919c <tcp_close_shutdown+0x1b0>)
 801908e:	6013      	str	r3, [r2, #0]
 8019090:	e013      	b.n	80190ba <tcp_close_shutdown+0xce>
 8019092:	4b42      	ldr	r3, [pc, #264]	; (801919c <tcp_close_shutdown+0x1b0>)
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	60fb      	str	r3, [r7, #12]
 8019098:	e00c      	b.n	80190b4 <tcp_close_shutdown+0xc8>
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	68db      	ldr	r3, [r3, #12]
 801909e:	687a      	ldr	r2, [r7, #4]
 80190a0:	429a      	cmp	r2, r3
 80190a2:	d104      	bne.n	80190ae <tcp_close_shutdown+0xc2>
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	68da      	ldr	r2, [r3, #12]
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	60da      	str	r2, [r3, #12]
 80190ac:	e005      	b.n	80190ba <tcp_close_shutdown+0xce>
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	68db      	ldr	r3, [r3, #12]
 80190b2:	60fb      	str	r3, [r7, #12]
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d1ef      	bne.n	801909a <tcp_close_shutdown+0xae>
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	2200      	movs	r2, #0
 80190be:	60da      	str	r2, [r3, #12]
 80190c0:	4b37      	ldr	r3, [pc, #220]	; (80191a0 <tcp_close_shutdown+0x1b4>)
 80190c2:	2201      	movs	r2, #1
 80190c4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80190c6:	4b37      	ldr	r3, [pc, #220]	; (80191a4 <tcp_close_shutdown+0x1b8>)
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	687a      	ldr	r2, [r7, #4]
 80190cc:	429a      	cmp	r2, r3
 80190ce:	d102      	bne.n	80190d6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80190d0:	f004 f948 	bl	801d364 <tcp_trigger_input_pcb_close>
 80190d4:	e002      	b.n	80190dc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80190d6:	6878      	ldr	r0, [r7, #4]
 80190d8:	f7ff fed6 	bl	8018e88 <tcp_free>
      }
      return ERR_OK;
 80190dc:	2300      	movs	r3, #0
 80190de:	e050      	b.n	8019182 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	7d1b      	ldrb	r3, [r3, #20]
 80190e4:	2b02      	cmp	r3, #2
 80190e6:	d03b      	beq.n	8019160 <tcp_close_shutdown+0x174>
 80190e8:	2b02      	cmp	r3, #2
 80190ea:	dc44      	bgt.n	8019176 <tcp_close_shutdown+0x18a>
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d002      	beq.n	80190f6 <tcp_close_shutdown+0x10a>
 80190f0:	2b01      	cmp	r3, #1
 80190f2:	d02a      	beq.n	801914a <tcp_close_shutdown+0x15e>
 80190f4:	e03f      	b.n	8019176 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	8adb      	ldrh	r3, [r3, #22]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d021      	beq.n	8019142 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80190fe:	4b2a      	ldr	r3, [pc, #168]	; (80191a8 <tcp_close_shutdown+0x1bc>)
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	687a      	ldr	r2, [r7, #4]
 8019104:	429a      	cmp	r2, r3
 8019106:	d105      	bne.n	8019114 <tcp_close_shutdown+0x128>
 8019108:	4b27      	ldr	r3, [pc, #156]	; (80191a8 <tcp_close_shutdown+0x1bc>)
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	68db      	ldr	r3, [r3, #12]
 801910e:	4a26      	ldr	r2, [pc, #152]	; (80191a8 <tcp_close_shutdown+0x1bc>)
 8019110:	6013      	str	r3, [r2, #0]
 8019112:	e013      	b.n	801913c <tcp_close_shutdown+0x150>
 8019114:	4b24      	ldr	r3, [pc, #144]	; (80191a8 <tcp_close_shutdown+0x1bc>)
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	60bb      	str	r3, [r7, #8]
 801911a:	e00c      	b.n	8019136 <tcp_close_shutdown+0x14a>
 801911c:	68bb      	ldr	r3, [r7, #8]
 801911e:	68db      	ldr	r3, [r3, #12]
 8019120:	687a      	ldr	r2, [r7, #4]
 8019122:	429a      	cmp	r2, r3
 8019124:	d104      	bne.n	8019130 <tcp_close_shutdown+0x144>
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	68da      	ldr	r2, [r3, #12]
 801912a:	68bb      	ldr	r3, [r7, #8]
 801912c:	60da      	str	r2, [r3, #12]
 801912e:	e005      	b.n	801913c <tcp_close_shutdown+0x150>
 8019130:	68bb      	ldr	r3, [r7, #8]
 8019132:	68db      	ldr	r3, [r3, #12]
 8019134:	60bb      	str	r3, [r7, #8]
 8019136:	68bb      	ldr	r3, [r7, #8]
 8019138:	2b00      	cmp	r3, #0
 801913a:	d1ef      	bne.n	801911c <tcp_close_shutdown+0x130>
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	2200      	movs	r2, #0
 8019140:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8019142:	6878      	ldr	r0, [r7, #4]
 8019144:	f7ff fea0 	bl	8018e88 <tcp_free>
      break;
 8019148:	e01a      	b.n	8019180 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801914a:	6878      	ldr	r0, [r7, #4]
 801914c:	f7ff ff14 	bl	8018f78 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8019150:	6879      	ldr	r1, [r7, #4]
 8019152:	4816      	ldr	r0, [pc, #88]	; (80191ac <tcp_close_shutdown+0x1c0>)
 8019154:	f001 fc92 	bl	801aa7c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8019158:	6878      	ldr	r0, [r7, #4]
 801915a:	f7ff feb1 	bl	8018ec0 <tcp_free_listen>
      break;
 801915e:	e00f      	b.n	8019180 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019160:	6879      	ldr	r1, [r7, #4]
 8019162:	480e      	ldr	r0, [pc, #56]	; (801919c <tcp_close_shutdown+0x1b0>)
 8019164:	f001 fc8a 	bl	801aa7c <tcp_pcb_remove>
 8019168:	4b0d      	ldr	r3, [pc, #52]	; (80191a0 <tcp_close_shutdown+0x1b4>)
 801916a:	2201      	movs	r2, #1
 801916c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801916e:	6878      	ldr	r0, [r7, #4]
 8019170:	f7ff fe8a 	bl	8018e88 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8019174:	e004      	b.n	8019180 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8019176:	6878      	ldr	r0, [r7, #4]
 8019178:	f000 f81a 	bl	80191b0 <tcp_close_shutdown_fin>
 801917c:	4603      	mov	r3, r0
 801917e:	e000      	b.n	8019182 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8019180:	2300      	movs	r3, #0
}
 8019182:	4618      	mov	r0, r3
 8019184:	3710      	adds	r7, #16
 8019186:	46bd      	mov	sp, r7
 8019188:	bdb0      	pop	{r4, r5, r7, pc}
 801918a:	bf00      	nop
 801918c:	080268dc 	.word	0x080268dc
 8019190:	080269b0 	.word	0x080269b0
 8019194:	08026920 	.word	0x08026920
 8019198:	080269d0 	.word	0x080269d0
 801919c:	2000bfa4 	.word	0x2000bfa4
 80191a0:	2000bfac 	.word	0x2000bfac
 80191a4:	2000bfe4 	.word	0x2000bfe4
 80191a8:	2000bf9c 	.word	0x2000bf9c
 80191ac:	2000bfa0 	.word	0x2000bfa0

080191b0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b084      	sub	sp, #16
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d106      	bne.n	80191cc <tcp_close_shutdown_fin+0x1c>
 80191be:	4b2e      	ldr	r3, [pc, #184]	; (8019278 <tcp_close_shutdown_fin+0xc8>)
 80191c0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80191c4:	492d      	ldr	r1, [pc, #180]	; (801927c <tcp_close_shutdown_fin+0xcc>)
 80191c6:	482e      	ldr	r0, [pc, #184]	; (8019280 <tcp_close_shutdown_fin+0xd0>)
 80191c8:	f00a fdda 	bl	8023d80 <iprintf>

  switch (pcb->state) {
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	7d1b      	ldrb	r3, [r3, #20]
 80191d0:	2b07      	cmp	r3, #7
 80191d2:	d020      	beq.n	8019216 <tcp_close_shutdown_fin+0x66>
 80191d4:	2b07      	cmp	r3, #7
 80191d6:	dc2b      	bgt.n	8019230 <tcp_close_shutdown_fin+0x80>
 80191d8:	2b03      	cmp	r3, #3
 80191da:	d002      	beq.n	80191e2 <tcp_close_shutdown_fin+0x32>
 80191dc:	2b04      	cmp	r3, #4
 80191de:	d00d      	beq.n	80191fc <tcp_close_shutdown_fin+0x4c>
 80191e0:	e026      	b.n	8019230 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80191e2:	6878      	ldr	r0, [r7, #4]
 80191e4:	f004 ff28 	bl	801e038 <tcp_send_fin>
 80191e8:	4603      	mov	r3, r0
 80191ea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80191ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d11f      	bne.n	8019234 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	2205      	movs	r2, #5
 80191f8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80191fa:	e01b      	b.n	8019234 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80191fc:	6878      	ldr	r0, [r7, #4]
 80191fe:	f004 ff1b 	bl	801e038 <tcp_send_fin>
 8019202:	4603      	mov	r3, r0
 8019204:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801920a:	2b00      	cmp	r3, #0
 801920c:	d114      	bne.n	8019238 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	2205      	movs	r2, #5
 8019212:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019214:	e010      	b.n	8019238 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8019216:	6878      	ldr	r0, [r7, #4]
 8019218:	f004 ff0e 	bl	801e038 <tcp_send_fin>
 801921c:	4603      	mov	r3, r0
 801921e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019224:	2b00      	cmp	r3, #0
 8019226:	d109      	bne.n	801923c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	2209      	movs	r2, #9
 801922c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801922e:	e005      	b.n	801923c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8019230:	2300      	movs	r3, #0
 8019232:	e01c      	b.n	801926e <tcp_close_shutdown_fin+0xbe>
      break;
 8019234:	bf00      	nop
 8019236:	e002      	b.n	801923e <tcp_close_shutdown_fin+0x8e>
      break;
 8019238:	bf00      	nop
 801923a:	e000      	b.n	801923e <tcp_close_shutdown_fin+0x8e>
      break;
 801923c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801923e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019242:	2b00      	cmp	r3, #0
 8019244:	d103      	bne.n	801924e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8019246:	6878      	ldr	r0, [r7, #4]
 8019248:	f005 f834 	bl	801e2b4 <tcp_output>
 801924c:	e00d      	b.n	801926a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801924e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019256:	d108      	bne.n	801926a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	8b5b      	ldrh	r3, [r3, #26]
 801925c:	f043 0308 	orr.w	r3, r3, #8
 8019260:	b29a      	uxth	r2, r3
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8019266:	2300      	movs	r3, #0
 8019268:	e001      	b.n	801926e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801926a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801926e:	4618      	mov	r0, r3
 8019270:	3710      	adds	r7, #16
 8019272:	46bd      	mov	sp, r7
 8019274:	bd80      	pop	{r7, pc}
 8019276:	bf00      	nop
 8019278:	080268dc 	.word	0x080268dc
 801927c:	0802698c 	.word	0x0802698c
 8019280:	08026920 	.word	0x08026920

08019284 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8019284:	b580      	push	{r7, lr}
 8019286:	b082      	sub	sp, #8
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	2b00      	cmp	r3, #0
 8019290:	d109      	bne.n	80192a6 <tcp_close+0x22>
 8019292:	4b0f      	ldr	r3, [pc, #60]	; (80192d0 <tcp_close+0x4c>)
 8019294:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8019298:	490e      	ldr	r1, [pc, #56]	; (80192d4 <tcp_close+0x50>)
 801929a:	480f      	ldr	r0, [pc, #60]	; (80192d8 <tcp_close+0x54>)
 801929c:	f00a fd70 	bl	8023d80 <iprintf>
 80192a0:	f06f 030f 	mvn.w	r3, #15
 80192a4:	e00f      	b.n	80192c6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	7d1b      	ldrb	r3, [r3, #20]
 80192aa:	2b01      	cmp	r3, #1
 80192ac:	d006      	beq.n	80192bc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	8b5b      	ldrh	r3, [r3, #26]
 80192b2:	f043 0310 	orr.w	r3, r3, #16
 80192b6:	b29a      	uxth	r2, r3
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80192bc:	2101      	movs	r1, #1
 80192be:	6878      	ldr	r0, [r7, #4]
 80192c0:	f7ff fe94 	bl	8018fec <tcp_close_shutdown>
 80192c4:	4603      	mov	r3, r0
}
 80192c6:	4618      	mov	r0, r3
 80192c8:	3708      	adds	r7, #8
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bd80      	pop	{r7, pc}
 80192ce:	bf00      	nop
 80192d0:	080268dc 	.word	0x080268dc
 80192d4:	080269ec 	.word	0x080269ec
 80192d8:	08026920 	.word	0x08026920

080192dc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b084      	sub	sp, #16
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	60f8      	str	r0, [r7, #12]
 80192e4:	60b9      	str	r1, [r7, #8]
 80192e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d109      	bne.n	8019302 <tcp_shutdown+0x26>
 80192ee:	4b26      	ldr	r3, [pc, #152]	; (8019388 <tcp_shutdown+0xac>)
 80192f0:	f240 2207 	movw	r2, #519	; 0x207
 80192f4:	4925      	ldr	r1, [pc, #148]	; (801938c <tcp_shutdown+0xb0>)
 80192f6:	4826      	ldr	r0, [pc, #152]	; (8019390 <tcp_shutdown+0xb4>)
 80192f8:	f00a fd42 	bl	8023d80 <iprintf>
 80192fc:	f06f 030f 	mvn.w	r3, #15
 8019300:	e03d      	b.n	801937e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	7d1b      	ldrb	r3, [r3, #20]
 8019306:	2b01      	cmp	r3, #1
 8019308:	d102      	bne.n	8019310 <tcp_shutdown+0x34>
    return ERR_CONN;
 801930a:	f06f 030a 	mvn.w	r3, #10
 801930e:	e036      	b.n	801937e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8019310:	68bb      	ldr	r3, [r7, #8]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d01b      	beq.n	801934e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	8b5b      	ldrh	r3, [r3, #26]
 801931a:	f043 0310 	orr.w	r3, r3, #16
 801931e:	b29a      	uxth	r2, r3
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	2b00      	cmp	r3, #0
 8019328:	d005      	beq.n	8019336 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801932a:	2101      	movs	r1, #1
 801932c:	68f8      	ldr	r0, [r7, #12]
 801932e:	f7ff fe5d 	bl	8018fec <tcp_close_shutdown>
 8019332:	4603      	mov	r3, r0
 8019334:	e023      	b.n	801937e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801933a:	2b00      	cmp	r3, #0
 801933c:	d007      	beq.n	801934e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019342:	4618      	mov	r0, r3
 8019344:	f7ff fae4 	bl	8018910 <pbuf_free>
      pcb->refused_data = NULL;
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	2200      	movs	r2, #0
 801934c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	2b00      	cmp	r3, #0
 8019352:	d013      	beq.n	801937c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	7d1b      	ldrb	r3, [r3, #20]
 8019358:	2b04      	cmp	r3, #4
 801935a:	dc02      	bgt.n	8019362 <tcp_shutdown+0x86>
 801935c:	2b03      	cmp	r3, #3
 801935e:	da02      	bge.n	8019366 <tcp_shutdown+0x8a>
 8019360:	e009      	b.n	8019376 <tcp_shutdown+0x9a>
 8019362:	2b07      	cmp	r3, #7
 8019364:	d107      	bne.n	8019376 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8019366:	68bb      	ldr	r3, [r7, #8]
 8019368:	b2db      	uxtb	r3, r3
 801936a:	4619      	mov	r1, r3
 801936c:	68f8      	ldr	r0, [r7, #12]
 801936e:	f7ff fe3d 	bl	8018fec <tcp_close_shutdown>
 8019372:	4603      	mov	r3, r0
 8019374:	e003      	b.n	801937e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8019376:	f06f 030a 	mvn.w	r3, #10
 801937a:	e000      	b.n	801937e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801937c:	2300      	movs	r3, #0
}
 801937e:	4618      	mov	r0, r3
 8019380:	3710      	adds	r7, #16
 8019382:	46bd      	mov	sp, r7
 8019384:	bd80      	pop	{r7, pc}
 8019386:	bf00      	nop
 8019388:	080268dc 	.word	0x080268dc
 801938c:	08026a04 	.word	0x08026a04
 8019390:	08026920 	.word	0x08026920

08019394 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b08e      	sub	sp, #56	; 0x38
 8019398:	af04      	add	r7, sp, #16
 801939a:	6078      	str	r0, [r7, #4]
 801939c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d107      	bne.n	80193b4 <tcp_abandon+0x20>
 80193a4:	4b52      	ldr	r3, [pc, #328]	; (80194f0 <tcp_abandon+0x15c>)
 80193a6:	f240 223d 	movw	r2, #573	; 0x23d
 80193aa:	4952      	ldr	r1, [pc, #328]	; (80194f4 <tcp_abandon+0x160>)
 80193ac:	4852      	ldr	r0, [pc, #328]	; (80194f8 <tcp_abandon+0x164>)
 80193ae:	f00a fce7 	bl	8023d80 <iprintf>
 80193b2:	e099      	b.n	80194e8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	7d1b      	ldrb	r3, [r3, #20]
 80193b8:	2b01      	cmp	r3, #1
 80193ba:	d106      	bne.n	80193ca <tcp_abandon+0x36>
 80193bc:	4b4c      	ldr	r3, [pc, #304]	; (80194f0 <tcp_abandon+0x15c>)
 80193be:	f44f 7210 	mov.w	r2, #576	; 0x240
 80193c2:	494e      	ldr	r1, [pc, #312]	; (80194fc <tcp_abandon+0x168>)
 80193c4:	484c      	ldr	r0, [pc, #304]	; (80194f8 <tcp_abandon+0x164>)
 80193c6:	f00a fcdb 	bl	8023d80 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	7d1b      	ldrb	r3, [r3, #20]
 80193ce:	2b0a      	cmp	r3, #10
 80193d0:	d107      	bne.n	80193e2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80193d2:	6879      	ldr	r1, [r7, #4]
 80193d4:	484a      	ldr	r0, [pc, #296]	; (8019500 <tcp_abandon+0x16c>)
 80193d6:	f001 fb51 	bl	801aa7c <tcp_pcb_remove>
    tcp_free(pcb);
 80193da:	6878      	ldr	r0, [r7, #4]
 80193dc:	f7ff fd54 	bl	8018e88 <tcp_free>
 80193e0:	e082      	b.n	80194e8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80193e2:	2300      	movs	r3, #0
 80193e4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80193e6:	2300      	movs	r3, #0
 80193e8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80193ee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193f4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80193fc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	691b      	ldr	r3, [r3, #16]
 8019402:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	7d1b      	ldrb	r3, [r3, #20]
 8019408:	2b00      	cmp	r3, #0
 801940a:	d126      	bne.n	801945a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	8adb      	ldrh	r3, [r3, #22]
 8019410:	2b00      	cmp	r3, #0
 8019412:	d02e      	beq.n	8019472 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019414:	4b3b      	ldr	r3, [pc, #236]	; (8019504 <tcp_abandon+0x170>)
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	687a      	ldr	r2, [r7, #4]
 801941a:	429a      	cmp	r2, r3
 801941c:	d105      	bne.n	801942a <tcp_abandon+0x96>
 801941e:	4b39      	ldr	r3, [pc, #228]	; (8019504 <tcp_abandon+0x170>)
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	68db      	ldr	r3, [r3, #12]
 8019424:	4a37      	ldr	r2, [pc, #220]	; (8019504 <tcp_abandon+0x170>)
 8019426:	6013      	str	r3, [r2, #0]
 8019428:	e013      	b.n	8019452 <tcp_abandon+0xbe>
 801942a:	4b36      	ldr	r3, [pc, #216]	; (8019504 <tcp_abandon+0x170>)
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	61fb      	str	r3, [r7, #28]
 8019430:	e00c      	b.n	801944c <tcp_abandon+0xb8>
 8019432:	69fb      	ldr	r3, [r7, #28]
 8019434:	68db      	ldr	r3, [r3, #12]
 8019436:	687a      	ldr	r2, [r7, #4]
 8019438:	429a      	cmp	r2, r3
 801943a:	d104      	bne.n	8019446 <tcp_abandon+0xb2>
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	68da      	ldr	r2, [r3, #12]
 8019440:	69fb      	ldr	r3, [r7, #28]
 8019442:	60da      	str	r2, [r3, #12]
 8019444:	e005      	b.n	8019452 <tcp_abandon+0xbe>
 8019446:	69fb      	ldr	r3, [r7, #28]
 8019448:	68db      	ldr	r3, [r3, #12]
 801944a:	61fb      	str	r3, [r7, #28]
 801944c:	69fb      	ldr	r3, [r7, #28]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d1ef      	bne.n	8019432 <tcp_abandon+0x9e>
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	2200      	movs	r2, #0
 8019456:	60da      	str	r2, [r3, #12]
 8019458:	e00b      	b.n	8019472 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801945a:	683b      	ldr	r3, [r7, #0]
 801945c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	8adb      	ldrh	r3, [r3, #22]
 8019462:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019464:	6879      	ldr	r1, [r7, #4]
 8019466:	4828      	ldr	r0, [pc, #160]	; (8019508 <tcp_abandon+0x174>)
 8019468:	f001 fb08 	bl	801aa7c <tcp_pcb_remove>
 801946c:	4b27      	ldr	r3, [pc, #156]	; (801950c <tcp_abandon+0x178>)
 801946e:	2201      	movs	r2, #1
 8019470:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019476:	2b00      	cmp	r3, #0
 8019478:	d004      	beq.n	8019484 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801947e:	4618      	mov	r0, r3
 8019480:	f000 ffdc 	bl	801a43c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019488:	2b00      	cmp	r3, #0
 801948a:	d004      	beq.n	8019496 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019490:	4618      	mov	r0, r3
 8019492:	f000 ffd3 	bl	801a43c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801949a:	2b00      	cmp	r3, #0
 801949c:	d004      	beq.n	80194a8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80194a2:	4618      	mov	r0, r3
 80194a4:	f000 ffca 	bl	801a43c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80194a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d00e      	beq.n	80194cc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80194ae:	6879      	ldr	r1, [r7, #4]
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	3304      	adds	r3, #4
 80194b4:	687a      	ldr	r2, [r7, #4]
 80194b6:	8b12      	ldrh	r2, [r2, #24]
 80194b8:	9202      	str	r2, [sp, #8]
 80194ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80194bc:	9201      	str	r2, [sp, #4]
 80194be:	9300      	str	r3, [sp, #0]
 80194c0:	460b      	mov	r3, r1
 80194c2:	697a      	ldr	r2, [r7, #20]
 80194c4:	69b9      	ldr	r1, [r7, #24]
 80194c6:	6878      	ldr	r0, [r7, #4]
 80194c8:	f005 fca8 	bl	801ee1c <tcp_rst>
    }
    last_state = pcb->state;
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	7d1b      	ldrb	r3, [r3, #20]
 80194d0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80194d2:	6878      	ldr	r0, [r7, #4]
 80194d4:	f7ff fcd8 	bl	8018e88 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80194d8:	693b      	ldr	r3, [r7, #16]
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d004      	beq.n	80194e8 <tcp_abandon+0x154>
 80194de:	693b      	ldr	r3, [r7, #16]
 80194e0:	f06f 010c 	mvn.w	r1, #12
 80194e4:	68f8      	ldr	r0, [r7, #12]
 80194e6:	4798      	blx	r3
  }
}
 80194e8:	3728      	adds	r7, #40	; 0x28
 80194ea:	46bd      	mov	sp, r7
 80194ec:	bd80      	pop	{r7, pc}
 80194ee:	bf00      	nop
 80194f0:	080268dc 	.word	0x080268dc
 80194f4:	08026a20 	.word	0x08026a20
 80194f8:	08026920 	.word	0x08026920
 80194fc:	08026a3c 	.word	0x08026a3c
 8019500:	2000bfa8 	.word	0x2000bfa8
 8019504:	2000bf9c 	.word	0x2000bf9c
 8019508:	2000bfa4 	.word	0x2000bfa4
 801950c:	2000bfac 	.word	0x2000bfac

08019510 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8019510:	b580      	push	{r7, lr}
 8019512:	b082      	sub	sp, #8
 8019514:	af00      	add	r7, sp, #0
 8019516:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8019518:	2101      	movs	r1, #1
 801951a:	6878      	ldr	r0, [r7, #4]
 801951c:	f7ff ff3a 	bl	8019394 <tcp_abandon>
}
 8019520:	bf00      	nop
 8019522:	3708      	adds	r7, #8
 8019524:	46bd      	mov	sp, r7
 8019526:	bd80      	pop	{r7, pc}

08019528 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019528:	b580      	push	{r7, lr}
 801952a:	b088      	sub	sp, #32
 801952c:	af00      	add	r7, sp, #0
 801952e:	60f8      	str	r0, [r7, #12]
 8019530:	60b9      	str	r1, [r7, #8]
 8019532:	4613      	mov	r3, r2
 8019534:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8019536:	2304      	movs	r3, #4
 8019538:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801953a:	68bb      	ldr	r3, [r7, #8]
 801953c:	2b00      	cmp	r3, #0
 801953e:	d101      	bne.n	8019544 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8019540:	4b3e      	ldr	r3, [pc, #248]	; (801963c <tcp_bind+0x114>)
 8019542:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019544:	68fb      	ldr	r3, [r7, #12]
 8019546:	2b00      	cmp	r3, #0
 8019548:	d109      	bne.n	801955e <tcp_bind+0x36>
 801954a:	4b3d      	ldr	r3, [pc, #244]	; (8019640 <tcp_bind+0x118>)
 801954c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8019550:	493c      	ldr	r1, [pc, #240]	; (8019644 <tcp_bind+0x11c>)
 8019552:	483d      	ldr	r0, [pc, #244]	; (8019648 <tcp_bind+0x120>)
 8019554:	f00a fc14 	bl	8023d80 <iprintf>
 8019558:	f06f 030f 	mvn.w	r3, #15
 801955c:	e06a      	b.n	8019634 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	7d1b      	ldrb	r3, [r3, #20]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d009      	beq.n	801957a <tcp_bind+0x52>
 8019566:	4b36      	ldr	r3, [pc, #216]	; (8019640 <tcp_bind+0x118>)
 8019568:	f240 22ab 	movw	r2, #683	; 0x2ab
 801956c:	4937      	ldr	r1, [pc, #220]	; (801964c <tcp_bind+0x124>)
 801956e:	4836      	ldr	r0, [pc, #216]	; (8019648 <tcp_bind+0x120>)
 8019570:	f00a fc06 	bl	8023d80 <iprintf>
 8019574:	f06f 0305 	mvn.w	r3, #5
 8019578:	e05c      	b.n	8019634 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801957a:	88fb      	ldrh	r3, [r7, #6]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d109      	bne.n	8019594 <tcp_bind+0x6c>
    port = tcp_new_port();
 8019580:	f000 f9de 	bl	8019940 <tcp_new_port>
 8019584:	4603      	mov	r3, r0
 8019586:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019588:	88fb      	ldrh	r3, [r7, #6]
 801958a:	2b00      	cmp	r3, #0
 801958c:	d135      	bne.n	80195fa <tcp_bind+0xd2>
      return ERR_BUF;
 801958e:	f06f 0301 	mvn.w	r3, #1
 8019592:	e04f      	b.n	8019634 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8019594:	2300      	movs	r3, #0
 8019596:	61fb      	str	r3, [r7, #28]
 8019598:	e02b      	b.n	80195f2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801959a:	4a2d      	ldr	r2, [pc, #180]	; (8019650 <tcp_bind+0x128>)
 801959c:	69fb      	ldr	r3, [r7, #28]
 801959e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	61bb      	str	r3, [r7, #24]
 80195a6:	e01e      	b.n	80195e6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80195a8:	69bb      	ldr	r3, [r7, #24]
 80195aa:	8adb      	ldrh	r3, [r3, #22]
 80195ac:	88fa      	ldrh	r2, [r7, #6]
 80195ae:	429a      	cmp	r2, r3
 80195b0:	d116      	bne.n	80195e0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80195b2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d010      	beq.n	80195da <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80195b8:	69bb      	ldr	r3, [r7, #24]
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d00c      	beq.n	80195da <tcp_bind+0xb2>
 80195c0:	68bb      	ldr	r3, [r7, #8]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d009      	beq.n	80195da <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80195c6:	68bb      	ldr	r3, [r7, #8]
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d005      	beq.n	80195da <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80195ce:	69bb      	ldr	r3, [r7, #24]
 80195d0:	681a      	ldr	r2, [r3, #0]
 80195d2:	68bb      	ldr	r3, [r7, #8]
 80195d4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80195d6:	429a      	cmp	r2, r3
 80195d8:	d102      	bne.n	80195e0 <tcp_bind+0xb8>
              return ERR_USE;
 80195da:	f06f 0307 	mvn.w	r3, #7
 80195de:	e029      	b.n	8019634 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80195e0:	69bb      	ldr	r3, [r7, #24]
 80195e2:	68db      	ldr	r3, [r3, #12]
 80195e4:	61bb      	str	r3, [r7, #24]
 80195e6:	69bb      	ldr	r3, [r7, #24]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d1dd      	bne.n	80195a8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80195ec:	69fb      	ldr	r3, [r7, #28]
 80195ee:	3301      	adds	r3, #1
 80195f0:	61fb      	str	r3, [r7, #28]
 80195f2:	69fa      	ldr	r2, [r7, #28]
 80195f4:	697b      	ldr	r3, [r7, #20]
 80195f6:	429a      	cmp	r2, r3
 80195f8:	dbcf      	blt.n	801959a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80195fa:	68bb      	ldr	r3, [r7, #8]
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d00c      	beq.n	801961a <tcp_bind+0xf2>
 8019600:	68bb      	ldr	r3, [r7, #8]
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d008      	beq.n	801961a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8019608:	68bb      	ldr	r3, [r7, #8]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d002      	beq.n	8019614 <tcp_bind+0xec>
 801960e:	68bb      	ldr	r3, [r7, #8]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	e000      	b.n	8019616 <tcp_bind+0xee>
 8019614:	2300      	movs	r3, #0
 8019616:	68fa      	ldr	r2, [r7, #12]
 8019618:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	88fa      	ldrh	r2, [r7, #6]
 801961e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8019620:	4b0c      	ldr	r3, [pc, #48]	; (8019654 <tcp_bind+0x12c>)
 8019622:	681a      	ldr	r2, [r3, #0]
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	60da      	str	r2, [r3, #12]
 8019628:	4a0a      	ldr	r2, [pc, #40]	; (8019654 <tcp_bind+0x12c>)
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	6013      	str	r3, [r2, #0]
 801962e:	f005 fdb7 	bl	801f1a0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8019632:	2300      	movs	r3, #0
}
 8019634:	4618      	mov	r0, r3
 8019636:	3720      	adds	r7, #32
 8019638:	46bd      	mov	sp, r7
 801963a:	bd80      	pop	{r7, pc}
 801963c:	08028978 	.word	0x08028978
 8019640:	080268dc 	.word	0x080268dc
 8019644:	08026a70 	.word	0x08026a70
 8019648:	08026920 	.word	0x08026920
 801964c:	08026a88 	.word	0x08026a88
 8019650:	08028950 	.word	0x08028950
 8019654:	2000bf9c 	.word	0x2000bf9c

08019658 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b084      	sub	sp, #16
 801965c:	af00      	add	r7, sp, #0
 801965e:	60f8      	str	r0, [r7, #12]
 8019660:	60b9      	str	r1, [r7, #8]
 8019662:	4613      	mov	r3, r2
 8019664:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8019666:	68bb      	ldr	r3, [r7, #8]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d106      	bne.n	801967a <tcp_accept_null+0x22>
 801966c:	4b07      	ldr	r3, [pc, #28]	; (801968c <tcp_accept_null+0x34>)
 801966e:	f240 320f 	movw	r2, #783	; 0x30f
 8019672:	4907      	ldr	r1, [pc, #28]	; (8019690 <tcp_accept_null+0x38>)
 8019674:	4807      	ldr	r0, [pc, #28]	; (8019694 <tcp_accept_null+0x3c>)
 8019676:	f00a fb83 	bl	8023d80 <iprintf>

  tcp_abort(pcb);
 801967a:	68b8      	ldr	r0, [r7, #8]
 801967c:	f7ff ff48 	bl	8019510 <tcp_abort>

  return ERR_ABRT;
 8019680:	f06f 030c 	mvn.w	r3, #12
}
 8019684:	4618      	mov	r0, r3
 8019686:	3710      	adds	r7, #16
 8019688:	46bd      	mov	sp, r7
 801968a:	bd80      	pop	{r7, pc}
 801968c:	080268dc 	.word	0x080268dc
 8019690:	08026ab0 	.word	0x08026ab0
 8019694:	08026920 	.word	0x08026920

08019698 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8019698:	b580      	push	{r7, lr}
 801969a:	b088      	sub	sp, #32
 801969c:	af00      	add	r7, sp, #0
 801969e:	60f8      	str	r0, [r7, #12]
 80196a0:	460b      	mov	r3, r1
 80196a2:	607a      	str	r2, [r7, #4]
 80196a4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80196a6:	2300      	movs	r3, #0
 80196a8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d109      	bne.n	80196c4 <tcp_listen_with_backlog_and_err+0x2c>
 80196b0:	4b47      	ldr	r3, [pc, #284]	; (80197d0 <tcp_listen_with_backlog_and_err+0x138>)
 80196b2:	f240 3259 	movw	r2, #857	; 0x359
 80196b6:	4947      	ldr	r1, [pc, #284]	; (80197d4 <tcp_listen_with_backlog_and_err+0x13c>)
 80196b8:	4847      	ldr	r0, [pc, #284]	; (80197d8 <tcp_listen_with_backlog_and_err+0x140>)
 80196ba:	f00a fb61 	bl	8023d80 <iprintf>
 80196be:	23f0      	movs	r3, #240	; 0xf0
 80196c0:	76fb      	strb	r3, [r7, #27]
 80196c2:	e079      	b.n	80197b8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	7d1b      	ldrb	r3, [r3, #20]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d009      	beq.n	80196e0 <tcp_listen_with_backlog_and_err+0x48>
 80196cc:	4b40      	ldr	r3, [pc, #256]	; (80197d0 <tcp_listen_with_backlog_and_err+0x138>)
 80196ce:	f240 325a 	movw	r2, #858	; 0x35a
 80196d2:	4942      	ldr	r1, [pc, #264]	; (80197dc <tcp_listen_with_backlog_and_err+0x144>)
 80196d4:	4840      	ldr	r0, [pc, #256]	; (80197d8 <tcp_listen_with_backlog_and_err+0x140>)
 80196d6:	f00a fb53 	bl	8023d80 <iprintf>
 80196da:	23f1      	movs	r3, #241	; 0xf1
 80196dc:	76fb      	strb	r3, [r7, #27]
 80196de:	e06b      	b.n	80197b8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	7d1b      	ldrb	r3, [r3, #20]
 80196e4:	2b01      	cmp	r3, #1
 80196e6:	d104      	bne.n	80196f2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80196e8:	68fb      	ldr	r3, [r7, #12]
 80196ea:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80196ec:	23f7      	movs	r3, #247	; 0xf7
 80196ee:	76fb      	strb	r3, [r7, #27]
    goto done;
 80196f0:	e062      	b.n	80197b8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80196f2:	2002      	movs	r0, #2
 80196f4:	f7fe f9f2 	bl	8017adc <memp_malloc>
 80196f8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80196fa:	69fb      	ldr	r3, [r7, #28]
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d102      	bne.n	8019706 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8019700:	23ff      	movs	r3, #255	; 0xff
 8019702:	76fb      	strb	r3, [r7, #27]
    goto done;
 8019704:	e058      	b.n	80197b8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	691a      	ldr	r2, [r3, #16]
 801970a:	69fb      	ldr	r3, [r7, #28]
 801970c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801970e:	68fb      	ldr	r3, [r7, #12]
 8019710:	8ada      	ldrh	r2, [r3, #22]
 8019712:	69fb      	ldr	r3, [r7, #28]
 8019714:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8019716:	69fb      	ldr	r3, [r7, #28]
 8019718:	2201      	movs	r2, #1
 801971a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	7d5a      	ldrb	r2, [r3, #21]
 8019720:	69fb      	ldr	r3, [r7, #28]
 8019722:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	7a5a      	ldrb	r2, [r3, #9]
 8019728:	69fb      	ldr	r3, [r7, #28]
 801972a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801972c:	69fb      	ldr	r3, [r7, #28]
 801972e:	2200      	movs	r2, #0
 8019730:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8019732:	68fb      	ldr	r3, [r7, #12]
 8019734:	7ada      	ldrb	r2, [r3, #11]
 8019736:	69fb      	ldr	r3, [r7, #28]
 8019738:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	7a9a      	ldrb	r2, [r3, #10]
 801973e:	69fb      	ldr	r3, [r7, #28]
 8019740:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	681a      	ldr	r2, [r3, #0]
 8019746:	69fb      	ldr	r3, [r7, #28]
 8019748:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	8adb      	ldrh	r3, [r3, #22]
 801974e:	2b00      	cmp	r3, #0
 8019750:	d021      	beq.n	8019796 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8019752:	4b23      	ldr	r3, [pc, #140]	; (80197e0 <tcp_listen_with_backlog_and_err+0x148>)
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	68fa      	ldr	r2, [r7, #12]
 8019758:	429a      	cmp	r2, r3
 801975a:	d105      	bne.n	8019768 <tcp_listen_with_backlog_and_err+0xd0>
 801975c:	4b20      	ldr	r3, [pc, #128]	; (80197e0 <tcp_listen_with_backlog_and_err+0x148>)
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	68db      	ldr	r3, [r3, #12]
 8019762:	4a1f      	ldr	r2, [pc, #124]	; (80197e0 <tcp_listen_with_backlog_and_err+0x148>)
 8019764:	6013      	str	r3, [r2, #0]
 8019766:	e013      	b.n	8019790 <tcp_listen_with_backlog_and_err+0xf8>
 8019768:	4b1d      	ldr	r3, [pc, #116]	; (80197e0 <tcp_listen_with_backlog_and_err+0x148>)
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	617b      	str	r3, [r7, #20]
 801976e:	e00c      	b.n	801978a <tcp_listen_with_backlog_and_err+0xf2>
 8019770:	697b      	ldr	r3, [r7, #20]
 8019772:	68db      	ldr	r3, [r3, #12]
 8019774:	68fa      	ldr	r2, [r7, #12]
 8019776:	429a      	cmp	r2, r3
 8019778:	d104      	bne.n	8019784 <tcp_listen_with_backlog_and_err+0xec>
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	68da      	ldr	r2, [r3, #12]
 801977e:	697b      	ldr	r3, [r7, #20]
 8019780:	60da      	str	r2, [r3, #12]
 8019782:	e005      	b.n	8019790 <tcp_listen_with_backlog_and_err+0xf8>
 8019784:	697b      	ldr	r3, [r7, #20]
 8019786:	68db      	ldr	r3, [r3, #12]
 8019788:	617b      	str	r3, [r7, #20]
 801978a:	697b      	ldr	r3, [r7, #20]
 801978c:	2b00      	cmp	r3, #0
 801978e:	d1ef      	bne.n	8019770 <tcp_listen_with_backlog_and_err+0xd8>
 8019790:	68fb      	ldr	r3, [r7, #12]
 8019792:	2200      	movs	r2, #0
 8019794:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8019796:	68f8      	ldr	r0, [r7, #12]
 8019798:	f7ff fb76 	bl	8018e88 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801979c:	69fb      	ldr	r3, [r7, #28]
 801979e:	4a11      	ldr	r2, [pc, #68]	; (80197e4 <tcp_listen_with_backlog_and_err+0x14c>)
 80197a0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80197a2:	4b11      	ldr	r3, [pc, #68]	; (80197e8 <tcp_listen_with_backlog_and_err+0x150>)
 80197a4:	681a      	ldr	r2, [r3, #0]
 80197a6:	69fb      	ldr	r3, [r7, #28]
 80197a8:	60da      	str	r2, [r3, #12]
 80197aa:	4a0f      	ldr	r2, [pc, #60]	; (80197e8 <tcp_listen_with_backlog_and_err+0x150>)
 80197ac:	69fb      	ldr	r3, [r7, #28]
 80197ae:	6013      	str	r3, [r2, #0]
 80197b0:	f005 fcf6 	bl	801f1a0 <tcp_timer_needed>
  res = ERR_OK;
 80197b4:	2300      	movs	r3, #0
 80197b6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d002      	beq.n	80197c4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	7efa      	ldrb	r2, [r7, #27]
 80197c2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80197c4:	69fb      	ldr	r3, [r7, #28]
}
 80197c6:	4618      	mov	r0, r3
 80197c8:	3720      	adds	r7, #32
 80197ca:	46bd      	mov	sp, r7
 80197cc:	bd80      	pop	{r7, pc}
 80197ce:	bf00      	nop
 80197d0:	080268dc 	.word	0x080268dc
 80197d4:	08026ad0 	.word	0x08026ad0
 80197d8:	08026920 	.word	0x08026920
 80197dc:	08026b00 	.word	0x08026b00
 80197e0:	2000bf9c 	.word	0x2000bf9c
 80197e4:	08019659 	.word	0x08019659
 80197e8:	2000bfa0 	.word	0x2000bfa0

080197ec <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	b084      	sub	sp, #16
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d106      	bne.n	8019808 <tcp_update_rcv_ann_wnd+0x1c>
 80197fa:	4b25      	ldr	r3, [pc, #148]	; (8019890 <tcp_update_rcv_ann_wnd+0xa4>)
 80197fc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8019800:	4924      	ldr	r1, [pc, #144]	; (8019894 <tcp_update_rcv_ann_wnd+0xa8>)
 8019802:	4825      	ldr	r0, [pc, #148]	; (8019898 <tcp_update_rcv_ann_wnd+0xac>)
 8019804:	f00a fabc 	bl	8023d80 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801980c:	687a      	ldr	r2, [r7, #4]
 801980e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8019810:	4413      	add	r3, r2
 8019812:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019818:	687a      	ldr	r2, [r7, #4]
 801981a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801981c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8019820:	bf28      	it	cs
 8019822:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8019826:	b292      	uxth	r2, r2
 8019828:	4413      	add	r3, r2
 801982a:	68fa      	ldr	r2, [r7, #12]
 801982c:	1ad3      	subs	r3, r2, r3
 801982e:	2b00      	cmp	r3, #0
 8019830:	db08      	blt.n	8019844 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801983e:	68fa      	ldr	r2, [r7, #12]
 8019840:	1ad3      	subs	r3, r2, r3
 8019842:	e020      	b.n	8019886 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801984c:	1ad3      	subs	r3, r2, r3
 801984e:	2b00      	cmp	r3, #0
 8019850:	dd03      	ble.n	801985a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	2200      	movs	r2, #0
 8019856:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019858:	e014      	b.n	8019884 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019862:	1ad3      	subs	r3, r2, r3
 8019864:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8019866:	68bb      	ldr	r3, [r7, #8]
 8019868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801986c:	d306      	bcc.n	801987c <tcp_update_rcv_ann_wnd+0x90>
 801986e:	4b08      	ldr	r3, [pc, #32]	; (8019890 <tcp_update_rcv_ann_wnd+0xa4>)
 8019870:	f240 32b6 	movw	r2, #950	; 0x3b6
 8019874:	4909      	ldr	r1, [pc, #36]	; (801989c <tcp_update_rcv_ann_wnd+0xb0>)
 8019876:	4808      	ldr	r0, [pc, #32]	; (8019898 <tcp_update_rcv_ann_wnd+0xac>)
 8019878:	f00a fa82 	bl	8023d80 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801987c:	68bb      	ldr	r3, [r7, #8]
 801987e:	b29a      	uxth	r2, r3
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8019884:	2300      	movs	r3, #0
  }
}
 8019886:	4618      	mov	r0, r3
 8019888:	3710      	adds	r7, #16
 801988a:	46bd      	mov	sp, r7
 801988c:	bd80      	pop	{r7, pc}
 801988e:	bf00      	nop
 8019890:	080268dc 	.word	0x080268dc
 8019894:	08026b38 	.word	0x08026b38
 8019898:	08026920 	.word	0x08026920
 801989c:	08026b5c 	.word	0x08026b5c

080198a0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	b084      	sub	sp, #16
 80198a4:	af00      	add	r7, sp, #0
 80198a6:	6078      	str	r0, [r7, #4]
 80198a8:	460b      	mov	r3, r1
 80198aa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d107      	bne.n	80198c2 <tcp_recved+0x22>
 80198b2:	4b1f      	ldr	r3, [pc, #124]	; (8019930 <tcp_recved+0x90>)
 80198b4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80198b8:	491e      	ldr	r1, [pc, #120]	; (8019934 <tcp_recved+0x94>)
 80198ba:	481f      	ldr	r0, [pc, #124]	; (8019938 <tcp_recved+0x98>)
 80198bc:	f00a fa60 	bl	8023d80 <iprintf>
 80198c0:	e032      	b.n	8019928 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	7d1b      	ldrb	r3, [r3, #20]
 80198c6:	2b01      	cmp	r3, #1
 80198c8:	d106      	bne.n	80198d8 <tcp_recved+0x38>
 80198ca:	4b19      	ldr	r3, [pc, #100]	; (8019930 <tcp_recved+0x90>)
 80198cc:	f240 32d2 	movw	r2, #978	; 0x3d2
 80198d0:	491a      	ldr	r1, [pc, #104]	; (801993c <tcp_recved+0x9c>)
 80198d2:	4819      	ldr	r0, [pc, #100]	; (8019938 <tcp_recved+0x98>)
 80198d4:	f00a fa54 	bl	8023d80 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80198dc:	887b      	ldrh	r3, [r7, #2]
 80198de:	4413      	add	r3, r2
 80198e0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80198e2:	89fb      	ldrh	r3, [r7, #14]
 80198e4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80198e8:	d804      	bhi.n	80198f4 <tcp_recved+0x54>
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80198ee:	89fa      	ldrh	r2, [r7, #14]
 80198f0:	429a      	cmp	r2, r3
 80198f2:	d204      	bcs.n	80198fe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80198fa:	851a      	strh	r2, [r3, #40]	; 0x28
 80198fc:	e002      	b.n	8019904 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	89fa      	ldrh	r2, [r7, #14]
 8019902:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8019904:	6878      	ldr	r0, [r7, #4]
 8019906:	f7ff ff71 	bl	80197ec <tcp_update_rcv_ann_wnd>
 801990a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801990c:	68bb      	ldr	r3, [r7, #8]
 801990e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8019912:	d309      	bcc.n	8019928 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	8b5b      	ldrh	r3, [r3, #26]
 8019918:	f043 0302 	orr.w	r3, r3, #2
 801991c:	b29a      	uxth	r2, r3
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019922:	6878      	ldr	r0, [r7, #4]
 8019924:	f004 fcc6 	bl	801e2b4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8019928:	3710      	adds	r7, #16
 801992a:	46bd      	mov	sp, r7
 801992c:	bd80      	pop	{r7, pc}
 801992e:	bf00      	nop
 8019930:	080268dc 	.word	0x080268dc
 8019934:	08026b78 	.word	0x08026b78
 8019938:	08026920 	.word	0x08026920
 801993c:	08026b90 	.word	0x08026b90

08019940 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8019940:	b480      	push	{r7}
 8019942:	b083      	sub	sp, #12
 8019944:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8019946:	2300      	movs	r3, #0
 8019948:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801994a:	4b1e      	ldr	r3, [pc, #120]	; (80199c4 <tcp_new_port+0x84>)
 801994c:	881b      	ldrh	r3, [r3, #0]
 801994e:	3301      	adds	r3, #1
 8019950:	b29a      	uxth	r2, r3
 8019952:	4b1c      	ldr	r3, [pc, #112]	; (80199c4 <tcp_new_port+0x84>)
 8019954:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8019956:	4b1b      	ldr	r3, [pc, #108]	; (80199c4 <tcp_new_port+0x84>)
 8019958:	881b      	ldrh	r3, [r3, #0]
 801995a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801995e:	4293      	cmp	r3, r2
 8019960:	d103      	bne.n	801996a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8019962:	4b18      	ldr	r3, [pc, #96]	; (80199c4 <tcp_new_port+0x84>)
 8019964:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019968:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801996a:	2300      	movs	r3, #0
 801996c:	71fb      	strb	r3, [r7, #7]
 801996e:	e01e      	b.n	80199ae <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019970:	79fb      	ldrb	r3, [r7, #7]
 8019972:	4a15      	ldr	r2, [pc, #84]	; (80199c8 <tcp_new_port+0x88>)
 8019974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	603b      	str	r3, [r7, #0]
 801997c:	e011      	b.n	80199a2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801997e:	683b      	ldr	r3, [r7, #0]
 8019980:	8ada      	ldrh	r2, [r3, #22]
 8019982:	4b10      	ldr	r3, [pc, #64]	; (80199c4 <tcp_new_port+0x84>)
 8019984:	881b      	ldrh	r3, [r3, #0]
 8019986:	429a      	cmp	r2, r3
 8019988:	d108      	bne.n	801999c <tcp_new_port+0x5c>
        n++;
 801998a:	88bb      	ldrh	r3, [r7, #4]
 801998c:	3301      	adds	r3, #1
 801998e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8019990:	88bb      	ldrh	r3, [r7, #4]
 8019992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019996:	d3d8      	bcc.n	801994a <tcp_new_port+0xa>
          return 0;
 8019998:	2300      	movs	r3, #0
 801999a:	e00d      	b.n	80199b8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801999c:	683b      	ldr	r3, [r7, #0]
 801999e:	68db      	ldr	r3, [r3, #12]
 80199a0:	603b      	str	r3, [r7, #0]
 80199a2:	683b      	ldr	r3, [r7, #0]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d1ea      	bne.n	801997e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80199a8:	79fb      	ldrb	r3, [r7, #7]
 80199aa:	3301      	adds	r3, #1
 80199ac:	71fb      	strb	r3, [r7, #7]
 80199ae:	79fb      	ldrb	r3, [r7, #7]
 80199b0:	2b03      	cmp	r3, #3
 80199b2:	d9dd      	bls.n	8019970 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80199b4:	4b03      	ldr	r3, [pc, #12]	; (80199c4 <tcp_new_port+0x84>)
 80199b6:	881b      	ldrh	r3, [r3, #0]
}
 80199b8:	4618      	mov	r0, r3
 80199ba:	370c      	adds	r7, #12
 80199bc:	46bd      	mov	sp, r7
 80199be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199c2:	4770      	bx	lr
 80199c4:	2000002c 	.word	0x2000002c
 80199c8:	08028950 	.word	0x08028950

080199cc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80199cc:	b580      	push	{r7, lr}
 80199ce:	b08a      	sub	sp, #40	; 0x28
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	60f8      	str	r0, [r7, #12]
 80199d4:	60b9      	str	r1, [r7, #8]
 80199d6:	603b      	str	r3, [r7, #0]
 80199d8:	4613      	mov	r3, r2
 80199da:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80199dc:	2300      	movs	r3, #0
 80199de:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d109      	bne.n	80199fa <tcp_connect+0x2e>
 80199e6:	4b7d      	ldr	r3, [pc, #500]	; (8019bdc <tcp_connect+0x210>)
 80199e8:	f240 4235 	movw	r2, #1077	; 0x435
 80199ec:	497c      	ldr	r1, [pc, #496]	; (8019be0 <tcp_connect+0x214>)
 80199ee:	487d      	ldr	r0, [pc, #500]	; (8019be4 <tcp_connect+0x218>)
 80199f0:	f00a f9c6 	bl	8023d80 <iprintf>
 80199f4:	f06f 030f 	mvn.w	r3, #15
 80199f8:	e0ec      	b.n	8019bd4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80199fa:	68bb      	ldr	r3, [r7, #8]
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d109      	bne.n	8019a14 <tcp_connect+0x48>
 8019a00:	4b76      	ldr	r3, [pc, #472]	; (8019bdc <tcp_connect+0x210>)
 8019a02:	f240 4236 	movw	r2, #1078	; 0x436
 8019a06:	4978      	ldr	r1, [pc, #480]	; (8019be8 <tcp_connect+0x21c>)
 8019a08:	4876      	ldr	r0, [pc, #472]	; (8019be4 <tcp_connect+0x218>)
 8019a0a:	f00a f9b9 	bl	8023d80 <iprintf>
 8019a0e:	f06f 030f 	mvn.w	r3, #15
 8019a12:	e0df      	b.n	8019bd4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	7d1b      	ldrb	r3, [r3, #20]
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d009      	beq.n	8019a30 <tcp_connect+0x64>
 8019a1c:	4b6f      	ldr	r3, [pc, #444]	; (8019bdc <tcp_connect+0x210>)
 8019a1e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8019a22:	4972      	ldr	r1, [pc, #456]	; (8019bec <tcp_connect+0x220>)
 8019a24:	486f      	ldr	r0, [pc, #444]	; (8019be4 <tcp_connect+0x218>)
 8019a26:	f00a f9ab 	bl	8023d80 <iprintf>
 8019a2a:	f06f 0309 	mvn.w	r3, #9
 8019a2e:	e0d1      	b.n	8019bd4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8019a30:	68bb      	ldr	r3, [r7, #8]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d002      	beq.n	8019a3c <tcp_connect+0x70>
 8019a36:	68bb      	ldr	r3, [r7, #8]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	e000      	b.n	8019a3e <tcp_connect+0x72>
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	68fa      	ldr	r2, [r7, #12]
 8019a40:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	88fa      	ldrh	r2, [r7, #6]
 8019a46:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	7a1b      	ldrb	r3, [r3, #8]
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d006      	beq.n	8019a5e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	7a1b      	ldrb	r3, [r3, #8]
 8019a54:	4618      	mov	r0, r3
 8019a56:	f7fe fbcd 	bl	80181f4 <netif_get_by_index>
 8019a5a:	6278      	str	r0, [r7, #36]	; 0x24
 8019a5c:	e005      	b.n	8019a6a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	3304      	adds	r3, #4
 8019a62:	4618      	mov	r0, r3
 8019a64:	f007 fb48 	bl	80210f8 <ip4_route>
 8019a68:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8019a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d102      	bne.n	8019a76 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8019a70:	f06f 0303 	mvn.w	r3, #3
 8019a74:	e0ae      	b.n	8019bd4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d003      	beq.n	8019a84 <tcp_connect+0xb8>
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d111      	bne.n	8019aa8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8019a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d002      	beq.n	8019a90 <tcp_connect+0xc4>
 8019a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a8c:	3304      	adds	r3, #4
 8019a8e:	e000      	b.n	8019a92 <tcp_connect+0xc6>
 8019a90:	2300      	movs	r3, #0
 8019a92:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8019a94:	69fb      	ldr	r3, [r7, #28]
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d102      	bne.n	8019aa0 <tcp_connect+0xd4>
      return ERR_RTE;
 8019a9a:	f06f 0303 	mvn.w	r3, #3
 8019a9e:	e099      	b.n	8019bd4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019aa0:	69fb      	ldr	r3, [r7, #28]
 8019aa2:	681a      	ldr	r2, [r3, #0]
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	8adb      	ldrh	r3, [r3, #22]
 8019aac:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	8adb      	ldrh	r3, [r3, #22]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d10c      	bne.n	8019ad0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8019ab6:	f7ff ff43 	bl	8019940 <tcp_new_port>
 8019aba:	4603      	mov	r3, r0
 8019abc:	461a      	mov	r2, r3
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	8adb      	ldrh	r3, [r3, #22]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d102      	bne.n	8019ad0 <tcp_connect+0x104>
      return ERR_BUF;
 8019aca:	f06f 0301 	mvn.w	r3, #1
 8019ace:	e081      	b.n	8019bd4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8019ad0:	68f8      	ldr	r0, [r7, #12]
 8019ad2:	f001 f867 	bl	801aba4 <tcp_next_iss>
 8019ad6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	2200      	movs	r2, #0
 8019adc:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	697a      	ldr	r2, [r7, #20]
 8019ae2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8019ae4:	697b      	ldr	r3, [r7, #20]
 8019ae6:	1e5a      	subs	r2, r3, #1
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8019aec:	697b      	ldr	r3, [r7, #20]
 8019aee:	1e5a      	subs	r2, r3, #1
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8019af4:	697b      	ldr	r3, [r7, #20]
 8019af6:	1e5a      	subs	r2, r3, #1
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019b02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8019b14:	68fb      	ldr	r3, [r7, #12]
 8019b16:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019b1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019b24:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	3304      	adds	r3, #4
 8019b2e:	461a      	mov	r2, r3
 8019b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019b32:	f001 f85d 	bl	801abf0 <tcp_eff_send_mss_netif>
 8019b36:	4603      	mov	r3, r0
 8019b38:	461a      	mov	r2, r3
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	2201      	movs	r2, #1
 8019b42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	683a      	ldr	r2, [r7, #0]
 8019b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8019b4e:	2102      	movs	r1, #2
 8019b50:	68f8      	ldr	r0, [r7, #12]
 8019b52:	f004 fac1 	bl	801e0d8 <tcp_enqueue_flags>
 8019b56:	4603      	mov	r3, r0
 8019b58:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8019b5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d136      	bne.n	8019bd0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	2202      	movs	r2, #2
 8019b66:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8019b68:	8b7b      	ldrh	r3, [r7, #26]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d021      	beq.n	8019bb2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8019b6e:	4b20      	ldr	r3, [pc, #128]	; (8019bf0 <tcp_connect+0x224>)
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	68fa      	ldr	r2, [r7, #12]
 8019b74:	429a      	cmp	r2, r3
 8019b76:	d105      	bne.n	8019b84 <tcp_connect+0x1b8>
 8019b78:	4b1d      	ldr	r3, [pc, #116]	; (8019bf0 <tcp_connect+0x224>)
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	68db      	ldr	r3, [r3, #12]
 8019b7e:	4a1c      	ldr	r2, [pc, #112]	; (8019bf0 <tcp_connect+0x224>)
 8019b80:	6013      	str	r3, [r2, #0]
 8019b82:	e013      	b.n	8019bac <tcp_connect+0x1e0>
 8019b84:	4b1a      	ldr	r3, [pc, #104]	; (8019bf0 <tcp_connect+0x224>)
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	623b      	str	r3, [r7, #32]
 8019b8a:	e00c      	b.n	8019ba6 <tcp_connect+0x1da>
 8019b8c:	6a3b      	ldr	r3, [r7, #32]
 8019b8e:	68db      	ldr	r3, [r3, #12]
 8019b90:	68fa      	ldr	r2, [r7, #12]
 8019b92:	429a      	cmp	r2, r3
 8019b94:	d104      	bne.n	8019ba0 <tcp_connect+0x1d4>
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	68da      	ldr	r2, [r3, #12]
 8019b9a:	6a3b      	ldr	r3, [r7, #32]
 8019b9c:	60da      	str	r2, [r3, #12]
 8019b9e:	e005      	b.n	8019bac <tcp_connect+0x1e0>
 8019ba0:	6a3b      	ldr	r3, [r7, #32]
 8019ba2:	68db      	ldr	r3, [r3, #12]
 8019ba4:	623b      	str	r3, [r7, #32]
 8019ba6:	6a3b      	ldr	r3, [r7, #32]
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d1ef      	bne.n	8019b8c <tcp_connect+0x1c0>
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	2200      	movs	r2, #0
 8019bb0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8019bb2:	4b10      	ldr	r3, [pc, #64]	; (8019bf4 <tcp_connect+0x228>)
 8019bb4:	681a      	ldr	r2, [r3, #0]
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	60da      	str	r2, [r3, #12]
 8019bba:	4a0e      	ldr	r2, [pc, #56]	; (8019bf4 <tcp_connect+0x228>)
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	6013      	str	r3, [r2, #0]
 8019bc0:	f005 faee 	bl	801f1a0 <tcp_timer_needed>
 8019bc4:	4b0c      	ldr	r3, [pc, #48]	; (8019bf8 <tcp_connect+0x22c>)
 8019bc6:	2201      	movs	r2, #1
 8019bc8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8019bca:	68f8      	ldr	r0, [r7, #12]
 8019bcc:	f004 fb72 	bl	801e2b4 <tcp_output>
  }
  return ret;
 8019bd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	3728      	adds	r7, #40	; 0x28
 8019bd8:	46bd      	mov	sp, r7
 8019bda:	bd80      	pop	{r7, pc}
 8019bdc:	080268dc 	.word	0x080268dc
 8019be0:	08026bb8 	.word	0x08026bb8
 8019be4:	08026920 	.word	0x08026920
 8019be8:	08026bd4 	.word	0x08026bd4
 8019bec:	08026bf0 	.word	0x08026bf0
 8019bf0:	2000bf9c 	.word	0x2000bf9c
 8019bf4:	2000bfa4 	.word	0x2000bfa4
 8019bf8:	2000bfac 	.word	0x2000bfac

08019bfc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8019bfc:	b5b0      	push	{r4, r5, r7, lr}
 8019bfe:	b090      	sub	sp, #64	; 0x40
 8019c00:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8019c02:	2300      	movs	r3, #0
 8019c04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8019c08:	4b94      	ldr	r3, [pc, #592]	; (8019e5c <tcp_slowtmr+0x260>)
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	3301      	adds	r3, #1
 8019c0e:	4a93      	ldr	r2, [pc, #588]	; (8019e5c <tcp_slowtmr+0x260>)
 8019c10:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8019c12:	4b93      	ldr	r3, [pc, #588]	; (8019e60 <tcp_slowtmr+0x264>)
 8019c14:	781b      	ldrb	r3, [r3, #0]
 8019c16:	3301      	adds	r3, #1
 8019c18:	b2da      	uxtb	r2, r3
 8019c1a:	4b91      	ldr	r3, [pc, #580]	; (8019e60 <tcp_slowtmr+0x264>)
 8019c1c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8019c1e:	2300      	movs	r3, #0
 8019c20:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8019c22:	4b90      	ldr	r3, [pc, #576]	; (8019e64 <tcp_slowtmr+0x268>)
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8019c28:	e29d      	b.n	801a166 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8019c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c2c:	7d1b      	ldrb	r3, [r3, #20]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d106      	bne.n	8019c40 <tcp_slowtmr+0x44>
 8019c32:	4b8d      	ldr	r3, [pc, #564]	; (8019e68 <tcp_slowtmr+0x26c>)
 8019c34:	f240 42be 	movw	r2, #1214	; 0x4be
 8019c38:	498c      	ldr	r1, [pc, #560]	; (8019e6c <tcp_slowtmr+0x270>)
 8019c3a:	488d      	ldr	r0, [pc, #564]	; (8019e70 <tcp_slowtmr+0x274>)
 8019c3c:	f00a f8a0 	bl	8023d80 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8019c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c42:	7d1b      	ldrb	r3, [r3, #20]
 8019c44:	2b01      	cmp	r3, #1
 8019c46:	d106      	bne.n	8019c56 <tcp_slowtmr+0x5a>
 8019c48:	4b87      	ldr	r3, [pc, #540]	; (8019e68 <tcp_slowtmr+0x26c>)
 8019c4a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8019c4e:	4989      	ldr	r1, [pc, #548]	; (8019e74 <tcp_slowtmr+0x278>)
 8019c50:	4887      	ldr	r0, [pc, #540]	; (8019e70 <tcp_slowtmr+0x274>)
 8019c52:	f00a f895 	bl	8023d80 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8019c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c58:	7d1b      	ldrb	r3, [r3, #20]
 8019c5a:	2b0a      	cmp	r3, #10
 8019c5c:	d106      	bne.n	8019c6c <tcp_slowtmr+0x70>
 8019c5e:	4b82      	ldr	r3, [pc, #520]	; (8019e68 <tcp_slowtmr+0x26c>)
 8019c60:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8019c64:	4984      	ldr	r1, [pc, #528]	; (8019e78 <tcp_slowtmr+0x27c>)
 8019c66:	4882      	ldr	r0, [pc, #520]	; (8019e70 <tcp_slowtmr+0x274>)
 8019c68:	f00a f88a 	bl	8023d80 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8019c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c6e:	7f9a      	ldrb	r2, [r3, #30]
 8019c70:	4b7b      	ldr	r3, [pc, #492]	; (8019e60 <tcp_slowtmr+0x264>)
 8019c72:	781b      	ldrb	r3, [r3, #0]
 8019c74:	429a      	cmp	r2, r3
 8019c76:	d105      	bne.n	8019c84 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8019c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c7a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c7e:	68db      	ldr	r3, [r3, #12]
 8019c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8019c82:	e270      	b.n	801a166 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8019c84:	4b76      	ldr	r3, [pc, #472]	; (8019e60 <tcp_slowtmr+0x264>)
 8019c86:	781a      	ldrb	r2, [r3, #0]
 8019c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c8a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8019c92:	2300      	movs	r3, #0
 8019c94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8019c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c9a:	7d1b      	ldrb	r3, [r3, #20]
 8019c9c:	2b02      	cmp	r3, #2
 8019c9e:	d10a      	bne.n	8019cb6 <tcp_slowtmr+0xba>
 8019ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019ca6:	2b05      	cmp	r3, #5
 8019ca8:	d905      	bls.n	8019cb6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8019caa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019cae:	3301      	adds	r3, #1
 8019cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019cb4:	e11e      	b.n	8019ef4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8019cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019cbc:	2b0b      	cmp	r3, #11
 8019cbe:	d905      	bls.n	8019ccc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8019cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019cc4:	3301      	adds	r3, #1
 8019cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019cca:	e113      	b.n	8019ef4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8019ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d075      	beq.n	8019dc2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8019cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d006      	beq.n	8019cec <tcp_slowtmr+0xf0>
 8019cde:	4b62      	ldr	r3, [pc, #392]	; (8019e68 <tcp_slowtmr+0x26c>)
 8019ce0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8019ce4:	4965      	ldr	r1, [pc, #404]	; (8019e7c <tcp_slowtmr+0x280>)
 8019ce6:	4862      	ldr	r0, [pc, #392]	; (8019e70 <tcp_slowtmr+0x274>)
 8019ce8:	f00a f84a 	bl	8023d80 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8019cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d106      	bne.n	8019d02 <tcp_slowtmr+0x106>
 8019cf4:	4b5c      	ldr	r3, [pc, #368]	; (8019e68 <tcp_slowtmr+0x26c>)
 8019cf6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8019cfa:	4961      	ldr	r1, [pc, #388]	; (8019e80 <tcp_slowtmr+0x284>)
 8019cfc:	485c      	ldr	r0, [pc, #368]	; (8019e70 <tcp_slowtmr+0x274>)
 8019cfe:	f00a f83f 	bl	8023d80 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8019d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d04:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019d08:	2b0b      	cmp	r3, #11
 8019d0a:	d905      	bls.n	8019d18 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8019d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d10:	3301      	adds	r3, #1
 8019d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019d16:	e0ed      	b.n	8019ef4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8019d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019d1e:	3b01      	subs	r3, #1
 8019d20:	4a58      	ldr	r2, [pc, #352]	; (8019e84 <tcp_slowtmr+0x288>)
 8019d22:	5cd3      	ldrb	r3, [r2, r3]
 8019d24:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8019d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019d2c:	7c7a      	ldrb	r2, [r7, #17]
 8019d2e:	429a      	cmp	r2, r3
 8019d30:	d907      	bls.n	8019d42 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8019d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d34:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019d38:	3301      	adds	r3, #1
 8019d3a:	b2da      	uxtb	r2, r3
 8019d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d3e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8019d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019d48:	7c7a      	ldrb	r2, [r7, #17]
 8019d4a:	429a      	cmp	r2, r3
 8019d4c:	f200 80d2 	bhi.w	8019ef4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8019d50:	2301      	movs	r3, #1
 8019d52:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8019d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d108      	bne.n	8019d70 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8019d5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019d60:	f005 f950 	bl	801f004 <tcp_zero_window_probe>
 8019d64:	4603      	mov	r3, r0
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d014      	beq.n	8019d94 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8019d6a:	2300      	movs	r3, #0
 8019d6c:	623b      	str	r3, [r7, #32]
 8019d6e:	e011      	b.n	8019d94 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8019d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019d76:	4619      	mov	r1, r3
 8019d78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019d7a:	f004 f815 	bl	801dda8 <tcp_split_unsent_seg>
 8019d7e:	4603      	mov	r3, r0
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d107      	bne.n	8019d94 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8019d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019d86:	f004 fa95 	bl	801e2b4 <tcp_output>
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d101      	bne.n	8019d94 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8019d90:	2300      	movs	r3, #0
 8019d92:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8019d94:	6a3b      	ldr	r3, [r7, #32]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	f000 80ac 	beq.w	8019ef4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8019d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d9e:	2200      	movs	r2, #0
 8019da0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8019da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019da6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019daa:	2b06      	cmp	r3, #6
 8019dac:	f200 80a2 	bhi.w	8019ef4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8019db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019db2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019db6:	3301      	adds	r3, #1
 8019db8:	b2da      	uxtb	r2, r3
 8019dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dbc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8019dc0:	e098      	b.n	8019ef4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8019dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dc4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	db0f      	blt.n	8019dec <tcp_slowtmr+0x1f0>
 8019dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019dd2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019dd6:	4293      	cmp	r3, r2
 8019dd8:	d008      	beq.n	8019dec <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8019dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ddc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019de0:	b29b      	uxth	r3, r3
 8019de2:	3301      	adds	r3, #1
 8019de4:	b29b      	uxth	r3, r3
 8019de6:	b21a      	sxth	r2, r3
 8019de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dea:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8019dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dee:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8019df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019df4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8019df8:	429a      	cmp	r2, r3
 8019dfa:	db7b      	blt.n	8019ef4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8019dfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019dfe:	f004 fd4b 	bl	801e898 <tcp_rexmit_rto_prepare>
 8019e02:	4603      	mov	r3, r0
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d007      	beq.n	8019e18 <tcp_slowtmr+0x21c>
 8019e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d171      	bne.n	8019ef4 <tcp_slowtmr+0x2f8>
 8019e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d06d      	beq.n	8019ef4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8019e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e1a:	7d1b      	ldrb	r3, [r3, #20]
 8019e1c:	2b02      	cmp	r3, #2
 8019e1e:	d03a      	beq.n	8019e96 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8019e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019e26:	2b0c      	cmp	r3, #12
 8019e28:	bf28      	it	cs
 8019e2a:	230c      	movcs	r3, #12
 8019e2c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8019e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019e34:	10db      	asrs	r3, r3, #3
 8019e36:	b21b      	sxth	r3, r3
 8019e38:	461a      	mov	r2, r3
 8019e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e3c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019e40:	4413      	add	r3, r2
 8019e42:	7efa      	ldrb	r2, [r7, #27]
 8019e44:	4910      	ldr	r1, [pc, #64]	; (8019e88 <tcp_slowtmr+0x28c>)
 8019e46:	5c8a      	ldrb	r2, [r1, r2]
 8019e48:	4093      	lsls	r3, r2
 8019e4a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8019e4c:	697b      	ldr	r3, [r7, #20]
 8019e4e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8019e52:	4293      	cmp	r3, r2
 8019e54:	dc1a      	bgt.n	8019e8c <tcp_slowtmr+0x290>
 8019e56:	697b      	ldr	r3, [r7, #20]
 8019e58:	b21a      	sxth	r2, r3
 8019e5a:	e019      	b.n	8019e90 <tcp_slowtmr+0x294>
 8019e5c:	2000bf98 	.word	0x2000bf98
 8019e60:	2000bfae 	.word	0x2000bfae
 8019e64:	2000bfa4 	.word	0x2000bfa4
 8019e68:	080268dc 	.word	0x080268dc
 8019e6c:	08026c20 	.word	0x08026c20
 8019e70:	08026920 	.word	0x08026920
 8019e74:	08026c4c 	.word	0x08026c4c
 8019e78:	08026c78 	.word	0x08026c78
 8019e7c:	08026ca8 	.word	0x08026ca8
 8019e80:	08026cdc 	.word	0x08026cdc
 8019e84:	08028948 	.word	0x08028948
 8019e88:	08028938 	.word	0x08028938
 8019e8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8019e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e98:	2200      	movs	r2, #0
 8019e9a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8019e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ea4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019ea8:	4293      	cmp	r3, r2
 8019eaa:	bf28      	it	cs
 8019eac:	4613      	movcs	r3, r2
 8019eae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8019eb0:	8a7b      	ldrh	r3, [r7, #18]
 8019eb2:	085b      	lsrs	r3, r3, #1
 8019eb4:	b29a      	uxth	r2, r3
 8019eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eb8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8019ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ebe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019ec6:	005b      	lsls	r3, r3, #1
 8019ec8:	b29b      	uxth	r3, r3
 8019eca:	429a      	cmp	r2, r3
 8019ecc:	d206      	bcs.n	8019edc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8019ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ed0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019ed2:	005b      	lsls	r3, r3, #1
 8019ed4:	b29a      	uxth	r2, r3
 8019ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ed8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8019edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ede:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8019ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ee2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8019ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ee8:	2200      	movs	r2, #0
 8019eea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8019eee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019ef0:	f004 fd42 	bl	801e978 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8019ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ef6:	7d1b      	ldrb	r3, [r3, #20]
 8019ef8:	2b06      	cmp	r3, #6
 8019efa:	d111      	bne.n	8019f20 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8019efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019efe:	8b5b      	ldrh	r3, [r3, #26]
 8019f00:	f003 0310 	and.w	r3, r3, #16
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d00b      	beq.n	8019f20 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019f08:	4b9c      	ldr	r3, [pc, #624]	; (801a17c <tcp_slowtmr+0x580>)
 8019f0a:	681a      	ldr	r2, [r3, #0]
 8019f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f0e:	6a1b      	ldr	r3, [r3, #32]
 8019f10:	1ad3      	subs	r3, r2, r3
 8019f12:	2b28      	cmp	r3, #40	; 0x28
 8019f14:	d904      	bls.n	8019f20 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8019f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f1a:	3301      	adds	r3, #1
 8019f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8019f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f22:	7a5b      	ldrb	r3, [r3, #9]
 8019f24:	f003 0308 	and.w	r3, r3, #8
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d04a      	beq.n	8019fc2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8019f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f2e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8019f30:	2b04      	cmp	r3, #4
 8019f32:	d003      	beq.n	8019f3c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8019f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f36:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8019f38:	2b07      	cmp	r3, #7
 8019f3a:	d142      	bne.n	8019fc2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019f3c:	4b8f      	ldr	r3, [pc, #572]	; (801a17c <tcp_slowtmr+0x580>)
 8019f3e:	681a      	ldr	r2, [r3, #0]
 8019f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f42:	6a1b      	ldr	r3, [r3, #32]
 8019f44:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8019f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f48:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8019f4c:	4b8c      	ldr	r3, [pc, #560]	; (801a180 <tcp_slowtmr+0x584>)
 8019f4e:	440b      	add	r3, r1
 8019f50:	498c      	ldr	r1, [pc, #560]	; (801a184 <tcp_slowtmr+0x588>)
 8019f52:	fba1 1303 	umull	r1, r3, r1, r3
 8019f56:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019f58:	429a      	cmp	r2, r3
 8019f5a:	d90a      	bls.n	8019f72 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8019f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f60:	3301      	adds	r3, #1
 8019f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8019f66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019f6a:	3301      	adds	r3, #1
 8019f6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019f70:	e027      	b.n	8019fc2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019f72:	4b82      	ldr	r3, [pc, #520]	; (801a17c <tcp_slowtmr+0x580>)
 8019f74:	681a      	ldr	r2, [r3, #0]
 8019f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f78:	6a1b      	ldr	r3, [r3, #32]
 8019f7a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8019f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f7e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8019f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f84:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8019f88:	4618      	mov	r0, r3
 8019f8a:	4b7f      	ldr	r3, [pc, #508]	; (801a188 <tcp_slowtmr+0x58c>)
 8019f8c:	fb00 f303 	mul.w	r3, r0, r3
 8019f90:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8019f92:	497c      	ldr	r1, [pc, #496]	; (801a184 <tcp_slowtmr+0x588>)
 8019f94:	fba1 1303 	umull	r1, r3, r1, r3
 8019f98:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019f9a:	429a      	cmp	r2, r3
 8019f9c:	d911      	bls.n	8019fc2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8019f9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019fa0:	f004 fff0 	bl	801ef84 <tcp_keepalive>
 8019fa4:	4603      	mov	r3, r0
 8019fa6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8019faa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d107      	bne.n	8019fc2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8019fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fb4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8019fb8:	3301      	adds	r3, #1
 8019fba:	b2da      	uxtb	r2, r3
 8019fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fbe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8019fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d011      	beq.n	8019fee <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8019fca:	4b6c      	ldr	r3, [pc, #432]	; (801a17c <tcp_slowtmr+0x580>)
 8019fcc:	681a      	ldr	r2, [r3, #0]
 8019fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fd0:	6a1b      	ldr	r3, [r3, #32]
 8019fd2:	1ad2      	subs	r2, r2, r3
 8019fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fd6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8019fda:	4619      	mov	r1, r3
 8019fdc:	460b      	mov	r3, r1
 8019fde:	005b      	lsls	r3, r3, #1
 8019fe0:	440b      	add	r3, r1
 8019fe2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8019fe4:	429a      	cmp	r2, r3
 8019fe6:	d302      	bcc.n	8019fee <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8019fe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019fea:	f000 feab 	bl	801ad44 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8019fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ff0:	7d1b      	ldrb	r3, [r3, #20]
 8019ff2:	2b03      	cmp	r3, #3
 8019ff4:	d10b      	bne.n	801a00e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019ff6:	4b61      	ldr	r3, [pc, #388]	; (801a17c <tcp_slowtmr+0x580>)
 8019ff8:	681a      	ldr	r2, [r3, #0]
 8019ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ffc:	6a1b      	ldr	r3, [r3, #32]
 8019ffe:	1ad3      	subs	r3, r2, r3
 801a000:	2b28      	cmp	r3, #40	; 0x28
 801a002:	d904      	bls.n	801a00e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801a004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a008:	3301      	adds	r3, #1
 801a00a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801a00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a010:	7d1b      	ldrb	r3, [r3, #20]
 801a012:	2b09      	cmp	r3, #9
 801a014:	d10b      	bne.n	801a02e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a016:	4b59      	ldr	r3, [pc, #356]	; (801a17c <tcp_slowtmr+0x580>)
 801a018:	681a      	ldr	r2, [r3, #0]
 801a01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a01c:	6a1b      	ldr	r3, [r3, #32]
 801a01e:	1ad3      	subs	r3, r2, r3
 801a020:	2bf0      	cmp	r3, #240	; 0xf0
 801a022:	d904      	bls.n	801a02e <tcp_slowtmr+0x432>
        ++pcb_remove;
 801a024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a028:	3301      	adds	r3, #1
 801a02a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a02e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a032:	2b00      	cmp	r3, #0
 801a034:	d060      	beq.n	801a0f8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801a036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a03c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801a03e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a040:	f000 fccc 	bl	801a9dc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a046:	2b00      	cmp	r3, #0
 801a048:	d010      	beq.n	801a06c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801a04a:	4b50      	ldr	r3, [pc, #320]	; (801a18c <tcp_slowtmr+0x590>)
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a050:	429a      	cmp	r2, r3
 801a052:	d106      	bne.n	801a062 <tcp_slowtmr+0x466>
 801a054:	4b4e      	ldr	r3, [pc, #312]	; (801a190 <tcp_slowtmr+0x594>)
 801a056:	f240 526d 	movw	r2, #1389	; 0x56d
 801a05a:	494e      	ldr	r1, [pc, #312]	; (801a194 <tcp_slowtmr+0x598>)
 801a05c:	484e      	ldr	r0, [pc, #312]	; (801a198 <tcp_slowtmr+0x59c>)
 801a05e:	f009 fe8f 	bl	8023d80 <iprintf>
        prev->next = pcb->next;
 801a062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a064:	68da      	ldr	r2, [r3, #12]
 801a066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a068:	60da      	str	r2, [r3, #12]
 801a06a:	e00f      	b.n	801a08c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801a06c:	4b47      	ldr	r3, [pc, #284]	; (801a18c <tcp_slowtmr+0x590>)
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a072:	429a      	cmp	r2, r3
 801a074:	d006      	beq.n	801a084 <tcp_slowtmr+0x488>
 801a076:	4b46      	ldr	r3, [pc, #280]	; (801a190 <tcp_slowtmr+0x594>)
 801a078:	f240 5271 	movw	r2, #1393	; 0x571
 801a07c:	4947      	ldr	r1, [pc, #284]	; (801a19c <tcp_slowtmr+0x5a0>)
 801a07e:	4846      	ldr	r0, [pc, #280]	; (801a198 <tcp_slowtmr+0x59c>)
 801a080:	f009 fe7e 	bl	8023d80 <iprintf>
        tcp_active_pcbs = pcb->next;
 801a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a086:	68db      	ldr	r3, [r3, #12]
 801a088:	4a40      	ldr	r2, [pc, #256]	; (801a18c <tcp_slowtmr+0x590>)
 801a08a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801a08c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a090:	2b00      	cmp	r3, #0
 801a092:	d013      	beq.n	801a0bc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a096:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801a098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a09a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a09c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801a09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0a0:	3304      	adds	r3, #4
 801a0a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a0a4:	8ad2      	ldrh	r2, [r2, #22]
 801a0a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a0a8:	8b09      	ldrh	r1, [r1, #24]
 801a0aa:	9102      	str	r1, [sp, #8]
 801a0ac:	9201      	str	r2, [sp, #4]
 801a0ae:	9300      	str	r3, [sp, #0]
 801a0b0:	462b      	mov	r3, r5
 801a0b2:	4622      	mov	r2, r4
 801a0b4:	4601      	mov	r1, r0
 801a0b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a0b8:	f004 feb0 	bl	801ee1c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801a0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0be:	691b      	ldr	r3, [r3, #16]
 801a0c0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801a0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0c4:	7d1b      	ldrb	r3, [r3, #20]
 801a0c6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801a0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ca:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801a0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ce:	68db      	ldr	r3, [r3, #12]
 801a0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a0d2:	6838      	ldr	r0, [r7, #0]
 801a0d4:	f7fe fed8 	bl	8018e88 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801a0d8:	4b31      	ldr	r3, [pc, #196]	; (801a1a0 <tcp_slowtmr+0x5a4>)
 801a0da:	2200      	movs	r2, #0
 801a0dc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d004      	beq.n	801a0ee <tcp_slowtmr+0x4f2>
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	f06f 010c 	mvn.w	r1, #12
 801a0ea:	68b8      	ldr	r0, [r7, #8]
 801a0ec:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801a0ee:	4b2c      	ldr	r3, [pc, #176]	; (801a1a0 <tcp_slowtmr+0x5a4>)
 801a0f0:	781b      	ldrb	r3, [r3, #0]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d037      	beq.n	801a166 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801a0f6:	e592      	b.n	8019c1e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0fe:	68db      	ldr	r3, [r3, #12]
 801a100:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a104:	7f1b      	ldrb	r3, [r3, #28]
 801a106:	3301      	adds	r3, #1
 801a108:	b2da      	uxtb	r2, r3
 801a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a10c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801a10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a110:	7f1a      	ldrb	r2, [r3, #28]
 801a112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a114:	7f5b      	ldrb	r3, [r3, #29]
 801a116:	429a      	cmp	r2, r3
 801a118:	d325      	bcc.n	801a166 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801a11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a11c:	2200      	movs	r2, #0
 801a11e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801a120:	4b1f      	ldr	r3, [pc, #124]	; (801a1a0 <tcp_slowtmr+0x5a4>)
 801a122:	2200      	movs	r2, #0
 801a124:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d00b      	beq.n	801a148 <tcp_slowtmr+0x54c>
 801a130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a138:	6912      	ldr	r2, [r2, #16]
 801a13a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a13c:	4610      	mov	r0, r2
 801a13e:	4798      	blx	r3
 801a140:	4603      	mov	r3, r0
 801a142:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a146:	e002      	b.n	801a14e <tcp_slowtmr+0x552>
 801a148:	2300      	movs	r3, #0
 801a14a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801a14e:	4b14      	ldr	r3, [pc, #80]	; (801a1a0 <tcp_slowtmr+0x5a4>)
 801a150:	781b      	ldrb	r3, [r3, #0]
 801a152:	2b00      	cmp	r3, #0
 801a154:	d000      	beq.n	801a158 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801a156:	e562      	b.n	8019c1e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801a158:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d102      	bne.n	801a166 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801a160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a162:	f004 f8a7 	bl	801e2b4 <tcp_output>
  while (pcb != NULL) {
 801a166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a168:	2b00      	cmp	r3, #0
 801a16a:	f47f ad5e 	bne.w	8019c2a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801a16e:	2300      	movs	r3, #0
 801a170:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801a172:	4b0c      	ldr	r3, [pc, #48]	; (801a1a4 <tcp_slowtmr+0x5a8>)
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a178:	e069      	b.n	801a24e <tcp_slowtmr+0x652>
 801a17a:	bf00      	nop
 801a17c:	2000bf98 	.word	0x2000bf98
 801a180:	000a4cb8 	.word	0x000a4cb8
 801a184:	10624dd3 	.word	0x10624dd3
 801a188:	000124f8 	.word	0x000124f8
 801a18c:	2000bfa4 	.word	0x2000bfa4
 801a190:	080268dc 	.word	0x080268dc
 801a194:	08026d14 	.word	0x08026d14
 801a198:	08026920 	.word	0x08026920
 801a19c:	08026d40 	.word	0x08026d40
 801a1a0:	2000bfac 	.word	0x2000bfac
 801a1a4:	2000bfa8 	.word	0x2000bfa8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1aa:	7d1b      	ldrb	r3, [r3, #20]
 801a1ac:	2b0a      	cmp	r3, #10
 801a1ae:	d006      	beq.n	801a1be <tcp_slowtmr+0x5c2>
 801a1b0:	4b2b      	ldr	r3, [pc, #172]	; (801a260 <tcp_slowtmr+0x664>)
 801a1b2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801a1b6:	492b      	ldr	r1, [pc, #172]	; (801a264 <tcp_slowtmr+0x668>)
 801a1b8:	482b      	ldr	r0, [pc, #172]	; (801a268 <tcp_slowtmr+0x66c>)
 801a1ba:	f009 fde1 	bl	8023d80 <iprintf>
    pcb_remove = 0;
 801a1be:	2300      	movs	r3, #0
 801a1c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a1c4:	4b29      	ldr	r3, [pc, #164]	; (801a26c <tcp_slowtmr+0x670>)
 801a1c6:	681a      	ldr	r2, [r3, #0]
 801a1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1ca:	6a1b      	ldr	r3, [r3, #32]
 801a1cc:	1ad3      	subs	r3, r2, r3
 801a1ce:	2bf0      	cmp	r3, #240	; 0xf0
 801a1d0:	d904      	bls.n	801a1dc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801a1d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a1d6:	3301      	adds	r3, #1
 801a1d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a1dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d02f      	beq.n	801a244 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801a1e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a1e6:	f000 fbf9 	bl	801a9dc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d010      	beq.n	801a212 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801a1f0:	4b1f      	ldr	r3, [pc, #124]	; (801a270 <tcp_slowtmr+0x674>)
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a1f6:	429a      	cmp	r2, r3
 801a1f8:	d106      	bne.n	801a208 <tcp_slowtmr+0x60c>
 801a1fa:	4b19      	ldr	r3, [pc, #100]	; (801a260 <tcp_slowtmr+0x664>)
 801a1fc:	f240 52af 	movw	r2, #1455	; 0x5af
 801a200:	491c      	ldr	r1, [pc, #112]	; (801a274 <tcp_slowtmr+0x678>)
 801a202:	4819      	ldr	r0, [pc, #100]	; (801a268 <tcp_slowtmr+0x66c>)
 801a204:	f009 fdbc 	bl	8023d80 <iprintf>
        prev->next = pcb->next;
 801a208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a20a:	68da      	ldr	r2, [r3, #12]
 801a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a20e:	60da      	str	r2, [r3, #12]
 801a210:	e00f      	b.n	801a232 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801a212:	4b17      	ldr	r3, [pc, #92]	; (801a270 <tcp_slowtmr+0x674>)
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a218:	429a      	cmp	r2, r3
 801a21a:	d006      	beq.n	801a22a <tcp_slowtmr+0x62e>
 801a21c:	4b10      	ldr	r3, [pc, #64]	; (801a260 <tcp_slowtmr+0x664>)
 801a21e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801a222:	4915      	ldr	r1, [pc, #84]	; (801a278 <tcp_slowtmr+0x67c>)
 801a224:	4810      	ldr	r0, [pc, #64]	; (801a268 <tcp_slowtmr+0x66c>)
 801a226:	f009 fdab 	bl	8023d80 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801a22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a22c:	68db      	ldr	r3, [r3, #12]
 801a22e:	4a10      	ldr	r2, [pc, #64]	; (801a270 <tcp_slowtmr+0x674>)
 801a230:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801a232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a234:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801a236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a238:	68db      	ldr	r3, [r3, #12]
 801a23a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a23c:	69f8      	ldr	r0, [r7, #28]
 801a23e:	f7fe fe23 	bl	8018e88 <tcp_free>
 801a242:	e004      	b.n	801a24e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801a244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a246:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a24a:	68db      	ldr	r3, [r3, #12]
 801a24c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a250:	2b00      	cmp	r3, #0
 801a252:	d1a9      	bne.n	801a1a8 <tcp_slowtmr+0x5ac>
    }
  }
}
 801a254:	bf00      	nop
 801a256:	bf00      	nop
 801a258:	3730      	adds	r7, #48	; 0x30
 801a25a:	46bd      	mov	sp, r7
 801a25c:	bdb0      	pop	{r4, r5, r7, pc}
 801a25e:	bf00      	nop
 801a260:	080268dc 	.word	0x080268dc
 801a264:	08026d6c 	.word	0x08026d6c
 801a268:	08026920 	.word	0x08026920
 801a26c:	2000bf98 	.word	0x2000bf98
 801a270:	2000bfa8 	.word	0x2000bfa8
 801a274:	08026d9c 	.word	0x08026d9c
 801a278:	08026dc4 	.word	0x08026dc4

0801a27c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801a27c:	b580      	push	{r7, lr}
 801a27e:	b082      	sub	sp, #8
 801a280:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801a282:	4b2d      	ldr	r3, [pc, #180]	; (801a338 <tcp_fasttmr+0xbc>)
 801a284:	781b      	ldrb	r3, [r3, #0]
 801a286:	3301      	adds	r3, #1
 801a288:	b2da      	uxtb	r2, r3
 801a28a:	4b2b      	ldr	r3, [pc, #172]	; (801a338 <tcp_fasttmr+0xbc>)
 801a28c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801a28e:	4b2b      	ldr	r3, [pc, #172]	; (801a33c <tcp_fasttmr+0xc0>)
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a294:	e048      	b.n	801a328 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	7f9a      	ldrb	r2, [r3, #30]
 801a29a:	4b27      	ldr	r3, [pc, #156]	; (801a338 <tcp_fasttmr+0xbc>)
 801a29c:	781b      	ldrb	r3, [r3, #0]
 801a29e:	429a      	cmp	r2, r3
 801a2a0:	d03f      	beq.n	801a322 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801a2a2:	4b25      	ldr	r3, [pc, #148]	; (801a338 <tcp_fasttmr+0xbc>)
 801a2a4:	781a      	ldrb	r2, [r3, #0]
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	8b5b      	ldrh	r3, [r3, #26]
 801a2ae:	f003 0301 	and.w	r3, r3, #1
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d010      	beq.n	801a2d8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	8b5b      	ldrh	r3, [r3, #26]
 801a2ba:	f043 0302 	orr.w	r3, r3, #2
 801a2be:	b29a      	uxth	r2, r3
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801a2c4:	6878      	ldr	r0, [r7, #4]
 801a2c6:	f003 fff5 	bl	801e2b4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	8b5b      	ldrh	r3, [r3, #26]
 801a2ce:	f023 0303 	bic.w	r3, r3, #3
 801a2d2:	b29a      	uxth	r2, r3
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	8b5b      	ldrh	r3, [r3, #26]
 801a2dc:	f003 0308 	and.w	r3, r3, #8
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d009      	beq.n	801a2f8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	8b5b      	ldrh	r3, [r3, #26]
 801a2e8:	f023 0308 	bic.w	r3, r3, #8
 801a2ec:	b29a      	uxth	r2, r3
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801a2f2:	6878      	ldr	r0, [r7, #4]
 801a2f4:	f7fe ff5c 	bl	80191b0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	68db      	ldr	r3, [r3, #12]
 801a2fc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a302:	2b00      	cmp	r3, #0
 801a304:	d00a      	beq.n	801a31c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801a306:	4b0e      	ldr	r3, [pc, #56]	; (801a340 <tcp_fasttmr+0xc4>)
 801a308:	2200      	movs	r2, #0
 801a30a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801a30c:	6878      	ldr	r0, [r7, #4]
 801a30e:	f000 f819 	bl	801a344 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801a312:	4b0b      	ldr	r3, [pc, #44]	; (801a340 <tcp_fasttmr+0xc4>)
 801a314:	781b      	ldrb	r3, [r3, #0]
 801a316:	2b00      	cmp	r3, #0
 801a318:	d000      	beq.n	801a31c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801a31a:	e7b8      	b.n	801a28e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801a31c:	683b      	ldr	r3, [r7, #0]
 801a31e:	607b      	str	r3, [r7, #4]
 801a320:	e002      	b.n	801a328 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	68db      	ldr	r3, [r3, #12]
 801a326:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d1b3      	bne.n	801a296 <tcp_fasttmr+0x1a>
    }
  }
}
 801a32e:	bf00      	nop
 801a330:	bf00      	nop
 801a332:	3708      	adds	r7, #8
 801a334:	46bd      	mov	sp, r7
 801a336:	bd80      	pop	{r7, pc}
 801a338:	2000bfae 	.word	0x2000bfae
 801a33c:	2000bfa4 	.word	0x2000bfa4
 801a340:	2000bfac 	.word	0x2000bfac

0801a344 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801a344:	b590      	push	{r4, r7, lr}
 801a346:	b085      	sub	sp, #20
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d109      	bne.n	801a366 <tcp_process_refused_data+0x22>
 801a352:	4b37      	ldr	r3, [pc, #220]	; (801a430 <tcp_process_refused_data+0xec>)
 801a354:	f240 6209 	movw	r2, #1545	; 0x609
 801a358:	4936      	ldr	r1, [pc, #216]	; (801a434 <tcp_process_refused_data+0xf0>)
 801a35a:	4837      	ldr	r0, [pc, #220]	; (801a438 <tcp_process_refused_data+0xf4>)
 801a35c:	f009 fd10 	bl	8023d80 <iprintf>
 801a360:	f06f 030f 	mvn.w	r3, #15
 801a364:	e060      	b.n	801a428 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a36a:	7b5b      	ldrb	r3, [r3, #13]
 801a36c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a372:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	2200      	movs	r2, #0
 801a378:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a380:	2b00      	cmp	r3, #0
 801a382:	d00b      	beq.n	801a39c <tcp_process_refused_data+0x58>
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	6918      	ldr	r0, [r3, #16]
 801a38e:	2300      	movs	r3, #0
 801a390:	68ba      	ldr	r2, [r7, #8]
 801a392:	6879      	ldr	r1, [r7, #4]
 801a394:	47a0      	blx	r4
 801a396:	4603      	mov	r3, r0
 801a398:	73fb      	strb	r3, [r7, #15]
 801a39a:	e007      	b.n	801a3ac <tcp_process_refused_data+0x68>
 801a39c:	2300      	movs	r3, #0
 801a39e:	68ba      	ldr	r2, [r7, #8]
 801a3a0:	6879      	ldr	r1, [r7, #4]
 801a3a2:	2000      	movs	r0, #0
 801a3a4:	f000 f8a4 	bl	801a4f0 <tcp_recv_null>
 801a3a8:	4603      	mov	r3, r0
 801a3aa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801a3ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d12a      	bne.n	801a40a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801a3b4:	7bbb      	ldrb	r3, [r7, #14]
 801a3b6:	f003 0320 	and.w	r3, r3, #32
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d033      	beq.n	801a426 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a3c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a3c6:	d005      	beq.n	801a3d4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a3cc:	3301      	adds	r3, #1
 801a3ce:	b29a      	uxth	r2, r3
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d00b      	beq.n	801a3f6 <tcp_process_refused_data+0xb2>
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	6918      	ldr	r0, [r3, #16]
 801a3e8:	2300      	movs	r3, #0
 801a3ea:	2200      	movs	r2, #0
 801a3ec:	6879      	ldr	r1, [r7, #4]
 801a3ee:	47a0      	blx	r4
 801a3f0:	4603      	mov	r3, r0
 801a3f2:	73fb      	strb	r3, [r7, #15]
 801a3f4:	e001      	b.n	801a3fa <tcp_process_refused_data+0xb6>
 801a3f6:	2300      	movs	r3, #0
 801a3f8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801a3fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3fe:	f113 0f0d 	cmn.w	r3, #13
 801a402:	d110      	bne.n	801a426 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801a404:	f06f 030c 	mvn.w	r3, #12
 801a408:	e00e      	b.n	801a428 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801a40a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a40e:	f113 0f0d 	cmn.w	r3, #13
 801a412:	d102      	bne.n	801a41a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801a414:	f06f 030c 	mvn.w	r3, #12
 801a418:	e006      	b.n	801a428 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	68ba      	ldr	r2, [r7, #8]
 801a41e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801a420:	f06f 0304 	mvn.w	r3, #4
 801a424:	e000      	b.n	801a428 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801a426:	2300      	movs	r3, #0
}
 801a428:	4618      	mov	r0, r3
 801a42a:	3714      	adds	r7, #20
 801a42c:	46bd      	mov	sp, r7
 801a42e:	bd90      	pop	{r4, r7, pc}
 801a430:	080268dc 	.word	0x080268dc
 801a434:	08026dec 	.word	0x08026dec
 801a438:	08026920 	.word	0x08026920

0801a43c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801a43c:	b580      	push	{r7, lr}
 801a43e:	b084      	sub	sp, #16
 801a440:	af00      	add	r7, sp, #0
 801a442:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801a444:	e007      	b.n	801a456 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801a44c:	6878      	ldr	r0, [r7, #4]
 801a44e:	f000 f80a 	bl	801a466 <tcp_seg_free>
    seg = next;
 801a452:	68fb      	ldr	r3, [r7, #12]
 801a454:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d1f4      	bne.n	801a446 <tcp_segs_free+0xa>
  }
}
 801a45c:	bf00      	nop
 801a45e:	bf00      	nop
 801a460:	3710      	adds	r7, #16
 801a462:	46bd      	mov	sp, r7
 801a464:	bd80      	pop	{r7, pc}

0801a466 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801a466:	b580      	push	{r7, lr}
 801a468:	b082      	sub	sp, #8
 801a46a:	af00      	add	r7, sp, #0
 801a46c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	2b00      	cmp	r3, #0
 801a472:	d00c      	beq.n	801a48e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	685b      	ldr	r3, [r3, #4]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d004      	beq.n	801a486 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	685b      	ldr	r3, [r3, #4]
 801a480:	4618      	mov	r0, r3
 801a482:	f7fe fa45 	bl	8018910 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801a486:	6879      	ldr	r1, [r7, #4]
 801a488:	2003      	movs	r0, #3
 801a48a:	f7fd fb9d 	bl	8017bc8 <memp_free>
  }
}
 801a48e:	bf00      	nop
 801a490:	3708      	adds	r7, #8
 801a492:	46bd      	mov	sp, r7
 801a494:	bd80      	pop	{r7, pc}
	...

0801a498 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801a498:	b580      	push	{r7, lr}
 801a49a:	b084      	sub	sp, #16
 801a49c:	af00      	add	r7, sp, #0
 801a49e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d106      	bne.n	801a4b4 <tcp_seg_copy+0x1c>
 801a4a6:	4b0f      	ldr	r3, [pc, #60]	; (801a4e4 <tcp_seg_copy+0x4c>)
 801a4a8:	f240 6282 	movw	r2, #1666	; 0x682
 801a4ac:	490e      	ldr	r1, [pc, #56]	; (801a4e8 <tcp_seg_copy+0x50>)
 801a4ae:	480f      	ldr	r0, [pc, #60]	; (801a4ec <tcp_seg_copy+0x54>)
 801a4b0:	f009 fc66 	bl	8023d80 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801a4b4:	2003      	movs	r0, #3
 801a4b6:	f7fd fb11 	bl	8017adc <memp_malloc>
 801a4ba:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d101      	bne.n	801a4c6 <tcp_seg_copy+0x2e>
    return NULL;
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	e00a      	b.n	801a4dc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801a4c6:	2210      	movs	r2, #16
 801a4c8:	6879      	ldr	r1, [r7, #4]
 801a4ca:	68f8      	ldr	r0, [r7, #12]
 801a4cc:	f009 fb48 	bl	8023b60 <memcpy>
  pbuf_ref(cseg->p);
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	685b      	ldr	r3, [r3, #4]
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	f7fe fac1 	bl	8018a5c <pbuf_ref>
  return cseg;
 801a4da:	68fb      	ldr	r3, [r7, #12]
}
 801a4dc:	4618      	mov	r0, r3
 801a4de:	3710      	adds	r7, #16
 801a4e0:	46bd      	mov	sp, r7
 801a4e2:	bd80      	pop	{r7, pc}
 801a4e4:	080268dc 	.word	0x080268dc
 801a4e8:	08026e30 	.word	0x08026e30
 801a4ec:	08026920 	.word	0x08026920

0801a4f0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801a4f0:	b580      	push	{r7, lr}
 801a4f2:	b084      	sub	sp, #16
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	60f8      	str	r0, [r7, #12]
 801a4f8:	60b9      	str	r1, [r7, #8]
 801a4fa:	607a      	str	r2, [r7, #4]
 801a4fc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801a4fe:	68bb      	ldr	r3, [r7, #8]
 801a500:	2b00      	cmp	r3, #0
 801a502:	d109      	bne.n	801a518 <tcp_recv_null+0x28>
 801a504:	4b12      	ldr	r3, [pc, #72]	; (801a550 <tcp_recv_null+0x60>)
 801a506:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a50a:	4912      	ldr	r1, [pc, #72]	; (801a554 <tcp_recv_null+0x64>)
 801a50c:	4812      	ldr	r0, [pc, #72]	; (801a558 <tcp_recv_null+0x68>)
 801a50e:	f009 fc37 	bl	8023d80 <iprintf>
 801a512:	f06f 030f 	mvn.w	r3, #15
 801a516:	e016      	b.n	801a546 <tcp_recv_null+0x56>

  if (p != NULL) {
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d009      	beq.n	801a532 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	891b      	ldrh	r3, [r3, #8]
 801a522:	4619      	mov	r1, r3
 801a524:	68b8      	ldr	r0, [r7, #8]
 801a526:	f7ff f9bb 	bl	80198a0 <tcp_recved>
    pbuf_free(p);
 801a52a:	6878      	ldr	r0, [r7, #4]
 801a52c:	f7fe f9f0 	bl	8018910 <pbuf_free>
 801a530:	e008      	b.n	801a544 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801a532:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a536:	2b00      	cmp	r3, #0
 801a538:	d104      	bne.n	801a544 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801a53a:	68b8      	ldr	r0, [r7, #8]
 801a53c:	f7fe fea2 	bl	8019284 <tcp_close>
 801a540:	4603      	mov	r3, r0
 801a542:	e000      	b.n	801a546 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801a544:	2300      	movs	r3, #0
}
 801a546:	4618      	mov	r0, r3
 801a548:	3710      	adds	r7, #16
 801a54a:	46bd      	mov	sp, r7
 801a54c:	bd80      	pop	{r7, pc}
 801a54e:	bf00      	nop
 801a550:	080268dc 	.word	0x080268dc
 801a554:	08026e4c 	.word	0x08026e4c
 801a558:	08026920 	.word	0x08026920

0801a55c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801a55c:	b580      	push	{r7, lr}
 801a55e:	b086      	sub	sp, #24
 801a560:	af00      	add	r7, sp, #0
 801a562:	4603      	mov	r3, r0
 801a564:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801a566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	db01      	blt.n	801a572 <tcp_kill_prio+0x16>
 801a56e:	79fb      	ldrb	r3, [r7, #7]
 801a570:	e000      	b.n	801a574 <tcp_kill_prio+0x18>
 801a572:	237f      	movs	r3, #127	; 0x7f
 801a574:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801a576:	7afb      	ldrb	r3, [r7, #11]
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d034      	beq.n	801a5e6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801a57c:	7afb      	ldrb	r3, [r7, #11]
 801a57e:	3b01      	subs	r3, #1
 801a580:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801a582:	2300      	movs	r3, #0
 801a584:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801a586:	2300      	movs	r3, #0
 801a588:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a58a:	4b19      	ldr	r3, [pc, #100]	; (801a5f0 <tcp_kill_prio+0x94>)
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	617b      	str	r3, [r7, #20]
 801a590:	e01f      	b.n	801a5d2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801a592:	697b      	ldr	r3, [r7, #20]
 801a594:	7d5b      	ldrb	r3, [r3, #21]
 801a596:	7afa      	ldrb	r2, [r7, #11]
 801a598:	429a      	cmp	r2, r3
 801a59a:	d80c      	bhi.n	801a5b6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a59c:	697b      	ldr	r3, [r7, #20]
 801a59e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801a5a0:	7afa      	ldrb	r2, [r7, #11]
 801a5a2:	429a      	cmp	r2, r3
 801a5a4:	d112      	bne.n	801a5cc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a5a6:	4b13      	ldr	r3, [pc, #76]	; (801a5f4 <tcp_kill_prio+0x98>)
 801a5a8:	681a      	ldr	r2, [r3, #0]
 801a5aa:	697b      	ldr	r3, [r7, #20]
 801a5ac:	6a1b      	ldr	r3, [r3, #32]
 801a5ae:	1ad3      	subs	r3, r2, r3
 801a5b0:	68fa      	ldr	r2, [r7, #12]
 801a5b2:	429a      	cmp	r2, r3
 801a5b4:	d80a      	bhi.n	801a5cc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801a5b6:	4b0f      	ldr	r3, [pc, #60]	; (801a5f4 <tcp_kill_prio+0x98>)
 801a5b8:	681a      	ldr	r2, [r3, #0]
 801a5ba:	697b      	ldr	r3, [r7, #20]
 801a5bc:	6a1b      	ldr	r3, [r3, #32]
 801a5be:	1ad3      	subs	r3, r2, r3
 801a5c0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801a5c2:	697b      	ldr	r3, [r7, #20]
 801a5c4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801a5c6:	697b      	ldr	r3, [r7, #20]
 801a5c8:	7d5b      	ldrb	r3, [r3, #21]
 801a5ca:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a5cc:	697b      	ldr	r3, [r7, #20]
 801a5ce:	68db      	ldr	r3, [r3, #12]
 801a5d0:	617b      	str	r3, [r7, #20]
 801a5d2:	697b      	ldr	r3, [r7, #20]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d1dc      	bne.n	801a592 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801a5d8:	693b      	ldr	r3, [r7, #16]
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d004      	beq.n	801a5e8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801a5de:	6938      	ldr	r0, [r7, #16]
 801a5e0:	f7fe ff96 	bl	8019510 <tcp_abort>
 801a5e4:	e000      	b.n	801a5e8 <tcp_kill_prio+0x8c>
    return;
 801a5e6:	bf00      	nop
  }
}
 801a5e8:	3718      	adds	r7, #24
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	bd80      	pop	{r7, pc}
 801a5ee:	bf00      	nop
 801a5f0:	2000bfa4 	.word	0x2000bfa4
 801a5f4:	2000bf98 	.word	0x2000bf98

0801a5f8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801a5f8:	b580      	push	{r7, lr}
 801a5fa:	b086      	sub	sp, #24
 801a5fc:	af00      	add	r7, sp, #0
 801a5fe:	4603      	mov	r3, r0
 801a600:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801a602:	79fb      	ldrb	r3, [r7, #7]
 801a604:	2b08      	cmp	r3, #8
 801a606:	d009      	beq.n	801a61c <tcp_kill_state+0x24>
 801a608:	79fb      	ldrb	r3, [r7, #7]
 801a60a:	2b09      	cmp	r3, #9
 801a60c:	d006      	beq.n	801a61c <tcp_kill_state+0x24>
 801a60e:	4b1a      	ldr	r3, [pc, #104]	; (801a678 <tcp_kill_state+0x80>)
 801a610:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801a614:	4919      	ldr	r1, [pc, #100]	; (801a67c <tcp_kill_state+0x84>)
 801a616:	481a      	ldr	r0, [pc, #104]	; (801a680 <tcp_kill_state+0x88>)
 801a618:	f009 fbb2 	bl	8023d80 <iprintf>

  inactivity = 0;
 801a61c:	2300      	movs	r3, #0
 801a61e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801a620:	2300      	movs	r3, #0
 801a622:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a624:	4b17      	ldr	r3, [pc, #92]	; (801a684 <tcp_kill_state+0x8c>)
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	617b      	str	r3, [r7, #20]
 801a62a:	e017      	b.n	801a65c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801a62c:	697b      	ldr	r3, [r7, #20]
 801a62e:	7d1b      	ldrb	r3, [r3, #20]
 801a630:	79fa      	ldrb	r2, [r7, #7]
 801a632:	429a      	cmp	r2, r3
 801a634:	d10f      	bne.n	801a656 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a636:	4b14      	ldr	r3, [pc, #80]	; (801a688 <tcp_kill_state+0x90>)
 801a638:	681a      	ldr	r2, [r3, #0]
 801a63a:	697b      	ldr	r3, [r7, #20]
 801a63c:	6a1b      	ldr	r3, [r3, #32]
 801a63e:	1ad3      	subs	r3, r2, r3
 801a640:	68fa      	ldr	r2, [r7, #12]
 801a642:	429a      	cmp	r2, r3
 801a644:	d807      	bhi.n	801a656 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801a646:	4b10      	ldr	r3, [pc, #64]	; (801a688 <tcp_kill_state+0x90>)
 801a648:	681a      	ldr	r2, [r3, #0]
 801a64a:	697b      	ldr	r3, [r7, #20]
 801a64c:	6a1b      	ldr	r3, [r3, #32]
 801a64e:	1ad3      	subs	r3, r2, r3
 801a650:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801a652:	697b      	ldr	r3, [r7, #20]
 801a654:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a656:	697b      	ldr	r3, [r7, #20]
 801a658:	68db      	ldr	r3, [r3, #12]
 801a65a:	617b      	str	r3, [r7, #20]
 801a65c:	697b      	ldr	r3, [r7, #20]
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d1e4      	bne.n	801a62c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801a662:	693b      	ldr	r3, [r7, #16]
 801a664:	2b00      	cmp	r3, #0
 801a666:	d003      	beq.n	801a670 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801a668:	2100      	movs	r1, #0
 801a66a:	6938      	ldr	r0, [r7, #16]
 801a66c:	f7fe fe92 	bl	8019394 <tcp_abandon>
  }
}
 801a670:	bf00      	nop
 801a672:	3718      	adds	r7, #24
 801a674:	46bd      	mov	sp, r7
 801a676:	bd80      	pop	{r7, pc}
 801a678:	080268dc 	.word	0x080268dc
 801a67c:	08026e68 	.word	0x08026e68
 801a680:	08026920 	.word	0x08026920
 801a684:	2000bfa4 	.word	0x2000bfa4
 801a688:	2000bf98 	.word	0x2000bf98

0801a68c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b084      	sub	sp, #16
 801a690:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801a692:	2300      	movs	r3, #0
 801a694:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801a696:	2300      	movs	r3, #0
 801a698:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a69a:	4b12      	ldr	r3, [pc, #72]	; (801a6e4 <tcp_kill_timewait+0x58>)
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	60fb      	str	r3, [r7, #12]
 801a6a0:	e012      	b.n	801a6c8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a6a2:	4b11      	ldr	r3, [pc, #68]	; (801a6e8 <tcp_kill_timewait+0x5c>)
 801a6a4:	681a      	ldr	r2, [r3, #0]
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	6a1b      	ldr	r3, [r3, #32]
 801a6aa:	1ad3      	subs	r3, r2, r3
 801a6ac:	687a      	ldr	r2, [r7, #4]
 801a6ae:	429a      	cmp	r2, r3
 801a6b0:	d807      	bhi.n	801a6c2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801a6b2:	4b0d      	ldr	r3, [pc, #52]	; (801a6e8 <tcp_kill_timewait+0x5c>)
 801a6b4:	681a      	ldr	r2, [r3, #0]
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	6a1b      	ldr	r3, [r3, #32]
 801a6ba:	1ad3      	subs	r3, r2, r3
 801a6bc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	68db      	ldr	r3, [r3, #12]
 801a6c6:	60fb      	str	r3, [r7, #12]
 801a6c8:	68fb      	ldr	r3, [r7, #12]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d1e9      	bne.n	801a6a2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801a6ce:	68bb      	ldr	r3, [r7, #8]
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	d002      	beq.n	801a6da <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801a6d4:	68b8      	ldr	r0, [r7, #8]
 801a6d6:	f7fe ff1b 	bl	8019510 <tcp_abort>
  }
}
 801a6da:	bf00      	nop
 801a6dc:	3710      	adds	r7, #16
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	bd80      	pop	{r7, pc}
 801a6e2:	bf00      	nop
 801a6e4:	2000bfa8 	.word	0x2000bfa8
 801a6e8:	2000bf98 	.word	0x2000bf98

0801a6ec <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b082      	sub	sp, #8
 801a6f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801a6f2:	4b10      	ldr	r3, [pc, #64]	; (801a734 <tcp_handle_closepend+0x48>)
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a6f8:	e014      	b.n	801a724 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	68db      	ldr	r3, [r3, #12]
 801a6fe:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	8b5b      	ldrh	r3, [r3, #26]
 801a704:	f003 0308 	and.w	r3, r3, #8
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d009      	beq.n	801a720 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	8b5b      	ldrh	r3, [r3, #26]
 801a710:	f023 0308 	bic.w	r3, r3, #8
 801a714:	b29a      	uxth	r2, r3
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801a71a:	6878      	ldr	r0, [r7, #4]
 801a71c:	f7fe fd48 	bl	80191b0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801a720:	683b      	ldr	r3, [r7, #0]
 801a722:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	2b00      	cmp	r3, #0
 801a728:	d1e7      	bne.n	801a6fa <tcp_handle_closepend+0xe>
  }
}
 801a72a:	bf00      	nop
 801a72c:	bf00      	nop
 801a72e:	3708      	adds	r7, #8
 801a730:	46bd      	mov	sp, r7
 801a732:	bd80      	pop	{r7, pc}
 801a734:	2000bfa4 	.word	0x2000bfa4

0801a738 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801a738:	b580      	push	{r7, lr}
 801a73a:	b084      	sub	sp, #16
 801a73c:	af00      	add	r7, sp, #0
 801a73e:	4603      	mov	r3, r0
 801a740:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a742:	2001      	movs	r0, #1
 801a744:	f7fd f9ca 	bl	8017adc <memp_malloc>
 801a748:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801a74a:	68fb      	ldr	r3, [r7, #12]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d126      	bne.n	801a79e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801a750:	f7ff ffcc 	bl	801a6ec <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801a754:	f7ff ff9a 	bl	801a68c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a758:	2001      	movs	r0, #1
 801a75a:	f7fd f9bf 	bl	8017adc <memp_malloc>
 801a75e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	2b00      	cmp	r3, #0
 801a764:	d11b      	bne.n	801a79e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801a766:	2009      	movs	r0, #9
 801a768:	f7ff ff46 	bl	801a5f8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a76c:	2001      	movs	r0, #1
 801a76e:	f7fd f9b5 	bl	8017adc <memp_malloc>
 801a772:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d111      	bne.n	801a79e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801a77a:	2008      	movs	r0, #8
 801a77c:	f7ff ff3c 	bl	801a5f8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a780:	2001      	movs	r0, #1
 801a782:	f7fd f9ab 	bl	8017adc <memp_malloc>
 801a786:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d107      	bne.n	801a79e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801a78e:	79fb      	ldrb	r3, [r7, #7]
 801a790:	4618      	mov	r0, r3
 801a792:	f7ff fee3 	bl	801a55c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a796:	2001      	movs	r0, #1
 801a798:	f7fd f9a0 	bl	8017adc <memp_malloc>
 801a79c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d03f      	beq.n	801a824 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801a7a4:	229c      	movs	r2, #156	; 0x9c
 801a7a6:	2100      	movs	r1, #0
 801a7a8:	68f8      	ldr	r0, [r7, #12]
 801a7aa:	f009 fa01 	bl	8023bb0 <memset>
    pcb->prio = prio;
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	79fa      	ldrb	r2, [r7, #7]
 801a7b2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801a7ba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a7be:	68fb      	ldr	r3, [r7, #12]
 801a7c0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a7c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a7ca:	68fb      	ldr	r3, [r7, #12]
 801a7cc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801a7ce:	68fb      	ldr	r3, [r7, #12]
 801a7d0:	22ff      	movs	r2, #255	; 0xff
 801a7d2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a7da:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	2206      	movs	r2, #6
 801a7e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801a7e4:	68fb      	ldr	r3, [r7, #12]
 801a7e6:	2206      	movs	r2, #6
 801a7e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a7f0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801a7f2:	68fb      	ldr	r3, [r7, #12]
 801a7f4:	2201      	movs	r2, #1
 801a7f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801a7fa:	4b0d      	ldr	r3, [pc, #52]	; (801a830 <tcp_alloc+0xf8>)
 801a7fc:	681a      	ldr	r2, [r3, #0]
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801a802:	4b0c      	ldr	r3, [pc, #48]	; (801a834 <tcp_alloc+0xfc>)
 801a804:	781a      	ldrb	r2, [r3, #0]
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801a80a:	68fb      	ldr	r3, [r7, #12]
 801a80c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801a810:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	4a08      	ldr	r2, [pc, #32]	; (801a838 <tcp_alloc+0x100>)
 801a818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	4a07      	ldr	r2, [pc, #28]	; (801a83c <tcp_alloc+0x104>)
 801a820:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801a824:	68fb      	ldr	r3, [r7, #12]
}
 801a826:	4618      	mov	r0, r3
 801a828:	3710      	adds	r7, #16
 801a82a:	46bd      	mov	sp, r7
 801a82c:	bd80      	pop	{r7, pc}
 801a82e:	bf00      	nop
 801a830:	2000bf98 	.word	0x2000bf98
 801a834:	2000bfae 	.word	0x2000bfae
 801a838:	0801a4f1 	.word	0x0801a4f1
 801a83c:	006ddd00 	.word	0x006ddd00

0801a840 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801a840:	b580      	push	{r7, lr}
 801a842:	b084      	sub	sp, #16
 801a844:	af00      	add	r7, sp, #0
 801a846:	4603      	mov	r3, r0
 801a848:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801a84a:	2040      	movs	r0, #64	; 0x40
 801a84c:	f7ff ff74 	bl	801a738 <tcp_alloc>
 801a850:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a852:	68fb      	ldr	r3, [r7, #12]
}
 801a854:	4618      	mov	r0, r3
 801a856:	3710      	adds	r7, #16
 801a858:	46bd      	mov	sp, r7
 801a85a:	bd80      	pop	{r7, pc}

0801a85c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801a85c:	b480      	push	{r7}
 801a85e:	b083      	sub	sp, #12
 801a860:	af00      	add	r7, sp, #0
 801a862:	6078      	str	r0, [r7, #4]
 801a864:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d002      	beq.n	801a872 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	683a      	ldr	r2, [r7, #0]
 801a870:	611a      	str	r2, [r3, #16]
  }
}
 801a872:	bf00      	nop
 801a874:	370c      	adds	r7, #12
 801a876:	46bd      	mov	sp, r7
 801a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a87c:	4770      	bx	lr
	...

0801a880 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801a880:	b580      	push	{r7, lr}
 801a882:	b082      	sub	sp, #8
 801a884:	af00      	add	r7, sp, #0
 801a886:	6078      	str	r0, [r7, #4]
 801a888:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d00e      	beq.n	801a8ae <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	7d1b      	ldrb	r3, [r3, #20]
 801a894:	2b01      	cmp	r3, #1
 801a896:	d106      	bne.n	801a8a6 <tcp_recv+0x26>
 801a898:	4b07      	ldr	r3, [pc, #28]	; (801a8b8 <tcp_recv+0x38>)
 801a89a:	f240 72df 	movw	r2, #2015	; 0x7df
 801a89e:	4907      	ldr	r1, [pc, #28]	; (801a8bc <tcp_recv+0x3c>)
 801a8a0:	4807      	ldr	r0, [pc, #28]	; (801a8c0 <tcp_recv+0x40>)
 801a8a2:	f009 fa6d 	bl	8023d80 <iprintf>
    pcb->recv = recv;
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	683a      	ldr	r2, [r7, #0]
 801a8aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801a8ae:	bf00      	nop
 801a8b0:	3708      	adds	r7, #8
 801a8b2:	46bd      	mov	sp, r7
 801a8b4:	bd80      	pop	{r7, pc}
 801a8b6:	bf00      	nop
 801a8b8:	080268dc 	.word	0x080268dc
 801a8bc:	08026e78 	.word	0x08026e78
 801a8c0:	08026920 	.word	0x08026920

0801a8c4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801a8c4:	b580      	push	{r7, lr}
 801a8c6:	b082      	sub	sp, #8
 801a8c8:	af00      	add	r7, sp, #0
 801a8ca:	6078      	str	r0, [r7, #4]
 801a8cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d00e      	beq.n	801a8f2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	7d1b      	ldrb	r3, [r3, #20]
 801a8d8:	2b01      	cmp	r3, #1
 801a8da:	d106      	bne.n	801a8ea <tcp_sent+0x26>
 801a8dc:	4b07      	ldr	r3, [pc, #28]	; (801a8fc <tcp_sent+0x38>)
 801a8de:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801a8e2:	4907      	ldr	r1, [pc, #28]	; (801a900 <tcp_sent+0x3c>)
 801a8e4:	4807      	ldr	r0, [pc, #28]	; (801a904 <tcp_sent+0x40>)
 801a8e6:	f009 fa4b 	bl	8023d80 <iprintf>
    pcb->sent = sent;
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	683a      	ldr	r2, [r7, #0]
 801a8ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801a8f2:	bf00      	nop
 801a8f4:	3708      	adds	r7, #8
 801a8f6:	46bd      	mov	sp, r7
 801a8f8:	bd80      	pop	{r7, pc}
 801a8fa:	bf00      	nop
 801a8fc:	080268dc 	.word	0x080268dc
 801a900:	08026ea0 	.word	0x08026ea0
 801a904:	08026920 	.word	0x08026920

0801a908 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801a908:	b580      	push	{r7, lr}
 801a90a:	b082      	sub	sp, #8
 801a90c:	af00      	add	r7, sp, #0
 801a90e:	6078      	str	r0, [r7, #4]
 801a910:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	2b00      	cmp	r3, #0
 801a916:	d00e      	beq.n	801a936 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	7d1b      	ldrb	r3, [r3, #20]
 801a91c:	2b01      	cmp	r3, #1
 801a91e:	d106      	bne.n	801a92e <tcp_err+0x26>
 801a920:	4b07      	ldr	r3, [pc, #28]	; (801a940 <tcp_err+0x38>)
 801a922:	f640 020d 	movw	r2, #2061	; 0x80d
 801a926:	4907      	ldr	r1, [pc, #28]	; (801a944 <tcp_err+0x3c>)
 801a928:	4807      	ldr	r0, [pc, #28]	; (801a948 <tcp_err+0x40>)
 801a92a:	f009 fa29 	bl	8023d80 <iprintf>
    pcb->errf = err;
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	683a      	ldr	r2, [r7, #0]
 801a932:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801a936:	bf00      	nop
 801a938:	3708      	adds	r7, #8
 801a93a:	46bd      	mov	sp, r7
 801a93c:	bd80      	pop	{r7, pc}
 801a93e:	bf00      	nop
 801a940:	080268dc 	.word	0x080268dc
 801a944:	08026ec8 	.word	0x08026ec8
 801a948:	08026920 	.word	0x08026920

0801a94c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801a94c:	b480      	push	{r7}
 801a94e:	b085      	sub	sp, #20
 801a950:	af00      	add	r7, sp, #0
 801a952:	6078      	str	r0, [r7, #4]
 801a954:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	2b00      	cmp	r3, #0
 801a95a:	d008      	beq.n	801a96e <tcp_accept+0x22>
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	7d1b      	ldrb	r3, [r3, #20]
 801a960:	2b01      	cmp	r3, #1
 801a962:	d104      	bne.n	801a96e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801a968:	68fb      	ldr	r3, [r7, #12]
 801a96a:	683a      	ldr	r2, [r7, #0]
 801a96c:	619a      	str	r2, [r3, #24]
  }
}
 801a96e:	bf00      	nop
 801a970:	3714      	adds	r7, #20
 801a972:	46bd      	mov	sp, r7
 801a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a978:	4770      	bx	lr
	...

0801a97c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801a97c:	b580      	push	{r7, lr}
 801a97e:	b084      	sub	sp, #16
 801a980:	af00      	add	r7, sp, #0
 801a982:	60f8      	str	r0, [r7, #12]
 801a984:	60b9      	str	r1, [r7, #8]
 801a986:	4613      	mov	r3, r2
 801a988:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	d107      	bne.n	801a9a0 <tcp_poll+0x24>
 801a990:	4b0e      	ldr	r3, [pc, #56]	; (801a9cc <tcp_poll+0x50>)
 801a992:	f640 023d 	movw	r2, #2109	; 0x83d
 801a996:	490e      	ldr	r1, [pc, #56]	; (801a9d0 <tcp_poll+0x54>)
 801a998:	480e      	ldr	r0, [pc, #56]	; (801a9d4 <tcp_poll+0x58>)
 801a99a:	f009 f9f1 	bl	8023d80 <iprintf>
 801a99e:	e011      	b.n	801a9c4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	7d1b      	ldrb	r3, [r3, #20]
 801a9a4:	2b01      	cmp	r3, #1
 801a9a6:	d106      	bne.n	801a9b6 <tcp_poll+0x3a>
 801a9a8:	4b08      	ldr	r3, [pc, #32]	; (801a9cc <tcp_poll+0x50>)
 801a9aa:	f640 023e 	movw	r2, #2110	; 0x83e
 801a9ae:	490a      	ldr	r1, [pc, #40]	; (801a9d8 <tcp_poll+0x5c>)
 801a9b0:	4808      	ldr	r0, [pc, #32]	; (801a9d4 <tcp_poll+0x58>)
 801a9b2:	f009 f9e5 	bl	8023d80 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	68ba      	ldr	r2, [r7, #8]
 801a9ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801a9be:	68fb      	ldr	r3, [r7, #12]
 801a9c0:	79fa      	ldrb	r2, [r7, #7]
 801a9c2:	775a      	strb	r2, [r3, #29]
}
 801a9c4:	3710      	adds	r7, #16
 801a9c6:	46bd      	mov	sp, r7
 801a9c8:	bd80      	pop	{r7, pc}
 801a9ca:	bf00      	nop
 801a9cc:	080268dc 	.word	0x080268dc
 801a9d0:	08026ef0 	.word	0x08026ef0
 801a9d4:	08026920 	.word	0x08026920
 801a9d8:	08026f08 	.word	0x08026f08

0801a9dc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	b082      	sub	sp, #8
 801a9e0:	af00      	add	r7, sp, #0
 801a9e2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d107      	bne.n	801a9fa <tcp_pcb_purge+0x1e>
 801a9ea:	4b21      	ldr	r3, [pc, #132]	; (801aa70 <tcp_pcb_purge+0x94>)
 801a9ec:	f640 0251 	movw	r2, #2129	; 0x851
 801a9f0:	4920      	ldr	r1, [pc, #128]	; (801aa74 <tcp_pcb_purge+0x98>)
 801a9f2:	4821      	ldr	r0, [pc, #132]	; (801aa78 <tcp_pcb_purge+0x9c>)
 801a9f4:	f009 f9c4 	bl	8023d80 <iprintf>
 801a9f8:	e037      	b.n	801aa6a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	7d1b      	ldrb	r3, [r3, #20]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d033      	beq.n	801aa6a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801aa06:	2b0a      	cmp	r3, #10
 801aa08:	d02f      	beq.n	801aa6a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801aa0e:	2b01      	cmp	r3, #1
 801aa10:	d02b      	beq.n	801aa6a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d007      	beq.n	801aa2a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801aa1e:	4618      	mov	r0, r3
 801aa20:	f7fd ff76 	bl	8018910 <pbuf_free>
      pcb->refused_data = NULL;
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	2200      	movs	r2, #0
 801aa28:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d002      	beq.n	801aa38 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801aa32:	6878      	ldr	r0, [r7, #4]
 801aa34:	f000 f986 	bl	801ad44 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aa3e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa44:	4618      	mov	r0, r3
 801aa46:	f7ff fcf9 	bl	801a43c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aa4e:	4618      	mov	r0, r3
 801aa50:	f7ff fcf4 	bl	801a43c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	2200      	movs	r2, #0
 801aa58:	66da      	str	r2, [r3, #108]	; 0x6c
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	2200      	movs	r2, #0
 801aa66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801aa6a:	3708      	adds	r7, #8
 801aa6c:	46bd      	mov	sp, r7
 801aa6e:	bd80      	pop	{r7, pc}
 801aa70:	080268dc 	.word	0x080268dc
 801aa74:	08026f28 	.word	0x08026f28
 801aa78:	08026920 	.word	0x08026920

0801aa7c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	b084      	sub	sp, #16
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	6078      	str	r0, [r7, #4]
 801aa84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801aa86:	683b      	ldr	r3, [r7, #0]
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d106      	bne.n	801aa9a <tcp_pcb_remove+0x1e>
 801aa8c:	4b3e      	ldr	r3, [pc, #248]	; (801ab88 <tcp_pcb_remove+0x10c>)
 801aa8e:	f640 0283 	movw	r2, #2179	; 0x883
 801aa92:	493e      	ldr	r1, [pc, #248]	; (801ab8c <tcp_pcb_remove+0x110>)
 801aa94:	483e      	ldr	r0, [pc, #248]	; (801ab90 <tcp_pcb_remove+0x114>)
 801aa96:	f009 f973 	bl	8023d80 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d106      	bne.n	801aaae <tcp_pcb_remove+0x32>
 801aaa0:	4b39      	ldr	r3, [pc, #228]	; (801ab88 <tcp_pcb_remove+0x10c>)
 801aaa2:	f640 0284 	movw	r2, #2180	; 0x884
 801aaa6:	493b      	ldr	r1, [pc, #236]	; (801ab94 <tcp_pcb_remove+0x118>)
 801aaa8:	4839      	ldr	r0, [pc, #228]	; (801ab90 <tcp_pcb_remove+0x114>)
 801aaaa:	f009 f969 	bl	8023d80 <iprintf>

  TCP_RMV(pcblist, pcb);
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	683a      	ldr	r2, [r7, #0]
 801aab4:	429a      	cmp	r2, r3
 801aab6:	d105      	bne.n	801aac4 <tcp_pcb_remove+0x48>
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	681b      	ldr	r3, [r3, #0]
 801aabc:	68da      	ldr	r2, [r3, #12]
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	601a      	str	r2, [r3, #0]
 801aac2:	e013      	b.n	801aaec <tcp_pcb_remove+0x70>
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	60fb      	str	r3, [r7, #12]
 801aaca:	e00c      	b.n	801aae6 <tcp_pcb_remove+0x6a>
 801aacc:	68fb      	ldr	r3, [r7, #12]
 801aace:	68db      	ldr	r3, [r3, #12]
 801aad0:	683a      	ldr	r2, [r7, #0]
 801aad2:	429a      	cmp	r2, r3
 801aad4:	d104      	bne.n	801aae0 <tcp_pcb_remove+0x64>
 801aad6:	683b      	ldr	r3, [r7, #0]
 801aad8:	68da      	ldr	r2, [r3, #12]
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	60da      	str	r2, [r3, #12]
 801aade:	e005      	b.n	801aaec <tcp_pcb_remove+0x70>
 801aae0:	68fb      	ldr	r3, [r7, #12]
 801aae2:	68db      	ldr	r3, [r3, #12]
 801aae4:	60fb      	str	r3, [r7, #12]
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d1ef      	bne.n	801aacc <tcp_pcb_remove+0x50>
 801aaec:	683b      	ldr	r3, [r7, #0]
 801aaee:	2200      	movs	r2, #0
 801aaf0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801aaf2:	6838      	ldr	r0, [r7, #0]
 801aaf4:	f7ff ff72 	bl	801a9dc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801aaf8:	683b      	ldr	r3, [r7, #0]
 801aafa:	7d1b      	ldrb	r3, [r3, #20]
 801aafc:	2b0a      	cmp	r3, #10
 801aafe:	d013      	beq.n	801ab28 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801ab00:	683b      	ldr	r3, [r7, #0]
 801ab02:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801ab04:	2b01      	cmp	r3, #1
 801ab06:	d00f      	beq.n	801ab28 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801ab08:	683b      	ldr	r3, [r7, #0]
 801ab0a:	8b5b      	ldrh	r3, [r3, #26]
 801ab0c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	d009      	beq.n	801ab28 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801ab14:	683b      	ldr	r3, [r7, #0]
 801ab16:	8b5b      	ldrh	r3, [r3, #26]
 801ab18:	f043 0302 	orr.w	r3, r3, #2
 801ab1c:	b29a      	uxth	r2, r3
 801ab1e:	683b      	ldr	r3, [r7, #0]
 801ab20:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801ab22:	6838      	ldr	r0, [r7, #0]
 801ab24:	f003 fbc6 	bl	801e2b4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801ab28:	683b      	ldr	r3, [r7, #0]
 801ab2a:	7d1b      	ldrb	r3, [r3, #20]
 801ab2c:	2b01      	cmp	r3, #1
 801ab2e:	d020      	beq.n	801ab72 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801ab30:	683b      	ldr	r3, [r7, #0]
 801ab32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d006      	beq.n	801ab46 <tcp_pcb_remove+0xca>
 801ab38:	4b13      	ldr	r3, [pc, #76]	; (801ab88 <tcp_pcb_remove+0x10c>)
 801ab3a:	f640 0293 	movw	r2, #2195	; 0x893
 801ab3e:	4916      	ldr	r1, [pc, #88]	; (801ab98 <tcp_pcb_remove+0x11c>)
 801ab40:	4813      	ldr	r0, [pc, #76]	; (801ab90 <tcp_pcb_remove+0x114>)
 801ab42:	f009 f91d 	bl	8023d80 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801ab46:	683b      	ldr	r3, [r7, #0]
 801ab48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d006      	beq.n	801ab5c <tcp_pcb_remove+0xe0>
 801ab4e:	4b0e      	ldr	r3, [pc, #56]	; (801ab88 <tcp_pcb_remove+0x10c>)
 801ab50:	f640 0294 	movw	r2, #2196	; 0x894
 801ab54:	4911      	ldr	r1, [pc, #68]	; (801ab9c <tcp_pcb_remove+0x120>)
 801ab56:	480e      	ldr	r0, [pc, #56]	; (801ab90 <tcp_pcb_remove+0x114>)
 801ab58:	f009 f912 	bl	8023d80 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801ab5c:	683b      	ldr	r3, [r7, #0]
 801ab5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d006      	beq.n	801ab72 <tcp_pcb_remove+0xf6>
 801ab64:	4b08      	ldr	r3, [pc, #32]	; (801ab88 <tcp_pcb_remove+0x10c>)
 801ab66:	f640 0296 	movw	r2, #2198	; 0x896
 801ab6a:	490d      	ldr	r1, [pc, #52]	; (801aba0 <tcp_pcb_remove+0x124>)
 801ab6c:	4808      	ldr	r0, [pc, #32]	; (801ab90 <tcp_pcb_remove+0x114>)
 801ab6e:	f009 f907 	bl	8023d80 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801ab72:	683b      	ldr	r3, [r7, #0]
 801ab74:	2200      	movs	r2, #0
 801ab76:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801ab78:	683b      	ldr	r3, [r7, #0]
 801ab7a:	2200      	movs	r2, #0
 801ab7c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801ab7e:	bf00      	nop
 801ab80:	3710      	adds	r7, #16
 801ab82:	46bd      	mov	sp, r7
 801ab84:	bd80      	pop	{r7, pc}
 801ab86:	bf00      	nop
 801ab88:	080268dc 	.word	0x080268dc
 801ab8c:	08026f44 	.word	0x08026f44
 801ab90:	08026920 	.word	0x08026920
 801ab94:	08026f60 	.word	0x08026f60
 801ab98:	08026f80 	.word	0x08026f80
 801ab9c:	08026f98 	.word	0x08026f98
 801aba0:	08026fb4 	.word	0x08026fb4

0801aba4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801aba4:	b580      	push	{r7, lr}
 801aba6:	b082      	sub	sp, #8
 801aba8:	af00      	add	r7, sp, #0
 801abaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d106      	bne.n	801abc0 <tcp_next_iss+0x1c>
 801abb2:	4b0a      	ldr	r3, [pc, #40]	; (801abdc <tcp_next_iss+0x38>)
 801abb4:	f640 02af 	movw	r2, #2223	; 0x8af
 801abb8:	4909      	ldr	r1, [pc, #36]	; (801abe0 <tcp_next_iss+0x3c>)
 801abba:	480a      	ldr	r0, [pc, #40]	; (801abe4 <tcp_next_iss+0x40>)
 801abbc:	f009 f8e0 	bl	8023d80 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801abc0:	4b09      	ldr	r3, [pc, #36]	; (801abe8 <tcp_next_iss+0x44>)
 801abc2:	681a      	ldr	r2, [r3, #0]
 801abc4:	4b09      	ldr	r3, [pc, #36]	; (801abec <tcp_next_iss+0x48>)
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	4413      	add	r3, r2
 801abca:	4a07      	ldr	r2, [pc, #28]	; (801abe8 <tcp_next_iss+0x44>)
 801abcc:	6013      	str	r3, [r2, #0]
  return iss;
 801abce:	4b06      	ldr	r3, [pc, #24]	; (801abe8 <tcp_next_iss+0x44>)
 801abd0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801abd2:	4618      	mov	r0, r3
 801abd4:	3708      	adds	r7, #8
 801abd6:	46bd      	mov	sp, r7
 801abd8:	bd80      	pop	{r7, pc}
 801abda:	bf00      	nop
 801abdc:	080268dc 	.word	0x080268dc
 801abe0:	08026fcc 	.word	0x08026fcc
 801abe4:	08026920 	.word	0x08026920
 801abe8:	20000030 	.word	0x20000030
 801abec:	2000bf98 	.word	0x2000bf98

0801abf0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801abf0:	b580      	push	{r7, lr}
 801abf2:	b086      	sub	sp, #24
 801abf4:	af00      	add	r7, sp, #0
 801abf6:	4603      	mov	r3, r0
 801abf8:	60b9      	str	r1, [r7, #8]
 801abfa:	607a      	str	r2, [r7, #4]
 801abfc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d106      	bne.n	801ac12 <tcp_eff_send_mss_netif+0x22>
 801ac04:	4b14      	ldr	r3, [pc, #80]	; (801ac58 <tcp_eff_send_mss_netif+0x68>)
 801ac06:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801ac0a:	4914      	ldr	r1, [pc, #80]	; (801ac5c <tcp_eff_send_mss_netif+0x6c>)
 801ac0c:	4814      	ldr	r0, [pc, #80]	; (801ac60 <tcp_eff_send_mss_netif+0x70>)
 801ac0e:	f009 f8b7 	bl	8023d80 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801ac12:	68bb      	ldr	r3, [r7, #8]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d101      	bne.n	801ac1c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801ac18:	89fb      	ldrh	r3, [r7, #14]
 801ac1a:	e019      	b.n	801ac50 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801ac1c:	68bb      	ldr	r3, [r7, #8]
 801ac1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ac20:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801ac22:	8afb      	ldrh	r3, [r7, #22]
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d012      	beq.n	801ac4e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801ac28:	2328      	movs	r3, #40	; 0x28
 801ac2a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801ac2c:	8afa      	ldrh	r2, [r7, #22]
 801ac2e:	8abb      	ldrh	r3, [r7, #20]
 801ac30:	429a      	cmp	r2, r3
 801ac32:	d904      	bls.n	801ac3e <tcp_eff_send_mss_netif+0x4e>
 801ac34:	8afa      	ldrh	r2, [r7, #22]
 801ac36:	8abb      	ldrh	r3, [r7, #20]
 801ac38:	1ad3      	subs	r3, r2, r3
 801ac3a:	b29b      	uxth	r3, r3
 801ac3c:	e000      	b.n	801ac40 <tcp_eff_send_mss_netif+0x50>
 801ac3e:	2300      	movs	r3, #0
 801ac40:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801ac42:	8a7a      	ldrh	r2, [r7, #18]
 801ac44:	89fb      	ldrh	r3, [r7, #14]
 801ac46:	4293      	cmp	r3, r2
 801ac48:	bf28      	it	cs
 801ac4a:	4613      	movcs	r3, r2
 801ac4c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801ac4e:	89fb      	ldrh	r3, [r7, #14]
}
 801ac50:	4618      	mov	r0, r3
 801ac52:	3718      	adds	r7, #24
 801ac54:	46bd      	mov	sp, r7
 801ac56:	bd80      	pop	{r7, pc}
 801ac58:	080268dc 	.word	0x080268dc
 801ac5c:	08026fe8 	.word	0x08026fe8
 801ac60:	08026920 	.word	0x08026920

0801ac64 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801ac64:	b580      	push	{r7, lr}
 801ac66:	b084      	sub	sp, #16
 801ac68:	af00      	add	r7, sp, #0
 801ac6a:	6078      	str	r0, [r7, #4]
 801ac6c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801ac6e:	683b      	ldr	r3, [r7, #0]
 801ac70:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d119      	bne.n	801acac <tcp_netif_ip_addr_changed_pcblist+0x48>
 801ac78:	4b10      	ldr	r3, [pc, #64]	; (801acbc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801ac7a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801ac7e:	4910      	ldr	r1, [pc, #64]	; (801acc0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801ac80:	4810      	ldr	r0, [pc, #64]	; (801acc4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801ac82:	f009 f87d 	bl	8023d80 <iprintf>

  while (pcb != NULL) {
 801ac86:	e011      	b.n	801acac <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801ac88:	68fb      	ldr	r3, [r7, #12]
 801ac8a:	681a      	ldr	r2, [r3, #0]
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	429a      	cmp	r2, r3
 801ac92:	d108      	bne.n	801aca6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	68db      	ldr	r3, [r3, #12]
 801ac98:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801ac9a:	68f8      	ldr	r0, [r7, #12]
 801ac9c:	f7fe fc38 	bl	8019510 <tcp_abort>
      pcb = next;
 801aca0:	68bb      	ldr	r3, [r7, #8]
 801aca2:	60fb      	str	r3, [r7, #12]
 801aca4:	e002      	b.n	801acac <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	68db      	ldr	r3, [r3, #12]
 801acaa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d1ea      	bne.n	801ac88 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801acb2:	bf00      	nop
 801acb4:	bf00      	nop
 801acb6:	3710      	adds	r7, #16
 801acb8:	46bd      	mov	sp, r7
 801acba:	bd80      	pop	{r7, pc}
 801acbc:	080268dc 	.word	0x080268dc
 801acc0:	08027010 	.word	0x08027010
 801acc4:	08026920 	.word	0x08026920

0801acc8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801acc8:	b580      	push	{r7, lr}
 801acca:	b084      	sub	sp, #16
 801accc:	af00      	add	r7, sp, #0
 801acce:	6078      	str	r0, [r7, #4]
 801acd0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d02a      	beq.n	801ad2e <tcp_netif_ip_addr_changed+0x66>
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d026      	beq.n	801ad2e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801ace0:	4b15      	ldr	r3, [pc, #84]	; (801ad38 <tcp_netif_ip_addr_changed+0x70>)
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	4619      	mov	r1, r3
 801ace6:	6878      	ldr	r0, [r7, #4]
 801ace8:	f7ff ffbc 	bl	801ac64 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801acec:	4b13      	ldr	r3, [pc, #76]	; (801ad3c <tcp_netif_ip_addr_changed+0x74>)
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	4619      	mov	r1, r3
 801acf2:	6878      	ldr	r0, [r7, #4]
 801acf4:	f7ff ffb6 	bl	801ac64 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801acf8:	683b      	ldr	r3, [r7, #0]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d017      	beq.n	801ad2e <tcp_netif_ip_addr_changed+0x66>
 801acfe:	683b      	ldr	r3, [r7, #0]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d013      	beq.n	801ad2e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ad06:	4b0e      	ldr	r3, [pc, #56]	; (801ad40 <tcp_netif_ip_addr_changed+0x78>)
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	60fb      	str	r3, [r7, #12]
 801ad0c:	e00c      	b.n	801ad28 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	681a      	ldr	r2, [r3, #0]
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	429a      	cmp	r2, r3
 801ad18:	d103      	bne.n	801ad22 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801ad1a:	683b      	ldr	r3, [r7, #0]
 801ad1c:	681a      	ldr	r2, [r3, #0]
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ad22:	68fb      	ldr	r3, [r7, #12]
 801ad24:	68db      	ldr	r3, [r3, #12]
 801ad26:	60fb      	str	r3, [r7, #12]
 801ad28:	68fb      	ldr	r3, [r7, #12]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d1ef      	bne.n	801ad0e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801ad2e:	bf00      	nop
 801ad30:	3710      	adds	r7, #16
 801ad32:	46bd      	mov	sp, r7
 801ad34:	bd80      	pop	{r7, pc}
 801ad36:	bf00      	nop
 801ad38:	2000bfa4 	.word	0x2000bfa4
 801ad3c:	2000bf9c 	.word	0x2000bf9c
 801ad40:	2000bfa0 	.word	0x2000bfa0

0801ad44 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801ad44:	b580      	push	{r7, lr}
 801ad46:	b082      	sub	sp, #8
 801ad48:	af00      	add	r7, sp, #0
 801ad4a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d007      	beq.n	801ad64 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ad58:	4618      	mov	r0, r3
 801ad5a:	f7ff fb6f 	bl	801a43c <tcp_segs_free>
    pcb->ooseq = NULL;
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	2200      	movs	r2, #0
 801ad62:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801ad64:	bf00      	nop
 801ad66:	3708      	adds	r7, #8
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	bd80      	pop	{r7, pc}

0801ad6c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801ad6c:	b590      	push	{r4, r7, lr}
 801ad6e:	b08d      	sub	sp, #52	; 0x34
 801ad70:	af04      	add	r7, sp, #16
 801ad72:	6078      	str	r0, [r7, #4]
 801ad74:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d105      	bne.n	801ad88 <tcp_input+0x1c>
 801ad7c:	4b9b      	ldr	r3, [pc, #620]	; (801afec <tcp_input+0x280>)
 801ad7e:	2283      	movs	r2, #131	; 0x83
 801ad80:	499b      	ldr	r1, [pc, #620]	; (801aff0 <tcp_input+0x284>)
 801ad82:	489c      	ldr	r0, [pc, #624]	; (801aff4 <tcp_input+0x288>)
 801ad84:	f008 fffc 	bl	8023d80 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	685b      	ldr	r3, [r3, #4]
 801ad8c:	4a9a      	ldr	r2, [pc, #616]	; (801aff8 <tcp_input+0x28c>)
 801ad8e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	895b      	ldrh	r3, [r3, #10]
 801ad94:	2b13      	cmp	r3, #19
 801ad96:	f240 83d1 	bls.w	801b53c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ad9a:	4b98      	ldr	r3, [pc, #608]	; (801affc <tcp_input+0x290>)
 801ad9c:	695b      	ldr	r3, [r3, #20]
 801ad9e:	4a97      	ldr	r2, [pc, #604]	; (801affc <tcp_input+0x290>)
 801ada0:	6812      	ldr	r2, [r2, #0]
 801ada2:	4611      	mov	r1, r2
 801ada4:	4618      	mov	r0, r3
 801ada6:	f006 fc3d 	bl	8021624 <ip4_addr_isbroadcast_u32>
 801adaa:	4603      	mov	r3, r0
 801adac:	2b00      	cmp	r3, #0
 801adae:	f040 83c7 	bne.w	801b540 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801adb2:	4b92      	ldr	r3, [pc, #584]	; (801affc <tcp_input+0x290>)
 801adb4:	695b      	ldr	r3, [r3, #20]
 801adb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801adba:	2be0      	cmp	r3, #224	; 0xe0
 801adbc:	f000 83c0 	beq.w	801b540 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801adc0:	4b8d      	ldr	r3, [pc, #564]	; (801aff8 <tcp_input+0x28c>)
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	899b      	ldrh	r3, [r3, #12]
 801adc6:	b29b      	uxth	r3, r3
 801adc8:	4618      	mov	r0, r3
 801adca:	f7fc f9af 	bl	801712c <lwip_htons>
 801adce:	4603      	mov	r3, r0
 801add0:	0b1b      	lsrs	r3, r3, #12
 801add2:	b29b      	uxth	r3, r3
 801add4:	b2db      	uxtb	r3, r3
 801add6:	009b      	lsls	r3, r3, #2
 801add8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801adda:	7cbb      	ldrb	r3, [r7, #18]
 801addc:	2b13      	cmp	r3, #19
 801adde:	f240 83b1 	bls.w	801b544 <tcp_input+0x7d8>
 801ade2:	7cbb      	ldrb	r3, [r7, #18]
 801ade4:	b29a      	uxth	r2, r3
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	891b      	ldrh	r3, [r3, #8]
 801adea:	429a      	cmp	r2, r3
 801adec:	f200 83aa 	bhi.w	801b544 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801adf0:	7cbb      	ldrb	r3, [r7, #18]
 801adf2:	b29b      	uxth	r3, r3
 801adf4:	3b14      	subs	r3, #20
 801adf6:	b29a      	uxth	r2, r3
 801adf8:	4b81      	ldr	r3, [pc, #516]	; (801b000 <tcp_input+0x294>)
 801adfa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801adfc:	4b81      	ldr	r3, [pc, #516]	; (801b004 <tcp_input+0x298>)
 801adfe:	2200      	movs	r2, #0
 801ae00:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	895a      	ldrh	r2, [r3, #10]
 801ae06:	7cbb      	ldrb	r3, [r7, #18]
 801ae08:	b29b      	uxth	r3, r3
 801ae0a:	429a      	cmp	r2, r3
 801ae0c:	d309      	bcc.n	801ae22 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801ae0e:	4b7c      	ldr	r3, [pc, #496]	; (801b000 <tcp_input+0x294>)
 801ae10:	881a      	ldrh	r2, [r3, #0]
 801ae12:	4b7d      	ldr	r3, [pc, #500]	; (801b008 <tcp_input+0x29c>)
 801ae14:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801ae16:	7cbb      	ldrb	r3, [r7, #18]
 801ae18:	4619      	mov	r1, r3
 801ae1a:	6878      	ldr	r0, [r7, #4]
 801ae1c:	f7fd fcf2 	bl	8018804 <pbuf_remove_header>
 801ae20:	e04e      	b.n	801aec0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d105      	bne.n	801ae36 <tcp_input+0xca>
 801ae2a:	4b70      	ldr	r3, [pc, #448]	; (801afec <tcp_input+0x280>)
 801ae2c:	22c2      	movs	r2, #194	; 0xc2
 801ae2e:	4977      	ldr	r1, [pc, #476]	; (801b00c <tcp_input+0x2a0>)
 801ae30:	4870      	ldr	r0, [pc, #448]	; (801aff4 <tcp_input+0x288>)
 801ae32:	f008 ffa5 	bl	8023d80 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801ae36:	2114      	movs	r1, #20
 801ae38:	6878      	ldr	r0, [r7, #4]
 801ae3a:	f7fd fce3 	bl	8018804 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	895a      	ldrh	r2, [r3, #10]
 801ae42:	4b71      	ldr	r3, [pc, #452]	; (801b008 <tcp_input+0x29c>)
 801ae44:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ae46:	4b6e      	ldr	r3, [pc, #440]	; (801b000 <tcp_input+0x294>)
 801ae48:	881a      	ldrh	r2, [r3, #0]
 801ae4a:	4b6f      	ldr	r3, [pc, #444]	; (801b008 <tcp_input+0x29c>)
 801ae4c:	881b      	ldrh	r3, [r3, #0]
 801ae4e:	1ad3      	subs	r3, r2, r3
 801ae50:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801ae52:	4b6d      	ldr	r3, [pc, #436]	; (801b008 <tcp_input+0x29c>)
 801ae54:	881b      	ldrh	r3, [r3, #0]
 801ae56:	4619      	mov	r1, r3
 801ae58:	6878      	ldr	r0, [r7, #4]
 801ae5a:	f7fd fcd3 	bl	8018804 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	895b      	ldrh	r3, [r3, #10]
 801ae64:	8a3a      	ldrh	r2, [r7, #16]
 801ae66:	429a      	cmp	r2, r3
 801ae68:	f200 836e 	bhi.w	801b548 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	685b      	ldr	r3, [r3, #4]
 801ae72:	4a64      	ldr	r2, [pc, #400]	; (801b004 <tcp_input+0x298>)
 801ae74:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	681b      	ldr	r3, [r3, #0]
 801ae7a:	8a3a      	ldrh	r2, [r7, #16]
 801ae7c:	4611      	mov	r1, r2
 801ae7e:	4618      	mov	r0, r3
 801ae80:	f7fd fcc0 	bl	8018804 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	891a      	ldrh	r2, [r3, #8]
 801ae88:	8a3b      	ldrh	r3, [r7, #16]
 801ae8a:	1ad3      	subs	r3, r2, r3
 801ae8c:	b29a      	uxth	r2, r3
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	895b      	ldrh	r3, [r3, #10]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d005      	beq.n	801aea6 <tcp_input+0x13a>
 801ae9a:	4b54      	ldr	r3, [pc, #336]	; (801afec <tcp_input+0x280>)
 801ae9c:	22df      	movs	r2, #223	; 0xdf
 801ae9e:	495c      	ldr	r1, [pc, #368]	; (801b010 <tcp_input+0x2a4>)
 801aea0:	4854      	ldr	r0, [pc, #336]	; (801aff4 <tcp_input+0x288>)
 801aea2:	f008 ff6d 	bl	8023d80 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	891a      	ldrh	r2, [r3, #8]
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	891b      	ldrh	r3, [r3, #8]
 801aeb0:	429a      	cmp	r2, r3
 801aeb2:	d005      	beq.n	801aec0 <tcp_input+0x154>
 801aeb4:	4b4d      	ldr	r3, [pc, #308]	; (801afec <tcp_input+0x280>)
 801aeb6:	22e0      	movs	r2, #224	; 0xe0
 801aeb8:	4956      	ldr	r1, [pc, #344]	; (801b014 <tcp_input+0x2a8>)
 801aeba:	484e      	ldr	r0, [pc, #312]	; (801aff4 <tcp_input+0x288>)
 801aebc:	f008 ff60 	bl	8023d80 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801aec0:	4b4d      	ldr	r3, [pc, #308]	; (801aff8 <tcp_input+0x28c>)
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	881b      	ldrh	r3, [r3, #0]
 801aec6:	b29b      	uxth	r3, r3
 801aec8:	4a4b      	ldr	r2, [pc, #300]	; (801aff8 <tcp_input+0x28c>)
 801aeca:	6814      	ldr	r4, [r2, #0]
 801aecc:	4618      	mov	r0, r3
 801aece:	f7fc f92d 	bl	801712c <lwip_htons>
 801aed2:	4603      	mov	r3, r0
 801aed4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801aed6:	4b48      	ldr	r3, [pc, #288]	; (801aff8 <tcp_input+0x28c>)
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	885b      	ldrh	r3, [r3, #2]
 801aedc:	b29b      	uxth	r3, r3
 801aede:	4a46      	ldr	r2, [pc, #280]	; (801aff8 <tcp_input+0x28c>)
 801aee0:	6814      	ldr	r4, [r2, #0]
 801aee2:	4618      	mov	r0, r3
 801aee4:	f7fc f922 	bl	801712c <lwip_htons>
 801aee8:	4603      	mov	r3, r0
 801aeea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801aeec:	4b42      	ldr	r3, [pc, #264]	; (801aff8 <tcp_input+0x28c>)
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	685b      	ldr	r3, [r3, #4]
 801aef2:	4a41      	ldr	r2, [pc, #260]	; (801aff8 <tcp_input+0x28c>)
 801aef4:	6814      	ldr	r4, [r2, #0]
 801aef6:	4618      	mov	r0, r3
 801aef8:	f7fc f92d 	bl	8017156 <lwip_htonl>
 801aefc:	4603      	mov	r3, r0
 801aefe:	6063      	str	r3, [r4, #4]
 801af00:	6863      	ldr	r3, [r4, #4]
 801af02:	4a45      	ldr	r2, [pc, #276]	; (801b018 <tcp_input+0x2ac>)
 801af04:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801af06:	4b3c      	ldr	r3, [pc, #240]	; (801aff8 <tcp_input+0x28c>)
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	689b      	ldr	r3, [r3, #8]
 801af0c:	4a3a      	ldr	r2, [pc, #232]	; (801aff8 <tcp_input+0x28c>)
 801af0e:	6814      	ldr	r4, [r2, #0]
 801af10:	4618      	mov	r0, r3
 801af12:	f7fc f920 	bl	8017156 <lwip_htonl>
 801af16:	4603      	mov	r3, r0
 801af18:	60a3      	str	r3, [r4, #8]
 801af1a:	68a3      	ldr	r3, [r4, #8]
 801af1c:	4a3f      	ldr	r2, [pc, #252]	; (801b01c <tcp_input+0x2b0>)
 801af1e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801af20:	4b35      	ldr	r3, [pc, #212]	; (801aff8 <tcp_input+0x28c>)
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	89db      	ldrh	r3, [r3, #14]
 801af26:	b29b      	uxth	r3, r3
 801af28:	4a33      	ldr	r2, [pc, #204]	; (801aff8 <tcp_input+0x28c>)
 801af2a:	6814      	ldr	r4, [r2, #0]
 801af2c:	4618      	mov	r0, r3
 801af2e:	f7fc f8fd 	bl	801712c <lwip_htons>
 801af32:	4603      	mov	r3, r0
 801af34:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801af36:	4b30      	ldr	r3, [pc, #192]	; (801aff8 <tcp_input+0x28c>)
 801af38:	681b      	ldr	r3, [r3, #0]
 801af3a:	899b      	ldrh	r3, [r3, #12]
 801af3c:	b29b      	uxth	r3, r3
 801af3e:	4618      	mov	r0, r3
 801af40:	f7fc f8f4 	bl	801712c <lwip_htons>
 801af44:	4603      	mov	r3, r0
 801af46:	b2db      	uxtb	r3, r3
 801af48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801af4c:	b2da      	uxtb	r2, r3
 801af4e:	4b34      	ldr	r3, [pc, #208]	; (801b020 <tcp_input+0x2b4>)
 801af50:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	891a      	ldrh	r2, [r3, #8]
 801af56:	4b33      	ldr	r3, [pc, #204]	; (801b024 <tcp_input+0x2b8>)
 801af58:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801af5a:	4b31      	ldr	r3, [pc, #196]	; (801b020 <tcp_input+0x2b4>)
 801af5c:	781b      	ldrb	r3, [r3, #0]
 801af5e:	f003 0303 	and.w	r3, r3, #3
 801af62:	2b00      	cmp	r3, #0
 801af64:	d00c      	beq.n	801af80 <tcp_input+0x214>
    tcplen++;
 801af66:	4b2f      	ldr	r3, [pc, #188]	; (801b024 <tcp_input+0x2b8>)
 801af68:	881b      	ldrh	r3, [r3, #0]
 801af6a:	3301      	adds	r3, #1
 801af6c:	b29a      	uxth	r2, r3
 801af6e:	4b2d      	ldr	r3, [pc, #180]	; (801b024 <tcp_input+0x2b8>)
 801af70:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	891a      	ldrh	r2, [r3, #8]
 801af76:	4b2b      	ldr	r3, [pc, #172]	; (801b024 <tcp_input+0x2b8>)
 801af78:	881b      	ldrh	r3, [r3, #0]
 801af7a:	429a      	cmp	r2, r3
 801af7c:	f200 82e6 	bhi.w	801b54c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801af80:	2300      	movs	r3, #0
 801af82:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801af84:	4b28      	ldr	r3, [pc, #160]	; (801b028 <tcp_input+0x2bc>)
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	61fb      	str	r3, [r7, #28]
 801af8a:	e09d      	b.n	801b0c8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801af8c:	69fb      	ldr	r3, [r7, #28]
 801af8e:	7d1b      	ldrb	r3, [r3, #20]
 801af90:	2b00      	cmp	r3, #0
 801af92:	d105      	bne.n	801afa0 <tcp_input+0x234>
 801af94:	4b15      	ldr	r3, [pc, #84]	; (801afec <tcp_input+0x280>)
 801af96:	22fb      	movs	r2, #251	; 0xfb
 801af98:	4924      	ldr	r1, [pc, #144]	; (801b02c <tcp_input+0x2c0>)
 801af9a:	4816      	ldr	r0, [pc, #88]	; (801aff4 <tcp_input+0x288>)
 801af9c:	f008 fef0 	bl	8023d80 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801afa0:	69fb      	ldr	r3, [r7, #28]
 801afa2:	7d1b      	ldrb	r3, [r3, #20]
 801afa4:	2b0a      	cmp	r3, #10
 801afa6:	d105      	bne.n	801afb4 <tcp_input+0x248>
 801afa8:	4b10      	ldr	r3, [pc, #64]	; (801afec <tcp_input+0x280>)
 801afaa:	22fc      	movs	r2, #252	; 0xfc
 801afac:	4920      	ldr	r1, [pc, #128]	; (801b030 <tcp_input+0x2c4>)
 801afae:	4811      	ldr	r0, [pc, #68]	; (801aff4 <tcp_input+0x288>)
 801afb0:	f008 fee6 	bl	8023d80 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801afb4:	69fb      	ldr	r3, [r7, #28]
 801afb6:	7d1b      	ldrb	r3, [r3, #20]
 801afb8:	2b01      	cmp	r3, #1
 801afba:	d105      	bne.n	801afc8 <tcp_input+0x25c>
 801afbc:	4b0b      	ldr	r3, [pc, #44]	; (801afec <tcp_input+0x280>)
 801afbe:	22fd      	movs	r2, #253	; 0xfd
 801afc0:	491c      	ldr	r1, [pc, #112]	; (801b034 <tcp_input+0x2c8>)
 801afc2:	480c      	ldr	r0, [pc, #48]	; (801aff4 <tcp_input+0x288>)
 801afc4:	f008 fedc 	bl	8023d80 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801afc8:	69fb      	ldr	r3, [r7, #28]
 801afca:	7a1b      	ldrb	r3, [r3, #8]
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d033      	beq.n	801b038 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801afd0:	69fb      	ldr	r3, [r7, #28]
 801afd2:	7a1a      	ldrb	r2, [r3, #8]
 801afd4:	4b09      	ldr	r3, [pc, #36]	; (801affc <tcp_input+0x290>)
 801afd6:	685b      	ldr	r3, [r3, #4]
 801afd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801afdc:	3301      	adds	r3, #1
 801afde:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801afe0:	429a      	cmp	r2, r3
 801afe2:	d029      	beq.n	801b038 <tcp_input+0x2cc>
      prev = pcb;
 801afe4:	69fb      	ldr	r3, [r7, #28]
 801afe6:	61bb      	str	r3, [r7, #24]
      continue;
 801afe8:	e06b      	b.n	801b0c2 <tcp_input+0x356>
 801afea:	bf00      	nop
 801afec:	08027044 	.word	0x08027044
 801aff0:	08027078 	.word	0x08027078
 801aff4:	08027090 	.word	0x08027090
 801aff8:	2000bfc0 	.word	0x2000bfc0
 801affc:	20006684 	.word	0x20006684
 801b000:	2000bfc4 	.word	0x2000bfc4
 801b004:	2000bfc8 	.word	0x2000bfc8
 801b008:	2000bfc6 	.word	0x2000bfc6
 801b00c:	080270b8 	.word	0x080270b8
 801b010:	080270c8 	.word	0x080270c8
 801b014:	080270d4 	.word	0x080270d4
 801b018:	2000bfd0 	.word	0x2000bfd0
 801b01c:	2000bfd4 	.word	0x2000bfd4
 801b020:	2000bfdc 	.word	0x2000bfdc
 801b024:	2000bfda 	.word	0x2000bfda
 801b028:	2000bfa4 	.word	0x2000bfa4
 801b02c:	080270f4 	.word	0x080270f4
 801b030:	0802711c 	.word	0x0802711c
 801b034:	08027148 	.word	0x08027148
    }

    if (pcb->remote_port == tcphdr->src &&
 801b038:	69fb      	ldr	r3, [r7, #28]
 801b03a:	8b1a      	ldrh	r2, [r3, #24]
 801b03c:	4b72      	ldr	r3, [pc, #456]	; (801b208 <tcp_input+0x49c>)
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	881b      	ldrh	r3, [r3, #0]
 801b042:	b29b      	uxth	r3, r3
 801b044:	429a      	cmp	r2, r3
 801b046:	d13a      	bne.n	801b0be <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801b048:	69fb      	ldr	r3, [r7, #28]
 801b04a:	8ada      	ldrh	r2, [r3, #22]
 801b04c:	4b6e      	ldr	r3, [pc, #440]	; (801b208 <tcp_input+0x49c>)
 801b04e:	681b      	ldr	r3, [r3, #0]
 801b050:	885b      	ldrh	r3, [r3, #2]
 801b052:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801b054:	429a      	cmp	r2, r3
 801b056:	d132      	bne.n	801b0be <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b058:	69fb      	ldr	r3, [r7, #28]
 801b05a:	685a      	ldr	r2, [r3, #4]
 801b05c:	4b6b      	ldr	r3, [pc, #428]	; (801b20c <tcp_input+0x4a0>)
 801b05e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801b060:	429a      	cmp	r2, r3
 801b062:	d12c      	bne.n	801b0be <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b064:	69fb      	ldr	r3, [r7, #28]
 801b066:	681a      	ldr	r2, [r3, #0]
 801b068:	4b68      	ldr	r3, [pc, #416]	; (801b20c <tcp_input+0x4a0>)
 801b06a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b06c:	429a      	cmp	r2, r3
 801b06e:	d126      	bne.n	801b0be <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801b070:	69fb      	ldr	r3, [r7, #28]
 801b072:	68db      	ldr	r3, [r3, #12]
 801b074:	69fa      	ldr	r2, [r7, #28]
 801b076:	429a      	cmp	r2, r3
 801b078:	d106      	bne.n	801b088 <tcp_input+0x31c>
 801b07a:	4b65      	ldr	r3, [pc, #404]	; (801b210 <tcp_input+0x4a4>)
 801b07c:	f240 120d 	movw	r2, #269	; 0x10d
 801b080:	4964      	ldr	r1, [pc, #400]	; (801b214 <tcp_input+0x4a8>)
 801b082:	4865      	ldr	r0, [pc, #404]	; (801b218 <tcp_input+0x4ac>)
 801b084:	f008 fe7c 	bl	8023d80 <iprintf>
      if (prev != NULL) {
 801b088:	69bb      	ldr	r3, [r7, #24]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d00a      	beq.n	801b0a4 <tcp_input+0x338>
        prev->next = pcb->next;
 801b08e:	69fb      	ldr	r3, [r7, #28]
 801b090:	68da      	ldr	r2, [r3, #12]
 801b092:	69bb      	ldr	r3, [r7, #24]
 801b094:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801b096:	4b61      	ldr	r3, [pc, #388]	; (801b21c <tcp_input+0x4b0>)
 801b098:	681a      	ldr	r2, [r3, #0]
 801b09a:	69fb      	ldr	r3, [r7, #28]
 801b09c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801b09e:	4a5f      	ldr	r2, [pc, #380]	; (801b21c <tcp_input+0x4b0>)
 801b0a0:	69fb      	ldr	r3, [r7, #28]
 801b0a2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801b0a4:	69fb      	ldr	r3, [r7, #28]
 801b0a6:	68db      	ldr	r3, [r3, #12]
 801b0a8:	69fa      	ldr	r2, [r7, #28]
 801b0aa:	429a      	cmp	r2, r3
 801b0ac:	d111      	bne.n	801b0d2 <tcp_input+0x366>
 801b0ae:	4b58      	ldr	r3, [pc, #352]	; (801b210 <tcp_input+0x4a4>)
 801b0b0:	f240 1215 	movw	r2, #277	; 0x115
 801b0b4:	495a      	ldr	r1, [pc, #360]	; (801b220 <tcp_input+0x4b4>)
 801b0b6:	4858      	ldr	r0, [pc, #352]	; (801b218 <tcp_input+0x4ac>)
 801b0b8:	f008 fe62 	bl	8023d80 <iprintf>
      break;
 801b0bc:	e009      	b.n	801b0d2 <tcp_input+0x366>
    }
    prev = pcb;
 801b0be:	69fb      	ldr	r3, [r7, #28]
 801b0c0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b0c2:	69fb      	ldr	r3, [r7, #28]
 801b0c4:	68db      	ldr	r3, [r3, #12]
 801b0c6:	61fb      	str	r3, [r7, #28]
 801b0c8:	69fb      	ldr	r3, [r7, #28]
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	f47f af5e 	bne.w	801af8c <tcp_input+0x220>
 801b0d0:	e000      	b.n	801b0d4 <tcp_input+0x368>
      break;
 801b0d2:	bf00      	nop
  }

  if (pcb == NULL) {
 801b0d4:	69fb      	ldr	r3, [r7, #28]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	f040 80aa 	bne.w	801b230 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b0dc:	4b51      	ldr	r3, [pc, #324]	; (801b224 <tcp_input+0x4b8>)
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	61fb      	str	r3, [r7, #28]
 801b0e2:	e03f      	b.n	801b164 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b0e4:	69fb      	ldr	r3, [r7, #28]
 801b0e6:	7d1b      	ldrb	r3, [r3, #20]
 801b0e8:	2b0a      	cmp	r3, #10
 801b0ea:	d006      	beq.n	801b0fa <tcp_input+0x38e>
 801b0ec:	4b48      	ldr	r3, [pc, #288]	; (801b210 <tcp_input+0x4a4>)
 801b0ee:	f240 121f 	movw	r2, #287	; 0x11f
 801b0f2:	494d      	ldr	r1, [pc, #308]	; (801b228 <tcp_input+0x4bc>)
 801b0f4:	4848      	ldr	r0, [pc, #288]	; (801b218 <tcp_input+0x4ac>)
 801b0f6:	f008 fe43 	bl	8023d80 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b0fa:	69fb      	ldr	r3, [r7, #28]
 801b0fc:	7a1b      	ldrb	r3, [r3, #8]
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d009      	beq.n	801b116 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b102:	69fb      	ldr	r3, [r7, #28]
 801b104:	7a1a      	ldrb	r2, [r3, #8]
 801b106:	4b41      	ldr	r3, [pc, #260]	; (801b20c <tcp_input+0x4a0>)
 801b108:	685b      	ldr	r3, [r3, #4]
 801b10a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b10e:	3301      	adds	r3, #1
 801b110:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b112:	429a      	cmp	r2, r3
 801b114:	d122      	bne.n	801b15c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801b116:	69fb      	ldr	r3, [r7, #28]
 801b118:	8b1a      	ldrh	r2, [r3, #24]
 801b11a:	4b3b      	ldr	r3, [pc, #236]	; (801b208 <tcp_input+0x49c>)
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	881b      	ldrh	r3, [r3, #0]
 801b120:	b29b      	uxth	r3, r3
 801b122:	429a      	cmp	r2, r3
 801b124:	d11b      	bne.n	801b15e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801b126:	69fb      	ldr	r3, [r7, #28]
 801b128:	8ada      	ldrh	r2, [r3, #22]
 801b12a:	4b37      	ldr	r3, [pc, #220]	; (801b208 <tcp_input+0x49c>)
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	885b      	ldrh	r3, [r3, #2]
 801b130:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801b132:	429a      	cmp	r2, r3
 801b134:	d113      	bne.n	801b15e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b136:	69fb      	ldr	r3, [r7, #28]
 801b138:	685a      	ldr	r2, [r3, #4]
 801b13a:	4b34      	ldr	r3, [pc, #208]	; (801b20c <tcp_input+0x4a0>)
 801b13c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801b13e:	429a      	cmp	r2, r3
 801b140:	d10d      	bne.n	801b15e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b142:	69fb      	ldr	r3, [r7, #28]
 801b144:	681a      	ldr	r2, [r3, #0]
 801b146:	4b31      	ldr	r3, [pc, #196]	; (801b20c <tcp_input+0x4a0>)
 801b148:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b14a:	429a      	cmp	r2, r3
 801b14c:	d107      	bne.n	801b15e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801b14e:	69f8      	ldr	r0, [r7, #28]
 801b150:	f000 fb56 	bl	801b800 <tcp_timewait_input>
        }
        pbuf_free(p);
 801b154:	6878      	ldr	r0, [r7, #4]
 801b156:	f7fd fbdb 	bl	8018910 <pbuf_free>
        return;
 801b15a:	e1fd      	b.n	801b558 <tcp_input+0x7ec>
        continue;
 801b15c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b15e:	69fb      	ldr	r3, [r7, #28]
 801b160:	68db      	ldr	r3, [r3, #12]
 801b162:	61fb      	str	r3, [r7, #28]
 801b164:	69fb      	ldr	r3, [r7, #28]
 801b166:	2b00      	cmp	r3, #0
 801b168:	d1bc      	bne.n	801b0e4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801b16a:	2300      	movs	r3, #0
 801b16c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b16e:	4b2f      	ldr	r3, [pc, #188]	; (801b22c <tcp_input+0x4c0>)
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	617b      	str	r3, [r7, #20]
 801b174:	e02a      	b.n	801b1cc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b176:	697b      	ldr	r3, [r7, #20]
 801b178:	7a1b      	ldrb	r3, [r3, #8]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d00c      	beq.n	801b198 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b17e:	697b      	ldr	r3, [r7, #20]
 801b180:	7a1a      	ldrb	r2, [r3, #8]
 801b182:	4b22      	ldr	r3, [pc, #136]	; (801b20c <tcp_input+0x4a0>)
 801b184:	685b      	ldr	r3, [r3, #4]
 801b186:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b18a:	3301      	adds	r3, #1
 801b18c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b18e:	429a      	cmp	r2, r3
 801b190:	d002      	beq.n	801b198 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801b192:	697b      	ldr	r3, [r7, #20]
 801b194:	61bb      	str	r3, [r7, #24]
        continue;
 801b196:	e016      	b.n	801b1c6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801b198:	697b      	ldr	r3, [r7, #20]
 801b19a:	8ada      	ldrh	r2, [r3, #22]
 801b19c:	4b1a      	ldr	r3, [pc, #104]	; (801b208 <tcp_input+0x49c>)
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	885b      	ldrh	r3, [r3, #2]
 801b1a2:	b29b      	uxth	r3, r3
 801b1a4:	429a      	cmp	r2, r3
 801b1a6:	d10c      	bne.n	801b1c2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b1a8:	697b      	ldr	r3, [r7, #20]
 801b1aa:	681a      	ldr	r2, [r3, #0]
 801b1ac:	4b17      	ldr	r3, [pc, #92]	; (801b20c <tcp_input+0x4a0>)
 801b1ae:	695b      	ldr	r3, [r3, #20]
 801b1b0:	429a      	cmp	r2, r3
 801b1b2:	d00f      	beq.n	801b1d4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801b1b4:	697b      	ldr	r3, [r7, #20]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d00d      	beq.n	801b1d6 <tcp_input+0x46a>
 801b1ba:	697b      	ldr	r3, [r7, #20]
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d009      	beq.n	801b1d6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801b1c2:	697b      	ldr	r3, [r7, #20]
 801b1c4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b1c6:	697b      	ldr	r3, [r7, #20]
 801b1c8:	68db      	ldr	r3, [r3, #12]
 801b1ca:	617b      	str	r3, [r7, #20]
 801b1cc:	697b      	ldr	r3, [r7, #20]
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d1d1      	bne.n	801b176 <tcp_input+0x40a>
 801b1d2:	e000      	b.n	801b1d6 <tcp_input+0x46a>
            break;
 801b1d4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801b1d6:	697b      	ldr	r3, [r7, #20]
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d029      	beq.n	801b230 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801b1dc:	69bb      	ldr	r3, [r7, #24]
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d00a      	beq.n	801b1f8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b1e2:	697b      	ldr	r3, [r7, #20]
 801b1e4:	68da      	ldr	r2, [r3, #12]
 801b1e6:	69bb      	ldr	r3, [r7, #24]
 801b1e8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801b1ea:	4b10      	ldr	r3, [pc, #64]	; (801b22c <tcp_input+0x4c0>)
 801b1ec:	681a      	ldr	r2, [r3, #0]
 801b1ee:	697b      	ldr	r3, [r7, #20]
 801b1f0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801b1f2:	4a0e      	ldr	r2, [pc, #56]	; (801b22c <tcp_input+0x4c0>)
 801b1f4:	697b      	ldr	r3, [r7, #20]
 801b1f6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801b1f8:	6978      	ldr	r0, [r7, #20]
 801b1fa:	f000 fa03 	bl	801b604 <tcp_listen_input>
      }
      pbuf_free(p);
 801b1fe:	6878      	ldr	r0, [r7, #4]
 801b200:	f7fd fb86 	bl	8018910 <pbuf_free>
      return;
 801b204:	e1a8      	b.n	801b558 <tcp_input+0x7ec>
 801b206:	bf00      	nop
 801b208:	2000bfc0 	.word	0x2000bfc0
 801b20c:	20006684 	.word	0x20006684
 801b210:	08027044 	.word	0x08027044
 801b214:	08027170 	.word	0x08027170
 801b218:	08027090 	.word	0x08027090
 801b21c:	2000bfa4 	.word	0x2000bfa4
 801b220:	0802719c 	.word	0x0802719c
 801b224:	2000bfa8 	.word	0x2000bfa8
 801b228:	080271c8 	.word	0x080271c8
 801b22c:	2000bfa0 	.word	0x2000bfa0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801b230:	69fb      	ldr	r3, [r7, #28]
 801b232:	2b00      	cmp	r3, #0
 801b234:	f000 8158 	beq.w	801b4e8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801b238:	4b95      	ldr	r3, [pc, #596]	; (801b490 <tcp_input+0x724>)
 801b23a:	2200      	movs	r2, #0
 801b23c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	891a      	ldrh	r2, [r3, #8]
 801b242:	4b93      	ldr	r3, [pc, #588]	; (801b490 <tcp_input+0x724>)
 801b244:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801b246:	4a92      	ldr	r2, [pc, #584]	; (801b490 <tcp_input+0x724>)
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801b24c:	4b91      	ldr	r3, [pc, #580]	; (801b494 <tcp_input+0x728>)
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	4a8f      	ldr	r2, [pc, #572]	; (801b490 <tcp_input+0x724>)
 801b252:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801b254:	4b90      	ldr	r3, [pc, #576]	; (801b498 <tcp_input+0x72c>)
 801b256:	2200      	movs	r2, #0
 801b258:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801b25a:	4b90      	ldr	r3, [pc, #576]	; (801b49c <tcp_input+0x730>)
 801b25c:	2200      	movs	r2, #0
 801b25e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801b260:	4b8f      	ldr	r3, [pc, #572]	; (801b4a0 <tcp_input+0x734>)
 801b262:	2200      	movs	r2, #0
 801b264:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801b266:	4b8f      	ldr	r3, [pc, #572]	; (801b4a4 <tcp_input+0x738>)
 801b268:	781b      	ldrb	r3, [r3, #0]
 801b26a:	f003 0308 	and.w	r3, r3, #8
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d006      	beq.n	801b280 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	7b5b      	ldrb	r3, [r3, #13]
 801b276:	f043 0301 	orr.w	r3, r3, #1
 801b27a:	b2da      	uxtb	r2, r3
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801b280:	69fb      	ldr	r3, [r7, #28]
 801b282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b284:	2b00      	cmp	r3, #0
 801b286:	d017      	beq.n	801b2b8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b288:	69f8      	ldr	r0, [r7, #28]
 801b28a:	f7ff f85b 	bl	801a344 <tcp_process_refused_data>
 801b28e:	4603      	mov	r3, r0
 801b290:	f113 0f0d 	cmn.w	r3, #13
 801b294:	d007      	beq.n	801b2a6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b296:	69fb      	ldr	r3, [r7, #28]
 801b298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d00c      	beq.n	801b2b8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b29e:	4b82      	ldr	r3, [pc, #520]	; (801b4a8 <tcp_input+0x73c>)
 801b2a0:	881b      	ldrh	r3, [r3, #0]
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d008      	beq.n	801b2b8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801b2a6:	69fb      	ldr	r3, [r7, #28]
 801b2a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	f040 80e3 	bne.w	801b476 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801b2b0:	69f8      	ldr	r0, [r7, #28]
 801b2b2:	f003 fe05 	bl	801eec0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801b2b6:	e0de      	b.n	801b476 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801b2b8:	4a7c      	ldr	r2, [pc, #496]	; (801b4ac <tcp_input+0x740>)
 801b2ba:	69fb      	ldr	r3, [r7, #28]
 801b2bc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801b2be:	69f8      	ldr	r0, [r7, #28]
 801b2c0:	f000 fb18 	bl	801b8f4 <tcp_process>
 801b2c4:	4603      	mov	r3, r0
 801b2c6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801b2c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b2cc:	f113 0f0d 	cmn.w	r3, #13
 801b2d0:	f000 80d3 	beq.w	801b47a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801b2d4:	4b71      	ldr	r3, [pc, #452]	; (801b49c <tcp_input+0x730>)
 801b2d6:	781b      	ldrb	r3, [r3, #0]
 801b2d8:	f003 0308 	and.w	r3, r3, #8
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d015      	beq.n	801b30c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801b2e0:	69fb      	ldr	r3, [r7, #28]
 801b2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d008      	beq.n	801b2fc <tcp_input+0x590>
 801b2ea:	69fb      	ldr	r3, [r7, #28]
 801b2ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b2f0:	69fa      	ldr	r2, [r7, #28]
 801b2f2:	6912      	ldr	r2, [r2, #16]
 801b2f4:	f06f 010d 	mvn.w	r1, #13
 801b2f8:	4610      	mov	r0, r2
 801b2fa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b2fc:	69f9      	ldr	r1, [r7, #28]
 801b2fe:	486c      	ldr	r0, [pc, #432]	; (801b4b0 <tcp_input+0x744>)
 801b300:	f7ff fbbc 	bl	801aa7c <tcp_pcb_remove>
        tcp_free(pcb);
 801b304:	69f8      	ldr	r0, [r7, #28]
 801b306:	f7fd fdbf 	bl	8018e88 <tcp_free>
 801b30a:	e0da      	b.n	801b4c2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801b30c:	2300      	movs	r3, #0
 801b30e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801b310:	4b63      	ldr	r3, [pc, #396]	; (801b4a0 <tcp_input+0x734>)
 801b312:	881b      	ldrh	r3, [r3, #0]
 801b314:	2b00      	cmp	r3, #0
 801b316:	d01d      	beq.n	801b354 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801b318:	4b61      	ldr	r3, [pc, #388]	; (801b4a0 <tcp_input+0x734>)
 801b31a:	881b      	ldrh	r3, [r3, #0]
 801b31c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b31e:	69fb      	ldr	r3, [r7, #28]
 801b320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b324:	2b00      	cmp	r3, #0
 801b326:	d00a      	beq.n	801b33e <tcp_input+0x5d2>
 801b328:	69fb      	ldr	r3, [r7, #28]
 801b32a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b32e:	69fa      	ldr	r2, [r7, #28]
 801b330:	6910      	ldr	r0, [r2, #16]
 801b332:	89fa      	ldrh	r2, [r7, #14]
 801b334:	69f9      	ldr	r1, [r7, #28]
 801b336:	4798      	blx	r3
 801b338:	4603      	mov	r3, r0
 801b33a:	74fb      	strb	r3, [r7, #19]
 801b33c:	e001      	b.n	801b342 <tcp_input+0x5d6>
 801b33e:	2300      	movs	r3, #0
 801b340:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b342:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b346:	f113 0f0d 	cmn.w	r3, #13
 801b34a:	f000 8098 	beq.w	801b47e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801b34e:	4b54      	ldr	r3, [pc, #336]	; (801b4a0 <tcp_input+0x734>)
 801b350:	2200      	movs	r2, #0
 801b352:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801b354:	69f8      	ldr	r0, [r7, #28]
 801b356:	f000 f915 	bl	801b584 <tcp_input_delayed_close>
 801b35a:	4603      	mov	r3, r0
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	f040 8090 	bne.w	801b482 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801b362:	4b4d      	ldr	r3, [pc, #308]	; (801b498 <tcp_input+0x72c>)
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	2b00      	cmp	r3, #0
 801b368:	d041      	beq.n	801b3ee <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801b36a:	69fb      	ldr	r3, [r7, #28]
 801b36c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d006      	beq.n	801b380 <tcp_input+0x614>
 801b372:	4b50      	ldr	r3, [pc, #320]	; (801b4b4 <tcp_input+0x748>)
 801b374:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b378:	494f      	ldr	r1, [pc, #316]	; (801b4b8 <tcp_input+0x74c>)
 801b37a:	4850      	ldr	r0, [pc, #320]	; (801b4bc <tcp_input+0x750>)
 801b37c:	f008 fd00 	bl	8023d80 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801b380:	69fb      	ldr	r3, [r7, #28]
 801b382:	8b5b      	ldrh	r3, [r3, #26]
 801b384:	f003 0310 	and.w	r3, r3, #16
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d008      	beq.n	801b39e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801b38c:	4b42      	ldr	r3, [pc, #264]	; (801b498 <tcp_input+0x72c>)
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	4618      	mov	r0, r3
 801b392:	f7fd fabd 	bl	8018910 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801b396:	69f8      	ldr	r0, [r7, #28]
 801b398:	f7fe f8ba 	bl	8019510 <tcp_abort>
            goto aborted;
 801b39c:	e091      	b.n	801b4c2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b39e:	69fb      	ldr	r3, [r7, #28]
 801b3a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d00c      	beq.n	801b3c2 <tcp_input+0x656>
 801b3a8:	69fb      	ldr	r3, [r7, #28]
 801b3aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b3ae:	69fb      	ldr	r3, [r7, #28]
 801b3b0:	6918      	ldr	r0, [r3, #16]
 801b3b2:	4b39      	ldr	r3, [pc, #228]	; (801b498 <tcp_input+0x72c>)
 801b3b4:	681a      	ldr	r2, [r3, #0]
 801b3b6:	2300      	movs	r3, #0
 801b3b8:	69f9      	ldr	r1, [r7, #28]
 801b3ba:	47a0      	blx	r4
 801b3bc:	4603      	mov	r3, r0
 801b3be:	74fb      	strb	r3, [r7, #19]
 801b3c0:	e008      	b.n	801b3d4 <tcp_input+0x668>
 801b3c2:	4b35      	ldr	r3, [pc, #212]	; (801b498 <tcp_input+0x72c>)
 801b3c4:	681a      	ldr	r2, [r3, #0]
 801b3c6:	2300      	movs	r3, #0
 801b3c8:	69f9      	ldr	r1, [r7, #28]
 801b3ca:	2000      	movs	r0, #0
 801b3cc:	f7ff f890 	bl	801a4f0 <tcp_recv_null>
 801b3d0:	4603      	mov	r3, r0
 801b3d2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801b3d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b3d8:	f113 0f0d 	cmn.w	r3, #13
 801b3dc:	d053      	beq.n	801b486 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801b3de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d003      	beq.n	801b3ee <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801b3e6:	4b2c      	ldr	r3, [pc, #176]	; (801b498 <tcp_input+0x72c>)
 801b3e8:	681a      	ldr	r2, [r3, #0]
 801b3ea:	69fb      	ldr	r3, [r7, #28]
 801b3ec:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801b3ee:	4b2b      	ldr	r3, [pc, #172]	; (801b49c <tcp_input+0x730>)
 801b3f0:	781b      	ldrb	r3, [r3, #0]
 801b3f2:	f003 0320 	and.w	r3, r3, #32
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d030      	beq.n	801b45c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801b3fa:	69fb      	ldr	r3, [r7, #28]
 801b3fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d009      	beq.n	801b416 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801b402:	69fb      	ldr	r3, [r7, #28]
 801b404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b406:	7b5a      	ldrb	r2, [r3, #13]
 801b408:	69fb      	ldr	r3, [r7, #28]
 801b40a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b40c:	f042 0220 	orr.w	r2, r2, #32
 801b410:	b2d2      	uxtb	r2, r2
 801b412:	735a      	strb	r2, [r3, #13]
 801b414:	e022      	b.n	801b45c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b416:	69fb      	ldr	r3, [r7, #28]
 801b418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b41a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801b41e:	d005      	beq.n	801b42c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801b420:	69fb      	ldr	r3, [r7, #28]
 801b422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b424:	3301      	adds	r3, #1
 801b426:	b29a      	uxth	r2, r3
 801b428:	69fb      	ldr	r3, [r7, #28]
 801b42a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801b42c:	69fb      	ldr	r3, [r7, #28]
 801b42e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b432:	2b00      	cmp	r3, #0
 801b434:	d00b      	beq.n	801b44e <tcp_input+0x6e2>
 801b436:	69fb      	ldr	r3, [r7, #28]
 801b438:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b43c:	69fb      	ldr	r3, [r7, #28]
 801b43e:	6918      	ldr	r0, [r3, #16]
 801b440:	2300      	movs	r3, #0
 801b442:	2200      	movs	r2, #0
 801b444:	69f9      	ldr	r1, [r7, #28]
 801b446:	47a0      	blx	r4
 801b448:	4603      	mov	r3, r0
 801b44a:	74fb      	strb	r3, [r7, #19]
 801b44c:	e001      	b.n	801b452 <tcp_input+0x6e6>
 801b44e:	2300      	movs	r3, #0
 801b450:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b452:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b456:	f113 0f0d 	cmn.w	r3, #13
 801b45a:	d016      	beq.n	801b48a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801b45c:	4b13      	ldr	r3, [pc, #76]	; (801b4ac <tcp_input+0x740>)
 801b45e:	2200      	movs	r2, #0
 801b460:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b462:	69f8      	ldr	r0, [r7, #28]
 801b464:	f000 f88e 	bl	801b584 <tcp_input_delayed_close>
 801b468:	4603      	mov	r3, r0
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d128      	bne.n	801b4c0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801b46e:	69f8      	ldr	r0, [r7, #28]
 801b470:	f002 ff20 	bl	801e2b4 <tcp_output>
 801b474:	e025      	b.n	801b4c2 <tcp_input+0x756>
        goto aborted;
 801b476:	bf00      	nop
 801b478:	e023      	b.n	801b4c2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801b47a:	bf00      	nop
 801b47c:	e021      	b.n	801b4c2 <tcp_input+0x756>
              goto aborted;
 801b47e:	bf00      	nop
 801b480:	e01f      	b.n	801b4c2 <tcp_input+0x756>
          goto aborted;
 801b482:	bf00      	nop
 801b484:	e01d      	b.n	801b4c2 <tcp_input+0x756>
            goto aborted;
 801b486:	bf00      	nop
 801b488:	e01b      	b.n	801b4c2 <tcp_input+0x756>
              goto aborted;
 801b48a:	bf00      	nop
 801b48c:	e019      	b.n	801b4c2 <tcp_input+0x756>
 801b48e:	bf00      	nop
 801b490:	2000bfb0 	.word	0x2000bfb0
 801b494:	2000bfc0 	.word	0x2000bfc0
 801b498:	2000bfe0 	.word	0x2000bfe0
 801b49c:	2000bfdd 	.word	0x2000bfdd
 801b4a0:	2000bfd8 	.word	0x2000bfd8
 801b4a4:	2000bfdc 	.word	0x2000bfdc
 801b4a8:	2000bfda 	.word	0x2000bfda
 801b4ac:	2000bfe4 	.word	0x2000bfe4
 801b4b0:	2000bfa4 	.word	0x2000bfa4
 801b4b4:	08027044 	.word	0x08027044
 801b4b8:	080271f8 	.word	0x080271f8
 801b4bc:	08027090 	.word	0x08027090
          goto aborted;
 801b4c0:	bf00      	nop
    tcp_input_pcb = NULL;
 801b4c2:	4b27      	ldr	r3, [pc, #156]	; (801b560 <tcp_input+0x7f4>)
 801b4c4:	2200      	movs	r2, #0
 801b4c6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801b4c8:	4b26      	ldr	r3, [pc, #152]	; (801b564 <tcp_input+0x7f8>)
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801b4ce:	4b26      	ldr	r3, [pc, #152]	; (801b568 <tcp_input+0x7fc>)
 801b4d0:	685b      	ldr	r3, [r3, #4]
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d03f      	beq.n	801b556 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801b4d6:	4b24      	ldr	r3, [pc, #144]	; (801b568 <tcp_input+0x7fc>)
 801b4d8:	685b      	ldr	r3, [r3, #4]
 801b4da:	4618      	mov	r0, r3
 801b4dc:	f7fd fa18 	bl	8018910 <pbuf_free>
      inseg.p = NULL;
 801b4e0:	4b21      	ldr	r3, [pc, #132]	; (801b568 <tcp_input+0x7fc>)
 801b4e2:	2200      	movs	r2, #0
 801b4e4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801b4e6:	e036      	b.n	801b556 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801b4e8:	4b20      	ldr	r3, [pc, #128]	; (801b56c <tcp_input+0x800>)
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	899b      	ldrh	r3, [r3, #12]
 801b4ee:	b29b      	uxth	r3, r3
 801b4f0:	4618      	mov	r0, r3
 801b4f2:	f7fb fe1b 	bl	801712c <lwip_htons>
 801b4f6:	4603      	mov	r3, r0
 801b4f8:	b2db      	uxtb	r3, r3
 801b4fa:	f003 0304 	and.w	r3, r3, #4
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d118      	bne.n	801b534 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b502:	4b1b      	ldr	r3, [pc, #108]	; (801b570 <tcp_input+0x804>)
 801b504:	6819      	ldr	r1, [r3, #0]
 801b506:	4b1b      	ldr	r3, [pc, #108]	; (801b574 <tcp_input+0x808>)
 801b508:	881b      	ldrh	r3, [r3, #0]
 801b50a:	461a      	mov	r2, r3
 801b50c:	4b1a      	ldr	r3, [pc, #104]	; (801b578 <tcp_input+0x80c>)
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b512:	4b16      	ldr	r3, [pc, #88]	; (801b56c <tcp_input+0x800>)
 801b514:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b516:	885b      	ldrh	r3, [r3, #2]
 801b518:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b51a:	4a14      	ldr	r2, [pc, #80]	; (801b56c <tcp_input+0x800>)
 801b51c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b51e:	8812      	ldrh	r2, [r2, #0]
 801b520:	b292      	uxth	r2, r2
 801b522:	9202      	str	r2, [sp, #8]
 801b524:	9301      	str	r3, [sp, #4]
 801b526:	4b15      	ldr	r3, [pc, #84]	; (801b57c <tcp_input+0x810>)
 801b528:	9300      	str	r3, [sp, #0]
 801b52a:	4b15      	ldr	r3, [pc, #84]	; (801b580 <tcp_input+0x814>)
 801b52c:	4602      	mov	r2, r0
 801b52e:	2000      	movs	r0, #0
 801b530:	f003 fc74 	bl	801ee1c <tcp_rst>
    pbuf_free(p);
 801b534:	6878      	ldr	r0, [r7, #4]
 801b536:	f7fd f9eb 	bl	8018910 <pbuf_free>
  return;
 801b53a:	e00c      	b.n	801b556 <tcp_input+0x7ea>
    goto dropped;
 801b53c:	bf00      	nop
 801b53e:	e006      	b.n	801b54e <tcp_input+0x7e2>
    goto dropped;
 801b540:	bf00      	nop
 801b542:	e004      	b.n	801b54e <tcp_input+0x7e2>
    goto dropped;
 801b544:	bf00      	nop
 801b546:	e002      	b.n	801b54e <tcp_input+0x7e2>
      goto dropped;
 801b548:	bf00      	nop
 801b54a:	e000      	b.n	801b54e <tcp_input+0x7e2>
      goto dropped;
 801b54c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801b54e:	6878      	ldr	r0, [r7, #4]
 801b550:	f7fd f9de 	bl	8018910 <pbuf_free>
 801b554:	e000      	b.n	801b558 <tcp_input+0x7ec>
  return;
 801b556:	bf00      	nop
}
 801b558:	3724      	adds	r7, #36	; 0x24
 801b55a:	46bd      	mov	sp, r7
 801b55c:	bd90      	pop	{r4, r7, pc}
 801b55e:	bf00      	nop
 801b560:	2000bfe4 	.word	0x2000bfe4
 801b564:	2000bfe0 	.word	0x2000bfe0
 801b568:	2000bfb0 	.word	0x2000bfb0
 801b56c:	2000bfc0 	.word	0x2000bfc0
 801b570:	2000bfd4 	.word	0x2000bfd4
 801b574:	2000bfda 	.word	0x2000bfda
 801b578:	2000bfd0 	.word	0x2000bfd0
 801b57c:	20006694 	.word	0x20006694
 801b580:	20006698 	.word	0x20006698

0801b584 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801b584:	b580      	push	{r7, lr}
 801b586:	b082      	sub	sp, #8
 801b588:	af00      	add	r7, sp, #0
 801b58a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d106      	bne.n	801b5a0 <tcp_input_delayed_close+0x1c>
 801b592:	4b17      	ldr	r3, [pc, #92]	; (801b5f0 <tcp_input_delayed_close+0x6c>)
 801b594:	f240 225a 	movw	r2, #602	; 0x25a
 801b598:	4916      	ldr	r1, [pc, #88]	; (801b5f4 <tcp_input_delayed_close+0x70>)
 801b59a:	4817      	ldr	r0, [pc, #92]	; (801b5f8 <tcp_input_delayed_close+0x74>)
 801b59c:	f008 fbf0 	bl	8023d80 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801b5a0:	4b16      	ldr	r3, [pc, #88]	; (801b5fc <tcp_input_delayed_close+0x78>)
 801b5a2:	781b      	ldrb	r3, [r3, #0]
 801b5a4:	f003 0310 	and.w	r3, r3, #16
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d01c      	beq.n	801b5e6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	8b5b      	ldrh	r3, [r3, #26]
 801b5b0:	f003 0310 	and.w	r3, r3, #16
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d10d      	bne.n	801b5d4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d008      	beq.n	801b5d4 <tcp_input_delayed_close+0x50>
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b5c8:	687a      	ldr	r2, [r7, #4]
 801b5ca:	6912      	ldr	r2, [r2, #16]
 801b5cc:	f06f 010e 	mvn.w	r1, #14
 801b5d0:	4610      	mov	r0, r2
 801b5d2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b5d4:	6879      	ldr	r1, [r7, #4]
 801b5d6:	480a      	ldr	r0, [pc, #40]	; (801b600 <tcp_input_delayed_close+0x7c>)
 801b5d8:	f7ff fa50 	bl	801aa7c <tcp_pcb_remove>
    tcp_free(pcb);
 801b5dc:	6878      	ldr	r0, [r7, #4]
 801b5de:	f7fd fc53 	bl	8018e88 <tcp_free>
    return 1;
 801b5e2:	2301      	movs	r3, #1
 801b5e4:	e000      	b.n	801b5e8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801b5e6:	2300      	movs	r3, #0
}
 801b5e8:	4618      	mov	r0, r3
 801b5ea:	3708      	adds	r7, #8
 801b5ec:	46bd      	mov	sp, r7
 801b5ee:	bd80      	pop	{r7, pc}
 801b5f0:	08027044 	.word	0x08027044
 801b5f4:	08027214 	.word	0x08027214
 801b5f8:	08027090 	.word	0x08027090
 801b5fc:	2000bfdd 	.word	0x2000bfdd
 801b600:	2000bfa4 	.word	0x2000bfa4

0801b604 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801b604:	b590      	push	{r4, r7, lr}
 801b606:	b08b      	sub	sp, #44	; 0x2c
 801b608:	af04      	add	r7, sp, #16
 801b60a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801b60c:	4b6f      	ldr	r3, [pc, #444]	; (801b7cc <tcp_listen_input+0x1c8>)
 801b60e:	781b      	ldrb	r3, [r3, #0]
 801b610:	f003 0304 	and.w	r3, r3, #4
 801b614:	2b00      	cmp	r3, #0
 801b616:	f040 80d2 	bne.w	801b7be <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d106      	bne.n	801b62e <tcp_listen_input+0x2a>
 801b620:	4b6b      	ldr	r3, [pc, #428]	; (801b7d0 <tcp_listen_input+0x1cc>)
 801b622:	f240 2281 	movw	r2, #641	; 0x281
 801b626:	496b      	ldr	r1, [pc, #428]	; (801b7d4 <tcp_listen_input+0x1d0>)
 801b628:	486b      	ldr	r0, [pc, #428]	; (801b7d8 <tcp_listen_input+0x1d4>)
 801b62a:	f008 fba9 	bl	8023d80 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801b62e:	4b67      	ldr	r3, [pc, #412]	; (801b7cc <tcp_listen_input+0x1c8>)
 801b630:	781b      	ldrb	r3, [r3, #0]
 801b632:	f003 0310 	and.w	r3, r3, #16
 801b636:	2b00      	cmp	r3, #0
 801b638:	d019      	beq.n	801b66e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b63a:	4b68      	ldr	r3, [pc, #416]	; (801b7dc <tcp_listen_input+0x1d8>)
 801b63c:	6819      	ldr	r1, [r3, #0]
 801b63e:	4b68      	ldr	r3, [pc, #416]	; (801b7e0 <tcp_listen_input+0x1dc>)
 801b640:	881b      	ldrh	r3, [r3, #0]
 801b642:	461a      	mov	r2, r3
 801b644:	4b67      	ldr	r3, [pc, #412]	; (801b7e4 <tcp_listen_input+0x1e0>)
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b64a:	4b67      	ldr	r3, [pc, #412]	; (801b7e8 <tcp_listen_input+0x1e4>)
 801b64c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b64e:	885b      	ldrh	r3, [r3, #2]
 801b650:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b652:	4a65      	ldr	r2, [pc, #404]	; (801b7e8 <tcp_listen_input+0x1e4>)
 801b654:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b656:	8812      	ldrh	r2, [r2, #0]
 801b658:	b292      	uxth	r2, r2
 801b65a:	9202      	str	r2, [sp, #8]
 801b65c:	9301      	str	r3, [sp, #4]
 801b65e:	4b63      	ldr	r3, [pc, #396]	; (801b7ec <tcp_listen_input+0x1e8>)
 801b660:	9300      	str	r3, [sp, #0]
 801b662:	4b63      	ldr	r3, [pc, #396]	; (801b7f0 <tcp_listen_input+0x1ec>)
 801b664:	4602      	mov	r2, r0
 801b666:	6878      	ldr	r0, [r7, #4]
 801b668:	f003 fbd8 	bl	801ee1c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801b66c:	e0a9      	b.n	801b7c2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801b66e:	4b57      	ldr	r3, [pc, #348]	; (801b7cc <tcp_listen_input+0x1c8>)
 801b670:	781b      	ldrb	r3, [r3, #0]
 801b672:	f003 0302 	and.w	r3, r3, #2
 801b676:	2b00      	cmp	r3, #0
 801b678:	f000 80a3 	beq.w	801b7c2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	7d5b      	ldrb	r3, [r3, #21]
 801b680:	4618      	mov	r0, r3
 801b682:	f7ff f859 	bl	801a738 <tcp_alloc>
 801b686:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801b688:	697b      	ldr	r3, [r7, #20]
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d111      	bne.n	801b6b2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	699b      	ldr	r3, [r3, #24]
 801b692:	2b00      	cmp	r3, #0
 801b694:	d00a      	beq.n	801b6ac <tcp_listen_input+0xa8>
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	699b      	ldr	r3, [r3, #24]
 801b69a:	687a      	ldr	r2, [r7, #4]
 801b69c:	6910      	ldr	r0, [r2, #16]
 801b69e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b6a2:	2100      	movs	r1, #0
 801b6a4:	4798      	blx	r3
 801b6a6:	4603      	mov	r3, r0
 801b6a8:	73bb      	strb	r3, [r7, #14]
      return;
 801b6aa:	e08b      	b.n	801b7c4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b6ac:	23f0      	movs	r3, #240	; 0xf0
 801b6ae:	73bb      	strb	r3, [r7, #14]
      return;
 801b6b0:	e088      	b.n	801b7c4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801b6b2:	4b50      	ldr	r3, [pc, #320]	; (801b7f4 <tcp_listen_input+0x1f0>)
 801b6b4:	695a      	ldr	r2, [r3, #20]
 801b6b6:	697b      	ldr	r3, [r7, #20]
 801b6b8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801b6ba:	4b4e      	ldr	r3, [pc, #312]	; (801b7f4 <tcp_listen_input+0x1f0>)
 801b6bc:	691a      	ldr	r2, [r3, #16]
 801b6be:	697b      	ldr	r3, [r7, #20]
 801b6c0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	8ada      	ldrh	r2, [r3, #22]
 801b6c6:	697b      	ldr	r3, [r7, #20]
 801b6c8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801b6ca:	4b47      	ldr	r3, [pc, #284]	; (801b7e8 <tcp_listen_input+0x1e4>)
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	881b      	ldrh	r3, [r3, #0]
 801b6d0:	b29a      	uxth	r2, r3
 801b6d2:	697b      	ldr	r3, [r7, #20]
 801b6d4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801b6d6:	697b      	ldr	r3, [r7, #20]
 801b6d8:	2203      	movs	r2, #3
 801b6da:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801b6dc:	4b41      	ldr	r3, [pc, #260]	; (801b7e4 <tcp_listen_input+0x1e0>)
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	1c5a      	adds	r2, r3, #1
 801b6e2:	697b      	ldr	r3, [r7, #20]
 801b6e4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801b6e6:	697b      	ldr	r3, [r7, #20]
 801b6e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b6ea:	697b      	ldr	r3, [r7, #20]
 801b6ec:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801b6ee:	6978      	ldr	r0, [r7, #20]
 801b6f0:	f7ff fa58 	bl	801aba4 <tcp_next_iss>
 801b6f4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801b6f6:	697b      	ldr	r3, [r7, #20]
 801b6f8:	693a      	ldr	r2, [r7, #16]
 801b6fa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801b6fc:	697b      	ldr	r3, [r7, #20]
 801b6fe:	693a      	ldr	r2, [r7, #16]
 801b700:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801b702:	697b      	ldr	r3, [r7, #20]
 801b704:	693a      	ldr	r2, [r7, #16]
 801b706:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801b708:	697b      	ldr	r3, [r7, #20]
 801b70a:	693a      	ldr	r2, [r7, #16]
 801b70c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801b70e:	4b35      	ldr	r3, [pc, #212]	; (801b7e4 <tcp_listen_input+0x1e0>)
 801b710:	681b      	ldr	r3, [r3, #0]
 801b712:	1e5a      	subs	r2, r3, #1
 801b714:	697b      	ldr	r3, [r7, #20]
 801b716:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	691a      	ldr	r2, [r3, #16]
 801b71c:	697b      	ldr	r3, [r7, #20]
 801b71e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801b720:	697b      	ldr	r3, [r7, #20]
 801b722:	687a      	ldr	r2, [r7, #4]
 801b724:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	7a5b      	ldrb	r3, [r3, #9]
 801b72a:	f003 030c 	and.w	r3, r3, #12
 801b72e:	b2da      	uxtb	r2, r3
 801b730:	697b      	ldr	r3, [r7, #20]
 801b732:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	7a1a      	ldrb	r2, [r3, #8]
 801b738:	697b      	ldr	r3, [r7, #20]
 801b73a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801b73c:	4b2e      	ldr	r3, [pc, #184]	; (801b7f8 <tcp_listen_input+0x1f4>)
 801b73e:	681a      	ldr	r2, [r3, #0]
 801b740:	697b      	ldr	r3, [r7, #20]
 801b742:	60da      	str	r2, [r3, #12]
 801b744:	4a2c      	ldr	r2, [pc, #176]	; (801b7f8 <tcp_listen_input+0x1f4>)
 801b746:	697b      	ldr	r3, [r7, #20]
 801b748:	6013      	str	r3, [r2, #0]
 801b74a:	f003 fd29 	bl	801f1a0 <tcp_timer_needed>
 801b74e:	4b2b      	ldr	r3, [pc, #172]	; (801b7fc <tcp_listen_input+0x1f8>)
 801b750:	2201      	movs	r2, #1
 801b752:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801b754:	6978      	ldr	r0, [r7, #20]
 801b756:	f001 fd8f 	bl	801d278 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801b75a:	4b23      	ldr	r3, [pc, #140]	; (801b7e8 <tcp_listen_input+0x1e4>)
 801b75c:	681b      	ldr	r3, [r3, #0]
 801b75e:	89db      	ldrh	r3, [r3, #14]
 801b760:	b29a      	uxth	r2, r3
 801b762:	697b      	ldr	r3, [r7, #20]
 801b764:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801b768:	697b      	ldr	r3, [r7, #20]
 801b76a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b76e:	697b      	ldr	r3, [r7, #20]
 801b770:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801b774:	697b      	ldr	r3, [r7, #20]
 801b776:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801b778:	697b      	ldr	r3, [r7, #20]
 801b77a:	3304      	adds	r3, #4
 801b77c:	4618      	mov	r0, r3
 801b77e:	f005 fcbb 	bl	80210f8 <ip4_route>
 801b782:	4601      	mov	r1, r0
 801b784:	697b      	ldr	r3, [r7, #20]
 801b786:	3304      	adds	r3, #4
 801b788:	461a      	mov	r2, r3
 801b78a:	4620      	mov	r0, r4
 801b78c:	f7ff fa30 	bl	801abf0 <tcp_eff_send_mss_netif>
 801b790:	4603      	mov	r3, r0
 801b792:	461a      	mov	r2, r3
 801b794:	697b      	ldr	r3, [r7, #20]
 801b796:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801b798:	2112      	movs	r1, #18
 801b79a:	6978      	ldr	r0, [r7, #20]
 801b79c:	f002 fc9c 	bl	801e0d8 <tcp_enqueue_flags>
 801b7a0:	4603      	mov	r3, r0
 801b7a2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801b7a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d004      	beq.n	801b7b6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801b7ac:	2100      	movs	r1, #0
 801b7ae:	6978      	ldr	r0, [r7, #20]
 801b7b0:	f7fd fdf0 	bl	8019394 <tcp_abandon>
      return;
 801b7b4:	e006      	b.n	801b7c4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801b7b6:	6978      	ldr	r0, [r7, #20]
 801b7b8:	f002 fd7c 	bl	801e2b4 <tcp_output>
  return;
 801b7bc:	e001      	b.n	801b7c2 <tcp_listen_input+0x1be>
    return;
 801b7be:	bf00      	nop
 801b7c0:	e000      	b.n	801b7c4 <tcp_listen_input+0x1c0>
  return;
 801b7c2:	bf00      	nop
}
 801b7c4:	371c      	adds	r7, #28
 801b7c6:	46bd      	mov	sp, r7
 801b7c8:	bd90      	pop	{r4, r7, pc}
 801b7ca:	bf00      	nop
 801b7cc:	2000bfdc 	.word	0x2000bfdc
 801b7d0:	08027044 	.word	0x08027044
 801b7d4:	0802723c 	.word	0x0802723c
 801b7d8:	08027090 	.word	0x08027090
 801b7dc:	2000bfd4 	.word	0x2000bfd4
 801b7e0:	2000bfda 	.word	0x2000bfda
 801b7e4:	2000bfd0 	.word	0x2000bfd0
 801b7e8:	2000bfc0 	.word	0x2000bfc0
 801b7ec:	20006694 	.word	0x20006694
 801b7f0:	20006698 	.word	0x20006698
 801b7f4:	20006684 	.word	0x20006684
 801b7f8:	2000bfa4 	.word	0x2000bfa4
 801b7fc:	2000bfac 	.word	0x2000bfac

0801b800 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801b800:	b580      	push	{r7, lr}
 801b802:	b086      	sub	sp, #24
 801b804:	af04      	add	r7, sp, #16
 801b806:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801b808:	4b2f      	ldr	r3, [pc, #188]	; (801b8c8 <tcp_timewait_input+0xc8>)
 801b80a:	781b      	ldrb	r3, [r3, #0]
 801b80c:	f003 0304 	and.w	r3, r3, #4
 801b810:	2b00      	cmp	r3, #0
 801b812:	d153      	bne.n	801b8bc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	2b00      	cmp	r3, #0
 801b818:	d106      	bne.n	801b828 <tcp_timewait_input+0x28>
 801b81a:	4b2c      	ldr	r3, [pc, #176]	; (801b8cc <tcp_timewait_input+0xcc>)
 801b81c:	f240 22ee 	movw	r2, #750	; 0x2ee
 801b820:	492b      	ldr	r1, [pc, #172]	; (801b8d0 <tcp_timewait_input+0xd0>)
 801b822:	482c      	ldr	r0, [pc, #176]	; (801b8d4 <tcp_timewait_input+0xd4>)
 801b824:	f008 faac 	bl	8023d80 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801b828:	4b27      	ldr	r3, [pc, #156]	; (801b8c8 <tcp_timewait_input+0xc8>)
 801b82a:	781b      	ldrb	r3, [r3, #0]
 801b82c:	f003 0302 	and.w	r3, r3, #2
 801b830:	2b00      	cmp	r3, #0
 801b832:	d02a      	beq.n	801b88a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801b834:	4b28      	ldr	r3, [pc, #160]	; (801b8d8 <tcp_timewait_input+0xd8>)
 801b836:	681a      	ldr	r2, [r3, #0]
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b83c:	1ad3      	subs	r3, r2, r3
 801b83e:	2b00      	cmp	r3, #0
 801b840:	db2d      	blt.n	801b89e <tcp_timewait_input+0x9e>
 801b842:	4b25      	ldr	r3, [pc, #148]	; (801b8d8 <tcp_timewait_input+0xd8>)
 801b844:	681a      	ldr	r2, [r3, #0]
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b84a:	6879      	ldr	r1, [r7, #4]
 801b84c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b84e:	440b      	add	r3, r1
 801b850:	1ad3      	subs	r3, r2, r3
 801b852:	2b00      	cmp	r3, #0
 801b854:	dc23      	bgt.n	801b89e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b856:	4b21      	ldr	r3, [pc, #132]	; (801b8dc <tcp_timewait_input+0xdc>)
 801b858:	6819      	ldr	r1, [r3, #0]
 801b85a:	4b21      	ldr	r3, [pc, #132]	; (801b8e0 <tcp_timewait_input+0xe0>)
 801b85c:	881b      	ldrh	r3, [r3, #0]
 801b85e:	461a      	mov	r2, r3
 801b860:	4b1d      	ldr	r3, [pc, #116]	; (801b8d8 <tcp_timewait_input+0xd8>)
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b866:	4b1f      	ldr	r3, [pc, #124]	; (801b8e4 <tcp_timewait_input+0xe4>)
 801b868:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b86a:	885b      	ldrh	r3, [r3, #2]
 801b86c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b86e:	4a1d      	ldr	r2, [pc, #116]	; (801b8e4 <tcp_timewait_input+0xe4>)
 801b870:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b872:	8812      	ldrh	r2, [r2, #0]
 801b874:	b292      	uxth	r2, r2
 801b876:	9202      	str	r2, [sp, #8]
 801b878:	9301      	str	r3, [sp, #4]
 801b87a:	4b1b      	ldr	r3, [pc, #108]	; (801b8e8 <tcp_timewait_input+0xe8>)
 801b87c:	9300      	str	r3, [sp, #0]
 801b87e:	4b1b      	ldr	r3, [pc, #108]	; (801b8ec <tcp_timewait_input+0xec>)
 801b880:	4602      	mov	r2, r0
 801b882:	6878      	ldr	r0, [r7, #4]
 801b884:	f003 faca 	bl	801ee1c <tcp_rst>
      return;
 801b888:	e01b      	b.n	801b8c2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801b88a:	4b0f      	ldr	r3, [pc, #60]	; (801b8c8 <tcp_timewait_input+0xc8>)
 801b88c:	781b      	ldrb	r3, [r3, #0]
 801b88e:	f003 0301 	and.w	r3, r3, #1
 801b892:	2b00      	cmp	r3, #0
 801b894:	d003      	beq.n	801b89e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801b896:	4b16      	ldr	r3, [pc, #88]	; (801b8f0 <tcp_timewait_input+0xf0>)
 801b898:	681a      	ldr	r2, [r3, #0]
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801b89e:	4b10      	ldr	r3, [pc, #64]	; (801b8e0 <tcp_timewait_input+0xe0>)
 801b8a0:	881b      	ldrh	r3, [r3, #0]
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d00c      	beq.n	801b8c0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	8b5b      	ldrh	r3, [r3, #26]
 801b8aa:	f043 0302 	orr.w	r3, r3, #2
 801b8ae:	b29a      	uxth	r2, r3
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b8b4:	6878      	ldr	r0, [r7, #4]
 801b8b6:	f002 fcfd 	bl	801e2b4 <tcp_output>
  }
  return;
 801b8ba:	e001      	b.n	801b8c0 <tcp_timewait_input+0xc0>
    return;
 801b8bc:	bf00      	nop
 801b8be:	e000      	b.n	801b8c2 <tcp_timewait_input+0xc2>
  return;
 801b8c0:	bf00      	nop
}
 801b8c2:	3708      	adds	r7, #8
 801b8c4:	46bd      	mov	sp, r7
 801b8c6:	bd80      	pop	{r7, pc}
 801b8c8:	2000bfdc 	.word	0x2000bfdc
 801b8cc:	08027044 	.word	0x08027044
 801b8d0:	0802725c 	.word	0x0802725c
 801b8d4:	08027090 	.word	0x08027090
 801b8d8:	2000bfd0 	.word	0x2000bfd0
 801b8dc:	2000bfd4 	.word	0x2000bfd4
 801b8e0:	2000bfda 	.word	0x2000bfda
 801b8e4:	2000bfc0 	.word	0x2000bfc0
 801b8e8:	20006694 	.word	0x20006694
 801b8ec:	20006698 	.word	0x20006698
 801b8f0:	2000bf98 	.word	0x2000bf98

0801b8f4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801b8f4:	b590      	push	{r4, r7, lr}
 801b8f6:	b08d      	sub	sp, #52	; 0x34
 801b8f8:	af04      	add	r7, sp, #16
 801b8fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801b900:	2300      	movs	r3, #0
 801b902:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	2b00      	cmp	r3, #0
 801b908:	d106      	bne.n	801b918 <tcp_process+0x24>
 801b90a:	4b9d      	ldr	r3, [pc, #628]	; (801bb80 <tcp_process+0x28c>)
 801b90c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801b910:	499c      	ldr	r1, [pc, #624]	; (801bb84 <tcp_process+0x290>)
 801b912:	489d      	ldr	r0, [pc, #628]	; (801bb88 <tcp_process+0x294>)
 801b914:	f008 fa34 	bl	8023d80 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801b918:	4b9c      	ldr	r3, [pc, #624]	; (801bb8c <tcp_process+0x298>)
 801b91a:	781b      	ldrb	r3, [r3, #0]
 801b91c:	f003 0304 	and.w	r3, r3, #4
 801b920:	2b00      	cmp	r3, #0
 801b922:	d04e      	beq.n	801b9c2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	7d1b      	ldrb	r3, [r3, #20]
 801b928:	2b02      	cmp	r3, #2
 801b92a:	d108      	bne.n	801b93e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b930:	4b97      	ldr	r3, [pc, #604]	; (801bb90 <tcp_process+0x29c>)
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	429a      	cmp	r2, r3
 801b936:	d123      	bne.n	801b980 <tcp_process+0x8c>
        acceptable = 1;
 801b938:	2301      	movs	r3, #1
 801b93a:	76fb      	strb	r3, [r7, #27]
 801b93c:	e020      	b.n	801b980 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b942:	4b94      	ldr	r3, [pc, #592]	; (801bb94 <tcp_process+0x2a0>)
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	429a      	cmp	r2, r3
 801b948:	d102      	bne.n	801b950 <tcp_process+0x5c>
        acceptable = 1;
 801b94a:	2301      	movs	r3, #1
 801b94c:	76fb      	strb	r3, [r7, #27]
 801b94e:	e017      	b.n	801b980 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b950:	4b90      	ldr	r3, [pc, #576]	; (801bb94 <tcp_process+0x2a0>)
 801b952:	681a      	ldr	r2, [r3, #0]
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b958:	1ad3      	subs	r3, r2, r3
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	db10      	blt.n	801b980 <tcp_process+0x8c>
 801b95e:	4b8d      	ldr	r3, [pc, #564]	; (801bb94 <tcp_process+0x2a0>)
 801b960:	681a      	ldr	r2, [r3, #0]
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b966:	6879      	ldr	r1, [r7, #4]
 801b968:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b96a:	440b      	add	r3, r1
 801b96c:	1ad3      	subs	r3, r2, r3
 801b96e:	2b00      	cmp	r3, #0
 801b970:	dc06      	bgt.n	801b980 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	8b5b      	ldrh	r3, [r3, #26]
 801b976:	f043 0302 	orr.w	r3, r3, #2
 801b97a:	b29a      	uxth	r2, r3
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801b980:	7efb      	ldrb	r3, [r7, #27]
 801b982:	2b00      	cmp	r3, #0
 801b984:	d01b      	beq.n	801b9be <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	7d1b      	ldrb	r3, [r3, #20]
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d106      	bne.n	801b99c <tcp_process+0xa8>
 801b98e:	4b7c      	ldr	r3, [pc, #496]	; (801bb80 <tcp_process+0x28c>)
 801b990:	f44f 724e 	mov.w	r2, #824	; 0x338
 801b994:	4980      	ldr	r1, [pc, #512]	; (801bb98 <tcp_process+0x2a4>)
 801b996:	487c      	ldr	r0, [pc, #496]	; (801bb88 <tcp_process+0x294>)
 801b998:	f008 f9f2 	bl	8023d80 <iprintf>
      recv_flags |= TF_RESET;
 801b99c:	4b7f      	ldr	r3, [pc, #508]	; (801bb9c <tcp_process+0x2a8>)
 801b99e:	781b      	ldrb	r3, [r3, #0]
 801b9a0:	f043 0308 	orr.w	r3, r3, #8
 801b9a4:	b2da      	uxtb	r2, r3
 801b9a6:	4b7d      	ldr	r3, [pc, #500]	; (801bb9c <tcp_process+0x2a8>)
 801b9a8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	8b5b      	ldrh	r3, [r3, #26]
 801b9ae:	f023 0301 	bic.w	r3, r3, #1
 801b9b2:	b29a      	uxth	r2, r3
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801b9b8:	f06f 030d 	mvn.w	r3, #13
 801b9bc:	e37a      	b.n	801c0b4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801b9be:	2300      	movs	r3, #0
 801b9c0:	e378      	b.n	801c0b4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801b9c2:	4b72      	ldr	r3, [pc, #456]	; (801bb8c <tcp_process+0x298>)
 801b9c4:	781b      	ldrb	r3, [r3, #0]
 801b9c6:	f003 0302 	and.w	r3, r3, #2
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d010      	beq.n	801b9f0 <tcp_process+0xfc>
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	7d1b      	ldrb	r3, [r3, #20]
 801b9d2:	2b02      	cmp	r3, #2
 801b9d4:	d00c      	beq.n	801b9f0 <tcp_process+0xfc>
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	7d1b      	ldrb	r3, [r3, #20]
 801b9da:	2b03      	cmp	r3, #3
 801b9dc:	d008      	beq.n	801b9f0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	8b5b      	ldrh	r3, [r3, #26]
 801b9e2:	f043 0302 	orr.w	r3, r3, #2
 801b9e6:	b29a      	uxth	r2, r3
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801b9ec:	2300      	movs	r3, #0
 801b9ee:	e361      	b.n	801c0b4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	8b5b      	ldrh	r3, [r3, #26]
 801b9f4:	f003 0310 	and.w	r3, r3, #16
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d103      	bne.n	801ba04 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801b9fc:	4b68      	ldr	r3, [pc, #416]	; (801bba0 <tcp_process+0x2ac>)
 801b9fe:	681a      	ldr	r2, [r3, #0]
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	2200      	movs	r2, #0
 801ba08:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	2200      	movs	r2, #0
 801ba10:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801ba14:	6878      	ldr	r0, [r7, #4]
 801ba16:	f001 fc2f 	bl	801d278 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	7d1b      	ldrb	r3, [r3, #20]
 801ba1e:	3b02      	subs	r3, #2
 801ba20:	2b07      	cmp	r3, #7
 801ba22:	f200 8337 	bhi.w	801c094 <tcp_process+0x7a0>
 801ba26:	a201      	add	r2, pc, #4	; (adr r2, 801ba2c <tcp_process+0x138>)
 801ba28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba2c:	0801ba4d 	.word	0x0801ba4d
 801ba30:	0801bc7d 	.word	0x0801bc7d
 801ba34:	0801bdf5 	.word	0x0801bdf5
 801ba38:	0801be1f 	.word	0x0801be1f
 801ba3c:	0801bf43 	.word	0x0801bf43
 801ba40:	0801bdf5 	.word	0x0801bdf5
 801ba44:	0801bfcf 	.word	0x0801bfcf
 801ba48:	0801c05f 	.word	0x0801c05f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801ba4c:	4b4f      	ldr	r3, [pc, #316]	; (801bb8c <tcp_process+0x298>)
 801ba4e:	781b      	ldrb	r3, [r3, #0]
 801ba50:	f003 0310 	and.w	r3, r3, #16
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	f000 80e4 	beq.w	801bc22 <tcp_process+0x32e>
 801ba5a:	4b4c      	ldr	r3, [pc, #304]	; (801bb8c <tcp_process+0x298>)
 801ba5c:	781b      	ldrb	r3, [r3, #0]
 801ba5e:	f003 0302 	and.w	r3, r3, #2
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	f000 80dd 	beq.w	801bc22 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba6c:	1c5a      	adds	r2, r3, #1
 801ba6e:	4b48      	ldr	r3, [pc, #288]	; (801bb90 <tcp_process+0x29c>)
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	429a      	cmp	r2, r3
 801ba74:	f040 80d5 	bne.w	801bc22 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801ba78:	4b46      	ldr	r3, [pc, #280]	; (801bb94 <tcp_process+0x2a0>)
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	1c5a      	adds	r2, r3, #1
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801ba8a:	4b41      	ldr	r3, [pc, #260]	; (801bb90 <tcp_process+0x29c>)
 801ba8c:	681a      	ldr	r2, [r3, #0]
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801ba92:	4b44      	ldr	r3, [pc, #272]	; (801bba4 <tcp_process+0x2b0>)
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	89db      	ldrh	r3, [r3, #14]
 801ba98:	b29a      	uxth	r2, r3
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801baac:	4b39      	ldr	r3, [pc, #228]	; (801bb94 <tcp_process+0x2a0>)
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	1e5a      	subs	r2, r3, #1
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	2204      	movs	r2, #4
 801baba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	3304      	adds	r3, #4
 801bac4:	4618      	mov	r0, r3
 801bac6:	f005 fb17 	bl	80210f8 <ip4_route>
 801baca:	4601      	mov	r1, r0
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	3304      	adds	r3, #4
 801bad0:	461a      	mov	r2, r3
 801bad2:	4620      	mov	r0, r4
 801bad4:	f7ff f88c 	bl	801abf0 <tcp_eff_send_mss_netif>
 801bad8:	4603      	mov	r3, r0
 801bada:	461a      	mov	r2, r3
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bae4:	009a      	lsls	r2, r3, #2
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801baea:	005b      	lsls	r3, r3, #1
 801baec:	f241 111c 	movw	r1, #4380	; 0x111c
 801baf0:	428b      	cmp	r3, r1
 801baf2:	bf38      	it	cc
 801baf4:	460b      	movcc	r3, r1
 801baf6:	429a      	cmp	r2, r3
 801baf8:	d204      	bcs.n	801bb04 <tcp_process+0x210>
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bafe:	009b      	lsls	r3, r3, #2
 801bb00:	b29b      	uxth	r3, r3
 801bb02:	e00d      	b.n	801bb20 <tcp_process+0x22c>
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bb08:	005b      	lsls	r3, r3, #1
 801bb0a:	f241 121c 	movw	r2, #4380	; 0x111c
 801bb0e:	4293      	cmp	r3, r2
 801bb10:	d904      	bls.n	801bb1c <tcp_process+0x228>
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bb16:	005b      	lsls	r3, r3, #1
 801bb18:	b29b      	uxth	r3, r3
 801bb1a:	e001      	b.n	801bb20 <tcp_process+0x22c>
 801bb1c:	f241 131c 	movw	r3, #4380	; 0x111c
 801bb20:	687a      	ldr	r2, [r7, #4]
 801bb22:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d106      	bne.n	801bb3e <tcp_process+0x24a>
 801bb30:	4b13      	ldr	r3, [pc, #76]	; (801bb80 <tcp_process+0x28c>)
 801bb32:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801bb36:	491c      	ldr	r1, [pc, #112]	; (801bba8 <tcp_process+0x2b4>)
 801bb38:	4813      	ldr	r0, [pc, #76]	; (801bb88 <tcp_process+0x294>)
 801bb3a:	f008 f921 	bl	8023d80 <iprintf>
        --pcb->snd_queuelen;
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bb44:	3b01      	subs	r3, #1
 801bb46:	b29a      	uxth	r2, r3
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb52:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801bb54:	69fb      	ldr	r3, [r7, #28]
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d12a      	bne.n	801bbb0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bb5e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801bb60:	69fb      	ldr	r3, [r7, #28]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d106      	bne.n	801bb74 <tcp_process+0x280>
 801bb66:	4b06      	ldr	r3, [pc, #24]	; (801bb80 <tcp_process+0x28c>)
 801bb68:	f44f 725d 	mov.w	r2, #884	; 0x374
 801bb6c:	490f      	ldr	r1, [pc, #60]	; (801bbac <tcp_process+0x2b8>)
 801bb6e:	4806      	ldr	r0, [pc, #24]	; (801bb88 <tcp_process+0x294>)
 801bb70:	f008 f906 	bl	8023d80 <iprintf>
          pcb->unsent = rseg->next;
 801bb74:	69fb      	ldr	r3, [r7, #28]
 801bb76:	681a      	ldr	r2, [r3, #0]
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	66da      	str	r2, [r3, #108]	; 0x6c
 801bb7c:	e01c      	b.n	801bbb8 <tcp_process+0x2c4>
 801bb7e:	bf00      	nop
 801bb80:	08027044 	.word	0x08027044
 801bb84:	0802727c 	.word	0x0802727c
 801bb88:	08027090 	.word	0x08027090
 801bb8c:	2000bfdc 	.word	0x2000bfdc
 801bb90:	2000bfd4 	.word	0x2000bfd4
 801bb94:	2000bfd0 	.word	0x2000bfd0
 801bb98:	08027298 	.word	0x08027298
 801bb9c:	2000bfdd 	.word	0x2000bfdd
 801bba0:	2000bf98 	.word	0x2000bf98
 801bba4:	2000bfc0 	.word	0x2000bfc0
 801bba8:	080272b8 	.word	0x080272b8
 801bbac:	080272d0 	.word	0x080272d0
        } else {
          pcb->unacked = rseg->next;
 801bbb0:	69fb      	ldr	r3, [r7, #28]
 801bbb2:	681a      	ldr	r2, [r3, #0]
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801bbb8:	69f8      	ldr	r0, [r7, #28]
 801bbba:	f7fe fc54 	bl	801a466 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d104      	bne.n	801bbd0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bbcc:	861a      	strh	r2, [r3, #48]	; 0x30
 801bbce:	e006      	b.n	801bbde <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	2200      	movs	r2, #0
 801bbd4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	2200      	movs	r2, #0
 801bbda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d00a      	beq.n	801bbfe <tcp_process+0x30a>
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbee:	687a      	ldr	r2, [r7, #4]
 801bbf0:	6910      	ldr	r0, [r2, #16]
 801bbf2:	2200      	movs	r2, #0
 801bbf4:	6879      	ldr	r1, [r7, #4]
 801bbf6:	4798      	blx	r3
 801bbf8:	4603      	mov	r3, r0
 801bbfa:	76bb      	strb	r3, [r7, #26]
 801bbfc:	e001      	b.n	801bc02 <tcp_process+0x30e>
 801bbfe:	2300      	movs	r3, #0
 801bc00:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801bc02:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bc06:	f113 0f0d 	cmn.w	r3, #13
 801bc0a:	d102      	bne.n	801bc12 <tcp_process+0x31e>
          return ERR_ABRT;
 801bc0c:	f06f 030c 	mvn.w	r3, #12
 801bc10:	e250      	b.n	801c0b4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	8b5b      	ldrh	r3, [r3, #26]
 801bc16:	f043 0302 	orr.w	r3, r3, #2
 801bc1a:	b29a      	uxth	r2, r3
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801bc20:	e23a      	b.n	801c098 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801bc22:	4b98      	ldr	r3, [pc, #608]	; (801be84 <tcp_process+0x590>)
 801bc24:	781b      	ldrb	r3, [r3, #0]
 801bc26:	f003 0310 	and.w	r3, r3, #16
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	f000 8234 	beq.w	801c098 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc30:	4b95      	ldr	r3, [pc, #596]	; (801be88 <tcp_process+0x594>)
 801bc32:	6819      	ldr	r1, [r3, #0]
 801bc34:	4b95      	ldr	r3, [pc, #596]	; (801be8c <tcp_process+0x598>)
 801bc36:	881b      	ldrh	r3, [r3, #0]
 801bc38:	461a      	mov	r2, r3
 801bc3a:	4b95      	ldr	r3, [pc, #596]	; (801be90 <tcp_process+0x59c>)
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bc40:	4b94      	ldr	r3, [pc, #592]	; (801be94 <tcp_process+0x5a0>)
 801bc42:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc44:	885b      	ldrh	r3, [r3, #2]
 801bc46:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bc48:	4a92      	ldr	r2, [pc, #584]	; (801be94 <tcp_process+0x5a0>)
 801bc4a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc4c:	8812      	ldrh	r2, [r2, #0]
 801bc4e:	b292      	uxth	r2, r2
 801bc50:	9202      	str	r2, [sp, #8]
 801bc52:	9301      	str	r3, [sp, #4]
 801bc54:	4b90      	ldr	r3, [pc, #576]	; (801be98 <tcp_process+0x5a4>)
 801bc56:	9300      	str	r3, [sp, #0]
 801bc58:	4b90      	ldr	r3, [pc, #576]	; (801be9c <tcp_process+0x5a8>)
 801bc5a:	4602      	mov	r2, r0
 801bc5c:	6878      	ldr	r0, [r7, #4]
 801bc5e:	f003 f8dd 	bl	801ee1c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bc68:	2b05      	cmp	r3, #5
 801bc6a:	f200 8215 	bhi.w	801c098 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	2200      	movs	r2, #0
 801bc72:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801bc74:	6878      	ldr	r0, [r7, #4]
 801bc76:	f002 fea7 	bl	801e9c8 <tcp_rexmit_rto>
      break;
 801bc7a:	e20d      	b.n	801c098 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801bc7c:	4b81      	ldr	r3, [pc, #516]	; (801be84 <tcp_process+0x590>)
 801bc7e:	781b      	ldrb	r3, [r3, #0]
 801bc80:	f003 0310 	and.w	r3, r3, #16
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	f000 80a1 	beq.w	801bdcc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bc8a:	4b7f      	ldr	r3, [pc, #508]	; (801be88 <tcp_process+0x594>)
 801bc8c:	681a      	ldr	r2, [r3, #0]
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc92:	1ad3      	subs	r3, r2, r3
 801bc94:	3b01      	subs	r3, #1
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	db7e      	blt.n	801bd98 <tcp_process+0x4a4>
 801bc9a:	4b7b      	ldr	r3, [pc, #492]	; (801be88 <tcp_process+0x594>)
 801bc9c:	681a      	ldr	r2, [r3, #0]
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bca2:	1ad3      	subs	r3, r2, r3
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	dc77      	bgt.n	801bd98 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	2204      	movs	r2, #4
 801bcac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d102      	bne.n	801bcbc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801bcb6:	23fa      	movs	r3, #250	; 0xfa
 801bcb8:	76bb      	strb	r3, [r7, #26]
 801bcba:	e01d      	b.n	801bcf8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bcc0:	699b      	ldr	r3, [r3, #24]
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d106      	bne.n	801bcd4 <tcp_process+0x3e0>
 801bcc6:	4b76      	ldr	r3, [pc, #472]	; (801bea0 <tcp_process+0x5ac>)
 801bcc8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801bccc:	4975      	ldr	r1, [pc, #468]	; (801bea4 <tcp_process+0x5b0>)
 801bcce:	4876      	ldr	r0, [pc, #472]	; (801bea8 <tcp_process+0x5b4>)
 801bcd0:	f008 f856 	bl	8023d80 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bcd8:	699b      	ldr	r3, [r3, #24]
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d00a      	beq.n	801bcf4 <tcp_process+0x400>
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bce2:	699b      	ldr	r3, [r3, #24]
 801bce4:	687a      	ldr	r2, [r7, #4]
 801bce6:	6910      	ldr	r0, [r2, #16]
 801bce8:	2200      	movs	r2, #0
 801bcea:	6879      	ldr	r1, [r7, #4]
 801bcec:	4798      	blx	r3
 801bcee:	4603      	mov	r3, r0
 801bcf0:	76bb      	strb	r3, [r7, #26]
 801bcf2:	e001      	b.n	801bcf8 <tcp_process+0x404>
 801bcf4:	23f0      	movs	r3, #240	; 0xf0
 801bcf6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801bcf8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	d00a      	beq.n	801bd16 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801bd00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bd04:	f113 0f0d 	cmn.w	r3, #13
 801bd08:	d002      	beq.n	801bd10 <tcp_process+0x41c>
              tcp_abort(pcb);
 801bd0a:	6878      	ldr	r0, [r7, #4]
 801bd0c:	f7fd fc00 	bl	8019510 <tcp_abort>
            }
            return ERR_ABRT;
 801bd10:	f06f 030c 	mvn.w	r3, #12
 801bd14:	e1ce      	b.n	801c0b4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801bd16:	6878      	ldr	r0, [r7, #4]
 801bd18:	f000 fae0 	bl	801c2dc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801bd1c:	4b63      	ldr	r3, [pc, #396]	; (801beac <tcp_process+0x5b8>)
 801bd1e:	881b      	ldrh	r3, [r3, #0]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d005      	beq.n	801bd30 <tcp_process+0x43c>
            recv_acked--;
 801bd24:	4b61      	ldr	r3, [pc, #388]	; (801beac <tcp_process+0x5b8>)
 801bd26:	881b      	ldrh	r3, [r3, #0]
 801bd28:	3b01      	subs	r3, #1
 801bd2a:	b29a      	uxth	r2, r3
 801bd2c:	4b5f      	ldr	r3, [pc, #380]	; (801beac <tcp_process+0x5b8>)
 801bd2e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bd34:	009a      	lsls	r2, r3, #2
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bd3a:	005b      	lsls	r3, r3, #1
 801bd3c:	f241 111c 	movw	r1, #4380	; 0x111c
 801bd40:	428b      	cmp	r3, r1
 801bd42:	bf38      	it	cc
 801bd44:	460b      	movcc	r3, r1
 801bd46:	429a      	cmp	r2, r3
 801bd48:	d204      	bcs.n	801bd54 <tcp_process+0x460>
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bd4e:	009b      	lsls	r3, r3, #2
 801bd50:	b29b      	uxth	r3, r3
 801bd52:	e00d      	b.n	801bd70 <tcp_process+0x47c>
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bd58:	005b      	lsls	r3, r3, #1
 801bd5a:	f241 121c 	movw	r2, #4380	; 0x111c
 801bd5e:	4293      	cmp	r3, r2
 801bd60:	d904      	bls.n	801bd6c <tcp_process+0x478>
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bd66:	005b      	lsls	r3, r3, #1
 801bd68:	b29b      	uxth	r3, r3
 801bd6a:	e001      	b.n	801bd70 <tcp_process+0x47c>
 801bd6c:	f241 131c 	movw	r3, #4380	; 0x111c
 801bd70:	687a      	ldr	r2, [r7, #4]
 801bd72:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801bd76:	4b4e      	ldr	r3, [pc, #312]	; (801beb0 <tcp_process+0x5bc>)
 801bd78:	781b      	ldrb	r3, [r3, #0]
 801bd7a:	f003 0320 	and.w	r3, r3, #32
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d037      	beq.n	801bdf2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	8b5b      	ldrh	r3, [r3, #26]
 801bd86:	f043 0302 	orr.w	r3, r3, #2
 801bd8a:	b29a      	uxth	r2, r3
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	2207      	movs	r2, #7
 801bd94:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801bd96:	e02c      	b.n	801bdf2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bd98:	4b3b      	ldr	r3, [pc, #236]	; (801be88 <tcp_process+0x594>)
 801bd9a:	6819      	ldr	r1, [r3, #0]
 801bd9c:	4b3b      	ldr	r3, [pc, #236]	; (801be8c <tcp_process+0x598>)
 801bd9e:	881b      	ldrh	r3, [r3, #0]
 801bda0:	461a      	mov	r2, r3
 801bda2:	4b3b      	ldr	r3, [pc, #236]	; (801be90 <tcp_process+0x59c>)
 801bda4:	681b      	ldr	r3, [r3, #0]
 801bda6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bda8:	4b3a      	ldr	r3, [pc, #232]	; (801be94 <tcp_process+0x5a0>)
 801bdaa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bdac:	885b      	ldrh	r3, [r3, #2]
 801bdae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bdb0:	4a38      	ldr	r2, [pc, #224]	; (801be94 <tcp_process+0x5a0>)
 801bdb2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bdb4:	8812      	ldrh	r2, [r2, #0]
 801bdb6:	b292      	uxth	r2, r2
 801bdb8:	9202      	str	r2, [sp, #8]
 801bdba:	9301      	str	r3, [sp, #4]
 801bdbc:	4b36      	ldr	r3, [pc, #216]	; (801be98 <tcp_process+0x5a4>)
 801bdbe:	9300      	str	r3, [sp, #0]
 801bdc0:	4b36      	ldr	r3, [pc, #216]	; (801be9c <tcp_process+0x5a8>)
 801bdc2:	4602      	mov	r2, r0
 801bdc4:	6878      	ldr	r0, [r7, #4]
 801bdc6:	f003 f829 	bl	801ee1c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801bdca:	e167      	b.n	801c09c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801bdcc:	4b2d      	ldr	r3, [pc, #180]	; (801be84 <tcp_process+0x590>)
 801bdce:	781b      	ldrb	r3, [r3, #0]
 801bdd0:	f003 0302 	and.w	r3, r3, #2
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	f000 8161 	beq.w	801c09c <tcp_process+0x7a8>
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bdde:	1e5a      	subs	r2, r3, #1
 801bde0:	4b2b      	ldr	r3, [pc, #172]	; (801be90 <tcp_process+0x59c>)
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	429a      	cmp	r2, r3
 801bde6:	f040 8159 	bne.w	801c09c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801bdea:	6878      	ldr	r0, [r7, #4]
 801bdec:	f002 fe0e 	bl	801ea0c <tcp_rexmit>
      break;
 801bdf0:	e154      	b.n	801c09c <tcp_process+0x7a8>
 801bdf2:	e153      	b.n	801c09c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801bdf4:	6878      	ldr	r0, [r7, #4]
 801bdf6:	f000 fa71 	bl	801c2dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801bdfa:	4b2d      	ldr	r3, [pc, #180]	; (801beb0 <tcp_process+0x5bc>)
 801bdfc:	781b      	ldrb	r3, [r3, #0]
 801bdfe:	f003 0320 	and.w	r3, r3, #32
 801be02:	2b00      	cmp	r3, #0
 801be04:	f000 814c 	beq.w	801c0a0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	8b5b      	ldrh	r3, [r3, #26]
 801be0c:	f043 0302 	orr.w	r3, r3, #2
 801be10:	b29a      	uxth	r2, r3
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	2207      	movs	r2, #7
 801be1a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801be1c:	e140      	b.n	801c0a0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801be1e:	6878      	ldr	r0, [r7, #4]
 801be20:	f000 fa5c 	bl	801c2dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801be24:	4b22      	ldr	r3, [pc, #136]	; (801beb0 <tcp_process+0x5bc>)
 801be26:	781b      	ldrb	r3, [r3, #0]
 801be28:	f003 0320 	and.w	r3, r3, #32
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d071      	beq.n	801bf14 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801be30:	4b14      	ldr	r3, [pc, #80]	; (801be84 <tcp_process+0x590>)
 801be32:	781b      	ldrb	r3, [r3, #0]
 801be34:	f003 0310 	and.w	r3, r3, #16
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d060      	beq.n	801befe <tcp_process+0x60a>
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801be40:	4b11      	ldr	r3, [pc, #68]	; (801be88 <tcp_process+0x594>)
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	429a      	cmp	r2, r3
 801be46:	d15a      	bne.n	801befe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d156      	bne.n	801befe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	8b5b      	ldrh	r3, [r3, #26]
 801be54:	f043 0302 	orr.w	r3, r3, #2
 801be58:	b29a      	uxth	r2, r3
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801be5e:	6878      	ldr	r0, [r7, #4]
 801be60:	f7fe fdbc 	bl	801a9dc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801be64:	4b13      	ldr	r3, [pc, #76]	; (801beb4 <tcp_process+0x5c0>)
 801be66:	681b      	ldr	r3, [r3, #0]
 801be68:	687a      	ldr	r2, [r7, #4]
 801be6a:	429a      	cmp	r2, r3
 801be6c:	d105      	bne.n	801be7a <tcp_process+0x586>
 801be6e:	4b11      	ldr	r3, [pc, #68]	; (801beb4 <tcp_process+0x5c0>)
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	68db      	ldr	r3, [r3, #12]
 801be74:	4a0f      	ldr	r2, [pc, #60]	; (801beb4 <tcp_process+0x5c0>)
 801be76:	6013      	str	r3, [r2, #0]
 801be78:	e02e      	b.n	801bed8 <tcp_process+0x5e4>
 801be7a:	4b0e      	ldr	r3, [pc, #56]	; (801beb4 <tcp_process+0x5c0>)
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	617b      	str	r3, [r7, #20]
 801be80:	e027      	b.n	801bed2 <tcp_process+0x5de>
 801be82:	bf00      	nop
 801be84:	2000bfdc 	.word	0x2000bfdc
 801be88:	2000bfd4 	.word	0x2000bfd4
 801be8c:	2000bfda 	.word	0x2000bfda
 801be90:	2000bfd0 	.word	0x2000bfd0
 801be94:	2000bfc0 	.word	0x2000bfc0
 801be98:	20006694 	.word	0x20006694
 801be9c:	20006698 	.word	0x20006698
 801bea0:	08027044 	.word	0x08027044
 801bea4:	080272e4 	.word	0x080272e4
 801bea8:	08027090 	.word	0x08027090
 801beac:	2000bfd8 	.word	0x2000bfd8
 801beb0:	2000bfdd 	.word	0x2000bfdd
 801beb4:	2000bfa4 	.word	0x2000bfa4
 801beb8:	697b      	ldr	r3, [r7, #20]
 801beba:	68db      	ldr	r3, [r3, #12]
 801bebc:	687a      	ldr	r2, [r7, #4]
 801bebe:	429a      	cmp	r2, r3
 801bec0:	d104      	bne.n	801becc <tcp_process+0x5d8>
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	68da      	ldr	r2, [r3, #12]
 801bec6:	697b      	ldr	r3, [r7, #20]
 801bec8:	60da      	str	r2, [r3, #12]
 801beca:	e005      	b.n	801bed8 <tcp_process+0x5e4>
 801becc:	697b      	ldr	r3, [r7, #20]
 801bece:	68db      	ldr	r3, [r3, #12]
 801bed0:	617b      	str	r3, [r7, #20]
 801bed2:	697b      	ldr	r3, [r7, #20]
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d1ef      	bne.n	801beb8 <tcp_process+0x5c4>
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	2200      	movs	r2, #0
 801bedc:	60da      	str	r2, [r3, #12]
 801bede:	4b77      	ldr	r3, [pc, #476]	; (801c0bc <tcp_process+0x7c8>)
 801bee0:	2201      	movs	r2, #1
 801bee2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	220a      	movs	r2, #10
 801bee8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801beea:	4b75      	ldr	r3, [pc, #468]	; (801c0c0 <tcp_process+0x7cc>)
 801beec:	681a      	ldr	r2, [r3, #0]
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	60da      	str	r2, [r3, #12]
 801bef2:	4a73      	ldr	r2, [pc, #460]	; (801c0c0 <tcp_process+0x7cc>)
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	6013      	str	r3, [r2, #0]
 801bef8:	f003 f952 	bl	801f1a0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801befc:	e0d2      	b.n	801c0a4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	8b5b      	ldrh	r3, [r3, #26]
 801bf02:	f043 0302 	orr.w	r3, r3, #2
 801bf06:	b29a      	uxth	r2, r3
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	2208      	movs	r2, #8
 801bf10:	751a      	strb	r2, [r3, #20]
      break;
 801bf12:	e0c7      	b.n	801c0a4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bf14:	4b6b      	ldr	r3, [pc, #428]	; (801c0c4 <tcp_process+0x7d0>)
 801bf16:	781b      	ldrb	r3, [r3, #0]
 801bf18:	f003 0310 	and.w	r3, r3, #16
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	f000 80c1 	beq.w	801c0a4 <tcp_process+0x7b0>
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bf26:	4b68      	ldr	r3, [pc, #416]	; (801c0c8 <tcp_process+0x7d4>)
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	429a      	cmp	r2, r3
 801bf2c:	f040 80ba 	bne.w	801c0a4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	f040 80b5 	bne.w	801c0a4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	2206      	movs	r2, #6
 801bf3e:	751a      	strb	r2, [r3, #20]
      break;
 801bf40:	e0b0      	b.n	801c0a4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801bf42:	6878      	ldr	r0, [r7, #4]
 801bf44:	f000 f9ca 	bl	801c2dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801bf48:	4b60      	ldr	r3, [pc, #384]	; (801c0cc <tcp_process+0x7d8>)
 801bf4a:	781b      	ldrb	r3, [r3, #0]
 801bf4c:	f003 0320 	and.w	r3, r3, #32
 801bf50:	2b00      	cmp	r3, #0
 801bf52:	f000 80a9 	beq.w	801c0a8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	8b5b      	ldrh	r3, [r3, #26]
 801bf5a:	f043 0302 	orr.w	r3, r3, #2
 801bf5e:	b29a      	uxth	r2, r3
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801bf64:	6878      	ldr	r0, [r7, #4]
 801bf66:	f7fe fd39 	bl	801a9dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801bf6a:	4b59      	ldr	r3, [pc, #356]	; (801c0d0 <tcp_process+0x7dc>)
 801bf6c:	681b      	ldr	r3, [r3, #0]
 801bf6e:	687a      	ldr	r2, [r7, #4]
 801bf70:	429a      	cmp	r2, r3
 801bf72:	d105      	bne.n	801bf80 <tcp_process+0x68c>
 801bf74:	4b56      	ldr	r3, [pc, #344]	; (801c0d0 <tcp_process+0x7dc>)
 801bf76:	681b      	ldr	r3, [r3, #0]
 801bf78:	68db      	ldr	r3, [r3, #12]
 801bf7a:	4a55      	ldr	r2, [pc, #340]	; (801c0d0 <tcp_process+0x7dc>)
 801bf7c:	6013      	str	r3, [r2, #0]
 801bf7e:	e013      	b.n	801bfa8 <tcp_process+0x6b4>
 801bf80:	4b53      	ldr	r3, [pc, #332]	; (801c0d0 <tcp_process+0x7dc>)
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	613b      	str	r3, [r7, #16]
 801bf86:	e00c      	b.n	801bfa2 <tcp_process+0x6ae>
 801bf88:	693b      	ldr	r3, [r7, #16]
 801bf8a:	68db      	ldr	r3, [r3, #12]
 801bf8c:	687a      	ldr	r2, [r7, #4]
 801bf8e:	429a      	cmp	r2, r3
 801bf90:	d104      	bne.n	801bf9c <tcp_process+0x6a8>
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	68da      	ldr	r2, [r3, #12]
 801bf96:	693b      	ldr	r3, [r7, #16]
 801bf98:	60da      	str	r2, [r3, #12]
 801bf9a:	e005      	b.n	801bfa8 <tcp_process+0x6b4>
 801bf9c:	693b      	ldr	r3, [r7, #16]
 801bf9e:	68db      	ldr	r3, [r3, #12]
 801bfa0:	613b      	str	r3, [r7, #16]
 801bfa2:	693b      	ldr	r3, [r7, #16]
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	d1ef      	bne.n	801bf88 <tcp_process+0x694>
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	2200      	movs	r2, #0
 801bfac:	60da      	str	r2, [r3, #12]
 801bfae:	4b43      	ldr	r3, [pc, #268]	; (801c0bc <tcp_process+0x7c8>)
 801bfb0:	2201      	movs	r2, #1
 801bfb2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801bfb4:	687b      	ldr	r3, [r7, #4]
 801bfb6:	220a      	movs	r2, #10
 801bfb8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801bfba:	4b41      	ldr	r3, [pc, #260]	; (801c0c0 <tcp_process+0x7cc>)
 801bfbc:	681a      	ldr	r2, [r3, #0]
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	60da      	str	r2, [r3, #12]
 801bfc2:	4a3f      	ldr	r2, [pc, #252]	; (801c0c0 <tcp_process+0x7cc>)
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	6013      	str	r3, [r2, #0]
 801bfc8:	f003 f8ea 	bl	801f1a0 <tcp_timer_needed>
      }
      break;
 801bfcc:	e06c      	b.n	801c0a8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801bfce:	6878      	ldr	r0, [r7, #4]
 801bfd0:	f000 f984 	bl	801c2dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801bfd4:	4b3b      	ldr	r3, [pc, #236]	; (801c0c4 <tcp_process+0x7d0>)
 801bfd6:	781b      	ldrb	r3, [r3, #0]
 801bfd8:	f003 0310 	and.w	r3, r3, #16
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d065      	beq.n	801c0ac <tcp_process+0x7b8>
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bfe4:	4b38      	ldr	r3, [pc, #224]	; (801c0c8 <tcp_process+0x7d4>)
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	429a      	cmp	r2, r3
 801bfea:	d15f      	bne.n	801c0ac <tcp_process+0x7b8>
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d15b      	bne.n	801c0ac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801bff4:	6878      	ldr	r0, [r7, #4]
 801bff6:	f7fe fcf1 	bl	801a9dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801bffa:	4b35      	ldr	r3, [pc, #212]	; (801c0d0 <tcp_process+0x7dc>)
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	687a      	ldr	r2, [r7, #4]
 801c000:	429a      	cmp	r2, r3
 801c002:	d105      	bne.n	801c010 <tcp_process+0x71c>
 801c004:	4b32      	ldr	r3, [pc, #200]	; (801c0d0 <tcp_process+0x7dc>)
 801c006:	681b      	ldr	r3, [r3, #0]
 801c008:	68db      	ldr	r3, [r3, #12]
 801c00a:	4a31      	ldr	r2, [pc, #196]	; (801c0d0 <tcp_process+0x7dc>)
 801c00c:	6013      	str	r3, [r2, #0]
 801c00e:	e013      	b.n	801c038 <tcp_process+0x744>
 801c010:	4b2f      	ldr	r3, [pc, #188]	; (801c0d0 <tcp_process+0x7dc>)
 801c012:	681b      	ldr	r3, [r3, #0]
 801c014:	60fb      	str	r3, [r7, #12]
 801c016:	e00c      	b.n	801c032 <tcp_process+0x73e>
 801c018:	68fb      	ldr	r3, [r7, #12]
 801c01a:	68db      	ldr	r3, [r3, #12]
 801c01c:	687a      	ldr	r2, [r7, #4]
 801c01e:	429a      	cmp	r2, r3
 801c020:	d104      	bne.n	801c02c <tcp_process+0x738>
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	68da      	ldr	r2, [r3, #12]
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	60da      	str	r2, [r3, #12]
 801c02a:	e005      	b.n	801c038 <tcp_process+0x744>
 801c02c:	68fb      	ldr	r3, [r7, #12]
 801c02e:	68db      	ldr	r3, [r3, #12]
 801c030:	60fb      	str	r3, [r7, #12]
 801c032:	68fb      	ldr	r3, [r7, #12]
 801c034:	2b00      	cmp	r3, #0
 801c036:	d1ef      	bne.n	801c018 <tcp_process+0x724>
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	2200      	movs	r2, #0
 801c03c:	60da      	str	r2, [r3, #12]
 801c03e:	4b1f      	ldr	r3, [pc, #124]	; (801c0bc <tcp_process+0x7c8>)
 801c040:	2201      	movs	r2, #1
 801c042:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	220a      	movs	r2, #10
 801c048:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c04a:	4b1d      	ldr	r3, [pc, #116]	; (801c0c0 <tcp_process+0x7cc>)
 801c04c:	681a      	ldr	r2, [r3, #0]
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	60da      	str	r2, [r3, #12]
 801c052:	4a1b      	ldr	r2, [pc, #108]	; (801c0c0 <tcp_process+0x7cc>)
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	6013      	str	r3, [r2, #0]
 801c058:	f003 f8a2 	bl	801f1a0 <tcp_timer_needed>
      }
      break;
 801c05c:	e026      	b.n	801c0ac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801c05e:	6878      	ldr	r0, [r7, #4]
 801c060:	f000 f93c 	bl	801c2dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c064:	4b17      	ldr	r3, [pc, #92]	; (801c0c4 <tcp_process+0x7d0>)
 801c066:	781b      	ldrb	r3, [r3, #0]
 801c068:	f003 0310 	and.w	r3, r3, #16
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d01f      	beq.n	801c0b0 <tcp_process+0x7bc>
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c074:	4b14      	ldr	r3, [pc, #80]	; (801c0c8 <tcp_process+0x7d4>)
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	429a      	cmp	r2, r3
 801c07a:	d119      	bne.n	801c0b0 <tcp_process+0x7bc>
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c080:	2b00      	cmp	r3, #0
 801c082:	d115      	bne.n	801c0b0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801c084:	4b11      	ldr	r3, [pc, #68]	; (801c0cc <tcp_process+0x7d8>)
 801c086:	781b      	ldrb	r3, [r3, #0]
 801c088:	f043 0310 	orr.w	r3, r3, #16
 801c08c:	b2da      	uxtb	r2, r3
 801c08e:	4b0f      	ldr	r3, [pc, #60]	; (801c0cc <tcp_process+0x7d8>)
 801c090:	701a      	strb	r2, [r3, #0]
      }
      break;
 801c092:	e00d      	b.n	801c0b0 <tcp_process+0x7bc>
    default:
      break;
 801c094:	bf00      	nop
 801c096:	e00c      	b.n	801c0b2 <tcp_process+0x7be>
      break;
 801c098:	bf00      	nop
 801c09a:	e00a      	b.n	801c0b2 <tcp_process+0x7be>
      break;
 801c09c:	bf00      	nop
 801c09e:	e008      	b.n	801c0b2 <tcp_process+0x7be>
      break;
 801c0a0:	bf00      	nop
 801c0a2:	e006      	b.n	801c0b2 <tcp_process+0x7be>
      break;
 801c0a4:	bf00      	nop
 801c0a6:	e004      	b.n	801c0b2 <tcp_process+0x7be>
      break;
 801c0a8:	bf00      	nop
 801c0aa:	e002      	b.n	801c0b2 <tcp_process+0x7be>
      break;
 801c0ac:	bf00      	nop
 801c0ae:	e000      	b.n	801c0b2 <tcp_process+0x7be>
      break;
 801c0b0:	bf00      	nop
  }
  return ERR_OK;
 801c0b2:	2300      	movs	r3, #0
}
 801c0b4:	4618      	mov	r0, r3
 801c0b6:	3724      	adds	r7, #36	; 0x24
 801c0b8:	46bd      	mov	sp, r7
 801c0ba:	bd90      	pop	{r4, r7, pc}
 801c0bc:	2000bfac 	.word	0x2000bfac
 801c0c0:	2000bfa8 	.word	0x2000bfa8
 801c0c4:	2000bfdc 	.word	0x2000bfdc
 801c0c8:	2000bfd4 	.word	0x2000bfd4
 801c0cc:	2000bfdd 	.word	0x2000bfdd
 801c0d0:	2000bfa4 	.word	0x2000bfa4

0801c0d4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801c0d4:	b590      	push	{r4, r7, lr}
 801c0d6:	b085      	sub	sp, #20
 801c0d8:	af00      	add	r7, sp, #0
 801c0da:	6078      	str	r0, [r7, #4]
 801c0dc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d106      	bne.n	801c0f2 <tcp_oos_insert_segment+0x1e>
 801c0e4:	4b3b      	ldr	r3, [pc, #236]	; (801c1d4 <tcp_oos_insert_segment+0x100>)
 801c0e6:	f240 421f 	movw	r2, #1055	; 0x41f
 801c0ea:	493b      	ldr	r1, [pc, #236]	; (801c1d8 <tcp_oos_insert_segment+0x104>)
 801c0ec:	483b      	ldr	r0, [pc, #236]	; (801c1dc <tcp_oos_insert_segment+0x108>)
 801c0ee:	f007 fe47 	bl	8023d80 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	68db      	ldr	r3, [r3, #12]
 801c0f6:	899b      	ldrh	r3, [r3, #12]
 801c0f8:	b29b      	uxth	r3, r3
 801c0fa:	4618      	mov	r0, r3
 801c0fc:	f7fb f816 	bl	801712c <lwip_htons>
 801c100:	4603      	mov	r3, r0
 801c102:	b2db      	uxtb	r3, r3
 801c104:	f003 0301 	and.w	r3, r3, #1
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d028      	beq.n	801c15e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801c10c:	6838      	ldr	r0, [r7, #0]
 801c10e:	f7fe f995 	bl	801a43c <tcp_segs_free>
    next = NULL;
 801c112:	2300      	movs	r3, #0
 801c114:	603b      	str	r3, [r7, #0]
 801c116:	e056      	b.n	801c1c6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c118:	683b      	ldr	r3, [r7, #0]
 801c11a:	68db      	ldr	r3, [r3, #12]
 801c11c:	899b      	ldrh	r3, [r3, #12]
 801c11e:	b29b      	uxth	r3, r3
 801c120:	4618      	mov	r0, r3
 801c122:	f7fb f803 	bl	801712c <lwip_htons>
 801c126:	4603      	mov	r3, r0
 801c128:	b2db      	uxtb	r3, r3
 801c12a:	f003 0301 	and.w	r3, r3, #1
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d00d      	beq.n	801c14e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	68db      	ldr	r3, [r3, #12]
 801c136:	899b      	ldrh	r3, [r3, #12]
 801c138:	b29c      	uxth	r4, r3
 801c13a:	2001      	movs	r0, #1
 801c13c:	f7fa fff6 	bl	801712c <lwip_htons>
 801c140:	4603      	mov	r3, r0
 801c142:	461a      	mov	r2, r3
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	68db      	ldr	r3, [r3, #12]
 801c148:	4322      	orrs	r2, r4
 801c14a:	b292      	uxth	r2, r2
 801c14c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801c14e:	683b      	ldr	r3, [r7, #0]
 801c150:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801c152:	683b      	ldr	r3, [r7, #0]
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801c158:	68f8      	ldr	r0, [r7, #12]
 801c15a:	f7fe f984 	bl	801a466 <tcp_seg_free>
    while (next &&
 801c15e:	683b      	ldr	r3, [r7, #0]
 801c160:	2b00      	cmp	r3, #0
 801c162:	d00e      	beq.n	801c182 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	891b      	ldrh	r3, [r3, #8]
 801c168:	461a      	mov	r2, r3
 801c16a:	4b1d      	ldr	r3, [pc, #116]	; (801c1e0 <tcp_oos_insert_segment+0x10c>)
 801c16c:	681b      	ldr	r3, [r3, #0]
 801c16e:	441a      	add	r2, r3
 801c170:	683b      	ldr	r3, [r7, #0]
 801c172:	68db      	ldr	r3, [r3, #12]
 801c174:	685b      	ldr	r3, [r3, #4]
 801c176:	6839      	ldr	r1, [r7, #0]
 801c178:	8909      	ldrh	r1, [r1, #8]
 801c17a:	440b      	add	r3, r1
 801c17c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801c17e:	2b00      	cmp	r3, #0
 801c180:	daca      	bge.n	801c118 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801c182:	683b      	ldr	r3, [r7, #0]
 801c184:	2b00      	cmp	r3, #0
 801c186:	d01e      	beq.n	801c1c6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	891b      	ldrh	r3, [r3, #8]
 801c18c:	461a      	mov	r2, r3
 801c18e:	4b14      	ldr	r3, [pc, #80]	; (801c1e0 <tcp_oos_insert_segment+0x10c>)
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	441a      	add	r2, r3
 801c194:	683b      	ldr	r3, [r7, #0]
 801c196:	68db      	ldr	r3, [r3, #12]
 801c198:	685b      	ldr	r3, [r3, #4]
 801c19a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	dd12      	ble.n	801c1c6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c1a0:	683b      	ldr	r3, [r7, #0]
 801c1a2:	68db      	ldr	r3, [r3, #12]
 801c1a4:	685b      	ldr	r3, [r3, #4]
 801c1a6:	b29a      	uxth	r2, r3
 801c1a8:	4b0d      	ldr	r3, [pc, #52]	; (801c1e0 <tcp_oos_insert_segment+0x10c>)
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	b29b      	uxth	r3, r3
 801c1ae:	1ad3      	subs	r3, r2, r3
 801c1b0:	b29a      	uxth	r2, r3
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	685a      	ldr	r2, [r3, #4]
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	891b      	ldrh	r3, [r3, #8]
 801c1be:	4619      	mov	r1, r3
 801c1c0:	4610      	mov	r0, r2
 801c1c2:	f7fc fa1f 	bl	8018604 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	683a      	ldr	r2, [r7, #0]
 801c1ca:	601a      	str	r2, [r3, #0]
}
 801c1cc:	bf00      	nop
 801c1ce:	3714      	adds	r7, #20
 801c1d0:	46bd      	mov	sp, r7
 801c1d2:	bd90      	pop	{r4, r7, pc}
 801c1d4:	08027044 	.word	0x08027044
 801c1d8:	08027304 	.word	0x08027304
 801c1dc:	08027090 	.word	0x08027090
 801c1e0:	2000bfd0 	.word	0x2000bfd0

0801c1e4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801c1e4:	b5b0      	push	{r4, r5, r7, lr}
 801c1e6:	b086      	sub	sp, #24
 801c1e8:	af00      	add	r7, sp, #0
 801c1ea:	60f8      	str	r0, [r7, #12]
 801c1ec:	60b9      	str	r1, [r7, #8]
 801c1ee:	607a      	str	r2, [r7, #4]
 801c1f0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801c1f2:	e03e      	b.n	801c272 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801c1f4:	68bb      	ldr	r3, [r7, #8]
 801c1f6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801c1f8:	68bb      	ldr	r3, [r7, #8]
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801c1fe:	697b      	ldr	r3, [r7, #20]
 801c200:	685b      	ldr	r3, [r3, #4]
 801c202:	4618      	mov	r0, r3
 801c204:	f7fc fc12 	bl	8018a2c <pbuf_clen>
 801c208:	4603      	mov	r3, r0
 801c20a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c20c:	68fb      	ldr	r3, [r7, #12]
 801c20e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c212:	8a7a      	ldrh	r2, [r7, #18]
 801c214:	429a      	cmp	r2, r3
 801c216:	d906      	bls.n	801c226 <tcp_free_acked_segments+0x42>
 801c218:	4b2a      	ldr	r3, [pc, #168]	; (801c2c4 <tcp_free_acked_segments+0xe0>)
 801c21a:	f240 4257 	movw	r2, #1111	; 0x457
 801c21e:	492a      	ldr	r1, [pc, #168]	; (801c2c8 <tcp_free_acked_segments+0xe4>)
 801c220:	482a      	ldr	r0, [pc, #168]	; (801c2cc <tcp_free_acked_segments+0xe8>)
 801c222:	f007 fdad 	bl	8023d80 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c226:	68fb      	ldr	r3, [r7, #12]
 801c228:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801c22c:	8a7b      	ldrh	r3, [r7, #18]
 801c22e:	1ad3      	subs	r3, r2, r3
 801c230:	b29a      	uxth	r2, r3
 801c232:	68fb      	ldr	r3, [r7, #12]
 801c234:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c238:	697b      	ldr	r3, [r7, #20]
 801c23a:	891a      	ldrh	r2, [r3, #8]
 801c23c:	4b24      	ldr	r3, [pc, #144]	; (801c2d0 <tcp_free_acked_segments+0xec>)
 801c23e:	881b      	ldrh	r3, [r3, #0]
 801c240:	4413      	add	r3, r2
 801c242:	b29a      	uxth	r2, r3
 801c244:	4b22      	ldr	r3, [pc, #136]	; (801c2d0 <tcp_free_acked_segments+0xec>)
 801c246:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801c248:	6978      	ldr	r0, [r7, #20]
 801c24a:	f7fe f90c 	bl	801a466 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801c24e:	68fb      	ldr	r3, [r7, #12]
 801c250:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c254:	2b00      	cmp	r3, #0
 801c256:	d00c      	beq.n	801c272 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801c258:	68bb      	ldr	r3, [r7, #8]
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d109      	bne.n	801c272 <tcp_free_acked_segments+0x8e>
 801c25e:	683b      	ldr	r3, [r7, #0]
 801c260:	2b00      	cmp	r3, #0
 801c262:	d106      	bne.n	801c272 <tcp_free_acked_segments+0x8e>
 801c264:	4b17      	ldr	r3, [pc, #92]	; (801c2c4 <tcp_free_acked_segments+0xe0>)
 801c266:	f240 4261 	movw	r2, #1121	; 0x461
 801c26a:	491a      	ldr	r1, [pc, #104]	; (801c2d4 <tcp_free_acked_segments+0xf0>)
 801c26c:	4817      	ldr	r0, [pc, #92]	; (801c2cc <tcp_free_acked_segments+0xe8>)
 801c26e:	f007 fd87 	bl	8023d80 <iprintf>
  while (seg_list != NULL &&
 801c272:	68bb      	ldr	r3, [r7, #8]
 801c274:	2b00      	cmp	r3, #0
 801c276:	d020      	beq.n	801c2ba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801c278:	68bb      	ldr	r3, [r7, #8]
 801c27a:	68db      	ldr	r3, [r3, #12]
 801c27c:	685b      	ldr	r3, [r3, #4]
 801c27e:	4618      	mov	r0, r3
 801c280:	f7fa ff69 	bl	8017156 <lwip_htonl>
 801c284:	4604      	mov	r4, r0
 801c286:	68bb      	ldr	r3, [r7, #8]
 801c288:	891b      	ldrh	r3, [r3, #8]
 801c28a:	461d      	mov	r5, r3
 801c28c:	68bb      	ldr	r3, [r7, #8]
 801c28e:	68db      	ldr	r3, [r3, #12]
 801c290:	899b      	ldrh	r3, [r3, #12]
 801c292:	b29b      	uxth	r3, r3
 801c294:	4618      	mov	r0, r3
 801c296:	f7fa ff49 	bl	801712c <lwip_htons>
 801c29a:	4603      	mov	r3, r0
 801c29c:	b2db      	uxtb	r3, r3
 801c29e:	f003 0303 	and.w	r3, r3, #3
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d001      	beq.n	801c2aa <tcp_free_acked_segments+0xc6>
 801c2a6:	2301      	movs	r3, #1
 801c2a8:	e000      	b.n	801c2ac <tcp_free_acked_segments+0xc8>
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	442b      	add	r3, r5
 801c2ae:	18e2      	adds	r2, r4, r3
 801c2b0:	4b09      	ldr	r3, [pc, #36]	; (801c2d8 <tcp_free_acked_segments+0xf4>)
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	dd9c      	ble.n	801c1f4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801c2ba:	68bb      	ldr	r3, [r7, #8]
}
 801c2bc:	4618      	mov	r0, r3
 801c2be:	3718      	adds	r7, #24
 801c2c0:	46bd      	mov	sp, r7
 801c2c2:	bdb0      	pop	{r4, r5, r7, pc}
 801c2c4:	08027044 	.word	0x08027044
 801c2c8:	0802732c 	.word	0x0802732c
 801c2cc:	08027090 	.word	0x08027090
 801c2d0:	2000bfd8 	.word	0x2000bfd8
 801c2d4:	08027354 	.word	0x08027354
 801c2d8:	2000bfd4 	.word	0x2000bfd4

0801c2dc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801c2dc:	b5b0      	push	{r4, r5, r7, lr}
 801c2de:	b094      	sub	sp, #80	; 0x50
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801c2e4:	2300      	movs	r3, #0
 801c2e6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d106      	bne.n	801c2fc <tcp_receive+0x20>
 801c2ee:	4b91      	ldr	r3, [pc, #580]	; (801c534 <tcp_receive+0x258>)
 801c2f0:	f240 427b 	movw	r2, #1147	; 0x47b
 801c2f4:	4990      	ldr	r1, [pc, #576]	; (801c538 <tcp_receive+0x25c>)
 801c2f6:	4891      	ldr	r0, [pc, #580]	; (801c53c <tcp_receive+0x260>)
 801c2f8:	f007 fd42 	bl	8023d80 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	7d1b      	ldrb	r3, [r3, #20]
 801c300:	2b03      	cmp	r3, #3
 801c302:	d806      	bhi.n	801c312 <tcp_receive+0x36>
 801c304:	4b8b      	ldr	r3, [pc, #556]	; (801c534 <tcp_receive+0x258>)
 801c306:	f240 427c 	movw	r2, #1148	; 0x47c
 801c30a:	498d      	ldr	r1, [pc, #564]	; (801c540 <tcp_receive+0x264>)
 801c30c:	488b      	ldr	r0, [pc, #556]	; (801c53c <tcp_receive+0x260>)
 801c30e:	f007 fd37 	bl	8023d80 <iprintf>

  if (flags & TCP_ACK) {
 801c312:	4b8c      	ldr	r3, [pc, #560]	; (801c544 <tcp_receive+0x268>)
 801c314:	781b      	ldrb	r3, [r3, #0]
 801c316:	f003 0310 	and.w	r3, r3, #16
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	f000 8264 	beq.w	801c7e8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c326:	461a      	mov	r2, r3
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c32c:	4413      	add	r3, r2
 801c32e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c334:	4b84      	ldr	r3, [pc, #528]	; (801c548 <tcp_receive+0x26c>)
 801c336:	681b      	ldr	r3, [r3, #0]
 801c338:	1ad3      	subs	r3, r2, r3
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	db1b      	blt.n	801c376 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c342:	4b81      	ldr	r3, [pc, #516]	; (801c548 <tcp_receive+0x26c>)
 801c344:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c346:	429a      	cmp	r2, r3
 801c348:	d106      	bne.n	801c358 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c34e:	4b7f      	ldr	r3, [pc, #508]	; (801c54c <tcp_receive+0x270>)
 801c350:	681b      	ldr	r3, [r3, #0]
 801c352:	1ad3      	subs	r3, r2, r3
 801c354:	2b00      	cmp	r3, #0
 801c356:	db0e      	blt.n	801c376 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c35c:	4b7b      	ldr	r3, [pc, #492]	; (801c54c <tcp_receive+0x270>)
 801c35e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c360:	429a      	cmp	r2, r3
 801c362:	d125      	bne.n	801c3b0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c364:	4b7a      	ldr	r3, [pc, #488]	; (801c550 <tcp_receive+0x274>)
 801c366:	681b      	ldr	r3, [r3, #0]
 801c368:	89db      	ldrh	r3, [r3, #14]
 801c36a:	b29a      	uxth	r2, r3
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c372:	429a      	cmp	r2, r3
 801c374:	d91c      	bls.n	801c3b0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801c376:	4b76      	ldr	r3, [pc, #472]	; (801c550 <tcp_receive+0x274>)
 801c378:	681b      	ldr	r3, [r3, #0]
 801c37a:	89db      	ldrh	r3, [r3, #14]
 801c37c:	b29a      	uxth	r2, r3
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c390:	429a      	cmp	r2, r3
 801c392:	d205      	bcs.n	801c3a0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801c3a0:	4b69      	ldr	r3, [pc, #420]	; (801c548 <tcp_receive+0x26c>)
 801c3a2:	681a      	ldr	r2, [r3, #0]
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801c3a8:	4b68      	ldr	r3, [pc, #416]	; (801c54c <tcp_receive+0x270>)
 801c3aa:	681a      	ldr	r2, [r3, #0]
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801c3b0:	4b66      	ldr	r3, [pc, #408]	; (801c54c <tcp_receive+0x270>)
 801c3b2:	681a      	ldr	r2, [r3, #0]
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c3b8:	1ad3      	subs	r3, r2, r3
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	dc58      	bgt.n	801c470 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801c3be:	4b65      	ldr	r3, [pc, #404]	; (801c554 <tcp_receive+0x278>)
 801c3c0:	881b      	ldrh	r3, [r3, #0]
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	d14b      	bne.n	801c45e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c3ca:	687a      	ldr	r2, [r7, #4]
 801c3cc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801c3d0:	4413      	add	r3, r2
 801c3d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c3d4:	429a      	cmp	r2, r3
 801c3d6:	d142      	bne.n	801c45e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	db3d      	blt.n	801c45e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c3e6:	4b59      	ldr	r3, [pc, #356]	; (801c54c <tcp_receive+0x270>)
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	429a      	cmp	r2, r3
 801c3ec:	d137      	bne.n	801c45e <tcp_receive+0x182>
              found_dupack = 1;
 801c3ee:	2301      	movs	r3, #1
 801c3f0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801c3f2:	687b      	ldr	r3, [r7, #4]
 801c3f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c3f8:	2bff      	cmp	r3, #255	; 0xff
 801c3fa:	d007      	beq.n	801c40c <tcp_receive+0x130>
                ++pcb->dupacks;
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c402:	3301      	adds	r3, #1
 801c404:	b2da      	uxtb	r2, r3
 801c406:	687b      	ldr	r3, [r7, #4]
 801c408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c412:	2b03      	cmp	r3, #3
 801c414:	d91b      	bls.n	801c44e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c420:	4413      	add	r3, r2
 801c422:	b29a      	uxth	r2, r3
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c42a:	429a      	cmp	r2, r3
 801c42c:	d30a      	bcc.n	801c444 <tcp_receive+0x168>
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c438:	4413      	add	r3, r2
 801c43a:	b29a      	uxth	r2, r3
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c442:	e004      	b.n	801c44e <tcp_receive+0x172>
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c44a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c454:	2b02      	cmp	r3, #2
 801c456:	d902      	bls.n	801c45e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801c458:	6878      	ldr	r0, [r7, #4]
 801c45a:	f002 fb43 	bl	801eae4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801c45e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c460:	2b00      	cmp	r3, #0
 801c462:	f040 8161 	bne.w	801c728 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	2200      	movs	r2, #0
 801c46a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801c46e:	e15b      	b.n	801c728 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c470:	4b36      	ldr	r3, [pc, #216]	; (801c54c <tcp_receive+0x270>)
 801c472:	681a      	ldr	r2, [r3, #0]
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c478:	1ad3      	subs	r3, r2, r3
 801c47a:	3b01      	subs	r3, #1
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	f2c0 814e 	blt.w	801c71e <tcp_receive+0x442>
 801c482:	4b32      	ldr	r3, [pc, #200]	; (801c54c <tcp_receive+0x270>)
 801c484:	681a      	ldr	r2, [r3, #0]
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c48a:	1ad3      	subs	r3, r2, r3
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	f300 8146 	bgt.w	801c71e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	8b5b      	ldrh	r3, [r3, #26]
 801c496:	f003 0304 	and.w	r3, r3, #4
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d010      	beq.n	801c4c0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	8b5b      	ldrh	r3, [r3, #26]
 801c4a2:	f023 0304 	bic.w	r3, r3, #4
 801c4a6:	b29a      	uxth	r2, r3
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	2200      	movs	r2, #0
 801c4bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	2200      	movs	r2, #0
 801c4c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c4ce:	10db      	asrs	r3, r3, #3
 801c4d0:	b21b      	sxth	r3, r3
 801c4d2:	b29a      	uxth	r2, r3
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c4da:	b29b      	uxth	r3, r3
 801c4dc:	4413      	add	r3, r2
 801c4de:	b29b      	uxth	r3, r3
 801c4e0:	b21a      	sxth	r2, r3
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801c4e8:	4b18      	ldr	r3, [pc, #96]	; (801c54c <tcp_receive+0x270>)
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	b29a      	uxth	r2, r3
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c4f2:	b29b      	uxth	r3, r3
 801c4f4:	1ad3      	subs	r3, r2, r3
 801c4f6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	2200      	movs	r2, #0
 801c4fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801c500:	4b12      	ldr	r3, [pc, #72]	; (801c54c <tcp_receive+0x270>)
 801c502:	681a      	ldr	r2, [r3, #0]
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	7d1b      	ldrb	r3, [r3, #20]
 801c50c:	2b03      	cmp	r3, #3
 801c50e:	f240 8097 	bls.w	801c640 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801c51e:	429a      	cmp	r2, r3
 801c520:	d245      	bcs.n	801c5ae <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	8b5b      	ldrh	r3, [r3, #26]
 801c526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d014      	beq.n	801c558 <tcp_receive+0x27c>
 801c52e:	2301      	movs	r3, #1
 801c530:	e013      	b.n	801c55a <tcp_receive+0x27e>
 801c532:	bf00      	nop
 801c534:	08027044 	.word	0x08027044
 801c538:	08027374 	.word	0x08027374
 801c53c:	08027090 	.word	0x08027090
 801c540:	08027390 	.word	0x08027390
 801c544:	2000bfdc 	.word	0x2000bfdc
 801c548:	2000bfd0 	.word	0x2000bfd0
 801c54c:	2000bfd4 	.word	0x2000bfd4
 801c550:	2000bfc0 	.word	0x2000bfc0
 801c554:	2000bfda 	.word	0x2000bfda
 801c558:	2302      	movs	r3, #2
 801c55a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801c55e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801c562:	b29a      	uxth	r2, r3
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c568:	fb12 f303 	smulbb	r3, r2, r3
 801c56c:	b29b      	uxth	r3, r3
 801c56e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c570:	4293      	cmp	r3, r2
 801c572:	bf28      	it	cs
 801c574:	4613      	movcs	r3, r2
 801c576:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c57e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c580:	4413      	add	r3, r2
 801c582:	b29a      	uxth	r2, r3
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c58a:	429a      	cmp	r2, r3
 801c58c:	d309      	bcc.n	801c5a2 <tcp_receive+0x2c6>
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c594:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c596:	4413      	add	r3, r2
 801c598:	b29a      	uxth	r2, r3
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c5a0:	e04e      	b.n	801c640 <tcp_receive+0x364>
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c5a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c5ac:	e048      	b.n	801c640 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c5b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c5b6:	4413      	add	r3, r2
 801c5b8:	b29a      	uxth	r2, r3
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801c5c0:	429a      	cmp	r2, r3
 801c5c2:	d309      	bcc.n	801c5d8 <tcp_receive+0x2fc>
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c5ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c5cc:	4413      	add	r3, r2
 801c5ce:	b29a      	uxth	r2, r3
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801c5d6:	e004      	b.n	801c5e2 <tcp_receive+0x306>
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c5de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c5ee:	429a      	cmp	r2, r3
 801c5f0:	d326      	bcc.n	801c640 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c5fe:	1ad3      	subs	r3, r2, r3
 801c600:	b29a      	uxth	r2, r3
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c612:	4413      	add	r3, r2
 801c614:	b29a      	uxth	r2, r3
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c61c:	429a      	cmp	r2, r3
 801c61e:	d30a      	bcc.n	801c636 <tcp_receive+0x35a>
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c62a:	4413      	add	r3, r2
 801c62c:	b29a      	uxth	r2, r3
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c634:	e004      	b.n	801c640 <tcp_receive+0x364>
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c63c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c648:	4a98      	ldr	r2, [pc, #608]	; (801c8ac <tcp_receive+0x5d0>)
 801c64a:	6878      	ldr	r0, [r7, #4]
 801c64c:	f7ff fdca 	bl	801c1e4 <tcp_free_acked_segments>
 801c650:	4602      	mov	r2, r0
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c65e:	4a94      	ldr	r2, [pc, #592]	; (801c8b0 <tcp_receive+0x5d4>)
 801c660:	6878      	ldr	r0, [r7, #4]
 801c662:	f7ff fdbf 	bl	801c1e4 <tcp_free_acked_segments>
 801c666:	4602      	mov	r2, r0
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c670:	2b00      	cmp	r3, #0
 801c672:	d104      	bne.n	801c67e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c67a:	861a      	strh	r2, [r3, #48]	; 0x30
 801c67c:	e002      	b.n	801c684 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	2200      	movs	r2, #0
 801c682:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	2200      	movs	r2, #0
 801c688:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d103      	bne.n	801c69a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	2200      	movs	r2, #0
 801c696:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801c6a0:	4b84      	ldr	r3, [pc, #528]	; (801c8b4 <tcp_receive+0x5d8>)
 801c6a2:	881b      	ldrh	r3, [r3, #0]
 801c6a4:	4413      	add	r3, r2
 801c6a6:	b29a      	uxth	r2, r3
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	8b5b      	ldrh	r3, [r3, #26]
 801c6b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d035      	beq.n	801c726 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d118      	bne.n	801c6f4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801c6c2:	687b      	ldr	r3, [r7, #4]
 801c6c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	d00c      	beq.n	801c6e4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c6d2:	68db      	ldr	r3, [r3, #12]
 801c6d4:	685b      	ldr	r3, [r3, #4]
 801c6d6:	4618      	mov	r0, r3
 801c6d8:	f7fa fd3d 	bl	8017156 <lwip_htonl>
 801c6dc:	4603      	mov	r3, r0
 801c6de:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	dc20      	bgt.n	801c726 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	8b5b      	ldrh	r3, [r3, #26]
 801c6e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c6ec:	b29a      	uxth	r2, r3
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c6f2:	e018      	b.n	801c726 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c6fc:	68db      	ldr	r3, [r3, #12]
 801c6fe:	685b      	ldr	r3, [r3, #4]
 801c700:	4618      	mov	r0, r3
 801c702:	f7fa fd28 	bl	8017156 <lwip_htonl>
 801c706:	4603      	mov	r3, r0
 801c708:	1ae3      	subs	r3, r4, r3
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	dc0b      	bgt.n	801c726 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	8b5b      	ldrh	r3, [r3, #26]
 801c712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c716:	b29a      	uxth	r2, r3
 801c718:	687b      	ldr	r3, [r7, #4]
 801c71a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c71c:	e003      	b.n	801c726 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801c71e:	6878      	ldr	r0, [r7, #4]
 801c720:	f002 fbce 	bl	801eec0 <tcp_send_empty_ack>
 801c724:	e000      	b.n	801c728 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c726:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	d05b      	beq.n	801c7e8 <tcp_receive+0x50c>
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c734:	4b60      	ldr	r3, [pc, #384]	; (801c8b8 <tcp_receive+0x5dc>)
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	1ad3      	subs	r3, r2, r3
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	da54      	bge.n	801c7e8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801c73e:	4b5f      	ldr	r3, [pc, #380]	; (801c8bc <tcp_receive+0x5e0>)
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	b29a      	uxth	r2, r3
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c748:	b29b      	uxth	r3, r3
 801c74a:	1ad3      	subs	r3, r2, r3
 801c74c:	b29b      	uxth	r3, r3
 801c74e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801c752:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c75c:	10db      	asrs	r3, r3, #3
 801c75e:	b21b      	sxth	r3, r3
 801c760:	b29b      	uxth	r3, r3
 801c762:	1ad3      	subs	r3, r2, r3
 801c764:	b29b      	uxth	r3, r3
 801c766:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c770:	b29a      	uxth	r2, r3
 801c772:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c776:	4413      	add	r3, r2
 801c778:	b29b      	uxth	r3, r3
 801c77a:	b21a      	sxth	r2, r3
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801c780:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801c784:	2b00      	cmp	r3, #0
 801c786:	da05      	bge.n	801c794 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801c788:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c78c:	425b      	negs	r3, r3
 801c78e:	b29b      	uxth	r3, r3
 801c790:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801c794:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c79e:	109b      	asrs	r3, r3, #2
 801c7a0:	b21b      	sxth	r3, r3
 801c7a2:	b29b      	uxth	r3, r3
 801c7a4:	1ad3      	subs	r3, r2, r3
 801c7a6:	b29b      	uxth	r3, r3
 801c7a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c7b2:	b29a      	uxth	r2, r3
 801c7b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c7b8:	4413      	add	r3, r2
 801c7ba:	b29b      	uxth	r3, r3
 801c7bc:	b21a      	sxth	r2, r3
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c7c8:	10db      	asrs	r3, r3, #3
 801c7ca:	b21b      	sxth	r3, r3
 801c7cc:	b29a      	uxth	r2, r3
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c7d4:	b29b      	uxth	r3, r3
 801c7d6:	4413      	add	r3, r2
 801c7d8:	b29b      	uxth	r3, r3
 801c7da:	b21a      	sxth	r2, r3
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	2200      	movs	r2, #0
 801c7e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c7e8:	4b35      	ldr	r3, [pc, #212]	; (801c8c0 <tcp_receive+0x5e4>)
 801c7ea:	881b      	ldrh	r3, [r3, #0]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	f000 84e2 	beq.w	801d1b6 <tcp_receive+0xeda>
 801c7f2:	687b      	ldr	r3, [r7, #4]
 801c7f4:	7d1b      	ldrb	r3, [r3, #20]
 801c7f6:	2b06      	cmp	r3, #6
 801c7f8:	f200 84dd 	bhi.w	801d1b6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c7fc:	687b      	ldr	r3, [r7, #4]
 801c7fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c800:	4b30      	ldr	r3, [pc, #192]	; (801c8c4 <tcp_receive+0x5e8>)
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	1ad3      	subs	r3, r2, r3
 801c806:	3b01      	subs	r3, #1
 801c808:	2b00      	cmp	r3, #0
 801c80a:	f2c0 808f 	blt.w	801c92c <tcp_receive+0x650>
 801c80e:	687b      	ldr	r3, [r7, #4]
 801c810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c812:	4b2b      	ldr	r3, [pc, #172]	; (801c8c0 <tcp_receive+0x5e4>)
 801c814:	881b      	ldrh	r3, [r3, #0]
 801c816:	4619      	mov	r1, r3
 801c818:	4b2a      	ldr	r3, [pc, #168]	; (801c8c4 <tcp_receive+0x5e8>)
 801c81a:	681b      	ldr	r3, [r3, #0]
 801c81c:	440b      	add	r3, r1
 801c81e:	1ad3      	subs	r3, r2, r3
 801c820:	3301      	adds	r3, #1
 801c822:	2b00      	cmp	r3, #0
 801c824:	f300 8082 	bgt.w	801c92c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801c828:	4b27      	ldr	r3, [pc, #156]	; (801c8c8 <tcp_receive+0x5ec>)
 801c82a:	685b      	ldr	r3, [r3, #4]
 801c82c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c832:	4b24      	ldr	r3, [pc, #144]	; (801c8c4 <tcp_receive+0x5e8>)
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	1ad3      	subs	r3, r2, r3
 801c838:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801c83a:	4b23      	ldr	r3, [pc, #140]	; (801c8c8 <tcp_receive+0x5ec>)
 801c83c:	685b      	ldr	r3, [r3, #4]
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d106      	bne.n	801c850 <tcp_receive+0x574>
 801c842:	4b22      	ldr	r3, [pc, #136]	; (801c8cc <tcp_receive+0x5f0>)
 801c844:	f240 5294 	movw	r2, #1428	; 0x594
 801c848:	4921      	ldr	r1, [pc, #132]	; (801c8d0 <tcp_receive+0x5f4>)
 801c84a:	4822      	ldr	r0, [pc, #136]	; (801c8d4 <tcp_receive+0x5f8>)
 801c84c:	f007 fa98 	bl	8023d80 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c852:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c856:	4293      	cmp	r3, r2
 801c858:	d906      	bls.n	801c868 <tcp_receive+0x58c>
 801c85a:	4b1c      	ldr	r3, [pc, #112]	; (801c8cc <tcp_receive+0x5f0>)
 801c85c:	f240 5295 	movw	r2, #1429	; 0x595
 801c860:	491d      	ldr	r1, [pc, #116]	; (801c8d8 <tcp_receive+0x5fc>)
 801c862:	481c      	ldr	r0, [pc, #112]	; (801c8d4 <tcp_receive+0x5f8>)
 801c864:	f007 fa8c 	bl	8023d80 <iprintf>
      off = (u16_t)off32;
 801c868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c86a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801c86e:	4b16      	ldr	r3, [pc, #88]	; (801c8c8 <tcp_receive+0x5ec>)
 801c870:	685b      	ldr	r3, [r3, #4]
 801c872:	891b      	ldrh	r3, [r3, #8]
 801c874:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c878:	429a      	cmp	r2, r3
 801c87a:	d906      	bls.n	801c88a <tcp_receive+0x5ae>
 801c87c:	4b13      	ldr	r3, [pc, #76]	; (801c8cc <tcp_receive+0x5f0>)
 801c87e:	f240 5297 	movw	r2, #1431	; 0x597
 801c882:	4916      	ldr	r1, [pc, #88]	; (801c8dc <tcp_receive+0x600>)
 801c884:	4813      	ldr	r0, [pc, #76]	; (801c8d4 <tcp_receive+0x5f8>)
 801c886:	f007 fa7b 	bl	8023d80 <iprintf>
      inseg.len -= off;
 801c88a:	4b0f      	ldr	r3, [pc, #60]	; (801c8c8 <tcp_receive+0x5ec>)
 801c88c:	891a      	ldrh	r2, [r3, #8]
 801c88e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c892:	1ad3      	subs	r3, r2, r3
 801c894:	b29a      	uxth	r2, r3
 801c896:	4b0c      	ldr	r3, [pc, #48]	; (801c8c8 <tcp_receive+0x5ec>)
 801c898:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801c89a:	4b0b      	ldr	r3, [pc, #44]	; (801c8c8 <tcp_receive+0x5ec>)
 801c89c:	685b      	ldr	r3, [r3, #4]
 801c89e:	891a      	ldrh	r2, [r3, #8]
 801c8a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c8a4:	1ad3      	subs	r3, r2, r3
 801c8a6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801c8a8:	e02a      	b.n	801c900 <tcp_receive+0x624>
 801c8aa:	bf00      	nop
 801c8ac:	080273ac 	.word	0x080273ac
 801c8b0:	080273b4 	.word	0x080273b4
 801c8b4:	2000bfd8 	.word	0x2000bfd8
 801c8b8:	2000bfd4 	.word	0x2000bfd4
 801c8bc:	2000bf98 	.word	0x2000bf98
 801c8c0:	2000bfda 	.word	0x2000bfda
 801c8c4:	2000bfd0 	.word	0x2000bfd0
 801c8c8:	2000bfb0 	.word	0x2000bfb0
 801c8cc:	08027044 	.word	0x08027044
 801c8d0:	080273bc 	.word	0x080273bc
 801c8d4:	08027090 	.word	0x08027090
 801c8d8:	080273cc 	.word	0x080273cc
 801c8dc:	080273dc 	.word	0x080273dc
        off -= p->len;
 801c8e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c8e2:	895b      	ldrh	r3, [r3, #10]
 801c8e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c8e8:	1ad3      	subs	r3, r2, r3
 801c8ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801c8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c8f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c8f2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801c8f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c8f6:	2200      	movs	r2, #0
 801c8f8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801c8fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801c900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c902:	895b      	ldrh	r3, [r3, #10]
 801c904:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c908:	429a      	cmp	r2, r3
 801c90a:	d8e9      	bhi.n	801c8e0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801c90c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c910:	4619      	mov	r1, r3
 801c912:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801c914:	f7fb ff76 	bl	8018804 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c91c:	4a91      	ldr	r2, [pc, #580]	; (801cb64 <tcp_receive+0x888>)
 801c91e:	6013      	str	r3, [r2, #0]
 801c920:	4b91      	ldr	r3, [pc, #580]	; (801cb68 <tcp_receive+0x88c>)
 801c922:	68db      	ldr	r3, [r3, #12]
 801c924:	4a8f      	ldr	r2, [pc, #572]	; (801cb64 <tcp_receive+0x888>)
 801c926:	6812      	ldr	r2, [r2, #0]
 801c928:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c92a:	e00d      	b.n	801c948 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801c92c:	4b8d      	ldr	r3, [pc, #564]	; (801cb64 <tcp_receive+0x888>)
 801c92e:	681a      	ldr	r2, [r3, #0]
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c934:	1ad3      	subs	r3, r2, r3
 801c936:	2b00      	cmp	r3, #0
 801c938:	da06      	bge.n	801c948 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	8b5b      	ldrh	r3, [r3, #26]
 801c93e:	f043 0302 	orr.w	r3, r3, #2
 801c942:	b29a      	uxth	r2, r3
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c948:	4b86      	ldr	r3, [pc, #536]	; (801cb64 <tcp_receive+0x888>)
 801c94a:	681a      	ldr	r2, [r3, #0]
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c950:	1ad3      	subs	r3, r2, r3
 801c952:	2b00      	cmp	r3, #0
 801c954:	f2c0 842a 	blt.w	801d1ac <tcp_receive+0xed0>
 801c958:	4b82      	ldr	r3, [pc, #520]	; (801cb64 <tcp_receive+0x888>)
 801c95a:	681a      	ldr	r2, [r3, #0]
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c960:	6879      	ldr	r1, [r7, #4]
 801c962:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c964:	440b      	add	r3, r1
 801c966:	1ad3      	subs	r3, r2, r3
 801c968:	3301      	adds	r3, #1
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	f300 841e 	bgt.w	801d1ac <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c974:	4b7b      	ldr	r3, [pc, #492]	; (801cb64 <tcp_receive+0x888>)
 801c976:	681b      	ldr	r3, [r3, #0]
 801c978:	429a      	cmp	r2, r3
 801c97a:	f040 829a 	bne.w	801ceb2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801c97e:	4b7a      	ldr	r3, [pc, #488]	; (801cb68 <tcp_receive+0x88c>)
 801c980:	891c      	ldrh	r4, [r3, #8]
 801c982:	4b79      	ldr	r3, [pc, #484]	; (801cb68 <tcp_receive+0x88c>)
 801c984:	68db      	ldr	r3, [r3, #12]
 801c986:	899b      	ldrh	r3, [r3, #12]
 801c988:	b29b      	uxth	r3, r3
 801c98a:	4618      	mov	r0, r3
 801c98c:	f7fa fbce 	bl	801712c <lwip_htons>
 801c990:	4603      	mov	r3, r0
 801c992:	b2db      	uxtb	r3, r3
 801c994:	f003 0303 	and.w	r3, r3, #3
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d001      	beq.n	801c9a0 <tcp_receive+0x6c4>
 801c99c:	2301      	movs	r3, #1
 801c99e:	e000      	b.n	801c9a2 <tcp_receive+0x6c6>
 801c9a0:	2300      	movs	r3, #0
 801c9a2:	4423      	add	r3, r4
 801c9a4:	b29a      	uxth	r2, r3
 801c9a6:	4b71      	ldr	r3, [pc, #452]	; (801cb6c <tcp_receive+0x890>)
 801c9a8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c9ae:	4b6f      	ldr	r3, [pc, #444]	; (801cb6c <tcp_receive+0x890>)
 801c9b0:	881b      	ldrh	r3, [r3, #0]
 801c9b2:	429a      	cmp	r2, r3
 801c9b4:	d275      	bcs.n	801caa2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c9b6:	4b6c      	ldr	r3, [pc, #432]	; (801cb68 <tcp_receive+0x88c>)
 801c9b8:	68db      	ldr	r3, [r3, #12]
 801c9ba:	899b      	ldrh	r3, [r3, #12]
 801c9bc:	b29b      	uxth	r3, r3
 801c9be:	4618      	mov	r0, r3
 801c9c0:	f7fa fbb4 	bl	801712c <lwip_htons>
 801c9c4:	4603      	mov	r3, r0
 801c9c6:	b2db      	uxtb	r3, r3
 801c9c8:	f003 0301 	and.w	r3, r3, #1
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	d01f      	beq.n	801ca10 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801c9d0:	4b65      	ldr	r3, [pc, #404]	; (801cb68 <tcp_receive+0x88c>)
 801c9d2:	68db      	ldr	r3, [r3, #12]
 801c9d4:	899b      	ldrh	r3, [r3, #12]
 801c9d6:	b29b      	uxth	r3, r3
 801c9d8:	b21b      	sxth	r3, r3
 801c9da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c9de:	b21c      	sxth	r4, r3
 801c9e0:	4b61      	ldr	r3, [pc, #388]	; (801cb68 <tcp_receive+0x88c>)
 801c9e2:	68db      	ldr	r3, [r3, #12]
 801c9e4:	899b      	ldrh	r3, [r3, #12]
 801c9e6:	b29b      	uxth	r3, r3
 801c9e8:	4618      	mov	r0, r3
 801c9ea:	f7fa fb9f 	bl	801712c <lwip_htons>
 801c9ee:	4603      	mov	r3, r0
 801c9f0:	b2db      	uxtb	r3, r3
 801c9f2:	b29b      	uxth	r3, r3
 801c9f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801c9f8:	b29b      	uxth	r3, r3
 801c9fa:	4618      	mov	r0, r3
 801c9fc:	f7fa fb96 	bl	801712c <lwip_htons>
 801ca00:	4603      	mov	r3, r0
 801ca02:	b21b      	sxth	r3, r3
 801ca04:	4323      	orrs	r3, r4
 801ca06:	b21a      	sxth	r2, r3
 801ca08:	4b57      	ldr	r3, [pc, #348]	; (801cb68 <tcp_receive+0x88c>)
 801ca0a:	68db      	ldr	r3, [r3, #12]
 801ca0c:	b292      	uxth	r2, r2
 801ca0e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ca14:	4b54      	ldr	r3, [pc, #336]	; (801cb68 <tcp_receive+0x88c>)
 801ca16:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ca18:	4b53      	ldr	r3, [pc, #332]	; (801cb68 <tcp_receive+0x88c>)
 801ca1a:	68db      	ldr	r3, [r3, #12]
 801ca1c:	899b      	ldrh	r3, [r3, #12]
 801ca1e:	b29b      	uxth	r3, r3
 801ca20:	4618      	mov	r0, r3
 801ca22:	f7fa fb83 	bl	801712c <lwip_htons>
 801ca26:	4603      	mov	r3, r0
 801ca28:	b2db      	uxtb	r3, r3
 801ca2a:	f003 0302 	and.w	r3, r3, #2
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d005      	beq.n	801ca3e <tcp_receive+0x762>
            inseg.len -= 1;
 801ca32:	4b4d      	ldr	r3, [pc, #308]	; (801cb68 <tcp_receive+0x88c>)
 801ca34:	891b      	ldrh	r3, [r3, #8]
 801ca36:	3b01      	subs	r3, #1
 801ca38:	b29a      	uxth	r2, r3
 801ca3a:	4b4b      	ldr	r3, [pc, #300]	; (801cb68 <tcp_receive+0x88c>)
 801ca3c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801ca3e:	4b4a      	ldr	r3, [pc, #296]	; (801cb68 <tcp_receive+0x88c>)
 801ca40:	685b      	ldr	r3, [r3, #4]
 801ca42:	4a49      	ldr	r2, [pc, #292]	; (801cb68 <tcp_receive+0x88c>)
 801ca44:	8912      	ldrh	r2, [r2, #8]
 801ca46:	4611      	mov	r1, r2
 801ca48:	4618      	mov	r0, r3
 801ca4a:	f7fb fddb 	bl	8018604 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801ca4e:	4b46      	ldr	r3, [pc, #280]	; (801cb68 <tcp_receive+0x88c>)
 801ca50:	891c      	ldrh	r4, [r3, #8]
 801ca52:	4b45      	ldr	r3, [pc, #276]	; (801cb68 <tcp_receive+0x88c>)
 801ca54:	68db      	ldr	r3, [r3, #12]
 801ca56:	899b      	ldrh	r3, [r3, #12]
 801ca58:	b29b      	uxth	r3, r3
 801ca5a:	4618      	mov	r0, r3
 801ca5c:	f7fa fb66 	bl	801712c <lwip_htons>
 801ca60:	4603      	mov	r3, r0
 801ca62:	b2db      	uxtb	r3, r3
 801ca64:	f003 0303 	and.w	r3, r3, #3
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d001      	beq.n	801ca70 <tcp_receive+0x794>
 801ca6c:	2301      	movs	r3, #1
 801ca6e:	e000      	b.n	801ca72 <tcp_receive+0x796>
 801ca70:	2300      	movs	r3, #0
 801ca72:	4423      	add	r3, r4
 801ca74:	b29a      	uxth	r2, r3
 801ca76:	4b3d      	ldr	r3, [pc, #244]	; (801cb6c <tcp_receive+0x890>)
 801ca78:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ca7a:	4b3c      	ldr	r3, [pc, #240]	; (801cb6c <tcp_receive+0x890>)
 801ca7c:	881b      	ldrh	r3, [r3, #0]
 801ca7e:	461a      	mov	r2, r3
 801ca80:	4b38      	ldr	r3, [pc, #224]	; (801cb64 <tcp_receive+0x888>)
 801ca82:	681b      	ldr	r3, [r3, #0]
 801ca84:	441a      	add	r2, r3
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca8a:	6879      	ldr	r1, [r7, #4]
 801ca8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ca8e:	440b      	add	r3, r1
 801ca90:	429a      	cmp	r2, r3
 801ca92:	d006      	beq.n	801caa2 <tcp_receive+0x7c6>
 801ca94:	4b36      	ldr	r3, [pc, #216]	; (801cb70 <tcp_receive+0x894>)
 801ca96:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801ca9a:	4936      	ldr	r1, [pc, #216]	; (801cb74 <tcp_receive+0x898>)
 801ca9c:	4836      	ldr	r0, [pc, #216]	; (801cb78 <tcp_receive+0x89c>)
 801ca9e:	f007 f96f 	bl	8023d80 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	f000 80e7 	beq.w	801cc7a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801caac:	4b2e      	ldr	r3, [pc, #184]	; (801cb68 <tcp_receive+0x88c>)
 801caae:	68db      	ldr	r3, [r3, #12]
 801cab0:	899b      	ldrh	r3, [r3, #12]
 801cab2:	b29b      	uxth	r3, r3
 801cab4:	4618      	mov	r0, r3
 801cab6:	f7fa fb39 	bl	801712c <lwip_htons>
 801caba:	4603      	mov	r3, r0
 801cabc:	b2db      	uxtb	r3, r3
 801cabe:	f003 0301 	and.w	r3, r3, #1
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d010      	beq.n	801cae8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801cac6:	e00a      	b.n	801cade <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cacc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cad2:	681a      	ldr	r2, [r3, #0]
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801cad8:	68f8      	ldr	r0, [r7, #12]
 801cada:	f7fd fcc4 	bl	801a466 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	d1f0      	bne.n	801cac8 <tcp_receive+0x7ec>
 801cae6:	e0c8      	b.n	801cc7a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801caec:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801caee:	e052      	b.n	801cb96 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801caf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801caf2:	68db      	ldr	r3, [r3, #12]
 801caf4:	899b      	ldrh	r3, [r3, #12]
 801caf6:	b29b      	uxth	r3, r3
 801caf8:	4618      	mov	r0, r3
 801cafa:	f7fa fb17 	bl	801712c <lwip_htons>
 801cafe:	4603      	mov	r3, r0
 801cb00:	b2db      	uxtb	r3, r3
 801cb02:	f003 0301 	and.w	r3, r3, #1
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d03d      	beq.n	801cb86 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801cb0a:	4b17      	ldr	r3, [pc, #92]	; (801cb68 <tcp_receive+0x88c>)
 801cb0c:	68db      	ldr	r3, [r3, #12]
 801cb0e:	899b      	ldrh	r3, [r3, #12]
 801cb10:	b29b      	uxth	r3, r3
 801cb12:	4618      	mov	r0, r3
 801cb14:	f7fa fb0a 	bl	801712c <lwip_htons>
 801cb18:	4603      	mov	r3, r0
 801cb1a:	b2db      	uxtb	r3, r3
 801cb1c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d130      	bne.n	801cb86 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801cb24:	4b10      	ldr	r3, [pc, #64]	; (801cb68 <tcp_receive+0x88c>)
 801cb26:	68db      	ldr	r3, [r3, #12]
 801cb28:	899b      	ldrh	r3, [r3, #12]
 801cb2a:	b29c      	uxth	r4, r3
 801cb2c:	2001      	movs	r0, #1
 801cb2e:	f7fa fafd 	bl	801712c <lwip_htons>
 801cb32:	4603      	mov	r3, r0
 801cb34:	461a      	mov	r2, r3
 801cb36:	4b0c      	ldr	r3, [pc, #48]	; (801cb68 <tcp_receive+0x88c>)
 801cb38:	68db      	ldr	r3, [r3, #12]
 801cb3a:	4322      	orrs	r2, r4
 801cb3c:	b292      	uxth	r2, r2
 801cb3e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801cb40:	4b09      	ldr	r3, [pc, #36]	; (801cb68 <tcp_receive+0x88c>)
 801cb42:	891c      	ldrh	r4, [r3, #8]
 801cb44:	4b08      	ldr	r3, [pc, #32]	; (801cb68 <tcp_receive+0x88c>)
 801cb46:	68db      	ldr	r3, [r3, #12]
 801cb48:	899b      	ldrh	r3, [r3, #12]
 801cb4a:	b29b      	uxth	r3, r3
 801cb4c:	4618      	mov	r0, r3
 801cb4e:	f7fa faed 	bl	801712c <lwip_htons>
 801cb52:	4603      	mov	r3, r0
 801cb54:	b2db      	uxtb	r3, r3
 801cb56:	f003 0303 	and.w	r3, r3, #3
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	d00e      	beq.n	801cb7c <tcp_receive+0x8a0>
 801cb5e:	2301      	movs	r3, #1
 801cb60:	e00d      	b.n	801cb7e <tcp_receive+0x8a2>
 801cb62:	bf00      	nop
 801cb64:	2000bfd0 	.word	0x2000bfd0
 801cb68:	2000bfb0 	.word	0x2000bfb0
 801cb6c:	2000bfda 	.word	0x2000bfda
 801cb70:	08027044 	.word	0x08027044
 801cb74:	080273ec 	.word	0x080273ec
 801cb78:	08027090 	.word	0x08027090
 801cb7c:	2300      	movs	r3, #0
 801cb7e:	4423      	add	r3, r4
 801cb80:	b29a      	uxth	r2, r3
 801cb82:	4b98      	ldr	r3, [pc, #608]	; (801cde4 <tcp_receive+0xb08>)
 801cb84:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801cb86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb88:	613b      	str	r3, [r7, #16]
              next = next->next;
 801cb8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801cb90:	6938      	ldr	r0, [r7, #16]
 801cb92:	f7fd fc68 	bl	801a466 <tcp_seg_free>
            while (next &&
 801cb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d00e      	beq.n	801cbba <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801cb9c:	4b91      	ldr	r3, [pc, #580]	; (801cde4 <tcp_receive+0xb08>)
 801cb9e:	881b      	ldrh	r3, [r3, #0]
 801cba0:	461a      	mov	r2, r3
 801cba2:	4b91      	ldr	r3, [pc, #580]	; (801cde8 <tcp_receive+0xb0c>)
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	441a      	add	r2, r3
 801cba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbaa:	68db      	ldr	r3, [r3, #12]
 801cbac:	685b      	ldr	r3, [r3, #4]
 801cbae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801cbb0:	8909      	ldrh	r1, [r1, #8]
 801cbb2:	440b      	add	r3, r1
 801cbb4:	1ad3      	subs	r3, r2, r3
            while (next &&
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	da9a      	bge.n	801caf0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801cbba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	d059      	beq.n	801cc74 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801cbc0:	4b88      	ldr	r3, [pc, #544]	; (801cde4 <tcp_receive+0xb08>)
 801cbc2:	881b      	ldrh	r3, [r3, #0]
 801cbc4:	461a      	mov	r2, r3
 801cbc6:	4b88      	ldr	r3, [pc, #544]	; (801cde8 <tcp_receive+0xb0c>)
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	441a      	add	r2, r3
 801cbcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbce:	68db      	ldr	r3, [r3, #12]
 801cbd0:	685b      	ldr	r3, [r3, #4]
 801cbd2:	1ad3      	subs	r3, r2, r3
            if (next &&
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	dd4d      	ble.n	801cc74 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801cbd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbda:	68db      	ldr	r3, [r3, #12]
 801cbdc:	685b      	ldr	r3, [r3, #4]
 801cbde:	b29a      	uxth	r2, r3
 801cbe0:	4b81      	ldr	r3, [pc, #516]	; (801cde8 <tcp_receive+0xb0c>)
 801cbe2:	681b      	ldr	r3, [r3, #0]
 801cbe4:	b29b      	uxth	r3, r3
 801cbe6:	1ad3      	subs	r3, r2, r3
 801cbe8:	b29a      	uxth	r2, r3
 801cbea:	4b80      	ldr	r3, [pc, #512]	; (801cdec <tcp_receive+0xb10>)
 801cbec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801cbee:	4b7f      	ldr	r3, [pc, #508]	; (801cdec <tcp_receive+0xb10>)
 801cbf0:	68db      	ldr	r3, [r3, #12]
 801cbf2:	899b      	ldrh	r3, [r3, #12]
 801cbf4:	b29b      	uxth	r3, r3
 801cbf6:	4618      	mov	r0, r3
 801cbf8:	f7fa fa98 	bl	801712c <lwip_htons>
 801cbfc:	4603      	mov	r3, r0
 801cbfe:	b2db      	uxtb	r3, r3
 801cc00:	f003 0302 	and.w	r3, r3, #2
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	d005      	beq.n	801cc14 <tcp_receive+0x938>
                inseg.len -= 1;
 801cc08:	4b78      	ldr	r3, [pc, #480]	; (801cdec <tcp_receive+0xb10>)
 801cc0a:	891b      	ldrh	r3, [r3, #8]
 801cc0c:	3b01      	subs	r3, #1
 801cc0e:	b29a      	uxth	r2, r3
 801cc10:	4b76      	ldr	r3, [pc, #472]	; (801cdec <tcp_receive+0xb10>)
 801cc12:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801cc14:	4b75      	ldr	r3, [pc, #468]	; (801cdec <tcp_receive+0xb10>)
 801cc16:	685b      	ldr	r3, [r3, #4]
 801cc18:	4a74      	ldr	r2, [pc, #464]	; (801cdec <tcp_receive+0xb10>)
 801cc1a:	8912      	ldrh	r2, [r2, #8]
 801cc1c:	4611      	mov	r1, r2
 801cc1e:	4618      	mov	r0, r3
 801cc20:	f7fb fcf0 	bl	8018604 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801cc24:	4b71      	ldr	r3, [pc, #452]	; (801cdec <tcp_receive+0xb10>)
 801cc26:	891c      	ldrh	r4, [r3, #8]
 801cc28:	4b70      	ldr	r3, [pc, #448]	; (801cdec <tcp_receive+0xb10>)
 801cc2a:	68db      	ldr	r3, [r3, #12]
 801cc2c:	899b      	ldrh	r3, [r3, #12]
 801cc2e:	b29b      	uxth	r3, r3
 801cc30:	4618      	mov	r0, r3
 801cc32:	f7fa fa7b 	bl	801712c <lwip_htons>
 801cc36:	4603      	mov	r3, r0
 801cc38:	b2db      	uxtb	r3, r3
 801cc3a:	f003 0303 	and.w	r3, r3, #3
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d001      	beq.n	801cc46 <tcp_receive+0x96a>
 801cc42:	2301      	movs	r3, #1
 801cc44:	e000      	b.n	801cc48 <tcp_receive+0x96c>
 801cc46:	2300      	movs	r3, #0
 801cc48:	4423      	add	r3, r4
 801cc4a:	b29a      	uxth	r2, r3
 801cc4c:	4b65      	ldr	r3, [pc, #404]	; (801cde4 <tcp_receive+0xb08>)
 801cc4e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801cc50:	4b64      	ldr	r3, [pc, #400]	; (801cde4 <tcp_receive+0xb08>)
 801cc52:	881b      	ldrh	r3, [r3, #0]
 801cc54:	461a      	mov	r2, r3
 801cc56:	4b64      	ldr	r3, [pc, #400]	; (801cde8 <tcp_receive+0xb0c>)
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	441a      	add	r2, r3
 801cc5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc5e:	68db      	ldr	r3, [r3, #12]
 801cc60:	685b      	ldr	r3, [r3, #4]
 801cc62:	429a      	cmp	r2, r3
 801cc64:	d006      	beq.n	801cc74 <tcp_receive+0x998>
 801cc66:	4b62      	ldr	r3, [pc, #392]	; (801cdf0 <tcp_receive+0xb14>)
 801cc68:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801cc6c:	4961      	ldr	r1, [pc, #388]	; (801cdf4 <tcp_receive+0xb18>)
 801cc6e:	4862      	ldr	r0, [pc, #392]	; (801cdf8 <tcp_receive+0xb1c>)
 801cc70:	f007 f886 	bl	8023d80 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cc78:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801cc7a:	4b5a      	ldr	r3, [pc, #360]	; (801cde4 <tcp_receive+0xb08>)
 801cc7c:	881b      	ldrh	r3, [r3, #0]
 801cc7e:	461a      	mov	r2, r3
 801cc80:	4b59      	ldr	r3, [pc, #356]	; (801cde8 <tcp_receive+0xb0c>)
 801cc82:	681b      	ldr	r3, [r3, #0]
 801cc84:	441a      	add	r2, r3
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cc8e:	4b55      	ldr	r3, [pc, #340]	; (801cde4 <tcp_receive+0xb08>)
 801cc90:	881b      	ldrh	r3, [r3, #0]
 801cc92:	429a      	cmp	r2, r3
 801cc94:	d206      	bcs.n	801cca4 <tcp_receive+0x9c8>
 801cc96:	4b56      	ldr	r3, [pc, #344]	; (801cdf0 <tcp_receive+0xb14>)
 801cc98:	f240 6207 	movw	r2, #1543	; 0x607
 801cc9c:	4957      	ldr	r1, [pc, #348]	; (801cdfc <tcp_receive+0xb20>)
 801cc9e:	4856      	ldr	r0, [pc, #344]	; (801cdf8 <tcp_receive+0xb1c>)
 801cca0:	f007 f86e 	bl	8023d80 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cca8:	4b4e      	ldr	r3, [pc, #312]	; (801cde4 <tcp_receive+0xb08>)
 801ccaa:	881b      	ldrh	r3, [r3, #0]
 801ccac:	1ad3      	subs	r3, r2, r3
 801ccae:	b29a      	uxth	r2, r3
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801ccb4:	6878      	ldr	r0, [r7, #4]
 801ccb6:	f7fc fd99 	bl	80197ec <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801ccba:	4b4c      	ldr	r3, [pc, #304]	; (801cdec <tcp_receive+0xb10>)
 801ccbc:	685b      	ldr	r3, [r3, #4]
 801ccbe:	891b      	ldrh	r3, [r3, #8]
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d006      	beq.n	801ccd2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801ccc4:	4b49      	ldr	r3, [pc, #292]	; (801cdec <tcp_receive+0xb10>)
 801ccc6:	685b      	ldr	r3, [r3, #4]
 801ccc8:	4a4d      	ldr	r2, [pc, #308]	; (801ce00 <tcp_receive+0xb24>)
 801ccca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801cccc:	4b47      	ldr	r3, [pc, #284]	; (801cdec <tcp_receive+0xb10>)
 801ccce:	2200      	movs	r2, #0
 801ccd0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ccd2:	4b46      	ldr	r3, [pc, #280]	; (801cdec <tcp_receive+0xb10>)
 801ccd4:	68db      	ldr	r3, [r3, #12]
 801ccd6:	899b      	ldrh	r3, [r3, #12]
 801ccd8:	b29b      	uxth	r3, r3
 801ccda:	4618      	mov	r0, r3
 801ccdc:	f7fa fa26 	bl	801712c <lwip_htons>
 801cce0:	4603      	mov	r3, r0
 801cce2:	b2db      	uxtb	r3, r3
 801cce4:	f003 0301 	and.w	r3, r3, #1
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	f000 80b8 	beq.w	801ce5e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801ccee:	4b45      	ldr	r3, [pc, #276]	; (801ce04 <tcp_receive+0xb28>)
 801ccf0:	781b      	ldrb	r3, [r3, #0]
 801ccf2:	f043 0320 	orr.w	r3, r3, #32
 801ccf6:	b2da      	uxtb	r2, r3
 801ccf8:	4b42      	ldr	r3, [pc, #264]	; (801ce04 <tcp_receive+0xb28>)
 801ccfa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801ccfc:	e0af      	b.n	801ce5e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cd02:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cd08:	68db      	ldr	r3, [r3, #12]
 801cd0a:	685b      	ldr	r3, [r3, #4]
 801cd0c:	4a36      	ldr	r2, [pc, #216]	; (801cde8 <tcp_receive+0xb0c>)
 801cd0e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801cd10:	68bb      	ldr	r3, [r7, #8]
 801cd12:	891b      	ldrh	r3, [r3, #8]
 801cd14:	461c      	mov	r4, r3
 801cd16:	68bb      	ldr	r3, [r7, #8]
 801cd18:	68db      	ldr	r3, [r3, #12]
 801cd1a:	899b      	ldrh	r3, [r3, #12]
 801cd1c:	b29b      	uxth	r3, r3
 801cd1e:	4618      	mov	r0, r3
 801cd20:	f7fa fa04 	bl	801712c <lwip_htons>
 801cd24:	4603      	mov	r3, r0
 801cd26:	b2db      	uxtb	r3, r3
 801cd28:	f003 0303 	and.w	r3, r3, #3
 801cd2c:	2b00      	cmp	r3, #0
 801cd2e:	d001      	beq.n	801cd34 <tcp_receive+0xa58>
 801cd30:	2301      	movs	r3, #1
 801cd32:	e000      	b.n	801cd36 <tcp_receive+0xa5a>
 801cd34:	2300      	movs	r3, #0
 801cd36:	191a      	adds	r2, r3, r4
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd3c:	441a      	add	r2, r3
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cd46:	461c      	mov	r4, r3
 801cd48:	68bb      	ldr	r3, [r7, #8]
 801cd4a:	891b      	ldrh	r3, [r3, #8]
 801cd4c:	461d      	mov	r5, r3
 801cd4e:	68bb      	ldr	r3, [r7, #8]
 801cd50:	68db      	ldr	r3, [r3, #12]
 801cd52:	899b      	ldrh	r3, [r3, #12]
 801cd54:	b29b      	uxth	r3, r3
 801cd56:	4618      	mov	r0, r3
 801cd58:	f7fa f9e8 	bl	801712c <lwip_htons>
 801cd5c:	4603      	mov	r3, r0
 801cd5e:	b2db      	uxtb	r3, r3
 801cd60:	f003 0303 	and.w	r3, r3, #3
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	d001      	beq.n	801cd6c <tcp_receive+0xa90>
 801cd68:	2301      	movs	r3, #1
 801cd6a:	e000      	b.n	801cd6e <tcp_receive+0xa92>
 801cd6c:	2300      	movs	r3, #0
 801cd6e:	442b      	add	r3, r5
 801cd70:	429c      	cmp	r4, r3
 801cd72:	d206      	bcs.n	801cd82 <tcp_receive+0xaa6>
 801cd74:	4b1e      	ldr	r3, [pc, #120]	; (801cdf0 <tcp_receive+0xb14>)
 801cd76:	f240 622b 	movw	r2, #1579	; 0x62b
 801cd7a:	4923      	ldr	r1, [pc, #140]	; (801ce08 <tcp_receive+0xb2c>)
 801cd7c:	481e      	ldr	r0, [pc, #120]	; (801cdf8 <tcp_receive+0xb1c>)
 801cd7e:	f006 ffff 	bl	8023d80 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801cd82:	68bb      	ldr	r3, [r7, #8]
 801cd84:	891b      	ldrh	r3, [r3, #8]
 801cd86:	461c      	mov	r4, r3
 801cd88:	68bb      	ldr	r3, [r7, #8]
 801cd8a:	68db      	ldr	r3, [r3, #12]
 801cd8c:	899b      	ldrh	r3, [r3, #12]
 801cd8e:	b29b      	uxth	r3, r3
 801cd90:	4618      	mov	r0, r3
 801cd92:	f7fa f9cb 	bl	801712c <lwip_htons>
 801cd96:	4603      	mov	r3, r0
 801cd98:	b2db      	uxtb	r3, r3
 801cd9a:	f003 0303 	and.w	r3, r3, #3
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	d001      	beq.n	801cda6 <tcp_receive+0xaca>
 801cda2:	2301      	movs	r3, #1
 801cda4:	e000      	b.n	801cda8 <tcp_receive+0xacc>
 801cda6:	2300      	movs	r3, #0
 801cda8:	1919      	adds	r1, r3, r4
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cdae:	b28b      	uxth	r3, r1
 801cdb0:	1ad3      	subs	r3, r2, r3
 801cdb2:	b29a      	uxth	r2, r3
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801cdb8:	6878      	ldr	r0, [r7, #4]
 801cdba:	f7fc fd17 	bl	80197ec <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801cdbe:	68bb      	ldr	r3, [r7, #8]
 801cdc0:	685b      	ldr	r3, [r3, #4]
 801cdc2:	891b      	ldrh	r3, [r3, #8]
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d028      	beq.n	801ce1a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801cdc8:	4b0d      	ldr	r3, [pc, #52]	; (801ce00 <tcp_receive+0xb24>)
 801cdca:	681b      	ldr	r3, [r3, #0]
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	d01d      	beq.n	801ce0c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801cdd0:	4b0b      	ldr	r3, [pc, #44]	; (801ce00 <tcp_receive+0xb24>)
 801cdd2:	681a      	ldr	r2, [r3, #0]
 801cdd4:	68bb      	ldr	r3, [r7, #8]
 801cdd6:	685b      	ldr	r3, [r3, #4]
 801cdd8:	4619      	mov	r1, r3
 801cdda:	4610      	mov	r0, r2
 801cddc:	f7fb fe66 	bl	8018aac <pbuf_cat>
 801cde0:	e018      	b.n	801ce14 <tcp_receive+0xb38>
 801cde2:	bf00      	nop
 801cde4:	2000bfda 	.word	0x2000bfda
 801cde8:	2000bfd0 	.word	0x2000bfd0
 801cdec:	2000bfb0 	.word	0x2000bfb0
 801cdf0:	08027044 	.word	0x08027044
 801cdf4:	08027424 	.word	0x08027424
 801cdf8:	08027090 	.word	0x08027090
 801cdfc:	08027460 	.word	0x08027460
 801ce00:	2000bfe0 	.word	0x2000bfe0
 801ce04:	2000bfdd 	.word	0x2000bfdd
 801ce08:	08027480 	.word	0x08027480
            } else {
              recv_data = cseg->p;
 801ce0c:	68bb      	ldr	r3, [r7, #8]
 801ce0e:	685b      	ldr	r3, [r3, #4]
 801ce10:	4a70      	ldr	r2, [pc, #448]	; (801cfd4 <tcp_receive+0xcf8>)
 801ce12:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801ce14:	68bb      	ldr	r3, [r7, #8]
 801ce16:	2200      	movs	r2, #0
 801ce18:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801ce1a:	68bb      	ldr	r3, [r7, #8]
 801ce1c:	68db      	ldr	r3, [r3, #12]
 801ce1e:	899b      	ldrh	r3, [r3, #12]
 801ce20:	b29b      	uxth	r3, r3
 801ce22:	4618      	mov	r0, r3
 801ce24:	f7fa f982 	bl	801712c <lwip_htons>
 801ce28:	4603      	mov	r3, r0
 801ce2a:	b2db      	uxtb	r3, r3
 801ce2c:	f003 0301 	and.w	r3, r3, #1
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d00d      	beq.n	801ce50 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801ce34:	4b68      	ldr	r3, [pc, #416]	; (801cfd8 <tcp_receive+0xcfc>)
 801ce36:	781b      	ldrb	r3, [r3, #0]
 801ce38:	f043 0320 	orr.w	r3, r3, #32
 801ce3c:	b2da      	uxtb	r2, r3
 801ce3e:	4b66      	ldr	r3, [pc, #408]	; (801cfd8 <tcp_receive+0xcfc>)
 801ce40:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	7d1b      	ldrb	r3, [r3, #20]
 801ce46:	2b04      	cmp	r3, #4
 801ce48:	d102      	bne.n	801ce50 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	2207      	movs	r2, #7
 801ce4e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801ce50:	68bb      	ldr	r3, [r7, #8]
 801ce52:	681a      	ldr	r2, [r3, #0]
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801ce58:	68b8      	ldr	r0, [r7, #8]
 801ce5a:	f7fd fb04 	bl	801a466 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d008      	beq.n	801ce78 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ce6a:	68db      	ldr	r3, [r3, #12]
 801ce6c:	685a      	ldr	r2, [r3, #4]
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801ce72:	429a      	cmp	r2, r3
 801ce74:	f43f af43 	beq.w	801ccfe <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	8b5b      	ldrh	r3, [r3, #26]
 801ce7c:	f003 0301 	and.w	r3, r3, #1
 801ce80:	2b00      	cmp	r3, #0
 801ce82:	d00e      	beq.n	801cea2 <tcp_receive+0xbc6>
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	8b5b      	ldrh	r3, [r3, #26]
 801ce88:	f023 0301 	bic.w	r3, r3, #1
 801ce8c:	b29a      	uxth	r2, r3
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	835a      	strh	r2, [r3, #26]
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	8b5b      	ldrh	r3, [r3, #26]
 801ce96:	f043 0302 	orr.w	r3, r3, #2
 801ce9a:	b29a      	uxth	r2, r3
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801cea0:	e188      	b.n	801d1b4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	8b5b      	ldrh	r3, [r3, #26]
 801cea6:	f043 0301 	orr.w	r3, r3, #1
 801ceaa:	b29a      	uxth	r2, r3
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801ceb0:	e180      	b.n	801d1b4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	d106      	bne.n	801cec8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801ceba:	4848      	ldr	r0, [pc, #288]	; (801cfdc <tcp_receive+0xd00>)
 801cebc:	f7fd faec 	bl	801a498 <tcp_seg_copy>
 801cec0:	4602      	mov	r2, r0
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	675a      	str	r2, [r3, #116]	; 0x74
 801cec6:	e16d      	b.n	801d1a4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801cec8:	2300      	movs	r3, #0
 801ceca:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ced0:	63bb      	str	r3, [r7, #56]	; 0x38
 801ced2:	e157      	b.n	801d184 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801ced4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ced6:	68db      	ldr	r3, [r3, #12]
 801ced8:	685a      	ldr	r2, [r3, #4]
 801ceda:	4b41      	ldr	r3, [pc, #260]	; (801cfe0 <tcp_receive+0xd04>)
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	429a      	cmp	r2, r3
 801cee0:	d11d      	bne.n	801cf1e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801cee2:	4b3e      	ldr	r3, [pc, #248]	; (801cfdc <tcp_receive+0xd00>)
 801cee4:	891a      	ldrh	r2, [r3, #8]
 801cee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cee8:	891b      	ldrh	r3, [r3, #8]
 801ceea:	429a      	cmp	r2, r3
 801ceec:	f240 814f 	bls.w	801d18e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cef0:	483a      	ldr	r0, [pc, #232]	; (801cfdc <tcp_receive+0xd00>)
 801cef2:	f7fd fad1 	bl	801a498 <tcp_seg_copy>
 801cef6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801cef8:	697b      	ldr	r3, [r7, #20]
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	f000 8149 	beq.w	801d192 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801cf00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d003      	beq.n	801cf0e <tcp_receive+0xc32>
                    prev->next = cseg;
 801cf06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf08:	697a      	ldr	r2, [r7, #20]
 801cf0a:	601a      	str	r2, [r3, #0]
 801cf0c:	e002      	b.n	801cf14 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	697a      	ldr	r2, [r7, #20]
 801cf12:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801cf14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cf16:	6978      	ldr	r0, [r7, #20]
 801cf18:	f7ff f8dc 	bl	801c0d4 <tcp_oos_insert_segment>
                }
                break;
 801cf1c:	e139      	b.n	801d192 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801cf1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	d117      	bne.n	801cf54 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801cf24:	4b2e      	ldr	r3, [pc, #184]	; (801cfe0 <tcp_receive+0xd04>)
 801cf26:	681a      	ldr	r2, [r3, #0]
 801cf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf2a:	68db      	ldr	r3, [r3, #12]
 801cf2c:	685b      	ldr	r3, [r3, #4]
 801cf2e:	1ad3      	subs	r3, r2, r3
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	da57      	bge.n	801cfe4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cf34:	4829      	ldr	r0, [pc, #164]	; (801cfdc <tcp_receive+0xd00>)
 801cf36:	f7fd faaf 	bl	801a498 <tcp_seg_copy>
 801cf3a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801cf3c:	69bb      	ldr	r3, [r7, #24]
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	f000 8129 	beq.w	801d196 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	69ba      	ldr	r2, [r7, #24]
 801cf48:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801cf4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cf4c:	69b8      	ldr	r0, [r7, #24]
 801cf4e:	f7ff f8c1 	bl	801c0d4 <tcp_oos_insert_segment>
                  }
                  break;
 801cf52:	e120      	b.n	801d196 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801cf54:	4b22      	ldr	r3, [pc, #136]	; (801cfe0 <tcp_receive+0xd04>)
 801cf56:	681a      	ldr	r2, [r3, #0]
 801cf58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf5a:	68db      	ldr	r3, [r3, #12]
 801cf5c:	685b      	ldr	r3, [r3, #4]
 801cf5e:	1ad3      	subs	r3, r2, r3
 801cf60:	3b01      	subs	r3, #1
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	db3e      	blt.n	801cfe4 <tcp_receive+0xd08>
 801cf66:	4b1e      	ldr	r3, [pc, #120]	; (801cfe0 <tcp_receive+0xd04>)
 801cf68:	681a      	ldr	r2, [r3, #0]
 801cf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf6c:	68db      	ldr	r3, [r3, #12]
 801cf6e:	685b      	ldr	r3, [r3, #4]
 801cf70:	1ad3      	subs	r3, r2, r3
 801cf72:	3301      	adds	r3, #1
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	dc35      	bgt.n	801cfe4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cf78:	4818      	ldr	r0, [pc, #96]	; (801cfdc <tcp_receive+0xd00>)
 801cf7a:	f7fd fa8d 	bl	801a498 <tcp_seg_copy>
 801cf7e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801cf80:	69fb      	ldr	r3, [r7, #28]
 801cf82:	2b00      	cmp	r3, #0
 801cf84:	f000 8109 	beq.w	801d19a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801cf88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf8a:	68db      	ldr	r3, [r3, #12]
 801cf8c:	685b      	ldr	r3, [r3, #4]
 801cf8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cf90:	8912      	ldrh	r2, [r2, #8]
 801cf92:	441a      	add	r2, r3
 801cf94:	4b12      	ldr	r3, [pc, #72]	; (801cfe0 <tcp_receive+0xd04>)
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	1ad3      	subs	r3, r2, r3
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	dd12      	ble.n	801cfc4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801cf9e:	4b10      	ldr	r3, [pc, #64]	; (801cfe0 <tcp_receive+0xd04>)
 801cfa0:	681b      	ldr	r3, [r3, #0]
 801cfa2:	b29a      	uxth	r2, r3
 801cfa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cfa6:	68db      	ldr	r3, [r3, #12]
 801cfa8:	685b      	ldr	r3, [r3, #4]
 801cfaa:	b29b      	uxth	r3, r3
 801cfac:	1ad3      	subs	r3, r2, r3
 801cfae:	b29a      	uxth	r2, r3
 801cfb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cfb2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801cfb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cfb6:	685a      	ldr	r2, [r3, #4]
 801cfb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cfba:	891b      	ldrh	r3, [r3, #8]
 801cfbc:	4619      	mov	r1, r3
 801cfbe:	4610      	mov	r0, r2
 801cfc0:	f7fb fb20 	bl	8018604 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801cfc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cfc6:	69fa      	ldr	r2, [r7, #28]
 801cfc8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801cfca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cfcc:	69f8      	ldr	r0, [r7, #28]
 801cfce:	f7ff f881 	bl	801c0d4 <tcp_oos_insert_segment>
                  }
                  break;
 801cfd2:	e0e2      	b.n	801d19a <tcp_receive+0xebe>
 801cfd4:	2000bfe0 	.word	0x2000bfe0
 801cfd8:	2000bfdd 	.word	0x2000bfdd
 801cfdc:	2000bfb0 	.word	0x2000bfb0
 801cfe0:	2000bfd0 	.word	0x2000bfd0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801cfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfe6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfea:	681b      	ldr	r3, [r3, #0]
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	f040 80c6 	bne.w	801d17e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801cff2:	4b80      	ldr	r3, [pc, #512]	; (801d1f4 <tcp_receive+0xf18>)
 801cff4:	681a      	ldr	r2, [r3, #0]
 801cff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cff8:	68db      	ldr	r3, [r3, #12]
 801cffa:	685b      	ldr	r3, [r3, #4]
 801cffc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801cffe:	2b00      	cmp	r3, #0
 801d000:	f340 80bd 	ble.w	801d17e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d006:	68db      	ldr	r3, [r3, #12]
 801d008:	899b      	ldrh	r3, [r3, #12]
 801d00a:	b29b      	uxth	r3, r3
 801d00c:	4618      	mov	r0, r3
 801d00e:	f7fa f88d 	bl	801712c <lwip_htons>
 801d012:	4603      	mov	r3, r0
 801d014:	b2db      	uxtb	r3, r3
 801d016:	f003 0301 	and.w	r3, r3, #1
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	f040 80bf 	bne.w	801d19e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801d020:	4875      	ldr	r0, [pc, #468]	; (801d1f8 <tcp_receive+0xf1c>)
 801d022:	f7fd fa39 	bl	801a498 <tcp_seg_copy>
 801d026:	4602      	mov	r2, r0
 801d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d02a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801d02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	2b00      	cmp	r3, #0
 801d032:	f000 80b6 	beq.w	801d1a2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801d036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d038:	68db      	ldr	r3, [r3, #12]
 801d03a:	685b      	ldr	r3, [r3, #4]
 801d03c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d03e:	8912      	ldrh	r2, [r2, #8]
 801d040:	441a      	add	r2, r3
 801d042:	4b6c      	ldr	r3, [pc, #432]	; (801d1f4 <tcp_receive+0xf18>)
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	1ad3      	subs	r3, r2, r3
 801d048:	2b00      	cmp	r3, #0
 801d04a:	dd12      	ble.n	801d072 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801d04c:	4b69      	ldr	r3, [pc, #420]	; (801d1f4 <tcp_receive+0xf18>)
 801d04e:	681b      	ldr	r3, [r3, #0]
 801d050:	b29a      	uxth	r2, r3
 801d052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d054:	68db      	ldr	r3, [r3, #12]
 801d056:	685b      	ldr	r3, [r3, #4]
 801d058:	b29b      	uxth	r3, r3
 801d05a:	1ad3      	subs	r3, r2, r3
 801d05c:	b29a      	uxth	r2, r3
 801d05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d060:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d064:	685a      	ldr	r2, [r3, #4]
 801d066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d068:	891b      	ldrh	r3, [r3, #8]
 801d06a:	4619      	mov	r1, r3
 801d06c:	4610      	mov	r0, r2
 801d06e:	f7fb fac9 	bl	8018604 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801d072:	4b62      	ldr	r3, [pc, #392]	; (801d1fc <tcp_receive+0xf20>)
 801d074:	881b      	ldrh	r3, [r3, #0]
 801d076:	461a      	mov	r2, r3
 801d078:	4b5e      	ldr	r3, [pc, #376]	; (801d1f4 <tcp_receive+0xf18>)
 801d07a:	681b      	ldr	r3, [r3, #0]
 801d07c:	441a      	add	r2, r3
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d082:	6879      	ldr	r1, [r7, #4]
 801d084:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d086:	440b      	add	r3, r1
 801d088:	1ad3      	subs	r3, r2, r3
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	f340 8089 	ble.w	801d1a2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801d090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d092:	681b      	ldr	r3, [r3, #0]
 801d094:	68db      	ldr	r3, [r3, #12]
 801d096:	899b      	ldrh	r3, [r3, #12]
 801d098:	b29b      	uxth	r3, r3
 801d09a:	4618      	mov	r0, r3
 801d09c:	f7fa f846 	bl	801712c <lwip_htons>
 801d0a0:	4603      	mov	r3, r0
 801d0a2:	b2db      	uxtb	r3, r3
 801d0a4:	f003 0301 	and.w	r3, r3, #1
 801d0a8:	2b00      	cmp	r3, #0
 801d0aa:	d022      	beq.n	801d0f2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	68db      	ldr	r3, [r3, #12]
 801d0b2:	899b      	ldrh	r3, [r3, #12]
 801d0b4:	b29b      	uxth	r3, r3
 801d0b6:	b21b      	sxth	r3, r3
 801d0b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d0bc:	b21c      	sxth	r4, r3
 801d0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0c0:	681b      	ldr	r3, [r3, #0]
 801d0c2:	68db      	ldr	r3, [r3, #12]
 801d0c4:	899b      	ldrh	r3, [r3, #12]
 801d0c6:	b29b      	uxth	r3, r3
 801d0c8:	4618      	mov	r0, r3
 801d0ca:	f7fa f82f 	bl	801712c <lwip_htons>
 801d0ce:	4603      	mov	r3, r0
 801d0d0:	b2db      	uxtb	r3, r3
 801d0d2:	b29b      	uxth	r3, r3
 801d0d4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801d0d8:	b29b      	uxth	r3, r3
 801d0da:	4618      	mov	r0, r3
 801d0dc:	f7fa f826 	bl	801712c <lwip_htons>
 801d0e0:	4603      	mov	r3, r0
 801d0e2:	b21b      	sxth	r3, r3
 801d0e4:	4323      	orrs	r3, r4
 801d0e6:	b21a      	sxth	r2, r3
 801d0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	68db      	ldr	r3, [r3, #12]
 801d0ee:	b292      	uxth	r2, r2
 801d0f0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0f6:	b29a      	uxth	r2, r3
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d0fc:	4413      	add	r3, r2
 801d0fe:	b299      	uxth	r1, r3
 801d100:	4b3c      	ldr	r3, [pc, #240]	; (801d1f4 <tcp_receive+0xf18>)
 801d102:	681b      	ldr	r3, [r3, #0]
 801d104:	b29a      	uxth	r2, r3
 801d106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	1a8a      	subs	r2, r1, r2
 801d10c:	b292      	uxth	r2, r2
 801d10e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801d110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d112:	681b      	ldr	r3, [r3, #0]
 801d114:	685a      	ldr	r2, [r3, #4]
 801d116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d118:	681b      	ldr	r3, [r3, #0]
 801d11a:	891b      	ldrh	r3, [r3, #8]
 801d11c:	4619      	mov	r1, r3
 801d11e:	4610      	mov	r0, r2
 801d120:	f7fb fa70 	bl	8018604 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801d124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	891c      	ldrh	r4, [r3, #8]
 801d12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d12c:	681b      	ldr	r3, [r3, #0]
 801d12e:	68db      	ldr	r3, [r3, #12]
 801d130:	899b      	ldrh	r3, [r3, #12]
 801d132:	b29b      	uxth	r3, r3
 801d134:	4618      	mov	r0, r3
 801d136:	f7f9 fff9 	bl	801712c <lwip_htons>
 801d13a:	4603      	mov	r3, r0
 801d13c:	b2db      	uxtb	r3, r3
 801d13e:	f003 0303 	and.w	r3, r3, #3
 801d142:	2b00      	cmp	r3, #0
 801d144:	d001      	beq.n	801d14a <tcp_receive+0xe6e>
 801d146:	2301      	movs	r3, #1
 801d148:	e000      	b.n	801d14c <tcp_receive+0xe70>
 801d14a:	2300      	movs	r3, #0
 801d14c:	4423      	add	r3, r4
 801d14e:	b29a      	uxth	r2, r3
 801d150:	4b2a      	ldr	r3, [pc, #168]	; (801d1fc <tcp_receive+0xf20>)
 801d152:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d154:	4b29      	ldr	r3, [pc, #164]	; (801d1fc <tcp_receive+0xf20>)
 801d156:	881b      	ldrh	r3, [r3, #0]
 801d158:	461a      	mov	r2, r3
 801d15a:	4b26      	ldr	r3, [pc, #152]	; (801d1f4 <tcp_receive+0xf18>)
 801d15c:	681b      	ldr	r3, [r3, #0]
 801d15e:	441a      	add	r2, r3
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d164:	6879      	ldr	r1, [r7, #4]
 801d166:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d168:	440b      	add	r3, r1
 801d16a:	429a      	cmp	r2, r3
 801d16c:	d019      	beq.n	801d1a2 <tcp_receive+0xec6>
 801d16e:	4b24      	ldr	r3, [pc, #144]	; (801d200 <tcp_receive+0xf24>)
 801d170:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801d174:	4923      	ldr	r1, [pc, #140]	; (801d204 <tcp_receive+0xf28>)
 801d176:	4824      	ldr	r0, [pc, #144]	; (801d208 <tcp_receive+0xf2c>)
 801d178:	f006 fe02 	bl	8023d80 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801d17c:	e011      	b.n	801d1a2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d180:	681b      	ldr	r3, [r3, #0]
 801d182:	63bb      	str	r3, [r7, #56]	; 0x38
 801d184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d186:	2b00      	cmp	r3, #0
 801d188:	f47f aea4 	bne.w	801ced4 <tcp_receive+0xbf8>
 801d18c:	e00a      	b.n	801d1a4 <tcp_receive+0xec8>
                break;
 801d18e:	bf00      	nop
 801d190:	e008      	b.n	801d1a4 <tcp_receive+0xec8>
                break;
 801d192:	bf00      	nop
 801d194:	e006      	b.n	801d1a4 <tcp_receive+0xec8>
                  break;
 801d196:	bf00      	nop
 801d198:	e004      	b.n	801d1a4 <tcp_receive+0xec8>
                  break;
 801d19a:	bf00      	nop
 801d19c:	e002      	b.n	801d1a4 <tcp_receive+0xec8>
                  break;
 801d19e:	bf00      	nop
 801d1a0:	e000      	b.n	801d1a4 <tcp_receive+0xec8>
                break;
 801d1a2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801d1a4:	6878      	ldr	r0, [r7, #4]
 801d1a6:	f001 fe8b 	bl	801eec0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801d1aa:	e003      	b.n	801d1b4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801d1ac:	6878      	ldr	r0, [r7, #4]
 801d1ae:	f001 fe87 	bl	801eec0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d1b2:	e01a      	b.n	801d1ea <tcp_receive+0xf0e>
 801d1b4:	e019      	b.n	801d1ea <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801d1b6:	4b0f      	ldr	r3, [pc, #60]	; (801d1f4 <tcp_receive+0xf18>)
 801d1b8:	681a      	ldr	r2, [r3, #0]
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1be:	1ad3      	subs	r3, r2, r3
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	db0a      	blt.n	801d1da <tcp_receive+0xefe>
 801d1c4:	4b0b      	ldr	r3, [pc, #44]	; (801d1f4 <tcp_receive+0xf18>)
 801d1c6:	681a      	ldr	r2, [r3, #0]
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1cc:	6879      	ldr	r1, [r7, #4]
 801d1ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d1d0:	440b      	add	r3, r1
 801d1d2:	1ad3      	subs	r3, r2, r3
 801d1d4:	3301      	adds	r3, #1
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	dd07      	ble.n	801d1ea <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801d1da:	687b      	ldr	r3, [r7, #4]
 801d1dc:	8b5b      	ldrh	r3, [r3, #26]
 801d1de:	f043 0302 	orr.w	r3, r3, #2
 801d1e2:	b29a      	uxth	r2, r3
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801d1e8:	e7ff      	b.n	801d1ea <tcp_receive+0xf0e>
 801d1ea:	bf00      	nop
 801d1ec:	3750      	adds	r7, #80	; 0x50
 801d1ee:	46bd      	mov	sp, r7
 801d1f0:	bdb0      	pop	{r4, r5, r7, pc}
 801d1f2:	bf00      	nop
 801d1f4:	2000bfd0 	.word	0x2000bfd0
 801d1f8:	2000bfb0 	.word	0x2000bfb0
 801d1fc:	2000bfda 	.word	0x2000bfda
 801d200:	08027044 	.word	0x08027044
 801d204:	080273ec 	.word	0x080273ec
 801d208:	08027090 	.word	0x08027090

0801d20c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801d20c:	b480      	push	{r7}
 801d20e:	b083      	sub	sp, #12
 801d210:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801d212:	4b15      	ldr	r3, [pc, #84]	; (801d268 <tcp_get_next_optbyte+0x5c>)
 801d214:	881b      	ldrh	r3, [r3, #0]
 801d216:	1c5a      	adds	r2, r3, #1
 801d218:	b291      	uxth	r1, r2
 801d21a:	4a13      	ldr	r2, [pc, #76]	; (801d268 <tcp_get_next_optbyte+0x5c>)
 801d21c:	8011      	strh	r1, [r2, #0]
 801d21e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d220:	4b12      	ldr	r3, [pc, #72]	; (801d26c <tcp_get_next_optbyte+0x60>)
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	2b00      	cmp	r3, #0
 801d226:	d004      	beq.n	801d232 <tcp_get_next_optbyte+0x26>
 801d228:	4b11      	ldr	r3, [pc, #68]	; (801d270 <tcp_get_next_optbyte+0x64>)
 801d22a:	881b      	ldrh	r3, [r3, #0]
 801d22c:	88fa      	ldrh	r2, [r7, #6]
 801d22e:	429a      	cmp	r2, r3
 801d230:	d208      	bcs.n	801d244 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d232:	4b10      	ldr	r3, [pc, #64]	; (801d274 <tcp_get_next_optbyte+0x68>)
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	3314      	adds	r3, #20
 801d238:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801d23a:	88fb      	ldrh	r3, [r7, #6]
 801d23c:	683a      	ldr	r2, [r7, #0]
 801d23e:	4413      	add	r3, r2
 801d240:	781b      	ldrb	r3, [r3, #0]
 801d242:	e00b      	b.n	801d25c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d244:	88fb      	ldrh	r3, [r7, #6]
 801d246:	b2da      	uxtb	r2, r3
 801d248:	4b09      	ldr	r3, [pc, #36]	; (801d270 <tcp_get_next_optbyte+0x64>)
 801d24a:	881b      	ldrh	r3, [r3, #0]
 801d24c:	b2db      	uxtb	r3, r3
 801d24e:	1ad3      	subs	r3, r2, r3
 801d250:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801d252:	4b06      	ldr	r3, [pc, #24]	; (801d26c <tcp_get_next_optbyte+0x60>)
 801d254:	681a      	ldr	r2, [r3, #0]
 801d256:	797b      	ldrb	r3, [r7, #5]
 801d258:	4413      	add	r3, r2
 801d25a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d25c:	4618      	mov	r0, r3
 801d25e:	370c      	adds	r7, #12
 801d260:	46bd      	mov	sp, r7
 801d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d266:	4770      	bx	lr
 801d268:	2000bfcc 	.word	0x2000bfcc
 801d26c:	2000bfc8 	.word	0x2000bfc8
 801d270:	2000bfc6 	.word	0x2000bfc6
 801d274:	2000bfc0 	.word	0x2000bfc0

0801d278 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801d278:	b580      	push	{r7, lr}
 801d27a:	b084      	sub	sp, #16
 801d27c:	af00      	add	r7, sp, #0
 801d27e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	2b00      	cmp	r3, #0
 801d284:	d106      	bne.n	801d294 <tcp_parseopt+0x1c>
 801d286:	4b32      	ldr	r3, [pc, #200]	; (801d350 <tcp_parseopt+0xd8>)
 801d288:	f240 727d 	movw	r2, #1917	; 0x77d
 801d28c:	4931      	ldr	r1, [pc, #196]	; (801d354 <tcp_parseopt+0xdc>)
 801d28e:	4832      	ldr	r0, [pc, #200]	; (801d358 <tcp_parseopt+0xe0>)
 801d290:	f006 fd76 	bl	8023d80 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801d294:	4b31      	ldr	r3, [pc, #196]	; (801d35c <tcp_parseopt+0xe4>)
 801d296:	881b      	ldrh	r3, [r3, #0]
 801d298:	2b00      	cmp	r3, #0
 801d29a:	d055      	beq.n	801d348 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d29c:	4b30      	ldr	r3, [pc, #192]	; (801d360 <tcp_parseopt+0xe8>)
 801d29e:	2200      	movs	r2, #0
 801d2a0:	801a      	strh	r2, [r3, #0]
 801d2a2:	e045      	b.n	801d330 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801d2a4:	f7ff ffb2 	bl	801d20c <tcp_get_next_optbyte>
 801d2a8:	4603      	mov	r3, r0
 801d2aa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801d2ac:	7bfb      	ldrb	r3, [r7, #15]
 801d2ae:	2b02      	cmp	r3, #2
 801d2b0:	d006      	beq.n	801d2c0 <tcp_parseopt+0x48>
 801d2b2:	2b02      	cmp	r3, #2
 801d2b4:	dc2b      	bgt.n	801d30e <tcp_parseopt+0x96>
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d041      	beq.n	801d33e <tcp_parseopt+0xc6>
 801d2ba:	2b01      	cmp	r3, #1
 801d2bc:	d127      	bne.n	801d30e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801d2be:	e037      	b.n	801d330 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d2c0:	f7ff ffa4 	bl	801d20c <tcp_get_next_optbyte>
 801d2c4:	4603      	mov	r3, r0
 801d2c6:	2b04      	cmp	r3, #4
 801d2c8:	d13b      	bne.n	801d342 <tcp_parseopt+0xca>
 801d2ca:	4b25      	ldr	r3, [pc, #148]	; (801d360 <tcp_parseopt+0xe8>)
 801d2cc:	881b      	ldrh	r3, [r3, #0]
 801d2ce:	3301      	adds	r3, #1
 801d2d0:	4a22      	ldr	r2, [pc, #136]	; (801d35c <tcp_parseopt+0xe4>)
 801d2d2:	8812      	ldrh	r2, [r2, #0]
 801d2d4:	4293      	cmp	r3, r2
 801d2d6:	da34      	bge.n	801d342 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d2d8:	f7ff ff98 	bl	801d20c <tcp_get_next_optbyte>
 801d2dc:	4603      	mov	r3, r0
 801d2de:	b29b      	uxth	r3, r3
 801d2e0:	021b      	lsls	r3, r3, #8
 801d2e2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801d2e4:	f7ff ff92 	bl	801d20c <tcp_get_next_optbyte>
 801d2e8:	4603      	mov	r3, r0
 801d2ea:	b29a      	uxth	r2, r3
 801d2ec:	89bb      	ldrh	r3, [r7, #12]
 801d2ee:	4313      	orrs	r3, r2
 801d2f0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d2f2:	89bb      	ldrh	r3, [r7, #12]
 801d2f4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801d2f8:	d804      	bhi.n	801d304 <tcp_parseopt+0x8c>
 801d2fa:	89bb      	ldrh	r3, [r7, #12]
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d001      	beq.n	801d304 <tcp_parseopt+0x8c>
 801d300:	89ba      	ldrh	r2, [r7, #12]
 801d302:	e001      	b.n	801d308 <tcp_parseopt+0x90>
 801d304:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801d30c:	e010      	b.n	801d330 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801d30e:	f7ff ff7d 	bl	801d20c <tcp_get_next_optbyte>
 801d312:	4603      	mov	r3, r0
 801d314:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801d316:	7afb      	ldrb	r3, [r7, #11]
 801d318:	2b01      	cmp	r3, #1
 801d31a:	d914      	bls.n	801d346 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d31c:	7afb      	ldrb	r3, [r7, #11]
 801d31e:	b29a      	uxth	r2, r3
 801d320:	4b0f      	ldr	r3, [pc, #60]	; (801d360 <tcp_parseopt+0xe8>)
 801d322:	881b      	ldrh	r3, [r3, #0]
 801d324:	4413      	add	r3, r2
 801d326:	b29b      	uxth	r3, r3
 801d328:	3b02      	subs	r3, #2
 801d32a:	b29a      	uxth	r2, r3
 801d32c:	4b0c      	ldr	r3, [pc, #48]	; (801d360 <tcp_parseopt+0xe8>)
 801d32e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d330:	4b0b      	ldr	r3, [pc, #44]	; (801d360 <tcp_parseopt+0xe8>)
 801d332:	881a      	ldrh	r2, [r3, #0]
 801d334:	4b09      	ldr	r3, [pc, #36]	; (801d35c <tcp_parseopt+0xe4>)
 801d336:	881b      	ldrh	r3, [r3, #0]
 801d338:	429a      	cmp	r2, r3
 801d33a:	d3b3      	bcc.n	801d2a4 <tcp_parseopt+0x2c>
 801d33c:	e004      	b.n	801d348 <tcp_parseopt+0xd0>
          return;
 801d33e:	bf00      	nop
 801d340:	e002      	b.n	801d348 <tcp_parseopt+0xd0>
            return;
 801d342:	bf00      	nop
 801d344:	e000      	b.n	801d348 <tcp_parseopt+0xd0>
            return;
 801d346:	bf00      	nop
      }
    }
  }
}
 801d348:	3710      	adds	r7, #16
 801d34a:	46bd      	mov	sp, r7
 801d34c:	bd80      	pop	{r7, pc}
 801d34e:	bf00      	nop
 801d350:	08027044 	.word	0x08027044
 801d354:	080274a8 	.word	0x080274a8
 801d358:	08027090 	.word	0x08027090
 801d35c:	2000bfc4 	.word	0x2000bfc4
 801d360:	2000bfcc 	.word	0x2000bfcc

0801d364 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801d364:	b480      	push	{r7}
 801d366:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801d368:	4b05      	ldr	r3, [pc, #20]	; (801d380 <tcp_trigger_input_pcb_close+0x1c>)
 801d36a:	781b      	ldrb	r3, [r3, #0]
 801d36c:	f043 0310 	orr.w	r3, r3, #16
 801d370:	b2da      	uxtb	r2, r3
 801d372:	4b03      	ldr	r3, [pc, #12]	; (801d380 <tcp_trigger_input_pcb_close+0x1c>)
 801d374:	701a      	strb	r2, [r3, #0]
}
 801d376:	bf00      	nop
 801d378:	46bd      	mov	sp, r7
 801d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d37e:	4770      	bx	lr
 801d380:	2000bfdd 	.word	0x2000bfdd

0801d384 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801d384:	b580      	push	{r7, lr}
 801d386:	b084      	sub	sp, #16
 801d388:	af00      	add	r7, sp, #0
 801d38a:	60f8      	str	r0, [r7, #12]
 801d38c:	60b9      	str	r1, [r7, #8]
 801d38e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	2b00      	cmp	r3, #0
 801d394:	d00a      	beq.n	801d3ac <tcp_route+0x28>
 801d396:	68fb      	ldr	r3, [r7, #12]
 801d398:	7a1b      	ldrb	r3, [r3, #8]
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	d006      	beq.n	801d3ac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801d39e:	68fb      	ldr	r3, [r7, #12]
 801d3a0:	7a1b      	ldrb	r3, [r3, #8]
 801d3a2:	4618      	mov	r0, r3
 801d3a4:	f7fa ff26 	bl	80181f4 <netif_get_by_index>
 801d3a8:	4603      	mov	r3, r0
 801d3aa:	e003      	b.n	801d3b4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801d3ac:	6878      	ldr	r0, [r7, #4]
 801d3ae:	f003 fea3 	bl	80210f8 <ip4_route>
 801d3b2:	4603      	mov	r3, r0
  }
}
 801d3b4:	4618      	mov	r0, r3
 801d3b6:	3710      	adds	r7, #16
 801d3b8:	46bd      	mov	sp, r7
 801d3ba:	bd80      	pop	{r7, pc}

0801d3bc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801d3bc:	b590      	push	{r4, r7, lr}
 801d3be:	b087      	sub	sp, #28
 801d3c0:	af00      	add	r7, sp, #0
 801d3c2:	60f8      	str	r0, [r7, #12]
 801d3c4:	60b9      	str	r1, [r7, #8]
 801d3c6:	603b      	str	r3, [r7, #0]
 801d3c8:	4613      	mov	r3, r2
 801d3ca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801d3cc:	68fb      	ldr	r3, [r7, #12]
 801d3ce:	2b00      	cmp	r3, #0
 801d3d0:	d105      	bne.n	801d3de <tcp_create_segment+0x22>
 801d3d2:	4b44      	ldr	r3, [pc, #272]	; (801d4e4 <tcp_create_segment+0x128>)
 801d3d4:	22a3      	movs	r2, #163	; 0xa3
 801d3d6:	4944      	ldr	r1, [pc, #272]	; (801d4e8 <tcp_create_segment+0x12c>)
 801d3d8:	4844      	ldr	r0, [pc, #272]	; (801d4ec <tcp_create_segment+0x130>)
 801d3da:	f006 fcd1 	bl	8023d80 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801d3de:	68bb      	ldr	r3, [r7, #8]
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	d105      	bne.n	801d3f0 <tcp_create_segment+0x34>
 801d3e4:	4b3f      	ldr	r3, [pc, #252]	; (801d4e4 <tcp_create_segment+0x128>)
 801d3e6:	22a4      	movs	r2, #164	; 0xa4
 801d3e8:	4941      	ldr	r1, [pc, #260]	; (801d4f0 <tcp_create_segment+0x134>)
 801d3ea:	4840      	ldr	r0, [pc, #256]	; (801d4ec <tcp_create_segment+0x130>)
 801d3ec:	f006 fcc8 	bl	8023d80 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d3f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d3f4:	009b      	lsls	r3, r3, #2
 801d3f6:	b2db      	uxtb	r3, r3
 801d3f8:	f003 0304 	and.w	r3, r3, #4
 801d3fc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801d3fe:	2003      	movs	r0, #3
 801d400:	f7fa fb6c 	bl	8017adc <memp_malloc>
 801d404:	6138      	str	r0, [r7, #16]
 801d406:	693b      	ldr	r3, [r7, #16]
 801d408:	2b00      	cmp	r3, #0
 801d40a:	d104      	bne.n	801d416 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801d40c:	68b8      	ldr	r0, [r7, #8]
 801d40e:	f7fb fa7f 	bl	8018910 <pbuf_free>
    return NULL;
 801d412:	2300      	movs	r3, #0
 801d414:	e061      	b.n	801d4da <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801d416:	693b      	ldr	r3, [r7, #16]
 801d418:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d41c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801d41e:	693b      	ldr	r3, [r7, #16]
 801d420:	2200      	movs	r2, #0
 801d422:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801d424:	693b      	ldr	r3, [r7, #16]
 801d426:	68ba      	ldr	r2, [r7, #8]
 801d428:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d42a:	68bb      	ldr	r3, [r7, #8]
 801d42c:	891a      	ldrh	r2, [r3, #8]
 801d42e:	7dfb      	ldrb	r3, [r7, #23]
 801d430:	b29b      	uxth	r3, r3
 801d432:	429a      	cmp	r2, r3
 801d434:	d205      	bcs.n	801d442 <tcp_create_segment+0x86>
 801d436:	4b2b      	ldr	r3, [pc, #172]	; (801d4e4 <tcp_create_segment+0x128>)
 801d438:	22b0      	movs	r2, #176	; 0xb0
 801d43a:	492e      	ldr	r1, [pc, #184]	; (801d4f4 <tcp_create_segment+0x138>)
 801d43c:	482b      	ldr	r0, [pc, #172]	; (801d4ec <tcp_create_segment+0x130>)
 801d43e:	f006 fc9f 	bl	8023d80 <iprintf>
  seg->len = p->tot_len - optlen;
 801d442:	68bb      	ldr	r3, [r7, #8]
 801d444:	891a      	ldrh	r2, [r3, #8]
 801d446:	7dfb      	ldrb	r3, [r7, #23]
 801d448:	b29b      	uxth	r3, r3
 801d44a:	1ad3      	subs	r3, r2, r3
 801d44c:	b29a      	uxth	r2, r3
 801d44e:	693b      	ldr	r3, [r7, #16]
 801d450:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801d452:	2114      	movs	r1, #20
 801d454:	68b8      	ldr	r0, [r7, #8]
 801d456:	f7fb f9c5 	bl	80187e4 <pbuf_add_header>
 801d45a:	4603      	mov	r3, r0
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d004      	beq.n	801d46a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801d460:	6938      	ldr	r0, [r7, #16]
 801d462:	f7fd f800 	bl	801a466 <tcp_seg_free>
    return NULL;
 801d466:	2300      	movs	r3, #0
 801d468:	e037      	b.n	801d4da <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d46a:	693b      	ldr	r3, [r7, #16]
 801d46c:	685b      	ldr	r3, [r3, #4]
 801d46e:	685a      	ldr	r2, [r3, #4]
 801d470:	693b      	ldr	r3, [r7, #16]
 801d472:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801d474:	68fb      	ldr	r3, [r7, #12]
 801d476:	8ada      	ldrh	r2, [r3, #22]
 801d478:	693b      	ldr	r3, [r7, #16]
 801d47a:	68dc      	ldr	r4, [r3, #12]
 801d47c:	4610      	mov	r0, r2
 801d47e:	f7f9 fe55 	bl	801712c <lwip_htons>
 801d482:	4603      	mov	r3, r0
 801d484:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801d486:	68fb      	ldr	r3, [r7, #12]
 801d488:	8b1a      	ldrh	r2, [r3, #24]
 801d48a:	693b      	ldr	r3, [r7, #16]
 801d48c:	68dc      	ldr	r4, [r3, #12]
 801d48e:	4610      	mov	r0, r2
 801d490:	f7f9 fe4c 	bl	801712c <lwip_htons>
 801d494:	4603      	mov	r3, r0
 801d496:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801d498:	693b      	ldr	r3, [r7, #16]
 801d49a:	68dc      	ldr	r4, [r3, #12]
 801d49c:	6838      	ldr	r0, [r7, #0]
 801d49e:	f7f9 fe5a 	bl	8017156 <lwip_htonl>
 801d4a2:	4603      	mov	r3, r0
 801d4a4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d4a6:	7dfb      	ldrb	r3, [r7, #23]
 801d4a8:	089b      	lsrs	r3, r3, #2
 801d4aa:	b2db      	uxtb	r3, r3
 801d4ac:	b29b      	uxth	r3, r3
 801d4ae:	3305      	adds	r3, #5
 801d4b0:	b29b      	uxth	r3, r3
 801d4b2:	031b      	lsls	r3, r3, #12
 801d4b4:	b29a      	uxth	r2, r3
 801d4b6:	79fb      	ldrb	r3, [r7, #7]
 801d4b8:	b29b      	uxth	r3, r3
 801d4ba:	4313      	orrs	r3, r2
 801d4bc:	b29a      	uxth	r2, r3
 801d4be:	693b      	ldr	r3, [r7, #16]
 801d4c0:	68dc      	ldr	r4, [r3, #12]
 801d4c2:	4610      	mov	r0, r2
 801d4c4:	f7f9 fe32 	bl	801712c <lwip_htons>
 801d4c8:	4603      	mov	r3, r0
 801d4ca:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801d4cc:	693b      	ldr	r3, [r7, #16]
 801d4ce:	68db      	ldr	r3, [r3, #12]
 801d4d0:	2200      	movs	r2, #0
 801d4d2:	749a      	strb	r2, [r3, #18]
 801d4d4:	2200      	movs	r2, #0
 801d4d6:	74da      	strb	r2, [r3, #19]
  return seg;
 801d4d8:	693b      	ldr	r3, [r7, #16]
}
 801d4da:	4618      	mov	r0, r3
 801d4dc:	371c      	adds	r7, #28
 801d4de:	46bd      	mov	sp, r7
 801d4e0:	bd90      	pop	{r4, r7, pc}
 801d4e2:	bf00      	nop
 801d4e4:	080274c4 	.word	0x080274c4
 801d4e8:	080274f8 	.word	0x080274f8
 801d4ec:	08027518 	.word	0x08027518
 801d4f0:	08027540 	.word	0x08027540
 801d4f4:	08027564 	.word	0x08027564

0801d4f8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801d4f8:	b580      	push	{r7, lr}
 801d4fa:	b086      	sub	sp, #24
 801d4fc:	af00      	add	r7, sp, #0
 801d4fe:	607b      	str	r3, [r7, #4]
 801d500:	4603      	mov	r3, r0
 801d502:	73fb      	strb	r3, [r7, #15]
 801d504:	460b      	mov	r3, r1
 801d506:	81bb      	strh	r3, [r7, #12]
 801d508:	4613      	mov	r3, r2
 801d50a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801d50c:	89bb      	ldrh	r3, [r7, #12]
 801d50e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	2b00      	cmp	r3, #0
 801d514:	d105      	bne.n	801d522 <tcp_pbuf_prealloc+0x2a>
 801d516:	4b30      	ldr	r3, [pc, #192]	; (801d5d8 <tcp_pbuf_prealloc+0xe0>)
 801d518:	22e8      	movs	r2, #232	; 0xe8
 801d51a:	4930      	ldr	r1, [pc, #192]	; (801d5dc <tcp_pbuf_prealloc+0xe4>)
 801d51c:	4830      	ldr	r0, [pc, #192]	; (801d5e0 <tcp_pbuf_prealloc+0xe8>)
 801d51e:	f006 fc2f 	bl	8023d80 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801d522:	6a3b      	ldr	r3, [r7, #32]
 801d524:	2b00      	cmp	r3, #0
 801d526:	d105      	bne.n	801d534 <tcp_pbuf_prealloc+0x3c>
 801d528:	4b2b      	ldr	r3, [pc, #172]	; (801d5d8 <tcp_pbuf_prealloc+0xe0>)
 801d52a:	22e9      	movs	r2, #233	; 0xe9
 801d52c:	492d      	ldr	r1, [pc, #180]	; (801d5e4 <tcp_pbuf_prealloc+0xec>)
 801d52e:	482c      	ldr	r0, [pc, #176]	; (801d5e0 <tcp_pbuf_prealloc+0xe8>)
 801d530:	f006 fc26 	bl	8023d80 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801d534:	89ba      	ldrh	r2, [r7, #12]
 801d536:	897b      	ldrh	r3, [r7, #10]
 801d538:	429a      	cmp	r2, r3
 801d53a:	d221      	bcs.n	801d580 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d53c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d540:	f003 0302 	and.w	r3, r3, #2
 801d544:	2b00      	cmp	r3, #0
 801d546:	d111      	bne.n	801d56c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801d548:	6a3b      	ldr	r3, [r7, #32]
 801d54a:	8b5b      	ldrh	r3, [r3, #26]
 801d54c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d550:	2b00      	cmp	r3, #0
 801d552:	d115      	bne.n	801d580 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801d554:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d007      	beq.n	801d56c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801d55c:	6a3b      	ldr	r3, [r7, #32]
 801d55e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801d560:	2b00      	cmp	r3, #0
 801d562:	d103      	bne.n	801d56c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801d564:	6a3b      	ldr	r3, [r7, #32]
 801d566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801d568:	2b00      	cmp	r3, #0
 801d56a:	d009      	beq.n	801d580 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801d56c:	89bb      	ldrh	r3, [r7, #12]
 801d56e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801d572:	f023 0203 	bic.w	r2, r3, #3
 801d576:	897b      	ldrh	r3, [r7, #10]
 801d578:	4293      	cmp	r3, r2
 801d57a:	bf28      	it	cs
 801d57c:	4613      	movcs	r3, r2
 801d57e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801d580:	8af9      	ldrh	r1, [r7, #22]
 801d582:	7bfb      	ldrb	r3, [r7, #15]
 801d584:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d588:	4618      	mov	r0, r3
 801d58a:	f7fa fedd 	bl	8018348 <pbuf_alloc>
 801d58e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d590:	693b      	ldr	r3, [r7, #16]
 801d592:	2b00      	cmp	r3, #0
 801d594:	d101      	bne.n	801d59a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801d596:	2300      	movs	r3, #0
 801d598:	e019      	b.n	801d5ce <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801d59a:	693b      	ldr	r3, [r7, #16]
 801d59c:	681b      	ldr	r3, [r3, #0]
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	d006      	beq.n	801d5b0 <tcp_pbuf_prealloc+0xb8>
 801d5a2:	4b0d      	ldr	r3, [pc, #52]	; (801d5d8 <tcp_pbuf_prealloc+0xe0>)
 801d5a4:	f240 120b 	movw	r2, #267	; 0x10b
 801d5a8:	490f      	ldr	r1, [pc, #60]	; (801d5e8 <tcp_pbuf_prealloc+0xf0>)
 801d5aa:	480d      	ldr	r0, [pc, #52]	; (801d5e0 <tcp_pbuf_prealloc+0xe8>)
 801d5ac:	f006 fbe8 	bl	8023d80 <iprintf>
  *oversize = p->len - length;
 801d5b0:	693b      	ldr	r3, [r7, #16]
 801d5b2:	895a      	ldrh	r2, [r3, #10]
 801d5b4:	89bb      	ldrh	r3, [r7, #12]
 801d5b6:	1ad3      	subs	r3, r2, r3
 801d5b8:	b29a      	uxth	r2, r3
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801d5be:	693b      	ldr	r3, [r7, #16]
 801d5c0:	89ba      	ldrh	r2, [r7, #12]
 801d5c2:	811a      	strh	r2, [r3, #8]
 801d5c4:	693b      	ldr	r3, [r7, #16]
 801d5c6:	891a      	ldrh	r2, [r3, #8]
 801d5c8:	693b      	ldr	r3, [r7, #16]
 801d5ca:	815a      	strh	r2, [r3, #10]
  return p;
 801d5cc:	693b      	ldr	r3, [r7, #16]
}
 801d5ce:	4618      	mov	r0, r3
 801d5d0:	3718      	adds	r7, #24
 801d5d2:	46bd      	mov	sp, r7
 801d5d4:	bd80      	pop	{r7, pc}
 801d5d6:	bf00      	nop
 801d5d8:	080274c4 	.word	0x080274c4
 801d5dc:	0802757c 	.word	0x0802757c
 801d5e0:	08027518 	.word	0x08027518
 801d5e4:	080275a0 	.word	0x080275a0
 801d5e8:	080275c0 	.word	0x080275c0

0801d5ec <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801d5ec:	b580      	push	{r7, lr}
 801d5ee:	b082      	sub	sp, #8
 801d5f0:	af00      	add	r7, sp, #0
 801d5f2:	6078      	str	r0, [r7, #4]
 801d5f4:	460b      	mov	r3, r1
 801d5f6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801d5f8:	687b      	ldr	r3, [r7, #4]
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	d106      	bne.n	801d60c <tcp_write_checks+0x20>
 801d5fe:	4b33      	ldr	r3, [pc, #204]	; (801d6cc <tcp_write_checks+0xe0>)
 801d600:	f240 1233 	movw	r2, #307	; 0x133
 801d604:	4932      	ldr	r1, [pc, #200]	; (801d6d0 <tcp_write_checks+0xe4>)
 801d606:	4833      	ldr	r0, [pc, #204]	; (801d6d4 <tcp_write_checks+0xe8>)
 801d608:	f006 fbba 	bl	8023d80 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	7d1b      	ldrb	r3, [r3, #20]
 801d610:	2b04      	cmp	r3, #4
 801d612:	d00e      	beq.n	801d632 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801d618:	2b07      	cmp	r3, #7
 801d61a:	d00a      	beq.n	801d632 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801d620:	2b02      	cmp	r3, #2
 801d622:	d006      	beq.n	801d632 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801d628:	2b03      	cmp	r3, #3
 801d62a:	d002      	beq.n	801d632 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801d62c:	f06f 030a 	mvn.w	r3, #10
 801d630:	e048      	b.n	801d6c4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801d632:	887b      	ldrh	r3, [r7, #2]
 801d634:	2b00      	cmp	r3, #0
 801d636:	d101      	bne.n	801d63c <tcp_write_checks+0x50>
    return ERR_OK;
 801d638:	2300      	movs	r3, #0
 801d63a:	e043      	b.n	801d6c4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801d63c:	687b      	ldr	r3, [r7, #4]
 801d63e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801d642:	887a      	ldrh	r2, [r7, #2]
 801d644:	429a      	cmp	r2, r3
 801d646:	d909      	bls.n	801d65c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d648:	687b      	ldr	r3, [r7, #4]
 801d64a:	8b5b      	ldrh	r3, [r3, #26]
 801d64c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d650:	b29a      	uxth	r2, r3
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801d656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d65a:	e033      	b.n	801d6c4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d662:	2b08      	cmp	r3, #8
 801d664:	d909      	bls.n	801d67a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	8b5b      	ldrh	r3, [r3, #26]
 801d66a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d66e:	b29a      	uxth	r2, r3
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801d674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d678:	e024      	b.n	801d6c4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d680:	2b00      	cmp	r3, #0
 801d682:	d00f      	beq.n	801d6a4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801d684:	687b      	ldr	r3, [r7, #4]
 801d686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d11a      	bne.n	801d6c2 <tcp_write_checks+0xd6>
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d690:	2b00      	cmp	r3, #0
 801d692:	d116      	bne.n	801d6c2 <tcp_write_checks+0xd6>
 801d694:	4b0d      	ldr	r3, [pc, #52]	; (801d6cc <tcp_write_checks+0xe0>)
 801d696:	f240 1255 	movw	r2, #341	; 0x155
 801d69a:	490f      	ldr	r1, [pc, #60]	; (801d6d8 <tcp_write_checks+0xec>)
 801d69c:	480d      	ldr	r0, [pc, #52]	; (801d6d4 <tcp_write_checks+0xe8>)
 801d69e:	f006 fb6f 	bl	8023d80 <iprintf>
 801d6a2:	e00e      	b.n	801d6c2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801d6a4:	687b      	ldr	r3, [r7, #4]
 801d6a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d103      	bne.n	801d6b4 <tcp_write_checks+0xc8>
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d006      	beq.n	801d6c2 <tcp_write_checks+0xd6>
 801d6b4:	4b05      	ldr	r3, [pc, #20]	; (801d6cc <tcp_write_checks+0xe0>)
 801d6b6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801d6ba:	4908      	ldr	r1, [pc, #32]	; (801d6dc <tcp_write_checks+0xf0>)
 801d6bc:	4805      	ldr	r0, [pc, #20]	; (801d6d4 <tcp_write_checks+0xe8>)
 801d6be:	f006 fb5f 	bl	8023d80 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801d6c2:	2300      	movs	r3, #0
}
 801d6c4:	4618      	mov	r0, r3
 801d6c6:	3708      	adds	r7, #8
 801d6c8:	46bd      	mov	sp, r7
 801d6ca:	bd80      	pop	{r7, pc}
 801d6cc:	080274c4 	.word	0x080274c4
 801d6d0:	080275d4 	.word	0x080275d4
 801d6d4:	08027518 	.word	0x08027518
 801d6d8:	080275f4 	.word	0x080275f4
 801d6dc:	08027630 	.word	0x08027630

0801d6e0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801d6e0:	b590      	push	{r4, r7, lr}
 801d6e2:	b09b      	sub	sp, #108	; 0x6c
 801d6e4:	af04      	add	r7, sp, #16
 801d6e6:	60f8      	str	r0, [r7, #12]
 801d6e8:	60b9      	str	r1, [r7, #8]
 801d6ea:	4611      	mov	r1, r2
 801d6ec:	461a      	mov	r2, r3
 801d6ee:	460b      	mov	r3, r1
 801d6f0:	80fb      	strh	r3, [r7, #6]
 801d6f2:	4613      	mov	r3, r2
 801d6f4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801d6fa:	2300      	movs	r3, #0
 801d6fc:	653b      	str	r3, [r7, #80]	; 0x50
 801d6fe:	2300      	movs	r3, #0
 801d700:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d702:	2300      	movs	r3, #0
 801d704:	64bb      	str	r3, [r7, #72]	; 0x48
 801d706:	2300      	movs	r3, #0
 801d708:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801d70a:	2300      	movs	r3, #0
 801d70c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801d710:	2300      	movs	r3, #0
 801d712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801d716:	2300      	movs	r3, #0
 801d718:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801d71a:	2300      	movs	r3, #0
 801d71c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801d71e:	2300      	movs	r3, #0
 801d720:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	2b00      	cmp	r3, #0
 801d726:	d109      	bne.n	801d73c <tcp_write+0x5c>
 801d728:	4ba4      	ldr	r3, [pc, #656]	; (801d9bc <tcp_write+0x2dc>)
 801d72a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801d72e:	49a4      	ldr	r1, [pc, #656]	; (801d9c0 <tcp_write+0x2e0>)
 801d730:	48a4      	ldr	r0, [pc, #656]	; (801d9c4 <tcp_write+0x2e4>)
 801d732:	f006 fb25 	bl	8023d80 <iprintf>
 801d736:	f06f 030f 	mvn.w	r3, #15
 801d73a:	e32a      	b.n	801dd92 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801d73c:	68fb      	ldr	r3, [r7, #12]
 801d73e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d742:	085b      	lsrs	r3, r3, #1
 801d744:	b29a      	uxth	r2, r3
 801d746:	68fb      	ldr	r3, [r7, #12]
 801d748:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d74a:	4293      	cmp	r3, r2
 801d74c:	bf28      	it	cs
 801d74e:	4613      	movcs	r3, r2
 801d750:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801d752:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d754:	2b00      	cmp	r3, #0
 801d756:	d102      	bne.n	801d75e <tcp_write+0x7e>
 801d758:	68fb      	ldr	r3, [r7, #12]
 801d75a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d75c:	e000      	b.n	801d760 <tcp_write+0x80>
 801d75e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d760:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801d762:	68bb      	ldr	r3, [r7, #8]
 801d764:	2b00      	cmp	r3, #0
 801d766:	d109      	bne.n	801d77c <tcp_write+0x9c>
 801d768:	4b94      	ldr	r3, [pc, #592]	; (801d9bc <tcp_write+0x2dc>)
 801d76a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801d76e:	4996      	ldr	r1, [pc, #600]	; (801d9c8 <tcp_write+0x2e8>)
 801d770:	4894      	ldr	r0, [pc, #592]	; (801d9c4 <tcp_write+0x2e4>)
 801d772:	f006 fb05 	bl	8023d80 <iprintf>
 801d776:	f06f 030f 	mvn.w	r3, #15
 801d77a:	e30a      	b.n	801dd92 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801d77c:	88fb      	ldrh	r3, [r7, #6]
 801d77e:	4619      	mov	r1, r3
 801d780:	68f8      	ldr	r0, [r7, #12]
 801d782:	f7ff ff33 	bl	801d5ec <tcp_write_checks>
 801d786:	4603      	mov	r3, r0
 801d788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801d78c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801d790:	2b00      	cmp	r3, #0
 801d792:	d002      	beq.n	801d79a <tcp_write+0xba>
    return err;
 801d794:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801d798:	e2fb      	b.n	801dd92 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801d79a:	68fb      	ldr	r3, [r7, #12]
 801d79c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d7a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d7a4:	2300      	movs	r3, #0
 801d7a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801d7aa:	68fb      	ldr	r3, [r7, #12]
 801d7ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	f000 80f6 	beq.w	801d9a0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d7b4:	68fb      	ldr	r3, [r7, #12]
 801d7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d7b8:	653b      	str	r3, [r7, #80]	; 0x50
 801d7ba:	e002      	b.n	801d7c2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801d7bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d7be:	681b      	ldr	r3, [r3, #0]
 801d7c0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d7c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d7c4:	681b      	ldr	r3, [r3, #0]
 801d7c6:	2b00      	cmp	r3, #0
 801d7c8:	d1f8      	bne.n	801d7bc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801d7ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d7cc:	7a9b      	ldrb	r3, [r3, #10]
 801d7ce:	009b      	lsls	r3, r3, #2
 801d7d0:	b29b      	uxth	r3, r3
 801d7d2:	f003 0304 	and.w	r3, r3, #4
 801d7d6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801d7d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d7da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d7dc:	891b      	ldrh	r3, [r3, #8]
 801d7de:	4619      	mov	r1, r3
 801d7e0:	8c3b      	ldrh	r3, [r7, #32]
 801d7e2:	440b      	add	r3, r1
 801d7e4:	429a      	cmp	r2, r3
 801d7e6:	da06      	bge.n	801d7f6 <tcp_write+0x116>
 801d7e8:	4b74      	ldr	r3, [pc, #464]	; (801d9bc <tcp_write+0x2dc>)
 801d7ea:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801d7ee:	4977      	ldr	r1, [pc, #476]	; (801d9cc <tcp_write+0x2ec>)
 801d7f0:	4874      	ldr	r0, [pc, #464]	; (801d9c4 <tcp_write+0x2e4>)
 801d7f2:	f006 fac5 	bl	8023d80 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801d7f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d7f8:	891a      	ldrh	r2, [r3, #8]
 801d7fa:	8c3b      	ldrh	r3, [r7, #32]
 801d7fc:	4413      	add	r3, r2
 801d7fe:	b29b      	uxth	r3, r3
 801d800:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d802:	1ad3      	subs	r3, r2, r3
 801d804:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d80c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801d80e:	8a7b      	ldrh	r3, [r7, #18]
 801d810:	2b00      	cmp	r3, #0
 801d812:	d026      	beq.n	801d862 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801d814:	8a7b      	ldrh	r3, [r7, #18]
 801d816:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d818:	429a      	cmp	r2, r3
 801d81a:	d206      	bcs.n	801d82a <tcp_write+0x14a>
 801d81c:	4b67      	ldr	r3, [pc, #412]	; (801d9bc <tcp_write+0x2dc>)
 801d81e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801d822:	496b      	ldr	r1, [pc, #428]	; (801d9d0 <tcp_write+0x2f0>)
 801d824:	4867      	ldr	r0, [pc, #412]	; (801d9c4 <tcp_write+0x2e4>)
 801d826:	f006 faab 	bl	8023d80 <iprintf>
      seg = last_unsent;
 801d82a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d82c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801d82e:	8a7b      	ldrh	r3, [r7, #18]
 801d830:	88fa      	ldrh	r2, [r7, #6]
 801d832:	4293      	cmp	r3, r2
 801d834:	bf28      	it	cs
 801d836:	4613      	movcs	r3, r2
 801d838:	b29b      	uxth	r3, r3
 801d83a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d83c:	4293      	cmp	r3, r2
 801d83e:	bf28      	it	cs
 801d840:	4613      	movcs	r3, r2
 801d842:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801d844:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d848:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d84a:	4413      	add	r3, r2
 801d84c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801d850:	8a7a      	ldrh	r2, [r7, #18]
 801d852:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d854:	1ad3      	subs	r3, r2, r3
 801d856:	b29b      	uxth	r3, r3
 801d858:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801d85a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d85c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d85e:	1ad3      	subs	r3, r2, r3
 801d860:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801d862:	8a7b      	ldrh	r3, [r7, #18]
 801d864:	2b00      	cmp	r3, #0
 801d866:	d00b      	beq.n	801d880 <tcp_write+0x1a0>
 801d868:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d86c:	88fb      	ldrh	r3, [r7, #6]
 801d86e:	429a      	cmp	r2, r3
 801d870:	d006      	beq.n	801d880 <tcp_write+0x1a0>
 801d872:	4b52      	ldr	r3, [pc, #328]	; (801d9bc <tcp_write+0x2dc>)
 801d874:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d878:	4956      	ldr	r1, [pc, #344]	; (801d9d4 <tcp_write+0x2f4>)
 801d87a:	4852      	ldr	r0, [pc, #328]	; (801d9c4 <tcp_write+0x2e4>)
 801d87c:	f006 fa80 	bl	8023d80 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801d880:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d884:	88fb      	ldrh	r3, [r7, #6]
 801d886:	429a      	cmp	r2, r3
 801d888:	f080 8167 	bcs.w	801db5a <tcp_write+0x47a>
 801d88c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d88e:	2b00      	cmp	r3, #0
 801d890:	f000 8163 	beq.w	801db5a <tcp_write+0x47a>
 801d894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d896:	891b      	ldrh	r3, [r3, #8]
 801d898:	2b00      	cmp	r3, #0
 801d89a:	f000 815e 	beq.w	801db5a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801d89e:	88fa      	ldrh	r2, [r7, #6]
 801d8a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d8a4:	1ad2      	subs	r2, r2, r3
 801d8a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d8a8:	4293      	cmp	r3, r2
 801d8aa:	bfa8      	it	ge
 801d8ac:	4613      	movge	r3, r2
 801d8ae:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801d8b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d8b2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801d8b4:	797b      	ldrb	r3, [r7, #5]
 801d8b6:	f003 0301 	and.w	r3, r3, #1
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	d027      	beq.n	801d90e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801d8be:	f107 0012 	add.w	r0, r7, #18
 801d8c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d8c4:	8bf9      	ldrh	r1, [r7, #30]
 801d8c6:	2301      	movs	r3, #1
 801d8c8:	9302      	str	r3, [sp, #8]
 801d8ca:	797b      	ldrb	r3, [r7, #5]
 801d8cc:	9301      	str	r3, [sp, #4]
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	9300      	str	r3, [sp, #0]
 801d8d2:	4603      	mov	r3, r0
 801d8d4:	2000      	movs	r0, #0
 801d8d6:	f7ff fe0f 	bl	801d4f8 <tcp_pbuf_prealloc>
 801d8da:	6578      	str	r0, [r7, #84]	; 0x54
 801d8dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8de:	2b00      	cmp	r3, #0
 801d8e0:	f000 8225 	beq.w	801dd2e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801d8e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8e6:	6858      	ldr	r0, [r3, #4]
 801d8e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d8ec:	68ba      	ldr	r2, [r7, #8]
 801d8ee:	4413      	add	r3, r2
 801d8f0:	8bfa      	ldrh	r2, [r7, #30]
 801d8f2:	4619      	mov	r1, r3
 801d8f4:	f006 f934 	bl	8023b60 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801d8f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d8fa:	f7fb f897 	bl	8018a2c <pbuf_clen>
 801d8fe:	4603      	mov	r3, r0
 801d900:	461a      	mov	r2, r3
 801d902:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d906:	4413      	add	r3, r2
 801d908:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801d90c:	e041      	b.n	801d992 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801d90e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d910:	685b      	ldr	r3, [r3, #4]
 801d912:	637b      	str	r3, [r7, #52]	; 0x34
 801d914:	e002      	b.n	801d91c <tcp_write+0x23c>
 801d916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d918:	681b      	ldr	r3, [r3, #0]
 801d91a:	637b      	str	r3, [r7, #52]	; 0x34
 801d91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	2b00      	cmp	r3, #0
 801d922:	d1f8      	bne.n	801d916 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801d924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d926:	7b1b      	ldrb	r3, [r3, #12]
 801d928:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801d92c:	2b00      	cmp	r3, #0
 801d92e:	d115      	bne.n	801d95c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801d930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d932:	685b      	ldr	r3, [r3, #4]
 801d934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d936:	8952      	ldrh	r2, [r2, #10]
 801d938:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801d93a:	68ba      	ldr	r2, [r7, #8]
 801d93c:	429a      	cmp	r2, r3
 801d93e:	d10d      	bne.n	801d95c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801d940:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d944:	2b00      	cmp	r3, #0
 801d946:	d006      	beq.n	801d956 <tcp_write+0x276>
 801d948:	4b1c      	ldr	r3, [pc, #112]	; (801d9bc <tcp_write+0x2dc>)
 801d94a:	f240 2231 	movw	r2, #561	; 0x231
 801d94e:	4922      	ldr	r1, [pc, #136]	; (801d9d8 <tcp_write+0x2f8>)
 801d950:	481c      	ldr	r0, [pc, #112]	; (801d9c4 <tcp_write+0x2e4>)
 801d952:	f006 fa15 	bl	8023d80 <iprintf>
          extendlen = seglen;
 801d956:	8bfb      	ldrh	r3, [r7, #30]
 801d958:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801d95a:	e01a      	b.n	801d992 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801d95c:	8bfb      	ldrh	r3, [r7, #30]
 801d95e:	2201      	movs	r2, #1
 801d960:	4619      	mov	r1, r3
 801d962:	2000      	movs	r0, #0
 801d964:	f7fa fcf0 	bl	8018348 <pbuf_alloc>
 801d968:	6578      	str	r0, [r7, #84]	; 0x54
 801d96a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	f000 81e0 	beq.w	801dd32 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801d972:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d976:	68ba      	ldr	r2, [r7, #8]
 801d978:	441a      	add	r2, r3
 801d97a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d97c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801d97e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d980:	f7fb f854 	bl	8018a2c <pbuf_clen>
 801d984:	4603      	mov	r3, r0
 801d986:	461a      	mov	r2, r3
 801d988:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d98c:	4413      	add	r3, r2
 801d98e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801d992:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d996:	8bfb      	ldrh	r3, [r7, #30]
 801d998:	4413      	add	r3, r2
 801d99a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801d99e:	e0dc      	b.n	801db5a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801d9a0:	68fb      	ldr	r3, [r7, #12]
 801d9a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	f000 80d7 	beq.w	801db5a <tcp_write+0x47a>
 801d9ac:	4b03      	ldr	r3, [pc, #12]	; (801d9bc <tcp_write+0x2dc>)
 801d9ae:	f240 224a 	movw	r2, #586	; 0x24a
 801d9b2:	490a      	ldr	r1, [pc, #40]	; (801d9dc <tcp_write+0x2fc>)
 801d9b4:	4803      	ldr	r0, [pc, #12]	; (801d9c4 <tcp_write+0x2e4>)
 801d9b6:	f006 f9e3 	bl	8023d80 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801d9ba:	e0ce      	b.n	801db5a <tcp_write+0x47a>
 801d9bc:	080274c4 	.word	0x080274c4
 801d9c0:	08027664 	.word	0x08027664
 801d9c4:	08027518 	.word	0x08027518
 801d9c8:	0802767c 	.word	0x0802767c
 801d9cc:	080276b0 	.word	0x080276b0
 801d9d0:	080276c8 	.word	0x080276c8
 801d9d4:	080276e8 	.word	0x080276e8
 801d9d8:	08027708 	.word	0x08027708
 801d9dc:	08027734 	.word	0x08027734
    struct pbuf *p;
    u16_t left = len - pos;
 801d9e0:	88fa      	ldrh	r2, [r7, #6]
 801d9e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d9e6:	1ad3      	subs	r3, r2, r3
 801d9e8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801d9ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d9ee:	b29b      	uxth	r3, r3
 801d9f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d9f2:	1ad3      	subs	r3, r2, r3
 801d9f4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801d9f6:	8b7a      	ldrh	r2, [r7, #26]
 801d9f8:	8bbb      	ldrh	r3, [r7, #28]
 801d9fa:	4293      	cmp	r3, r2
 801d9fc:	bf28      	it	cs
 801d9fe:	4613      	movcs	r3, r2
 801da00:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801da02:	797b      	ldrb	r3, [r7, #5]
 801da04:	f003 0301 	and.w	r3, r3, #1
 801da08:	2b00      	cmp	r3, #0
 801da0a:	d036      	beq.n	801da7a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801da0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801da10:	b29a      	uxth	r2, r3
 801da12:	8b3b      	ldrh	r3, [r7, #24]
 801da14:	4413      	add	r3, r2
 801da16:	b299      	uxth	r1, r3
 801da18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	bf0c      	ite	eq
 801da1e:	2301      	moveq	r3, #1
 801da20:	2300      	movne	r3, #0
 801da22:	b2db      	uxtb	r3, r3
 801da24:	f107 0012 	add.w	r0, r7, #18
 801da28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801da2a:	9302      	str	r3, [sp, #8]
 801da2c:	797b      	ldrb	r3, [r7, #5]
 801da2e:	9301      	str	r3, [sp, #4]
 801da30:	68fb      	ldr	r3, [r7, #12]
 801da32:	9300      	str	r3, [sp, #0]
 801da34:	4603      	mov	r3, r0
 801da36:	2036      	movs	r0, #54	; 0x36
 801da38:	f7ff fd5e 	bl	801d4f8 <tcp_pbuf_prealloc>
 801da3c:	6338      	str	r0, [r7, #48]	; 0x30
 801da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da40:	2b00      	cmp	r3, #0
 801da42:	f000 8178 	beq.w	801dd36 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da48:	895b      	ldrh	r3, [r3, #10]
 801da4a:	8b3a      	ldrh	r2, [r7, #24]
 801da4c:	429a      	cmp	r2, r3
 801da4e:	d906      	bls.n	801da5e <tcp_write+0x37e>
 801da50:	4b8c      	ldr	r3, [pc, #560]	; (801dc84 <tcp_write+0x5a4>)
 801da52:	f240 2266 	movw	r2, #614	; 0x266
 801da56:	498c      	ldr	r1, [pc, #560]	; (801dc88 <tcp_write+0x5a8>)
 801da58:	488c      	ldr	r0, [pc, #560]	; (801dc8c <tcp_write+0x5ac>)
 801da5a:	f006 f991 	bl	8023d80 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801da5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da60:	685a      	ldr	r2, [r3, #4]
 801da62:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801da66:	18d0      	adds	r0, r2, r3
 801da68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801da6c:	68ba      	ldr	r2, [r7, #8]
 801da6e:	4413      	add	r3, r2
 801da70:	8b3a      	ldrh	r2, [r7, #24]
 801da72:	4619      	mov	r1, r3
 801da74:	f006 f874 	bl	8023b60 <memcpy>
 801da78:	e02f      	b.n	801dada <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801da7a:	8a7b      	ldrh	r3, [r7, #18]
 801da7c:	2b00      	cmp	r3, #0
 801da7e:	d006      	beq.n	801da8e <tcp_write+0x3ae>
 801da80:	4b80      	ldr	r3, [pc, #512]	; (801dc84 <tcp_write+0x5a4>)
 801da82:	f240 2271 	movw	r2, #625	; 0x271
 801da86:	4982      	ldr	r1, [pc, #520]	; (801dc90 <tcp_write+0x5b0>)
 801da88:	4880      	ldr	r0, [pc, #512]	; (801dc8c <tcp_write+0x5ac>)
 801da8a:	f006 f979 	bl	8023d80 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801da8e:	8b3b      	ldrh	r3, [r7, #24]
 801da90:	2201      	movs	r2, #1
 801da92:	4619      	mov	r1, r3
 801da94:	2036      	movs	r0, #54	; 0x36
 801da96:	f7fa fc57 	bl	8018348 <pbuf_alloc>
 801da9a:	6178      	str	r0, [r7, #20]
 801da9c:	697b      	ldr	r3, [r7, #20]
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	f000 814b 	beq.w	801dd3a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801daa4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801daa8:	68ba      	ldr	r2, [r7, #8]
 801daaa:	441a      	add	r2, r3
 801daac:	697b      	ldr	r3, [r7, #20]
 801daae:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801dab0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801dab4:	b29b      	uxth	r3, r3
 801dab6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801daba:	4619      	mov	r1, r3
 801dabc:	2036      	movs	r0, #54	; 0x36
 801dabe:	f7fa fc43 	bl	8018348 <pbuf_alloc>
 801dac2:	6338      	str	r0, [r7, #48]	; 0x30
 801dac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	d103      	bne.n	801dad2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801daca:	6978      	ldr	r0, [r7, #20]
 801dacc:	f7fa ff20 	bl	8018910 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801dad0:	e136      	b.n	801dd40 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801dad2:	6979      	ldr	r1, [r7, #20]
 801dad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dad6:	f7fa ffe9 	bl	8018aac <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801dada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dadc:	f7fa ffa6 	bl	8018a2c <pbuf_clen>
 801dae0:	4603      	mov	r3, r0
 801dae2:	461a      	mov	r2, r3
 801dae4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801dae8:	4413      	add	r3, r2
 801daea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801daee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801daf2:	2b09      	cmp	r3, #9
 801daf4:	d903      	bls.n	801dafe <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801daf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801daf8:	f7fa ff0a 	bl	8018910 <pbuf_free>
      goto memerr;
 801dafc:	e120      	b.n	801dd40 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801dafe:	68fb      	ldr	r3, [r7, #12]
 801db00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801db02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801db06:	441a      	add	r2, r3
 801db08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801db0c:	9300      	str	r3, [sp, #0]
 801db0e:	4613      	mov	r3, r2
 801db10:	2200      	movs	r2, #0
 801db12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801db14:	68f8      	ldr	r0, [r7, #12]
 801db16:	f7ff fc51 	bl	801d3bc <tcp_create_segment>
 801db1a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801db1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db1e:	2b00      	cmp	r3, #0
 801db20:	f000 810d 	beq.w	801dd3e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801db24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801db26:	2b00      	cmp	r3, #0
 801db28:	d102      	bne.n	801db30 <tcp_write+0x450>
      queue = seg;
 801db2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db2c:	647b      	str	r3, [r7, #68]	; 0x44
 801db2e:	e00c      	b.n	801db4a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801db30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db32:	2b00      	cmp	r3, #0
 801db34:	d106      	bne.n	801db44 <tcp_write+0x464>
 801db36:	4b53      	ldr	r3, [pc, #332]	; (801dc84 <tcp_write+0x5a4>)
 801db38:	f240 22ab 	movw	r2, #683	; 0x2ab
 801db3c:	4955      	ldr	r1, [pc, #340]	; (801dc94 <tcp_write+0x5b4>)
 801db3e:	4853      	ldr	r0, [pc, #332]	; (801dc8c <tcp_write+0x5ac>)
 801db40:	f006 f91e 	bl	8023d80 <iprintf>
      prev_seg->next = seg;
 801db44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801db48:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801db4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db4c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801db4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801db52:	8b3b      	ldrh	r3, [r7, #24]
 801db54:	4413      	add	r3, r2
 801db56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801db5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801db5e:	88fb      	ldrh	r3, [r7, #6]
 801db60:	429a      	cmp	r2, r3
 801db62:	f4ff af3d 	bcc.w	801d9e0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801db66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801db68:	2b00      	cmp	r3, #0
 801db6a:	d02c      	beq.n	801dbc6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801db6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db6e:	685b      	ldr	r3, [r3, #4]
 801db70:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db72:	e01e      	b.n	801dbb2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801db74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db76:	891a      	ldrh	r2, [r3, #8]
 801db78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801db7a:	4413      	add	r3, r2
 801db7c:	b29a      	uxth	r2, r3
 801db7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db80:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801db82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db84:	681b      	ldr	r3, [r3, #0]
 801db86:	2b00      	cmp	r3, #0
 801db88:	d110      	bne.n	801dbac <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801db8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db8c:	685b      	ldr	r3, [r3, #4]
 801db8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801db90:	8952      	ldrh	r2, [r2, #10]
 801db92:	4413      	add	r3, r2
 801db94:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801db96:	68b9      	ldr	r1, [r7, #8]
 801db98:	4618      	mov	r0, r3
 801db9a:	f005 ffe1 	bl	8023b60 <memcpy>
        p->len += oversize_used;
 801db9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dba0:	895a      	ldrh	r2, [r3, #10]
 801dba2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dba4:	4413      	add	r3, r2
 801dba6:	b29a      	uxth	r2, r3
 801dba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbaa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801dbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbae:	681b      	ldr	r3, [r3, #0]
 801dbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d1dd      	bne.n	801db74 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801dbb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbba:	891a      	ldrh	r2, [r3, #8]
 801dbbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dbbe:	4413      	add	r3, r2
 801dbc0:	b29a      	uxth	r2, r3
 801dbc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbc4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801dbc6:	8a7a      	ldrh	r2, [r7, #18]
 801dbc8:	68fb      	ldr	r3, [r7, #12]
 801dbca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801dbce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	d018      	beq.n	801dc06 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801dbd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	d106      	bne.n	801dbe8 <tcp_write+0x508>
 801dbda:	4b2a      	ldr	r3, [pc, #168]	; (801dc84 <tcp_write+0x5a4>)
 801dbdc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801dbe0:	492d      	ldr	r1, [pc, #180]	; (801dc98 <tcp_write+0x5b8>)
 801dbe2:	482a      	ldr	r0, [pc, #168]	; (801dc8c <tcp_write+0x5ac>)
 801dbe4:	f006 f8cc 	bl	8023d80 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801dbe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbea:	685b      	ldr	r3, [r3, #4]
 801dbec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801dbee:	4618      	mov	r0, r3
 801dbf0:	f7fa ff5c 	bl	8018aac <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801dbf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbf6:	891a      	ldrh	r2, [r3, #8]
 801dbf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dbfa:	891b      	ldrh	r3, [r3, #8]
 801dbfc:	4413      	add	r3, r2
 801dbfe:	b29a      	uxth	r2, r3
 801dc00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc02:	811a      	strh	r2, [r3, #8]
 801dc04:	e037      	b.n	801dc76 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801dc06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dc08:	2b00      	cmp	r3, #0
 801dc0a:	d034      	beq.n	801dc76 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801dc0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	d003      	beq.n	801dc1a <tcp_write+0x53a>
 801dc12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc14:	685b      	ldr	r3, [r3, #4]
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	d106      	bne.n	801dc28 <tcp_write+0x548>
 801dc1a:	4b1a      	ldr	r3, [pc, #104]	; (801dc84 <tcp_write+0x5a4>)
 801dc1c:	f240 22e6 	movw	r2, #742	; 0x2e6
 801dc20:	491e      	ldr	r1, [pc, #120]	; (801dc9c <tcp_write+0x5bc>)
 801dc22:	481a      	ldr	r0, [pc, #104]	; (801dc8c <tcp_write+0x5ac>)
 801dc24:	f006 f8ac 	bl	8023d80 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dc28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc2a:	685b      	ldr	r3, [r3, #4]
 801dc2c:	62bb      	str	r3, [r7, #40]	; 0x28
 801dc2e:	e009      	b.n	801dc44 <tcp_write+0x564>
      p->tot_len += extendlen;
 801dc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc32:	891a      	ldrh	r2, [r3, #8]
 801dc34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dc36:	4413      	add	r3, r2
 801dc38:	b29a      	uxth	r2, r3
 801dc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc3c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	62bb      	str	r3, [r7, #40]	; 0x28
 801dc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d1f1      	bne.n	801dc30 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801dc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc4e:	891a      	ldrh	r2, [r3, #8]
 801dc50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dc52:	4413      	add	r3, r2
 801dc54:	b29a      	uxth	r2, r3
 801dc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc58:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801dc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc5c:	895a      	ldrh	r2, [r3, #10]
 801dc5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dc60:	4413      	add	r3, r2
 801dc62:	b29a      	uxth	r2, r3
 801dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc66:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801dc68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc6a:	891a      	ldrh	r2, [r3, #8]
 801dc6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dc6e:	4413      	add	r3, r2
 801dc70:	b29a      	uxth	r2, r3
 801dc72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc74:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801dc76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d111      	bne.n	801dca0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801dc7c:	68fb      	ldr	r3, [r7, #12]
 801dc7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801dc80:	66da      	str	r2, [r3, #108]	; 0x6c
 801dc82:	e010      	b.n	801dca6 <tcp_write+0x5c6>
 801dc84:	080274c4 	.word	0x080274c4
 801dc88:	08027764 	.word	0x08027764
 801dc8c:	08027518 	.word	0x08027518
 801dc90:	080277a4 	.word	0x080277a4
 801dc94:	080277b4 	.word	0x080277b4
 801dc98:	080277c8 	.word	0x080277c8
 801dc9c:	08027800 	.word	0x08027800
  } else {
    last_unsent->next = queue;
 801dca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dca2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801dca4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801dca6:	68fb      	ldr	r3, [r7, #12]
 801dca8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801dcaa:	88fb      	ldrh	r3, [r7, #6]
 801dcac:	441a      	add	r2, r3
 801dcae:	68fb      	ldr	r3, [r7, #12]
 801dcb0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801dcb2:	68fb      	ldr	r3, [r7, #12]
 801dcb4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801dcb8:	88fb      	ldrh	r3, [r7, #6]
 801dcba:	1ad3      	subs	r3, r2, r3
 801dcbc:	b29a      	uxth	r2, r3
 801dcbe:	68fb      	ldr	r3, [r7, #12]
 801dcc0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801dcca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801dcce:	68fb      	ldr	r3, [r7, #12]
 801dcd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	d00e      	beq.n	801dcf6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801dcd8:	68fb      	ldr	r3, [r7, #12]
 801dcda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d10a      	bne.n	801dcf6 <tcp_write+0x616>
 801dce0:	68fb      	ldr	r3, [r7, #12]
 801dce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	d106      	bne.n	801dcf6 <tcp_write+0x616>
 801dce8:	4b2c      	ldr	r3, [pc, #176]	; (801dd9c <tcp_write+0x6bc>)
 801dcea:	f240 3212 	movw	r2, #786	; 0x312
 801dcee:	492c      	ldr	r1, [pc, #176]	; (801dda0 <tcp_write+0x6c0>)
 801dcf0:	482c      	ldr	r0, [pc, #176]	; (801dda4 <tcp_write+0x6c4>)
 801dcf2:	f006 f845 	bl	8023d80 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801dcf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	d016      	beq.n	801dd2a <tcp_write+0x64a>
 801dcfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dcfe:	68db      	ldr	r3, [r3, #12]
 801dd00:	2b00      	cmp	r3, #0
 801dd02:	d012      	beq.n	801dd2a <tcp_write+0x64a>
 801dd04:	797b      	ldrb	r3, [r7, #5]
 801dd06:	f003 0302 	and.w	r3, r3, #2
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	d10d      	bne.n	801dd2a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801dd0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dd10:	68db      	ldr	r3, [r3, #12]
 801dd12:	899b      	ldrh	r3, [r3, #12]
 801dd14:	b29c      	uxth	r4, r3
 801dd16:	2008      	movs	r0, #8
 801dd18:	f7f9 fa08 	bl	801712c <lwip_htons>
 801dd1c:	4603      	mov	r3, r0
 801dd1e:	461a      	mov	r2, r3
 801dd20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dd22:	68db      	ldr	r3, [r3, #12]
 801dd24:	4322      	orrs	r2, r4
 801dd26:	b292      	uxth	r2, r2
 801dd28:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	e031      	b.n	801dd92 <tcp_write+0x6b2>
          goto memerr;
 801dd2e:	bf00      	nop
 801dd30:	e006      	b.n	801dd40 <tcp_write+0x660>
            goto memerr;
 801dd32:	bf00      	nop
 801dd34:	e004      	b.n	801dd40 <tcp_write+0x660>
        goto memerr;
 801dd36:	bf00      	nop
 801dd38:	e002      	b.n	801dd40 <tcp_write+0x660>
        goto memerr;
 801dd3a:	bf00      	nop
 801dd3c:	e000      	b.n	801dd40 <tcp_write+0x660>
      goto memerr;
 801dd3e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dd40:	68fb      	ldr	r3, [r7, #12]
 801dd42:	8b5b      	ldrh	r3, [r3, #26]
 801dd44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dd48:	b29a      	uxth	r2, r3
 801dd4a:	68fb      	ldr	r3, [r7, #12]
 801dd4c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801dd4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d002      	beq.n	801dd5a <tcp_write+0x67a>
    pbuf_free(concat_p);
 801dd54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801dd56:	f7fa fddb 	bl	8018910 <pbuf_free>
  }
  if (queue != NULL) {
 801dd5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dd5c:	2b00      	cmp	r3, #0
 801dd5e:	d002      	beq.n	801dd66 <tcp_write+0x686>
    tcp_segs_free(queue);
 801dd60:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801dd62:	f7fc fb6b 	bl	801a43c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801dd66:	68fb      	ldr	r3, [r7, #12]
 801dd68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	d00e      	beq.n	801dd8e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801dd70:	68fb      	ldr	r3, [r7, #12]
 801dd72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dd74:	2b00      	cmp	r3, #0
 801dd76:	d10a      	bne.n	801dd8e <tcp_write+0x6ae>
 801dd78:	68fb      	ldr	r3, [r7, #12]
 801dd7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	d106      	bne.n	801dd8e <tcp_write+0x6ae>
 801dd80:	4b06      	ldr	r3, [pc, #24]	; (801dd9c <tcp_write+0x6bc>)
 801dd82:	f240 3227 	movw	r2, #807	; 0x327
 801dd86:	4906      	ldr	r1, [pc, #24]	; (801dda0 <tcp_write+0x6c0>)
 801dd88:	4806      	ldr	r0, [pc, #24]	; (801dda4 <tcp_write+0x6c4>)
 801dd8a:	f005 fff9 	bl	8023d80 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801dd8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801dd92:	4618      	mov	r0, r3
 801dd94:	375c      	adds	r7, #92	; 0x5c
 801dd96:	46bd      	mov	sp, r7
 801dd98:	bd90      	pop	{r4, r7, pc}
 801dd9a:	bf00      	nop
 801dd9c:	080274c4 	.word	0x080274c4
 801dda0:	08027838 	.word	0x08027838
 801dda4:	08027518 	.word	0x08027518

0801dda8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801dda8:	b590      	push	{r4, r7, lr}
 801ddaa:	b08b      	sub	sp, #44	; 0x2c
 801ddac:	af02      	add	r7, sp, #8
 801ddae:	6078      	str	r0, [r7, #4]
 801ddb0:	460b      	mov	r3, r1
 801ddb2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801ddb4:	2300      	movs	r3, #0
 801ddb6:	61fb      	str	r3, [r7, #28]
 801ddb8:	2300      	movs	r3, #0
 801ddba:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801ddbc:	2300      	movs	r3, #0
 801ddbe:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d106      	bne.n	801ddd4 <tcp_split_unsent_seg+0x2c>
 801ddc6:	4b95      	ldr	r3, [pc, #596]	; (801e01c <tcp_split_unsent_seg+0x274>)
 801ddc8:	f240 324b 	movw	r2, #843	; 0x34b
 801ddcc:	4994      	ldr	r1, [pc, #592]	; (801e020 <tcp_split_unsent_seg+0x278>)
 801ddce:	4895      	ldr	r0, [pc, #596]	; (801e024 <tcp_split_unsent_seg+0x27c>)
 801ddd0:	f005 ffd6 	bl	8023d80 <iprintf>

  useg = pcb->unsent;
 801ddd4:	687b      	ldr	r3, [r7, #4]
 801ddd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ddd8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801ddda:	697b      	ldr	r3, [r7, #20]
 801dddc:	2b00      	cmp	r3, #0
 801ddde:	d102      	bne.n	801dde6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801dde0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dde4:	e116      	b.n	801e014 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801dde6:	887b      	ldrh	r3, [r7, #2]
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	d109      	bne.n	801de00 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801ddec:	4b8b      	ldr	r3, [pc, #556]	; (801e01c <tcp_split_unsent_seg+0x274>)
 801ddee:	f240 3253 	movw	r2, #851	; 0x353
 801ddf2:	498d      	ldr	r1, [pc, #564]	; (801e028 <tcp_split_unsent_seg+0x280>)
 801ddf4:	488b      	ldr	r0, [pc, #556]	; (801e024 <tcp_split_unsent_seg+0x27c>)
 801ddf6:	f005 ffc3 	bl	8023d80 <iprintf>
    return ERR_VAL;
 801ddfa:	f06f 0305 	mvn.w	r3, #5
 801ddfe:	e109      	b.n	801e014 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801de00:	697b      	ldr	r3, [r7, #20]
 801de02:	891b      	ldrh	r3, [r3, #8]
 801de04:	887a      	ldrh	r2, [r7, #2]
 801de06:	429a      	cmp	r2, r3
 801de08:	d301      	bcc.n	801de0e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801de0a:	2300      	movs	r3, #0
 801de0c:	e102      	b.n	801e014 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801de0e:	687b      	ldr	r3, [r7, #4]
 801de10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801de12:	887a      	ldrh	r2, [r7, #2]
 801de14:	429a      	cmp	r2, r3
 801de16:	d906      	bls.n	801de26 <tcp_split_unsent_seg+0x7e>
 801de18:	4b80      	ldr	r3, [pc, #512]	; (801e01c <tcp_split_unsent_seg+0x274>)
 801de1a:	f240 325b 	movw	r2, #859	; 0x35b
 801de1e:	4983      	ldr	r1, [pc, #524]	; (801e02c <tcp_split_unsent_seg+0x284>)
 801de20:	4880      	ldr	r0, [pc, #512]	; (801e024 <tcp_split_unsent_seg+0x27c>)
 801de22:	f005 ffad 	bl	8023d80 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801de26:	697b      	ldr	r3, [r7, #20]
 801de28:	891b      	ldrh	r3, [r3, #8]
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	d106      	bne.n	801de3c <tcp_split_unsent_seg+0x94>
 801de2e:	4b7b      	ldr	r3, [pc, #492]	; (801e01c <tcp_split_unsent_seg+0x274>)
 801de30:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801de34:	497e      	ldr	r1, [pc, #504]	; (801e030 <tcp_split_unsent_seg+0x288>)
 801de36:	487b      	ldr	r0, [pc, #492]	; (801e024 <tcp_split_unsent_seg+0x27c>)
 801de38:	f005 ffa2 	bl	8023d80 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801de3c:	697b      	ldr	r3, [r7, #20]
 801de3e:	7a9b      	ldrb	r3, [r3, #10]
 801de40:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801de42:	7bfb      	ldrb	r3, [r7, #15]
 801de44:	009b      	lsls	r3, r3, #2
 801de46:	b2db      	uxtb	r3, r3
 801de48:	f003 0304 	and.w	r3, r3, #4
 801de4c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801de4e:	697b      	ldr	r3, [r7, #20]
 801de50:	891a      	ldrh	r2, [r3, #8]
 801de52:	887b      	ldrh	r3, [r7, #2]
 801de54:	1ad3      	subs	r3, r2, r3
 801de56:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801de58:	7bbb      	ldrb	r3, [r7, #14]
 801de5a:	b29a      	uxth	r2, r3
 801de5c:	89bb      	ldrh	r3, [r7, #12]
 801de5e:	4413      	add	r3, r2
 801de60:	b29b      	uxth	r3, r3
 801de62:	f44f 7220 	mov.w	r2, #640	; 0x280
 801de66:	4619      	mov	r1, r3
 801de68:	2036      	movs	r0, #54	; 0x36
 801de6a:	f7fa fa6d 	bl	8018348 <pbuf_alloc>
 801de6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801de70:	693b      	ldr	r3, [r7, #16]
 801de72:	2b00      	cmp	r3, #0
 801de74:	f000 80b7 	beq.w	801dfe6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801de78:	697b      	ldr	r3, [r7, #20]
 801de7a:	685b      	ldr	r3, [r3, #4]
 801de7c:	891a      	ldrh	r2, [r3, #8]
 801de7e:	697b      	ldr	r3, [r7, #20]
 801de80:	891b      	ldrh	r3, [r3, #8]
 801de82:	1ad3      	subs	r3, r2, r3
 801de84:	b29a      	uxth	r2, r3
 801de86:	887b      	ldrh	r3, [r7, #2]
 801de88:	4413      	add	r3, r2
 801de8a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801de8c:	697b      	ldr	r3, [r7, #20]
 801de8e:	6858      	ldr	r0, [r3, #4]
 801de90:	693b      	ldr	r3, [r7, #16]
 801de92:	685a      	ldr	r2, [r3, #4]
 801de94:	7bbb      	ldrb	r3, [r7, #14]
 801de96:	18d1      	adds	r1, r2, r3
 801de98:	897b      	ldrh	r3, [r7, #10]
 801de9a:	89ba      	ldrh	r2, [r7, #12]
 801de9c:	f7fa ff3e 	bl	8018d1c <pbuf_copy_partial>
 801dea0:	4603      	mov	r3, r0
 801dea2:	461a      	mov	r2, r3
 801dea4:	89bb      	ldrh	r3, [r7, #12]
 801dea6:	4293      	cmp	r3, r2
 801dea8:	f040 809f 	bne.w	801dfea <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801deac:	697b      	ldr	r3, [r7, #20]
 801deae:	68db      	ldr	r3, [r3, #12]
 801deb0:	899b      	ldrh	r3, [r3, #12]
 801deb2:	b29b      	uxth	r3, r3
 801deb4:	4618      	mov	r0, r3
 801deb6:	f7f9 f939 	bl	801712c <lwip_htons>
 801deba:	4603      	mov	r3, r0
 801debc:	b2db      	uxtb	r3, r3
 801debe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801dec2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801dec4:	2300      	movs	r3, #0
 801dec6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801dec8:	7efb      	ldrb	r3, [r7, #27]
 801deca:	f003 0308 	and.w	r3, r3, #8
 801dece:	2b00      	cmp	r3, #0
 801ded0:	d007      	beq.n	801dee2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801ded2:	7efb      	ldrb	r3, [r7, #27]
 801ded4:	f023 0308 	bic.w	r3, r3, #8
 801ded8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801deda:	7ebb      	ldrb	r3, [r7, #26]
 801dedc:	f043 0308 	orr.w	r3, r3, #8
 801dee0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801dee2:	7efb      	ldrb	r3, [r7, #27]
 801dee4:	f003 0301 	and.w	r3, r3, #1
 801dee8:	2b00      	cmp	r3, #0
 801deea:	d007      	beq.n	801defc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801deec:	7efb      	ldrb	r3, [r7, #27]
 801deee:	f023 0301 	bic.w	r3, r3, #1
 801def2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801def4:	7ebb      	ldrb	r3, [r7, #26]
 801def6:	f043 0301 	orr.w	r3, r3, #1
 801defa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801defc:	697b      	ldr	r3, [r7, #20]
 801defe:	68db      	ldr	r3, [r3, #12]
 801df00:	685b      	ldr	r3, [r3, #4]
 801df02:	4618      	mov	r0, r3
 801df04:	f7f9 f927 	bl	8017156 <lwip_htonl>
 801df08:	4602      	mov	r2, r0
 801df0a:	887b      	ldrh	r3, [r7, #2]
 801df0c:	18d1      	adds	r1, r2, r3
 801df0e:	7eba      	ldrb	r2, [r7, #26]
 801df10:	7bfb      	ldrb	r3, [r7, #15]
 801df12:	9300      	str	r3, [sp, #0]
 801df14:	460b      	mov	r3, r1
 801df16:	6939      	ldr	r1, [r7, #16]
 801df18:	6878      	ldr	r0, [r7, #4]
 801df1a:	f7ff fa4f 	bl	801d3bc <tcp_create_segment>
 801df1e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801df20:	69fb      	ldr	r3, [r7, #28]
 801df22:	2b00      	cmp	r3, #0
 801df24:	d063      	beq.n	801dfee <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801df26:	697b      	ldr	r3, [r7, #20]
 801df28:	685b      	ldr	r3, [r3, #4]
 801df2a:	4618      	mov	r0, r3
 801df2c:	f7fa fd7e 	bl	8018a2c <pbuf_clen>
 801df30:	4603      	mov	r3, r0
 801df32:	461a      	mov	r2, r3
 801df34:	687b      	ldr	r3, [r7, #4]
 801df36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801df3a:	1a9b      	subs	r3, r3, r2
 801df3c:	b29a      	uxth	r2, r3
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801df44:	697b      	ldr	r3, [r7, #20]
 801df46:	6858      	ldr	r0, [r3, #4]
 801df48:	697b      	ldr	r3, [r7, #20]
 801df4a:	685b      	ldr	r3, [r3, #4]
 801df4c:	891a      	ldrh	r2, [r3, #8]
 801df4e:	89bb      	ldrh	r3, [r7, #12]
 801df50:	1ad3      	subs	r3, r2, r3
 801df52:	b29b      	uxth	r3, r3
 801df54:	4619      	mov	r1, r3
 801df56:	f7fa fb55 	bl	8018604 <pbuf_realloc>
  useg->len -= remainder;
 801df5a:	697b      	ldr	r3, [r7, #20]
 801df5c:	891a      	ldrh	r2, [r3, #8]
 801df5e:	89bb      	ldrh	r3, [r7, #12]
 801df60:	1ad3      	subs	r3, r2, r3
 801df62:	b29a      	uxth	r2, r3
 801df64:	697b      	ldr	r3, [r7, #20]
 801df66:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801df68:	697b      	ldr	r3, [r7, #20]
 801df6a:	68db      	ldr	r3, [r3, #12]
 801df6c:	899b      	ldrh	r3, [r3, #12]
 801df6e:	b29c      	uxth	r4, r3
 801df70:	7efb      	ldrb	r3, [r7, #27]
 801df72:	b29b      	uxth	r3, r3
 801df74:	4618      	mov	r0, r3
 801df76:	f7f9 f8d9 	bl	801712c <lwip_htons>
 801df7a:	4603      	mov	r3, r0
 801df7c:	461a      	mov	r2, r3
 801df7e:	697b      	ldr	r3, [r7, #20]
 801df80:	68db      	ldr	r3, [r3, #12]
 801df82:	4322      	orrs	r2, r4
 801df84:	b292      	uxth	r2, r2
 801df86:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801df88:	697b      	ldr	r3, [r7, #20]
 801df8a:	685b      	ldr	r3, [r3, #4]
 801df8c:	4618      	mov	r0, r3
 801df8e:	f7fa fd4d 	bl	8018a2c <pbuf_clen>
 801df92:	4603      	mov	r3, r0
 801df94:	461a      	mov	r2, r3
 801df96:	687b      	ldr	r3, [r7, #4]
 801df98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801df9c:	4413      	add	r3, r2
 801df9e:	b29a      	uxth	r2, r3
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801dfa6:	69fb      	ldr	r3, [r7, #28]
 801dfa8:	685b      	ldr	r3, [r3, #4]
 801dfaa:	4618      	mov	r0, r3
 801dfac:	f7fa fd3e 	bl	8018a2c <pbuf_clen>
 801dfb0:	4603      	mov	r3, r0
 801dfb2:	461a      	mov	r2, r3
 801dfb4:	687b      	ldr	r3, [r7, #4]
 801dfb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dfba:	4413      	add	r3, r2
 801dfbc:	b29a      	uxth	r2, r3
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801dfc4:	697b      	ldr	r3, [r7, #20]
 801dfc6:	681a      	ldr	r2, [r3, #0]
 801dfc8:	69fb      	ldr	r3, [r7, #28]
 801dfca:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801dfcc:	697b      	ldr	r3, [r7, #20]
 801dfce:	69fa      	ldr	r2, [r7, #28]
 801dfd0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801dfd2:	69fb      	ldr	r3, [r7, #28]
 801dfd4:	681b      	ldr	r3, [r3, #0]
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	d103      	bne.n	801dfe2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801dfda:	687b      	ldr	r3, [r7, #4]
 801dfdc:	2200      	movs	r2, #0
 801dfde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801dfe2:	2300      	movs	r3, #0
 801dfe4:	e016      	b.n	801e014 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801dfe6:	bf00      	nop
 801dfe8:	e002      	b.n	801dff0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801dfea:	bf00      	nop
 801dfec:	e000      	b.n	801dff0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801dfee:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801dff0:	69fb      	ldr	r3, [r7, #28]
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	d006      	beq.n	801e004 <tcp_split_unsent_seg+0x25c>
 801dff6:	4b09      	ldr	r3, [pc, #36]	; (801e01c <tcp_split_unsent_seg+0x274>)
 801dff8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801dffc:	490d      	ldr	r1, [pc, #52]	; (801e034 <tcp_split_unsent_seg+0x28c>)
 801dffe:	4809      	ldr	r0, [pc, #36]	; (801e024 <tcp_split_unsent_seg+0x27c>)
 801e000:	f005 febe 	bl	8023d80 <iprintf>
  if (p != NULL) {
 801e004:	693b      	ldr	r3, [r7, #16]
 801e006:	2b00      	cmp	r3, #0
 801e008:	d002      	beq.n	801e010 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801e00a:	6938      	ldr	r0, [r7, #16]
 801e00c:	f7fa fc80 	bl	8018910 <pbuf_free>
  }

  return ERR_MEM;
 801e010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801e014:	4618      	mov	r0, r3
 801e016:	3724      	adds	r7, #36	; 0x24
 801e018:	46bd      	mov	sp, r7
 801e01a:	bd90      	pop	{r4, r7, pc}
 801e01c:	080274c4 	.word	0x080274c4
 801e020:	08027858 	.word	0x08027858
 801e024:	08027518 	.word	0x08027518
 801e028:	0802787c 	.word	0x0802787c
 801e02c:	080278a0 	.word	0x080278a0
 801e030:	080278b0 	.word	0x080278b0
 801e034:	080278c0 	.word	0x080278c0

0801e038 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801e038:	b590      	push	{r4, r7, lr}
 801e03a:	b085      	sub	sp, #20
 801e03c:	af00      	add	r7, sp, #0
 801e03e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	2b00      	cmp	r3, #0
 801e044:	d106      	bne.n	801e054 <tcp_send_fin+0x1c>
 801e046:	4b21      	ldr	r3, [pc, #132]	; (801e0cc <tcp_send_fin+0x94>)
 801e048:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801e04c:	4920      	ldr	r1, [pc, #128]	; (801e0d0 <tcp_send_fin+0x98>)
 801e04e:	4821      	ldr	r0, [pc, #132]	; (801e0d4 <tcp_send_fin+0x9c>)
 801e050:	f005 fe96 	bl	8023d80 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801e054:	687b      	ldr	r3, [r7, #4]
 801e056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e058:	2b00      	cmp	r3, #0
 801e05a:	d02e      	beq.n	801e0ba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e060:	60fb      	str	r3, [r7, #12]
 801e062:	e002      	b.n	801e06a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801e064:	68fb      	ldr	r3, [r7, #12]
 801e066:	681b      	ldr	r3, [r3, #0]
 801e068:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e06a:	68fb      	ldr	r3, [r7, #12]
 801e06c:	681b      	ldr	r3, [r3, #0]
 801e06e:	2b00      	cmp	r3, #0
 801e070:	d1f8      	bne.n	801e064 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801e072:	68fb      	ldr	r3, [r7, #12]
 801e074:	68db      	ldr	r3, [r3, #12]
 801e076:	899b      	ldrh	r3, [r3, #12]
 801e078:	b29b      	uxth	r3, r3
 801e07a:	4618      	mov	r0, r3
 801e07c:	f7f9 f856 	bl	801712c <lwip_htons>
 801e080:	4603      	mov	r3, r0
 801e082:	b2db      	uxtb	r3, r3
 801e084:	f003 0307 	and.w	r3, r3, #7
 801e088:	2b00      	cmp	r3, #0
 801e08a:	d116      	bne.n	801e0ba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801e08c:	68fb      	ldr	r3, [r7, #12]
 801e08e:	68db      	ldr	r3, [r3, #12]
 801e090:	899b      	ldrh	r3, [r3, #12]
 801e092:	b29c      	uxth	r4, r3
 801e094:	2001      	movs	r0, #1
 801e096:	f7f9 f849 	bl	801712c <lwip_htons>
 801e09a:	4603      	mov	r3, r0
 801e09c:	461a      	mov	r2, r3
 801e09e:	68fb      	ldr	r3, [r7, #12]
 801e0a0:	68db      	ldr	r3, [r3, #12]
 801e0a2:	4322      	orrs	r2, r4
 801e0a4:	b292      	uxth	r2, r2
 801e0a6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	8b5b      	ldrh	r3, [r3, #26]
 801e0ac:	f043 0320 	orr.w	r3, r3, #32
 801e0b0:	b29a      	uxth	r2, r3
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801e0b6:	2300      	movs	r3, #0
 801e0b8:	e004      	b.n	801e0c4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801e0ba:	2101      	movs	r1, #1
 801e0bc:	6878      	ldr	r0, [r7, #4]
 801e0be:	f000 f80b 	bl	801e0d8 <tcp_enqueue_flags>
 801e0c2:	4603      	mov	r3, r0
}
 801e0c4:	4618      	mov	r0, r3
 801e0c6:	3714      	adds	r7, #20
 801e0c8:	46bd      	mov	sp, r7
 801e0ca:	bd90      	pop	{r4, r7, pc}
 801e0cc:	080274c4 	.word	0x080274c4
 801e0d0:	080278cc 	.word	0x080278cc
 801e0d4:	08027518 	.word	0x08027518

0801e0d8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801e0d8:	b580      	push	{r7, lr}
 801e0da:	b08a      	sub	sp, #40	; 0x28
 801e0dc:	af02      	add	r7, sp, #8
 801e0de:	6078      	str	r0, [r7, #4]
 801e0e0:	460b      	mov	r3, r1
 801e0e2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801e0e4:	2300      	movs	r3, #0
 801e0e6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801e0e8:	2300      	movs	r3, #0
 801e0ea:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e0ec:	78fb      	ldrb	r3, [r7, #3]
 801e0ee:	f003 0303 	and.w	r3, r3, #3
 801e0f2:	2b00      	cmp	r3, #0
 801e0f4:	d106      	bne.n	801e104 <tcp_enqueue_flags+0x2c>
 801e0f6:	4b67      	ldr	r3, [pc, #412]	; (801e294 <tcp_enqueue_flags+0x1bc>)
 801e0f8:	f240 4211 	movw	r2, #1041	; 0x411
 801e0fc:	4966      	ldr	r1, [pc, #408]	; (801e298 <tcp_enqueue_flags+0x1c0>)
 801e0fe:	4867      	ldr	r0, [pc, #412]	; (801e29c <tcp_enqueue_flags+0x1c4>)
 801e100:	f005 fe3e 	bl	8023d80 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	2b00      	cmp	r3, #0
 801e108:	d106      	bne.n	801e118 <tcp_enqueue_flags+0x40>
 801e10a:	4b62      	ldr	r3, [pc, #392]	; (801e294 <tcp_enqueue_flags+0x1bc>)
 801e10c:	f240 4213 	movw	r2, #1043	; 0x413
 801e110:	4963      	ldr	r1, [pc, #396]	; (801e2a0 <tcp_enqueue_flags+0x1c8>)
 801e112:	4862      	ldr	r0, [pc, #392]	; (801e29c <tcp_enqueue_flags+0x1c4>)
 801e114:	f005 fe34 	bl	8023d80 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801e118:	78fb      	ldrb	r3, [r7, #3]
 801e11a:	f003 0302 	and.w	r3, r3, #2
 801e11e:	2b00      	cmp	r3, #0
 801e120:	d001      	beq.n	801e126 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801e122:	2301      	movs	r3, #1
 801e124:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e126:	7ffb      	ldrb	r3, [r7, #31]
 801e128:	009b      	lsls	r3, r3, #2
 801e12a:	b2db      	uxtb	r3, r3
 801e12c:	f003 0304 	and.w	r3, r3, #4
 801e130:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e132:	7dfb      	ldrb	r3, [r7, #23]
 801e134:	b29b      	uxth	r3, r3
 801e136:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e13a:	4619      	mov	r1, r3
 801e13c:	2036      	movs	r0, #54	; 0x36
 801e13e:	f7fa f903 	bl	8018348 <pbuf_alloc>
 801e142:	6138      	str	r0, [r7, #16]
 801e144:	693b      	ldr	r3, [r7, #16]
 801e146:	2b00      	cmp	r3, #0
 801e148:	d109      	bne.n	801e15e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e14a:	687b      	ldr	r3, [r7, #4]
 801e14c:	8b5b      	ldrh	r3, [r3, #26]
 801e14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e152:	b29a      	uxth	r2, r3
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e15c:	e095      	b.n	801e28a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801e15e:	693b      	ldr	r3, [r7, #16]
 801e160:	895a      	ldrh	r2, [r3, #10]
 801e162:	7dfb      	ldrb	r3, [r7, #23]
 801e164:	b29b      	uxth	r3, r3
 801e166:	429a      	cmp	r2, r3
 801e168:	d206      	bcs.n	801e178 <tcp_enqueue_flags+0xa0>
 801e16a:	4b4a      	ldr	r3, [pc, #296]	; (801e294 <tcp_enqueue_flags+0x1bc>)
 801e16c:	f240 4239 	movw	r2, #1081	; 0x439
 801e170:	494c      	ldr	r1, [pc, #304]	; (801e2a4 <tcp_enqueue_flags+0x1cc>)
 801e172:	484a      	ldr	r0, [pc, #296]	; (801e29c <tcp_enqueue_flags+0x1c4>)
 801e174:	f005 fe04 	bl	8023d80 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801e178:	687b      	ldr	r3, [r7, #4]
 801e17a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801e17c:	78fa      	ldrb	r2, [r7, #3]
 801e17e:	7ffb      	ldrb	r3, [r7, #31]
 801e180:	9300      	str	r3, [sp, #0]
 801e182:	460b      	mov	r3, r1
 801e184:	6939      	ldr	r1, [r7, #16]
 801e186:	6878      	ldr	r0, [r7, #4]
 801e188:	f7ff f918 	bl	801d3bc <tcp_create_segment>
 801e18c:	60f8      	str	r0, [r7, #12]
 801e18e:	68fb      	ldr	r3, [r7, #12]
 801e190:	2b00      	cmp	r3, #0
 801e192:	d109      	bne.n	801e1a8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	8b5b      	ldrh	r3, [r3, #26]
 801e198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e19c:	b29a      	uxth	r2, r3
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e1a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e1a6:	e070      	b.n	801e28a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e1a8:	68fb      	ldr	r3, [r7, #12]
 801e1aa:	68db      	ldr	r3, [r3, #12]
 801e1ac:	f003 0303 	and.w	r3, r3, #3
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	d006      	beq.n	801e1c2 <tcp_enqueue_flags+0xea>
 801e1b4:	4b37      	ldr	r3, [pc, #220]	; (801e294 <tcp_enqueue_flags+0x1bc>)
 801e1b6:	f240 4242 	movw	r2, #1090	; 0x442
 801e1ba:	493b      	ldr	r1, [pc, #236]	; (801e2a8 <tcp_enqueue_flags+0x1d0>)
 801e1bc:	4837      	ldr	r0, [pc, #220]	; (801e29c <tcp_enqueue_flags+0x1c4>)
 801e1be:	f005 fddf 	bl	8023d80 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e1c2:	68fb      	ldr	r3, [r7, #12]
 801e1c4:	891b      	ldrh	r3, [r3, #8]
 801e1c6:	2b00      	cmp	r3, #0
 801e1c8:	d006      	beq.n	801e1d8 <tcp_enqueue_flags+0x100>
 801e1ca:	4b32      	ldr	r3, [pc, #200]	; (801e294 <tcp_enqueue_flags+0x1bc>)
 801e1cc:	f240 4243 	movw	r2, #1091	; 0x443
 801e1d0:	4936      	ldr	r1, [pc, #216]	; (801e2ac <tcp_enqueue_flags+0x1d4>)
 801e1d2:	4832      	ldr	r0, [pc, #200]	; (801e29c <tcp_enqueue_flags+0x1c4>)
 801e1d4:	f005 fdd4 	bl	8023d80 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801e1d8:	687b      	ldr	r3, [r7, #4]
 801e1da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d103      	bne.n	801e1e8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	68fa      	ldr	r2, [r7, #12]
 801e1e4:	66da      	str	r2, [r3, #108]	; 0x6c
 801e1e6:	e00d      	b.n	801e204 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e1ec:	61bb      	str	r3, [r7, #24]
 801e1ee:	e002      	b.n	801e1f6 <tcp_enqueue_flags+0x11e>
 801e1f0:	69bb      	ldr	r3, [r7, #24]
 801e1f2:	681b      	ldr	r3, [r3, #0]
 801e1f4:	61bb      	str	r3, [r7, #24]
 801e1f6:	69bb      	ldr	r3, [r7, #24]
 801e1f8:	681b      	ldr	r3, [r3, #0]
 801e1fa:	2b00      	cmp	r3, #0
 801e1fc:	d1f8      	bne.n	801e1f0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801e1fe:	69bb      	ldr	r3, [r7, #24]
 801e200:	68fa      	ldr	r2, [r7, #12]
 801e202:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801e204:	687b      	ldr	r3, [r7, #4]
 801e206:	2200      	movs	r2, #0
 801e208:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801e20c:	78fb      	ldrb	r3, [r7, #3]
 801e20e:	f003 0302 	and.w	r3, r3, #2
 801e212:	2b00      	cmp	r3, #0
 801e214:	d104      	bne.n	801e220 <tcp_enqueue_flags+0x148>
 801e216:	78fb      	ldrb	r3, [r7, #3]
 801e218:	f003 0301 	and.w	r3, r3, #1
 801e21c:	2b00      	cmp	r3, #0
 801e21e:	d004      	beq.n	801e22a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e224:	1c5a      	adds	r2, r3, #1
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801e22a:	78fb      	ldrb	r3, [r7, #3]
 801e22c:	f003 0301 	and.w	r3, r3, #1
 801e230:	2b00      	cmp	r3, #0
 801e232:	d006      	beq.n	801e242 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801e234:	687b      	ldr	r3, [r7, #4]
 801e236:	8b5b      	ldrh	r3, [r3, #26]
 801e238:	f043 0320 	orr.w	r3, r3, #32
 801e23c:	b29a      	uxth	r2, r3
 801e23e:	687b      	ldr	r3, [r7, #4]
 801e240:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e242:	68fb      	ldr	r3, [r7, #12]
 801e244:	685b      	ldr	r3, [r3, #4]
 801e246:	4618      	mov	r0, r3
 801e248:	f7fa fbf0 	bl	8018a2c <pbuf_clen>
 801e24c:	4603      	mov	r3, r0
 801e24e:	461a      	mov	r2, r3
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e256:	4413      	add	r3, r2
 801e258:	b29a      	uxth	r2, r3
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e266:	2b00      	cmp	r3, #0
 801e268:	d00e      	beq.n	801e288 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d10a      	bne.n	801e288 <tcp_enqueue_flags+0x1b0>
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e276:	2b00      	cmp	r3, #0
 801e278:	d106      	bne.n	801e288 <tcp_enqueue_flags+0x1b0>
 801e27a:	4b06      	ldr	r3, [pc, #24]	; (801e294 <tcp_enqueue_flags+0x1bc>)
 801e27c:	f240 4265 	movw	r2, #1125	; 0x465
 801e280:	490b      	ldr	r1, [pc, #44]	; (801e2b0 <tcp_enqueue_flags+0x1d8>)
 801e282:	4806      	ldr	r0, [pc, #24]	; (801e29c <tcp_enqueue_flags+0x1c4>)
 801e284:	f005 fd7c 	bl	8023d80 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801e288:	2300      	movs	r3, #0
}
 801e28a:	4618      	mov	r0, r3
 801e28c:	3720      	adds	r7, #32
 801e28e:	46bd      	mov	sp, r7
 801e290:	bd80      	pop	{r7, pc}
 801e292:	bf00      	nop
 801e294:	080274c4 	.word	0x080274c4
 801e298:	080278e8 	.word	0x080278e8
 801e29c:	08027518 	.word	0x08027518
 801e2a0:	08027940 	.word	0x08027940
 801e2a4:	08027960 	.word	0x08027960
 801e2a8:	0802799c 	.word	0x0802799c
 801e2ac:	080279b4 	.word	0x080279b4
 801e2b0:	080279e0 	.word	0x080279e0

0801e2b4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801e2b4:	b5b0      	push	{r4, r5, r7, lr}
 801e2b6:	b08a      	sub	sp, #40	; 0x28
 801e2b8:	af00      	add	r7, sp, #0
 801e2ba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	2b00      	cmp	r3, #0
 801e2c0:	d106      	bne.n	801e2d0 <tcp_output+0x1c>
 801e2c2:	4b8a      	ldr	r3, [pc, #552]	; (801e4ec <tcp_output+0x238>)
 801e2c4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801e2c8:	4989      	ldr	r1, [pc, #548]	; (801e4f0 <tcp_output+0x23c>)
 801e2ca:	488a      	ldr	r0, [pc, #552]	; (801e4f4 <tcp_output+0x240>)
 801e2cc:	f005 fd58 	bl	8023d80 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	7d1b      	ldrb	r3, [r3, #20]
 801e2d4:	2b01      	cmp	r3, #1
 801e2d6:	d106      	bne.n	801e2e6 <tcp_output+0x32>
 801e2d8:	4b84      	ldr	r3, [pc, #528]	; (801e4ec <tcp_output+0x238>)
 801e2da:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801e2de:	4986      	ldr	r1, [pc, #536]	; (801e4f8 <tcp_output+0x244>)
 801e2e0:	4884      	ldr	r0, [pc, #528]	; (801e4f4 <tcp_output+0x240>)
 801e2e2:	f005 fd4d 	bl	8023d80 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801e2e6:	4b85      	ldr	r3, [pc, #532]	; (801e4fc <tcp_output+0x248>)
 801e2e8:	681b      	ldr	r3, [r3, #0]
 801e2ea:	687a      	ldr	r2, [r7, #4]
 801e2ec:	429a      	cmp	r2, r3
 801e2ee:	d101      	bne.n	801e2f4 <tcp_output+0x40>
    return ERR_OK;
 801e2f0:	2300      	movs	r3, #0
 801e2f2:	e1ce      	b.n	801e692 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e2f4:	687b      	ldr	r3, [r7, #4]
 801e2f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e300:	4293      	cmp	r3, r2
 801e302:	bf28      	it	cs
 801e304:	4613      	movcs	r3, r2
 801e306:	b29b      	uxth	r3, r3
 801e308:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e30e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801e310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e312:	2b00      	cmp	r3, #0
 801e314:	d10b      	bne.n	801e32e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801e316:	687b      	ldr	r3, [r7, #4]
 801e318:	8b5b      	ldrh	r3, [r3, #26]
 801e31a:	f003 0302 	and.w	r3, r3, #2
 801e31e:	2b00      	cmp	r3, #0
 801e320:	f000 81aa 	beq.w	801e678 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801e324:	6878      	ldr	r0, [r7, #4]
 801e326:	f000 fdcb 	bl	801eec0 <tcp_send_empty_ack>
 801e32a:	4603      	mov	r3, r0
 801e32c:	e1b1      	b.n	801e692 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801e32e:	6879      	ldr	r1, [r7, #4]
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	3304      	adds	r3, #4
 801e334:	461a      	mov	r2, r3
 801e336:	6878      	ldr	r0, [r7, #4]
 801e338:	f7ff f824 	bl	801d384 <tcp_route>
 801e33c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801e33e:	697b      	ldr	r3, [r7, #20]
 801e340:	2b00      	cmp	r3, #0
 801e342:	d102      	bne.n	801e34a <tcp_output+0x96>
    return ERR_RTE;
 801e344:	f06f 0303 	mvn.w	r3, #3
 801e348:	e1a3      	b.n	801e692 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	2b00      	cmp	r3, #0
 801e34e:	d003      	beq.n	801e358 <tcp_output+0xa4>
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	2b00      	cmp	r3, #0
 801e356:	d111      	bne.n	801e37c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801e358:	697b      	ldr	r3, [r7, #20]
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d002      	beq.n	801e364 <tcp_output+0xb0>
 801e35e:	697b      	ldr	r3, [r7, #20]
 801e360:	3304      	adds	r3, #4
 801e362:	e000      	b.n	801e366 <tcp_output+0xb2>
 801e364:	2300      	movs	r3, #0
 801e366:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801e368:	693b      	ldr	r3, [r7, #16]
 801e36a:	2b00      	cmp	r3, #0
 801e36c:	d102      	bne.n	801e374 <tcp_output+0xc0>
      return ERR_RTE;
 801e36e:	f06f 0303 	mvn.w	r3, #3
 801e372:	e18e      	b.n	801e692 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801e374:	693b      	ldr	r3, [r7, #16]
 801e376:	681a      	ldr	r2, [r3, #0]
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e37e:	68db      	ldr	r3, [r3, #12]
 801e380:	685b      	ldr	r3, [r3, #4]
 801e382:	4618      	mov	r0, r3
 801e384:	f7f8 fee7 	bl	8017156 <lwip_htonl>
 801e388:	4602      	mov	r2, r0
 801e38a:	687b      	ldr	r3, [r7, #4]
 801e38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e38e:	1ad3      	subs	r3, r2, r3
 801e390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e392:	8912      	ldrh	r2, [r2, #8]
 801e394:	4413      	add	r3, r2
 801e396:	69ba      	ldr	r2, [r7, #24]
 801e398:	429a      	cmp	r2, r3
 801e39a:	d227      	bcs.n	801e3ec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e3a2:	461a      	mov	r2, r3
 801e3a4:	69bb      	ldr	r3, [r7, #24]
 801e3a6:	4293      	cmp	r3, r2
 801e3a8:	d114      	bne.n	801e3d4 <tcp_output+0x120>
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	d110      	bne.n	801e3d4 <tcp_output+0x120>
 801e3b2:	687b      	ldr	r3, [r7, #4]
 801e3b4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801e3b8:	2b00      	cmp	r3, #0
 801e3ba:	d10b      	bne.n	801e3d4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	2200      	movs	r2, #0
 801e3c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801e3c4:	687b      	ldr	r3, [r7, #4]
 801e3c6:	2201      	movs	r2, #1
 801e3c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	2200      	movs	r2, #0
 801e3d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	8b5b      	ldrh	r3, [r3, #26]
 801e3d8:	f003 0302 	and.w	r3, r3, #2
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	f000 814d 	beq.w	801e67c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801e3e2:	6878      	ldr	r0, [r7, #4]
 801e3e4:	f000 fd6c 	bl	801eec0 <tcp_send_empty_ack>
 801e3e8:	4603      	mov	r3, r0
 801e3ea:	e152      	b.n	801e692 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	2200      	movs	r2, #0
 801e3f0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801e3f4:	687b      	ldr	r3, [r7, #4]
 801e3f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e3f8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801e3fa:	6a3b      	ldr	r3, [r7, #32]
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	f000 811c 	beq.w	801e63a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801e402:	e002      	b.n	801e40a <tcp_output+0x156>
 801e404:	6a3b      	ldr	r3, [r7, #32]
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	623b      	str	r3, [r7, #32]
 801e40a:	6a3b      	ldr	r3, [r7, #32]
 801e40c:	681b      	ldr	r3, [r3, #0]
 801e40e:	2b00      	cmp	r3, #0
 801e410:	d1f8      	bne.n	801e404 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801e412:	e112      	b.n	801e63a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801e414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e416:	68db      	ldr	r3, [r3, #12]
 801e418:	899b      	ldrh	r3, [r3, #12]
 801e41a:	b29b      	uxth	r3, r3
 801e41c:	4618      	mov	r0, r3
 801e41e:	f7f8 fe85 	bl	801712c <lwip_htons>
 801e422:	4603      	mov	r3, r0
 801e424:	b2db      	uxtb	r3, r3
 801e426:	f003 0304 	and.w	r3, r3, #4
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	d006      	beq.n	801e43c <tcp_output+0x188>
 801e42e:	4b2f      	ldr	r3, [pc, #188]	; (801e4ec <tcp_output+0x238>)
 801e430:	f240 5236 	movw	r2, #1334	; 0x536
 801e434:	4932      	ldr	r1, [pc, #200]	; (801e500 <tcp_output+0x24c>)
 801e436:	482f      	ldr	r0, [pc, #188]	; (801e4f4 <tcp_output+0x240>)
 801e438:	f005 fca2 	bl	8023d80 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e440:	2b00      	cmp	r3, #0
 801e442:	d01f      	beq.n	801e484 <tcp_output+0x1d0>
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	8b5b      	ldrh	r3, [r3, #26]
 801e448:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d119      	bne.n	801e484 <tcp_output+0x1d0>
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e454:	2b00      	cmp	r3, #0
 801e456:	d00b      	beq.n	801e470 <tcp_output+0x1bc>
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e45c:	681b      	ldr	r3, [r3, #0]
 801e45e:	2b00      	cmp	r3, #0
 801e460:	d110      	bne.n	801e484 <tcp_output+0x1d0>
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e466:	891a      	ldrh	r2, [r3, #8]
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e46c:	429a      	cmp	r2, r3
 801e46e:	d209      	bcs.n	801e484 <tcp_output+0x1d0>
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801e476:	2b00      	cmp	r3, #0
 801e478:	d004      	beq.n	801e484 <tcp_output+0x1d0>
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e480:	2b08      	cmp	r3, #8
 801e482:	d901      	bls.n	801e488 <tcp_output+0x1d4>
 801e484:	2301      	movs	r3, #1
 801e486:	e000      	b.n	801e48a <tcp_output+0x1d6>
 801e488:	2300      	movs	r3, #0
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	d106      	bne.n	801e49c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	8b5b      	ldrh	r3, [r3, #26]
 801e492:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e496:	2b00      	cmp	r3, #0
 801e498:	f000 80e4 	beq.w	801e664 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	7d1b      	ldrb	r3, [r3, #20]
 801e4a0:	2b02      	cmp	r3, #2
 801e4a2:	d00d      	beq.n	801e4c0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4a6:	68db      	ldr	r3, [r3, #12]
 801e4a8:	899b      	ldrh	r3, [r3, #12]
 801e4aa:	b29c      	uxth	r4, r3
 801e4ac:	2010      	movs	r0, #16
 801e4ae:	f7f8 fe3d 	bl	801712c <lwip_htons>
 801e4b2:	4603      	mov	r3, r0
 801e4b4:	461a      	mov	r2, r3
 801e4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4b8:	68db      	ldr	r3, [r3, #12]
 801e4ba:	4322      	orrs	r2, r4
 801e4bc:	b292      	uxth	r2, r2
 801e4be:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801e4c0:	697a      	ldr	r2, [r7, #20]
 801e4c2:	6879      	ldr	r1, [r7, #4]
 801e4c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e4c6:	f000 f909 	bl	801e6dc <tcp_output_segment>
 801e4ca:	4603      	mov	r3, r0
 801e4cc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801e4ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e4d2:	2b00      	cmp	r3, #0
 801e4d4:	d016      	beq.n	801e504 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	8b5b      	ldrh	r3, [r3, #26]
 801e4da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e4de:	b29a      	uxth	r2, r3
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	835a      	strh	r2, [r3, #26]
      return err;
 801e4e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e4e8:	e0d3      	b.n	801e692 <tcp_output+0x3de>
 801e4ea:	bf00      	nop
 801e4ec:	080274c4 	.word	0x080274c4
 801e4f0:	08027a08 	.word	0x08027a08
 801e4f4:	08027518 	.word	0x08027518
 801e4f8:	08027a20 	.word	0x08027a20
 801e4fc:	2000bfe4 	.word	0x2000bfe4
 801e500:	08027a48 	.word	0x08027a48
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801e504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e506:	681a      	ldr	r2, [r3, #0]
 801e508:	687b      	ldr	r3, [r7, #4]
 801e50a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	7d1b      	ldrb	r3, [r3, #20]
 801e510:	2b02      	cmp	r3, #2
 801e512:	d006      	beq.n	801e522 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e514:	687b      	ldr	r3, [r7, #4]
 801e516:	8b5b      	ldrh	r3, [r3, #26]
 801e518:	f023 0303 	bic.w	r3, r3, #3
 801e51c:	b29a      	uxth	r2, r3
 801e51e:	687b      	ldr	r3, [r7, #4]
 801e520:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e524:	68db      	ldr	r3, [r3, #12]
 801e526:	685b      	ldr	r3, [r3, #4]
 801e528:	4618      	mov	r0, r3
 801e52a:	f7f8 fe14 	bl	8017156 <lwip_htonl>
 801e52e:	4604      	mov	r4, r0
 801e530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e532:	891b      	ldrh	r3, [r3, #8]
 801e534:	461d      	mov	r5, r3
 801e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e538:	68db      	ldr	r3, [r3, #12]
 801e53a:	899b      	ldrh	r3, [r3, #12]
 801e53c:	b29b      	uxth	r3, r3
 801e53e:	4618      	mov	r0, r3
 801e540:	f7f8 fdf4 	bl	801712c <lwip_htons>
 801e544:	4603      	mov	r3, r0
 801e546:	b2db      	uxtb	r3, r3
 801e548:	f003 0303 	and.w	r3, r3, #3
 801e54c:	2b00      	cmp	r3, #0
 801e54e:	d001      	beq.n	801e554 <tcp_output+0x2a0>
 801e550:	2301      	movs	r3, #1
 801e552:	e000      	b.n	801e556 <tcp_output+0x2a2>
 801e554:	2300      	movs	r3, #0
 801e556:	442b      	add	r3, r5
 801e558:	4423      	add	r3, r4
 801e55a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e55c:	687b      	ldr	r3, [r7, #4]
 801e55e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e560:	68bb      	ldr	r3, [r7, #8]
 801e562:	1ad3      	subs	r3, r2, r3
 801e564:	2b00      	cmp	r3, #0
 801e566:	da02      	bge.n	801e56e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	68ba      	ldr	r2, [r7, #8]
 801e56c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801e56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e570:	891b      	ldrh	r3, [r3, #8]
 801e572:	461c      	mov	r4, r3
 801e574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e576:	68db      	ldr	r3, [r3, #12]
 801e578:	899b      	ldrh	r3, [r3, #12]
 801e57a:	b29b      	uxth	r3, r3
 801e57c:	4618      	mov	r0, r3
 801e57e:	f7f8 fdd5 	bl	801712c <lwip_htons>
 801e582:	4603      	mov	r3, r0
 801e584:	b2db      	uxtb	r3, r3
 801e586:	f003 0303 	and.w	r3, r3, #3
 801e58a:	2b00      	cmp	r3, #0
 801e58c:	d001      	beq.n	801e592 <tcp_output+0x2de>
 801e58e:	2301      	movs	r3, #1
 801e590:	e000      	b.n	801e594 <tcp_output+0x2e0>
 801e592:	2300      	movs	r3, #0
 801e594:	4423      	add	r3, r4
 801e596:	2b00      	cmp	r3, #0
 801e598:	d049      	beq.n	801e62e <tcp_output+0x37a>
      seg->next = NULL;
 801e59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e59c:	2200      	movs	r2, #0
 801e59e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e5a4:	2b00      	cmp	r3, #0
 801e5a6:	d105      	bne.n	801e5b4 <tcp_output+0x300>
        pcb->unacked = seg;
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e5ac:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801e5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5b0:	623b      	str	r3, [r7, #32]
 801e5b2:	e03f      	b.n	801e634 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801e5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5b6:	68db      	ldr	r3, [r3, #12]
 801e5b8:	685b      	ldr	r3, [r3, #4]
 801e5ba:	4618      	mov	r0, r3
 801e5bc:	f7f8 fdcb 	bl	8017156 <lwip_htonl>
 801e5c0:	4604      	mov	r4, r0
 801e5c2:	6a3b      	ldr	r3, [r7, #32]
 801e5c4:	68db      	ldr	r3, [r3, #12]
 801e5c6:	685b      	ldr	r3, [r3, #4]
 801e5c8:	4618      	mov	r0, r3
 801e5ca:	f7f8 fdc4 	bl	8017156 <lwip_htonl>
 801e5ce:	4603      	mov	r3, r0
 801e5d0:	1ae3      	subs	r3, r4, r3
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	da24      	bge.n	801e620 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801e5d6:	687b      	ldr	r3, [r7, #4]
 801e5d8:	3370      	adds	r3, #112	; 0x70
 801e5da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e5dc:	e002      	b.n	801e5e4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801e5de:	69fb      	ldr	r3, [r7, #28]
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e5e4:	69fb      	ldr	r3, [r7, #28]
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	d011      	beq.n	801e610 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e5ec:	69fb      	ldr	r3, [r7, #28]
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	68db      	ldr	r3, [r3, #12]
 801e5f2:	685b      	ldr	r3, [r3, #4]
 801e5f4:	4618      	mov	r0, r3
 801e5f6:	f7f8 fdae 	bl	8017156 <lwip_htonl>
 801e5fa:	4604      	mov	r4, r0
 801e5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5fe:	68db      	ldr	r3, [r3, #12]
 801e600:	685b      	ldr	r3, [r3, #4]
 801e602:	4618      	mov	r0, r3
 801e604:	f7f8 fda7 	bl	8017156 <lwip_htonl>
 801e608:	4603      	mov	r3, r0
 801e60a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801e60c:	2b00      	cmp	r3, #0
 801e60e:	dbe6      	blt.n	801e5de <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801e610:	69fb      	ldr	r3, [r7, #28]
 801e612:	681a      	ldr	r2, [r3, #0]
 801e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e616:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801e618:	69fb      	ldr	r3, [r7, #28]
 801e61a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e61c:	601a      	str	r2, [r3, #0]
 801e61e:	e009      	b.n	801e634 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801e620:	6a3b      	ldr	r3, [r7, #32]
 801e622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e624:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801e626:	6a3b      	ldr	r3, [r7, #32]
 801e628:	681b      	ldr	r3, [r3, #0]
 801e62a:	623b      	str	r3, [r7, #32]
 801e62c:	e002      	b.n	801e634 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801e62e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e630:	f7fb ff19 	bl	801a466 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801e634:	687b      	ldr	r3, [r7, #4]
 801e636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e638:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801e63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	d012      	beq.n	801e666 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e642:	68db      	ldr	r3, [r3, #12]
 801e644:	685b      	ldr	r3, [r3, #4]
 801e646:	4618      	mov	r0, r3
 801e648:	f7f8 fd85 	bl	8017156 <lwip_htonl>
 801e64c:	4602      	mov	r2, r0
 801e64e:	687b      	ldr	r3, [r7, #4]
 801e650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e652:	1ad3      	subs	r3, r2, r3
 801e654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e656:	8912      	ldrh	r2, [r2, #8]
 801e658:	4413      	add	r3, r2
  while (seg != NULL &&
 801e65a:	69ba      	ldr	r2, [r7, #24]
 801e65c:	429a      	cmp	r2, r3
 801e65e:	f4bf aed9 	bcs.w	801e414 <tcp_output+0x160>
 801e662:	e000      	b.n	801e666 <tcp_output+0x3b2>
      break;
 801e664:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	d108      	bne.n	801e680 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801e66e:	687b      	ldr	r3, [r7, #4]
 801e670:	2200      	movs	r2, #0
 801e672:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801e676:	e004      	b.n	801e682 <tcp_output+0x3ce>
    goto output_done;
 801e678:	bf00      	nop
 801e67a:	e002      	b.n	801e682 <tcp_output+0x3ce>
    goto output_done;
 801e67c:	bf00      	nop
 801e67e:	e000      	b.n	801e682 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801e680:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e682:	687b      	ldr	r3, [r7, #4]
 801e684:	8b5b      	ldrh	r3, [r3, #26]
 801e686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e68a:	b29a      	uxth	r2, r3
 801e68c:	687b      	ldr	r3, [r7, #4]
 801e68e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801e690:	2300      	movs	r3, #0
}
 801e692:	4618      	mov	r0, r3
 801e694:	3728      	adds	r7, #40	; 0x28
 801e696:	46bd      	mov	sp, r7
 801e698:	bdb0      	pop	{r4, r5, r7, pc}
 801e69a:	bf00      	nop

0801e69c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801e69c:	b580      	push	{r7, lr}
 801e69e:	b082      	sub	sp, #8
 801e6a0:	af00      	add	r7, sp, #0
 801e6a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801e6a4:	687b      	ldr	r3, [r7, #4]
 801e6a6:	2b00      	cmp	r3, #0
 801e6a8:	d106      	bne.n	801e6b8 <tcp_output_segment_busy+0x1c>
 801e6aa:	4b09      	ldr	r3, [pc, #36]	; (801e6d0 <tcp_output_segment_busy+0x34>)
 801e6ac:	f240 529a 	movw	r2, #1434	; 0x59a
 801e6b0:	4908      	ldr	r1, [pc, #32]	; (801e6d4 <tcp_output_segment_busy+0x38>)
 801e6b2:	4809      	ldr	r0, [pc, #36]	; (801e6d8 <tcp_output_segment_busy+0x3c>)
 801e6b4:	f005 fb64 	bl	8023d80 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801e6b8:	687b      	ldr	r3, [r7, #4]
 801e6ba:	685b      	ldr	r3, [r3, #4]
 801e6bc:	7b9b      	ldrb	r3, [r3, #14]
 801e6be:	2b01      	cmp	r3, #1
 801e6c0:	d001      	beq.n	801e6c6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801e6c2:	2301      	movs	r3, #1
 801e6c4:	e000      	b.n	801e6c8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801e6c6:	2300      	movs	r3, #0
}
 801e6c8:	4618      	mov	r0, r3
 801e6ca:	3708      	adds	r7, #8
 801e6cc:	46bd      	mov	sp, r7
 801e6ce:	bd80      	pop	{r7, pc}
 801e6d0:	080274c4 	.word	0x080274c4
 801e6d4:	08027a60 	.word	0x08027a60
 801e6d8:	08027518 	.word	0x08027518

0801e6dc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801e6dc:	b5b0      	push	{r4, r5, r7, lr}
 801e6de:	b08c      	sub	sp, #48	; 0x30
 801e6e0:	af04      	add	r7, sp, #16
 801e6e2:	60f8      	str	r0, [r7, #12]
 801e6e4:	60b9      	str	r1, [r7, #8]
 801e6e6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801e6e8:	68fb      	ldr	r3, [r7, #12]
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d106      	bne.n	801e6fc <tcp_output_segment+0x20>
 801e6ee:	4b63      	ldr	r3, [pc, #396]	; (801e87c <tcp_output_segment+0x1a0>)
 801e6f0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801e6f4:	4962      	ldr	r1, [pc, #392]	; (801e880 <tcp_output_segment+0x1a4>)
 801e6f6:	4863      	ldr	r0, [pc, #396]	; (801e884 <tcp_output_segment+0x1a8>)
 801e6f8:	f005 fb42 	bl	8023d80 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801e6fc:	68bb      	ldr	r3, [r7, #8]
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	d106      	bne.n	801e710 <tcp_output_segment+0x34>
 801e702:	4b5e      	ldr	r3, [pc, #376]	; (801e87c <tcp_output_segment+0x1a0>)
 801e704:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801e708:	495f      	ldr	r1, [pc, #380]	; (801e888 <tcp_output_segment+0x1ac>)
 801e70a:	485e      	ldr	r0, [pc, #376]	; (801e884 <tcp_output_segment+0x1a8>)
 801e70c:	f005 fb38 	bl	8023d80 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801e710:	687b      	ldr	r3, [r7, #4]
 801e712:	2b00      	cmp	r3, #0
 801e714:	d106      	bne.n	801e724 <tcp_output_segment+0x48>
 801e716:	4b59      	ldr	r3, [pc, #356]	; (801e87c <tcp_output_segment+0x1a0>)
 801e718:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801e71c:	495b      	ldr	r1, [pc, #364]	; (801e88c <tcp_output_segment+0x1b0>)
 801e71e:	4859      	ldr	r0, [pc, #356]	; (801e884 <tcp_output_segment+0x1a8>)
 801e720:	f005 fb2e 	bl	8023d80 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801e724:	68f8      	ldr	r0, [r7, #12]
 801e726:	f7ff ffb9 	bl	801e69c <tcp_output_segment_busy>
 801e72a:	4603      	mov	r3, r0
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	d001      	beq.n	801e734 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801e730:	2300      	movs	r3, #0
 801e732:	e09f      	b.n	801e874 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801e734:	68bb      	ldr	r3, [r7, #8]
 801e736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e738:	68fb      	ldr	r3, [r7, #12]
 801e73a:	68dc      	ldr	r4, [r3, #12]
 801e73c:	4610      	mov	r0, r2
 801e73e:	f7f8 fd0a 	bl	8017156 <lwip_htonl>
 801e742:	4603      	mov	r3, r0
 801e744:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801e746:	68bb      	ldr	r3, [r7, #8]
 801e748:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801e74a:	68fb      	ldr	r3, [r7, #12]
 801e74c:	68dc      	ldr	r4, [r3, #12]
 801e74e:	4610      	mov	r0, r2
 801e750:	f7f8 fcec 	bl	801712c <lwip_htons>
 801e754:	4603      	mov	r3, r0
 801e756:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e758:	68bb      	ldr	r3, [r7, #8]
 801e75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e75c:	68ba      	ldr	r2, [r7, #8]
 801e75e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801e760:	441a      	add	r2, r3
 801e762:	68bb      	ldr	r3, [r7, #8]
 801e764:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801e766:	68fb      	ldr	r3, [r7, #12]
 801e768:	68db      	ldr	r3, [r3, #12]
 801e76a:	3314      	adds	r3, #20
 801e76c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801e76e:	68fb      	ldr	r3, [r7, #12]
 801e770:	7a9b      	ldrb	r3, [r3, #10]
 801e772:	f003 0301 	and.w	r3, r3, #1
 801e776:	2b00      	cmp	r3, #0
 801e778:	d015      	beq.n	801e7a6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801e77a:	68bb      	ldr	r3, [r7, #8]
 801e77c:	3304      	adds	r3, #4
 801e77e:	461a      	mov	r2, r3
 801e780:	6879      	ldr	r1, [r7, #4]
 801e782:	f44f 7006 	mov.w	r0, #536	; 0x218
 801e786:	f7fc fa33 	bl	801abf0 <tcp_eff_send_mss_netif>
 801e78a:	4603      	mov	r3, r0
 801e78c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801e78e:	8b7b      	ldrh	r3, [r7, #26]
 801e790:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801e794:	4618      	mov	r0, r3
 801e796:	f7f8 fcde 	bl	8017156 <lwip_htonl>
 801e79a:	4602      	mov	r2, r0
 801e79c:	69fb      	ldr	r3, [r7, #28]
 801e79e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801e7a0:	69fb      	ldr	r3, [r7, #28]
 801e7a2:	3304      	adds	r3, #4
 801e7a4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801e7a6:	68bb      	ldr	r3, [r7, #8]
 801e7a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	da02      	bge.n	801e7b6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801e7b0:	68bb      	ldr	r3, [r7, #8]
 801e7b2:	2200      	movs	r2, #0
 801e7b4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801e7b6:	68bb      	ldr	r3, [r7, #8]
 801e7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	d10c      	bne.n	801e7d8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801e7be:	4b34      	ldr	r3, [pc, #208]	; (801e890 <tcp_output_segment+0x1b4>)
 801e7c0:	681a      	ldr	r2, [r3, #0]
 801e7c2:	68bb      	ldr	r3, [r7, #8]
 801e7c4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801e7c6:	68fb      	ldr	r3, [r7, #12]
 801e7c8:	68db      	ldr	r3, [r3, #12]
 801e7ca:	685b      	ldr	r3, [r3, #4]
 801e7cc:	4618      	mov	r0, r3
 801e7ce:	f7f8 fcc2 	bl	8017156 <lwip_htonl>
 801e7d2:	4602      	mov	r2, r0
 801e7d4:	68bb      	ldr	r3, [r7, #8]
 801e7d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e7d8:	68fb      	ldr	r3, [r7, #12]
 801e7da:	68da      	ldr	r2, [r3, #12]
 801e7dc:	68fb      	ldr	r3, [r7, #12]
 801e7de:	685b      	ldr	r3, [r3, #4]
 801e7e0:	685b      	ldr	r3, [r3, #4]
 801e7e2:	1ad3      	subs	r3, r2, r3
 801e7e4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801e7e6:	68fb      	ldr	r3, [r7, #12]
 801e7e8:	685b      	ldr	r3, [r3, #4]
 801e7ea:	8959      	ldrh	r1, [r3, #10]
 801e7ec:	68fb      	ldr	r3, [r7, #12]
 801e7ee:	685b      	ldr	r3, [r3, #4]
 801e7f0:	8b3a      	ldrh	r2, [r7, #24]
 801e7f2:	1a8a      	subs	r2, r1, r2
 801e7f4:	b292      	uxth	r2, r2
 801e7f6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801e7f8:	68fb      	ldr	r3, [r7, #12]
 801e7fa:	685b      	ldr	r3, [r3, #4]
 801e7fc:	8919      	ldrh	r1, [r3, #8]
 801e7fe:	68fb      	ldr	r3, [r7, #12]
 801e800:	685b      	ldr	r3, [r3, #4]
 801e802:	8b3a      	ldrh	r2, [r7, #24]
 801e804:	1a8a      	subs	r2, r1, r2
 801e806:	b292      	uxth	r2, r2
 801e808:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801e80a:	68fb      	ldr	r3, [r7, #12]
 801e80c:	685b      	ldr	r3, [r3, #4]
 801e80e:	68fa      	ldr	r2, [r7, #12]
 801e810:	68d2      	ldr	r2, [r2, #12]
 801e812:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801e814:	68fb      	ldr	r3, [r7, #12]
 801e816:	68db      	ldr	r3, [r3, #12]
 801e818:	2200      	movs	r2, #0
 801e81a:	741a      	strb	r2, [r3, #16]
 801e81c:	2200      	movs	r2, #0
 801e81e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801e820:	68fb      	ldr	r3, [r7, #12]
 801e822:	68db      	ldr	r3, [r3, #12]
 801e824:	f103 0214 	add.w	r2, r3, #20
 801e828:	68fb      	ldr	r3, [r7, #12]
 801e82a:	7a9b      	ldrb	r3, [r3, #10]
 801e82c:	009b      	lsls	r3, r3, #2
 801e82e:	f003 0304 	and.w	r3, r3, #4
 801e832:	4413      	add	r3, r2
 801e834:	69fa      	ldr	r2, [r7, #28]
 801e836:	429a      	cmp	r2, r3
 801e838:	d006      	beq.n	801e848 <tcp_output_segment+0x16c>
 801e83a:	4b10      	ldr	r3, [pc, #64]	; (801e87c <tcp_output_segment+0x1a0>)
 801e83c:	f240 621c 	movw	r2, #1564	; 0x61c
 801e840:	4914      	ldr	r1, [pc, #80]	; (801e894 <tcp_output_segment+0x1b8>)
 801e842:	4810      	ldr	r0, [pc, #64]	; (801e884 <tcp_output_segment+0x1a8>)
 801e844:	f005 fa9c 	bl	8023d80 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801e848:	68fb      	ldr	r3, [r7, #12]
 801e84a:	6858      	ldr	r0, [r3, #4]
 801e84c:	68b9      	ldr	r1, [r7, #8]
 801e84e:	68bb      	ldr	r3, [r7, #8]
 801e850:	1d1c      	adds	r4, r3, #4
 801e852:	68bb      	ldr	r3, [r7, #8]
 801e854:	7add      	ldrb	r5, [r3, #11]
 801e856:	68bb      	ldr	r3, [r7, #8]
 801e858:	7a9b      	ldrb	r3, [r3, #10]
 801e85a:	687a      	ldr	r2, [r7, #4]
 801e85c:	9202      	str	r2, [sp, #8]
 801e85e:	2206      	movs	r2, #6
 801e860:	9201      	str	r2, [sp, #4]
 801e862:	9300      	str	r3, [sp, #0]
 801e864:	462b      	mov	r3, r5
 801e866:	4622      	mov	r2, r4
 801e868:	f002 fe04 	bl	8021474 <ip4_output_if>
 801e86c:	4603      	mov	r3, r0
 801e86e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801e870:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e874:	4618      	mov	r0, r3
 801e876:	3720      	adds	r7, #32
 801e878:	46bd      	mov	sp, r7
 801e87a:	bdb0      	pop	{r4, r5, r7, pc}
 801e87c:	080274c4 	.word	0x080274c4
 801e880:	08027a88 	.word	0x08027a88
 801e884:	08027518 	.word	0x08027518
 801e888:	08027aa8 	.word	0x08027aa8
 801e88c:	08027ac8 	.word	0x08027ac8
 801e890:	2000bf98 	.word	0x2000bf98
 801e894:	08027aec 	.word	0x08027aec

0801e898 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801e898:	b5b0      	push	{r4, r5, r7, lr}
 801e89a:	b084      	sub	sp, #16
 801e89c:	af00      	add	r7, sp, #0
 801e89e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801e8a0:	687b      	ldr	r3, [r7, #4]
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	d106      	bne.n	801e8b4 <tcp_rexmit_rto_prepare+0x1c>
 801e8a6:	4b31      	ldr	r3, [pc, #196]	; (801e96c <tcp_rexmit_rto_prepare+0xd4>)
 801e8a8:	f240 6263 	movw	r2, #1635	; 0x663
 801e8ac:	4930      	ldr	r1, [pc, #192]	; (801e970 <tcp_rexmit_rto_prepare+0xd8>)
 801e8ae:	4831      	ldr	r0, [pc, #196]	; (801e974 <tcp_rexmit_rto_prepare+0xdc>)
 801e8b0:	f005 fa66 	bl	8023d80 <iprintf>

  if (pcb->unacked == NULL) {
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e8b8:	2b00      	cmp	r3, #0
 801e8ba:	d102      	bne.n	801e8c2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801e8bc:	f06f 0305 	mvn.w	r3, #5
 801e8c0:	e050      	b.n	801e964 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e8c2:	687b      	ldr	r3, [r7, #4]
 801e8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e8c6:	60fb      	str	r3, [r7, #12]
 801e8c8:	e00b      	b.n	801e8e2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801e8ca:	68f8      	ldr	r0, [r7, #12]
 801e8cc:	f7ff fee6 	bl	801e69c <tcp_output_segment_busy>
 801e8d0:	4603      	mov	r3, r0
 801e8d2:	2b00      	cmp	r3, #0
 801e8d4:	d002      	beq.n	801e8dc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801e8d6:	f06f 0305 	mvn.w	r3, #5
 801e8da:	e043      	b.n	801e964 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e8dc:	68fb      	ldr	r3, [r7, #12]
 801e8de:	681b      	ldr	r3, [r3, #0]
 801e8e0:	60fb      	str	r3, [r7, #12]
 801e8e2:	68fb      	ldr	r3, [r7, #12]
 801e8e4:	681b      	ldr	r3, [r3, #0]
 801e8e6:	2b00      	cmp	r3, #0
 801e8e8:	d1ef      	bne.n	801e8ca <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801e8ea:	68f8      	ldr	r0, [r7, #12]
 801e8ec:	f7ff fed6 	bl	801e69c <tcp_output_segment_busy>
 801e8f0:	4603      	mov	r3, r0
 801e8f2:	2b00      	cmp	r3, #0
 801e8f4:	d002      	beq.n	801e8fc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801e8f6:	f06f 0305 	mvn.w	r3, #5
 801e8fa:	e033      	b.n	801e964 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801e8fc:	687b      	ldr	r3, [r7, #4]
 801e8fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801e908:	687b      	ldr	r3, [r7, #4]
 801e90a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801e90c:	687b      	ldr	r3, [r7, #4]
 801e90e:	2200      	movs	r2, #0
 801e910:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	8b5b      	ldrh	r3, [r3, #26]
 801e916:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801e91a:	b29a      	uxth	r2, r3
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e920:	68fb      	ldr	r3, [r7, #12]
 801e922:	68db      	ldr	r3, [r3, #12]
 801e924:	685b      	ldr	r3, [r3, #4]
 801e926:	4618      	mov	r0, r3
 801e928:	f7f8 fc15 	bl	8017156 <lwip_htonl>
 801e92c:	4604      	mov	r4, r0
 801e92e:	68fb      	ldr	r3, [r7, #12]
 801e930:	891b      	ldrh	r3, [r3, #8]
 801e932:	461d      	mov	r5, r3
 801e934:	68fb      	ldr	r3, [r7, #12]
 801e936:	68db      	ldr	r3, [r3, #12]
 801e938:	899b      	ldrh	r3, [r3, #12]
 801e93a:	b29b      	uxth	r3, r3
 801e93c:	4618      	mov	r0, r3
 801e93e:	f7f8 fbf5 	bl	801712c <lwip_htons>
 801e942:	4603      	mov	r3, r0
 801e944:	b2db      	uxtb	r3, r3
 801e946:	f003 0303 	and.w	r3, r3, #3
 801e94a:	2b00      	cmp	r3, #0
 801e94c:	d001      	beq.n	801e952 <tcp_rexmit_rto_prepare+0xba>
 801e94e:	2301      	movs	r3, #1
 801e950:	e000      	b.n	801e954 <tcp_rexmit_rto_prepare+0xbc>
 801e952:	2300      	movs	r3, #0
 801e954:	442b      	add	r3, r5
 801e956:	18e2      	adds	r2, r4, r3
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801e95c:	687b      	ldr	r3, [r7, #4]
 801e95e:	2200      	movs	r2, #0
 801e960:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801e962:	2300      	movs	r3, #0
}
 801e964:	4618      	mov	r0, r3
 801e966:	3710      	adds	r7, #16
 801e968:	46bd      	mov	sp, r7
 801e96a:	bdb0      	pop	{r4, r5, r7, pc}
 801e96c:	080274c4 	.word	0x080274c4
 801e970:	08027b00 	.word	0x08027b00
 801e974:	08027518 	.word	0x08027518

0801e978 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801e978:	b580      	push	{r7, lr}
 801e97a:	b082      	sub	sp, #8
 801e97c:	af00      	add	r7, sp, #0
 801e97e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	2b00      	cmp	r3, #0
 801e984:	d106      	bne.n	801e994 <tcp_rexmit_rto_commit+0x1c>
 801e986:	4b0d      	ldr	r3, [pc, #52]	; (801e9bc <tcp_rexmit_rto_commit+0x44>)
 801e988:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801e98c:	490c      	ldr	r1, [pc, #48]	; (801e9c0 <tcp_rexmit_rto_commit+0x48>)
 801e98e:	480d      	ldr	r0, [pc, #52]	; (801e9c4 <tcp_rexmit_rto_commit+0x4c>)
 801e990:	f005 f9f6 	bl	8023d80 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e99a:	2bff      	cmp	r3, #255	; 0xff
 801e99c:	d007      	beq.n	801e9ae <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801e99e:	687b      	ldr	r3, [r7, #4]
 801e9a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e9a4:	3301      	adds	r3, #1
 801e9a6:	b2da      	uxtb	r2, r3
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801e9ae:	6878      	ldr	r0, [r7, #4]
 801e9b0:	f7ff fc80 	bl	801e2b4 <tcp_output>
}
 801e9b4:	bf00      	nop
 801e9b6:	3708      	adds	r7, #8
 801e9b8:	46bd      	mov	sp, r7
 801e9ba:	bd80      	pop	{r7, pc}
 801e9bc:	080274c4 	.word	0x080274c4
 801e9c0:	08027b24 	.word	0x08027b24
 801e9c4:	08027518 	.word	0x08027518

0801e9c8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801e9c8:	b580      	push	{r7, lr}
 801e9ca:	b082      	sub	sp, #8
 801e9cc:	af00      	add	r7, sp, #0
 801e9ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801e9d0:	687b      	ldr	r3, [r7, #4]
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	d106      	bne.n	801e9e4 <tcp_rexmit_rto+0x1c>
 801e9d6:	4b0a      	ldr	r3, [pc, #40]	; (801ea00 <tcp_rexmit_rto+0x38>)
 801e9d8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801e9dc:	4909      	ldr	r1, [pc, #36]	; (801ea04 <tcp_rexmit_rto+0x3c>)
 801e9de:	480a      	ldr	r0, [pc, #40]	; (801ea08 <tcp_rexmit_rto+0x40>)
 801e9e0:	f005 f9ce 	bl	8023d80 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801e9e4:	6878      	ldr	r0, [r7, #4]
 801e9e6:	f7ff ff57 	bl	801e898 <tcp_rexmit_rto_prepare>
 801e9ea:	4603      	mov	r3, r0
 801e9ec:	2b00      	cmp	r3, #0
 801e9ee:	d102      	bne.n	801e9f6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801e9f0:	6878      	ldr	r0, [r7, #4]
 801e9f2:	f7ff ffc1 	bl	801e978 <tcp_rexmit_rto_commit>
  }
}
 801e9f6:	bf00      	nop
 801e9f8:	3708      	adds	r7, #8
 801e9fa:	46bd      	mov	sp, r7
 801e9fc:	bd80      	pop	{r7, pc}
 801e9fe:	bf00      	nop
 801ea00:	080274c4 	.word	0x080274c4
 801ea04:	08027b48 	.word	0x08027b48
 801ea08:	08027518 	.word	0x08027518

0801ea0c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801ea0c:	b590      	push	{r4, r7, lr}
 801ea0e:	b085      	sub	sp, #20
 801ea10:	af00      	add	r7, sp, #0
 801ea12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801ea14:	687b      	ldr	r3, [r7, #4]
 801ea16:	2b00      	cmp	r3, #0
 801ea18:	d106      	bne.n	801ea28 <tcp_rexmit+0x1c>
 801ea1a:	4b2f      	ldr	r3, [pc, #188]	; (801ead8 <tcp_rexmit+0xcc>)
 801ea1c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801ea20:	492e      	ldr	r1, [pc, #184]	; (801eadc <tcp_rexmit+0xd0>)
 801ea22:	482f      	ldr	r0, [pc, #188]	; (801eae0 <tcp_rexmit+0xd4>)
 801ea24:	f005 f9ac 	bl	8023d80 <iprintf>

  if (pcb->unacked == NULL) {
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ea2c:	2b00      	cmp	r3, #0
 801ea2e:	d102      	bne.n	801ea36 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801ea30:	f06f 0305 	mvn.w	r3, #5
 801ea34:	e04c      	b.n	801ead0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ea3a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801ea3c:	68b8      	ldr	r0, [r7, #8]
 801ea3e:	f7ff fe2d 	bl	801e69c <tcp_output_segment_busy>
 801ea42:	4603      	mov	r3, r0
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	d002      	beq.n	801ea4e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801ea48:	f06f 0305 	mvn.w	r3, #5
 801ea4c:	e040      	b.n	801ead0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801ea4e:	68bb      	ldr	r3, [r7, #8]
 801ea50:	681a      	ldr	r2, [r3, #0]
 801ea52:	687b      	ldr	r3, [r7, #4]
 801ea54:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	336c      	adds	r3, #108	; 0x6c
 801ea5a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ea5c:	e002      	b.n	801ea64 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801ea5e:	68fb      	ldr	r3, [r7, #12]
 801ea60:	681b      	ldr	r3, [r3, #0]
 801ea62:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ea64:	68fb      	ldr	r3, [r7, #12]
 801ea66:	681b      	ldr	r3, [r3, #0]
 801ea68:	2b00      	cmp	r3, #0
 801ea6a:	d011      	beq.n	801ea90 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ea6c:	68fb      	ldr	r3, [r7, #12]
 801ea6e:	681b      	ldr	r3, [r3, #0]
 801ea70:	68db      	ldr	r3, [r3, #12]
 801ea72:	685b      	ldr	r3, [r3, #4]
 801ea74:	4618      	mov	r0, r3
 801ea76:	f7f8 fb6e 	bl	8017156 <lwip_htonl>
 801ea7a:	4604      	mov	r4, r0
 801ea7c:	68bb      	ldr	r3, [r7, #8]
 801ea7e:	68db      	ldr	r3, [r3, #12]
 801ea80:	685b      	ldr	r3, [r3, #4]
 801ea82:	4618      	mov	r0, r3
 801ea84:	f7f8 fb67 	bl	8017156 <lwip_htonl>
 801ea88:	4603      	mov	r3, r0
 801ea8a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801ea8c:	2b00      	cmp	r3, #0
 801ea8e:	dbe6      	blt.n	801ea5e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801ea90:	68fb      	ldr	r3, [r7, #12]
 801ea92:	681a      	ldr	r2, [r3, #0]
 801ea94:	68bb      	ldr	r3, [r7, #8]
 801ea96:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801ea98:	68fb      	ldr	r3, [r7, #12]
 801ea9a:	68ba      	ldr	r2, [r7, #8]
 801ea9c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801ea9e:	68bb      	ldr	r3, [r7, #8]
 801eaa0:	681b      	ldr	r3, [r3, #0]
 801eaa2:	2b00      	cmp	r3, #0
 801eaa4:	d103      	bne.n	801eaae <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801eaa6:	687b      	ldr	r3, [r7, #4]
 801eaa8:	2200      	movs	r2, #0
 801eaaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801eaae:	687b      	ldr	r3, [r7, #4]
 801eab0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eab4:	2bff      	cmp	r3, #255	; 0xff
 801eab6:	d007      	beq.n	801eac8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eabe:	3301      	adds	r3, #1
 801eac0:	b2da      	uxtb	r2, r3
 801eac2:	687b      	ldr	r3, [r7, #4]
 801eac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	2200      	movs	r2, #0
 801eacc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801eace:	2300      	movs	r3, #0
}
 801ead0:	4618      	mov	r0, r3
 801ead2:	3714      	adds	r7, #20
 801ead4:	46bd      	mov	sp, r7
 801ead6:	bd90      	pop	{r4, r7, pc}
 801ead8:	080274c4 	.word	0x080274c4
 801eadc:	08027b64 	.word	0x08027b64
 801eae0:	08027518 	.word	0x08027518

0801eae4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801eae4:	b580      	push	{r7, lr}
 801eae6:	b082      	sub	sp, #8
 801eae8:	af00      	add	r7, sp, #0
 801eaea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d106      	bne.n	801eb00 <tcp_rexmit_fast+0x1c>
 801eaf2:	4b2a      	ldr	r3, [pc, #168]	; (801eb9c <tcp_rexmit_fast+0xb8>)
 801eaf4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801eaf8:	4929      	ldr	r1, [pc, #164]	; (801eba0 <tcp_rexmit_fast+0xbc>)
 801eafa:	482a      	ldr	r0, [pc, #168]	; (801eba4 <tcp_rexmit_fast+0xc0>)
 801eafc:	f005 f940 	bl	8023d80 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	d045      	beq.n	801eb94 <tcp_rexmit_fast+0xb0>
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	8b5b      	ldrh	r3, [r3, #26]
 801eb0c:	f003 0304 	and.w	r3, r3, #4
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	d13f      	bne.n	801eb94 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801eb14:	6878      	ldr	r0, [r7, #4]
 801eb16:	f7ff ff79 	bl	801ea0c <tcp_rexmit>
 801eb1a:	4603      	mov	r3, r0
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	d139      	bne.n	801eb94 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801eb20:	687b      	ldr	r3, [r7, #4]
 801eb22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801eb26:	687b      	ldr	r3, [r7, #4]
 801eb28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801eb2c:	4293      	cmp	r3, r2
 801eb2e:	bf28      	it	cs
 801eb30:	4613      	movcs	r3, r2
 801eb32:	b29b      	uxth	r3, r3
 801eb34:	2b00      	cmp	r3, #0
 801eb36:	da00      	bge.n	801eb3a <tcp_rexmit_fast+0x56>
 801eb38:	3301      	adds	r3, #1
 801eb3a:	105b      	asrs	r3, r3, #1
 801eb3c:	b29a      	uxth	r2, r3
 801eb3e:	687b      	ldr	r3, [r7, #4]
 801eb40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801eb44:	687b      	ldr	r3, [r7, #4]
 801eb46:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801eb4a:	461a      	mov	r2, r3
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801eb50:	005b      	lsls	r3, r3, #1
 801eb52:	429a      	cmp	r2, r3
 801eb54:	d206      	bcs.n	801eb64 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801eb56:	687b      	ldr	r3, [r7, #4]
 801eb58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801eb5a:	005b      	lsls	r3, r3, #1
 801eb5c:	b29a      	uxth	r2, r3
 801eb5e:	687b      	ldr	r3, [r7, #4]
 801eb60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801eb64:	687b      	ldr	r3, [r7, #4]
 801eb66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801eb6a:	687b      	ldr	r3, [r7, #4]
 801eb6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801eb6e:	4619      	mov	r1, r3
 801eb70:	0049      	lsls	r1, r1, #1
 801eb72:	440b      	add	r3, r1
 801eb74:	b29b      	uxth	r3, r3
 801eb76:	4413      	add	r3, r2
 801eb78:	b29a      	uxth	r2, r3
 801eb7a:	687b      	ldr	r3, [r7, #4]
 801eb7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801eb80:	687b      	ldr	r3, [r7, #4]
 801eb82:	8b5b      	ldrh	r3, [r3, #26]
 801eb84:	f043 0304 	orr.w	r3, r3, #4
 801eb88:	b29a      	uxth	r2, r3
 801eb8a:	687b      	ldr	r3, [r7, #4]
 801eb8c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801eb8e:	687b      	ldr	r3, [r7, #4]
 801eb90:	2200      	movs	r2, #0
 801eb92:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801eb94:	bf00      	nop
 801eb96:	3708      	adds	r7, #8
 801eb98:	46bd      	mov	sp, r7
 801eb9a:	bd80      	pop	{r7, pc}
 801eb9c:	080274c4 	.word	0x080274c4
 801eba0:	08027b7c 	.word	0x08027b7c
 801eba4:	08027518 	.word	0x08027518

0801eba8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801eba8:	b580      	push	{r7, lr}
 801ebaa:	b086      	sub	sp, #24
 801ebac:	af00      	add	r7, sp, #0
 801ebae:	60f8      	str	r0, [r7, #12]
 801ebb0:	607b      	str	r3, [r7, #4]
 801ebb2:	460b      	mov	r3, r1
 801ebb4:	817b      	strh	r3, [r7, #10]
 801ebb6:	4613      	mov	r3, r2
 801ebb8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ebba:	897a      	ldrh	r2, [r7, #10]
 801ebbc:	893b      	ldrh	r3, [r7, #8]
 801ebbe:	4413      	add	r3, r2
 801ebc0:	b29b      	uxth	r3, r3
 801ebc2:	3314      	adds	r3, #20
 801ebc4:	b29b      	uxth	r3, r3
 801ebc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ebca:	4619      	mov	r1, r3
 801ebcc:	2022      	movs	r0, #34	; 0x22
 801ebce:	f7f9 fbbb 	bl	8018348 <pbuf_alloc>
 801ebd2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801ebd4:	697b      	ldr	r3, [r7, #20]
 801ebd6:	2b00      	cmp	r3, #0
 801ebd8:	d04d      	beq.n	801ec76 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ebda:	897b      	ldrh	r3, [r7, #10]
 801ebdc:	3313      	adds	r3, #19
 801ebde:	697a      	ldr	r2, [r7, #20]
 801ebe0:	8952      	ldrh	r2, [r2, #10]
 801ebe2:	4293      	cmp	r3, r2
 801ebe4:	db06      	blt.n	801ebf4 <tcp_output_alloc_header_common+0x4c>
 801ebe6:	4b26      	ldr	r3, [pc, #152]	; (801ec80 <tcp_output_alloc_header_common+0xd8>)
 801ebe8:	f240 7223 	movw	r2, #1827	; 0x723
 801ebec:	4925      	ldr	r1, [pc, #148]	; (801ec84 <tcp_output_alloc_header_common+0xdc>)
 801ebee:	4826      	ldr	r0, [pc, #152]	; (801ec88 <tcp_output_alloc_header_common+0xe0>)
 801ebf0:	f005 f8c6 	bl	8023d80 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801ebf4:	697b      	ldr	r3, [r7, #20]
 801ebf6:	685b      	ldr	r3, [r3, #4]
 801ebf8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801ebfa:	8c3b      	ldrh	r3, [r7, #32]
 801ebfc:	4618      	mov	r0, r3
 801ebfe:	f7f8 fa95 	bl	801712c <lwip_htons>
 801ec02:	4603      	mov	r3, r0
 801ec04:	461a      	mov	r2, r3
 801ec06:	693b      	ldr	r3, [r7, #16]
 801ec08:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801ec0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ec0c:	4618      	mov	r0, r3
 801ec0e:	f7f8 fa8d 	bl	801712c <lwip_htons>
 801ec12:	4603      	mov	r3, r0
 801ec14:	461a      	mov	r2, r3
 801ec16:	693b      	ldr	r3, [r7, #16]
 801ec18:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801ec1a:	693b      	ldr	r3, [r7, #16]
 801ec1c:	687a      	ldr	r2, [r7, #4]
 801ec1e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801ec20:	68f8      	ldr	r0, [r7, #12]
 801ec22:	f7f8 fa98 	bl	8017156 <lwip_htonl>
 801ec26:	4602      	mov	r2, r0
 801ec28:	693b      	ldr	r3, [r7, #16]
 801ec2a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801ec2c:	897b      	ldrh	r3, [r7, #10]
 801ec2e:	089b      	lsrs	r3, r3, #2
 801ec30:	b29b      	uxth	r3, r3
 801ec32:	3305      	adds	r3, #5
 801ec34:	b29b      	uxth	r3, r3
 801ec36:	031b      	lsls	r3, r3, #12
 801ec38:	b29a      	uxth	r2, r3
 801ec3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ec3e:	b29b      	uxth	r3, r3
 801ec40:	4313      	orrs	r3, r2
 801ec42:	b29b      	uxth	r3, r3
 801ec44:	4618      	mov	r0, r3
 801ec46:	f7f8 fa71 	bl	801712c <lwip_htons>
 801ec4a:	4603      	mov	r3, r0
 801ec4c:	461a      	mov	r2, r3
 801ec4e:	693b      	ldr	r3, [r7, #16]
 801ec50:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801ec52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ec54:	4618      	mov	r0, r3
 801ec56:	f7f8 fa69 	bl	801712c <lwip_htons>
 801ec5a:	4603      	mov	r3, r0
 801ec5c:	461a      	mov	r2, r3
 801ec5e:	693b      	ldr	r3, [r7, #16]
 801ec60:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801ec62:	693b      	ldr	r3, [r7, #16]
 801ec64:	2200      	movs	r2, #0
 801ec66:	741a      	strb	r2, [r3, #16]
 801ec68:	2200      	movs	r2, #0
 801ec6a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801ec6c:	693b      	ldr	r3, [r7, #16]
 801ec6e:	2200      	movs	r2, #0
 801ec70:	749a      	strb	r2, [r3, #18]
 801ec72:	2200      	movs	r2, #0
 801ec74:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801ec76:	697b      	ldr	r3, [r7, #20]
}
 801ec78:	4618      	mov	r0, r3
 801ec7a:	3718      	adds	r7, #24
 801ec7c:	46bd      	mov	sp, r7
 801ec7e:	bd80      	pop	{r7, pc}
 801ec80:	080274c4 	.word	0x080274c4
 801ec84:	08027b9c 	.word	0x08027b9c
 801ec88:	08027518 	.word	0x08027518

0801ec8c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801ec8c:	b5b0      	push	{r4, r5, r7, lr}
 801ec8e:	b08a      	sub	sp, #40	; 0x28
 801ec90:	af04      	add	r7, sp, #16
 801ec92:	60f8      	str	r0, [r7, #12]
 801ec94:	607b      	str	r3, [r7, #4]
 801ec96:	460b      	mov	r3, r1
 801ec98:	817b      	strh	r3, [r7, #10]
 801ec9a:	4613      	mov	r3, r2
 801ec9c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801ec9e:	68fb      	ldr	r3, [r7, #12]
 801eca0:	2b00      	cmp	r3, #0
 801eca2:	d106      	bne.n	801ecb2 <tcp_output_alloc_header+0x26>
 801eca4:	4b15      	ldr	r3, [pc, #84]	; (801ecfc <tcp_output_alloc_header+0x70>)
 801eca6:	f240 7242 	movw	r2, #1858	; 0x742
 801ecaa:	4915      	ldr	r1, [pc, #84]	; (801ed00 <tcp_output_alloc_header+0x74>)
 801ecac:	4815      	ldr	r0, [pc, #84]	; (801ed04 <tcp_output_alloc_header+0x78>)
 801ecae:	f005 f867 	bl	8023d80 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801ecb2:	68fb      	ldr	r3, [r7, #12]
 801ecb4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801ecb6:	68fb      	ldr	r3, [r7, #12]
 801ecb8:	8adb      	ldrh	r3, [r3, #22]
 801ecba:	68fa      	ldr	r2, [r7, #12]
 801ecbc:	8b12      	ldrh	r2, [r2, #24]
 801ecbe:	68f9      	ldr	r1, [r7, #12]
 801ecc0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801ecc2:	893d      	ldrh	r5, [r7, #8]
 801ecc4:	897c      	ldrh	r4, [r7, #10]
 801ecc6:	9103      	str	r1, [sp, #12]
 801ecc8:	2110      	movs	r1, #16
 801ecca:	9102      	str	r1, [sp, #8]
 801eccc:	9201      	str	r2, [sp, #4]
 801ecce:	9300      	str	r3, [sp, #0]
 801ecd0:	687b      	ldr	r3, [r7, #4]
 801ecd2:	462a      	mov	r2, r5
 801ecd4:	4621      	mov	r1, r4
 801ecd6:	f7ff ff67 	bl	801eba8 <tcp_output_alloc_header_common>
 801ecda:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801ecdc:	697b      	ldr	r3, [r7, #20]
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	d006      	beq.n	801ecf0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ece2:	68fb      	ldr	r3, [r7, #12]
 801ece4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ece6:	68fa      	ldr	r2, [r7, #12]
 801ece8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ecea:	441a      	add	r2, r3
 801ecec:	68fb      	ldr	r3, [r7, #12]
 801ecee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801ecf0:	697b      	ldr	r3, [r7, #20]
}
 801ecf2:	4618      	mov	r0, r3
 801ecf4:	3718      	adds	r7, #24
 801ecf6:	46bd      	mov	sp, r7
 801ecf8:	bdb0      	pop	{r4, r5, r7, pc}
 801ecfa:	bf00      	nop
 801ecfc:	080274c4 	.word	0x080274c4
 801ed00:	08027bcc 	.word	0x08027bcc
 801ed04:	08027518 	.word	0x08027518

0801ed08 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801ed08:	b580      	push	{r7, lr}
 801ed0a:	b088      	sub	sp, #32
 801ed0c:	af00      	add	r7, sp, #0
 801ed0e:	60f8      	str	r0, [r7, #12]
 801ed10:	60b9      	str	r1, [r7, #8]
 801ed12:	4611      	mov	r1, r2
 801ed14:	461a      	mov	r2, r3
 801ed16:	460b      	mov	r3, r1
 801ed18:	71fb      	strb	r3, [r7, #7]
 801ed1a:	4613      	mov	r3, r2
 801ed1c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801ed1e:	2300      	movs	r3, #0
 801ed20:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801ed22:	68bb      	ldr	r3, [r7, #8]
 801ed24:	2b00      	cmp	r3, #0
 801ed26:	d106      	bne.n	801ed36 <tcp_output_fill_options+0x2e>
 801ed28:	4b13      	ldr	r3, [pc, #76]	; (801ed78 <tcp_output_fill_options+0x70>)
 801ed2a:	f240 7256 	movw	r2, #1878	; 0x756
 801ed2e:	4913      	ldr	r1, [pc, #76]	; (801ed7c <tcp_output_fill_options+0x74>)
 801ed30:	4813      	ldr	r0, [pc, #76]	; (801ed80 <tcp_output_fill_options+0x78>)
 801ed32:	f005 f825 	bl	8023d80 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801ed36:	68bb      	ldr	r3, [r7, #8]
 801ed38:	685b      	ldr	r3, [r3, #4]
 801ed3a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801ed3c:	69bb      	ldr	r3, [r7, #24]
 801ed3e:	3314      	adds	r3, #20
 801ed40:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801ed42:	69bb      	ldr	r3, [r7, #24]
 801ed44:	f103 0214 	add.w	r2, r3, #20
 801ed48:	8bfb      	ldrh	r3, [r7, #30]
 801ed4a:	009b      	lsls	r3, r3, #2
 801ed4c:	4619      	mov	r1, r3
 801ed4e:	79fb      	ldrb	r3, [r7, #7]
 801ed50:	009b      	lsls	r3, r3, #2
 801ed52:	f003 0304 	and.w	r3, r3, #4
 801ed56:	440b      	add	r3, r1
 801ed58:	4413      	add	r3, r2
 801ed5a:	697a      	ldr	r2, [r7, #20]
 801ed5c:	429a      	cmp	r2, r3
 801ed5e:	d006      	beq.n	801ed6e <tcp_output_fill_options+0x66>
 801ed60:	4b05      	ldr	r3, [pc, #20]	; (801ed78 <tcp_output_fill_options+0x70>)
 801ed62:	f240 7275 	movw	r2, #1909	; 0x775
 801ed66:	4907      	ldr	r1, [pc, #28]	; (801ed84 <tcp_output_fill_options+0x7c>)
 801ed68:	4805      	ldr	r0, [pc, #20]	; (801ed80 <tcp_output_fill_options+0x78>)
 801ed6a:	f005 f809 	bl	8023d80 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801ed6e:	bf00      	nop
 801ed70:	3720      	adds	r7, #32
 801ed72:	46bd      	mov	sp, r7
 801ed74:	bd80      	pop	{r7, pc}
 801ed76:	bf00      	nop
 801ed78:	080274c4 	.word	0x080274c4
 801ed7c:	08027bf4 	.word	0x08027bf4
 801ed80:	08027518 	.word	0x08027518
 801ed84:	08027aec 	.word	0x08027aec

0801ed88 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801ed88:	b580      	push	{r7, lr}
 801ed8a:	b08a      	sub	sp, #40	; 0x28
 801ed8c:	af04      	add	r7, sp, #16
 801ed8e:	60f8      	str	r0, [r7, #12]
 801ed90:	60b9      	str	r1, [r7, #8]
 801ed92:	607a      	str	r2, [r7, #4]
 801ed94:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801ed96:	68bb      	ldr	r3, [r7, #8]
 801ed98:	2b00      	cmp	r3, #0
 801ed9a:	d106      	bne.n	801edaa <tcp_output_control_segment+0x22>
 801ed9c:	4b1c      	ldr	r3, [pc, #112]	; (801ee10 <tcp_output_control_segment+0x88>)
 801ed9e:	f240 7287 	movw	r2, #1927	; 0x787
 801eda2:	491c      	ldr	r1, [pc, #112]	; (801ee14 <tcp_output_control_segment+0x8c>)
 801eda4:	481c      	ldr	r0, [pc, #112]	; (801ee18 <tcp_output_control_segment+0x90>)
 801eda6:	f004 ffeb 	bl	8023d80 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801edaa:	683a      	ldr	r2, [r7, #0]
 801edac:	6879      	ldr	r1, [r7, #4]
 801edae:	68f8      	ldr	r0, [r7, #12]
 801edb0:	f7fe fae8 	bl	801d384 <tcp_route>
 801edb4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801edb6:	693b      	ldr	r3, [r7, #16]
 801edb8:	2b00      	cmp	r3, #0
 801edba:	d102      	bne.n	801edc2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801edbc:	23fc      	movs	r3, #252	; 0xfc
 801edbe:	75fb      	strb	r3, [r7, #23]
 801edc0:	e01c      	b.n	801edfc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801edc2:	68fb      	ldr	r3, [r7, #12]
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	d006      	beq.n	801edd6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801edc8:	68fb      	ldr	r3, [r7, #12]
 801edca:	7adb      	ldrb	r3, [r3, #11]
 801edcc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801edce:	68fb      	ldr	r3, [r7, #12]
 801edd0:	7a9b      	ldrb	r3, [r3, #10]
 801edd2:	757b      	strb	r3, [r7, #21]
 801edd4:	e003      	b.n	801edde <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801edd6:	23ff      	movs	r3, #255	; 0xff
 801edd8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801edda:	2300      	movs	r3, #0
 801eddc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801edde:	7dba      	ldrb	r2, [r7, #22]
 801ede0:	693b      	ldr	r3, [r7, #16]
 801ede2:	9302      	str	r3, [sp, #8]
 801ede4:	2306      	movs	r3, #6
 801ede6:	9301      	str	r3, [sp, #4]
 801ede8:	7d7b      	ldrb	r3, [r7, #21]
 801edea:	9300      	str	r3, [sp, #0]
 801edec:	4613      	mov	r3, r2
 801edee:	683a      	ldr	r2, [r7, #0]
 801edf0:	6879      	ldr	r1, [r7, #4]
 801edf2:	68b8      	ldr	r0, [r7, #8]
 801edf4:	f002 fb3e 	bl	8021474 <ip4_output_if>
 801edf8:	4603      	mov	r3, r0
 801edfa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801edfc:	68b8      	ldr	r0, [r7, #8]
 801edfe:	f7f9 fd87 	bl	8018910 <pbuf_free>
  return err;
 801ee02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ee06:	4618      	mov	r0, r3
 801ee08:	3718      	adds	r7, #24
 801ee0a:	46bd      	mov	sp, r7
 801ee0c:	bd80      	pop	{r7, pc}
 801ee0e:	bf00      	nop
 801ee10:	080274c4 	.word	0x080274c4
 801ee14:	08027c1c 	.word	0x08027c1c
 801ee18:	08027518 	.word	0x08027518

0801ee1c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801ee1c:	b590      	push	{r4, r7, lr}
 801ee1e:	b08b      	sub	sp, #44	; 0x2c
 801ee20:	af04      	add	r7, sp, #16
 801ee22:	60f8      	str	r0, [r7, #12]
 801ee24:	60b9      	str	r1, [r7, #8]
 801ee26:	607a      	str	r2, [r7, #4]
 801ee28:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ee2a:	683b      	ldr	r3, [r7, #0]
 801ee2c:	2b00      	cmp	r3, #0
 801ee2e:	d106      	bne.n	801ee3e <tcp_rst+0x22>
 801ee30:	4b1f      	ldr	r3, [pc, #124]	; (801eeb0 <tcp_rst+0x94>)
 801ee32:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801ee36:	491f      	ldr	r1, [pc, #124]	; (801eeb4 <tcp_rst+0x98>)
 801ee38:	481f      	ldr	r0, [pc, #124]	; (801eeb8 <tcp_rst+0x9c>)
 801ee3a:	f004 ffa1 	bl	8023d80 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801ee3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	d106      	bne.n	801ee52 <tcp_rst+0x36>
 801ee44:	4b1a      	ldr	r3, [pc, #104]	; (801eeb0 <tcp_rst+0x94>)
 801ee46:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801ee4a:	491c      	ldr	r1, [pc, #112]	; (801eebc <tcp_rst+0xa0>)
 801ee4c:	481a      	ldr	r0, [pc, #104]	; (801eeb8 <tcp_rst+0x9c>)
 801ee4e:	f004 ff97 	bl	8023d80 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ee52:	2300      	movs	r3, #0
 801ee54:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801ee56:	f246 0308 	movw	r3, #24584	; 0x6008
 801ee5a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801ee5c:	7dfb      	ldrb	r3, [r7, #23]
 801ee5e:	b29c      	uxth	r4, r3
 801ee60:	68b8      	ldr	r0, [r7, #8]
 801ee62:	f7f8 f978 	bl	8017156 <lwip_htonl>
 801ee66:	4602      	mov	r2, r0
 801ee68:	8abb      	ldrh	r3, [r7, #20]
 801ee6a:	9303      	str	r3, [sp, #12]
 801ee6c:	2314      	movs	r3, #20
 801ee6e:	9302      	str	r3, [sp, #8]
 801ee70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801ee72:	9301      	str	r3, [sp, #4]
 801ee74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ee76:	9300      	str	r3, [sp, #0]
 801ee78:	4613      	mov	r3, r2
 801ee7a:	2200      	movs	r2, #0
 801ee7c:	4621      	mov	r1, r4
 801ee7e:	6878      	ldr	r0, [r7, #4]
 801ee80:	f7ff fe92 	bl	801eba8 <tcp_output_alloc_header_common>
 801ee84:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801ee86:	693b      	ldr	r3, [r7, #16]
 801ee88:	2b00      	cmp	r3, #0
 801ee8a:	d00c      	beq.n	801eea6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ee8c:	7dfb      	ldrb	r3, [r7, #23]
 801ee8e:	2200      	movs	r2, #0
 801ee90:	6939      	ldr	r1, [r7, #16]
 801ee92:	68f8      	ldr	r0, [r7, #12]
 801ee94:	f7ff ff38 	bl	801ed08 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ee98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee9a:	683a      	ldr	r2, [r7, #0]
 801ee9c:	6939      	ldr	r1, [r7, #16]
 801ee9e:	68f8      	ldr	r0, [r7, #12]
 801eea0:	f7ff ff72 	bl	801ed88 <tcp_output_control_segment>
 801eea4:	e000      	b.n	801eea8 <tcp_rst+0x8c>
    return;
 801eea6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801eea8:	371c      	adds	r7, #28
 801eeaa:	46bd      	mov	sp, r7
 801eeac:	bd90      	pop	{r4, r7, pc}
 801eeae:	bf00      	nop
 801eeb0:	080274c4 	.word	0x080274c4
 801eeb4:	08027c48 	.word	0x08027c48
 801eeb8:	08027518 	.word	0x08027518
 801eebc:	08027c64 	.word	0x08027c64

0801eec0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801eec0:	b590      	push	{r4, r7, lr}
 801eec2:	b087      	sub	sp, #28
 801eec4:	af00      	add	r7, sp, #0
 801eec6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801eec8:	2300      	movs	r3, #0
 801eeca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801eecc:	2300      	movs	r3, #0
 801eece:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	2b00      	cmp	r3, #0
 801eed4:	d106      	bne.n	801eee4 <tcp_send_empty_ack+0x24>
 801eed6:	4b28      	ldr	r3, [pc, #160]	; (801ef78 <tcp_send_empty_ack+0xb8>)
 801eed8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801eedc:	4927      	ldr	r1, [pc, #156]	; (801ef7c <tcp_send_empty_ack+0xbc>)
 801eede:	4828      	ldr	r0, [pc, #160]	; (801ef80 <tcp_send_empty_ack+0xc0>)
 801eee0:	f004 ff4e 	bl	8023d80 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801eee4:	7dfb      	ldrb	r3, [r7, #23]
 801eee6:	009b      	lsls	r3, r3, #2
 801eee8:	b2db      	uxtb	r3, r3
 801eeea:	f003 0304 	and.w	r3, r3, #4
 801eeee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801eef0:	7d7b      	ldrb	r3, [r7, #21]
 801eef2:	b29c      	uxth	r4, r3
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eef8:	4618      	mov	r0, r3
 801eefa:	f7f8 f92c 	bl	8017156 <lwip_htonl>
 801eefe:	4603      	mov	r3, r0
 801ef00:	2200      	movs	r2, #0
 801ef02:	4621      	mov	r1, r4
 801ef04:	6878      	ldr	r0, [r7, #4]
 801ef06:	f7ff fec1 	bl	801ec8c <tcp_output_alloc_header>
 801ef0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ef0c:	693b      	ldr	r3, [r7, #16]
 801ef0e:	2b00      	cmp	r3, #0
 801ef10:	d109      	bne.n	801ef26 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ef12:	687b      	ldr	r3, [r7, #4]
 801ef14:	8b5b      	ldrh	r3, [r3, #26]
 801ef16:	f043 0303 	orr.w	r3, r3, #3
 801ef1a:	b29a      	uxth	r2, r3
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801ef20:	f06f 0301 	mvn.w	r3, #1
 801ef24:	e023      	b.n	801ef6e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801ef26:	7dbb      	ldrb	r3, [r7, #22]
 801ef28:	7dfa      	ldrb	r2, [r7, #23]
 801ef2a:	6939      	ldr	r1, [r7, #16]
 801ef2c:	6878      	ldr	r0, [r7, #4]
 801ef2e:	f7ff feeb 	bl	801ed08 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ef32:	687a      	ldr	r2, [r7, #4]
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	3304      	adds	r3, #4
 801ef38:	6939      	ldr	r1, [r7, #16]
 801ef3a:	6878      	ldr	r0, [r7, #4]
 801ef3c:	f7ff ff24 	bl	801ed88 <tcp_output_control_segment>
 801ef40:	4603      	mov	r3, r0
 801ef42:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801ef44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ef48:	2b00      	cmp	r3, #0
 801ef4a:	d007      	beq.n	801ef5c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	8b5b      	ldrh	r3, [r3, #26]
 801ef50:	f043 0303 	orr.w	r3, r3, #3
 801ef54:	b29a      	uxth	r2, r3
 801ef56:	687b      	ldr	r3, [r7, #4]
 801ef58:	835a      	strh	r2, [r3, #26]
 801ef5a:	e006      	b.n	801ef6a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	8b5b      	ldrh	r3, [r3, #26]
 801ef60:	f023 0303 	bic.w	r3, r3, #3
 801ef64:	b29a      	uxth	r2, r3
 801ef66:	687b      	ldr	r3, [r7, #4]
 801ef68:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801ef6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ef6e:	4618      	mov	r0, r3
 801ef70:	371c      	adds	r7, #28
 801ef72:	46bd      	mov	sp, r7
 801ef74:	bd90      	pop	{r4, r7, pc}
 801ef76:	bf00      	nop
 801ef78:	080274c4 	.word	0x080274c4
 801ef7c:	08027c80 	.word	0x08027c80
 801ef80:	08027518 	.word	0x08027518

0801ef84 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801ef84:	b590      	push	{r4, r7, lr}
 801ef86:	b087      	sub	sp, #28
 801ef88:	af00      	add	r7, sp, #0
 801ef8a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ef8c:	2300      	movs	r3, #0
 801ef8e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	2b00      	cmp	r3, #0
 801ef94:	d106      	bne.n	801efa4 <tcp_keepalive+0x20>
 801ef96:	4b18      	ldr	r3, [pc, #96]	; (801eff8 <tcp_keepalive+0x74>)
 801ef98:	f640 0224 	movw	r2, #2084	; 0x824
 801ef9c:	4917      	ldr	r1, [pc, #92]	; (801effc <tcp_keepalive+0x78>)
 801ef9e:	4818      	ldr	r0, [pc, #96]	; (801f000 <tcp_keepalive+0x7c>)
 801efa0:	f004 feee 	bl	8023d80 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801efa4:	7dfb      	ldrb	r3, [r7, #23]
 801efa6:	b29c      	uxth	r4, r3
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801efac:	3b01      	subs	r3, #1
 801efae:	4618      	mov	r0, r3
 801efb0:	f7f8 f8d1 	bl	8017156 <lwip_htonl>
 801efb4:	4603      	mov	r3, r0
 801efb6:	2200      	movs	r2, #0
 801efb8:	4621      	mov	r1, r4
 801efba:	6878      	ldr	r0, [r7, #4]
 801efbc:	f7ff fe66 	bl	801ec8c <tcp_output_alloc_header>
 801efc0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801efc2:	693b      	ldr	r3, [r7, #16]
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	d102      	bne.n	801efce <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801efc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801efcc:	e010      	b.n	801eff0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801efce:	7dfb      	ldrb	r3, [r7, #23]
 801efd0:	2200      	movs	r2, #0
 801efd2:	6939      	ldr	r1, [r7, #16]
 801efd4:	6878      	ldr	r0, [r7, #4]
 801efd6:	f7ff fe97 	bl	801ed08 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801efda:	687a      	ldr	r2, [r7, #4]
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	3304      	adds	r3, #4
 801efe0:	6939      	ldr	r1, [r7, #16]
 801efe2:	6878      	ldr	r0, [r7, #4]
 801efe4:	f7ff fed0 	bl	801ed88 <tcp_output_control_segment>
 801efe8:	4603      	mov	r3, r0
 801efea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801efec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801eff0:	4618      	mov	r0, r3
 801eff2:	371c      	adds	r7, #28
 801eff4:	46bd      	mov	sp, r7
 801eff6:	bd90      	pop	{r4, r7, pc}
 801eff8:	080274c4 	.word	0x080274c4
 801effc:	08027ca0 	.word	0x08027ca0
 801f000:	08027518 	.word	0x08027518

0801f004 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801f004:	b590      	push	{r4, r7, lr}
 801f006:	b08b      	sub	sp, #44	; 0x2c
 801f008:	af00      	add	r7, sp, #0
 801f00a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f00c:	2300      	movs	r3, #0
 801f00e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801f012:	687b      	ldr	r3, [r7, #4]
 801f014:	2b00      	cmp	r3, #0
 801f016:	d106      	bne.n	801f026 <tcp_zero_window_probe+0x22>
 801f018:	4b4c      	ldr	r3, [pc, #304]	; (801f14c <tcp_zero_window_probe+0x148>)
 801f01a:	f640 024f 	movw	r2, #2127	; 0x84f
 801f01e:	494c      	ldr	r1, [pc, #304]	; (801f150 <tcp_zero_window_probe+0x14c>)
 801f020:	484c      	ldr	r0, [pc, #304]	; (801f154 <tcp_zero_window_probe+0x150>)
 801f022:	f004 fead 	bl	8023d80 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801f026:	687b      	ldr	r3, [r7, #4]
 801f028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f02a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801f02c:	6a3b      	ldr	r3, [r7, #32]
 801f02e:	2b00      	cmp	r3, #0
 801f030:	d101      	bne.n	801f036 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801f032:	2300      	movs	r3, #0
 801f034:	e086      	b.n	801f144 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801f03c:	2bff      	cmp	r3, #255	; 0xff
 801f03e:	d007      	beq.n	801f050 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801f040:	687b      	ldr	r3, [r7, #4]
 801f042:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801f046:	3301      	adds	r3, #1
 801f048:	b2da      	uxtb	r2, r3
 801f04a:	687b      	ldr	r3, [r7, #4]
 801f04c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801f050:	6a3b      	ldr	r3, [r7, #32]
 801f052:	68db      	ldr	r3, [r3, #12]
 801f054:	899b      	ldrh	r3, [r3, #12]
 801f056:	b29b      	uxth	r3, r3
 801f058:	4618      	mov	r0, r3
 801f05a:	f7f8 f867 	bl	801712c <lwip_htons>
 801f05e:	4603      	mov	r3, r0
 801f060:	b2db      	uxtb	r3, r3
 801f062:	f003 0301 	and.w	r3, r3, #1
 801f066:	2b00      	cmp	r3, #0
 801f068:	d005      	beq.n	801f076 <tcp_zero_window_probe+0x72>
 801f06a:	6a3b      	ldr	r3, [r7, #32]
 801f06c:	891b      	ldrh	r3, [r3, #8]
 801f06e:	2b00      	cmp	r3, #0
 801f070:	d101      	bne.n	801f076 <tcp_zero_window_probe+0x72>
 801f072:	2301      	movs	r3, #1
 801f074:	e000      	b.n	801f078 <tcp_zero_window_probe+0x74>
 801f076:	2300      	movs	r3, #0
 801f078:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801f07a:	7ffb      	ldrb	r3, [r7, #31]
 801f07c:	2b00      	cmp	r3, #0
 801f07e:	bf0c      	ite	eq
 801f080:	2301      	moveq	r3, #1
 801f082:	2300      	movne	r3, #0
 801f084:	b2db      	uxtb	r3, r3
 801f086:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801f088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f08c:	b299      	uxth	r1, r3
 801f08e:	6a3b      	ldr	r3, [r7, #32]
 801f090:	68db      	ldr	r3, [r3, #12]
 801f092:	685b      	ldr	r3, [r3, #4]
 801f094:	8bba      	ldrh	r2, [r7, #28]
 801f096:	6878      	ldr	r0, [r7, #4]
 801f098:	f7ff fdf8 	bl	801ec8c <tcp_output_alloc_header>
 801f09c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801f09e:	69bb      	ldr	r3, [r7, #24]
 801f0a0:	2b00      	cmp	r3, #0
 801f0a2:	d102      	bne.n	801f0aa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801f0a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f0a8:	e04c      	b.n	801f144 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801f0aa:	69bb      	ldr	r3, [r7, #24]
 801f0ac:	685b      	ldr	r3, [r3, #4]
 801f0ae:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801f0b0:	7ffb      	ldrb	r3, [r7, #31]
 801f0b2:	2b00      	cmp	r3, #0
 801f0b4:	d011      	beq.n	801f0da <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801f0b6:	697b      	ldr	r3, [r7, #20]
 801f0b8:	899b      	ldrh	r3, [r3, #12]
 801f0ba:	b29b      	uxth	r3, r3
 801f0bc:	b21b      	sxth	r3, r3
 801f0be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801f0c2:	b21c      	sxth	r4, r3
 801f0c4:	2011      	movs	r0, #17
 801f0c6:	f7f8 f831 	bl	801712c <lwip_htons>
 801f0ca:	4603      	mov	r3, r0
 801f0cc:	b21b      	sxth	r3, r3
 801f0ce:	4323      	orrs	r3, r4
 801f0d0:	b21b      	sxth	r3, r3
 801f0d2:	b29a      	uxth	r2, r3
 801f0d4:	697b      	ldr	r3, [r7, #20]
 801f0d6:	819a      	strh	r2, [r3, #12]
 801f0d8:	e010      	b.n	801f0fc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801f0da:	69bb      	ldr	r3, [r7, #24]
 801f0dc:	685b      	ldr	r3, [r3, #4]
 801f0de:	3314      	adds	r3, #20
 801f0e0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801f0e2:	6a3b      	ldr	r3, [r7, #32]
 801f0e4:	6858      	ldr	r0, [r3, #4]
 801f0e6:	6a3b      	ldr	r3, [r7, #32]
 801f0e8:	685b      	ldr	r3, [r3, #4]
 801f0ea:	891a      	ldrh	r2, [r3, #8]
 801f0ec:	6a3b      	ldr	r3, [r7, #32]
 801f0ee:	891b      	ldrh	r3, [r3, #8]
 801f0f0:	1ad3      	subs	r3, r2, r3
 801f0f2:	b29b      	uxth	r3, r3
 801f0f4:	2201      	movs	r2, #1
 801f0f6:	6939      	ldr	r1, [r7, #16]
 801f0f8:	f7f9 fe10 	bl	8018d1c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801f0fc:	6a3b      	ldr	r3, [r7, #32]
 801f0fe:	68db      	ldr	r3, [r3, #12]
 801f100:	685b      	ldr	r3, [r3, #4]
 801f102:	4618      	mov	r0, r3
 801f104:	f7f8 f827 	bl	8017156 <lwip_htonl>
 801f108:	4603      	mov	r3, r0
 801f10a:	3301      	adds	r3, #1
 801f10c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f10e:	687b      	ldr	r3, [r7, #4]
 801f110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f112:	68fb      	ldr	r3, [r7, #12]
 801f114:	1ad3      	subs	r3, r2, r3
 801f116:	2b00      	cmp	r3, #0
 801f118:	da02      	bge.n	801f120 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801f11a:	687b      	ldr	r3, [r7, #4]
 801f11c:	68fa      	ldr	r2, [r7, #12]
 801f11e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f124:	2200      	movs	r2, #0
 801f126:	69b9      	ldr	r1, [r7, #24]
 801f128:	6878      	ldr	r0, [r7, #4]
 801f12a:	f7ff fded 	bl	801ed08 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f12e:	687a      	ldr	r2, [r7, #4]
 801f130:	687b      	ldr	r3, [r7, #4]
 801f132:	3304      	adds	r3, #4
 801f134:	69b9      	ldr	r1, [r7, #24]
 801f136:	6878      	ldr	r0, [r7, #4]
 801f138:	f7ff fe26 	bl	801ed88 <tcp_output_control_segment>
 801f13c:	4603      	mov	r3, r0
 801f13e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801f140:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801f144:	4618      	mov	r0, r3
 801f146:	372c      	adds	r7, #44	; 0x2c
 801f148:	46bd      	mov	sp, r7
 801f14a:	bd90      	pop	{r4, r7, pc}
 801f14c:	080274c4 	.word	0x080274c4
 801f150:	08027cbc 	.word	0x08027cbc
 801f154:	08027518 	.word	0x08027518

0801f158 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801f158:	b580      	push	{r7, lr}
 801f15a:	b082      	sub	sp, #8
 801f15c:	af00      	add	r7, sp, #0
 801f15e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801f160:	f7f9 feca 	bl	8018ef8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f164:	4b0a      	ldr	r3, [pc, #40]	; (801f190 <tcpip_tcp_timer+0x38>)
 801f166:	681b      	ldr	r3, [r3, #0]
 801f168:	2b00      	cmp	r3, #0
 801f16a:	d103      	bne.n	801f174 <tcpip_tcp_timer+0x1c>
 801f16c:	4b09      	ldr	r3, [pc, #36]	; (801f194 <tcpip_tcp_timer+0x3c>)
 801f16e:	681b      	ldr	r3, [r3, #0]
 801f170:	2b00      	cmp	r3, #0
 801f172:	d005      	beq.n	801f180 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f174:	2200      	movs	r2, #0
 801f176:	4908      	ldr	r1, [pc, #32]	; (801f198 <tcpip_tcp_timer+0x40>)
 801f178:	20fa      	movs	r0, #250	; 0xfa
 801f17a:	f000 f8f3 	bl	801f364 <sys_timeout>
 801f17e:	e003      	b.n	801f188 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801f180:	4b06      	ldr	r3, [pc, #24]	; (801f19c <tcpip_tcp_timer+0x44>)
 801f182:	2200      	movs	r2, #0
 801f184:	601a      	str	r2, [r3, #0]
  }
}
 801f186:	bf00      	nop
 801f188:	bf00      	nop
 801f18a:	3708      	adds	r7, #8
 801f18c:	46bd      	mov	sp, r7
 801f18e:	bd80      	pop	{r7, pc}
 801f190:	2000bfa4 	.word	0x2000bfa4
 801f194:	2000bfa8 	.word	0x2000bfa8
 801f198:	0801f159 	.word	0x0801f159
 801f19c:	2000bff0 	.word	0x2000bff0

0801f1a0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801f1a0:	b580      	push	{r7, lr}
 801f1a2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f1a4:	4b0a      	ldr	r3, [pc, #40]	; (801f1d0 <tcp_timer_needed+0x30>)
 801f1a6:	681b      	ldr	r3, [r3, #0]
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	d10f      	bne.n	801f1cc <tcp_timer_needed+0x2c>
 801f1ac:	4b09      	ldr	r3, [pc, #36]	; (801f1d4 <tcp_timer_needed+0x34>)
 801f1ae:	681b      	ldr	r3, [r3, #0]
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	d103      	bne.n	801f1bc <tcp_timer_needed+0x1c>
 801f1b4:	4b08      	ldr	r3, [pc, #32]	; (801f1d8 <tcp_timer_needed+0x38>)
 801f1b6:	681b      	ldr	r3, [r3, #0]
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	d007      	beq.n	801f1cc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801f1bc:	4b04      	ldr	r3, [pc, #16]	; (801f1d0 <tcp_timer_needed+0x30>)
 801f1be:	2201      	movs	r2, #1
 801f1c0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f1c2:	2200      	movs	r2, #0
 801f1c4:	4905      	ldr	r1, [pc, #20]	; (801f1dc <tcp_timer_needed+0x3c>)
 801f1c6:	20fa      	movs	r0, #250	; 0xfa
 801f1c8:	f000 f8cc 	bl	801f364 <sys_timeout>
  }
}
 801f1cc:	bf00      	nop
 801f1ce:	bd80      	pop	{r7, pc}
 801f1d0:	2000bff0 	.word	0x2000bff0
 801f1d4:	2000bfa4 	.word	0x2000bfa4
 801f1d8:	2000bfa8 	.word	0x2000bfa8
 801f1dc:	0801f159 	.word	0x0801f159

0801f1e0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f1e0:	b580      	push	{r7, lr}
 801f1e2:	b086      	sub	sp, #24
 801f1e4:	af00      	add	r7, sp, #0
 801f1e6:	60f8      	str	r0, [r7, #12]
 801f1e8:	60b9      	str	r1, [r7, #8]
 801f1ea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f1ec:	200a      	movs	r0, #10
 801f1ee:	f7f8 fc75 	bl	8017adc <memp_malloc>
 801f1f2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f1f4:	693b      	ldr	r3, [r7, #16]
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	d109      	bne.n	801f20e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f1fa:	693b      	ldr	r3, [r7, #16]
 801f1fc:	2b00      	cmp	r3, #0
 801f1fe:	d151      	bne.n	801f2a4 <sys_timeout_abs+0xc4>
 801f200:	4b2a      	ldr	r3, [pc, #168]	; (801f2ac <sys_timeout_abs+0xcc>)
 801f202:	22be      	movs	r2, #190	; 0xbe
 801f204:	492a      	ldr	r1, [pc, #168]	; (801f2b0 <sys_timeout_abs+0xd0>)
 801f206:	482b      	ldr	r0, [pc, #172]	; (801f2b4 <sys_timeout_abs+0xd4>)
 801f208:	f004 fdba 	bl	8023d80 <iprintf>
    return;
 801f20c:	e04a      	b.n	801f2a4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f20e:	693b      	ldr	r3, [r7, #16]
 801f210:	2200      	movs	r2, #0
 801f212:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f214:	693b      	ldr	r3, [r7, #16]
 801f216:	68ba      	ldr	r2, [r7, #8]
 801f218:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f21a:	693b      	ldr	r3, [r7, #16]
 801f21c:	687a      	ldr	r2, [r7, #4]
 801f21e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f220:	693b      	ldr	r3, [r7, #16]
 801f222:	68fa      	ldr	r2, [r7, #12]
 801f224:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f226:	4b24      	ldr	r3, [pc, #144]	; (801f2b8 <sys_timeout_abs+0xd8>)
 801f228:	681b      	ldr	r3, [r3, #0]
 801f22a:	2b00      	cmp	r3, #0
 801f22c:	d103      	bne.n	801f236 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f22e:	4a22      	ldr	r2, [pc, #136]	; (801f2b8 <sys_timeout_abs+0xd8>)
 801f230:	693b      	ldr	r3, [r7, #16]
 801f232:	6013      	str	r3, [r2, #0]
    return;
 801f234:	e037      	b.n	801f2a6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f236:	693b      	ldr	r3, [r7, #16]
 801f238:	685a      	ldr	r2, [r3, #4]
 801f23a:	4b1f      	ldr	r3, [pc, #124]	; (801f2b8 <sys_timeout_abs+0xd8>)
 801f23c:	681b      	ldr	r3, [r3, #0]
 801f23e:	685b      	ldr	r3, [r3, #4]
 801f240:	1ad3      	subs	r3, r2, r3
 801f242:	0fdb      	lsrs	r3, r3, #31
 801f244:	f003 0301 	and.w	r3, r3, #1
 801f248:	b2db      	uxtb	r3, r3
 801f24a:	2b00      	cmp	r3, #0
 801f24c:	d007      	beq.n	801f25e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f24e:	4b1a      	ldr	r3, [pc, #104]	; (801f2b8 <sys_timeout_abs+0xd8>)
 801f250:	681a      	ldr	r2, [r3, #0]
 801f252:	693b      	ldr	r3, [r7, #16]
 801f254:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f256:	4a18      	ldr	r2, [pc, #96]	; (801f2b8 <sys_timeout_abs+0xd8>)
 801f258:	693b      	ldr	r3, [r7, #16]
 801f25a:	6013      	str	r3, [r2, #0]
 801f25c:	e023      	b.n	801f2a6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f25e:	4b16      	ldr	r3, [pc, #88]	; (801f2b8 <sys_timeout_abs+0xd8>)
 801f260:	681b      	ldr	r3, [r3, #0]
 801f262:	617b      	str	r3, [r7, #20]
 801f264:	e01a      	b.n	801f29c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f266:	697b      	ldr	r3, [r7, #20]
 801f268:	681b      	ldr	r3, [r3, #0]
 801f26a:	2b00      	cmp	r3, #0
 801f26c:	d00b      	beq.n	801f286 <sys_timeout_abs+0xa6>
 801f26e:	693b      	ldr	r3, [r7, #16]
 801f270:	685a      	ldr	r2, [r3, #4]
 801f272:	697b      	ldr	r3, [r7, #20]
 801f274:	681b      	ldr	r3, [r3, #0]
 801f276:	685b      	ldr	r3, [r3, #4]
 801f278:	1ad3      	subs	r3, r2, r3
 801f27a:	0fdb      	lsrs	r3, r3, #31
 801f27c:	f003 0301 	and.w	r3, r3, #1
 801f280:	b2db      	uxtb	r3, r3
 801f282:	2b00      	cmp	r3, #0
 801f284:	d007      	beq.n	801f296 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f286:	697b      	ldr	r3, [r7, #20]
 801f288:	681a      	ldr	r2, [r3, #0]
 801f28a:	693b      	ldr	r3, [r7, #16]
 801f28c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f28e:	697b      	ldr	r3, [r7, #20]
 801f290:	693a      	ldr	r2, [r7, #16]
 801f292:	601a      	str	r2, [r3, #0]
        break;
 801f294:	e007      	b.n	801f2a6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f296:	697b      	ldr	r3, [r7, #20]
 801f298:	681b      	ldr	r3, [r3, #0]
 801f29a:	617b      	str	r3, [r7, #20]
 801f29c:	697b      	ldr	r3, [r7, #20]
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d1e1      	bne.n	801f266 <sys_timeout_abs+0x86>
 801f2a2:	e000      	b.n	801f2a6 <sys_timeout_abs+0xc6>
    return;
 801f2a4:	bf00      	nop
      }
    }
  }
}
 801f2a6:	3718      	adds	r7, #24
 801f2a8:	46bd      	mov	sp, r7
 801f2aa:	bd80      	pop	{r7, pc}
 801f2ac:	08027ce0 	.word	0x08027ce0
 801f2b0:	08027d14 	.word	0x08027d14
 801f2b4:	08027d54 	.word	0x08027d54
 801f2b8:	2000bfe8 	.word	0x2000bfe8

0801f2bc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f2bc:	b580      	push	{r7, lr}
 801f2be:	b086      	sub	sp, #24
 801f2c0:	af00      	add	r7, sp, #0
 801f2c2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f2c4:	687b      	ldr	r3, [r7, #4]
 801f2c6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f2c8:	697b      	ldr	r3, [r7, #20]
 801f2ca:	685b      	ldr	r3, [r3, #4]
 801f2cc:	4798      	blx	r3

  now = sys_now();
 801f2ce:	f7f2 f85b 	bl	8011388 <sys_now>
 801f2d2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f2d4:	697b      	ldr	r3, [r7, #20]
 801f2d6:	681a      	ldr	r2, [r3, #0]
 801f2d8:	4b0f      	ldr	r3, [pc, #60]	; (801f318 <lwip_cyclic_timer+0x5c>)
 801f2da:	681b      	ldr	r3, [r3, #0]
 801f2dc:	4413      	add	r3, r2
 801f2de:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f2e0:	68fa      	ldr	r2, [r7, #12]
 801f2e2:	693b      	ldr	r3, [r7, #16]
 801f2e4:	1ad3      	subs	r3, r2, r3
 801f2e6:	0fdb      	lsrs	r3, r3, #31
 801f2e8:	f003 0301 	and.w	r3, r3, #1
 801f2ec:	b2db      	uxtb	r3, r3
 801f2ee:	2b00      	cmp	r3, #0
 801f2f0:	d009      	beq.n	801f306 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f2f2:	697b      	ldr	r3, [r7, #20]
 801f2f4:	681a      	ldr	r2, [r3, #0]
 801f2f6:	693b      	ldr	r3, [r7, #16]
 801f2f8:	4413      	add	r3, r2
 801f2fa:	687a      	ldr	r2, [r7, #4]
 801f2fc:	4907      	ldr	r1, [pc, #28]	; (801f31c <lwip_cyclic_timer+0x60>)
 801f2fe:	4618      	mov	r0, r3
 801f300:	f7ff ff6e 	bl	801f1e0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f304:	e004      	b.n	801f310 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f306:	687a      	ldr	r2, [r7, #4]
 801f308:	4904      	ldr	r1, [pc, #16]	; (801f31c <lwip_cyclic_timer+0x60>)
 801f30a:	68f8      	ldr	r0, [r7, #12]
 801f30c:	f7ff ff68 	bl	801f1e0 <sys_timeout_abs>
}
 801f310:	bf00      	nop
 801f312:	3718      	adds	r7, #24
 801f314:	46bd      	mov	sp, r7
 801f316:	bd80      	pop	{r7, pc}
 801f318:	2000bfec 	.word	0x2000bfec
 801f31c:	0801f2bd 	.word	0x0801f2bd

0801f320 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f320:	b580      	push	{r7, lr}
 801f322:	b082      	sub	sp, #8
 801f324:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f326:	2301      	movs	r3, #1
 801f328:	607b      	str	r3, [r7, #4]
 801f32a:	e00e      	b.n	801f34a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f32c:	4a0b      	ldr	r2, [pc, #44]	; (801f35c <sys_timeouts_init+0x3c>)
 801f32e:	687b      	ldr	r3, [r7, #4]
 801f330:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f334:	687b      	ldr	r3, [r7, #4]
 801f336:	00db      	lsls	r3, r3, #3
 801f338:	4a08      	ldr	r2, [pc, #32]	; (801f35c <sys_timeouts_init+0x3c>)
 801f33a:	4413      	add	r3, r2
 801f33c:	461a      	mov	r2, r3
 801f33e:	4908      	ldr	r1, [pc, #32]	; (801f360 <sys_timeouts_init+0x40>)
 801f340:	f000 f810 	bl	801f364 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f344:	687b      	ldr	r3, [r7, #4]
 801f346:	3301      	adds	r3, #1
 801f348:	607b      	str	r3, [r7, #4]
 801f34a:	687b      	ldr	r3, [r7, #4]
 801f34c:	2b02      	cmp	r3, #2
 801f34e:	d9ed      	bls.n	801f32c <sys_timeouts_init+0xc>
  }
}
 801f350:	bf00      	nop
 801f352:	bf00      	nop
 801f354:	3708      	adds	r7, #8
 801f356:	46bd      	mov	sp, r7
 801f358:	bd80      	pop	{r7, pc}
 801f35a:	bf00      	nop
 801f35c:	08028960 	.word	0x08028960
 801f360:	0801f2bd 	.word	0x0801f2bd

0801f364 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f364:	b580      	push	{r7, lr}
 801f366:	b086      	sub	sp, #24
 801f368:	af00      	add	r7, sp, #0
 801f36a:	60f8      	str	r0, [r7, #12]
 801f36c:	60b9      	str	r1, [r7, #8]
 801f36e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f370:	68fb      	ldr	r3, [r7, #12]
 801f372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f376:	d306      	bcc.n	801f386 <sys_timeout+0x22>
 801f378:	4b0a      	ldr	r3, [pc, #40]	; (801f3a4 <sys_timeout+0x40>)
 801f37a:	f240 1229 	movw	r2, #297	; 0x129
 801f37e:	490a      	ldr	r1, [pc, #40]	; (801f3a8 <sys_timeout+0x44>)
 801f380:	480a      	ldr	r0, [pc, #40]	; (801f3ac <sys_timeout+0x48>)
 801f382:	f004 fcfd 	bl	8023d80 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f386:	f7f1 ffff 	bl	8011388 <sys_now>
 801f38a:	4602      	mov	r2, r0
 801f38c:	68fb      	ldr	r3, [r7, #12]
 801f38e:	4413      	add	r3, r2
 801f390:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f392:	687a      	ldr	r2, [r7, #4]
 801f394:	68b9      	ldr	r1, [r7, #8]
 801f396:	6978      	ldr	r0, [r7, #20]
 801f398:	f7ff ff22 	bl	801f1e0 <sys_timeout_abs>
#endif
}
 801f39c:	bf00      	nop
 801f39e:	3718      	adds	r7, #24
 801f3a0:	46bd      	mov	sp, r7
 801f3a2:	bd80      	pop	{r7, pc}
 801f3a4:	08027ce0 	.word	0x08027ce0
 801f3a8:	08027d7c 	.word	0x08027d7c
 801f3ac:	08027d54 	.word	0x08027d54

0801f3b0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f3b0:	b580      	push	{r7, lr}
 801f3b2:	b084      	sub	sp, #16
 801f3b4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f3b6:	f7f1 ffe7 	bl	8011388 <sys_now>
 801f3ba:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801f3bc:	4b17      	ldr	r3, [pc, #92]	; (801f41c <sys_check_timeouts+0x6c>)
 801f3be:	681b      	ldr	r3, [r3, #0]
 801f3c0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801f3c2:	68bb      	ldr	r3, [r7, #8]
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	d022      	beq.n	801f40e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f3c8:	68bb      	ldr	r3, [r7, #8]
 801f3ca:	685b      	ldr	r3, [r3, #4]
 801f3cc:	68fa      	ldr	r2, [r7, #12]
 801f3ce:	1ad3      	subs	r3, r2, r3
 801f3d0:	0fdb      	lsrs	r3, r3, #31
 801f3d2:	f003 0301 	and.w	r3, r3, #1
 801f3d6:	b2db      	uxtb	r3, r3
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	d11a      	bne.n	801f412 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801f3dc:	68bb      	ldr	r3, [r7, #8]
 801f3de:	681b      	ldr	r3, [r3, #0]
 801f3e0:	4a0e      	ldr	r2, [pc, #56]	; (801f41c <sys_check_timeouts+0x6c>)
 801f3e2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801f3e4:	68bb      	ldr	r3, [r7, #8]
 801f3e6:	689b      	ldr	r3, [r3, #8]
 801f3e8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801f3ea:	68bb      	ldr	r3, [r7, #8]
 801f3ec:	68db      	ldr	r3, [r3, #12]
 801f3ee:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801f3f0:	68bb      	ldr	r3, [r7, #8]
 801f3f2:	685b      	ldr	r3, [r3, #4]
 801f3f4:	4a0a      	ldr	r2, [pc, #40]	; (801f420 <sys_check_timeouts+0x70>)
 801f3f6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f3f8:	68b9      	ldr	r1, [r7, #8]
 801f3fa:	200a      	movs	r0, #10
 801f3fc:	f7f8 fbe4 	bl	8017bc8 <memp_free>
    if (handler != NULL) {
 801f400:	687b      	ldr	r3, [r7, #4]
 801f402:	2b00      	cmp	r3, #0
 801f404:	d0da      	beq.n	801f3bc <sys_check_timeouts+0xc>
      handler(arg);
 801f406:	687b      	ldr	r3, [r7, #4]
 801f408:	6838      	ldr	r0, [r7, #0]
 801f40a:	4798      	blx	r3
  do {
 801f40c:	e7d6      	b.n	801f3bc <sys_check_timeouts+0xc>
      return;
 801f40e:	bf00      	nop
 801f410:	e000      	b.n	801f414 <sys_check_timeouts+0x64>
      return;
 801f412:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f414:	3710      	adds	r7, #16
 801f416:	46bd      	mov	sp, r7
 801f418:	bd80      	pop	{r7, pc}
 801f41a:	bf00      	nop
 801f41c:	2000bfe8 	.word	0x2000bfe8
 801f420:	2000bfec 	.word	0x2000bfec

0801f424 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801f424:	b580      	push	{r7, lr}
 801f426:	b082      	sub	sp, #8
 801f428:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f42a:	4b16      	ldr	r3, [pc, #88]	; (801f484 <sys_timeouts_sleeptime+0x60>)
 801f42c:	681b      	ldr	r3, [r3, #0]
 801f42e:	2b00      	cmp	r3, #0
 801f430:	d102      	bne.n	801f438 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801f432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f436:	e020      	b.n	801f47a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801f438:	f7f1 ffa6 	bl	8011388 <sys_now>
 801f43c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801f43e:	4b11      	ldr	r3, [pc, #68]	; (801f484 <sys_timeouts_sleeptime+0x60>)
 801f440:	681b      	ldr	r3, [r3, #0]
 801f442:	685a      	ldr	r2, [r3, #4]
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	1ad3      	subs	r3, r2, r3
 801f448:	0fdb      	lsrs	r3, r3, #31
 801f44a:	f003 0301 	and.w	r3, r3, #1
 801f44e:	b2db      	uxtb	r3, r3
 801f450:	2b00      	cmp	r3, #0
 801f452:	d001      	beq.n	801f458 <sys_timeouts_sleeptime+0x34>
    return 0;
 801f454:	2300      	movs	r3, #0
 801f456:	e010      	b.n	801f47a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801f458:	4b0a      	ldr	r3, [pc, #40]	; (801f484 <sys_timeouts_sleeptime+0x60>)
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	685a      	ldr	r2, [r3, #4]
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	1ad3      	subs	r3, r2, r3
 801f462:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801f464:	683b      	ldr	r3, [r7, #0]
 801f466:	2b00      	cmp	r3, #0
 801f468:	da06      	bge.n	801f478 <sys_timeouts_sleeptime+0x54>
 801f46a:	4b07      	ldr	r3, [pc, #28]	; (801f488 <sys_timeouts_sleeptime+0x64>)
 801f46c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801f470:	4906      	ldr	r1, [pc, #24]	; (801f48c <sys_timeouts_sleeptime+0x68>)
 801f472:	4807      	ldr	r0, [pc, #28]	; (801f490 <sys_timeouts_sleeptime+0x6c>)
 801f474:	f004 fc84 	bl	8023d80 <iprintf>
    return ret;
 801f478:	683b      	ldr	r3, [r7, #0]
  }
}
 801f47a:	4618      	mov	r0, r3
 801f47c:	3708      	adds	r7, #8
 801f47e:	46bd      	mov	sp, r7
 801f480:	bd80      	pop	{r7, pc}
 801f482:	bf00      	nop
 801f484:	2000bfe8 	.word	0x2000bfe8
 801f488:	08027ce0 	.word	0x08027ce0
 801f48c:	08027db4 	.word	0x08027db4
 801f490:	08027d54 	.word	0x08027d54

0801f494 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f494:	b580      	push	{r7, lr}
 801f496:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f498:	f004 fc8a 	bl	8023db0 <rand>
 801f49c:	4603      	mov	r3, r0
 801f49e:	b29b      	uxth	r3, r3
 801f4a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f4a4:	b29b      	uxth	r3, r3
 801f4a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f4aa:	b29a      	uxth	r2, r3
 801f4ac:	4b01      	ldr	r3, [pc, #4]	; (801f4b4 <udp_init+0x20>)
 801f4ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f4b0:	bf00      	nop
 801f4b2:	bd80      	pop	{r7, pc}
 801f4b4:	20000034 	.word	0x20000034

0801f4b8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f4b8:	b480      	push	{r7}
 801f4ba:	b083      	sub	sp, #12
 801f4bc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f4be:	2300      	movs	r3, #0
 801f4c0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f4c2:	4b17      	ldr	r3, [pc, #92]	; (801f520 <udp_new_port+0x68>)
 801f4c4:	881b      	ldrh	r3, [r3, #0]
 801f4c6:	1c5a      	adds	r2, r3, #1
 801f4c8:	b291      	uxth	r1, r2
 801f4ca:	4a15      	ldr	r2, [pc, #84]	; (801f520 <udp_new_port+0x68>)
 801f4cc:	8011      	strh	r1, [r2, #0]
 801f4ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f4d2:	4293      	cmp	r3, r2
 801f4d4:	d103      	bne.n	801f4de <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f4d6:	4b12      	ldr	r3, [pc, #72]	; (801f520 <udp_new_port+0x68>)
 801f4d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f4dc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f4de:	4b11      	ldr	r3, [pc, #68]	; (801f524 <udp_new_port+0x6c>)
 801f4e0:	681b      	ldr	r3, [r3, #0]
 801f4e2:	603b      	str	r3, [r7, #0]
 801f4e4:	e011      	b.n	801f50a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f4e6:	683b      	ldr	r3, [r7, #0]
 801f4e8:	8a5a      	ldrh	r2, [r3, #18]
 801f4ea:	4b0d      	ldr	r3, [pc, #52]	; (801f520 <udp_new_port+0x68>)
 801f4ec:	881b      	ldrh	r3, [r3, #0]
 801f4ee:	429a      	cmp	r2, r3
 801f4f0:	d108      	bne.n	801f504 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f4f2:	88fb      	ldrh	r3, [r7, #6]
 801f4f4:	3301      	adds	r3, #1
 801f4f6:	80fb      	strh	r3, [r7, #6]
 801f4f8:	88fb      	ldrh	r3, [r7, #6]
 801f4fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f4fe:	d3e0      	bcc.n	801f4c2 <udp_new_port+0xa>
        return 0;
 801f500:	2300      	movs	r3, #0
 801f502:	e007      	b.n	801f514 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f504:	683b      	ldr	r3, [r7, #0]
 801f506:	68db      	ldr	r3, [r3, #12]
 801f508:	603b      	str	r3, [r7, #0]
 801f50a:	683b      	ldr	r3, [r7, #0]
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	d1ea      	bne.n	801f4e6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f510:	4b03      	ldr	r3, [pc, #12]	; (801f520 <udp_new_port+0x68>)
 801f512:	881b      	ldrh	r3, [r3, #0]
}
 801f514:	4618      	mov	r0, r3
 801f516:	370c      	adds	r7, #12
 801f518:	46bd      	mov	sp, r7
 801f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f51e:	4770      	bx	lr
 801f520:	20000034 	.word	0x20000034
 801f524:	2000bff4 	.word	0x2000bff4

0801f528 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f528:	b580      	push	{r7, lr}
 801f52a:	b084      	sub	sp, #16
 801f52c:	af00      	add	r7, sp, #0
 801f52e:	60f8      	str	r0, [r7, #12]
 801f530:	60b9      	str	r1, [r7, #8]
 801f532:	4613      	mov	r3, r2
 801f534:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f536:	68fb      	ldr	r3, [r7, #12]
 801f538:	2b00      	cmp	r3, #0
 801f53a:	d105      	bne.n	801f548 <udp_input_local_match+0x20>
 801f53c:	4b27      	ldr	r3, [pc, #156]	; (801f5dc <udp_input_local_match+0xb4>)
 801f53e:	2287      	movs	r2, #135	; 0x87
 801f540:	4927      	ldr	r1, [pc, #156]	; (801f5e0 <udp_input_local_match+0xb8>)
 801f542:	4828      	ldr	r0, [pc, #160]	; (801f5e4 <udp_input_local_match+0xbc>)
 801f544:	f004 fc1c 	bl	8023d80 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f548:	68bb      	ldr	r3, [r7, #8]
 801f54a:	2b00      	cmp	r3, #0
 801f54c:	d105      	bne.n	801f55a <udp_input_local_match+0x32>
 801f54e:	4b23      	ldr	r3, [pc, #140]	; (801f5dc <udp_input_local_match+0xb4>)
 801f550:	2288      	movs	r2, #136	; 0x88
 801f552:	4925      	ldr	r1, [pc, #148]	; (801f5e8 <udp_input_local_match+0xc0>)
 801f554:	4823      	ldr	r0, [pc, #140]	; (801f5e4 <udp_input_local_match+0xbc>)
 801f556:	f004 fc13 	bl	8023d80 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f55a:	68fb      	ldr	r3, [r7, #12]
 801f55c:	7a1b      	ldrb	r3, [r3, #8]
 801f55e:	2b00      	cmp	r3, #0
 801f560:	d00b      	beq.n	801f57a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f562:	68fb      	ldr	r3, [r7, #12]
 801f564:	7a1a      	ldrb	r2, [r3, #8]
 801f566:	4b21      	ldr	r3, [pc, #132]	; (801f5ec <udp_input_local_match+0xc4>)
 801f568:	685b      	ldr	r3, [r3, #4]
 801f56a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f56e:	3301      	adds	r3, #1
 801f570:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f572:	429a      	cmp	r2, r3
 801f574:	d001      	beq.n	801f57a <udp_input_local_match+0x52>
    return 0;
 801f576:	2300      	movs	r3, #0
 801f578:	e02b      	b.n	801f5d2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f57a:	79fb      	ldrb	r3, [r7, #7]
 801f57c:	2b00      	cmp	r3, #0
 801f57e:	d018      	beq.n	801f5b2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f580:	68fb      	ldr	r3, [r7, #12]
 801f582:	2b00      	cmp	r3, #0
 801f584:	d013      	beq.n	801f5ae <udp_input_local_match+0x86>
 801f586:	68fb      	ldr	r3, [r7, #12]
 801f588:	681b      	ldr	r3, [r3, #0]
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	d00f      	beq.n	801f5ae <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f58e:	4b17      	ldr	r3, [pc, #92]	; (801f5ec <udp_input_local_match+0xc4>)
 801f590:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f596:	d00a      	beq.n	801f5ae <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f598:	68fb      	ldr	r3, [r7, #12]
 801f59a:	681a      	ldr	r2, [r3, #0]
 801f59c:	4b13      	ldr	r3, [pc, #76]	; (801f5ec <udp_input_local_match+0xc4>)
 801f59e:	695b      	ldr	r3, [r3, #20]
 801f5a0:	405a      	eors	r2, r3
 801f5a2:	68bb      	ldr	r3, [r7, #8]
 801f5a4:	3308      	adds	r3, #8
 801f5a6:	681b      	ldr	r3, [r3, #0]
 801f5a8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f5aa:	2b00      	cmp	r3, #0
 801f5ac:	d110      	bne.n	801f5d0 <udp_input_local_match+0xa8>
          return 1;
 801f5ae:	2301      	movs	r3, #1
 801f5b0:	e00f      	b.n	801f5d2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f5b2:	68fb      	ldr	r3, [r7, #12]
 801f5b4:	2b00      	cmp	r3, #0
 801f5b6:	d009      	beq.n	801f5cc <udp_input_local_match+0xa4>
 801f5b8:	68fb      	ldr	r3, [r7, #12]
 801f5ba:	681b      	ldr	r3, [r3, #0]
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	d005      	beq.n	801f5cc <udp_input_local_match+0xa4>
 801f5c0:	68fb      	ldr	r3, [r7, #12]
 801f5c2:	681a      	ldr	r2, [r3, #0]
 801f5c4:	4b09      	ldr	r3, [pc, #36]	; (801f5ec <udp_input_local_match+0xc4>)
 801f5c6:	695b      	ldr	r3, [r3, #20]
 801f5c8:	429a      	cmp	r2, r3
 801f5ca:	d101      	bne.n	801f5d0 <udp_input_local_match+0xa8>
        return 1;
 801f5cc:	2301      	movs	r3, #1
 801f5ce:	e000      	b.n	801f5d2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f5d0:	2300      	movs	r3, #0
}
 801f5d2:	4618      	mov	r0, r3
 801f5d4:	3710      	adds	r7, #16
 801f5d6:	46bd      	mov	sp, r7
 801f5d8:	bd80      	pop	{r7, pc}
 801f5da:	bf00      	nop
 801f5dc:	08027dc8 	.word	0x08027dc8
 801f5e0:	08027df8 	.word	0x08027df8
 801f5e4:	08027e1c 	.word	0x08027e1c
 801f5e8:	08027e44 	.word	0x08027e44
 801f5ec:	20006684 	.word	0x20006684

0801f5f0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f5f0:	b590      	push	{r4, r7, lr}
 801f5f2:	b08d      	sub	sp, #52	; 0x34
 801f5f4:	af02      	add	r7, sp, #8
 801f5f6:	6078      	str	r0, [r7, #4]
 801f5f8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f5fa:	2300      	movs	r3, #0
 801f5fc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	2b00      	cmp	r3, #0
 801f602:	d105      	bne.n	801f610 <udp_input+0x20>
 801f604:	4b7c      	ldr	r3, [pc, #496]	; (801f7f8 <udp_input+0x208>)
 801f606:	22cf      	movs	r2, #207	; 0xcf
 801f608:	497c      	ldr	r1, [pc, #496]	; (801f7fc <udp_input+0x20c>)
 801f60a:	487d      	ldr	r0, [pc, #500]	; (801f800 <udp_input+0x210>)
 801f60c:	f004 fbb8 	bl	8023d80 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f610:	683b      	ldr	r3, [r7, #0]
 801f612:	2b00      	cmp	r3, #0
 801f614:	d105      	bne.n	801f622 <udp_input+0x32>
 801f616:	4b78      	ldr	r3, [pc, #480]	; (801f7f8 <udp_input+0x208>)
 801f618:	22d0      	movs	r2, #208	; 0xd0
 801f61a:	497a      	ldr	r1, [pc, #488]	; (801f804 <udp_input+0x214>)
 801f61c:	4878      	ldr	r0, [pc, #480]	; (801f800 <udp_input+0x210>)
 801f61e:	f004 fbaf 	bl	8023d80 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f622:	687b      	ldr	r3, [r7, #4]
 801f624:	895b      	ldrh	r3, [r3, #10]
 801f626:	2b07      	cmp	r3, #7
 801f628:	d803      	bhi.n	801f632 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f62a:	6878      	ldr	r0, [r7, #4]
 801f62c:	f7f9 f970 	bl	8018910 <pbuf_free>
    goto end;
 801f630:	e0de      	b.n	801f7f0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f632:	687b      	ldr	r3, [r7, #4]
 801f634:	685b      	ldr	r3, [r3, #4]
 801f636:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f638:	4b73      	ldr	r3, [pc, #460]	; (801f808 <udp_input+0x218>)
 801f63a:	695b      	ldr	r3, [r3, #20]
 801f63c:	4a72      	ldr	r2, [pc, #456]	; (801f808 <udp_input+0x218>)
 801f63e:	6812      	ldr	r2, [r2, #0]
 801f640:	4611      	mov	r1, r2
 801f642:	4618      	mov	r0, r3
 801f644:	f001 ffee 	bl	8021624 <ip4_addr_isbroadcast_u32>
 801f648:	4603      	mov	r3, r0
 801f64a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f64c:	697b      	ldr	r3, [r7, #20]
 801f64e:	881b      	ldrh	r3, [r3, #0]
 801f650:	b29b      	uxth	r3, r3
 801f652:	4618      	mov	r0, r3
 801f654:	f7f7 fd6a 	bl	801712c <lwip_htons>
 801f658:	4603      	mov	r3, r0
 801f65a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f65c:	697b      	ldr	r3, [r7, #20]
 801f65e:	885b      	ldrh	r3, [r3, #2]
 801f660:	b29b      	uxth	r3, r3
 801f662:	4618      	mov	r0, r3
 801f664:	f7f7 fd62 	bl	801712c <lwip_htons>
 801f668:	4603      	mov	r3, r0
 801f66a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f66c:	2300      	movs	r3, #0
 801f66e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f670:	2300      	movs	r3, #0
 801f672:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f674:	2300      	movs	r3, #0
 801f676:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f678:	4b64      	ldr	r3, [pc, #400]	; (801f80c <udp_input+0x21c>)
 801f67a:	681b      	ldr	r3, [r3, #0]
 801f67c:	627b      	str	r3, [r7, #36]	; 0x24
 801f67e:	e054      	b.n	801f72a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f682:	8a5b      	ldrh	r3, [r3, #18]
 801f684:	89fa      	ldrh	r2, [r7, #14]
 801f686:	429a      	cmp	r2, r3
 801f688:	d14a      	bne.n	801f720 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f68a:	7cfb      	ldrb	r3, [r7, #19]
 801f68c:	461a      	mov	r2, r3
 801f68e:	6839      	ldr	r1, [r7, #0]
 801f690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f692:	f7ff ff49 	bl	801f528 <udp_input_local_match>
 801f696:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f698:	2b00      	cmp	r3, #0
 801f69a:	d041      	beq.n	801f720 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f69e:	7c1b      	ldrb	r3, [r3, #16]
 801f6a0:	f003 0304 	and.w	r3, r3, #4
 801f6a4:	2b00      	cmp	r3, #0
 801f6a6:	d11d      	bne.n	801f6e4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801f6a8:	69fb      	ldr	r3, [r7, #28]
 801f6aa:	2b00      	cmp	r3, #0
 801f6ac:	d102      	bne.n	801f6b4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801f6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6b0:	61fb      	str	r3, [r7, #28]
 801f6b2:	e017      	b.n	801f6e4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f6b4:	7cfb      	ldrb	r3, [r7, #19]
 801f6b6:	2b00      	cmp	r3, #0
 801f6b8:	d014      	beq.n	801f6e4 <udp_input+0xf4>
 801f6ba:	4b53      	ldr	r3, [pc, #332]	; (801f808 <udp_input+0x218>)
 801f6bc:	695b      	ldr	r3, [r3, #20]
 801f6be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f6c2:	d10f      	bne.n	801f6e4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f6c4:	69fb      	ldr	r3, [r7, #28]
 801f6c6:	681a      	ldr	r2, [r3, #0]
 801f6c8:	683b      	ldr	r3, [r7, #0]
 801f6ca:	3304      	adds	r3, #4
 801f6cc:	681b      	ldr	r3, [r3, #0]
 801f6ce:	429a      	cmp	r2, r3
 801f6d0:	d008      	beq.n	801f6e4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6d4:	681a      	ldr	r2, [r3, #0]
 801f6d6:	683b      	ldr	r3, [r7, #0]
 801f6d8:	3304      	adds	r3, #4
 801f6da:	681b      	ldr	r3, [r3, #0]
 801f6dc:	429a      	cmp	r2, r3
 801f6de:	d101      	bne.n	801f6e4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801f6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6e2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6e6:	8a9b      	ldrh	r3, [r3, #20]
 801f6e8:	8a3a      	ldrh	r2, [r7, #16]
 801f6ea:	429a      	cmp	r2, r3
 801f6ec:	d118      	bne.n	801f720 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6f0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801f6f2:	2b00      	cmp	r3, #0
 801f6f4:	d005      	beq.n	801f702 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801f6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6f8:	685a      	ldr	r2, [r3, #4]
 801f6fa:	4b43      	ldr	r3, [pc, #268]	; (801f808 <udp_input+0x218>)
 801f6fc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f6fe:	429a      	cmp	r2, r3
 801f700:	d10e      	bne.n	801f720 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f702:	6a3b      	ldr	r3, [r7, #32]
 801f704:	2b00      	cmp	r3, #0
 801f706:	d014      	beq.n	801f732 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f70a:	68da      	ldr	r2, [r3, #12]
 801f70c:	6a3b      	ldr	r3, [r7, #32]
 801f70e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801f710:	4b3e      	ldr	r3, [pc, #248]	; (801f80c <udp_input+0x21c>)
 801f712:	681a      	ldr	r2, [r3, #0]
 801f714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f716:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801f718:	4a3c      	ldr	r2, [pc, #240]	; (801f80c <udp_input+0x21c>)
 801f71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f71c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801f71e:	e008      	b.n	801f732 <udp_input+0x142>
      }
    }

    prev = pcb;
 801f720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f722:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f726:	68db      	ldr	r3, [r3, #12]
 801f728:	627b      	str	r3, [r7, #36]	; 0x24
 801f72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f72c:	2b00      	cmp	r3, #0
 801f72e:	d1a7      	bne.n	801f680 <udp_input+0x90>
 801f730:	e000      	b.n	801f734 <udp_input+0x144>
        break;
 801f732:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801f734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f736:	2b00      	cmp	r3, #0
 801f738:	d101      	bne.n	801f73e <udp_input+0x14e>
    pcb = uncon_pcb;
 801f73a:	69fb      	ldr	r3, [r7, #28]
 801f73c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801f73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f740:	2b00      	cmp	r3, #0
 801f742:	d002      	beq.n	801f74a <udp_input+0x15a>
    for_us = 1;
 801f744:	2301      	movs	r3, #1
 801f746:	76fb      	strb	r3, [r7, #27]
 801f748:	e00a      	b.n	801f760 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801f74a:	683b      	ldr	r3, [r7, #0]
 801f74c:	3304      	adds	r3, #4
 801f74e:	681a      	ldr	r2, [r3, #0]
 801f750:	4b2d      	ldr	r3, [pc, #180]	; (801f808 <udp_input+0x218>)
 801f752:	695b      	ldr	r3, [r3, #20]
 801f754:	429a      	cmp	r2, r3
 801f756:	bf0c      	ite	eq
 801f758:	2301      	moveq	r3, #1
 801f75a:	2300      	movne	r3, #0
 801f75c:	b2db      	uxtb	r3, r3
 801f75e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801f760:	7efb      	ldrb	r3, [r7, #27]
 801f762:	2b00      	cmp	r3, #0
 801f764:	d041      	beq.n	801f7ea <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f766:	2108      	movs	r1, #8
 801f768:	6878      	ldr	r0, [r7, #4]
 801f76a:	f7f9 f84b 	bl	8018804 <pbuf_remove_header>
 801f76e:	4603      	mov	r3, r0
 801f770:	2b00      	cmp	r3, #0
 801f772:	d00a      	beq.n	801f78a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f774:	4b20      	ldr	r3, [pc, #128]	; (801f7f8 <udp_input+0x208>)
 801f776:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f77a:	4925      	ldr	r1, [pc, #148]	; (801f810 <udp_input+0x220>)
 801f77c:	4820      	ldr	r0, [pc, #128]	; (801f800 <udp_input+0x210>)
 801f77e:	f004 faff 	bl	8023d80 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801f782:	6878      	ldr	r0, [r7, #4]
 801f784:	f7f9 f8c4 	bl	8018910 <pbuf_free>
      goto end;
 801f788:	e032      	b.n	801f7f0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801f78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f78c:	2b00      	cmp	r3, #0
 801f78e:	d012      	beq.n	801f7b6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f792:	699b      	ldr	r3, [r3, #24]
 801f794:	2b00      	cmp	r3, #0
 801f796:	d00a      	beq.n	801f7ae <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f79a:	699c      	ldr	r4, [r3, #24]
 801f79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f79e:	69d8      	ldr	r0, [r3, #28]
 801f7a0:	8a3b      	ldrh	r3, [r7, #16]
 801f7a2:	9300      	str	r3, [sp, #0]
 801f7a4:	4b1b      	ldr	r3, [pc, #108]	; (801f814 <udp_input+0x224>)
 801f7a6:	687a      	ldr	r2, [r7, #4]
 801f7a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f7aa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801f7ac:	e021      	b.n	801f7f2 <udp_input+0x202>
        pbuf_free(p);
 801f7ae:	6878      	ldr	r0, [r7, #4]
 801f7b0:	f7f9 f8ae 	bl	8018910 <pbuf_free>
        goto end;
 801f7b4:	e01c      	b.n	801f7f0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f7b6:	7cfb      	ldrb	r3, [r7, #19]
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	d112      	bne.n	801f7e2 <udp_input+0x1f2>
 801f7bc:	4b12      	ldr	r3, [pc, #72]	; (801f808 <udp_input+0x218>)
 801f7be:	695b      	ldr	r3, [r3, #20]
 801f7c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f7c4:	2be0      	cmp	r3, #224	; 0xe0
 801f7c6:	d00c      	beq.n	801f7e2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f7c8:	4b0f      	ldr	r3, [pc, #60]	; (801f808 <udp_input+0x218>)
 801f7ca:	899b      	ldrh	r3, [r3, #12]
 801f7cc:	3308      	adds	r3, #8
 801f7ce:	b29b      	uxth	r3, r3
 801f7d0:	b21b      	sxth	r3, r3
 801f7d2:	4619      	mov	r1, r3
 801f7d4:	6878      	ldr	r0, [r7, #4]
 801f7d6:	f7f9 f888 	bl	80188ea <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801f7da:	2103      	movs	r1, #3
 801f7dc:	6878      	ldr	r0, [r7, #4]
 801f7de:	f001 fc01 	bl	8020fe4 <icmp_dest_unreach>
      pbuf_free(p);
 801f7e2:	6878      	ldr	r0, [r7, #4]
 801f7e4:	f7f9 f894 	bl	8018910 <pbuf_free>
  return;
 801f7e8:	e003      	b.n	801f7f2 <udp_input+0x202>
    pbuf_free(p);
 801f7ea:	6878      	ldr	r0, [r7, #4]
 801f7ec:	f7f9 f890 	bl	8018910 <pbuf_free>
  return;
 801f7f0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801f7f2:	372c      	adds	r7, #44	; 0x2c
 801f7f4:	46bd      	mov	sp, r7
 801f7f6:	bd90      	pop	{r4, r7, pc}
 801f7f8:	08027dc8 	.word	0x08027dc8
 801f7fc:	08027e6c 	.word	0x08027e6c
 801f800:	08027e1c 	.word	0x08027e1c
 801f804:	08027e84 	.word	0x08027e84
 801f808:	20006684 	.word	0x20006684
 801f80c:	2000bff4 	.word	0x2000bff4
 801f810:	08027ea0 	.word	0x08027ea0
 801f814:	20006694 	.word	0x20006694

0801f818 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801f818:	b580      	push	{r7, lr}
 801f81a:	b082      	sub	sp, #8
 801f81c:	af00      	add	r7, sp, #0
 801f81e:	6078      	str	r0, [r7, #4]
 801f820:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801f822:	687b      	ldr	r3, [r7, #4]
 801f824:	2b00      	cmp	r3, #0
 801f826:	d109      	bne.n	801f83c <udp_send+0x24>
 801f828:	4b11      	ldr	r3, [pc, #68]	; (801f870 <udp_send+0x58>)
 801f82a:	f240 12d5 	movw	r2, #469	; 0x1d5
 801f82e:	4911      	ldr	r1, [pc, #68]	; (801f874 <udp_send+0x5c>)
 801f830:	4811      	ldr	r0, [pc, #68]	; (801f878 <udp_send+0x60>)
 801f832:	f004 faa5 	bl	8023d80 <iprintf>
 801f836:	f06f 030f 	mvn.w	r3, #15
 801f83a:	e015      	b.n	801f868 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801f83c:	683b      	ldr	r3, [r7, #0]
 801f83e:	2b00      	cmp	r3, #0
 801f840:	d109      	bne.n	801f856 <udp_send+0x3e>
 801f842:	4b0b      	ldr	r3, [pc, #44]	; (801f870 <udp_send+0x58>)
 801f844:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801f848:	490c      	ldr	r1, [pc, #48]	; (801f87c <udp_send+0x64>)
 801f84a:	480b      	ldr	r0, [pc, #44]	; (801f878 <udp_send+0x60>)
 801f84c:	f004 fa98 	bl	8023d80 <iprintf>
 801f850:	f06f 030f 	mvn.w	r3, #15
 801f854:	e008      	b.n	801f868 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801f856:	687b      	ldr	r3, [r7, #4]
 801f858:	1d1a      	adds	r2, r3, #4
 801f85a:	687b      	ldr	r3, [r7, #4]
 801f85c:	8a9b      	ldrh	r3, [r3, #20]
 801f85e:	6839      	ldr	r1, [r7, #0]
 801f860:	6878      	ldr	r0, [r7, #4]
 801f862:	f000 f80d 	bl	801f880 <udp_sendto>
 801f866:	4603      	mov	r3, r0
}
 801f868:	4618      	mov	r0, r3
 801f86a:	3708      	adds	r7, #8
 801f86c:	46bd      	mov	sp, r7
 801f86e:	bd80      	pop	{r7, pc}
 801f870:	08027dc8 	.word	0x08027dc8
 801f874:	08027ebc 	.word	0x08027ebc
 801f878:	08027e1c 	.word	0x08027e1c
 801f87c:	08027ed4 	.word	0x08027ed4

0801f880 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801f880:	b580      	push	{r7, lr}
 801f882:	b088      	sub	sp, #32
 801f884:	af02      	add	r7, sp, #8
 801f886:	60f8      	str	r0, [r7, #12]
 801f888:	60b9      	str	r1, [r7, #8]
 801f88a:	607a      	str	r2, [r7, #4]
 801f88c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801f88e:	68fb      	ldr	r3, [r7, #12]
 801f890:	2b00      	cmp	r3, #0
 801f892:	d109      	bne.n	801f8a8 <udp_sendto+0x28>
 801f894:	4b23      	ldr	r3, [pc, #140]	; (801f924 <udp_sendto+0xa4>)
 801f896:	f44f 7206 	mov.w	r2, #536	; 0x218
 801f89a:	4923      	ldr	r1, [pc, #140]	; (801f928 <udp_sendto+0xa8>)
 801f89c:	4823      	ldr	r0, [pc, #140]	; (801f92c <udp_sendto+0xac>)
 801f89e:	f004 fa6f 	bl	8023d80 <iprintf>
 801f8a2:	f06f 030f 	mvn.w	r3, #15
 801f8a6:	e038      	b.n	801f91a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801f8a8:	68bb      	ldr	r3, [r7, #8]
 801f8aa:	2b00      	cmp	r3, #0
 801f8ac:	d109      	bne.n	801f8c2 <udp_sendto+0x42>
 801f8ae:	4b1d      	ldr	r3, [pc, #116]	; (801f924 <udp_sendto+0xa4>)
 801f8b0:	f240 2219 	movw	r2, #537	; 0x219
 801f8b4:	491e      	ldr	r1, [pc, #120]	; (801f930 <udp_sendto+0xb0>)
 801f8b6:	481d      	ldr	r0, [pc, #116]	; (801f92c <udp_sendto+0xac>)
 801f8b8:	f004 fa62 	bl	8023d80 <iprintf>
 801f8bc:	f06f 030f 	mvn.w	r3, #15
 801f8c0:	e02b      	b.n	801f91a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f8c2:	687b      	ldr	r3, [r7, #4]
 801f8c4:	2b00      	cmp	r3, #0
 801f8c6:	d109      	bne.n	801f8dc <udp_sendto+0x5c>
 801f8c8:	4b16      	ldr	r3, [pc, #88]	; (801f924 <udp_sendto+0xa4>)
 801f8ca:	f240 221a 	movw	r2, #538	; 0x21a
 801f8ce:	4919      	ldr	r1, [pc, #100]	; (801f934 <udp_sendto+0xb4>)
 801f8d0:	4816      	ldr	r0, [pc, #88]	; (801f92c <udp_sendto+0xac>)
 801f8d2:	f004 fa55 	bl	8023d80 <iprintf>
 801f8d6:	f06f 030f 	mvn.w	r3, #15
 801f8da:	e01e      	b.n	801f91a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801f8dc:	68fb      	ldr	r3, [r7, #12]
 801f8de:	7a1b      	ldrb	r3, [r3, #8]
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	d006      	beq.n	801f8f2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801f8e4:	68fb      	ldr	r3, [r7, #12]
 801f8e6:	7a1b      	ldrb	r3, [r3, #8]
 801f8e8:	4618      	mov	r0, r3
 801f8ea:	f7f8 fc83 	bl	80181f4 <netif_get_by_index>
 801f8ee:	6178      	str	r0, [r7, #20]
 801f8f0:	e003      	b.n	801f8fa <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801f8f2:	6878      	ldr	r0, [r7, #4]
 801f8f4:	f001 fc00 	bl	80210f8 <ip4_route>
 801f8f8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801f8fa:	697b      	ldr	r3, [r7, #20]
 801f8fc:	2b00      	cmp	r3, #0
 801f8fe:	d102      	bne.n	801f906 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801f900:	f06f 0303 	mvn.w	r3, #3
 801f904:	e009      	b.n	801f91a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801f906:	887a      	ldrh	r2, [r7, #2]
 801f908:	697b      	ldr	r3, [r7, #20]
 801f90a:	9300      	str	r3, [sp, #0]
 801f90c:	4613      	mov	r3, r2
 801f90e:	687a      	ldr	r2, [r7, #4]
 801f910:	68b9      	ldr	r1, [r7, #8]
 801f912:	68f8      	ldr	r0, [r7, #12]
 801f914:	f000 f810 	bl	801f938 <udp_sendto_if>
 801f918:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801f91a:	4618      	mov	r0, r3
 801f91c:	3718      	adds	r7, #24
 801f91e:	46bd      	mov	sp, r7
 801f920:	bd80      	pop	{r7, pc}
 801f922:	bf00      	nop
 801f924:	08027dc8 	.word	0x08027dc8
 801f928:	08027eec 	.word	0x08027eec
 801f92c:	08027e1c 	.word	0x08027e1c
 801f930:	08027f04 	.word	0x08027f04
 801f934:	08027f20 	.word	0x08027f20

0801f938 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801f938:	b580      	push	{r7, lr}
 801f93a:	b088      	sub	sp, #32
 801f93c:	af02      	add	r7, sp, #8
 801f93e:	60f8      	str	r0, [r7, #12]
 801f940:	60b9      	str	r1, [r7, #8]
 801f942:	607a      	str	r2, [r7, #4]
 801f944:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f946:	68fb      	ldr	r3, [r7, #12]
 801f948:	2b00      	cmp	r3, #0
 801f94a:	d109      	bne.n	801f960 <udp_sendto_if+0x28>
 801f94c:	4b2e      	ldr	r3, [pc, #184]	; (801fa08 <udp_sendto_if+0xd0>)
 801f94e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f952:	492e      	ldr	r1, [pc, #184]	; (801fa0c <udp_sendto_if+0xd4>)
 801f954:	482e      	ldr	r0, [pc, #184]	; (801fa10 <udp_sendto_if+0xd8>)
 801f956:	f004 fa13 	bl	8023d80 <iprintf>
 801f95a:	f06f 030f 	mvn.w	r3, #15
 801f95e:	e04f      	b.n	801fa00 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f960:	68bb      	ldr	r3, [r7, #8]
 801f962:	2b00      	cmp	r3, #0
 801f964:	d109      	bne.n	801f97a <udp_sendto_if+0x42>
 801f966:	4b28      	ldr	r3, [pc, #160]	; (801fa08 <udp_sendto_if+0xd0>)
 801f968:	f240 2281 	movw	r2, #641	; 0x281
 801f96c:	4929      	ldr	r1, [pc, #164]	; (801fa14 <udp_sendto_if+0xdc>)
 801f96e:	4828      	ldr	r0, [pc, #160]	; (801fa10 <udp_sendto_if+0xd8>)
 801f970:	f004 fa06 	bl	8023d80 <iprintf>
 801f974:	f06f 030f 	mvn.w	r3, #15
 801f978:	e042      	b.n	801fa00 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f97a:	687b      	ldr	r3, [r7, #4]
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	d109      	bne.n	801f994 <udp_sendto_if+0x5c>
 801f980:	4b21      	ldr	r3, [pc, #132]	; (801fa08 <udp_sendto_if+0xd0>)
 801f982:	f240 2282 	movw	r2, #642	; 0x282
 801f986:	4924      	ldr	r1, [pc, #144]	; (801fa18 <udp_sendto_if+0xe0>)
 801f988:	4821      	ldr	r0, [pc, #132]	; (801fa10 <udp_sendto_if+0xd8>)
 801f98a:	f004 f9f9 	bl	8023d80 <iprintf>
 801f98e:	f06f 030f 	mvn.w	r3, #15
 801f992:	e035      	b.n	801fa00 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801f994:	6a3b      	ldr	r3, [r7, #32]
 801f996:	2b00      	cmp	r3, #0
 801f998:	d109      	bne.n	801f9ae <udp_sendto_if+0x76>
 801f99a:	4b1b      	ldr	r3, [pc, #108]	; (801fa08 <udp_sendto_if+0xd0>)
 801f99c:	f240 2283 	movw	r2, #643	; 0x283
 801f9a0:	491e      	ldr	r1, [pc, #120]	; (801fa1c <udp_sendto_if+0xe4>)
 801f9a2:	481b      	ldr	r0, [pc, #108]	; (801fa10 <udp_sendto_if+0xd8>)
 801f9a4:	f004 f9ec 	bl	8023d80 <iprintf>
 801f9a8:	f06f 030f 	mvn.w	r3, #15
 801f9ac:	e028      	b.n	801fa00 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f9ae:	68fb      	ldr	r3, [r7, #12]
 801f9b0:	2b00      	cmp	r3, #0
 801f9b2:	d009      	beq.n	801f9c8 <udp_sendto_if+0x90>
 801f9b4:	68fb      	ldr	r3, [r7, #12]
 801f9b6:	681b      	ldr	r3, [r3, #0]
 801f9b8:	2b00      	cmp	r3, #0
 801f9ba:	d005      	beq.n	801f9c8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801f9bc:	68fb      	ldr	r3, [r7, #12]
 801f9be:	681b      	ldr	r3, [r3, #0]
 801f9c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f9c4:	2be0      	cmp	r3, #224	; 0xe0
 801f9c6:	d103      	bne.n	801f9d0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801f9c8:	6a3b      	ldr	r3, [r7, #32]
 801f9ca:	3304      	adds	r3, #4
 801f9cc:	617b      	str	r3, [r7, #20]
 801f9ce:	e00b      	b.n	801f9e8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801f9d0:	68fb      	ldr	r3, [r7, #12]
 801f9d2:	681a      	ldr	r2, [r3, #0]
 801f9d4:	6a3b      	ldr	r3, [r7, #32]
 801f9d6:	3304      	adds	r3, #4
 801f9d8:	681b      	ldr	r3, [r3, #0]
 801f9da:	429a      	cmp	r2, r3
 801f9dc:	d002      	beq.n	801f9e4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801f9de:	f06f 0303 	mvn.w	r3, #3
 801f9e2:	e00d      	b.n	801fa00 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801f9e4:	68fb      	ldr	r3, [r7, #12]
 801f9e6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801f9e8:	887a      	ldrh	r2, [r7, #2]
 801f9ea:	697b      	ldr	r3, [r7, #20]
 801f9ec:	9301      	str	r3, [sp, #4]
 801f9ee:	6a3b      	ldr	r3, [r7, #32]
 801f9f0:	9300      	str	r3, [sp, #0]
 801f9f2:	4613      	mov	r3, r2
 801f9f4:	687a      	ldr	r2, [r7, #4]
 801f9f6:	68b9      	ldr	r1, [r7, #8]
 801f9f8:	68f8      	ldr	r0, [r7, #12]
 801f9fa:	f000 f811 	bl	801fa20 <udp_sendto_if_src>
 801f9fe:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801fa00:	4618      	mov	r0, r3
 801fa02:	3718      	adds	r7, #24
 801fa04:	46bd      	mov	sp, r7
 801fa06:	bd80      	pop	{r7, pc}
 801fa08:	08027dc8 	.word	0x08027dc8
 801fa0c:	08027f3c 	.word	0x08027f3c
 801fa10:	08027e1c 	.word	0x08027e1c
 801fa14:	08027f58 	.word	0x08027f58
 801fa18:	08027f74 	.word	0x08027f74
 801fa1c:	08027f94 	.word	0x08027f94

0801fa20 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801fa20:	b580      	push	{r7, lr}
 801fa22:	b08c      	sub	sp, #48	; 0x30
 801fa24:	af04      	add	r7, sp, #16
 801fa26:	60f8      	str	r0, [r7, #12]
 801fa28:	60b9      	str	r1, [r7, #8]
 801fa2a:	607a      	str	r2, [r7, #4]
 801fa2c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801fa2e:	68fb      	ldr	r3, [r7, #12]
 801fa30:	2b00      	cmp	r3, #0
 801fa32:	d109      	bne.n	801fa48 <udp_sendto_if_src+0x28>
 801fa34:	4b65      	ldr	r3, [pc, #404]	; (801fbcc <udp_sendto_if_src+0x1ac>)
 801fa36:	f240 22d1 	movw	r2, #721	; 0x2d1
 801fa3a:	4965      	ldr	r1, [pc, #404]	; (801fbd0 <udp_sendto_if_src+0x1b0>)
 801fa3c:	4865      	ldr	r0, [pc, #404]	; (801fbd4 <udp_sendto_if_src+0x1b4>)
 801fa3e:	f004 f99f 	bl	8023d80 <iprintf>
 801fa42:	f06f 030f 	mvn.w	r3, #15
 801fa46:	e0bc      	b.n	801fbc2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801fa48:	68bb      	ldr	r3, [r7, #8]
 801fa4a:	2b00      	cmp	r3, #0
 801fa4c:	d109      	bne.n	801fa62 <udp_sendto_if_src+0x42>
 801fa4e:	4b5f      	ldr	r3, [pc, #380]	; (801fbcc <udp_sendto_if_src+0x1ac>)
 801fa50:	f240 22d2 	movw	r2, #722	; 0x2d2
 801fa54:	4960      	ldr	r1, [pc, #384]	; (801fbd8 <udp_sendto_if_src+0x1b8>)
 801fa56:	485f      	ldr	r0, [pc, #380]	; (801fbd4 <udp_sendto_if_src+0x1b4>)
 801fa58:	f004 f992 	bl	8023d80 <iprintf>
 801fa5c:	f06f 030f 	mvn.w	r3, #15
 801fa60:	e0af      	b.n	801fbc2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	2b00      	cmp	r3, #0
 801fa66:	d109      	bne.n	801fa7c <udp_sendto_if_src+0x5c>
 801fa68:	4b58      	ldr	r3, [pc, #352]	; (801fbcc <udp_sendto_if_src+0x1ac>)
 801fa6a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801fa6e:	495b      	ldr	r1, [pc, #364]	; (801fbdc <udp_sendto_if_src+0x1bc>)
 801fa70:	4858      	ldr	r0, [pc, #352]	; (801fbd4 <udp_sendto_if_src+0x1b4>)
 801fa72:	f004 f985 	bl	8023d80 <iprintf>
 801fa76:	f06f 030f 	mvn.w	r3, #15
 801fa7a:	e0a2      	b.n	801fbc2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801fa7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fa7e:	2b00      	cmp	r3, #0
 801fa80:	d109      	bne.n	801fa96 <udp_sendto_if_src+0x76>
 801fa82:	4b52      	ldr	r3, [pc, #328]	; (801fbcc <udp_sendto_if_src+0x1ac>)
 801fa84:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801fa88:	4955      	ldr	r1, [pc, #340]	; (801fbe0 <udp_sendto_if_src+0x1c0>)
 801fa8a:	4852      	ldr	r0, [pc, #328]	; (801fbd4 <udp_sendto_if_src+0x1b4>)
 801fa8c:	f004 f978 	bl	8023d80 <iprintf>
 801fa90:	f06f 030f 	mvn.w	r3, #15
 801fa94:	e095      	b.n	801fbc2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801fa96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fa98:	2b00      	cmp	r3, #0
 801fa9a:	d109      	bne.n	801fab0 <udp_sendto_if_src+0x90>
 801fa9c:	4b4b      	ldr	r3, [pc, #300]	; (801fbcc <udp_sendto_if_src+0x1ac>)
 801fa9e:	f240 22d5 	movw	r2, #725	; 0x2d5
 801faa2:	4950      	ldr	r1, [pc, #320]	; (801fbe4 <udp_sendto_if_src+0x1c4>)
 801faa4:	484b      	ldr	r0, [pc, #300]	; (801fbd4 <udp_sendto_if_src+0x1b4>)
 801faa6:	f004 f96b 	bl	8023d80 <iprintf>
 801faaa:	f06f 030f 	mvn.w	r3, #15
 801faae:	e088      	b.n	801fbc2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801fab0:	68fb      	ldr	r3, [r7, #12]
 801fab2:	8a5b      	ldrh	r3, [r3, #18]
 801fab4:	2b00      	cmp	r3, #0
 801fab6:	d10f      	bne.n	801fad8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fab8:	68f9      	ldr	r1, [r7, #12]
 801faba:	68fb      	ldr	r3, [r7, #12]
 801fabc:	8a5b      	ldrh	r3, [r3, #18]
 801fabe:	461a      	mov	r2, r3
 801fac0:	68f8      	ldr	r0, [r7, #12]
 801fac2:	f000 f893 	bl	801fbec <udp_bind>
 801fac6:	4603      	mov	r3, r0
 801fac8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801faca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801face:	2b00      	cmp	r3, #0
 801fad0:	d002      	beq.n	801fad8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801fad2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fad6:	e074      	b.n	801fbc2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801fad8:	68bb      	ldr	r3, [r7, #8]
 801fada:	891b      	ldrh	r3, [r3, #8]
 801fadc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801fae0:	4293      	cmp	r3, r2
 801fae2:	d902      	bls.n	801faea <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801fae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fae8:	e06b      	b.n	801fbc2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801faea:	2108      	movs	r1, #8
 801faec:	68b8      	ldr	r0, [r7, #8]
 801faee:	f7f8 fe79 	bl	80187e4 <pbuf_add_header>
 801faf2:	4603      	mov	r3, r0
 801faf4:	2b00      	cmp	r3, #0
 801faf6:	d015      	beq.n	801fb24 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801faf8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fafc:	2108      	movs	r1, #8
 801fafe:	2022      	movs	r0, #34	; 0x22
 801fb00:	f7f8 fc22 	bl	8018348 <pbuf_alloc>
 801fb04:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801fb06:	69fb      	ldr	r3, [r7, #28]
 801fb08:	2b00      	cmp	r3, #0
 801fb0a:	d102      	bne.n	801fb12 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801fb0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fb10:	e057      	b.n	801fbc2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801fb12:	68bb      	ldr	r3, [r7, #8]
 801fb14:	891b      	ldrh	r3, [r3, #8]
 801fb16:	2b00      	cmp	r3, #0
 801fb18:	d006      	beq.n	801fb28 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801fb1a:	68b9      	ldr	r1, [r7, #8]
 801fb1c:	69f8      	ldr	r0, [r7, #28]
 801fb1e:	f7f9 f81b 	bl	8018b58 <pbuf_chain>
 801fb22:	e001      	b.n	801fb28 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801fb24:	68bb      	ldr	r3, [r7, #8]
 801fb26:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801fb28:	69fb      	ldr	r3, [r7, #28]
 801fb2a:	895b      	ldrh	r3, [r3, #10]
 801fb2c:	2b07      	cmp	r3, #7
 801fb2e:	d806      	bhi.n	801fb3e <udp_sendto_if_src+0x11e>
 801fb30:	4b26      	ldr	r3, [pc, #152]	; (801fbcc <udp_sendto_if_src+0x1ac>)
 801fb32:	f240 320d 	movw	r2, #781	; 0x30d
 801fb36:	492c      	ldr	r1, [pc, #176]	; (801fbe8 <udp_sendto_if_src+0x1c8>)
 801fb38:	4826      	ldr	r0, [pc, #152]	; (801fbd4 <udp_sendto_if_src+0x1b4>)
 801fb3a:	f004 f921 	bl	8023d80 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801fb3e:	69fb      	ldr	r3, [r7, #28]
 801fb40:	685b      	ldr	r3, [r3, #4]
 801fb42:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801fb44:	68fb      	ldr	r3, [r7, #12]
 801fb46:	8a5b      	ldrh	r3, [r3, #18]
 801fb48:	4618      	mov	r0, r3
 801fb4a:	f7f7 faef 	bl	801712c <lwip_htons>
 801fb4e:	4603      	mov	r3, r0
 801fb50:	461a      	mov	r2, r3
 801fb52:	697b      	ldr	r3, [r7, #20]
 801fb54:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801fb56:	887b      	ldrh	r3, [r7, #2]
 801fb58:	4618      	mov	r0, r3
 801fb5a:	f7f7 fae7 	bl	801712c <lwip_htons>
 801fb5e:	4603      	mov	r3, r0
 801fb60:	461a      	mov	r2, r3
 801fb62:	697b      	ldr	r3, [r7, #20]
 801fb64:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801fb66:	697b      	ldr	r3, [r7, #20]
 801fb68:	2200      	movs	r2, #0
 801fb6a:	719a      	strb	r2, [r3, #6]
 801fb6c:	2200      	movs	r2, #0
 801fb6e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801fb70:	69fb      	ldr	r3, [r7, #28]
 801fb72:	891b      	ldrh	r3, [r3, #8]
 801fb74:	4618      	mov	r0, r3
 801fb76:	f7f7 fad9 	bl	801712c <lwip_htons>
 801fb7a:	4603      	mov	r3, r0
 801fb7c:	461a      	mov	r2, r3
 801fb7e:	697b      	ldr	r3, [r7, #20]
 801fb80:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801fb82:	2311      	movs	r3, #17
 801fb84:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801fb86:	68fb      	ldr	r3, [r7, #12]
 801fb88:	7adb      	ldrb	r3, [r3, #11]
 801fb8a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801fb8c:	68fb      	ldr	r3, [r7, #12]
 801fb8e:	7a9b      	ldrb	r3, [r3, #10]
 801fb90:	7cb9      	ldrb	r1, [r7, #18]
 801fb92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fb94:	9202      	str	r2, [sp, #8]
 801fb96:	7cfa      	ldrb	r2, [r7, #19]
 801fb98:	9201      	str	r2, [sp, #4]
 801fb9a:	9300      	str	r3, [sp, #0]
 801fb9c:	460b      	mov	r3, r1
 801fb9e:	687a      	ldr	r2, [r7, #4]
 801fba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801fba2:	69f8      	ldr	r0, [r7, #28]
 801fba4:	f001 fc90 	bl	80214c8 <ip4_output_if_src>
 801fba8:	4603      	mov	r3, r0
 801fbaa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801fbac:	69fa      	ldr	r2, [r7, #28]
 801fbae:	68bb      	ldr	r3, [r7, #8]
 801fbb0:	429a      	cmp	r2, r3
 801fbb2:	d004      	beq.n	801fbbe <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801fbb4:	69f8      	ldr	r0, [r7, #28]
 801fbb6:	f7f8 feab 	bl	8018910 <pbuf_free>
    q = NULL;
 801fbba:	2300      	movs	r3, #0
 801fbbc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801fbbe:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801fbc2:	4618      	mov	r0, r3
 801fbc4:	3720      	adds	r7, #32
 801fbc6:	46bd      	mov	sp, r7
 801fbc8:	bd80      	pop	{r7, pc}
 801fbca:	bf00      	nop
 801fbcc:	08027dc8 	.word	0x08027dc8
 801fbd0:	08027fb4 	.word	0x08027fb4
 801fbd4:	08027e1c 	.word	0x08027e1c
 801fbd8:	08027fd4 	.word	0x08027fd4
 801fbdc:	08027ff4 	.word	0x08027ff4
 801fbe0:	08028018 	.word	0x08028018
 801fbe4:	0802803c 	.word	0x0802803c
 801fbe8:	08028060 	.word	0x08028060

0801fbec <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fbec:	b580      	push	{r7, lr}
 801fbee:	b086      	sub	sp, #24
 801fbf0:	af00      	add	r7, sp, #0
 801fbf2:	60f8      	str	r0, [r7, #12]
 801fbf4:	60b9      	str	r1, [r7, #8]
 801fbf6:	4613      	mov	r3, r2
 801fbf8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801fbfa:	68bb      	ldr	r3, [r7, #8]
 801fbfc:	2b00      	cmp	r3, #0
 801fbfe:	d101      	bne.n	801fc04 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801fc00:	4b39      	ldr	r3, [pc, #228]	; (801fce8 <udp_bind+0xfc>)
 801fc02:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801fc04:	68fb      	ldr	r3, [r7, #12]
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	d109      	bne.n	801fc1e <udp_bind+0x32>
 801fc0a:	4b38      	ldr	r3, [pc, #224]	; (801fcec <udp_bind+0x100>)
 801fc0c:	f240 32b7 	movw	r2, #951	; 0x3b7
 801fc10:	4937      	ldr	r1, [pc, #220]	; (801fcf0 <udp_bind+0x104>)
 801fc12:	4838      	ldr	r0, [pc, #224]	; (801fcf4 <udp_bind+0x108>)
 801fc14:	f004 f8b4 	bl	8023d80 <iprintf>
 801fc18:	f06f 030f 	mvn.w	r3, #15
 801fc1c:	e060      	b.n	801fce0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801fc1e:	2300      	movs	r3, #0
 801fc20:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fc22:	4b35      	ldr	r3, [pc, #212]	; (801fcf8 <udp_bind+0x10c>)
 801fc24:	681b      	ldr	r3, [r3, #0]
 801fc26:	617b      	str	r3, [r7, #20]
 801fc28:	e009      	b.n	801fc3e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801fc2a:	68fa      	ldr	r2, [r7, #12]
 801fc2c:	697b      	ldr	r3, [r7, #20]
 801fc2e:	429a      	cmp	r2, r3
 801fc30:	d102      	bne.n	801fc38 <udp_bind+0x4c>
      rebind = 1;
 801fc32:	2301      	movs	r3, #1
 801fc34:	74fb      	strb	r3, [r7, #19]
      break;
 801fc36:	e005      	b.n	801fc44 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fc38:	697b      	ldr	r3, [r7, #20]
 801fc3a:	68db      	ldr	r3, [r3, #12]
 801fc3c:	617b      	str	r3, [r7, #20]
 801fc3e:	697b      	ldr	r3, [r7, #20]
 801fc40:	2b00      	cmp	r3, #0
 801fc42:	d1f2      	bne.n	801fc2a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801fc44:	88fb      	ldrh	r3, [r7, #6]
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d109      	bne.n	801fc5e <udp_bind+0x72>
    port = udp_new_port();
 801fc4a:	f7ff fc35 	bl	801f4b8 <udp_new_port>
 801fc4e:	4603      	mov	r3, r0
 801fc50:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801fc52:	88fb      	ldrh	r3, [r7, #6]
 801fc54:	2b00      	cmp	r3, #0
 801fc56:	d12c      	bne.n	801fcb2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801fc58:	f06f 0307 	mvn.w	r3, #7
 801fc5c:	e040      	b.n	801fce0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fc5e:	4b26      	ldr	r3, [pc, #152]	; (801fcf8 <udp_bind+0x10c>)
 801fc60:	681b      	ldr	r3, [r3, #0]
 801fc62:	617b      	str	r3, [r7, #20]
 801fc64:	e022      	b.n	801fcac <udp_bind+0xc0>
      if (pcb != ipcb) {
 801fc66:	68fa      	ldr	r2, [r7, #12]
 801fc68:	697b      	ldr	r3, [r7, #20]
 801fc6a:	429a      	cmp	r2, r3
 801fc6c:	d01b      	beq.n	801fca6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801fc6e:	697b      	ldr	r3, [r7, #20]
 801fc70:	8a5b      	ldrh	r3, [r3, #18]
 801fc72:	88fa      	ldrh	r2, [r7, #6]
 801fc74:	429a      	cmp	r2, r3
 801fc76:	d116      	bne.n	801fca6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fc78:	697b      	ldr	r3, [r7, #20]
 801fc7a:	681a      	ldr	r2, [r3, #0]
 801fc7c:	68bb      	ldr	r3, [r7, #8]
 801fc7e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801fc80:	429a      	cmp	r2, r3
 801fc82:	d00d      	beq.n	801fca0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fc84:	68bb      	ldr	r3, [r7, #8]
 801fc86:	2b00      	cmp	r3, #0
 801fc88:	d00a      	beq.n	801fca0 <udp_bind+0xb4>
 801fc8a:	68bb      	ldr	r3, [r7, #8]
 801fc8c:	681b      	ldr	r3, [r3, #0]
 801fc8e:	2b00      	cmp	r3, #0
 801fc90:	d006      	beq.n	801fca0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fc92:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fc94:	2b00      	cmp	r3, #0
 801fc96:	d003      	beq.n	801fca0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fc98:	697b      	ldr	r3, [r7, #20]
 801fc9a:	681b      	ldr	r3, [r3, #0]
 801fc9c:	2b00      	cmp	r3, #0
 801fc9e:	d102      	bne.n	801fca6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801fca0:	f06f 0307 	mvn.w	r3, #7
 801fca4:	e01c      	b.n	801fce0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fca6:	697b      	ldr	r3, [r7, #20]
 801fca8:	68db      	ldr	r3, [r3, #12]
 801fcaa:	617b      	str	r3, [r7, #20]
 801fcac:	697b      	ldr	r3, [r7, #20]
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	d1d9      	bne.n	801fc66 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801fcb2:	68bb      	ldr	r3, [r7, #8]
 801fcb4:	2b00      	cmp	r3, #0
 801fcb6:	d002      	beq.n	801fcbe <udp_bind+0xd2>
 801fcb8:	68bb      	ldr	r3, [r7, #8]
 801fcba:	681b      	ldr	r3, [r3, #0]
 801fcbc:	e000      	b.n	801fcc0 <udp_bind+0xd4>
 801fcbe:	2300      	movs	r3, #0
 801fcc0:	68fa      	ldr	r2, [r7, #12]
 801fcc2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801fcc4:	68fb      	ldr	r3, [r7, #12]
 801fcc6:	88fa      	ldrh	r2, [r7, #6]
 801fcc8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801fcca:	7cfb      	ldrb	r3, [r7, #19]
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	d106      	bne.n	801fcde <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801fcd0:	4b09      	ldr	r3, [pc, #36]	; (801fcf8 <udp_bind+0x10c>)
 801fcd2:	681a      	ldr	r2, [r3, #0]
 801fcd4:	68fb      	ldr	r3, [r7, #12]
 801fcd6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801fcd8:	4a07      	ldr	r2, [pc, #28]	; (801fcf8 <udp_bind+0x10c>)
 801fcda:	68fb      	ldr	r3, [r7, #12]
 801fcdc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801fcde:	2300      	movs	r3, #0
}
 801fce0:	4618      	mov	r0, r3
 801fce2:	3718      	adds	r7, #24
 801fce4:	46bd      	mov	sp, r7
 801fce6:	bd80      	pop	{r7, pc}
 801fce8:	08028978 	.word	0x08028978
 801fcec:	08027dc8 	.word	0x08027dc8
 801fcf0:	08028090 	.word	0x08028090
 801fcf4:	08027e1c 	.word	0x08027e1c
 801fcf8:	2000bff4 	.word	0x2000bff4

0801fcfc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fcfc:	b580      	push	{r7, lr}
 801fcfe:	b086      	sub	sp, #24
 801fd00:	af00      	add	r7, sp, #0
 801fd02:	60f8      	str	r0, [r7, #12]
 801fd04:	60b9      	str	r1, [r7, #8]
 801fd06:	4613      	mov	r3, r2
 801fd08:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801fd0a:	68fb      	ldr	r3, [r7, #12]
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	d109      	bne.n	801fd24 <udp_connect+0x28>
 801fd10:	4b2c      	ldr	r3, [pc, #176]	; (801fdc4 <udp_connect+0xc8>)
 801fd12:	f240 4235 	movw	r2, #1077	; 0x435
 801fd16:	492c      	ldr	r1, [pc, #176]	; (801fdc8 <udp_connect+0xcc>)
 801fd18:	482c      	ldr	r0, [pc, #176]	; (801fdcc <udp_connect+0xd0>)
 801fd1a:	f004 f831 	bl	8023d80 <iprintf>
 801fd1e:	f06f 030f 	mvn.w	r3, #15
 801fd22:	e04b      	b.n	801fdbc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801fd24:	68bb      	ldr	r3, [r7, #8]
 801fd26:	2b00      	cmp	r3, #0
 801fd28:	d109      	bne.n	801fd3e <udp_connect+0x42>
 801fd2a:	4b26      	ldr	r3, [pc, #152]	; (801fdc4 <udp_connect+0xc8>)
 801fd2c:	f240 4236 	movw	r2, #1078	; 0x436
 801fd30:	4927      	ldr	r1, [pc, #156]	; (801fdd0 <udp_connect+0xd4>)
 801fd32:	4826      	ldr	r0, [pc, #152]	; (801fdcc <udp_connect+0xd0>)
 801fd34:	f004 f824 	bl	8023d80 <iprintf>
 801fd38:	f06f 030f 	mvn.w	r3, #15
 801fd3c:	e03e      	b.n	801fdbc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801fd3e:	68fb      	ldr	r3, [r7, #12]
 801fd40:	8a5b      	ldrh	r3, [r3, #18]
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	d10f      	bne.n	801fd66 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fd46:	68f9      	ldr	r1, [r7, #12]
 801fd48:	68fb      	ldr	r3, [r7, #12]
 801fd4a:	8a5b      	ldrh	r3, [r3, #18]
 801fd4c:	461a      	mov	r2, r3
 801fd4e:	68f8      	ldr	r0, [r7, #12]
 801fd50:	f7ff ff4c 	bl	801fbec <udp_bind>
 801fd54:	4603      	mov	r3, r0
 801fd56:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801fd58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fd5c:	2b00      	cmp	r3, #0
 801fd5e:	d002      	beq.n	801fd66 <udp_connect+0x6a>
      return err;
 801fd60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fd64:	e02a      	b.n	801fdbc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801fd66:	68bb      	ldr	r3, [r7, #8]
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	d002      	beq.n	801fd72 <udp_connect+0x76>
 801fd6c:	68bb      	ldr	r3, [r7, #8]
 801fd6e:	681b      	ldr	r3, [r3, #0]
 801fd70:	e000      	b.n	801fd74 <udp_connect+0x78>
 801fd72:	2300      	movs	r3, #0
 801fd74:	68fa      	ldr	r2, [r7, #12]
 801fd76:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801fd78:	68fb      	ldr	r3, [r7, #12]
 801fd7a:	88fa      	ldrh	r2, [r7, #6]
 801fd7c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801fd7e:	68fb      	ldr	r3, [r7, #12]
 801fd80:	7c1b      	ldrb	r3, [r3, #16]
 801fd82:	f043 0304 	orr.w	r3, r3, #4
 801fd86:	b2da      	uxtb	r2, r3
 801fd88:	68fb      	ldr	r3, [r7, #12]
 801fd8a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fd8c:	4b11      	ldr	r3, [pc, #68]	; (801fdd4 <udp_connect+0xd8>)
 801fd8e:	681b      	ldr	r3, [r3, #0]
 801fd90:	617b      	str	r3, [r7, #20]
 801fd92:	e008      	b.n	801fda6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801fd94:	68fa      	ldr	r2, [r7, #12]
 801fd96:	697b      	ldr	r3, [r7, #20]
 801fd98:	429a      	cmp	r2, r3
 801fd9a:	d101      	bne.n	801fda0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801fd9c:	2300      	movs	r3, #0
 801fd9e:	e00d      	b.n	801fdbc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fda0:	697b      	ldr	r3, [r7, #20]
 801fda2:	68db      	ldr	r3, [r3, #12]
 801fda4:	617b      	str	r3, [r7, #20]
 801fda6:	697b      	ldr	r3, [r7, #20]
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	d1f3      	bne.n	801fd94 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801fdac:	4b09      	ldr	r3, [pc, #36]	; (801fdd4 <udp_connect+0xd8>)
 801fdae:	681a      	ldr	r2, [r3, #0]
 801fdb0:	68fb      	ldr	r3, [r7, #12]
 801fdb2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801fdb4:	4a07      	ldr	r2, [pc, #28]	; (801fdd4 <udp_connect+0xd8>)
 801fdb6:	68fb      	ldr	r3, [r7, #12]
 801fdb8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801fdba:	2300      	movs	r3, #0
}
 801fdbc:	4618      	mov	r0, r3
 801fdbe:	3718      	adds	r7, #24
 801fdc0:	46bd      	mov	sp, r7
 801fdc2:	bd80      	pop	{r7, pc}
 801fdc4:	08027dc8 	.word	0x08027dc8
 801fdc8:	080280a8 	.word	0x080280a8
 801fdcc:	08027e1c 	.word	0x08027e1c
 801fdd0:	080280c4 	.word	0x080280c4
 801fdd4:	2000bff4 	.word	0x2000bff4

0801fdd8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801fdd8:	b580      	push	{r7, lr}
 801fdda:	b084      	sub	sp, #16
 801fddc:	af00      	add	r7, sp, #0
 801fdde:	60f8      	str	r0, [r7, #12]
 801fde0:	60b9      	str	r1, [r7, #8]
 801fde2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801fde4:	68fb      	ldr	r3, [r7, #12]
 801fde6:	2b00      	cmp	r3, #0
 801fde8:	d107      	bne.n	801fdfa <udp_recv+0x22>
 801fdea:	4b08      	ldr	r3, [pc, #32]	; (801fe0c <udp_recv+0x34>)
 801fdec:	f240 428a 	movw	r2, #1162	; 0x48a
 801fdf0:	4907      	ldr	r1, [pc, #28]	; (801fe10 <udp_recv+0x38>)
 801fdf2:	4808      	ldr	r0, [pc, #32]	; (801fe14 <udp_recv+0x3c>)
 801fdf4:	f003 ffc4 	bl	8023d80 <iprintf>
 801fdf8:	e005      	b.n	801fe06 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801fdfa:	68fb      	ldr	r3, [r7, #12]
 801fdfc:	68ba      	ldr	r2, [r7, #8]
 801fdfe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801fe00:	68fb      	ldr	r3, [r7, #12]
 801fe02:	687a      	ldr	r2, [r7, #4]
 801fe04:	61da      	str	r2, [r3, #28]
}
 801fe06:	3710      	adds	r7, #16
 801fe08:	46bd      	mov	sp, r7
 801fe0a:	bd80      	pop	{r7, pc}
 801fe0c:	08027dc8 	.word	0x08027dc8
 801fe10:	080280fc 	.word	0x080280fc
 801fe14:	08027e1c 	.word	0x08027e1c

0801fe18 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801fe18:	b580      	push	{r7, lr}
 801fe1a:	b084      	sub	sp, #16
 801fe1c:	af00      	add	r7, sp, #0
 801fe1e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801fe20:	687b      	ldr	r3, [r7, #4]
 801fe22:	2b00      	cmp	r3, #0
 801fe24:	d107      	bne.n	801fe36 <udp_remove+0x1e>
 801fe26:	4b19      	ldr	r3, [pc, #100]	; (801fe8c <udp_remove+0x74>)
 801fe28:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801fe2c:	4918      	ldr	r1, [pc, #96]	; (801fe90 <udp_remove+0x78>)
 801fe2e:	4819      	ldr	r0, [pc, #100]	; (801fe94 <udp_remove+0x7c>)
 801fe30:	f003 ffa6 	bl	8023d80 <iprintf>
 801fe34:	e026      	b.n	801fe84 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801fe36:	4b18      	ldr	r3, [pc, #96]	; (801fe98 <udp_remove+0x80>)
 801fe38:	681b      	ldr	r3, [r3, #0]
 801fe3a:	687a      	ldr	r2, [r7, #4]
 801fe3c:	429a      	cmp	r2, r3
 801fe3e:	d105      	bne.n	801fe4c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801fe40:	4b15      	ldr	r3, [pc, #84]	; (801fe98 <udp_remove+0x80>)
 801fe42:	681b      	ldr	r3, [r3, #0]
 801fe44:	68db      	ldr	r3, [r3, #12]
 801fe46:	4a14      	ldr	r2, [pc, #80]	; (801fe98 <udp_remove+0x80>)
 801fe48:	6013      	str	r3, [r2, #0]
 801fe4a:	e017      	b.n	801fe7c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fe4c:	4b12      	ldr	r3, [pc, #72]	; (801fe98 <udp_remove+0x80>)
 801fe4e:	681b      	ldr	r3, [r3, #0]
 801fe50:	60fb      	str	r3, [r7, #12]
 801fe52:	e010      	b.n	801fe76 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801fe54:	68fb      	ldr	r3, [r7, #12]
 801fe56:	68db      	ldr	r3, [r3, #12]
 801fe58:	2b00      	cmp	r3, #0
 801fe5a:	d009      	beq.n	801fe70 <udp_remove+0x58>
 801fe5c:	68fb      	ldr	r3, [r7, #12]
 801fe5e:	68db      	ldr	r3, [r3, #12]
 801fe60:	687a      	ldr	r2, [r7, #4]
 801fe62:	429a      	cmp	r2, r3
 801fe64:	d104      	bne.n	801fe70 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801fe66:	687b      	ldr	r3, [r7, #4]
 801fe68:	68da      	ldr	r2, [r3, #12]
 801fe6a:	68fb      	ldr	r3, [r7, #12]
 801fe6c:	60da      	str	r2, [r3, #12]
        break;
 801fe6e:	e005      	b.n	801fe7c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fe70:	68fb      	ldr	r3, [r7, #12]
 801fe72:	68db      	ldr	r3, [r3, #12]
 801fe74:	60fb      	str	r3, [r7, #12]
 801fe76:	68fb      	ldr	r3, [r7, #12]
 801fe78:	2b00      	cmp	r3, #0
 801fe7a:	d1eb      	bne.n	801fe54 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801fe7c:	6879      	ldr	r1, [r7, #4]
 801fe7e:	2000      	movs	r0, #0
 801fe80:	f7f7 fea2 	bl	8017bc8 <memp_free>
}
 801fe84:	3710      	adds	r7, #16
 801fe86:	46bd      	mov	sp, r7
 801fe88:	bd80      	pop	{r7, pc}
 801fe8a:	bf00      	nop
 801fe8c:	08027dc8 	.word	0x08027dc8
 801fe90:	08028114 	.word	0x08028114
 801fe94:	08027e1c 	.word	0x08027e1c
 801fe98:	2000bff4 	.word	0x2000bff4

0801fe9c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801fe9c:	b580      	push	{r7, lr}
 801fe9e:	b082      	sub	sp, #8
 801fea0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801fea2:	2000      	movs	r0, #0
 801fea4:	f7f7 fe1a 	bl	8017adc <memp_malloc>
 801fea8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801feaa:	687b      	ldr	r3, [r7, #4]
 801feac:	2b00      	cmp	r3, #0
 801feae:	d007      	beq.n	801fec0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801feb0:	2220      	movs	r2, #32
 801feb2:	2100      	movs	r1, #0
 801feb4:	6878      	ldr	r0, [r7, #4]
 801feb6:	f003 fe7b 	bl	8023bb0 <memset>
    pcb->ttl = UDP_TTL;
 801feba:	687b      	ldr	r3, [r7, #4]
 801febc:	22ff      	movs	r2, #255	; 0xff
 801febe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801fec0:	687b      	ldr	r3, [r7, #4]
}
 801fec2:	4618      	mov	r0, r3
 801fec4:	3708      	adds	r7, #8
 801fec6:	46bd      	mov	sp, r7
 801fec8:	bd80      	pop	{r7, pc}

0801feca <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801feca:	b580      	push	{r7, lr}
 801fecc:	b084      	sub	sp, #16
 801fece:	af00      	add	r7, sp, #0
 801fed0:	4603      	mov	r3, r0
 801fed2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801fed4:	f7ff ffe2 	bl	801fe9c <udp_new>
 801fed8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801feda:	68fb      	ldr	r3, [r7, #12]
}
 801fedc:	4618      	mov	r0, r3
 801fede:	3710      	adds	r7, #16
 801fee0:	46bd      	mov	sp, r7
 801fee2:	bd80      	pop	{r7, pc}

0801fee4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801fee4:	b480      	push	{r7}
 801fee6:	b085      	sub	sp, #20
 801fee8:	af00      	add	r7, sp, #0
 801feea:	6078      	str	r0, [r7, #4]
 801feec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801feee:	687b      	ldr	r3, [r7, #4]
 801fef0:	2b00      	cmp	r3, #0
 801fef2:	d01e      	beq.n	801ff32 <udp_netif_ip_addr_changed+0x4e>
 801fef4:	687b      	ldr	r3, [r7, #4]
 801fef6:	681b      	ldr	r3, [r3, #0]
 801fef8:	2b00      	cmp	r3, #0
 801fefa:	d01a      	beq.n	801ff32 <udp_netif_ip_addr_changed+0x4e>
 801fefc:	683b      	ldr	r3, [r7, #0]
 801fefe:	2b00      	cmp	r3, #0
 801ff00:	d017      	beq.n	801ff32 <udp_netif_ip_addr_changed+0x4e>
 801ff02:	683b      	ldr	r3, [r7, #0]
 801ff04:	681b      	ldr	r3, [r3, #0]
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	d013      	beq.n	801ff32 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ff0a:	4b0d      	ldr	r3, [pc, #52]	; (801ff40 <udp_netif_ip_addr_changed+0x5c>)
 801ff0c:	681b      	ldr	r3, [r3, #0]
 801ff0e:	60fb      	str	r3, [r7, #12]
 801ff10:	e00c      	b.n	801ff2c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ff12:	68fb      	ldr	r3, [r7, #12]
 801ff14:	681a      	ldr	r2, [r3, #0]
 801ff16:	687b      	ldr	r3, [r7, #4]
 801ff18:	681b      	ldr	r3, [r3, #0]
 801ff1a:	429a      	cmp	r2, r3
 801ff1c:	d103      	bne.n	801ff26 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ff1e:	683b      	ldr	r3, [r7, #0]
 801ff20:	681a      	ldr	r2, [r3, #0]
 801ff22:	68fb      	ldr	r3, [r7, #12]
 801ff24:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ff26:	68fb      	ldr	r3, [r7, #12]
 801ff28:	68db      	ldr	r3, [r3, #12]
 801ff2a:	60fb      	str	r3, [r7, #12]
 801ff2c:	68fb      	ldr	r3, [r7, #12]
 801ff2e:	2b00      	cmp	r3, #0
 801ff30:	d1ef      	bne.n	801ff12 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801ff32:	bf00      	nop
 801ff34:	3714      	adds	r7, #20
 801ff36:	46bd      	mov	sp, r7
 801ff38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff3c:	4770      	bx	lr
 801ff3e:	bf00      	nop
 801ff40:	2000bff4 	.word	0x2000bff4

0801ff44 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801ff44:	b580      	push	{r7, lr}
 801ff46:	b082      	sub	sp, #8
 801ff48:	af00      	add	r7, sp, #0
 801ff4a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801ff4c:	4915      	ldr	r1, [pc, #84]	; (801ffa4 <etharp_free_entry+0x60>)
 801ff4e:	687a      	ldr	r2, [r7, #4]
 801ff50:	4613      	mov	r3, r2
 801ff52:	005b      	lsls	r3, r3, #1
 801ff54:	4413      	add	r3, r2
 801ff56:	00db      	lsls	r3, r3, #3
 801ff58:	440b      	add	r3, r1
 801ff5a:	681b      	ldr	r3, [r3, #0]
 801ff5c:	2b00      	cmp	r3, #0
 801ff5e:	d013      	beq.n	801ff88 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801ff60:	4910      	ldr	r1, [pc, #64]	; (801ffa4 <etharp_free_entry+0x60>)
 801ff62:	687a      	ldr	r2, [r7, #4]
 801ff64:	4613      	mov	r3, r2
 801ff66:	005b      	lsls	r3, r3, #1
 801ff68:	4413      	add	r3, r2
 801ff6a:	00db      	lsls	r3, r3, #3
 801ff6c:	440b      	add	r3, r1
 801ff6e:	681b      	ldr	r3, [r3, #0]
 801ff70:	4618      	mov	r0, r3
 801ff72:	f7f8 fccd 	bl	8018910 <pbuf_free>
    arp_table[i].q = NULL;
 801ff76:	490b      	ldr	r1, [pc, #44]	; (801ffa4 <etharp_free_entry+0x60>)
 801ff78:	687a      	ldr	r2, [r7, #4]
 801ff7a:	4613      	mov	r3, r2
 801ff7c:	005b      	lsls	r3, r3, #1
 801ff7e:	4413      	add	r3, r2
 801ff80:	00db      	lsls	r3, r3, #3
 801ff82:	440b      	add	r3, r1
 801ff84:	2200      	movs	r2, #0
 801ff86:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801ff88:	4906      	ldr	r1, [pc, #24]	; (801ffa4 <etharp_free_entry+0x60>)
 801ff8a:	687a      	ldr	r2, [r7, #4]
 801ff8c:	4613      	mov	r3, r2
 801ff8e:	005b      	lsls	r3, r3, #1
 801ff90:	4413      	add	r3, r2
 801ff92:	00db      	lsls	r3, r3, #3
 801ff94:	440b      	add	r3, r1
 801ff96:	3314      	adds	r3, #20
 801ff98:	2200      	movs	r2, #0
 801ff9a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801ff9c:	bf00      	nop
 801ff9e:	3708      	adds	r7, #8
 801ffa0:	46bd      	mov	sp, r7
 801ffa2:	bd80      	pop	{r7, pc}
 801ffa4:	2000bff8 	.word	0x2000bff8

0801ffa8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801ffa8:	b580      	push	{r7, lr}
 801ffaa:	b082      	sub	sp, #8
 801ffac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ffae:	2300      	movs	r3, #0
 801ffb0:	607b      	str	r3, [r7, #4]
 801ffb2:	e096      	b.n	80200e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801ffb4:	494f      	ldr	r1, [pc, #316]	; (80200f4 <etharp_tmr+0x14c>)
 801ffb6:	687a      	ldr	r2, [r7, #4]
 801ffb8:	4613      	mov	r3, r2
 801ffba:	005b      	lsls	r3, r3, #1
 801ffbc:	4413      	add	r3, r2
 801ffbe:	00db      	lsls	r3, r3, #3
 801ffc0:	440b      	add	r3, r1
 801ffc2:	3314      	adds	r3, #20
 801ffc4:	781b      	ldrb	r3, [r3, #0]
 801ffc6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801ffc8:	78fb      	ldrb	r3, [r7, #3]
 801ffca:	2b00      	cmp	r3, #0
 801ffcc:	f000 8086 	beq.w	80200dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801ffd0:	4948      	ldr	r1, [pc, #288]	; (80200f4 <etharp_tmr+0x14c>)
 801ffd2:	687a      	ldr	r2, [r7, #4]
 801ffd4:	4613      	mov	r3, r2
 801ffd6:	005b      	lsls	r3, r3, #1
 801ffd8:	4413      	add	r3, r2
 801ffda:	00db      	lsls	r3, r3, #3
 801ffdc:	440b      	add	r3, r1
 801ffde:	3312      	adds	r3, #18
 801ffe0:	881b      	ldrh	r3, [r3, #0]
 801ffe2:	3301      	adds	r3, #1
 801ffe4:	b298      	uxth	r0, r3
 801ffe6:	4943      	ldr	r1, [pc, #268]	; (80200f4 <etharp_tmr+0x14c>)
 801ffe8:	687a      	ldr	r2, [r7, #4]
 801ffea:	4613      	mov	r3, r2
 801ffec:	005b      	lsls	r3, r3, #1
 801ffee:	4413      	add	r3, r2
 801fff0:	00db      	lsls	r3, r3, #3
 801fff2:	440b      	add	r3, r1
 801fff4:	3312      	adds	r3, #18
 801fff6:	4602      	mov	r2, r0
 801fff8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801fffa:	493e      	ldr	r1, [pc, #248]	; (80200f4 <etharp_tmr+0x14c>)
 801fffc:	687a      	ldr	r2, [r7, #4]
 801fffe:	4613      	mov	r3, r2
 8020000:	005b      	lsls	r3, r3, #1
 8020002:	4413      	add	r3, r2
 8020004:	00db      	lsls	r3, r3, #3
 8020006:	440b      	add	r3, r1
 8020008:	3312      	adds	r3, #18
 802000a:	881b      	ldrh	r3, [r3, #0]
 802000c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8020010:	d215      	bcs.n	802003e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8020012:	4938      	ldr	r1, [pc, #224]	; (80200f4 <etharp_tmr+0x14c>)
 8020014:	687a      	ldr	r2, [r7, #4]
 8020016:	4613      	mov	r3, r2
 8020018:	005b      	lsls	r3, r3, #1
 802001a:	4413      	add	r3, r2
 802001c:	00db      	lsls	r3, r3, #3
 802001e:	440b      	add	r3, r1
 8020020:	3314      	adds	r3, #20
 8020022:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8020024:	2b01      	cmp	r3, #1
 8020026:	d10e      	bne.n	8020046 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8020028:	4932      	ldr	r1, [pc, #200]	; (80200f4 <etharp_tmr+0x14c>)
 802002a:	687a      	ldr	r2, [r7, #4]
 802002c:	4613      	mov	r3, r2
 802002e:	005b      	lsls	r3, r3, #1
 8020030:	4413      	add	r3, r2
 8020032:	00db      	lsls	r3, r3, #3
 8020034:	440b      	add	r3, r1
 8020036:	3312      	adds	r3, #18
 8020038:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802003a:	2b04      	cmp	r3, #4
 802003c:	d903      	bls.n	8020046 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 802003e:	6878      	ldr	r0, [r7, #4]
 8020040:	f7ff ff80 	bl	801ff44 <etharp_free_entry>
 8020044:	e04a      	b.n	80200dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8020046:	492b      	ldr	r1, [pc, #172]	; (80200f4 <etharp_tmr+0x14c>)
 8020048:	687a      	ldr	r2, [r7, #4]
 802004a:	4613      	mov	r3, r2
 802004c:	005b      	lsls	r3, r3, #1
 802004e:	4413      	add	r3, r2
 8020050:	00db      	lsls	r3, r3, #3
 8020052:	440b      	add	r3, r1
 8020054:	3314      	adds	r3, #20
 8020056:	781b      	ldrb	r3, [r3, #0]
 8020058:	2b03      	cmp	r3, #3
 802005a:	d10a      	bne.n	8020072 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 802005c:	4925      	ldr	r1, [pc, #148]	; (80200f4 <etharp_tmr+0x14c>)
 802005e:	687a      	ldr	r2, [r7, #4]
 8020060:	4613      	mov	r3, r2
 8020062:	005b      	lsls	r3, r3, #1
 8020064:	4413      	add	r3, r2
 8020066:	00db      	lsls	r3, r3, #3
 8020068:	440b      	add	r3, r1
 802006a:	3314      	adds	r3, #20
 802006c:	2204      	movs	r2, #4
 802006e:	701a      	strb	r2, [r3, #0]
 8020070:	e034      	b.n	80200dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8020072:	4920      	ldr	r1, [pc, #128]	; (80200f4 <etharp_tmr+0x14c>)
 8020074:	687a      	ldr	r2, [r7, #4]
 8020076:	4613      	mov	r3, r2
 8020078:	005b      	lsls	r3, r3, #1
 802007a:	4413      	add	r3, r2
 802007c:	00db      	lsls	r3, r3, #3
 802007e:	440b      	add	r3, r1
 8020080:	3314      	adds	r3, #20
 8020082:	781b      	ldrb	r3, [r3, #0]
 8020084:	2b04      	cmp	r3, #4
 8020086:	d10a      	bne.n	802009e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8020088:	491a      	ldr	r1, [pc, #104]	; (80200f4 <etharp_tmr+0x14c>)
 802008a:	687a      	ldr	r2, [r7, #4]
 802008c:	4613      	mov	r3, r2
 802008e:	005b      	lsls	r3, r3, #1
 8020090:	4413      	add	r3, r2
 8020092:	00db      	lsls	r3, r3, #3
 8020094:	440b      	add	r3, r1
 8020096:	3314      	adds	r3, #20
 8020098:	2202      	movs	r2, #2
 802009a:	701a      	strb	r2, [r3, #0]
 802009c:	e01e      	b.n	80200dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802009e:	4915      	ldr	r1, [pc, #84]	; (80200f4 <etharp_tmr+0x14c>)
 80200a0:	687a      	ldr	r2, [r7, #4]
 80200a2:	4613      	mov	r3, r2
 80200a4:	005b      	lsls	r3, r3, #1
 80200a6:	4413      	add	r3, r2
 80200a8:	00db      	lsls	r3, r3, #3
 80200aa:	440b      	add	r3, r1
 80200ac:	3314      	adds	r3, #20
 80200ae:	781b      	ldrb	r3, [r3, #0]
 80200b0:	2b01      	cmp	r3, #1
 80200b2:	d113      	bne.n	80200dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80200b4:	490f      	ldr	r1, [pc, #60]	; (80200f4 <etharp_tmr+0x14c>)
 80200b6:	687a      	ldr	r2, [r7, #4]
 80200b8:	4613      	mov	r3, r2
 80200ba:	005b      	lsls	r3, r3, #1
 80200bc:	4413      	add	r3, r2
 80200be:	00db      	lsls	r3, r3, #3
 80200c0:	440b      	add	r3, r1
 80200c2:	3308      	adds	r3, #8
 80200c4:	6818      	ldr	r0, [r3, #0]
 80200c6:	687a      	ldr	r2, [r7, #4]
 80200c8:	4613      	mov	r3, r2
 80200ca:	005b      	lsls	r3, r3, #1
 80200cc:	4413      	add	r3, r2
 80200ce:	00db      	lsls	r3, r3, #3
 80200d0:	4a08      	ldr	r2, [pc, #32]	; (80200f4 <etharp_tmr+0x14c>)
 80200d2:	4413      	add	r3, r2
 80200d4:	3304      	adds	r3, #4
 80200d6:	4619      	mov	r1, r3
 80200d8:	f000 fe6e 	bl	8020db8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80200dc:	687b      	ldr	r3, [r7, #4]
 80200de:	3301      	adds	r3, #1
 80200e0:	607b      	str	r3, [r7, #4]
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	2b09      	cmp	r3, #9
 80200e6:	f77f af65 	ble.w	801ffb4 <etharp_tmr+0xc>
      }
    }
  }
}
 80200ea:	bf00      	nop
 80200ec:	bf00      	nop
 80200ee:	3708      	adds	r7, #8
 80200f0:	46bd      	mov	sp, r7
 80200f2:	bd80      	pop	{r7, pc}
 80200f4:	2000bff8 	.word	0x2000bff8

080200f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80200f8:	b580      	push	{r7, lr}
 80200fa:	b08a      	sub	sp, #40	; 0x28
 80200fc:	af00      	add	r7, sp, #0
 80200fe:	60f8      	str	r0, [r7, #12]
 8020100:	460b      	mov	r3, r1
 8020102:	607a      	str	r2, [r7, #4]
 8020104:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8020106:	230a      	movs	r3, #10
 8020108:	84fb      	strh	r3, [r7, #38]	; 0x26
 802010a:	230a      	movs	r3, #10
 802010c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 802010e:	230a      	movs	r3, #10
 8020110:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8020112:	2300      	movs	r3, #0
 8020114:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8020116:	230a      	movs	r3, #10
 8020118:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 802011a:	2300      	movs	r3, #0
 802011c:	83bb      	strh	r3, [r7, #28]
 802011e:	2300      	movs	r3, #0
 8020120:	837b      	strh	r3, [r7, #26]
 8020122:	2300      	movs	r3, #0
 8020124:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020126:	2300      	movs	r3, #0
 8020128:	843b      	strh	r3, [r7, #32]
 802012a:	e0ae      	b.n	802028a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 802012c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020130:	49a6      	ldr	r1, [pc, #664]	; (80203cc <etharp_find_entry+0x2d4>)
 8020132:	4613      	mov	r3, r2
 8020134:	005b      	lsls	r3, r3, #1
 8020136:	4413      	add	r3, r2
 8020138:	00db      	lsls	r3, r3, #3
 802013a:	440b      	add	r3, r1
 802013c:	3314      	adds	r3, #20
 802013e:	781b      	ldrb	r3, [r3, #0]
 8020140:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8020142:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020146:	2b0a      	cmp	r3, #10
 8020148:	d105      	bne.n	8020156 <etharp_find_entry+0x5e>
 802014a:	7dfb      	ldrb	r3, [r7, #23]
 802014c:	2b00      	cmp	r3, #0
 802014e:	d102      	bne.n	8020156 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8020150:	8c3b      	ldrh	r3, [r7, #32]
 8020152:	847b      	strh	r3, [r7, #34]	; 0x22
 8020154:	e095      	b.n	8020282 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8020156:	7dfb      	ldrb	r3, [r7, #23]
 8020158:	2b00      	cmp	r3, #0
 802015a:	f000 8092 	beq.w	8020282 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 802015e:	7dfb      	ldrb	r3, [r7, #23]
 8020160:	2b01      	cmp	r3, #1
 8020162:	d009      	beq.n	8020178 <etharp_find_entry+0x80>
 8020164:	7dfb      	ldrb	r3, [r7, #23]
 8020166:	2b01      	cmp	r3, #1
 8020168:	d806      	bhi.n	8020178 <etharp_find_entry+0x80>
 802016a:	4b99      	ldr	r3, [pc, #612]	; (80203d0 <etharp_find_entry+0x2d8>)
 802016c:	f240 1223 	movw	r2, #291	; 0x123
 8020170:	4998      	ldr	r1, [pc, #608]	; (80203d4 <etharp_find_entry+0x2dc>)
 8020172:	4899      	ldr	r0, [pc, #612]	; (80203d8 <etharp_find_entry+0x2e0>)
 8020174:	f003 fe04 	bl	8023d80 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8020178:	68fb      	ldr	r3, [r7, #12]
 802017a:	2b00      	cmp	r3, #0
 802017c:	d020      	beq.n	80201c0 <etharp_find_entry+0xc8>
 802017e:	68fb      	ldr	r3, [r7, #12]
 8020180:	6819      	ldr	r1, [r3, #0]
 8020182:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020186:	4891      	ldr	r0, [pc, #580]	; (80203cc <etharp_find_entry+0x2d4>)
 8020188:	4613      	mov	r3, r2
 802018a:	005b      	lsls	r3, r3, #1
 802018c:	4413      	add	r3, r2
 802018e:	00db      	lsls	r3, r3, #3
 8020190:	4403      	add	r3, r0
 8020192:	3304      	adds	r3, #4
 8020194:	681b      	ldr	r3, [r3, #0]
 8020196:	4299      	cmp	r1, r3
 8020198:	d112      	bne.n	80201c0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 802019a:	687b      	ldr	r3, [r7, #4]
 802019c:	2b00      	cmp	r3, #0
 802019e:	d00c      	beq.n	80201ba <etharp_find_entry+0xc2>
 80201a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80201a4:	4989      	ldr	r1, [pc, #548]	; (80203cc <etharp_find_entry+0x2d4>)
 80201a6:	4613      	mov	r3, r2
 80201a8:	005b      	lsls	r3, r3, #1
 80201aa:	4413      	add	r3, r2
 80201ac:	00db      	lsls	r3, r3, #3
 80201ae:	440b      	add	r3, r1
 80201b0:	3308      	adds	r3, #8
 80201b2:	681b      	ldr	r3, [r3, #0]
 80201b4:	687a      	ldr	r2, [r7, #4]
 80201b6:	429a      	cmp	r2, r3
 80201b8:	d102      	bne.n	80201c0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80201ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80201be:	e100      	b.n	80203c2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80201c0:	7dfb      	ldrb	r3, [r7, #23]
 80201c2:	2b01      	cmp	r3, #1
 80201c4:	d140      	bne.n	8020248 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80201c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80201ca:	4980      	ldr	r1, [pc, #512]	; (80203cc <etharp_find_entry+0x2d4>)
 80201cc:	4613      	mov	r3, r2
 80201ce:	005b      	lsls	r3, r3, #1
 80201d0:	4413      	add	r3, r2
 80201d2:	00db      	lsls	r3, r3, #3
 80201d4:	440b      	add	r3, r1
 80201d6:	681b      	ldr	r3, [r3, #0]
 80201d8:	2b00      	cmp	r3, #0
 80201da:	d01a      	beq.n	8020212 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80201dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80201e0:	497a      	ldr	r1, [pc, #488]	; (80203cc <etharp_find_entry+0x2d4>)
 80201e2:	4613      	mov	r3, r2
 80201e4:	005b      	lsls	r3, r3, #1
 80201e6:	4413      	add	r3, r2
 80201e8:	00db      	lsls	r3, r3, #3
 80201ea:	440b      	add	r3, r1
 80201ec:	3312      	adds	r3, #18
 80201ee:	881b      	ldrh	r3, [r3, #0]
 80201f0:	8bba      	ldrh	r2, [r7, #28]
 80201f2:	429a      	cmp	r2, r3
 80201f4:	d845      	bhi.n	8020282 <etharp_find_entry+0x18a>
            old_queue = i;
 80201f6:	8c3b      	ldrh	r3, [r7, #32]
 80201f8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80201fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80201fe:	4973      	ldr	r1, [pc, #460]	; (80203cc <etharp_find_entry+0x2d4>)
 8020200:	4613      	mov	r3, r2
 8020202:	005b      	lsls	r3, r3, #1
 8020204:	4413      	add	r3, r2
 8020206:	00db      	lsls	r3, r3, #3
 8020208:	440b      	add	r3, r1
 802020a:	3312      	adds	r3, #18
 802020c:	881b      	ldrh	r3, [r3, #0]
 802020e:	83bb      	strh	r3, [r7, #28]
 8020210:	e037      	b.n	8020282 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8020212:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020216:	496d      	ldr	r1, [pc, #436]	; (80203cc <etharp_find_entry+0x2d4>)
 8020218:	4613      	mov	r3, r2
 802021a:	005b      	lsls	r3, r3, #1
 802021c:	4413      	add	r3, r2
 802021e:	00db      	lsls	r3, r3, #3
 8020220:	440b      	add	r3, r1
 8020222:	3312      	adds	r3, #18
 8020224:	881b      	ldrh	r3, [r3, #0]
 8020226:	8b7a      	ldrh	r2, [r7, #26]
 8020228:	429a      	cmp	r2, r3
 802022a:	d82a      	bhi.n	8020282 <etharp_find_entry+0x18a>
            old_pending = i;
 802022c:	8c3b      	ldrh	r3, [r7, #32]
 802022e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8020230:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020234:	4965      	ldr	r1, [pc, #404]	; (80203cc <etharp_find_entry+0x2d4>)
 8020236:	4613      	mov	r3, r2
 8020238:	005b      	lsls	r3, r3, #1
 802023a:	4413      	add	r3, r2
 802023c:	00db      	lsls	r3, r3, #3
 802023e:	440b      	add	r3, r1
 8020240:	3312      	adds	r3, #18
 8020242:	881b      	ldrh	r3, [r3, #0]
 8020244:	837b      	strh	r3, [r7, #26]
 8020246:	e01c      	b.n	8020282 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8020248:	7dfb      	ldrb	r3, [r7, #23]
 802024a:	2b01      	cmp	r3, #1
 802024c:	d919      	bls.n	8020282 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 802024e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020252:	495e      	ldr	r1, [pc, #376]	; (80203cc <etharp_find_entry+0x2d4>)
 8020254:	4613      	mov	r3, r2
 8020256:	005b      	lsls	r3, r3, #1
 8020258:	4413      	add	r3, r2
 802025a:	00db      	lsls	r3, r3, #3
 802025c:	440b      	add	r3, r1
 802025e:	3312      	adds	r3, #18
 8020260:	881b      	ldrh	r3, [r3, #0]
 8020262:	8b3a      	ldrh	r2, [r7, #24]
 8020264:	429a      	cmp	r2, r3
 8020266:	d80c      	bhi.n	8020282 <etharp_find_entry+0x18a>
            old_stable = i;
 8020268:	8c3b      	ldrh	r3, [r7, #32]
 802026a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 802026c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020270:	4956      	ldr	r1, [pc, #344]	; (80203cc <etharp_find_entry+0x2d4>)
 8020272:	4613      	mov	r3, r2
 8020274:	005b      	lsls	r3, r3, #1
 8020276:	4413      	add	r3, r2
 8020278:	00db      	lsls	r3, r3, #3
 802027a:	440b      	add	r3, r1
 802027c:	3312      	adds	r3, #18
 802027e:	881b      	ldrh	r3, [r3, #0]
 8020280:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020282:	8c3b      	ldrh	r3, [r7, #32]
 8020284:	3301      	adds	r3, #1
 8020286:	b29b      	uxth	r3, r3
 8020288:	843b      	strh	r3, [r7, #32]
 802028a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802028e:	2b09      	cmp	r3, #9
 8020290:	f77f af4c 	ble.w	802012c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8020294:	7afb      	ldrb	r3, [r7, #11]
 8020296:	f003 0302 	and.w	r3, r3, #2
 802029a:	2b00      	cmp	r3, #0
 802029c:	d108      	bne.n	80202b0 <etharp_find_entry+0x1b8>
 802029e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80202a2:	2b0a      	cmp	r3, #10
 80202a4:	d107      	bne.n	80202b6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80202a6:	7afb      	ldrb	r3, [r7, #11]
 80202a8:	f003 0301 	and.w	r3, r3, #1
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	d102      	bne.n	80202b6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80202b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80202b4:	e085      	b.n	80203c2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80202b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80202ba:	2b09      	cmp	r3, #9
 80202bc:	dc02      	bgt.n	80202c4 <etharp_find_entry+0x1cc>
    i = empty;
 80202be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80202c0:	843b      	strh	r3, [r7, #32]
 80202c2:	e039      	b.n	8020338 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80202c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80202c8:	2b09      	cmp	r3, #9
 80202ca:	dc14      	bgt.n	80202f6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80202cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80202ce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80202d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80202d4:	493d      	ldr	r1, [pc, #244]	; (80203cc <etharp_find_entry+0x2d4>)
 80202d6:	4613      	mov	r3, r2
 80202d8:	005b      	lsls	r3, r3, #1
 80202da:	4413      	add	r3, r2
 80202dc:	00db      	lsls	r3, r3, #3
 80202de:	440b      	add	r3, r1
 80202e0:	681b      	ldr	r3, [r3, #0]
 80202e2:	2b00      	cmp	r3, #0
 80202e4:	d018      	beq.n	8020318 <etharp_find_entry+0x220>
 80202e6:	4b3a      	ldr	r3, [pc, #232]	; (80203d0 <etharp_find_entry+0x2d8>)
 80202e8:	f240 126d 	movw	r2, #365	; 0x16d
 80202ec:	493b      	ldr	r1, [pc, #236]	; (80203dc <etharp_find_entry+0x2e4>)
 80202ee:	483a      	ldr	r0, [pc, #232]	; (80203d8 <etharp_find_entry+0x2e0>)
 80202f0:	f003 fd46 	bl	8023d80 <iprintf>
 80202f4:	e010      	b.n	8020318 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80202f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80202fa:	2b09      	cmp	r3, #9
 80202fc:	dc02      	bgt.n	8020304 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80202fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020300:	843b      	strh	r3, [r7, #32]
 8020302:	e009      	b.n	8020318 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8020304:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8020308:	2b09      	cmp	r3, #9
 802030a:	dc02      	bgt.n	8020312 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 802030c:	8bfb      	ldrh	r3, [r7, #30]
 802030e:	843b      	strh	r3, [r7, #32]
 8020310:	e002      	b.n	8020318 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8020312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020316:	e054      	b.n	80203c2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020318:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802031c:	2b09      	cmp	r3, #9
 802031e:	dd06      	ble.n	802032e <etharp_find_entry+0x236>
 8020320:	4b2b      	ldr	r3, [pc, #172]	; (80203d0 <etharp_find_entry+0x2d8>)
 8020322:	f240 127f 	movw	r2, #383	; 0x17f
 8020326:	492e      	ldr	r1, [pc, #184]	; (80203e0 <etharp_find_entry+0x2e8>)
 8020328:	482b      	ldr	r0, [pc, #172]	; (80203d8 <etharp_find_entry+0x2e0>)
 802032a:	f003 fd29 	bl	8023d80 <iprintf>
    etharp_free_entry(i);
 802032e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020332:	4618      	mov	r0, r3
 8020334:	f7ff fe06 	bl	801ff44 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020338:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802033c:	2b09      	cmp	r3, #9
 802033e:	dd06      	ble.n	802034e <etharp_find_entry+0x256>
 8020340:	4b23      	ldr	r3, [pc, #140]	; (80203d0 <etharp_find_entry+0x2d8>)
 8020342:	f240 1283 	movw	r2, #387	; 0x183
 8020346:	4926      	ldr	r1, [pc, #152]	; (80203e0 <etharp_find_entry+0x2e8>)
 8020348:	4823      	ldr	r0, [pc, #140]	; (80203d8 <etharp_find_entry+0x2e0>)
 802034a:	f003 fd19 	bl	8023d80 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 802034e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020352:	491e      	ldr	r1, [pc, #120]	; (80203cc <etharp_find_entry+0x2d4>)
 8020354:	4613      	mov	r3, r2
 8020356:	005b      	lsls	r3, r3, #1
 8020358:	4413      	add	r3, r2
 802035a:	00db      	lsls	r3, r3, #3
 802035c:	440b      	add	r3, r1
 802035e:	3314      	adds	r3, #20
 8020360:	781b      	ldrb	r3, [r3, #0]
 8020362:	2b00      	cmp	r3, #0
 8020364:	d006      	beq.n	8020374 <etharp_find_entry+0x27c>
 8020366:	4b1a      	ldr	r3, [pc, #104]	; (80203d0 <etharp_find_entry+0x2d8>)
 8020368:	f44f 72c2 	mov.w	r2, #388	; 0x184
 802036c:	491d      	ldr	r1, [pc, #116]	; (80203e4 <etharp_find_entry+0x2ec>)
 802036e:	481a      	ldr	r0, [pc, #104]	; (80203d8 <etharp_find_entry+0x2e0>)
 8020370:	f003 fd06 	bl	8023d80 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8020374:	68fb      	ldr	r3, [r7, #12]
 8020376:	2b00      	cmp	r3, #0
 8020378:	d00b      	beq.n	8020392 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 802037a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802037e:	68fb      	ldr	r3, [r7, #12]
 8020380:	6819      	ldr	r1, [r3, #0]
 8020382:	4812      	ldr	r0, [pc, #72]	; (80203cc <etharp_find_entry+0x2d4>)
 8020384:	4613      	mov	r3, r2
 8020386:	005b      	lsls	r3, r3, #1
 8020388:	4413      	add	r3, r2
 802038a:	00db      	lsls	r3, r3, #3
 802038c:	4403      	add	r3, r0
 802038e:	3304      	adds	r3, #4
 8020390:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8020392:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020396:	490d      	ldr	r1, [pc, #52]	; (80203cc <etharp_find_entry+0x2d4>)
 8020398:	4613      	mov	r3, r2
 802039a:	005b      	lsls	r3, r3, #1
 802039c:	4413      	add	r3, r2
 802039e:	00db      	lsls	r3, r3, #3
 80203a0:	440b      	add	r3, r1
 80203a2:	3312      	adds	r3, #18
 80203a4:	2200      	movs	r2, #0
 80203a6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80203a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80203ac:	4907      	ldr	r1, [pc, #28]	; (80203cc <etharp_find_entry+0x2d4>)
 80203ae:	4613      	mov	r3, r2
 80203b0:	005b      	lsls	r3, r3, #1
 80203b2:	4413      	add	r3, r2
 80203b4:	00db      	lsls	r3, r3, #3
 80203b6:	440b      	add	r3, r1
 80203b8:	3308      	adds	r3, #8
 80203ba:	687a      	ldr	r2, [r7, #4]
 80203bc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80203be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80203c2:	4618      	mov	r0, r3
 80203c4:	3728      	adds	r7, #40	; 0x28
 80203c6:	46bd      	mov	sp, r7
 80203c8:	bd80      	pop	{r7, pc}
 80203ca:	bf00      	nop
 80203cc:	2000bff8 	.word	0x2000bff8
 80203d0:	0802812c 	.word	0x0802812c
 80203d4:	08028164 	.word	0x08028164
 80203d8:	080281a4 	.word	0x080281a4
 80203dc:	080281cc 	.word	0x080281cc
 80203e0:	080281e4 	.word	0x080281e4
 80203e4:	080281f8 	.word	0x080281f8

080203e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80203e8:	b580      	push	{r7, lr}
 80203ea:	b088      	sub	sp, #32
 80203ec:	af02      	add	r7, sp, #8
 80203ee:	60f8      	str	r0, [r7, #12]
 80203f0:	60b9      	str	r1, [r7, #8]
 80203f2:	607a      	str	r2, [r7, #4]
 80203f4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80203f6:	68fb      	ldr	r3, [r7, #12]
 80203f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80203fc:	2b06      	cmp	r3, #6
 80203fe:	d006      	beq.n	802040e <etharp_update_arp_entry+0x26>
 8020400:	4b48      	ldr	r3, [pc, #288]	; (8020524 <etharp_update_arp_entry+0x13c>)
 8020402:	f240 12a9 	movw	r2, #425	; 0x1a9
 8020406:	4948      	ldr	r1, [pc, #288]	; (8020528 <etharp_update_arp_entry+0x140>)
 8020408:	4848      	ldr	r0, [pc, #288]	; (802052c <etharp_update_arp_entry+0x144>)
 802040a:	f003 fcb9 	bl	8023d80 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 802040e:	68bb      	ldr	r3, [r7, #8]
 8020410:	2b00      	cmp	r3, #0
 8020412:	d012      	beq.n	802043a <etharp_update_arp_entry+0x52>
 8020414:	68bb      	ldr	r3, [r7, #8]
 8020416:	681b      	ldr	r3, [r3, #0]
 8020418:	2b00      	cmp	r3, #0
 802041a:	d00e      	beq.n	802043a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802041c:	68bb      	ldr	r3, [r7, #8]
 802041e:	681b      	ldr	r3, [r3, #0]
 8020420:	68f9      	ldr	r1, [r7, #12]
 8020422:	4618      	mov	r0, r3
 8020424:	f001 f8fe 	bl	8021624 <ip4_addr_isbroadcast_u32>
 8020428:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 802042a:	2b00      	cmp	r3, #0
 802042c:	d105      	bne.n	802043a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 802042e:	68bb      	ldr	r3, [r7, #8]
 8020430:	681b      	ldr	r3, [r3, #0]
 8020432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020436:	2be0      	cmp	r3, #224	; 0xe0
 8020438:	d102      	bne.n	8020440 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 802043a:	f06f 030f 	mvn.w	r3, #15
 802043e:	e06c      	b.n	802051a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8020440:	78fb      	ldrb	r3, [r7, #3]
 8020442:	68fa      	ldr	r2, [r7, #12]
 8020444:	4619      	mov	r1, r3
 8020446:	68b8      	ldr	r0, [r7, #8]
 8020448:	f7ff fe56 	bl	80200f8 <etharp_find_entry>
 802044c:	4603      	mov	r3, r0
 802044e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8020450:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020454:	2b00      	cmp	r3, #0
 8020456:	da02      	bge.n	802045e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8020458:	8afb      	ldrh	r3, [r7, #22]
 802045a:	b25b      	sxtb	r3, r3
 802045c:	e05d      	b.n	802051a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 802045e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020462:	4933      	ldr	r1, [pc, #204]	; (8020530 <etharp_update_arp_entry+0x148>)
 8020464:	4613      	mov	r3, r2
 8020466:	005b      	lsls	r3, r3, #1
 8020468:	4413      	add	r3, r2
 802046a:	00db      	lsls	r3, r3, #3
 802046c:	440b      	add	r3, r1
 802046e:	3314      	adds	r3, #20
 8020470:	2202      	movs	r2, #2
 8020472:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8020474:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020478:	492d      	ldr	r1, [pc, #180]	; (8020530 <etharp_update_arp_entry+0x148>)
 802047a:	4613      	mov	r3, r2
 802047c:	005b      	lsls	r3, r3, #1
 802047e:	4413      	add	r3, r2
 8020480:	00db      	lsls	r3, r3, #3
 8020482:	440b      	add	r3, r1
 8020484:	3308      	adds	r3, #8
 8020486:	68fa      	ldr	r2, [r7, #12]
 8020488:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 802048a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802048e:	4613      	mov	r3, r2
 8020490:	005b      	lsls	r3, r3, #1
 8020492:	4413      	add	r3, r2
 8020494:	00db      	lsls	r3, r3, #3
 8020496:	3308      	adds	r3, #8
 8020498:	4a25      	ldr	r2, [pc, #148]	; (8020530 <etharp_update_arp_entry+0x148>)
 802049a:	4413      	add	r3, r2
 802049c:	3304      	adds	r3, #4
 802049e:	2206      	movs	r2, #6
 80204a0:	6879      	ldr	r1, [r7, #4]
 80204a2:	4618      	mov	r0, r3
 80204a4:	f003 fb5c 	bl	8023b60 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80204a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80204ac:	4920      	ldr	r1, [pc, #128]	; (8020530 <etharp_update_arp_entry+0x148>)
 80204ae:	4613      	mov	r3, r2
 80204b0:	005b      	lsls	r3, r3, #1
 80204b2:	4413      	add	r3, r2
 80204b4:	00db      	lsls	r3, r3, #3
 80204b6:	440b      	add	r3, r1
 80204b8:	3312      	adds	r3, #18
 80204ba:	2200      	movs	r2, #0
 80204bc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80204be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80204c2:	491b      	ldr	r1, [pc, #108]	; (8020530 <etharp_update_arp_entry+0x148>)
 80204c4:	4613      	mov	r3, r2
 80204c6:	005b      	lsls	r3, r3, #1
 80204c8:	4413      	add	r3, r2
 80204ca:	00db      	lsls	r3, r3, #3
 80204cc:	440b      	add	r3, r1
 80204ce:	681b      	ldr	r3, [r3, #0]
 80204d0:	2b00      	cmp	r3, #0
 80204d2:	d021      	beq.n	8020518 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80204d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80204d8:	4915      	ldr	r1, [pc, #84]	; (8020530 <etharp_update_arp_entry+0x148>)
 80204da:	4613      	mov	r3, r2
 80204dc:	005b      	lsls	r3, r3, #1
 80204de:	4413      	add	r3, r2
 80204e0:	00db      	lsls	r3, r3, #3
 80204e2:	440b      	add	r3, r1
 80204e4:	681b      	ldr	r3, [r3, #0]
 80204e6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80204e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80204ec:	4910      	ldr	r1, [pc, #64]	; (8020530 <etharp_update_arp_entry+0x148>)
 80204ee:	4613      	mov	r3, r2
 80204f0:	005b      	lsls	r3, r3, #1
 80204f2:	4413      	add	r3, r2
 80204f4:	00db      	lsls	r3, r3, #3
 80204f6:	440b      	add	r3, r1
 80204f8:	2200      	movs	r2, #0
 80204fa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80204fc:	68fb      	ldr	r3, [r7, #12]
 80204fe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8020502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020506:	9300      	str	r3, [sp, #0]
 8020508:	687b      	ldr	r3, [r7, #4]
 802050a:	6939      	ldr	r1, [r7, #16]
 802050c:	68f8      	ldr	r0, [r7, #12]
 802050e:	f001 ff97 	bl	8022440 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8020512:	6938      	ldr	r0, [r7, #16]
 8020514:	f7f8 f9fc 	bl	8018910 <pbuf_free>
  }
  return ERR_OK;
 8020518:	2300      	movs	r3, #0
}
 802051a:	4618      	mov	r0, r3
 802051c:	3718      	adds	r7, #24
 802051e:	46bd      	mov	sp, r7
 8020520:	bd80      	pop	{r7, pc}
 8020522:	bf00      	nop
 8020524:	0802812c 	.word	0x0802812c
 8020528:	08028224 	.word	0x08028224
 802052c:	080281a4 	.word	0x080281a4
 8020530:	2000bff8 	.word	0x2000bff8

08020534 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8020534:	b580      	push	{r7, lr}
 8020536:	b084      	sub	sp, #16
 8020538:	af00      	add	r7, sp, #0
 802053a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802053c:	2300      	movs	r3, #0
 802053e:	60fb      	str	r3, [r7, #12]
 8020540:	e01e      	b.n	8020580 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8020542:	4913      	ldr	r1, [pc, #76]	; (8020590 <etharp_cleanup_netif+0x5c>)
 8020544:	68fa      	ldr	r2, [r7, #12]
 8020546:	4613      	mov	r3, r2
 8020548:	005b      	lsls	r3, r3, #1
 802054a:	4413      	add	r3, r2
 802054c:	00db      	lsls	r3, r3, #3
 802054e:	440b      	add	r3, r1
 8020550:	3314      	adds	r3, #20
 8020552:	781b      	ldrb	r3, [r3, #0]
 8020554:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8020556:	7afb      	ldrb	r3, [r7, #11]
 8020558:	2b00      	cmp	r3, #0
 802055a:	d00e      	beq.n	802057a <etharp_cleanup_netif+0x46>
 802055c:	490c      	ldr	r1, [pc, #48]	; (8020590 <etharp_cleanup_netif+0x5c>)
 802055e:	68fa      	ldr	r2, [r7, #12]
 8020560:	4613      	mov	r3, r2
 8020562:	005b      	lsls	r3, r3, #1
 8020564:	4413      	add	r3, r2
 8020566:	00db      	lsls	r3, r3, #3
 8020568:	440b      	add	r3, r1
 802056a:	3308      	adds	r3, #8
 802056c:	681b      	ldr	r3, [r3, #0]
 802056e:	687a      	ldr	r2, [r7, #4]
 8020570:	429a      	cmp	r2, r3
 8020572:	d102      	bne.n	802057a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8020574:	68f8      	ldr	r0, [r7, #12]
 8020576:	f7ff fce5 	bl	801ff44 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802057a:	68fb      	ldr	r3, [r7, #12]
 802057c:	3301      	adds	r3, #1
 802057e:	60fb      	str	r3, [r7, #12]
 8020580:	68fb      	ldr	r3, [r7, #12]
 8020582:	2b09      	cmp	r3, #9
 8020584:	dddd      	ble.n	8020542 <etharp_cleanup_netif+0xe>
    }
  }
}
 8020586:	bf00      	nop
 8020588:	bf00      	nop
 802058a:	3710      	adds	r7, #16
 802058c:	46bd      	mov	sp, r7
 802058e:	bd80      	pop	{r7, pc}
 8020590:	2000bff8 	.word	0x2000bff8

08020594 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8020594:	b5b0      	push	{r4, r5, r7, lr}
 8020596:	b08a      	sub	sp, #40	; 0x28
 8020598:	af04      	add	r7, sp, #16
 802059a:	6078      	str	r0, [r7, #4]
 802059c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802059e:	683b      	ldr	r3, [r7, #0]
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	d107      	bne.n	80205b4 <etharp_input+0x20>
 80205a4:	4b3d      	ldr	r3, [pc, #244]	; (802069c <etharp_input+0x108>)
 80205a6:	f240 228a 	movw	r2, #650	; 0x28a
 80205aa:	493d      	ldr	r1, [pc, #244]	; (80206a0 <etharp_input+0x10c>)
 80205ac:	483d      	ldr	r0, [pc, #244]	; (80206a4 <etharp_input+0x110>)
 80205ae:	f003 fbe7 	bl	8023d80 <iprintf>
 80205b2:	e06f      	b.n	8020694 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80205b4:	687b      	ldr	r3, [r7, #4]
 80205b6:	685b      	ldr	r3, [r3, #4]
 80205b8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80205ba:	693b      	ldr	r3, [r7, #16]
 80205bc:	881b      	ldrh	r3, [r3, #0]
 80205be:	b29b      	uxth	r3, r3
 80205c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80205c4:	d10c      	bne.n	80205e0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80205c6:	693b      	ldr	r3, [r7, #16]
 80205c8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80205ca:	2b06      	cmp	r3, #6
 80205cc:	d108      	bne.n	80205e0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80205ce:	693b      	ldr	r3, [r7, #16]
 80205d0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80205d2:	2b04      	cmp	r3, #4
 80205d4:	d104      	bne.n	80205e0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80205d6:	693b      	ldr	r3, [r7, #16]
 80205d8:	885b      	ldrh	r3, [r3, #2]
 80205da:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80205dc:	2b08      	cmp	r3, #8
 80205de:	d003      	beq.n	80205e8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80205e0:	6878      	ldr	r0, [r7, #4]
 80205e2:	f7f8 f995 	bl	8018910 <pbuf_free>
    return;
 80205e6:	e055      	b.n	8020694 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80205e8:	693b      	ldr	r3, [r7, #16]
 80205ea:	330e      	adds	r3, #14
 80205ec:	681b      	ldr	r3, [r3, #0]
 80205ee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80205f0:	693b      	ldr	r3, [r7, #16]
 80205f2:	3318      	adds	r3, #24
 80205f4:	681b      	ldr	r3, [r3, #0]
 80205f6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80205f8:	683b      	ldr	r3, [r7, #0]
 80205fa:	3304      	adds	r3, #4
 80205fc:	681b      	ldr	r3, [r3, #0]
 80205fe:	2b00      	cmp	r3, #0
 8020600:	d102      	bne.n	8020608 <etharp_input+0x74>
    for_us = 0;
 8020602:	2300      	movs	r3, #0
 8020604:	75fb      	strb	r3, [r7, #23]
 8020606:	e009      	b.n	802061c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8020608:	68ba      	ldr	r2, [r7, #8]
 802060a:	683b      	ldr	r3, [r7, #0]
 802060c:	3304      	adds	r3, #4
 802060e:	681b      	ldr	r3, [r3, #0]
 8020610:	429a      	cmp	r2, r3
 8020612:	bf0c      	ite	eq
 8020614:	2301      	moveq	r3, #1
 8020616:	2300      	movne	r3, #0
 8020618:	b2db      	uxtb	r3, r3
 802061a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 802061c:	693b      	ldr	r3, [r7, #16]
 802061e:	f103 0208 	add.w	r2, r3, #8
 8020622:	7dfb      	ldrb	r3, [r7, #23]
 8020624:	2b00      	cmp	r3, #0
 8020626:	d001      	beq.n	802062c <etharp_input+0x98>
 8020628:	2301      	movs	r3, #1
 802062a:	e000      	b.n	802062e <etharp_input+0x9a>
 802062c:	2302      	movs	r3, #2
 802062e:	f107 010c 	add.w	r1, r7, #12
 8020632:	6838      	ldr	r0, [r7, #0]
 8020634:	f7ff fed8 	bl	80203e8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8020638:	693b      	ldr	r3, [r7, #16]
 802063a:	88db      	ldrh	r3, [r3, #6]
 802063c:	b29b      	uxth	r3, r3
 802063e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020642:	d003      	beq.n	802064c <etharp_input+0xb8>
 8020644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020648:	d01e      	beq.n	8020688 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 802064a:	e020      	b.n	802068e <etharp_input+0xfa>
      if (for_us) {
 802064c:	7dfb      	ldrb	r3, [r7, #23]
 802064e:	2b00      	cmp	r3, #0
 8020650:	d01c      	beq.n	802068c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8020652:	683b      	ldr	r3, [r7, #0]
 8020654:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8020658:	693b      	ldr	r3, [r7, #16]
 802065a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 802065e:	683b      	ldr	r3, [r7, #0]
 8020660:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8020664:	683b      	ldr	r3, [r7, #0]
 8020666:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8020668:	693a      	ldr	r2, [r7, #16]
 802066a:	3208      	adds	r2, #8
        etharp_raw(netif,
 802066c:	2102      	movs	r1, #2
 802066e:	9103      	str	r1, [sp, #12]
 8020670:	f107 010c 	add.w	r1, r7, #12
 8020674:	9102      	str	r1, [sp, #8]
 8020676:	9201      	str	r2, [sp, #4]
 8020678:	9300      	str	r3, [sp, #0]
 802067a:	462b      	mov	r3, r5
 802067c:	4622      	mov	r2, r4
 802067e:	4601      	mov	r1, r0
 8020680:	6838      	ldr	r0, [r7, #0]
 8020682:	f000 faeb 	bl	8020c5c <etharp_raw>
      break;
 8020686:	e001      	b.n	802068c <etharp_input+0xf8>
      break;
 8020688:	bf00      	nop
 802068a:	e000      	b.n	802068e <etharp_input+0xfa>
      break;
 802068c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 802068e:	6878      	ldr	r0, [r7, #4]
 8020690:	f7f8 f93e 	bl	8018910 <pbuf_free>
}
 8020694:	3718      	adds	r7, #24
 8020696:	46bd      	mov	sp, r7
 8020698:	bdb0      	pop	{r4, r5, r7, pc}
 802069a:	bf00      	nop
 802069c:	0802812c 	.word	0x0802812c
 80206a0:	0802827c 	.word	0x0802827c
 80206a4:	080281a4 	.word	0x080281a4

080206a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80206a8:	b580      	push	{r7, lr}
 80206aa:	b086      	sub	sp, #24
 80206ac:	af02      	add	r7, sp, #8
 80206ae:	60f8      	str	r0, [r7, #12]
 80206b0:	60b9      	str	r1, [r7, #8]
 80206b2:	4613      	mov	r3, r2
 80206b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80206b6:	79fa      	ldrb	r2, [r7, #7]
 80206b8:	4944      	ldr	r1, [pc, #272]	; (80207cc <etharp_output_to_arp_index+0x124>)
 80206ba:	4613      	mov	r3, r2
 80206bc:	005b      	lsls	r3, r3, #1
 80206be:	4413      	add	r3, r2
 80206c0:	00db      	lsls	r3, r3, #3
 80206c2:	440b      	add	r3, r1
 80206c4:	3314      	adds	r3, #20
 80206c6:	781b      	ldrb	r3, [r3, #0]
 80206c8:	2b01      	cmp	r3, #1
 80206ca:	d806      	bhi.n	80206da <etharp_output_to_arp_index+0x32>
 80206cc:	4b40      	ldr	r3, [pc, #256]	; (80207d0 <etharp_output_to_arp_index+0x128>)
 80206ce:	f240 22ee 	movw	r2, #750	; 0x2ee
 80206d2:	4940      	ldr	r1, [pc, #256]	; (80207d4 <etharp_output_to_arp_index+0x12c>)
 80206d4:	4840      	ldr	r0, [pc, #256]	; (80207d8 <etharp_output_to_arp_index+0x130>)
 80206d6:	f003 fb53 	bl	8023d80 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80206da:	79fa      	ldrb	r2, [r7, #7]
 80206dc:	493b      	ldr	r1, [pc, #236]	; (80207cc <etharp_output_to_arp_index+0x124>)
 80206de:	4613      	mov	r3, r2
 80206e0:	005b      	lsls	r3, r3, #1
 80206e2:	4413      	add	r3, r2
 80206e4:	00db      	lsls	r3, r3, #3
 80206e6:	440b      	add	r3, r1
 80206e8:	3314      	adds	r3, #20
 80206ea:	781b      	ldrb	r3, [r3, #0]
 80206ec:	2b02      	cmp	r3, #2
 80206ee:	d153      	bne.n	8020798 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80206f0:	79fa      	ldrb	r2, [r7, #7]
 80206f2:	4936      	ldr	r1, [pc, #216]	; (80207cc <etharp_output_to_arp_index+0x124>)
 80206f4:	4613      	mov	r3, r2
 80206f6:	005b      	lsls	r3, r3, #1
 80206f8:	4413      	add	r3, r2
 80206fa:	00db      	lsls	r3, r3, #3
 80206fc:	440b      	add	r3, r1
 80206fe:	3312      	adds	r3, #18
 8020700:	881b      	ldrh	r3, [r3, #0]
 8020702:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8020706:	d919      	bls.n	802073c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8020708:	79fa      	ldrb	r2, [r7, #7]
 802070a:	4613      	mov	r3, r2
 802070c:	005b      	lsls	r3, r3, #1
 802070e:	4413      	add	r3, r2
 8020710:	00db      	lsls	r3, r3, #3
 8020712:	4a2e      	ldr	r2, [pc, #184]	; (80207cc <etharp_output_to_arp_index+0x124>)
 8020714:	4413      	add	r3, r2
 8020716:	3304      	adds	r3, #4
 8020718:	4619      	mov	r1, r3
 802071a:	68f8      	ldr	r0, [r7, #12]
 802071c:	f000 fb4c 	bl	8020db8 <etharp_request>
 8020720:	4603      	mov	r3, r0
 8020722:	2b00      	cmp	r3, #0
 8020724:	d138      	bne.n	8020798 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020726:	79fa      	ldrb	r2, [r7, #7]
 8020728:	4928      	ldr	r1, [pc, #160]	; (80207cc <etharp_output_to_arp_index+0x124>)
 802072a:	4613      	mov	r3, r2
 802072c:	005b      	lsls	r3, r3, #1
 802072e:	4413      	add	r3, r2
 8020730:	00db      	lsls	r3, r3, #3
 8020732:	440b      	add	r3, r1
 8020734:	3314      	adds	r3, #20
 8020736:	2203      	movs	r2, #3
 8020738:	701a      	strb	r2, [r3, #0]
 802073a:	e02d      	b.n	8020798 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 802073c:	79fa      	ldrb	r2, [r7, #7]
 802073e:	4923      	ldr	r1, [pc, #140]	; (80207cc <etharp_output_to_arp_index+0x124>)
 8020740:	4613      	mov	r3, r2
 8020742:	005b      	lsls	r3, r3, #1
 8020744:	4413      	add	r3, r2
 8020746:	00db      	lsls	r3, r3, #3
 8020748:	440b      	add	r3, r1
 802074a:	3312      	adds	r3, #18
 802074c:	881b      	ldrh	r3, [r3, #0]
 802074e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8020752:	d321      	bcc.n	8020798 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8020754:	79fa      	ldrb	r2, [r7, #7]
 8020756:	4613      	mov	r3, r2
 8020758:	005b      	lsls	r3, r3, #1
 802075a:	4413      	add	r3, r2
 802075c:	00db      	lsls	r3, r3, #3
 802075e:	4a1b      	ldr	r2, [pc, #108]	; (80207cc <etharp_output_to_arp_index+0x124>)
 8020760:	4413      	add	r3, r2
 8020762:	1d19      	adds	r1, r3, #4
 8020764:	79fa      	ldrb	r2, [r7, #7]
 8020766:	4613      	mov	r3, r2
 8020768:	005b      	lsls	r3, r3, #1
 802076a:	4413      	add	r3, r2
 802076c:	00db      	lsls	r3, r3, #3
 802076e:	3308      	adds	r3, #8
 8020770:	4a16      	ldr	r2, [pc, #88]	; (80207cc <etharp_output_to_arp_index+0x124>)
 8020772:	4413      	add	r3, r2
 8020774:	3304      	adds	r3, #4
 8020776:	461a      	mov	r2, r3
 8020778:	68f8      	ldr	r0, [r7, #12]
 802077a:	f000 fafb 	bl	8020d74 <etharp_request_dst>
 802077e:	4603      	mov	r3, r0
 8020780:	2b00      	cmp	r3, #0
 8020782:	d109      	bne.n	8020798 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020784:	79fa      	ldrb	r2, [r7, #7]
 8020786:	4911      	ldr	r1, [pc, #68]	; (80207cc <etharp_output_to_arp_index+0x124>)
 8020788:	4613      	mov	r3, r2
 802078a:	005b      	lsls	r3, r3, #1
 802078c:	4413      	add	r3, r2
 802078e:	00db      	lsls	r3, r3, #3
 8020790:	440b      	add	r3, r1
 8020792:	3314      	adds	r3, #20
 8020794:	2203      	movs	r2, #3
 8020796:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8020798:	68fb      	ldr	r3, [r7, #12]
 802079a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 802079e:	79fa      	ldrb	r2, [r7, #7]
 80207a0:	4613      	mov	r3, r2
 80207a2:	005b      	lsls	r3, r3, #1
 80207a4:	4413      	add	r3, r2
 80207a6:	00db      	lsls	r3, r3, #3
 80207a8:	3308      	adds	r3, #8
 80207aa:	4a08      	ldr	r2, [pc, #32]	; (80207cc <etharp_output_to_arp_index+0x124>)
 80207ac:	4413      	add	r3, r2
 80207ae:	3304      	adds	r3, #4
 80207b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80207b4:	9200      	str	r2, [sp, #0]
 80207b6:	460a      	mov	r2, r1
 80207b8:	68b9      	ldr	r1, [r7, #8]
 80207ba:	68f8      	ldr	r0, [r7, #12]
 80207bc:	f001 fe40 	bl	8022440 <ethernet_output>
 80207c0:	4603      	mov	r3, r0
}
 80207c2:	4618      	mov	r0, r3
 80207c4:	3710      	adds	r7, #16
 80207c6:	46bd      	mov	sp, r7
 80207c8:	bd80      	pop	{r7, pc}
 80207ca:	bf00      	nop
 80207cc:	2000bff8 	.word	0x2000bff8
 80207d0:	0802812c 	.word	0x0802812c
 80207d4:	0802829c 	.word	0x0802829c
 80207d8:	080281a4 	.word	0x080281a4

080207dc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80207dc:	b580      	push	{r7, lr}
 80207de:	b08a      	sub	sp, #40	; 0x28
 80207e0:	af02      	add	r7, sp, #8
 80207e2:	60f8      	str	r0, [r7, #12]
 80207e4:	60b9      	str	r1, [r7, #8]
 80207e6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80207e8:	687b      	ldr	r3, [r7, #4]
 80207ea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80207ec:	68fb      	ldr	r3, [r7, #12]
 80207ee:	2b00      	cmp	r3, #0
 80207f0:	d106      	bne.n	8020800 <etharp_output+0x24>
 80207f2:	4b73      	ldr	r3, [pc, #460]	; (80209c0 <etharp_output+0x1e4>)
 80207f4:	f240 321e 	movw	r2, #798	; 0x31e
 80207f8:	4972      	ldr	r1, [pc, #456]	; (80209c4 <etharp_output+0x1e8>)
 80207fa:	4873      	ldr	r0, [pc, #460]	; (80209c8 <etharp_output+0x1ec>)
 80207fc:	f003 fac0 	bl	8023d80 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8020800:	68bb      	ldr	r3, [r7, #8]
 8020802:	2b00      	cmp	r3, #0
 8020804:	d106      	bne.n	8020814 <etharp_output+0x38>
 8020806:	4b6e      	ldr	r3, [pc, #440]	; (80209c0 <etharp_output+0x1e4>)
 8020808:	f240 321f 	movw	r2, #799	; 0x31f
 802080c:	496f      	ldr	r1, [pc, #444]	; (80209cc <etharp_output+0x1f0>)
 802080e:	486e      	ldr	r0, [pc, #440]	; (80209c8 <etharp_output+0x1ec>)
 8020810:	f003 fab6 	bl	8023d80 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8020814:	687b      	ldr	r3, [r7, #4]
 8020816:	2b00      	cmp	r3, #0
 8020818:	d106      	bne.n	8020828 <etharp_output+0x4c>
 802081a:	4b69      	ldr	r3, [pc, #420]	; (80209c0 <etharp_output+0x1e4>)
 802081c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8020820:	496b      	ldr	r1, [pc, #428]	; (80209d0 <etharp_output+0x1f4>)
 8020822:	4869      	ldr	r0, [pc, #420]	; (80209c8 <etharp_output+0x1ec>)
 8020824:	f003 faac 	bl	8023d80 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	681b      	ldr	r3, [r3, #0]
 802082c:	68f9      	ldr	r1, [r7, #12]
 802082e:	4618      	mov	r0, r3
 8020830:	f000 fef8 	bl	8021624 <ip4_addr_isbroadcast_u32>
 8020834:	4603      	mov	r3, r0
 8020836:	2b00      	cmp	r3, #0
 8020838:	d002      	beq.n	8020840 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 802083a:	4b66      	ldr	r3, [pc, #408]	; (80209d4 <etharp_output+0x1f8>)
 802083c:	61fb      	str	r3, [r7, #28]
 802083e:	e0af      	b.n	80209a0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8020840:	687b      	ldr	r3, [r7, #4]
 8020842:	681b      	ldr	r3, [r3, #0]
 8020844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020848:	2be0      	cmp	r3, #224	; 0xe0
 802084a:	d118      	bne.n	802087e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 802084c:	2301      	movs	r3, #1
 802084e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8020850:	2300      	movs	r3, #0
 8020852:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8020854:	235e      	movs	r3, #94	; 0x5e
 8020856:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8020858:	687b      	ldr	r3, [r7, #4]
 802085a:	3301      	adds	r3, #1
 802085c:	781b      	ldrb	r3, [r3, #0]
 802085e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020862:	b2db      	uxtb	r3, r3
 8020864:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8020866:	687b      	ldr	r3, [r7, #4]
 8020868:	3302      	adds	r3, #2
 802086a:	781b      	ldrb	r3, [r3, #0]
 802086c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802086e:	687b      	ldr	r3, [r7, #4]
 8020870:	3303      	adds	r3, #3
 8020872:	781b      	ldrb	r3, [r3, #0]
 8020874:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8020876:	f107 0310 	add.w	r3, r7, #16
 802087a:	61fb      	str	r3, [r7, #28]
 802087c:	e090      	b.n	80209a0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802087e:	687b      	ldr	r3, [r7, #4]
 8020880:	681a      	ldr	r2, [r3, #0]
 8020882:	68fb      	ldr	r3, [r7, #12]
 8020884:	3304      	adds	r3, #4
 8020886:	681b      	ldr	r3, [r3, #0]
 8020888:	405a      	eors	r2, r3
 802088a:	68fb      	ldr	r3, [r7, #12]
 802088c:	3308      	adds	r3, #8
 802088e:	681b      	ldr	r3, [r3, #0]
 8020890:	4013      	ands	r3, r2
 8020892:	2b00      	cmp	r3, #0
 8020894:	d012      	beq.n	80208bc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8020896:	687b      	ldr	r3, [r7, #4]
 8020898:	681b      	ldr	r3, [r3, #0]
 802089a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802089c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80208a0:	4293      	cmp	r3, r2
 80208a2:	d00b      	beq.n	80208bc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80208a4:	68fb      	ldr	r3, [r7, #12]
 80208a6:	330c      	adds	r3, #12
 80208a8:	681b      	ldr	r3, [r3, #0]
 80208aa:	2b00      	cmp	r3, #0
 80208ac:	d003      	beq.n	80208b6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80208ae:	68fb      	ldr	r3, [r7, #12]
 80208b0:	330c      	adds	r3, #12
 80208b2:	61bb      	str	r3, [r7, #24]
 80208b4:	e002      	b.n	80208bc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80208b6:	f06f 0303 	mvn.w	r3, #3
 80208ba:	e07d      	b.n	80209b8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80208bc:	4b46      	ldr	r3, [pc, #280]	; (80209d8 <etharp_output+0x1fc>)
 80208be:	781b      	ldrb	r3, [r3, #0]
 80208c0:	4619      	mov	r1, r3
 80208c2:	4a46      	ldr	r2, [pc, #280]	; (80209dc <etharp_output+0x200>)
 80208c4:	460b      	mov	r3, r1
 80208c6:	005b      	lsls	r3, r3, #1
 80208c8:	440b      	add	r3, r1
 80208ca:	00db      	lsls	r3, r3, #3
 80208cc:	4413      	add	r3, r2
 80208ce:	3314      	adds	r3, #20
 80208d0:	781b      	ldrb	r3, [r3, #0]
 80208d2:	2b01      	cmp	r3, #1
 80208d4:	d925      	bls.n	8020922 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80208d6:	4b40      	ldr	r3, [pc, #256]	; (80209d8 <etharp_output+0x1fc>)
 80208d8:	781b      	ldrb	r3, [r3, #0]
 80208da:	4619      	mov	r1, r3
 80208dc:	4a3f      	ldr	r2, [pc, #252]	; (80209dc <etharp_output+0x200>)
 80208de:	460b      	mov	r3, r1
 80208e0:	005b      	lsls	r3, r3, #1
 80208e2:	440b      	add	r3, r1
 80208e4:	00db      	lsls	r3, r3, #3
 80208e6:	4413      	add	r3, r2
 80208e8:	3308      	adds	r3, #8
 80208ea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80208ec:	68fa      	ldr	r2, [r7, #12]
 80208ee:	429a      	cmp	r2, r3
 80208f0:	d117      	bne.n	8020922 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80208f2:	69bb      	ldr	r3, [r7, #24]
 80208f4:	681a      	ldr	r2, [r3, #0]
 80208f6:	4b38      	ldr	r3, [pc, #224]	; (80209d8 <etharp_output+0x1fc>)
 80208f8:	781b      	ldrb	r3, [r3, #0]
 80208fa:	4618      	mov	r0, r3
 80208fc:	4937      	ldr	r1, [pc, #220]	; (80209dc <etharp_output+0x200>)
 80208fe:	4603      	mov	r3, r0
 8020900:	005b      	lsls	r3, r3, #1
 8020902:	4403      	add	r3, r0
 8020904:	00db      	lsls	r3, r3, #3
 8020906:	440b      	add	r3, r1
 8020908:	3304      	adds	r3, #4
 802090a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 802090c:	429a      	cmp	r2, r3
 802090e:	d108      	bne.n	8020922 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8020910:	4b31      	ldr	r3, [pc, #196]	; (80209d8 <etharp_output+0x1fc>)
 8020912:	781b      	ldrb	r3, [r3, #0]
 8020914:	461a      	mov	r2, r3
 8020916:	68b9      	ldr	r1, [r7, #8]
 8020918:	68f8      	ldr	r0, [r7, #12]
 802091a:	f7ff fec5 	bl	80206a8 <etharp_output_to_arp_index>
 802091e:	4603      	mov	r3, r0
 8020920:	e04a      	b.n	80209b8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020922:	2300      	movs	r3, #0
 8020924:	75fb      	strb	r3, [r7, #23]
 8020926:	e031      	b.n	802098c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020928:	7dfa      	ldrb	r2, [r7, #23]
 802092a:	492c      	ldr	r1, [pc, #176]	; (80209dc <etharp_output+0x200>)
 802092c:	4613      	mov	r3, r2
 802092e:	005b      	lsls	r3, r3, #1
 8020930:	4413      	add	r3, r2
 8020932:	00db      	lsls	r3, r3, #3
 8020934:	440b      	add	r3, r1
 8020936:	3314      	adds	r3, #20
 8020938:	781b      	ldrb	r3, [r3, #0]
 802093a:	2b01      	cmp	r3, #1
 802093c:	d923      	bls.n	8020986 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 802093e:	7dfa      	ldrb	r2, [r7, #23]
 8020940:	4926      	ldr	r1, [pc, #152]	; (80209dc <etharp_output+0x200>)
 8020942:	4613      	mov	r3, r2
 8020944:	005b      	lsls	r3, r3, #1
 8020946:	4413      	add	r3, r2
 8020948:	00db      	lsls	r3, r3, #3
 802094a:	440b      	add	r3, r1
 802094c:	3308      	adds	r3, #8
 802094e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020950:	68fa      	ldr	r2, [r7, #12]
 8020952:	429a      	cmp	r2, r3
 8020954:	d117      	bne.n	8020986 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8020956:	69bb      	ldr	r3, [r7, #24]
 8020958:	6819      	ldr	r1, [r3, #0]
 802095a:	7dfa      	ldrb	r2, [r7, #23]
 802095c:	481f      	ldr	r0, [pc, #124]	; (80209dc <etharp_output+0x200>)
 802095e:	4613      	mov	r3, r2
 8020960:	005b      	lsls	r3, r3, #1
 8020962:	4413      	add	r3, r2
 8020964:	00db      	lsls	r3, r3, #3
 8020966:	4403      	add	r3, r0
 8020968:	3304      	adds	r3, #4
 802096a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 802096c:	4299      	cmp	r1, r3
 802096e:	d10a      	bne.n	8020986 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8020970:	4a19      	ldr	r2, [pc, #100]	; (80209d8 <etharp_output+0x1fc>)
 8020972:	7dfb      	ldrb	r3, [r7, #23]
 8020974:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8020976:	7dfb      	ldrb	r3, [r7, #23]
 8020978:	461a      	mov	r2, r3
 802097a:	68b9      	ldr	r1, [r7, #8]
 802097c:	68f8      	ldr	r0, [r7, #12]
 802097e:	f7ff fe93 	bl	80206a8 <etharp_output_to_arp_index>
 8020982:	4603      	mov	r3, r0
 8020984:	e018      	b.n	80209b8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020986:	7dfb      	ldrb	r3, [r7, #23]
 8020988:	3301      	adds	r3, #1
 802098a:	75fb      	strb	r3, [r7, #23]
 802098c:	7dfb      	ldrb	r3, [r7, #23]
 802098e:	2b09      	cmp	r3, #9
 8020990:	d9ca      	bls.n	8020928 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8020992:	68ba      	ldr	r2, [r7, #8]
 8020994:	69b9      	ldr	r1, [r7, #24]
 8020996:	68f8      	ldr	r0, [r7, #12]
 8020998:	f000 f822 	bl	80209e0 <etharp_query>
 802099c:	4603      	mov	r3, r0
 802099e:	e00b      	b.n	80209b8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80209a0:	68fb      	ldr	r3, [r7, #12]
 80209a2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80209a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80209aa:	9300      	str	r3, [sp, #0]
 80209ac:	69fb      	ldr	r3, [r7, #28]
 80209ae:	68b9      	ldr	r1, [r7, #8]
 80209b0:	68f8      	ldr	r0, [r7, #12]
 80209b2:	f001 fd45 	bl	8022440 <ethernet_output>
 80209b6:	4603      	mov	r3, r0
}
 80209b8:	4618      	mov	r0, r3
 80209ba:	3720      	adds	r7, #32
 80209bc:	46bd      	mov	sp, r7
 80209be:	bd80      	pop	{r7, pc}
 80209c0:	0802812c 	.word	0x0802812c
 80209c4:	0802827c 	.word	0x0802827c
 80209c8:	080281a4 	.word	0x080281a4
 80209cc:	080282cc 	.word	0x080282cc
 80209d0:	0802826c 	.word	0x0802826c
 80209d4:	0802897c 	.word	0x0802897c
 80209d8:	2000c0e8 	.word	0x2000c0e8
 80209dc:	2000bff8 	.word	0x2000bff8

080209e0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80209e0:	b580      	push	{r7, lr}
 80209e2:	b08c      	sub	sp, #48	; 0x30
 80209e4:	af02      	add	r7, sp, #8
 80209e6:	60f8      	str	r0, [r7, #12]
 80209e8:	60b9      	str	r1, [r7, #8]
 80209ea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80209ec:	68fb      	ldr	r3, [r7, #12]
 80209ee:	3326      	adds	r3, #38	; 0x26
 80209f0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80209f2:	23ff      	movs	r3, #255	; 0xff
 80209f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80209f8:	2300      	movs	r3, #0
 80209fa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80209fc:	68bb      	ldr	r3, [r7, #8]
 80209fe:	681b      	ldr	r3, [r3, #0]
 8020a00:	68f9      	ldr	r1, [r7, #12]
 8020a02:	4618      	mov	r0, r3
 8020a04:	f000 fe0e 	bl	8021624 <ip4_addr_isbroadcast_u32>
 8020a08:	4603      	mov	r3, r0
 8020a0a:	2b00      	cmp	r3, #0
 8020a0c:	d10c      	bne.n	8020a28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020a0e:	68bb      	ldr	r3, [r7, #8]
 8020a10:	681b      	ldr	r3, [r3, #0]
 8020a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020a16:	2be0      	cmp	r3, #224	; 0xe0
 8020a18:	d006      	beq.n	8020a28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020a1a:	68bb      	ldr	r3, [r7, #8]
 8020a1c:	2b00      	cmp	r3, #0
 8020a1e:	d003      	beq.n	8020a28 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8020a20:	68bb      	ldr	r3, [r7, #8]
 8020a22:	681b      	ldr	r3, [r3, #0]
 8020a24:	2b00      	cmp	r3, #0
 8020a26:	d102      	bne.n	8020a2e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8020a28:	f06f 030f 	mvn.w	r3, #15
 8020a2c:	e101      	b.n	8020c32 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8020a2e:	68fa      	ldr	r2, [r7, #12]
 8020a30:	2101      	movs	r1, #1
 8020a32:	68b8      	ldr	r0, [r7, #8]
 8020a34:	f7ff fb60 	bl	80200f8 <etharp_find_entry>
 8020a38:	4603      	mov	r3, r0
 8020a3a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8020a3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020a40:	2b00      	cmp	r3, #0
 8020a42:	da02      	bge.n	8020a4a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8020a44:	8a7b      	ldrh	r3, [r7, #18]
 8020a46:	b25b      	sxtb	r3, r3
 8020a48:	e0f3      	b.n	8020c32 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8020a4a:	8a7b      	ldrh	r3, [r7, #18]
 8020a4c:	2b7e      	cmp	r3, #126	; 0x7e
 8020a4e:	d906      	bls.n	8020a5e <etharp_query+0x7e>
 8020a50:	4b7a      	ldr	r3, [pc, #488]	; (8020c3c <etharp_query+0x25c>)
 8020a52:	f240 32c1 	movw	r2, #961	; 0x3c1
 8020a56:	497a      	ldr	r1, [pc, #488]	; (8020c40 <etharp_query+0x260>)
 8020a58:	487a      	ldr	r0, [pc, #488]	; (8020c44 <etharp_query+0x264>)
 8020a5a:	f003 f991 	bl	8023d80 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8020a5e:	8a7b      	ldrh	r3, [r7, #18]
 8020a60:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8020a62:	7c7a      	ldrb	r2, [r7, #17]
 8020a64:	4978      	ldr	r1, [pc, #480]	; (8020c48 <etharp_query+0x268>)
 8020a66:	4613      	mov	r3, r2
 8020a68:	005b      	lsls	r3, r3, #1
 8020a6a:	4413      	add	r3, r2
 8020a6c:	00db      	lsls	r3, r3, #3
 8020a6e:	440b      	add	r3, r1
 8020a70:	3314      	adds	r3, #20
 8020a72:	781b      	ldrb	r3, [r3, #0]
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d115      	bne.n	8020aa4 <etharp_query+0xc4>
    is_new_entry = 1;
 8020a78:	2301      	movs	r3, #1
 8020a7a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8020a7c:	7c7a      	ldrb	r2, [r7, #17]
 8020a7e:	4972      	ldr	r1, [pc, #456]	; (8020c48 <etharp_query+0x268>)
 8020a80:	4613      	mov	r3, r2
 8020a82:	005b      	lsls	r3, r3, #1
 8020a84:	4413      	add	r3, r2
 8020a86:	00db      	lsls	r3, r3, #3
 8020a88:	440b      	add	r3, r1
 8020a8a:	3314      	adds	r3, #20
 8020a8c:	2201      	movs	r2, #1
 8020a8e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8020a90:	7c7a      	ldrb	r2, [r7, #17]
 8020a92:	496d      	ldr	r1, [pc, #436]	; (8020c48 <etharp_query+0x268>)
 8020a94:	4613      	mov	r3, r2
 8020a96:	005b      	lsls	r3, r3, #1
 8020a98:	4413      	add	r3, r2
 8020a9a:	00db      	lsls	r3, r3, #3
 8020a9c:	440b      	add	r3, r1
 8020a9e:	3308      	adds	r3, #8
 8020aa0:	68fa      	ldr	r2, [r7, #12]
 8020aa2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8020aa4:	7c7a      	ldrb	r2, [r7, #17]
 8020aa6:	4968      	ldr	r1, [pc, #416]	; (8020c48 <etharp_query+0x268>)
 8020aa8:	4613      	mov	r3, r2
 8020aaa:	005b      	lsls	r3, r3, #1
 8020aac:	4413      	add	r3, r2
 8020aae:	00db      	lsls	r3, r3, #3
 8020ab0:	440b      	add	r3, r1
 8020ab2:	3314      	adds	r3, #20
 8020ab4:	781b      	ldrb	r3, [r3, #0]
 8020ab6:	2b01      	cmp	r3, #1
 8020ab8:	d011      	beq.n	8020ade <etharp_query+0xfe>
 8020aba:	7c7a      	ldrb	r2, [r7, #17]
 8020abc:	4962      	ldr	r1, [pc, #392]	; (8020c48 <etharp_query+0x268>)
 8020abe:	4613      	mov	r3, r2
 8020ac0:	005b      	lsls	r3, r3, #1
 8020ac2:	4413      	add	r3, r2
 8020ac4:	00db      	lsls	r3, r3, #3
 8020ac6:	440b      	add	r3, r1
 8020ac8:	3314      	adds	r3, #20
 8020aca:	781b      	ldrb	r3, [r3, #0]
 8020acc:	2b01      	cmp	r3, #1
 8020ace:	d806      	bhi.n	8020ade <etharp_query+0xfe>
 8020ad0:	4b5a      	ldr	r3, [pc, #360]	; (8020c3c <etharp_query+0x25c>)
 8020ad2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8020ad6:	495d      	ldr	r1, [pc, #372]	; (8020c4c <etharp_query+0x26c>)
 8020ad8:	485a      	ldr	r0, [pc, #360]	; (8020c44 <etharp_query+0x264>)
 8020ada:	f003 f951 	bl	8023d80 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8020ade:	6a3b      	ldr	r3, [r7, #32]
 8020ae0:	2b00      	cmp	r3, #0
 8020ae2:	d102      	bne.n	8020aea <etharp_query+0x10a>
 8020ae4:	687b      	ldr	r3, [r7, #4]
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d10c      	bne.n	8020b04 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8020aea:	68b9      	ldr	r1, [r7, #8]
 8020aec:	68f8      	ldr	r0, [r7, #12]
 8020aee:	f000 f963 	bl	8020db8 <etharp_request>
 8020af2:	4603      	mov	r3, r0
 8020af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8020af8:	687b      	ldr	r3, [r7, #4]
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	d102      	bne.n	8020b04 <etharp_query+0x124>
      return result;
 8020afe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8020b02:	e096      	b.n	8020c32 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	2b00      	cmp	r3, #0
 8020b08:	d106      	bne.n	8020b18 <etharp_query+0x138>
 8020b0a:	4b4c      	ldr	r3, [pc, #304]	; (8020c3c <etharp_query+0x25c>)
 8020b0c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8020b10:	494f      	ldr	r1, [pc, #316]	; (8020c50 <etharp_query+0x270>)
 8020b12:	484c      	ldr	r0, [pc, #304]	; (8020c44 <etharp_query+0x264>)
 8020b14:	f003 f934 	bl	8023d80 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8020b18:	7c7a      	ldrb	r2, [r7, #17]
 8020b1a:	494b      	ldr	r1, [pc, #300]	; (8020c48 <etharp_query+0x268>)
 8020b1c:	4613      	mov	r3, r2
 8020b1e:	005b      	lsls	r3, r3, #1
 8020b20:	4413      	add	r3, r2
 8020b22:	00db      	lsls	r3, r3, #3
 8020b24:	440b      	add	r3, r1
 8020b26:	3314      	adds	r3, #20
 8020b28:	781b      	ldrb	r3, [r3, #0]
 8020b2a:	2b01      	cmp	r3, #1
 8020b2c:	d917      	bls.n	8020b5e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8020b2e:	4a49      	ldr	r2, [pc, #292]	; (8020c54 <etharp_query+0x274>)
 8020b30:	7c7b      	ldrb	r3, [r7, #17]
 8020b32:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8020b34:	7c7a      	ldrb	r2, [r7, #17]
 8020b36:	4613      	mov	r3, r2
 8020b38:	005b      	lsls	r3, r3, #1
 8020b3a:	4413      	add	r3, r2
 8020b3c:	00db      	lsls	r3, r3, #3
 8020b3e:	3308      	adds	r3, #8
 8020b40:	4a41      	ldr	r2, [pc, #260]	; (8020c48 <etharp_query+0x268>)
 8020b42:	4413      	add	r3, r2
 8020b44:	3304      	adds	r3, #4
 8020b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020b4a:	9200      	str	r2, [sp, #0]
 8020b4c:	697a      	ldr	r2, [r7, #20]
 8020b4e:	6879      	ldr	r1, [r7, #4]
 8020b50:	68f8      	ldr	r0, [r7, #12]
 8020b52:	f001 fc75 	bl	8022440 <ethernet_output>
 8020b56:	4603      	mov	r3, r0
 8020b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020b5c:	e067      	b.n	8020c2e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8020b5e:	7c7a      	ldrb	r2, [r7, #17]
 8020b60:	4939      	ldr	r1, [pc, #228]	; (8020c48 <etharp_query+0x268>)
 8020b62:	4613      	mov	r3, r2
 8020b64:	005b      	lsls	r3, r3, #1
 8020b66:	4413      	add	r3, r2
 8020b68:	00db      	lsls	r3, r3, #3
 8020b6a:	440b      	add	r3, r1
 8020b6c:	3314      	adds	r3, #20
 8020b6e:	781b      	ldrb	r3, [r3, #0]
 8020b70:	2b01      	cmp	r3, #1
 8020b72:	d15c      	bne.n	8020c2e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8020b74:	2300      	movs	r3, #0
 8020b76:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8020b78:	687b      	ldr	r3, [r7, #4]
 8020b7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020b7c:	e01c      	b.n	8020bb8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8020b7e:	69fb      	ldr	r3, [r7, #28]
 8020b80:	895a      	ldrh	r2, [r3, #10]
 8020b82:	69fb      	ldr	r3, [r7, #28]
 8020b84:	891b      	ldrh	r3, [r3, #8]
 8020b86:	429a      	cmp	r2, r3
 8020b88:	d10a      	bne.n	8020ba0 <etharp_query+0x1c0>
 8020b8a:	69fb      	ldr	r3, [r7, #28]
 8020b8c:	681b      	ldr	r3, [r3, #0]
 8020b8e:	2b00      	cmp	r3, #0
 8020b90:	d006      	beq.n	8020ba0 <etharp_query+0x1c0>
 8020b92:	4b2a      	ldr	r3, [pc, #168]	; (8020c3c <etharp_query+0x25c>)
 8020b94:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8020b98:	492f      	ldr	r1, [pc, #188]	; (8020c58 <etharp_query+0x278>)
 8020b9a:	482a      	ldr	r0, [pc, #168]	; (8020c44 <etharp_query+0x264>)
 8020b9c:	f003 f8f0 	bl	8023d80 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8020ba0:	69fb      	ldr	r3, [r7, #28]
 8020ba2:	7b1b      	ldrb	r3, [r3, #12]
 8020ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020ba8:	2b00      	cmp	r3, #0
 8020baa:	d002      	beq.n	8020bb2 <etharp_query+0x1d2>
        copy_needed = 1;
 8020bac:	2301      	movs	r3, #1
 8020bae:	61bb      	str	r3, [r7, #24]
        break;
 8020bb0:	e005      	b.n	8020bbe <etharp_query+0x1de>
      }
      p = p->next;
 8020bb2:	69fb      	ldr	r3, [r7, #28]
 8020bb4:	681b      	ldr	r3, [r3, #0]
 8020bb6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020bb8:	69fb      	ldr	r3, [r7, #28]
 8020bba:	2b00      	cmp	r3, #0
 8020bbc:	d1df      	bne.n	8020b7e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8020bbe:	69bb      	ldr	r3, [r7, #24]
 8020bc0:	2b00      	cmp	r3, #0
 8020bc2:	d007      	beq.n	8020bd4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8020bc4:	687a      	ldr	r2, [r7, #4]
 8020bc6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8020bca:	200e      	movs	r0, #14
 8020bcc:	f7f8 f918 	bl	8018e00 <pbuf_clone>
 8020bd0:	61f8      	str	r0, [r7, #28]
 8020bd2:	e004      	b.n	8020bde <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8020bd4:	687b      	ldr	r3, [r7, #4]
 8020bd6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8020bd8:	69f8      	ldr	r0, [r7, #28]
 8020bda:	f7f7 ff3f 	bl	8018a5c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8020bde:	69fb      	ldr	r3, [r7, #28]
 8020be0:	2b00      	cmp	r3, #0
 8020be2:	d021      	beq.n	8020c28 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8020be4:	7c7a      	ldrb	r2, [r7, #17]
 8020be6:	4918      	ldr	r1, [pc, #96]	; (8020c48 <etharp_query+0x268>)
 8020be8:	4613      	mov	r3, r2
 8020bea:	005b      	lsls	r3, r3, #1
 8020bec:	4413      	add	r3, r2
 8020bee:	00db      	lsls	r3, r3, #3
 8020bf0:	440b      	add	r3, r1
 8020bf2:	681b      	ldr	r3, [r3, #0]
 8020bf4:	2b00      	cmp	r3, #0
 8020bf6:	d00a      	beq.n	8020c0e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8020bf8:	7c7a      	ldrb	r2, [r7, #17]
 8020bfa:	4913      	ldr	r1, [pc, #76]	; (8020c48 <etharp_query+0x268>)
 8020bfc:	4613      	mov	r3, r2
 8020bfe:	005b      	lsls	r3, r3, #1
 8020c00:	4413      	add	r3, r2
 8020c02:	00db      	lsls	r3, r3, #3
 8020c04:	440b      	add	r3, r1
 8020c06:	681b      	ldr	r3, [r3, #0]
 8020c08:	4618      	mov	r0, r3
 8020c0a:	f7f7 fe81 	bl	8018910 <pbuf_free>
      }
      arp_table[i].q = p;
 8020c0e:	7c7a      	ldrb	r2, [r7, #17]
 8020c10:	490d      	ldr	r1, [pc, #52]	; (8020c48 <etharp_query+0x268>)
 8020c12:	4613      	mov	r3, r2
 8020c14:	005b      	lsls	r3, r3, #1
 8020c16:	4413      	add	r3, r2
 8020c18:	00db      	lsls	r3, r3, #3
 8020c1a:	440b      	add	r3, r1
 8020c1c:	69fa      	ldr	r2, [r7, #28]
 8020c1e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8020c20:	2300      	movs	r3, #0
 8020c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020c26:	e002      	b.n	8020c2e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8020c28:	23ff      	movs	r3, #255	; 0xff
 8020c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8020c2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8020c32:	4618      	mov	r0, r3
 8020c34:	3728      	adds	r7, #40	; 0x28
 8020c36:	46bd      	mov	sp, r7
 8020c38:	bd80      	pop	{r7, pc}
 8020c3a:	bf00      	nop
 8020c3c:	0802812c 	.word	0x0802812c
 8020c40:	080282d8 	.word	0x080282d8
 8020c44:	080281a4 	.word	0x080281a4
 8020c48:	2000bff8 	.word	0x2000bff8
 8020c4c:	080282e8 	.word	0x080282e8
 8020c50:	080282cc 	.word	0x080282cc
 8020c54:	2000c0e8 	.word	0x2000c0e8
 8020c58:	08028310 	.word	0x08028310

08020c5c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020c5c:	b580      	push	{r7, lr}
 8020c5e:	b08a      	sub	sp, #40	; 0x28
 8020c60:	af02      	add	r7, sp, #8
 8020c62:	60f8      	str	r0, [r7, #12]
 8020c64:	60b9      	str	r1, [r7, #8]
 8020c66:	607a      	str	r2, [r7, #4]
 8020c68:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8020c6a:	2300      	movs	r3, #0
 8020c6c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020c6e:	68fb      	ldr	r3, [r7, #12]
 8020c70:	2b00      	cmp	r3, #0
 8020c72:	d106      	bne.n	8020c82 <etharp_raw+0x26>
 8020c74:	4b3a      	ldr	r3, [pc, #232]	; (8020d60 <etharp_raw+0x104>)
 8020c76:	f240 4257 	movw	r2, #1111	; 0x457
 8020c7a:	493a      	ldr	r1, [pc, #232]	; (8020d64 <etharp_raw+0x108>)
 8020c7c:	483a      	ldr	r0, [pc, #232]	; (8020d68 <etharp_raw+0x10c>)
 8020c7e:	f003 f87f 	bl	8023d80 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8020c82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020c86:	211c      	movs	r1, #28
 8020c88:	200e      	movs	r0, #14
 8020c8a:	f7f7 fb5d 	bl	8018348 <pbuf_alloc>
 8020c8e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8020c90:	69bb      	ldr	r3, [r7, #24]
 8020c92:	2b00      	cmp	r3, #0
 8020c94:	d102      	bne.n	8020c9c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8020c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020c9a:	e05d      	b.n	8020d58 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8020c9c:	69bb      	ldr	r3, [r7, #24]
 8020c9e:	895b      	ldrh	r3, [r3, #10]
 8020ca0:	2b1b      	cmp	r3, #27
 8020ca2:	d806      	bhi.n	8020cb2 <etharp_raw+0x56>
 8020ca4:	4b2e      	ldr	r3, [pc, #184]	; (8020d60 <etharp_raw+0x104>)
 8020ca6:	f240 4262 	movw	r2, #1122	; 0x462
 8020caa:	4930      	ldr	r1, [pc, #192]	; (8020d6c <etharp_raw+0x110>)
 8020cac:	482e      	ldr	r0, [pc, #184]	; (8020d68 <etharp_raw+0x10c>)
 8020cae:	f003 f867 	bl	8023d80 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8020cb2:	69bb      	ldr	r3, [r7, #24]
 8020cb4:	685b      	ldr	r3, [r3, #4]
 8020cb6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8020cb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8020cba:	4618      	mov	r0, r3
 8020cbc:	f7f6 fa36 	bl	801712c <lwip_htons>
 8020cc0:	4603      	mov	r3, r0
 8020cc2:	461a      	mov	r2, r3
 8020cc4:	697b      	ldr	r3, [r7, #20]
 8020cc6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8020cc8:	68fb      	ldr	r3, [r7, #12]
 8020cca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8020cce:	2b06      	cmp	r3, #6
 8020cd0:	d006      	beq.n	8020ce0 <etharp_raw+0x84>
 8020cd2:	4b23      	ldr	r3, [pc, #140]	; (8020d60 <etharp_raw+0x104>)
 8020cd4:	f240 4269 	movw	r2, #1129	; 0x469
 8020cd8:	4925      	ldr	r1, [pc, #148]	; (8020d70 <etharp_raw+0x114>)
 8020cda:	4823      	ldr	r0, [pc, #140]	; (8020d68 <etharp_raw+0x10c>)
 8020cdc:	f003 f850 	bl	8023d80 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8020ce0:	697b      	ldr	r3, [r7, #20]
 8020ce2:	3308      	adds	r3, #8
 8020ce4:	2206      	movs	r2, #6
 8020ce6:	6839      	ldr	r1, [r7, #0]
 8020ce8:	4618      	mov	r0, r3
 8020cea:	f002 ff39 	bl	8023b60 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8020cee:	697b      	ldr	r3, [r7, #20]
 8020cf0:	3312      	adds	r3, #18
 8020cf2:	2206      	movs	r2, #6
 8020cf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020cf6:	4618      	mov	r0, r3
 8020cf8:	f002 ff32 	bl	8023b60 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8020cfc:	697b      	ldr	r3, [r7, #20]
 8020cfe:	330e      	adds	r3, #14
 8020d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020d02:	6812      	ldr	r2, [r2, #0]
 8020d04:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8020d06:	697b      	ldr	r3, [r7, #20]
 8020d08:	3318      	adds	r3, #24
 8020d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020d0c:	6812      	ldr	r2, [r2, #0]
 8020d0e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8020d10:	697b      	ldr	r3, [r7, #20]
 8020d12:	2200      	movs	r2, #0
 8020d14:	701a      	strb	r2, [r3, #0]
 8020d16:	2200      	movs	r2, #0
 8020d18:	f042 0201 	orr.w	r2, r2, #1
 8020d1c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8020d1e:	697b      	ldr	r3, [r7, #20]
 8020d20:	2200      	movs	r2, #0
 8020d22:	f042 0208 	orr.w	r2, r2, #8
 8020d26:	709a      	strb	r2, [r3, #2]
 8020d28:	2200      	movs	r2, #0
 8020d2a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8020d2c:	697b      	ldr	r3, [r7, #20]
 8020d2e:	2206      	movs	r2, #6
 8020d30:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8020d32:	697b      	ldr	r3, [r7, #20]
 8020d34:	2204      	movs	r2, #4
 8020d36:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8020d38:	f640 0306 	movw	r3, #2054	; 0x806
 8020d3c:	9300      	str	r3, [sp, #0]
 8020d3e:	687b      	ldr	r3, [r7, #4]
 8020d40:	68ba      	ldr	r2, [r7, #8]
 8020d42:	69b9      	ldr	r1, [r7, #24]
 8020d44:	68f8      	ldr	r0, [r7, #12]
 8020d46:	f001 fb7b 	bl	8022440 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8020d4a:	69b8      	ldr	r0, [r7, #24]
 8020d4c:	f7f7 fde0 	bl	8018910 <pbuf_free>
  p = NULL;
 8020d50:	2300      	movs	r3, #0
 8020d52:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8020d54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020d58:	4618      	mov	r0, r3
 8020d5a:	3720      	adds	r7, #32
 8020d5c:	46bd      	mov	sp, r7
 8020d5e:	bd80      	pop	{r7, pc}
 8020d60:	0802812c 	.word	0x0802812c
 8020d64:	0802827c 	.word	0x0802827c
 8020d68:	080281a4 	.word	0x080281a4
 8020d6c:	0802832c 	.word	0x0802832c
 8020d70:	08028360 	.word	0x08028360

08020d74 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8020d74:	b580      	push	{r7, lr}
 8020d76:	b088      	sub	sp, #32
 8020d78:	af04      	add	r7, sp, #16
 8020d7a:	60f8      	str	r0, [r7, #12]
 8020d7c:	60b9      	str	r1, [r7, #8]
 8020d7e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020d80:	68fb      	ldr	r3, [r7, #12]
 8020d82:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8020d86:	68fb      	ldr	r3, [r7, #12]
 8020d88:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8020d8c:	68fb      	ldr	r3, [r7, #12]
 8020d8e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020d90:	2201      	movs	r2, #1
 8020d92:	9203      	str	r2, [sp, #12]
 8020d94:	68ba      	ldr	r2, [r7, #8]
 8020d96:	9202      	str	r2, [sp, #8]
 8020d98:	4a06      	ldr	r2, [pc, #24]	; (8020db4 <etharp_request_dst+0x40>)
 8020d9a:	9201      	str	r2, [sp, #4]
 8020d9c:	9300      	str	r3, [sp, #0]
 8020d9e:	4603      	mov	r3, r0
 8020da0:	687a      	ldr	r2, [r7, #4]
 8020da2:	68f8      	ldr	r0, [r7, #12]
 8020da4:	f7ff ff5a 	bl	8020c5c <etharp_raw>
 8020da8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8020daa:	4618      	mov	r0, r3
 8020dac:	3710      	adds	r7, #16
 8020dae:	46bd      	mov	sp, r7
 8020db0:	bd80      	pop	{r7, pc}
 8020db2:	bf00      	nop
 8020db4:	08028984 	.word	0x08028984

08020db8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8020db8:	b580      	push	{r7, lr}
 8020dba:	b082      	sub	sp, #8
 8020dbc:	af00      	add	r7, sp, #0
 8020dbe:	6078      	str	r0, [r7, #4]
 8020dc0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8020dc2:	4a05      	ldr	r2, [pc, #20]	; (8020dd8 <etharp_request+0x20>)
 8020dc4:	6839      	ldr	r1, [r7, #0]
 8020dc6:	6878      	ldr	r0, [r7, #4]
 8020dc8:	f7ff ffd4 	bl	8020d74 <etharp_request_dst>
 8020dcc:	4603      	mov	r3, r0
}
 8020dce:	4618      	mov	r0, r3
 8020dd0:	3708      	adds	r7, #8
 8020dd2:	46bd      	mov	sp, r7
 8020dd4:	bd80      	pop	{r7, pc}
 8020dd6:	bf00      	nop
 8020dd8:	0802897c 	.word	0x0802897c

08020ddc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8020ddc:	b580      	push	{r7, lr}
 8020dde:	b08e      	sub	sp, #56	; 0x38
 8020de0:	af04      	add	r7, sp, #16
 8020de2:	6078      	str	r0, [r7, #4]
 8020de4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8020de6:	4b79      	ldr	r3, [pc, #484]	; (8020fcc <icmp_input+0x1f0>)
 8020de8:	689b      	ldr	r3, [r3, #8]
 8020dea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8020dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020dee:	781b      	ldrb	r3, [r3, #0]
 8020df0:	f003 030f 	and.w	r3, r3, #15
 8020df4:	b2db      	uxtb	r3, r3
 8020df6:	009b      	lsls	r3, r3, #2
 8020df8:	b2db      	uxtb	r3, r3
 8020dfa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8020dfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020dfe:	2b13      	cmp	r3, #19
 8020e00:	f240 80cd 	bls.w	8020f9e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8020e04:	687b      	ldr	r3, [r7, #4]
 8020e06:	895b      	ldrh	r3, [r3, #10]
 8020e08:	2b03      	cmp	r3, #3
 8020e0a:	f240 80ca 	bls.w	8020fa2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	685b      	ldr	r3, [r3, #4]
 8020e12:	781b      	ldrb	r3, [r3, #0]
 8020e14:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8020e18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8020e1c:	2b00      	cmp	r3, #0
 8020e1e:	f000 80b7 	beq.w	8020f90 <icmp_input+0x1b4>
 8020e22:	2b08      	cmp	r3, #8
 8020e24:	f040 80b7 	bne.w	8020f96 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8020e28:	4b69      	ldr	r3, [pc, #420]	; (8020fd0 <icmp_input+0x1f4>)
 8020e2a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020e2c:	4b67      	ldr	r3, [pc, #412]	; (8020fcc <icmp_input+0x1f0>)
 8020e2e:	695b      	ldr	r3, [r3, #20]
 8020e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020e34:	2be0      	cmp	r3, #224	; 0xe0
 8020e36:	f000 80bb 	beq.w	8020fb0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8020e3a:	4b64      	ldr	r3, [pc, #400]	; (8020fcc <icmp_input+0x1f0>)
 8020e3c:	695b      	ldr	r3, [r3, #20]
 8020e3e:	4a63      	ldr	r2, [pc, #396]	; (8020fcc <icmp_input+0x1f0>)
 8020e40:	6812      	ldr	r2, [r2, #0]
 8020e42:	4611      	mov	r1, r2
 8020e44:	4618      	mov	r0, r3
 8020e46:	f000 fbed 	bl	8021624 <ip4_addr_isbroadcast_u32>
 8020e4a:	4603      	mov	r3, r0
 8020e4c:	2b00      	cmp	r3, #0
 8020e4e:	f040 80b1 	bne.w	8020fb4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8020e52:	687b      	ldr	r3, [r7, #4]
 8020e54:	891b      	ldrh	r3, [r3, #8]
 8020e56:	2b07      	cmp	r3, #7
 8020e58:	f240 80a5 	bls.w	8020fa6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020e5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020e5e:	330e      	adds	r3, #14
 8020e60:	4619      	mov	r1, r3
 8020e62:	6878      	ldr	r0, [r7, #4]
 8020e64:	f7f7 fcbe 	bl	80187e4 <pbuf_add_header>
 8020e68:	4603      	mov	r3, r0
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d04b      	beq.n	8020f06 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8020e6e:	687b      	ldr	r3, [r7, #4]
 8020e70:	891a      	ldrh	r2, [r3, #8]
 8020e72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020e74:	4413      	add	r3, r2
 8020e76:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8020e78:	687b      	ldr	r3, [r7, #4]
 8020e7a:	891b      	ldrh	r3, [r3, #8]
 8020e7c:	8b7a      	ldrh	r2, [r7, #26]
 8020e7e:	429a      	cmp	r2, r3
 8020e80:	f0c0 809a 	bcc.w	8020fb8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8020e84:	8b7b      	ldrh	r3, [r7, #26]
 8020e86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020e8a:	4619      	mov	r1, r3
 8020e8c:	200e      	movs	r0, #14
 8020e8e:	f7f7 fa5b 	bl	8018348 <pbuf_alloc>
 8020e92:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8020e94:	697b      	ldr	r3, [r7, #20]
 8020e96:	2b00      	cmp	r3, #0
 8020e98:	f000 8090 	beq.w	8020fbc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8020e9c:	697b      	ldr	r3, [r7, #20]
 8020e9e:	895b      	ldrh	r3, [r3, #10]
 8020ea0:	461a      	mov	r2, r3
 8020ea2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020ea4:	3308      	adds	r3, #8
 8020ea6:	429a      	cmp	r2, r3
 8020ea8:	d203      	bcs.n	8020eb2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8020eaa:	6978      	ldr	r0, [r7, #20]
 8020eac:	f7f7 fd30 	bl	8018910 <pbuf_free>
          goto icmperr;
 8020eb0:	e085      	b.n	8020fbe <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8020eb2:	697b      	ldr	r3, [r7, #20]
 8020eb4:	685b      	ldr	r3, [r3, #4]
 8020eb6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8020eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020eba:	4618      	mov	r0, r3
 8020ebc:	f002 fe50 	bl	8023b60 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8020ec0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020ec2:	4619      	mov	r1, r3
 8020ec4:	6978      	ldr	r0, [r7, #20]
 8020ec6:	f7f7 fc9d 	bl	8018804 <pbuf_remove_header>
 8020eca:	4603      	mov	r3, r0
 8020ecc:	2b00      	cmp	r3, #0
 8020ece:	d009      	beq.n	8020ee4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8020ed0:	4b40      	ldr	r3, [pc, #256]	; (8020fd4 <icmp_input+0x1f8>)
 8020ed2:	22b6      	movs	r2, #182	; 0xb6
 8020ed4:	4940      	ldr	r1, [pc, #256]	; (8020fd8 <icmp_input+0x1fc>)
 8020ed6:	4841      	ldr	r0, [pc, #260]	; (8020fdc <icmp_input+0x200>)
 8020ed8:	f002 ff52 	bl	8023d80 <iprintf>
          pbuf_free(r);
 8020edc:	6978      	ldr	r0, [r7, #20]
 8020ede:	f7f7 fd17 	bl	8018910 <pbuf_free>
          goto icmperr;
 8020ee2:	e06c      	b.n	8020fbe <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8020ee4:	6879      	ldr	r1, [r7, #4]
 8020ee6:	6978      	ldr	r0, [r7, #20]
 8020ee8:	f7f7 fe46 	bl	8018b78 <pbuf_copy>
 8020eec:	4603      	mov	r3, r0
 8020eee:	2b00      	cmp	r3, #0
 8020ef0:	d003      	beq.n	8020efa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8020ef2:	6978      	ldr	r0, [r7, #20]
 8020ef4:	f7f7 fd0c 	bl	8018910 <pbuf_free>
          goto icmperr;
 8020ef8:	e061      	b.n	8020fbe <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8020efa:	6878      	ldr	r0, [r7, #4]
 8020efc:	f7f7 fd08 	bl	8018910 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8020f00:	697b      	ldr	r3, [r7, #20]
 8020f02:	607b      	str	r3, [r7, #4]
 8020f04:	e00f      	b.n	8020f26 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020f06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020f08:	330e      	adds	r3, #14
 8020f0a:	4619      	mov	r1, r3
 8020f0c:	6878      	ldr	r0, [r7, #4]
 8020f0e:	f7f7 fc79 	bl	8018804 <pbuf_remove_header>
 8020f12:	4603      	mov	r3, r0
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	d006      	beq.n	8020f26 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8020f18:	4b2e      	ldr	r3, [pc, #184]	; (8020fd4 <icmp_input+0x1f8>)
 8020f1a:	22c7      	movs	r2, #199	; 0xc7
 8020f1c:	4930      	ldr	r1, [pc, #192]	; (8020fe0 <icmp_input+0x204>)
 8020f1e:	482f      	ldr	r0, [pc, #188]	; (8020fdc <icmp_input+0x200>)
 8020f20:	f002 ff2e 	bl	8023d80 <iprintf>
          goto icmperr;
 8020f24:	e04b      	b.n	8020fbe <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8020f26:	687b      	ldr	r3, [r7, #4]
 8020f28:	685b      	ldr	r3, [r3, #4]
 8020f2a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8020f2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020f2e:	4619      	mov	r1, r3
 8020f30:	6878      	ldr	r0, [r7, #4]
 8020f32:	f7f7 fc57 	bl	80187e4 <pbuf_add_header>
 8020f36:	4603      	mov	r3, r0
 8020f38:	2b00      	cmp	r3, #0
 8020f3a:	d12b      	bne.n	8020f94 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8020f3c:	687b      	ldr	r3, [r7, #4]
 8020f3e:	685b      	ldr	r3, [r3, #4]
 8020f40:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8020f42:	69fb      	ldr	r3, [r7, #28]
 8020f44:	681a      	ldr	r2, [r3, #0]
 8020f46:	68fb      	ldr	r3, [r7, #12]
 8020f48:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8020f4a:	4b20      	ldr	r3, [pc, #128]	; (8020fcc <icmp_input+0x1f0>)
 8020f4c:	691a      	ldr	r2, [r3, #16]
 8020f4e:	68fb      	ldr	r3, [r7, #12]
 8020f50:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8020f52:	693b      	ldr	r3, [r7, #16]
 8020f54:	2200      	movs	r2, #0
 8020f56:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8020f58:	693b      	ldr	r3, [r7, #16]
 8020f5a:	2200      	movs	r2, #0
 8020f5c:	709a      	strb	r2, [r3, #2]
 8020f5e:	2200      	movs	r2, #0
 8020f60:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8020f62:	68fb      	ldr	r3, [r7, #12]
 8020f64:	22ff      	movs	r2, #255	; 0xff
 8020f66:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8020f68:	68fb      	ldr	r3, [r7, #12]
 8020f6a:	2200      	movs	r2, #0
 8020f6c:	729a      	strb	r2, [r3, #10]
 8020f6e:	2200      	movs	r2, #0
 8020f70:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8020f72:	683b      	ldr	r3, [r7, #0]
 8020f74:	9302      	str	r3, [sp, #8]
 8020f76:	2301      	movs	r3, #1
 8020f78:	9301      	str	r3, [sp, #4]
 8020f7a:	2300      	movs	r3, #0
 8020f7c:	9300      	str	r3, [sp, #0]
 8020f7e:	23ff      	movs	r3, #255	; 0xff
 8020f80:	2200      	movs	r2, #0
 8020f82:	69f9      	ldr	r1, [r7, #28]
 8020f84:	6878      	ldr	r0, [r7, #4]
 8020f86:	f000 fa75 	bl	8021474 <ip4_output_if>
 8020f8a:	4603      	mov	r3, r0
 8020f8c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8020f8e:	e001      	b.n	8020f94 <icmp_input+0x1b8>
      break;
 8020f90:	bf00      	nop
 8020f92:	e000      	b.n	8020f96 <icmp_input+0x1ba>
      break;
 8020f94:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8020f96:	6878      	ldr	r0, [r7, #4]
 8020f98:	f7f7 fcba 	bl	8018910 <pbuf_free>
  return;
 8020f9c:	e013      	b.n	8020fc6 <icmp_input+0x1ea>
    goto lenerr;
 8020f9e:	bf00      	nop
 8020fa0:	e002      	b.n	8020fa8 <icmp_input+0x1cc>
    goto lenerr;
 8020fa2:	bf00      	nop
 8020fa4:	e000      	b.n	8020fa8 <icmp_input+0x1cc>
        goto lenerr;
 8020fa6:	bf00      	nop
lenerr:
  pbuf_free(p);
 8020fa8:	6878      	ldr	r0, [r7, #4]
 8020faa:	f7f7 fcb1 	bl	8018910 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8020fae:	e00a      	b.n	8020fc6 <icmp_input+0x1ea>
        goto icmperr;
 8020fb0:	bf00      	nop
 8020fb2:	e004      	b.n	8020fbe <icmp_input+0x1e2>
        goto icmperr;
 8020fb4:	bf00      	nop
 8020fb6:	e002      	b.n	8020fbe <icmp_input+0x1e2>
          goto icmperr;
 8020fb8:	bf00      	nop
 8020fba:	e000      	b.n	8020fbe <icmp_input+0x1e2>
          goto icmperr;
 8020fbc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8020fbe:	6878      	ldr	r0, [r7, #4]
 8020fc0:	f7f7 fca6 	bl	8018910 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8020fc4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8020fc6:	3728      	adds	r7, #40	; 0x28
 8020fc8:	46bd      	mov	sp, r7
 8020fca:	bd80      	pop	{r7, pc}
 8020fcc:	20006684 	.word	0x20006684
 8020fd0:	20006698 	.word	0x20006698
 8020fd4:	080283a4 	.word	0x080283a4
 8020fd8:	080283dc 	.word	0x080283dc
 8020fdc:	08028414 	.word	0x08028414
 8020fe0:	0802843c 	.word	0x0802843c

08020fe4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8020fe4:	b580      	push	{r7, lr}
 8020fe6:	b082      	sub	sp, #8
 8020fe8:	af00      	add	r7, sp, #0
 8020fea:	6078      	str	r0, [r7, #4]
 8020fec:	460b      	mov	r3, r1
 8020fee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8020ff0:	78fb      	ldrb	r3, [r7, #3]
 8020ff2:	461a      	mov	r2, r3
 8020ff4:	2103      	movs	r1, #3
 8020ff6:	6878      	ldr	r0, [r7, #4]
 8020ff8:	f000 f814 	bl	8021024 <icmp_send_response>
}
 8020ffc:	bf00      	nop
 8020ffe:	3708      	adds	r7, #8
 8021000:	46bd      	mov	sp, r7
 8021002:	bd80      	pop	{r7, pc}

08021004 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8021004:	b580      	push	{r7, lr}
 8021006:	b082      	sub	sp, #8
 8021008:	af00      	add	r7, sp, #0
 802100a:	6078      	str	r0, [r7, #4]
 802100c:	460b      	mov	r3, r1
 802100e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8021010:	78fb      	ldrb	r3, [r7, #3]
 8021012:	461a      	mov	r2, r3
 8021014:	210b      	movs	r1, #11
 8021016:	6878      	ldr	r0, [r7, #4]
 8021018:	f000 f804 	bl	8021024 <icmp_send_response>
}
 802101c:	bf00      	nop
 802101e:	3708      	adds	r7, #8
 8021020:	46bd      	mov	sp, r7
 8021022:	bd80      	pop	{r7, pc}

08021024 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8021024:	b580      	push	{r7, lr}
 8021026:	b08c      	sub	sp, #48	; 0x30
 8021028:	af04      	add	r7, sp, #16
 802102a:	6078      	str	r0, [r7, #4]
 802102c:	460b      	mov	r3, r1
 802102e:	70fb      	strb	r3, [r7, #3]
 8021030:	4613      	mov	r3, r2
 8021032:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8021034:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021038:	2124      	movs	r1, #36	; 0x24
 802103a:	2022      	movs	r0, #34	; 0x22
 802103c:	f7f7 f984 	bl	8018348 <pbuf_alloc>
 8021040:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8021042:	69fb      	ldr	r3, [r7, #28]
 8021044:	2b00      	cmp	r3, #0
 8021046:	d04c      	beq.n	80210e2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8021048:	69fb      	ldr	r3, [r7, #28]
 802104a:	895b      	ldrh	r3, [r3, #10]
 802104c:	2b23      	cmp	r3, #35	; 0x23
 802104e:	d806      	bhi.n	802105e <icmp_send_response+0x3a>
 8021050:	4b26      	ldr	r3, [pc, #152]	; (80210ec <icmp_send_response+0xc8>)
 8021052:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8021056:	4926      	ldr	r1, [pc, #152]	; (80210f0 <icmp_send_response+0xcc>)
 8021058:	4826      	ldr	r0, [pc, #152]	; (80210f4 <icmp_send_response+0xd0>)
 802105a:	f002 fe91 	bl	8023d80 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 802105e:	687b      	ldr	r3, [r7, #4]
 8021060:	685b      	ldr	r3, [r3, #4]
 8021062:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8021064:	69fb      	ldr	r3, [r7, #28]
 8021066:	685b      	ldr	r3, [r3, #4]
 8021068:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 802106a:	697b      	ldr	r3, [r7, #20]
 802106c:	78fa      	ldrb	r2, [r7, #3]
 802106e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8021070:	697b      	ldr	r3, [r7, #20]
 8021072:	78ba      	ldrb	r2, [r7, #2]
 8021074:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8021076:	697b      	ldr	r3, [r7, #20]
 8021078:	2200      	movs	r2, #0
 802107a:	711a      	strb	r2, [r3, #4]
 802107c:	2200      	movs	r2, #0
 802107e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8021080:	697b      	ldr	r3, [r7, #20]
 8021082:	2200      	movs	r2, #0
 8021084:	719a      	strb	r2, [r3, #6]
 8021086:	2200      	movs	r2, #0
 8021088:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 802108a:	69fb      	ldr	r3, [r7, #28]
 802108c:	685b      	ldr	r3, [r3, #4]
 802108e:	f103 0008 	add.w	r0, r3, #8
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	685b      	ldr	r3, [r3, #4]
 8021096:	221c      	movs	r2, #28
 8021098:	4619      	mov	r1, r3
 802109a:	f002 fd61 	bl	8023b60 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 802109e:	69bb      	ldr	r3, [r7, #24]
 80210a0:	68db      	ldr	r3, [r3, #12]
 80210a2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80210a4:	f107 030c 	add.w	r3, r7, #12
 80210a8:	4618      	mov	r0, r3
 80210aa:	f000 f825 	bl	80210f8 <ip4_route>
 80210ae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80210b0:	693b      	ldr	r3, [r7, #16]
 80210b2:	2b00      	cmp	r3, #0
 80210b4:	d011      	beq.n	80210da <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80210b6:	697b      	ldr	r3, [r7, #20]
 80210b8:	2200      	movs	r2, #0
 80210ba:	709a      	strb	r2, [r3, #2]
 80210bc:	2200      	movs	r2, #0
 80210be:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80210c0:	f107 020c 	add.w	r2, r7, #12
 80210c4:	693b      	ldr	r3, [r7, #16]
 80210c6:	9302      	str	r3, [sp, #8]
 80210c8:	2301      	movs	r3, #1
 80210ca:	9301      	str	r3, [sp, #4]
 80210cc:	2300      	movs	r3, #0
 80210ce:	9300      	str	r3, [sp, #0]
 80210d0:	23ff      	movs	r3, #255	; 0xff
 80210d2:	2100      	movs	r1, #0
 80210d4:	69f8      	ldr	r0, [r7, #28]
 80210d6:	f000 f9cd 	bl	8021474 <ip4_output_if>
  }
  pbuf_free(q);
 80210da:	69f8      	ldr	r0, [r7, #28]
 80210dc:	f7f7 fc18 	bl	8018910 <pbuf_free>
 80210e0:	e000      	b.n	80210e4 <icmp_send_response+0xc0>
    return;
 80210e2:	bf00      	nop
}
 80210e4:	3720      	adds	r7, #32
 80210e6:	46bd      	mov	sp, r7
 80210e8:	bd80      	pop	{r7, pc}
 80210ea:	bf00      	nop
 80210ec:	080283a4 	.word	0x080283a4
 80210f0:	08028470 	.word	0x08028470
 80210f4:	08028414 	.word	0x08028414

080210f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80210f8:	b480      	push	{r7}
 80210fa:	b085      	sub	sp, #20
 80210fc:	af00      	add	r7, sp, #0
 80210fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8021100:	4b33      	ldr	r3, [pc, #204]	; (80211d0 <ip4_route+0xd8>)
 8021102:	681b      	ldr	r3, [r3, #0]
 8021104:	60fb      	str	r3, [r7, #12]
 8021106:	e036      	b.n	8021176 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021108:	68fb      	ldr	r3, [r7, #12]
 802110a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802110e:	f003 0301 	and.w	r3, r3, #1
 8021112:	b2db      	uxtb	r3, r3
 8021114:	2b00      	cmp	r3, #0
 8021116:	d02b      	beq.n	8021170 <ip4_route+0x78>
 8021118:	68fb      	ldr	r3, [r7, #12]
 802111a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802111e:	089b      	lsrs	r3, r3, #2
 8021120:	f003 0301 	and.w	r3, r3, #1
 8021124:	b2db      	uxtb	r3, r3
 8021126:	2b00      	cmp	r3, #0
 8021128:	d022      	beq.n	8021170 <ip4_route+0x78>
 802112a:	68fb      	ldr	r3, [r7, #12]
 802112c:	3304      	adds	r3, #4
 802112e:	681b      	ldr	r3, [r3, #0]
 8021130:	2b00      	cmp	r3, #0
 8021132:	d01d      	beq.n	8021170 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8021134:	687b      	ldr	r3, [r7, #4]
 8021136:	681a      	ldr	r2, [r3, #0]
 8021138:	68fb      	ldr	r3, [r7, #12]
 802113a:	3304      	adds	r3, #4
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	405a      	eors	r2, r3
 8021140:	68fb      	ldr	r3, [r7, #12]
 8021142:	3308      	adds	r3, #8
 8021144:	681b      	ldr	r3, [r3, #0]
 8021146:	4013      	ands	r3, r2
 8021148:	2b00      	cmp	r3, #0
 802114a:	d101      	bne.n	8021150 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 802114c:	68fb      	ldr	r3, [r7, #12]
 802114e:	e038      	b.n	80211c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8021150:	68fb      	ldr	r3, [r7, #12]
 8021152:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021156:	f003 0302 	and.w	r3, r3, #2
 802115a:	2b00      	cmp	r3, #0
 802115c:	d108      	bne.n	8021170 <ip4_route+0x78>
 802115e:	687b      	ldr	r3, [r7, #4]
 8021160:	681a      	ldr	r2, [r3, #0]
 8021162:	68fb      	ldr	r3, [r7, #12]
 8021164:	330c      	adds	r3, #12
 8021166:	681b      	ldr	r3, [r3, #0]
 8021168:	429a      	cmp	r2, r3
 802116a:	d101      	bne.n	8021170 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 802116c:	68fb      	ldr	r3, [r7, #12]
 802116e:	e028      	b.n	80211c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8021170:	68fb      	ldr	r3, [r7, #12]
 8021172:	681b      	ldr	r3, [r3, #0]
 8021174:	60fb      	str	r3, [r7, #12]
 8021176:	68fb      	ldr	r3, [r7, #12]
 8021178:	2b00      	cmp	r3, #0
 802117a:	d1c5      	bne.n	8021108 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802117c:	4b15      	ldr	r3, [pc, #84]	; (80211d4 <ip4_route+0xdc>)
 802117e:	681b      	ldr	r3, [r3, #0]
 8021180:	2b00      	cmp	r3, #0
 8021182:	d01a      	beq.n	80211ba <ip4_route+0xc2>
 8021184:	4b13      	ldr	r3, [pc, #76]	; (80211d4 <ip4_route+0xdc>)
 8021186:	681b      	ldr	r3, [r3, #0]
 8021188:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802118c:	f003 0301 	and.w	r3, r3, #1
 8021190:	2b00      	cmp	r3, #0
 8021192:	d012      	beq.n	80211ba <ip4_route+0xc2>
 8021194:	4b0f      	ldr	r3, [pc, #60]	; (80211d4 <ip4_route+0xdc>)
 8021196:	681b      	ldr	r3, [r3, #0]
 8021198:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802119c:	f003 0304 	and.w	r3, r3, #4
 80211a0:	2b00      	cmp	r3, #0
 80211a2:	d00a      	beq.n	80211ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80211a4:	4b0b      	ldr	r3, [pc, #44]	; (80211d4 <ip4_route+0xdc>)
 80211a6:	681b      	ldr	r3, [r3, #0]
 80211a8:	3304      	adds	r3, #4
 80211aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80211ac:	2b00      	cmp	r3, #0
 80211ae:	d004      	beq.n	80211ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80211b0:	687b      	ldr	r3, [r7, #4]
 80211b2:	681b      	ldr	r3, [r3, #0]
 80211b4:	b2db      	uxtb	r3, r3
 80211b6:	2b7f      	cmp	r3, #127	; 0x7f
 80211b8:	d101      	bne.n	80211be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80211ba:	2300      	movs	r3, #0
 80211bc:	e001      	b.n	80211c2 <ip4_route+0xca>
  }

  return netif_default;
 80211be:	4b05      	ldr	r3, [pc, #20]	; (80211d4 <ip4_route+0xdc>)
 80211c0:	681b      	ldr	r3, [r3, #0]
}
 80211c2:	4618      	mov	r0, r3
 80211c4:	3714      	adds	r7, #20
 80211c6:	46bd      	mov	sp, r7
 80211c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211cc:	4770      	bx	lr
 80211ce:	bf00      	nop
 80211d0:	2000bf8c 	.word	0x2000bf8c
 80211d4:	2000bf90 	.word	0x2000bf90

080211d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80211d8:	b580      	push	{r7, lr}
 80211da:	b082      	sub	sp, #8
 80211dc:	af00      	add	r7, sp, #0
 80211de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80211e0:	687b      	ldr	r3, [r7, #4]
 80211e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80211e6:	f003 0301 	and.w	r3, r3, #1
 80211ea:	b2db      	uxtb	r3, r3
 80211ec:	2b00      	cmp	r3, #0
 80211ee:	d016      	beq.n	802121e <ip4_input_accept+0x46>
 80211f0:	687b      	ldr	r3, [r7, #4]
 80211f2:	3304      	adds	r3, #4
 80211f4:	681b      	ldr	r3, [r3, #0]
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	d011      	beq.n	802121e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80211fa:	4b0b      	ldr	r3, [pc, #44]	; (8021228 <ip4_input_accept+0x50>)
 80211fc:	695a      	ldr	r2, [r3, #20]
 80211fe:	687b      	ldr	r3, [r7, #4]
 8021200:	3304      	adds	r3, #4
 8021202:	681b      	ldr	r3, [r3, #0]
 8021204:	429a      	cmp	r2, r3
 8021206:	d008      	beq.n	802121a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8021208:	4b07      	ldr	r3, [pc, #28]	; (8021228 <ip4_input_accept+0x50>)
 802120a:	695b      	ldr	r3, [r3, #20]
 802120c:	6879      	ldr	r1, [r7, #4]
 802120e:	4618      	mov	r0, r3
 8021210:	f000 fa08 	bl	8021624 <ip4_addr_isbroadcast_u32>
 8021214:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021216:	2b00      	cmp	r3, #0
 8021218:	d001      	beq.n	802121e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 802121a:	2301      	movs	r3, #1
 802121c:	e000      	b.n	8021220 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802121e:	2300      	movs	r3, #0
}
 8021220:	4618      	mov	r0, r3
 8021222:	3708      	adds	r7, #8
 8021224:	46bd      	mov	sp, r7
 8021226:	bd80      	pop	{r7, pc}
 8021228:	20006684 	.word	0x20006684

0802122c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 802122c:	b580      	push	{r7, lr}
 802122e:	b086      	sub	sp, #24
 8021230:	af00      	add	r7, sp, #0
 8021232:	6078      	str	r0, [r7, #4]
 8021234:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8021236:	687b      	ldr	r3, [r7, #4]
 8021238:	685b      	ldr	r3, [r3, #4]
 802123a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 802123c:	697b      	ldr	r3, [r7, #20]
 802123e:	781b      	ldrb	r3, [r3, #0]
 8021240:	091b      	lsrs	r3, r3, #4
 8021242:	b2db      	uxtb	r3, r3
 8021244:	2b04      	cmp	r3, #4
 8021246:	d004      	beq.n	8021252 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8021248:	6878      	ldr	r0, [r7, #4]
 802124a:	f7f7 fb61 	bl	8018910 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 802124e:	2300      	movs	r3, #0
 8021250:	e107      	b.n	8021462 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8021252:	697b      	ldr	r3, [r7, #20]
 8021254:	781b      	ldrb	r3, [r3, #0]
 8021256:	f003 030f 	and.w	r3, r3, #15
 802125a:	b2db      	uxtb	r3, r3
 802125c:	009b      	lsls	r3, r3, #2
 802125e:	b2db      	uxtb	r3, r3
 8021260:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8021262:	697b      	ldr	r3, [r7, #20]
 8021264:	885b      	ldrh	r3, [r3, #2]
 8021266:	b29b      	uxth	r3, r3
 8021268:	4618      	mov	r0, r3
 802126a:	f7f5 ff5f 	bl	801712c <lwip_htons>
 802126e:	4603      	mov	r3, r0
 8021270:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8021272:	687b      	ldr	r3, [r7, #4]
 8021274:	891b      	ldrh	r3, [r3, #8]
 8021276:	89ba      	ldrh	r2, [r7, #12]
 8021278:	429a      	cmp	r2, r3
 802127a:	d204      	bcs.n	8021286 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 802127c:	89bb      	ldrh	r3, [r7, #12]
 802127e:	4619      	mov	r1, r3
 8021280:	6878      	ldr	r0, [r7, #4]
 8021282:	f7f7 f9bf 	bl	8018604 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8021286:	687b      	ldr	r3, [r7, #4]
 8021288:	895b      	ldrh	r3, [r3, #10]
 802128a:	89fa      	ldrh	r2, [r7, #14]
 802128c:	429a      	cmp	r2, r3
 802128e:	d807      	bhi.n	80212a0 <ip4_input+0x74>
 8021290:	687b      	ldr	r3, [r7, #4]
 8021292:	891b      	ldrh	r3, [r3, #8]
 8021294:	89ba      	ldrh	r2, [r7, #12]
 8021296:	429a      	cmp	r2, r3
 8021298:	d802      	bhi.n	80212a0 <ip4_input+0x74>
 802129a:	89fb      	ldrh	r3, [r7, #14]
 802129c:	2b13      	cmp	r3, #19
 802129e:	d804      	bhi.n	80212aa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80212a0:	6878      	ldr	r0, [r7, #4]
 80212a2:	f7f7 fb35 	bl	8018910 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80212a6:	2300      	movs	r3, #0
 80212a8:	e0db      	b.n	8021462 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80212aa:	697b      	ldr	r3, [r7, #20]
 80212ac:	691b      	ldr	r3, [r3, #16]
 80212ae:	4a6f      	ldr	r2, [pc, #444]	; (802146c <ip4_input+0x240>)
 80212b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80212b2:	697b      	ldr	r3, [r7, #20]
 80212b4:	68db      	ldr	r3, [r3, #12]
 80212b6:	4a6d      	ldr	r2, [pc, #436]	; (802146c <ip4_input+0x240>)
 80212b8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80212ba:	4b6c      	ldr	r3, [pc, #432]	; (802146c <ip4_input+0x240>)
 80212bc:	695b      	ldr	r3, [r3, #20]
 80212be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80212c2:	2be0      	cmp	r3, #224	; 0xe0
 80212c4:	d112      	bne.n	80212ec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80212c6:	683b      	ldr	r3, [r7, #0]
 80212c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80212cc:	f003 0301 	and.w	r3, r3, #1
 80212d0:	b2db      	uxtb	r3, r3
 80212d2:	2b00      	cmp	r3, #0
 80212d4:	d007      	beq.n	80212e6 <ip4_input+0xba>
 80212d6:	683b      	ldr	r3, [r7, #0]
 80212d8:	3304      	adds	r3, #4
 80212da:	681b      	ldr	r3, [r3, #0]
 80212dc:	2b00      	cmp	r3, #0
 80212de:	d002      	beq.n	80212e6 <ip4_input+0xba>
      netif = inp;
 80212e0:	683b      	ldr	r3, [r7, #0]
 80212e2:	613b      	str	r3, [r7, #16]
 80212e4:	e02a      	b.n	802133c <ip4_input+0x110>
    } else {
      netif = NULL;
 80212e6:	2300      	movs	r3, #0
 80212e8:	613b      	str	r3, [r7, #16]
 80212ea:	e027      	b.n	802133c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80212ec:	6838      	ldr	r0, [r7, #0]
 80212ee:	f7ff ff73 	bl	80211d8 <ip4_input_accept>
 80212f2:	4603      	mov	r3, r0
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	d002      	beq.n	80212fe <ip4_input+0xd2>
      netif = inp;
 80212f8:	683b      	ldr	r3, [r7, #0]
 80212fa:	613b      	str	r3, [r7, #16]
 80212fc:	e01e      	b.n	802133c <ip4_input+0x110>
    } else {
      netif = NULL;
 80212fe:	2300      	movs	r3, #0
 8021300:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8021302:	4b5a      	ldr	r3, [pc, #360]	; (802146c <ip4_input+0x240>)
 8021304:	695b      	ldr	r3, [r3, #20]
 8021306:	b2db      	uxtb	r3, r3
 8021308:	2b7f      	cmp	r3, #127	; 0x7f
 802130a:	d017      	beq.n	802133c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 802130c:	4b58      	ldr	r3, [pc, #352]	; (8021470 <ip4_input+0x244>)
 802130e:	681b      	ldr	r3, [r3, #0]
 8021310:	613b      	str	r3, [r7, #16]
 8021312:	e00e      	b.n	8021332 <ip4_input+0x106>
          if (netif == inp) {
 8021314:	693a      	ldr	r2, [r7, #16]
 8021316:	683b      	ldr	r3, [r7, #0]
 8021318:	429a      	cmp	r2, r3
 802131a:	d006      	beq.n	802132a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 802131c:	6938      	ldr	r0, [r7, #16]
 802131e:	f7ff ff5b 	bl	80211d8 <ip4_input_accept>
 8021322:	4603      	mov	r3, r0
 8021324:	2b00      	cmp	r3, #0
 8021326:	d108      	bne.n	802133a <ip4_input+0x10e>
 8021328:	e000      	b.n	802132c <ip4_input+0x100>
            continue;
 802132a:	bf00      	nop
        NETIF_FOREACH(netif) {
 802132c:	693b      	ldr	r3, [r7, #16]
 802132e:	681b      	ldr	r3, [r3, #0]
 8021330:	613b      	str	r3, [r7, #16]
 8021332:	693b      	ldr	r3, [r7, #16]
 8021334:	2b00      	cmp	r3, #0
 8021336:	d1ed      	bne.n	8021314 <ip4_input+0xe8>
 8021338:	e000      	b.n	802133c <ip4_input+0x110>
            break;
 802133a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 802133c:	4b4b      	ldr	r3, [pc, #300]	; (802146c <ip4_input+0x240>)
 802133e:	691b      	ldr	r3, [r3, #16]
 8021340:	6839      	ldr	r1, [r7, #0]
 8021342:	4618      	mov	r0, r3
 8021344:	f000 f96e 	bl	8021624 <ip4_addr_isbroadcast_u32>
 8021348:	4603      	mov	r3, r0
 802134a:	2b00      	cmp	r3, #0
 802134c:	d105      	bne.n	802135a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 802134e:	4b47      	ldr	r3, [pc, #284]	; (802146c <ip4_input+0x240>)
 8021350:	691b      	ldr	r3, [r3, #16]
 8021352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021356:	2be0      	cmp	r3, #224	; 0xe0
 8021358:	d104      	bne.n	8021364 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 802135a:	6878      	ldr	r0, [r7, #4]
 802135c:	f7f7 fad8 	bl	8018910 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8021360:	2300      	movs	r3, #0
 8021362:	e07e      	b.n	8021462 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8021364:	693b      	ldr	r3, [r7, #16]
 8021366:	2b00      	cmp	r3, #0
 8021368:	d104      	bne.n	8021374 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 802136a:	6878      	ldr	r0, [r7, #4]
 802136c:	f7f7 fad0 	bl	8018910 <pbuf_free>
    return ERR_OK;
 8021370:	2300      	movs	r3, #0
 8021372:	e076      	b.n	8021462 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8021374:	697b      	ldr	r3, [r7, #20]
 8021376:	88db      	ldrh	r3, [r3, #6]
 8021378:	b29b      	uxth	r3, r3
 802137a:	461a      	mov	r2, r3
 802137c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8021380:	4013      	ands	r3, r2
 8021382:	2b00      	cmp	r3, #0
 8021384:	d00b      	beq.n	802139e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8021386:	6878      	ldr	r0, [r7, #4]
 8021388:	f000 fc92 	bl	8021cb0 <ip4_reass>
 802138c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802138e:	687b      	ldr	r3, [r7, #4]
 8021390:	2b00      	cmp	r3, #0
 8021392:	d101      	bne.n	8021398 <ip4_input+0x16c>
      return ERR_OK;
 8021394:	2300      	movs	r3, #0
 8021396:	e064      	b.n	8021462 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8021398:	687b      	ldr	r3, [r7, #4]
 802139a:	685b      	ldr	r3, [r3, #4]
 802139c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 802139e:	4a33      	ldr	r2, [pc, #204]	; (802146c <ip4_input+0x240>)
 80213a0:	693b      	ldr	r3, [r7, #16]
 80213a2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80213a4:	4a31      	ldr	r2, [pc, #196]	; (802146c <ip4_input+0x240>)
 80213a6:	683b      	ldr	r3, [r7, #0]
 80213a8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80213aa:	4a30      	ldr	r2, [pc, #192]	; (802146c <ip4_input+0x240>)
 80213ac:	697b      	ldr	r3, [r7, #20]
 80213ae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80213b0:	697b      	ldr	r3, [r7, #20]
 80213b2:	781b      	ldrb	r3, [r3, #0]
 80213b4:	f003 030f 	and.w	r3, r3, #15
 80213b8:	b2db      	uxtb	r3, r3
 80213ba:	009b      	lsls	r3, r3, #2
 80213bc:	b2db      	uxtb	r3, r3
 80213be:	b29a      	uxth	r2, r3
 80213c0:	4b2a      	ldr	r3, [pc, #168]	; (802146c <ip4_input+0x240>)
 80213c2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80213c4:	89fb      	ldrh	r3, [r7, #14]
 80213c6:	4619      	mov	r1, r3
 80213c8:	6878      	ldr	r0, [r7, #4]
 80213ca:	f7f7 fa1b 	bl	8018804 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80213ce:	697b      	ldr	r3, [r7, #20]
 80213d0:	7a5b      	ldrb	r3, [r3, #9]
 80213d2:	2b11      	cmp	r3, #17
 80213d4:	d006      	beq.n	80213e4 <ip4_input+0x1b8>
 80213d6:	2b11      	cmp	r3, #17
 80213d8:	dc13      	bgt.n	8021402 <ip4_input+0x1d6>
 80213da:	2b01      	cmp	r3, #1
 80213dc:	d00c      	beq.n	80213f8 <ip4_input+0x1cc>
 80213de:	2b06      	cmp	r3, #6
 80213e0:	d005      	beq.n	80213ee <ip4_input+0x1c2>
 80213e2:	e00e      	b.n	8021402 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80213e4:	6839      	ldr	r1, [r7, #0]
 80213e6:	6878      	ldr	r0, [r7, #4]
 80213e8:	f7fe f902 	bl	801f5f0 <udp_input>
        break;
 80213ec:	e026      	b.n	802143c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80213ee:	6839      	ldr	r1, [r7, #0]
 80213f0:	6878      	ldr	r0, [r7, #4]
 80213f2:	f7f9 fcbb 	bl	801ad6c <tcp_input>
        break;
 80213f6:	e021      	b.n	802143c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80213f8:	6839      	ldr	r1, [r7, #0]
 80213fa:	6878      	ldr	r0, [r7, #4]
 80213fc:	f7ff fcee 	bl	8020ddc <icmp_input>
        break;
 8021400:	e01c      	b.n	802143c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8021402:	4b1a      	ldr	r3, [pc, #104]	; (802146c <ip4_input+0x240>)
 8021404:	695b      	ldr	r3, [r3, #20]
 8021406:	6939      	ldr	r1, [r7, #16]
 8021408:	4618      	mov	r0, r3
 802140a:	f000 f90b 	bl	8021624 <ip4_addr_isbroadcast_u32>
 802140e:	4603      	mov	r3, r0
 8021410:	2b00      	cmp	r3, #0
 8021412:	d10f      	bne.n	8021434 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021414:	4b15      	ldr	r3, [pc, #84]	; (802146c <ip4_input+0x240>)
 8021416:	695b      	ldr	r3, [r3, #20]
 8021418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802141c:	2be0      	cmp	r3, #224	; 0xe0
 802141e:	d009      	beq.n	8021434 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8021420:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8021424:	4619      	mov	r1, r3
 8021426:	6878      	ldr	r0, [r7, #4]
 8021428:	f7f7 fa5f 	bl	80188ea <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 802142c:	2102      	movs	r1, #2
 802142e:	6878      	ldr	r0, [r7, #4]
 8021430:	f7ff fdd8 	bl	8020fe4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8021434:	6878      	ldr	r0, [r7, #4]
 8021436:	f7f7 fa6b 	bl	8018910 <pbuf_free>
        break;
 802143a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 802143c:	4b0b      	ldr	r3, [pc, #44]	; (802146c <ip4_input+0x240>)
 802143e:	2200      	movs	r2, #0
 8021440:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8021442:	4b0a      	ldr	r3, [pc, #40]	; (802146c <ip4_input+0x240>)
 8021444:	2200      	movs	r2, #0
 8021446:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8021448:	4b08      	ldr	r3, [pc, #32]	; (802146c <ip4_input+0x240>)
 802144a:	2200      	movs	r2, #0
 802144c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 802144e:	4b07      	ldr	r3, [pc, #28]	; (802146c <ip4_input+0x240>)
 8021450:	2200      	movs	r2, #0
 8021452:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8021454:	4b05      	ldr	r3, [pc, #20]	; (802146c <ip4_input+0x240>)
 8021456:	2200      	movs	r2, #0
 8021458:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 802145a:	4b04      	ldr	r3, [pc, #16]	; (802146c <ip4_input+0x240>)
 802145c:	2200      	movs	r2, #0
 802145e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8021460:	2300      	movs	r3, #0
}
 8021462:	4618      	mov	r0, r3
 8021464:	3718      	adds	r7, #24
 8021466:	46bd      	mov	sp, r7
 8021468:	bd80      	pop	{r7, pc}
 802146a:	bf00      	nop
 802146c:	20006684 	.word	0x20006684
 8021470:	2000bf8c 	.word	0x2000bf8c

08021474 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8021474:	b580      	push	{r7, lr}
 8021476:	b08a      	sub	sp, #40	; 0x28
 8021478:	af04      	add	r7, sp, #16
 802147a:	60f8      	str	r0, [r7, #12]
 802147c:	60b9      	str	r1, [r7, #8]
 802147e:	607a      	str	r2, [r7, #4]
 8021480:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8021482:	68bb      	ldr	r3, [r7, #8]
 8021484:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8021486:	687b      	ldr	r3, [r7, #4]
 8021488:	2b00      	cmp	r3, #0
 802148a:	d009      	beq.n	80214a0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 802148c:	68bb      	ldr	r3, [r7, #8]
 802148e:	2b00      	cmp	r3, #0
 8021490:	d003      	beq.n	802149a <ip4_output_if+0x26>
 8021492:	68bb      	ldr	r3, [r7, #8]
 8021494:	681b      	ldr	r3, [r3, #0]
 8021496:	2b00      	cmp	r3, #0
 8021498:	d102      	bne.n	80214a0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 802149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802149c:	3304      	adds	r3, #4
 802149e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80214a0:	78fa      	ldrb	r2, [r7, #3]
 80214a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80214a4:	9302      	str	r3, [sp, #8]
 80214a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80214aa:	9301      	str	r3, [sp, #4]
 80214ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80214b0:	9300      	str	r3, [sp, #0]
 80214b2:	4613      	mov	r3, r2
 80214b4:	687a      	ldr	r2, [r7, #4]
 80214b6:	6979      	ldr	r1, [r7, #20]
 80214b8:	68f8      	ldr	r0, [r7, #12]
 80214ba:	f000 f805 	bl	80214c8 <ip4_output_if_src>
 80214be:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80214c0:	4618      	mov	r0, r3
 80214c2:	3718      	adds	r7, #24
 80214c4:	46bd      	mov	sp, r7
 80214c6:	bd80      	pop	{r7, pc}

080214c8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80214c8:	b580      	push	{r7, lr}
 80214ca:	b088      	sub	sp, #32
 80214cc:	af00      	add	r7, sp, #0
 80214ce:	60f8      	str	r0, [r7, #12]
 80214d0:	60b9      	str	r1, [r7, #8]
 80214d2:	607a      	str	r2, [r7, #4]
 80214d4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80214d6:	68fb      	ldr	r3, [r7, #12]
 80214d8:	7b9b      	ldrb	r3, [r3, #14]
 80214da:	2b01      	cmp	r3, #1
 80214dc:	d006      	beq.n	80214ec <ip4_output_if_src+0x24>
 80214de:	4b4b      	ldr	r3, [pc, #300]	; (802160c <ip4_output_if_src+0x144>)
 80214e0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80214e4:	494a      	ldr	r1, [pc, #296]	; (8021610 <ip4_output_if_src+0x148>)
 80214e6:	484b      	ldr	r0, [pc, #300]	; (8021614 <ip4_output_if_src+0x14c>)
 80214e8:	f002 fc4a 	bl	8023d80 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80214ec:	687b      	ldr	r3, [r7, #4]
 80214ee:	2b00      	cmp	r3, #0
 80214f0:	d060      	beq.n	80215b4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80214f2:	2314      	movs	r3, #20
 80214f4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80214f6:	2114      	movs	r1, #20
 80214f8:	68f8      	ldr	r0, [r7, #12]
 80214fa:	f7f7 f973 	bl	80187e4 <pbuf_add_header>
 80214fe:	4603      	mov	r3, r0
 8021500:	2b00      	cmp	r3, #0
 8021502:	d002      	beq.n	802150a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8021504:	f06f 0301 	mvn.w	r3, #1
 8021508:	e07c      	b.n	8021604 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 802150a:	68fb      	ldr	r3, [r7, #12]
 802150c:	685b      	ldr	r3, [r3, #4]
 802150e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8021510:	68fb      	ldr	r3, [r7, #12]
 8021512:	895b      	ldrh	r3, [r3, #10]
 8021514:	2b13      	cmp	r3, #19
 8021516:	d806      	bhi.n	8021526 <ip4_output_if_src+0x5e>
 8021518:	4b3c      	ldr	r3, [pc, #240]	; (802160c <ip4_output_if_src+0x144>)
 802151a:	f44f 7262 	mov.w	r2, #904	; 0x388
 802151e:	493e      	ldr	r1, [pc, #248]	; (8021618 <ip4_output_if_src+0x150>)
 8021520:	483c      	ldr	r0, [pc, #240]	; (8021614 <ip4_output_if_src+0x14c>)
 8021522:	f002 fc2d 	bl	8023d80 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8021526:	69fb      	ldr	r3, [r7, #28]
 8021528:	78fa      	ldrb	r2, [r7, #3]
 802152a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 802152c:	69fb      	ldr	r3, [r7, #28]
 802152e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8021532:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8021534:	687b      	ldr	r3, [r7, #4]
 8021536:	681a      	ldr	r2, [r3, #0]
 8021538:	69fb      	ldr	r3, [r7, #28]
 802153a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 802153c:	8b7b      	ldrh	r3, [r7, #26]
 802153e:	089b      	lsrs	r3, r3, #2
 8021540:	b29b      	uxth	r3, r3
 8021542:	b2db      	uxtb	r3, r3
 8021544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021548:	b2da      	uxtb	r2, r3
 802154a:	69fb      	ldr	r3, [r7, #28]
 802154c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 802154e:	69fb      	ldr	r3, [r7, #28]
 8021550:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8021554:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8021556:	68fb      	ldr	r3, [r7, #12]
 8021558:	891b      	ldrh	r3, [r3, #8]
 802155a:	4618      	mov	r0, r3
 802155c:	f7f5 fde6 	bl	801712c <lwip_htons>
 8021560:	4603      	mov	r3, r0
 8021562:	461a      	mov	r2, r3
 8021564:	69fb      	ldr	r3, [r7, #28]
 8021566:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8021568:	69fb      	ldr	r3, [r7, #28]
 802156a:	2200      	movs	r2, #0
 802156c:	719a      	strb	r2, [r3, #6]
 802156e:	2200      	movs	r2, #0
 8021570:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8021572:	4b2a      	ldr	r3, [pc, #168]	; (802161c <ip4_output_if_src+0x154>)
 8021574:	881b      	ldrh	r3, [r3, #0]
 8021576:	4618      	mov	r0, r3
 8021578:	f7f5 fdd8 	bl	801712c <lwip_htons>
 802157c:	4603      	mov	r3, r0
 802157e:	461a      	mov	r2, r3
 8021580:	69fb      	ldr	r3, [r7, #28]
 8021582:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8021584:	4b25      	ldr	r3, [pc, #148]	; (802161c <ip4_output_if_src+0x154>)
 8021586:	881b      	ldrh	r3, [r3, #0]
 8021588:	3301      	adds	r3, #1
 802158a:	b29a      	uxth	r2, r3
 802158c:	4b23      	ldr	r3, [pc, #140]	; (802161c <ip4_output_if_src+0x154>)
 802158e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8021590:	68bb      	ldr	r3, [r7, #8]
 8021592:	2b00      	cmp	r3, #0
 8021594:	d104      	bne.n	80215a0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8021596:	4b22      	ldr	r3, [pc, #136]	; (8021620 <ip4_output_if_src+0x158>)
 8021598:	681a      	ldr	r2, [r3, #0]
 802159a:	69fb      	ldr	r3, [r7, #28]
 802159c:	60da      	str	r2, [r3, #12]
 802159e:	e003      	b.n	80215a8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80215a0:	68bb      	ldr	r3, [r7, #8]
 80215a2:	681a      	ldr	r2, [r3, #0]
 80215a4:	69fb      	ldr	r3, [r7, #28]
 80215a6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80215a8:	69fb      	ldr	r3, [r7, #28]
 80215aa:	2200      	movs	r2, #0
 80215ac:	729a      	strb	r2, [r3, #10]
 80215ae:	2200      	movs	r2, #0
 80215b0:	72da      	strb	r2, [r3, #11]
 80215b2:	e00f      	b.n	80215d4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80215b4:	68fb      	ldr	r3, [r7, #12]
 80215b6:	895b      	ldrh	r3, [r3, #10]
 80215b8:	2b13      	cmp	r3, #19
 80215ba:	d802      	bhi.n	80215c2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80215bc:	f06f 0301 	mvn.w	r3, #1
 80215c0:	e020      	b.n	8021604 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80215c2:	68fb      	ldr	r3, [r7, #12]
 80215c4:	685b      	ldr	r3, [r3, #4]
 80215c6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80215c8:	69fb      	ldr	r3, [r7, #28]
 80215ca:	691b      	ldr	r3, [r3, #16]
 80215cc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80215ce:	f107 0314 	add.w	r3, r7, #20
 80215d2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80215d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80215d8:	2b00      	cmp	r3, #0
 80215da:	d00c      	beq.n	80215f6 <ip4_output_if_src+0x12e>
 80215dc:	68fb      	ldr	r3, [r7, #12]
 80215de:	891a      	ldrh	r2, [r3, #8]
 80215e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80215e4:	429a      	cmp	r2, r3
 80215e6:	d906      	bls.n	80215f6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80215e8:	687a      	ldr	r2, [r7, #4]
 80215ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80215ec:	68f8      	ldr	r0, [r7, #12]
 80215ee:	f000 fd53 	bl	8022098 <ip4_frag>
 80215f2:	4603      	mov	r3, r0
 80215f4:	e006      	b.n	8021604 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80215f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215f8:	695b      	ldr	r3, [r3, #20]
 80215fa:	687a      	ldr	r2, [r7, #4]
 80215fc:	68f9      	ldr	r1, [r7, #12]
 80215fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021600:	4798      	blx	r3
 8021602:	4603      	mov	r3, r0
}
 8021604:	4618      	mov	r0, r3
 8021606:	3720      	adds	r7, #32
 8021608:	46bd      	mov	sp, r7
 802160a:	bd80      	pop	{r7, pc}
 802160c:	0802849c 	.word	0x0802849c
 8021610:	080284d0 	.word	0x080284d0
 8021614:	080284dc 	.word	0x080284dc
 8021618:	08028504 	.word	0x08028504
 802161c:	2000c0ea 	.word	0x2000c0ea
 8021620:	08028978 	.word	0x08028978

08021624 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8021624:	b480      	push	{r7}
 8021626:	b085      	sub	sp, #20
 8021628:	af00      	add	r7, sp, #0
 802162a:	6078      	str	r0, [r7, #4]
 802162c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 802162e:	687b      	ldr	r3, [r7, #4]
 8021630:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8021632:	687b      	ldr	r3, [r7, #4]
 8021634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8021638:	d002      	beq.n	8021640 <ip4_addr_isbroadcast_u32+0x1c>
 802163a:	687b      	ldr	r3, [r7, #4]
 802163c:	2b00      	cmp	r3, #0
 802163e:	d101      	bne.n	8021644 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8021640:	2301      	movs	r3, #1
 8021642:	e02a      	b.n	802169a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8021644:	683b      	ldr	r3, [r7, #0]
 8021646:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802164a:	f003 0302 	and.w	r3, r3, #2
 802164e:	2b00      	cmp	r3, #0
 8021650:	d101      	bne.n	8021656 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8021652:	2300      	movs	r3, #0
 8021654:	e021      	b.n	802169a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8021656:	683b      	ldr	r3, [r7, #0]
 8021658:	3304      	adds	r3, #4
 802165a:	681b      	ldr	r3, [r3, #0]
 802165c:	687a      	ldr	r2, [r7, #4]
 802165e:	429a      	cmp	r2, r3
 8021660:	d101      	bne.n	8021666 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8021662:	2300      	movs	r3, #0
 8021664:	e019      	b.n	802169a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8021666:	68fa      	ldr	r2, [r7, #12]
 8021668:	683b      	ldr	r3, [r7, #0]
 802166a:	3304      	adds	r3, #4
 802166c:	681b      	ldr	r3, [r3, #0]
 802166e:	405a      	eors	r2, r3
 8021670:	683b      	ldr	r3, [r7, #0]
 8021672:	3308      	adds	r3, #8
 8021674:	681b      	ldr	r3, [r3, #0]
 8021676:	4013      	ands	r3, r2
 8021678:	2b00      	cmp	r3, #0
 802167a:	d10d      	bne.n	8021698 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802167c:	683b      	ldr	r3, [r7, #0]
 802167e:	3308      	adds	r3, #8
 8021680:	681b      	ldr	r3, [r3, #0]
 8021682:	43da      	mvns	r2, r3
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8021688:	683b      	ldr	r3, [r7, #0]
 802168a:	3308      	adds	r3, #8
 802168c:	681b      	ldr	r3, [r3, #0]
 802168e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021690:	429a      	cmp	r2, r3
 8021692:	d101      	bne.n	8021698 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8021694:	2301      	movs	r3, #1
 8021696:	e000      	b.n	802169a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8021698:	2300      	movs	r3, #0
  }
}
 802169a:	4618      	mov	r0, r3
 802169c:	3714      	adds	r7, #20
 802169e:	46bd      	mov	sp, r7
 80216a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216a4:	4770      	bx	lr
	...

080216a8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80216a8:	b580      	push	{r7, lr}
 80216aa:	b084      	sub	sp, #16
 80216ac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80216ae:	2300      	movs	r3, #0
 80216b0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80216b2:	4b12      	ldr	r3, [pc, #72]	; (80216fc <ip_reass_tmr+0x54>)
 80216b4:	681b      	ldr	r3, [r3, #0]
 80216b6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80216b8:	e018      	b.n	80216ec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80216ba:	68fb      	ldr	r3, [r7, #12]
 80216bc:	7fdb      	ldrb	r3, [r3, #31]
 80216be:	2b00      	cmp	r3, #0
 80216c0:	d00b      	beq.n	80216da <ip_reass_tmr+0x32>
      r->timer--;
 80216c2:	68fb      	ldr	r3, [r7, #12]
 80216c4:	7fdb      	ldrb	r3, [r3, #31]
 80216c6:	3b01      	subs	r3, #1
 80216c8:	b2da      	uxtb	r2, r3
 80216ca:	68fb      	ldr	r3, [r7, #12]
 80216cc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80216ce:	68fb      	ldr	r3, [r7, #12]
 80216d0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80216d2:	68fb      	ldr	r3, [r7, #12]
 80216d4:	681b      	ldr	r3, [r3, #0]
 80216d6:	60fb      	str	r3, [r7, #12]
 80216d8:	e008      	b.n	80216ec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80216da:	68fb      	ldr	r3, [r7, #12]
 80216dc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80216de:	68fb      	ldr	r3, [r7, #12]
 80216e0:	681b      	ldr	r3, [r3, #0]
 80216e2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80216e4:	68b9      	ldr	r1, [r7, #8]
 80216e6:	6878      	ldr	r0, [r7, #4]
 80216e8:	f000 f80a 	bl	8021700 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80216ec:	68fb      	ldr	r3, [r7, #12]
 80216ee:	2b00      	cmp	r3, #0
 80216f0:	d1e3      	bne.n	80216ba <ip_reass_tmr+0x12>
    }
  }
}
 80216f2:	bf00      	nop
 80216f4:	bf00      	nop
 80216f6:	3710      	adds	r7, #16
 80216f8:	46bd      	mov	sp, r7
 80216fa:	bd80      	pop	{r7, pc}
 80216fc:	2000c0ec 	.word	0x2000c0ec

08021700 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021700:	b580      	push	{r7, lr}
 8021702:	b088      	sub	sp, #32
 8021704:	af00      	add	r7, sp, #0
 8021706:	6078      	str	r0, [r7, #4]
 8021708:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 802170a:	2300      	movs	r3, #0
 802170c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 802170e:	683a      	ldr	r2, [r7, #0]
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	429a      	cmp	r2, r3
 8021714:	d105      	bne.n	8021722 <ip_reass_free_complete_datagram+0x22>
 8021716:	4b45      	ldr	r3, [pc, #276]	; (802182c <ip_reass_free_complete_datagram+0x12c>)
 8021718:	22ab      	movs	r2, #171	; 0xab
 802171a:	4945      	ldr	r1, [pc, #276]	; (8021830 <ip_reass_free_complete_datagram+0x130>)
 802171c:	4845      	ldr	r0, [pc, #276]	; (8021834 <ip_reass_free_complete_datagram+0x134>)
 802171e:	f002 fb2f 	bl	8023d80 <iprintf>
  if (prev != NULL) {
 8021722:	683b      	ldr	r3, [r7, #0]
 8021724:	2b00      	cmp	r3, #0
 8021726:	d00a      	beq.n	802173e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8021728:	683b      	ldr	r3, [r7, #0]
 802172a:	681b      	ldr	r3, [r3, #0]
 802172c:	687a      	ldr	r2, [r7, #4]
 802172e:	429a      	cmp	r2, r3
 8021730:	d005      	beq.n	802173e <ip_reass_free_complete_datagram+0x3e>
 8021732:	4b3e      	ldr	r3, [pc, #248]	; (802182c <ip_reass_free_complete_datagram+0x12c>)
 8021734:	22ad      	movs	r2, #173	; 0xad
 8021736:	4940      	ldr	r1, [pc, #256]	; (8021838 <ip_reass_free_complete_datagram+0x138>)
 8021738:	483e      	ldr	r0, [pc, #248]	; (8021834 <ip_reass_free_complete_datagram+0x134>)
 802173a:	f002 fb21 	bl	8023d80 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 802173e:	687b      	ldr	r3, [r7, #4]
 8021740:	685b      	ldr	r3, [r3, #4]
 8021742:	685b      	ldr	r3, [r3, #4]
 8021744:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8021746:	697b      	ldr	r3, [r7, #20]
 8021748:	889b      	ldrh	r3, [r3, #4]
 802174a:	b29b      	uxth	r3, r3
 802174c:	2b00      	cmp	r3, #0
 802174e:	d12a      	bne.n	80217a6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8021750:	687b      	ldr	r3, [r7, #4]
 8021752:	685b      	ldr	r3, [r3, #4]
 8021754:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8021756:	697b      	ldr	r3, [r7, #20]
 8021758:	681a      	ldr	r2, [r3, #0]
 802175a:	687b      	ldr	r3, [r7, #4]
 802175c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 802175e:	69bb      	ldr	r3, [r7, #24]
 8021760:	6858      	ldr	r0, [r3, #4]
 8021762:	687b      	ldr	r3, [r7, #4]
 8021764:	3308      	adds	r3, #8
 8021766:	2214      	movs	r2, #20
 8021768:	4619      	mov	r1, r3
 802176a:	f002 f9f9 	bl	8023b60 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802176e:	2101      	movs	r1, #1
 8021770:	69b8      	ldr	r0, [r7, #24]
 8021772:	f7ff fc47 	bl	8021004 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8021776:	69b8      	ldr	r0, [r7, #24]
 8021778:	f7f7 f958 	bl	8018a2c <pbuf_clen>
 802177c:	4603      	mov	r3, r0
 802177e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021780:	8bfa      	ldrh	r2, [r7, #30]
 8021782:	8a7b      	ldrh	r3, [r7, #18]
 8021784:	4413      	add	r3, r2
 8021786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802178a:	db05      	blt.n	8021798 <ip_reass_free_complete_datagram+0x98>
 802178c:	4b27      	ldr	r3, [pc, #156]	; (802182c <ip_reass_free_complete_datagram+0x12c>)
 802178e:	22bc      	movs	r2, #188	; 0xbc
 8021790:	492a      	ldr	r1, [pc, #168]	; (802183c <ip_reass_free_complete_datagram+0x13c>)
 8021792:	4828      	ldr	r0, [pc, #160]	; (8021834 <ip_reass_free_complete_datagram+0x134>)
 8021794:	f002 faf4 	bl	8023d80 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021798:	8bfa      	ldrh	r2, [r7, #30]
 802179a:	8a7b      	ldrh	r3, [r7, #18]
 802179c:	4413      	add	r3, r2
 802179e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80217a0:	69b8      	ldr	r0, [r7, #24]
 80217a2:	f7f7 f8b5 	bl	8018910 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80217a6:	687b      	ldr	r3, [r7, #4]
 80217a8:	685b      	ldr	r3, [r3, #4]
 80217aa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80217ac:	e01f      	b.n	80217ee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80217ae:	69bb      	ldr	r3, [r7, #24]
 80217b0:	685b      	ldr	r3, [r3, #4]
 80217b2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80217b4:	69bb      	ldr	r3, [r7, #24]
 80217b6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80217b8:	697b      	ldr	r3, [r7, #20]
 80217ba:	681b      	ldr	r3, [r3, #0]
 80217bc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80217be:	68f8      	ldr	r0, [r7, #12]
 80217c0:	f7f7 f934 	bl	8018a2c <pbuf_clen>
 80217c4:	4603      	mov	r3, r0
 80217c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80217c8:	8bfa      	ldrh	r2, [r7, #30]
 80217ca:	8a7b      	ldrh	r3, [r7, #18]
 80217cc:	4413      	add	r3, r2
 80217ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80217d2:	db05      	blt.n	80217e0 <ip_reass_free_complete_datagram+0xe0>
 80217d4:	4b15      	ldr	r3, [pc, #84]	; (802182c <ip_reass_free_complete_datagram+0x12c>)
 80217d6:	22cc      	movs	r2, #204	; 0xcc
 80217d8:	4918      	ldr	r1, [pc, #96]	; (802183c <ip_reass_free_complete_datagram+0x13c>)
 80217da:	4816      	ldr	r0, [pc, #88]	; (8021834 <ip_reass_free_complete_datagram+0x134>)
 80217dc:	f002 fad0 	bl	8023d80 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80217e0:	8bfa      	ldrh	r2, [r7, #30]
 80217e2:	8a7b      	ldrh	r3, [r7, #18]
 80217e4:	4413      	add	r3, r2
 80217e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80217e8:	68f8      	ldr	r0, [r7, #12]
 80217ea:	f7f7 f891 	bl	8018910 <pbuf_free>
  while (p != NULL) {
 80217ee:	69bb      	ldr	r3, [r7, #24]
 80217f0:	2b00      	cmp	r3, #0
 80217f2:	d1dc      	bne.n	80217ae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80217f4:	6839      	ldr	r1, [r7, #0]
 80217f6:	6878      	ldr	r0, [r7, #4]
 80217f8:	f000 f8c2 	bl	8021980 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80217fc:	4b10      	ldr	r3, [pc, #64]	; (8021840 <ip_reass_free_complete_datagram+0x140>)
 80217fe:	881b      	ldrh	r3, [r3, #0]
 8021800:	8bfa      	ldrh	r2, [r7, #30]
 8021802:	429a      	cmp	r2, r3
 8021804:	d905      	bls.n	8021812 <ip_reass_free_complete_datagram+0x112>
 8021806:	4b09      	ldr	r3, [pc, #36]	; (802182c <ip_reass_free_complete_datagram+0x12c>)
 8021808:	22d2      	movs	r2, #210	; 0xd2
 802180a:	490e      	ldr	r1, [pc, #56]	; (8021844 <ip_reass_free_complete_datagram+0x144>)
 802180c:	4809      	ldr	r0, [pc, #36]	; (8021834 <ip_reass_free_complete_datagram+0x134>)
 802180e:	f002 fab7 	bl	8023d80 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8021812:	4b0b      	ldr	r3, [pc, #44]	; (8021840 <ip_reass_free_complete_datagram+0x140>)
 8021814:	881a      	ldrh	r2, [r3, #0]
 8021816:	8bfb      	ldrh	r3, [r7, #30]
 8021818:	1ad3      	subs	r3, r2, r3
 802181a:	b29a      	uxth	r2, r3
 802181c:	4b08      	ldr	r3, [pc, #32]	; (8021840 <ip_reass_free_complete_datagram+0x140>)
 802181e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8021820:	8bfb      	ldrh	r3, [r7, #30]
}
 8021822:	4618      	mov	r0, r3
 8021824:	3720      	adds	r7, #32
 8021826:	46bd      	mov	sp, r7
 8021828:	bd80      	pop	{r7, pc}
 802182a:	bf00      	nop
 802182c:	08028534 	.word	0x08028534
 8021830:	08028570 	.word	0x08028570
 8021834:	0802857c 	.word	0x0802857c
 8021838:	080285a4 	.word	0x080285a4
 802183c:	080285b8 	.word	0x080285b8
 8021840:	2000c0f0 	.word	0x2000c0f0
 8021844:	080285d8 	.word	0x080285d8

08021848 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8021848:	b580      	push	{r7, lr}
 802184a:	b08a      	sub	sp, #40	; 0x28
 802184c:	af00      	add	r7, sp, #0
 802184e:	6078      	str	r0, [r7, #4]
 8021850:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8021852:	2300      	movs	r3, #0
 8021854:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8021856:	2300      	movs	r3, #0
 8021858:	623b      	str	r3, [r7, #32]
    prev = NULL;
 802185a:	2300      	movs	r3, #0
 802185c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 802185e:	2300      	movs	r3, #0
 8021860:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8021862:	2300      	movs	r3, #0
 8021864:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8021866:	4b28      	ldr	r3, [pc, #160]	; (8021908 <ip_reass_remove_oldest_datagram+0xc0>)
 8021868:	681b      	ldr	r3, [r3, #0]
 802186a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 802186c:	e030      	b.n	80218d0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021870:	695a      	ldr	r2, [r3, #20]
 8021872:	687b      	ldr	r3, [r7, #4]
 8021874:	68db      	ldr	r3, [r3, #12]
 8021876:	429a      	cmp	r2, r3
 8021878:	d10c      	bne.n	8021894 <ip_reass_remove_oldest_datagram+0x4c>
 802187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802187c:	699a      	ldr	r2, [r3, #24]
 802187e:	687b      	ldr	r3, [r7, #4]
 8021880:	691b      	ldr	r3, [r3, #16]
 8021882:	429a      	cmp	r2, r3
 8021884:	d106      	bne.n	8021894 <ip_reass_remove_oldest_datagram+0x4c>
 8021886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021888:	899a      	ldrh	r2, [r3, #12]
 802188a:	687b      	ldr	r3, [r7, #4]
 802188c:	889b      	ldrh	r3, [r3, #4]
 802188e:	b29b      	uxth	r3, r3
 8021890:	429a      	cmp	r2, r3
 8021892:	d014      	beq.n	80218be <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8021894:	693b      	ldr	r3, [r7, #16]
 8021896:	3301      	adds	r3, #1
 8021898:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 802189a:	6a3b      	ldr	r3, [r7, #32]
 802189c:	2b00      	cmp	r3, #0
 802189e:	d104      	bne.n	80218aa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80218a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218a2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80218a4:	69fb      	ldr	r3, [r7, #28]
 80218a6:	61bb      	str	r3, [r7, #24]
 80218a8:	e009      	b.n	80218be <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80218aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218ac:	7fda      	ldrb	r2, [r3, #31]
 80218ae:	6a3b      	ldr	r3, [r7, #32]
 80218b0:	7fdb      	ldrb	r3, [r3, #31]
 80218b2:	429a      	cmp	r2, r3
 80218b4:	d803      	bhi.n	80218be <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80218b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218b8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80218ba:	69fb      	ldr	r3, [r7, #28]
 80218bc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80218be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218c0:	681b      	ldr	r3, [r3, #0]
 80218c2:	2b00      	cmp	r3, #0
 80218c4:	d001      	beq.n	80218ca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80218c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218c8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80218ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218cc:	681b      	ldr	r3, [r3, #0]
 80218ce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80218d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218d2:	2b00      	cmp	r3, #0
 80218d4:	d1cb      	bne.n	802186e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80218d6:	6a3b      	ldr	r3, [r7, #32]
 80218d8:	2b00      	cmp	r3, #0
 80218da:	d008      	beq.n	80218ee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80218dc:	69b9      	ldr	r1, [r7, #24]
 80218de:	6a38      	ldr	r0, [r7, #32]
 80218e0:	f7ff ff0e 	bl	8021700 <ip_reass_free_complete_datagram>
 80218e4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80218e6:	697a      	ldr	r2, [r7, #20]
 80218e8:	68fb      	ldr	r3, [r7, #12]
 80218ea:	4413      	add	r3, r2
 80218ec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80218ee:	697a      	ldr	r2, [r7, #20]
 80218f0:	683b      	ldr	r3, [r7, #0]
 80218f2:	429a      	cmp	r2, r3
 80218f4:	da02      	bge.n	80218fc <ip_reass_remove_oldest_datagram+0xb4>
 80218f6:	693b      	ldr	r3, [r7, #16]
 80218f8:	2b01      	cmp	r3, #1
 80218fa:	dcac      	bgt.n	8021856 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80218fc:	697b      	ldr	r3, [r7, #20]
}
 80218fe:	4618      	mov	r0, r3
 8021900:	3728      	adds	r7, #40	; 0x28
 8021902:	46bd      	mov	sp, r7
 8021904:	bd80      	pop	{r7, pc}
 8021906:	bf00      	nop
 8021908:	2000c0ec 	.word	0x2000c0ec

0802190c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 802190c:	b580      	push	{r7, lr}
 802190e:	b084      	sub	sp, #16
 8021910:	af00      	add	r7, sp, #0
 8021912:	6078      	str	r0, [r7, #4]
 8021914:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021916:	2004      	movs	r0, #4
 8021918:	f7f6 f8e0 	bl	8017adc <memp_malloc>
 802191c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 802191e:	68fb      	ldr	r3, [r7, #12]
 8021920:	2b00      	cmp	r3, #0
 8021922:	d110      	bne.n	8021946 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8021924:	6839      	ldr	r1, [r7, #0]
 8021926:	6878      	ldr	r0, [r7, #4]
 8021928:	f7ff ff8e 	bl	8021848 <ip_reass_remove_oldest_datagram>
 802192c:	4602      	mov	r2, r0
 802192e:	683b      	ldr	r3, [r7, #0]
 8021930:	4293      	cmp	r3, r2
 8021932:	dc03      	bgt.n	802193c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021934:	2004      	movs	r0, #4
 8021936:	f7f6 f8d1 	bl	8017adc <memp_malloc>
 802193a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 802193c:	68fb      	ldr	r3, [r7, #12]
 802193e:	2b00      	cmp	r3, #0
 8021940:	d101      	bne.n	8021946 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8021942:	2300      	movs	r3, #0
 8021944:	e016      	b.n	8021974 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8021946:	2220      	movs	r2, #32
 8021948:	2100      	movs	r1, #0
 802194a:	68f8      	ldr	r0, [r7, #12]
 802194c:	f002 f930 	bl	8023bb0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8021950:	68fb      	ldr	r3, [r7, #12]
 8021952:	220f      	movs	r2, #15
 8021954:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8021956:	4b09      	ldr	r3, [pc, #36]	; (802197c <ip_reass_enqueue_new_datagram+0x70>)
 8021958:	681a      	ldr	r2, [r3, #0]
 802195a:	68fb      	ldr	r3, [r7, #12]
 802195c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 802195e:	4a07      	ldr	r2, [pc, #28]	; (802197c <ip_reass_enqueue_new_datagram+0x70>)
 8021960:	68fb      	ldr	r3, [r7, #12]
 8021962:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8021964:	68fb      	ldr	r3, [r7, #12]
 8021966:	3308      	adds	r3, #8
 8021968:	2214      	movs	r2, #20
 802196a:	6879      	ldr	r1, [r7, #4]
 802196c:	4618      	mov	r0, r3
 802196e:	f002 f8f7 	bl	8023b60 <memcpy>
  return ipr;
 8021972:	68fb      	ldr	r3, [r7, #12]
}
 8021974:	4618      	mov	r0, r3
 8021976:	3710      	adds	r7, #16
 8021978:	46bd      	mov	sp, r7
 802197a:	bd80      	pop	{r7, pc}
 802197c:	2000c0ec 	.word	0x2000c0ec

08021980 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021980:	b580      	push	{r7, lr}
 8021982:	b082      	sub	sp, #8
 8021984:	af00      	add	r7, sp, #0
 8021986:	6078      	str	r0, [r7, #4]
 8021988:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 802198a:	4b10      	ldr	r3, [pc, #64]	; (80219cc <ip_reass_dequeue_datagram+0x4c>)
 802198c:	681b      	ldr	r3, [r3, #0]
 802198e:	687a      	ldr	r2, [r7, #4]
 8021990:	429a      	cmp	r2, r3
 8021992:	d104      	bne.n	802199e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8021994:	687b      	ldr	r3, [r7, #4]
 8021996:	681b      	ldr	r3, [r3, #0]
 8021998:	4a0c      	ldr	r2, [pc, #48]	; (80219cc <ip_reass_dequeue_datagram+0x4c>)
 802199a:	6013      	str	r3, [r2, #0]
 802199c:	e00d      	b.n	80219ba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 802199e:	683b      	ldr	r3, [r7, #0]
 80219a0:	2b00      	cmp	r3, #0
 80219a2:	d106      	bne.n	80219b2 <ip_reass_dequeue_datagram+0x32>
 80219a4:	4b0a      	ldr	r3, [pc, #40]	; (80219d0 <ip_reass_dequeue_datagram+0x50>)
 80219a6:	f240 1245 	movw	r2, #325	; 0x145
 80219aa:	490a      	ldr	r1, [pc, #40]	; (80219d4 <ip_reass_dequeue_datagram+0x54>)
 80219ac:	480a      	ldr	r0, [pc, #40]	; (80219d8 <ip_reass_dequeue_datagram+0x58>)
 80219ae:	f002 f9e7 	bl	8023d80 <iprintf>
    prev->next = ipr->next;
 80219b2:	687b      	ldr	r3, [r7, #4]
 80219b4:	681a      	ldr	r2, [r3, #0]
 80219b6:	683b      	ldr	r3, [r7, #0]
 80219b8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80219ba:	6879      	ldr	r1, [r7, #4]
 80219bc:	2004      	movs	r0, #4
 80219be:	f7f6 f903 	bl	8017bc8 <memp_free>
}
 80219c2:	bf00      	nop
 80219c4:	3708      	adds	r7, #8
 80219c6:	46bd      	mov	sp, r7
 80219c8:	bd80      	pop	{r7, pc}
 80219ca:	bf00      	nop
 80219cc:	2000c0ec 	.word	0x2000c0ec
 80219d0:	08028534 	.word	0x08028534
 80219d4:	080285fc 	.word	0x080285fc
 80219d8:	0802857c 	.word	0x0802857c

080219dc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80219dc:	b580      	push	{r7, lr}
 80219de:	b08c      	sub	sp, #48	; 0x30
 80219e0:	af00      	add	r7, sp, #0
 80219e2:	60f8      	str	r0, [r7, #12]
 80219e4:	60b9      	str	r1, [r7, #8]
 80219e6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80219e8:	2300      	movs	r3, #0
 80219ea:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80219ec:	2301      	movs	r3, #1
 80219ee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80219f0:	68bb      	ldr	r3, [r7, #8]
 80219f2:	685b      	ldr	r3, [r3, #4]
 80219f4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80219f6:	69fb      	ldr	r3, [r7, #28]
 80219f8:	885b      	ldrh	r3, [r3, #2]
 80219fa:	b29b      	uxth	r3, r3
 80219fc:	4618      	mov	r0, r3
 80219fe:	f7f5 fb95 	bl	801712c <lwip_htons>
 8021a02:	4603      	mov	r3, r0
 8021a04:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8021a06:	69fb      	ldr	r3, [r7, #28]
 8021a08:	781b      	ldrb	r3, [r3, #0]
 8021a0a:	f003 030f 	and.w	r3, r3, #15
 8021a0e:	b2db      	uxtb	r3, r3
 8021a10:	009b      	lsls	r3, r3, #2
 8021a12:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8021a14:	7e7b      	ldrb	r3, [r7, #25]
 8021a16:	b29b      	uxth	r3, r3
 8021a18:	8b7a      	ldrh	r2, [r7, #26]
 8021a1a:	429a      	cmp	r2, r3
 8021a1c:	d202      	bcs.n	8021a24 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021a22:	e135      	b.n	8021c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8021a24:	7e7b      	ldrb	r3, [r7, #25]
 8021a26:	b29b      	uxth	r3, r3
 8021a28:	8b7a      	ldrh	r2, [r7, #26]
 8021a2a:	1ad3      	subs	r3, r2, r3
 8021a2c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8021a2e:	69fb      	ldr	r3, [r7, #28]
 8021a30:	88db      	ldrh	r3, [r3, #6]
 8021a32:	b29b      	uxth	r3, r3
 8021a34:	4618      	mov	r0, r3
 8021a36:	f7f5 fb79 	bl	801712c <lwip_htons>
 8021a3a:	4603      	mov	r3, r0
 8021a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021a40:	b29b      	uxth	r3, r3
 8021a42:	00db      	lsls	r3, r3, #3
 8021a44:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8021a46:	68bb      	ldr	r3, [r7, #8]
 8021a48:	685b      	ldr	r3, [r3, #4]
 8021a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8021a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a4e:	2200      	movs	r2, #0
 8021a50:	701a      	strb	r2, [r3, #0]
 8021a52:	2200      	movs	r2, #0
 8021a54:	705a      	strb	r2, [r3, #1]
 8021a56:	2200      	movs	r2, #0
 8021a58:	709a      	strb	r2, [r3, #2]
 8021a5a:	2200      	movs	r2, #0
 8021a5c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8021a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a60:	8afa      	ldrh	r2, [r7, #22]
 8021a62:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8021a64:	8afa      	ldrh	r2, [r7, #22]
 8021a66:	8b7b      	ldrh	r3, [r7, #26]
 8021a68:	4413      	add	r3, r2
 8021a6a:	b29a      	uxth	r2, r3
 8021a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a6e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8021a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a72:	88db      	ldrh	r3, [r3, #6]
 8021a74:	b29b      	uxth	r3, r3
 8021a76:	8afa      	ldrh	r2, [r7, #22]
 8021a78:	429a      	cmp	r2, r3
 8021a7a:	d902      	bls.n	8021a82 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021a80:	e106      	b.n	8021c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8021a82:	68fb      	ldr	r3, [r7, #12]
 8021a84:	685b      	ldr	r3, [r3, #4]
 8021a86:	627b      	str	r3, [r7, #36]	; 0x24
 8021a88:	e068      	b.n	8021b5c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8021a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a8c:	685b      	ldr	r3, [r3, #4]
 8021a8e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8021a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a92:	889b      	ldrh	r3, [r3, #4]
 8021a94:	b29a      	uxth	r2, r3
 8021a96:	693b      	ldr	r3, [r7, #16]
 8021a98:	889b      	ldrh	r3, [r3, #4]
 8021a9a:	b29b      	uxth	r3, r3
 8021a9c:	429a      	cmp	r2, r3
 8021a9e:	d235      	bcs.n	8021b0c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8021aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021aa4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8021aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021aa8:	2b00      	cmp	r3, #0
 8021aaa:	d020      	beq.n	8021aee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8021aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021aae:	889b      	ldrh	r3, [r3, #4]
 8021ab0:	b29a      	uxth	r2, r3
 8021ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ab4:	88db      	ldrh	r3, [r3, #6]
 8021ab6:	b29b      	uxth	r3, r3
 8021ab8:	429a      	cmp	r2, r3
 8021aba:	d307      	bcc.n	8021acc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8021abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021abe:	88db      	ldrh	r3, [r3, #6]
 8021ac0:	b29a      	uxth	r2, r3
 8021ac2:	693b      	ldr	r3, [r7, #16]
 8021ac4:	889b      	ldrh	r3, [r3, #4]
 8021ac6:	b29b      	uxth	r3, r3
 8021ac8:	429a      	cmp	r2, r3
 8021aca:	d902      	bls.n	8021ad2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021ad0:	e0de      	b.n	8021c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8021ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ad4:	68ba      	ldr	r2, [r7, #8]
 8021ad6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8021ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ada:	88db      	ldrh	r3, [r3, #6]
 8021adc:	b29a      	uxth	r2, r3
 8021ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ae0:	889b      	ldrh	r3, [r3, #4]
 8021ae2:	b29b      	uxth	r3, r3
 8021ae4:	429a      	cmp	r2, r3
 8021ae6:	d03d      	beq.n	8021b64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021ae8:	2300      	movs	r3, #0
 8021aea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8021aec:	e03a      	b.n	8021b64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8021aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021af0:	88db      	ldrh	r3, [r3, #6]
 8021af2:	b29a      	uxth	r2, r3
 8021af4:	693b      	ldr	r3, [r7, #16]
 8021af6:	889b      	ldrh	r3, [r3, #4]
 8021af8:	b29b      	uxth	r3, r3
 8021afa:	429a      	cmp	r2, r3
 8021afc:	d902      	bls.n	8021b04 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021b02:	e0c5      	b.n	8021c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8021b04:	68fb      	ldr	r3, [r7, #12]
 8021b06:	68ba      	ldr	r2, [r7, #8]
 8021b08:	605a      	str	r2, [r3, #4]
      break;
 8021b0a:	e02b      	b.n	8021b64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8021b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b0e:	889b      	ldrh	r3, [r3, #4]
 8021b10:	b29a      	uxth	r2, r3
 8021b12:	693b      	ldr	r3, [r7, #16]
 8021b14:	889b      	ldrh	r3, [r3, #4]
 8021b16:	b29b      	uxth	r3, r3
 8021b18:	429a      	cmp	r2, r3
 8021b1a:	d102      	bne.n	8021b22 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021b20:	e0b6      	b.n	8021c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8021b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b24:	889b      	ldrh	r3, [r3, #4]
 8021b26:	b29a      	uxth	r2, r3
 8021b28:	693b      	ldr	r3, [r7, #16]
 8021b2a:	88db      	ldrh	r3, [r3, #6]
 8021b2c:	b29b      	uxth	r3, r3
 8021b2e:	429a      	cmp	r2, r3
 8021b30:	d202      	bcs.n	8021b38 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021b36:	e0ab      	b.n	8021c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8021b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b3a:	2b00      	cmp	r3, #0
 8021b3c:	d009      	beq.n	8021b52 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8021b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b40:	88db      	ldrh	r3, [r3, #6]
 8021b42:	b29a      	uxth	r2, r3
 8021b44:	693b      	ldr	r3, [r7, #16]
 8021b46:	889b      	ldrh	r3, [r3, #4]
 8021b48:	b29b      	uxth	r3, r3
 8021b4a:	429a      	cmp	r2, r3
 8021b4c:	d001      	beq.n	8021b52 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021b4e:	2300      	movs	r3, #0
 8021b50:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8021b52:	693b      	ldr	r3, [r7, #16]
 8021b54:	681b      	ldr	r3, [r3, #0]
 8021b56:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8021b58:	693b      	ldr	r3, [r7, #16]
 8021b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8021b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	d193      	bne.n	8021a8a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8021b62:	e000      	b.n	8021b66 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8021b64:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8021b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d12d      	bne.n	8021bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8021b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b6e:	2b00      	cmp	r3, #0
 8021b70:	d01c      	beq.n	8021bac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8021b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b74:	88db      	ldrh	r3, [r3, #6]
 8021b76:	b29a      	uxth	r2, r3
 8021b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b7a:	889b      	ldrh	r3, [r3, #4]
 8021b7c:	b29b      	uxth	r3, r3
 8021b7e:	429a      	cmp	r2, r3
 8021b80:	d906      	bls.n	8021b90 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8021b82:	4b45      	ldr	r3, [pc, #276]	; (8021c98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021b84:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8021b88:	4944      	ldr	r1, [pc, #272]	; (8021c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8021b8a:	4845      	ldr	r0, [pc, #276]	; (8021ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021b8c:	f002 f8f8 	bl	8023d80 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8021b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b92:	68ba      	ldr	r2, [r7, #8]
 8021b94:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8021b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b98:	88db      	ldrh	r3, [r3, #6]
 8021b9a:	b29a      	uxth	r2, r3
 8021b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b9e:	889b      	ldrh	r3, [r3, #4]
 8021ba0:	b29b      	uxth	r3, r3
 8021ba2:	429a      	cmp	r2, r3
 8021ba4:	d010      	beq.n	8021bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8021ba6:	2300      	movs	r3, #0
 8021ba8:	623b      	str	r3, [r7, #32]
 8021baa:	e00d      	b.n	8021bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8021bac:	68fb      	ldr	r3, [r7, #12]
 8021bae:	685b      	ldr	r3, [r3, #4]
 8021bb0:	2b00      	cmp	r3, #0
 8021bb2:	d006      	beq.n	8021bc2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8021bb4:	4b38      	ldr	r3, [pc, #224]	; (8021c98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021bb6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8021bba:	493a      	ldr	r1, [pc, #232]	; (8021ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8021bbc:	4838      	ldr	r0, [pc, #224]	; (8021ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021bbe:	f002 f8df 	bl	8023d80 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8021bc2:	68fb      	ldr	r3, [r7, #12]
 8021bc4:	68ba      	ldr	r2, [r7, #8]
 8021bc6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8021bc8:	687b      	ldr	r3, [r7, #4]
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d105      	bne.n	8021bda <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8021bce:	68fb      	ldr	r3, [r7, #12]
 8021bd0:	7f9b      	ldrb	r3, [r3, #30]
 8021bd2:	f003 0301 	and.w	r3, r3, #1
 8021bd6:	2b00      	cmp	r3, #0
 8021bd8:	d059      	beq.n	8021c8e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8021bda:	6a3b      	ldr	r3, [r7, #32]
 8021bdc:	2b00      	cmp	r3, #0
 8021bde:	d04f      	beq.n	8021c80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8021be0:	68fb      	ldr	r3, [r7, #12]
 8021be2:	685b      	ldr	r3, [r3, #4]
 8021be4:	2b00      	cmp	r3, #0
 8021be6:	d006      	beq.n	8021bf6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8021be8:	68fb      	ldr	r3, [r7, #12]
 8021bea:	685b      	ldr	r3, [r3, #4]
 8021bec:	685b      	ldr	r3, [r3, #4]
 8021bee:	889b      	ldrh	r3, [r3, #4]
 8021bf0:	b29b      	uxth	r3, r3
 8021bf2:	2b00      	cmp	r3, #0
 8021bf4:	d002      	beq.n	8021bfc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8021bf6:	2300      	movs	r3, #0
 8021bf8:	623b      	str	r3, [r7, #32]
 8021bfa:	e041      	b.n	8021c80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8021bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021bfe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8021c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c02:	681b      	ldr	r3, [r3, #0]
 8021c04:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021c06:	e012      	b.n	8021c2e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8021c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c0a:	685b      	ldr	r3, [r3, #4]
 8021c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8021c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c10:	88db      	ldrh	r3, [r3, #6]
 8021c12:	b29a      	uxth	r2, r3
 8021c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c16:	889b      	ldrh	r3, [r3, #4]
 8021c18:	b29b      	uxth	r3, r3
 8021c1a:	429a      	cmp	r2, r3
 8021c1c:	d002      	beq.n	8021c24 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8021c1e:	2300      	movs	r3, #0
 8021c20:	623b      	str	r3, [r7, #32]
            break;
 8021c22:	e007      	b.n	8021c34 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8021c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c26:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8021c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c2a:	681b      	ldr	r3, [r3, #0]
 8021c2c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c30:	2b00      	cmp	r3, #0
 8021c32:	d1e9      	bne.n	8021c08 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8021c34:	6a3b      	ldr	r3, [r7, #32]
 8021c36:	2b00      	cmp	r3, #0
 8021c38:	d022      	beq.n	8021c80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8021c3a:	68fb      	ldr	r3, [r7, #12]
 8021c3c:	685b      	ldr	r3, [r3, #4]
 8021c3e:	2b00      	cmp	r3, #0
 8021c40:	d106      	bne.n	8021c50 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8021c42:	4b15      	ldr	r3, [pc, #84]	; (8021c98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021c44:	f240 12df 	movw	r2, #479	; 0x1df
 8021c48:	4917      	ldr	r1, [pc, #92]	; (8021ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021c4a:	4815      	ldr	r0, [pc, #84]	; (8021ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021c4c:	f002 f898 	bl	8023d80 <iprintf>
          LWIP_ASSERT("sanity check",
 8021c50:	68fb      	ldr	r3, [r7, #12]
 8021c52:	685b      	ldr	r3, [r3, #4]
 8021c54:	685b      	ldr	r3, [r3, #4]
 8021c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021c58:	429a      	cmp	r2, r3
 8021c5a:	d106      	bne.n	8021c6a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8021c5c:	4b0e      	ldr	r3, [pc, #56]	; (8021c98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021c5e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8021c62:	4911      	ldr	r1, [pc, #68]	; (8021ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021c64:	480e      	ldr	r0, [pc, #56]	; (8021ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021c66:	f002 f88b 	bl	8023d80 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8021c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c6c:	681b      	ldr	r3, [r3, #0]
 8021c6e:	2b00      	cmp	r3, #0
 8021c70:	d006      	beq.n	8021c80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8021c72:	4b09      	ldr	r3, [pc, #36]	; (8021c98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021c74:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8021c78:	490c      	ldr	r1, [pc, #48]	; (8021cac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8021c7a:	4809      	ldr	r0, [pc, #36]	; (8021ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021c7c:	f002 f880 	bl	8023d80 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8021c80:	6a3b      	ldr	r3, [r7, #32]
 8021c82:	2b00      	cmp	r3, #0
 8021c84:	bf14      	ite	ne
 8021c86:	2301      	movne	r3, #1
 8021c88:	2300      	moveq	r3, #0
 8021c8a:	b2db      	uxtb	r3, r3
 8021c8c:	e000      	b.n	8021c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8021c8e:	2300      	movs	r3, #0
}
 8021c90:	4618      	mov	r0, r3
 8021c92:	3730      	adds	r7, #48	; 0x30
 8021c94:	46bd      	mov	sp, r7
 8021c96:	bd80      	pop	{r7, pc}
 8021c98:	08028534 	.word	0x08028534
 8021c9c:	08028618 	.word	0x08028618
 8021ca0:	0802857c 	.word	0x0802857c
 8021ca4:	08028638 	.word	0x08028638
 8021ca8:	08028670 	.word	0x08028670
 8021cac:	08028680 	.word	0x08028680

08021cb0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8021cb0:	b580      	push	{r7, lr}
 8021cb2:	b08e      	sub	sp, #56	; 0x38
 8021cb4:	af00      	add	r7, sp, #0
 8021cb6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8021cb8:	687b      	ldr	r3, [r7, #4]
 8021cba:	685b      	ldr	r3, [r3, #4]
 8021cbc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8021cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cc0:	781b      	ldrb	r3, [r3, #0]
 8021cc2:	f003 030f 	and.w	r3, r3, #15
 8021cc6:	b2db      	uxtb	r3, r3
 8021cc8:	009b      	lsls	r3, r3, #2
 8021cca:	b2db      	uxtb	r3, r3
 8021ccc:	2b14      	cmp	r3, #20
 8021cce:	f040 8171 	bne.w	8021fb4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8021cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cd4:	88db      	ldrh	r3, [r3, #6]
 8021cd6:	b29b      	uxth	r3, r3
 8021cd8:	4618      	mov	r0, r3
 8021cda:	f7f5 fa27 	bl	801712c <lwip_htons>
 8021cde:	4603      	mov	r3, r0
 8021ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021ce4:	b29b      	uxth	r3, r3
 8021ce6:	00db      	lsls	r3, r3, #3
 8021ce8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cec:	885b      	ldrh	r3, [r3, #2]
 8021cee:	b29b      	uxth	r3, r3
 8021cf0:	4618      	mov	r0, r3
 8021cf2:	f7f5 fa1b 	bl	801712c <lwip_htons>
 8021cf6:	4603      	mov	r3, r0
 8021cf8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8021cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cfc:	781b      	ldrb	r3, [r3, #0]
 8021cfe:	f003 030f 	and.w	r3, r3, #15
 8021d02:	b2db      	uxtb	r3, r3
 8021d04:	009b      	lsls	r3, r3, #2
 8021d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8021d0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021d0e:	b29b      	uxth	r3, r3
 8021d10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021d12:	429a      	cmp	r2, r3
 8021d14:	f0c0 8150 	bcc.w	8021fb8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8021d18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021d1c:	b29b      	uxth	r3, r3
 8021d1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021d20:	1ad3      	subs	r3, r2, r3
 8021d22:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8021d24:	6878      	ldr	r0, [r7, #4]
 8021d26:	f7f6 fe81 	bl	8018a2c <pbuf_clen>
 8021d2a:	4603      	mov	r3, r0
 8021d2c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8021d2e:	4b8c      	ldr	r3, [pc, #560]	; (8021f60 <ip4_reass+0x2b0>)
 8021d30:	881b      	ldrh	r3, [r3, #0]
 8021d32:	461a      	mov	r2, r3
 8021d34:	8c3b      	ldrh	r3, [r7, #32]
 8021d36:	4413      	add	r3, r2
 8021d38:	2b0a      	cmp	r3, #10
 8021d3a:	dd10      	ble.n	8021d5e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021d3c:	8c3b      	ldrh	r3, [r7, #32]
 8021d3e:	4619      	mov	r1, r3
 8021d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021d42:	f7ff fd81 	bl	8021848 <ip_reass_remove_oldest_datagram>
 8021d46:	4603      	mov	r3, r0
 8021d48:	2b00      	cmp	r3, #0
 8021d4a:	f000 8137 	beq.w	8021fbc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8021d4e:	4b84      	ldr	r3, [pc, #528]	; (8021f60 <ip4_reass+0x2b0>)
 8021d50:	881b      	ldrh	r3, [r3, #0]
 8021d52:	461a      	mov	r2, r3
 8021d54:	8c3b      	ldrh	r3, [r7, #32]
 8021d56:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021d58:	2b0a      	cmp	r3, #10
 8021d5a:	f300 812f 	bgt.w	8021fbc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021d5e:	4b81      	ldr	r3, [pc, #516]	; (8021f64 <ip4_reass+0x2b4>)
 8021d60:	681b      	ldr	r3, [r3, #0]
 8021d62:	633b      	str	r3, [r7, #48]	; 0x30
 8021d64:	e015      	b.n	8021d92 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8021d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d68:	695a      	ldr	r2, [r3, #20]
 8021d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d6c:	68db      	ldr	r3, [r3, #12]
 8021d6e:	429a      	cmp	r2, r3
 8021d70:	d10c      	bne.n	8021d8c <ip4_reass+0xdc>
 8021d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d74:	699a      	ldr	r2, [r3, #24]
 8021d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d78:	691b      	ldr	r3, [r3, #16]
 8021d7a:	429a      	cmp	r2, r3
 8021d7c:	d106      	bne.n	8021d8c <ip4_reass+0xdc>
 8021d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d80:	899a      	ldrh	r2, [r3, #12]
 8021d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d84:	889b      	ldrh	r3, [r3, #4]
 8021d86:	b29b      	uxth	r3, r3
 8021d88:	429a      	cmp	r2, r3
 8021d8a:	d006      	beq.n	8021d9a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d8e:	681b      	ldr	r3, [r3, #0]
 8021d90:	633b      	str	r3, [r7, #48]	; 0x30
 8021d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d94:	2b00      	cmp	r3, #0
 8021d96:	d1e6      	bne.n	8021d66 <ip4_reass+0xb6>
 8021d98:	e000      	b.n	8021d9c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8021d9a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8021d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d9e:	2b00      	cmp	r3, #0
 8021da0:	d109      	bne.n	8021db6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8021da2:	8c3b      	ldrh	r3, [r7, #32]
 8021da4:	4619      	mov	r1, r3
 8021da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021da8:	f7ff fdb0 	bl	802190c <ip_reass_enqueue_new_datagram>
 8021dac:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8021dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021db0:	2b00      	cmp	r3, #0
 8021db2:	d11c      	bne.n	8021dee <ip4_reass+0x13e>
      goto nullreturn;
 8021db4:	e105      	b.n	8021fc2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021db8:	88db      	ldrh	r3, [r3, #6]
 8021dba:	b29b      	uxth	r3, r3
 8021dbc:	4618      	mov	r0, r3
 8021dbe:	f7f5 f9b5 	bl	801712c <lwip_htons>
 8021dc2:	4603      	mov	r3, r0
 8021dc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021dc8:	2b00      	cmp	r3, #0
 8021dca:	d110      	bne.n	8021dee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8021dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dce:	89db      	ldrh	r3, [r3, #14]
 8021dd0:	4618      	mov	r0, r3
 8021dd2:	f7f5 f9ab 	bl	801712c <lwip_htons>
 8021dd6:	4603      	mov	r3, r0
 8021dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021ddc:	2b00      	cmp	r3, #0
 8021dde:	d006      	beq.n	8021dee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8021de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021de2:	3308      	adds	r3, #8
 8021de4:	2214      	movs	r2, #20
 8021de6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021de8:	4618      	mov	r0, r3
 8021dea:	f001 feb9 	bl	8023b60 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8021dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021df0:	88db      	ldrh	r3, [r3, #6]
 8021df2:	b29b      	uxth	r3, r3
 8021df4:	f003 0320 	and.w	r3, r3, #32
 8021df8:	2b00      	cmp	r3, #0
 8021dfa:	bf0c      	ite	eq
 8021dfc:	2301      	moveq	r3, #1
 8021dfe:	2300      	movne	r3, #0
 8021e00:	b2db      	uxtb	r3, r3
 8021e02:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8021e04:	69fb      	ldr	r3, [r7, #28]
 8021e06:	2b00      	cmp	r3, #0
 8021e08:	d00e      	beq.n	8021e28 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8021e0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021e0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021e0e:	4413      	add	r3, r2
 8021e10:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8021e12:	8b7a      	ldrh	r2, [r7, #26]
 8021e14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021e16:	429a      	cmp	r2, r3
 8021e18:	f0c0 80a0 	bcc.w	8021f5c <ip4_reass+0x2ac>
 8021e1c:	8b7b      	ldrh	r3, [r7, #26]
 8021e1e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8021e22:	4293      	cmp	r3, r2
 8021e24:	f200 809a 	bhi.w	8021f5c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8021e28:	69fa      	ldr	r2, [r7, #28]
 8021e2a:	6879      	ldr	r1, [r7, #4]
 8021e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021e2e:	f7ff fdd5 	bl	80219dc <ip_reass_chain_frag_into_datagram_and_validate>
 8021e32:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8021e34:	697b      	ldr	r3, [r7, #20]
 8021e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8021e3a:	f000 809b 	beq.w	8021f74 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8021e3e:	4b48      	ldr	r3, [pc, #288]	; (8021f60 <ip4_reass+0x2b0>)
 8021e40:	881a      	ldrh	r2, [r3, #0]
 8021e42:	8c3b      	ldrh	r3, [r7, #32]
 8021e44:	4413      	add	r3, r2
 8021e46:	b29a      	uxth	r2, r3
 8021e48:	4b45      	ldr	r3, [pc, #276]	; (8021f60 <ip4_reass+0x2b0>)
 8021e4a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8021e4c:	69fb      	ldr	r3, [r7, #28]
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	d00d      	beq.n	8021e6e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8021e52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021e54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021e56:	4413      	add	r3, r2
 8021e58:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8021e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e5c:	8a7a      	ldrh	r2, [r7, #18]
 8021e5e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8021e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e62:	7f9b      	ldrb	r3, [r3, #30]
 8021e64:	f043 0301 	orr.w	r3, r3, #1
 8021e68:	b2da      	uxtb	r2, r3
 8021e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e6c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8021e6e:	697b      	ldr	r3, [r7, #20]
 8021e70:	2b01      	cmp	r3, #1
 8021e72:	d171      	bne.n	8021f58 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8021e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e76:	8b9b      	ldrh	r3, [r3, #28]
 8021e78:	3314      	adds	r3, #20
 8021e7a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8021e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e7e:	685b      	ldr	r3, [r3, #4]
 8021e80:	685b      	ldr	r3, [r3, #4]
 8021e82:	681b      	ldr	r3, [r3, #0]
 8021e84:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8021e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e88:	685b      	ldr	r3, [r3, #4]
 8021e8a:	685b      	ldr	r3, [r3, #4]
 8021e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8021e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e90:	3308      	adds	r3, #8
 8021e92:	2214      	movs	r2, #20
 8021e94:	4619      	mov	r1, r3
 8021e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021e98:	f001 fe62 	bl	8023b60 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8021e9c:	8a3b      	ldrh	r3, [r7, #16]
 8021e9e:	4618      	mov	r0, r3
 8021ea0:	f7f5 f944 	bl	801712c <lwip_htons>
 8021ea4:	4603      	mov	r3, r0
 8021ea6:	461a      	mov	r2, r3
 8021ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021eaa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8021eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021eae:	2200      	movs	r2, #0
 8021eb0:	719a      	strb	r2, [r3, #6]
 8021eb2:	2200      	movs	r2, #0
 8021eb4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8021eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021eb8:	2200      	movs	r2, #0
 8021eba:	729a      	strb	r2, [r3, #10]
 8021ebc:	2200      	movs	r2, #0
 8021ebe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8021ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ec2:	685b      	ldr	r3, [r3, #4]
 8021ec4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8021ec6:	e00d      	b.n	8021ee4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8021ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021eca:	685b      	ldr	r3, [r3, #4]
 8021ecc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8021ece:	2114      	movs	r1, #20
 8021ed0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8021ed2:	f7f6 fc97 	bl	8018804 <pbuf_remove_header>
      pbuf_cat(p, r);
 8021ed6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021ed8:	6878      	ldr	r0, [r7, #4]
 8021eda:	f7f6 fde7 	bl	8018aac <pbuf_cat>
      r = iprh->next_pbuf;
 8021ede:	68fb      	ldr	r3, [r7, #12]
 8021ee0:	681b      	ldr	r3, [r3, #0]
 8021ee2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8021ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021ee6:	2b00      	cmp	r3, #0
 8021ee8:	d1ee      	bne.n	8021ec8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8021eea:	4b1e      	ldr	r3, [pc, #120]	; (8021f64 <ip4_reass+0x2b4>)
 8021eec:	681b      	ldr	r3, [r3, #0]
 8021eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021ef0:	429a      	cmp	r2, r3
 8021ef2:	d102      	bne.n	8021efa <ip4_reass+0x24a>
      ipr_prev = NULL;
 8021ef4:	2300      	movs	r3, #0
 8021ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021ef8:	e010      	b.n	8021f1c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021efa:	4b1a      	ldr	r3, [pc, #104]	; (8021f64 <ip4_reass+0x2b4>)
 8021efc:	681b      	ldr	r3, [r3, #0]
 8021efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021f00:	e007      	b.n	8021f12 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8021f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f04:	681b      	ldr	r3, [r3, #0]
 8021f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021f08:	429a      	cmp	r2, r3
 8021f0a:	d006      	beq.n	8021f1a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f0e:	681b      	ldr	r3, [r3, #0]
 8021f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f14:	2b00      	cmp	r3, #0
 8021f16:	d1f4      	bne.n	8021f02 <ip4_reass+0x252>
 8021f18:	e000      	b.n	8021f1c <ip4_reass+0x26c>
          break;
 8021f1a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8021f1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021f20:	f7ff fd2e 	bl	8021980 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8021f24:	6878      	ldr	r0, [r7, #4]
 8021f26:	f7f6 fd81 	bl	8018a2c <pbuf_clen>
 8021f2a:	4603      	mov	r3, r0
 8021f2c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8021f2e:	4b0c      	ldr	r3, [pc, #48]	; (8021f60 <ip4_reass+0x2b0>)
 8021f30:	881b      	ldrh	r3, [r3, #0]
 8021f32:	8c3a      	ldrh	r2, [r7, #32]
 8021f34:	429a      	cmp	r2, r3
 8021f36:	d906      	bls.n	8021f46 <ip4_reass+0x296>
 8021f38:	4b0b      	ldr	r3, [pc, #44]	; (8021f68 <ip4_reass+0x2b8>)
 8021f3a:	f240 229b 	movw	r2, #667	; 0x29b
 8021f3e:	490b      	ldr	r1, [pc, #44]	; (8021f6c <ip4_reass+0x2bc>)
 8021f40:	480b      	ldr	r0, [pc, #44]	; (8021f70 <ip4_reass+0x2c0>)
 8021f42:	f001 ff1d 	bl	8023d80 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8021f46:	4b06      	ldr	r3, [pc, #24]	; (8021f60 <ip4_reass+0x2b0>)
 8021f48:	881a      	ldrh	r2, [r3, #0]
 8021f4a:	8c3b      	ldrh	r3, [r7, #32]
 8021f4c:	1ad3      	subs	r3, r2, r3
 8021f4e:	b29a      	uxth	r2, r3
 8021f50:	4b03      	ldr	r3, [pc, #12]	; (8021f60 <ip4_reass+0x2b0>)
 8021f52:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8021f54:	687b      	ldr	r3, [r7, #4]
 8021f56:	e038      	b.n	8021fca <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8021f58:	2300      	movs	r3, #0
 8021f5a:	e036      	b.n	8021fca <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8021f5c:	bf00      	nop
 8021f5e:	e00a      	b.n	8021f76 <ip4_reass+0x2c6>
 8021f60:	2000c0f0 	.word	0x2000c0f0
 8021f64:	2000c0ec 	.word	0x2000c0ec
 8021f68:	08028534 	.word	0x08028534
 8021f6c:	080286a4 	.word	0x080286a4
 8021f70:	0802857c 	.word	0x0802857c
    goto nullreturn_ipr;
 8021f74:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8021f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f78:	2b00      	cmp	r3, #0
 8021f7a:	d106      	bne.n	8021f8a <ip4_reass+0x2da>
 8021f7c:	4b15      	ldr	r3, [pc, #84]	; (8021fd4 <ip4_reass+0x324>)
 8021f7e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8021f82:	4915      	ldr	r1, [pc, #84]	; (8021fd8 <ip4_reass+0x328>)
 8021f84:	4815      	ldr	r0, [pc, #84]	; (8021fdc <ip4_reass+0x32c>)
 8021f86:	f001 fefb 	bl	8023d80 <iprintf>
  if (ipr->p == NULL) {
 8021f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f8c:	685b      	ldr	r3, [r3, #4]
 8021f8e:	2b00      	cmp	r3, #0
 8021f90:	d116      	bne.n	8021fc0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8021f92:	4b13      	ldr	r3, [pc, #76]	; (8021fe0 <ip4_reass+0x330>)
 8021f94:	681b      	ldr	r3, [r3, #0]
 8021f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021f98:	429a      	cmp	r2, r3
 8021f9a:	d006      	beq.n	8021faa <ip4_reass+0x2fa>
 8021f9c:	4b0d      	ldr	r3, [pc, #52]	; (8021fd4 <ip4_reass+0x324>)
 8021f9e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8021fa2:	4910      	ldr	r1, [pc, #64]	; (8021fe4 <ip4_reass+0x334>)
 8021fa4:	480d      	ldr	r0, [pc, #52]	; (8021fdc <ip4_reass+0x32c>)
 8021fa6:	f001 feeb 	bl	8023d80 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8021faa:	2100      	movs	r1, #0
 8021fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021fae:	f7ff fce7 	bl	8021980 <ip_reass_dequeue_datagram>
 8021fb2:	e006      	b.n	8021fc2 <ip4_reass+0x312>
    goto nullreturn;
 8021fb4:	bf00      	nop
 8021fb6:	e004      	b.n	8021fc2 <ip4_reass+0x312>
    goto nullreturn;
 8021fb8:	bf00      	nop
 8021fba:	e002      	b.n	8021fc2 <ip4_reass+0x312>
      goto nullreturn;
 8021fbc:	bf00      	nop
 8021fbe:	e000      	b.n	8021fc2 <ip4_reass+0x312>
  }

nullreturn:
 8021fc0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8021fc2:	6878      	ldr	r0, [r7, #4]
 8021fc4:	f7f6 fca4 	bl	8018910 <pbuf_free>
  return NULL;
 8021fc8:	2300      	movs	r3, #0
}
 8021fca:	4618      	mov	r0, r3
 8021fcc:	3738      	adds	r7, #56	; 0x38
 8021fce:	46bd      	mov	sp, r7
 8021fd0:	bd80      	pop	{r7, pc}
 8021fd2:	bf00      	nop
 8021fd4:	08028534 	.word	0x08028534
 8021fd8:	080286c0 	.word	0x080286c0
 8021fdc:	0802857c 	.word	0x0802857c
 8021fe0:	2000c0ec 	.word	0x2000c0ec
 8021fe4:	080286cc 	.word	0x080286cc

08021fe8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8021fe8:	b580      	push	{r7, lr}
 8021fea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8021fec:	2005      	movs	r0, #5
 8021fee:	f7f5 fd75 	bl	8017adc <memp_malloc>
 8021ff2:	4603      	mov	r3, r0
}
 8021ff4:	4618      	mov	r0, r3
 8021ff6:	bd80      	pop	{r7, pc}

08021ff8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8021ff8:	b580      	push	{r7, lr}
 8021ffa:	b082      	sub	sp, #8
 8021ffc:	af00      	add	r7, sp, #0
 8021ffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8022000:	687b      	ldr	r3, [r7, #4]
 8022002:	2b00      	cmp	r3, #0
 8022004:	d106      	bne.n	8022014 <ip_frag_free_pbuf_custom_ref+0x1c>
 8022006:	4b07      	ldr	r3, [pc, #28]	; (8022024 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8022008:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 802200c:	4906      	ldr	r1, [pc, #24]	; (8022028 <ip_frag_free_pbuf_custom_ref+0x30>)
 802200e:	4807      	ldr	r0, [pc, #28]	; (802202c <ip_frag_free_pbuf_custom_ref+0x34>)
 8022010:	f001 feb6 	bl	8023d80 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8022014:	6879      	ldr	r1, [r7, #4]
 8022016:	2005      	movs	r0, #5
 8022018:	f7f5 fdd6 	bl	8017bc8 <memp_free>
}
 802201c:	bf00      	nop
 802201e:	3708      	adds	r7, #8
 8022020:	46bd      	mov	sp, r7
 8022022:	bd80      	pop	{r7, pc}
 8022024:	08028534 	.word	0x08028534
 8022028:	080286ec 	.word	0x080286ec
 802202c:	0802857c 	.word	0x0802857c

08022030 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8022030:	b580      	push	{r7, lr}
 8022032:	b084      	sub	sp, #16
 8022034:	af00      	add	r7, sp, #0
 8022036:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8022038:	687b      	ldr	r3, [r7, #4]
 802203a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 802203c:	68fb      	ldr	r3, [r7, #12]
 802203e:	2b00      	cmp	r3, #0
 8022040:	d106      	bne.n	8022050 <ipfrag_free_pbuf_custom+0x20>
 8022042:	4b11      	ldr	r3, [pc, #68]	; (8022088 <ipfrag_free_pbuf_custom+0x58>)
 8022044:	f240 22ce 	movw	r2, #718	; 0x2ce
 8022048:	4910      	ldr	r1, [pc, #64]	; (802208c <ipfrag_free_pbuf_custom+0x5c>)
 802204a:	4811      	ldr	r0, [pc, #68]	; (8022090 <ipfrag_free_pbuf_custom+0x60>)
 802204c:	f001 fe98 	bl	8023d80 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8022050:	68fa      	ldr	r2, [r7, #12]
 8022052:	687b      	ldr	r3, [r7, #4]
 8022054:	429a      	cmp	r2, r3
 8022056:	d006      	beq.n	8022066 <ipfrag_free_pbuf_custom+0x36>
 8022058:	4b0b      	ldr	r3, [pc, #44]	; (8022088 <ipfrag_free_pbuf_custom+0x58>)
 802205a:	f240 22cf 	movw	r2, #719	; 0x2cf
 802205e:	490d      	ldr	r1, [pc, #52]	; (8022094 <ipfrag_free_pbuf_custom+0x64>)
 8022060:	480b      	ldr	r0, [pc, #44]	; (8022090 <ipfrag_free_pbuf_custom+0x60>)
 8022062:	f001 fe8d 	bl	8023d80 <iprintf>
  if (pcr->original != NULL) {
 8022066:	68fb      	ldr	r3, [r7, #12]
 8022068:	695b      	ldr	r3, [r3, #20]
 802206a:	2b00      	cmp	r3, #0
 802206c:	d004      	beq.n	8022078 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 802206e:	68fb      	ldr	r3, [r7, #12]
 8022070:	695b      	ldr	r3, [r3, #20]
 8022072:	4618      	mov	r0, r3
 8022074:	f7f6 fc4c 	bl	8018910 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8022078:	68f8      	ldr	r0, [r7, #12]
 802207a:	f7ff ffbd 	bl	8021ff8 <ip_frag_free_pbuf_custom_ref>
}
 802207e:	bf00      	nop
 8022080:	3710      	adds	r7, #16
 8022082:	46bd      	mov	sp, r7
 8022084:	bd80      	pop	{r7, pc}
 8022086:	bf00      	nop
 8022088:	08028534 	.word	0x08028534
 802208c:	080286f8 	.word	0x080286f8
 8022090:	0802857c 	.word	0x0802857c
 8022094:	08028704 	.word	0x08028704

08022098 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8022098:	b580      	push	{r7, lr}
 802209a:	b094      	sub	sp, #80	; 0x50
 802209c:	af02      	add	r7, sp, #8
 802209e:	60f8      	str	r0, [r7, #12]
 80220a0:	60b9      	str	r1, [r7, #8]
 80220a2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80220a4:	2300      	movs	r3, #0
 80220a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80220aa:	68bb      	ldr	r3, [r7, #8]
 80220ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80220ae:	3b14      	subs	r3, #20
 80220b0:	2b00      	cmp	r3, #0
 80220b2:	da00      	bge.n	80220b6 <ip4_frag+0x1e>
 80220b4:	3307      	adds	r3, #7
 80220b6:	10db      	asrs	r3, r3, #3
 80220b8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80220ba:	2314      	movs	r3, #20
 80220bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80220be:	68fb      	ldr	r3, [r7, #12]
 80220c0:	685b      	ldr	r3, [r3, #4]
 80220c2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80220c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80220c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80220c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220ca:	781b      	ldrb	r3, [r3, #0]
 80220cc:	f003 030f 	and.w	r3, r3, #15
 80220d0:	b2db      	uxtb	r3, r3
 80220d2:	009b      	lsls	r3, r3, #2
 80220d4:	b2db      	uxtb	r3, r3
 80220d6:	2b14      	cmp	r3, #20
 80220d8:	d002      	beq.n	80220e0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80220da:	f06f 0305 	mvn.w	r3, #5
 80220de:	e110      	b.n	8022302 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80220e0:	68fb      	ldr	r3, [r7, #12]
 80220e2:	895b      	ldrh	r3, [r3, #10]
 80220e4:	2b13      	cmp	r3, #19
 80220e6:	d809      	bhi.n	80220fc <ip4_frag+0x64>
 80220e8:	4b88      	ldr	r3, [pc, #544]	; (802230c <ip4_frag+0x274>)
 80220ea:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80220ee:	4988      	ldr	r1, [pc, #544]	; (8022310 <ip4_frag+0x278>)
 80220f0:	4888      	ldr	r0, [pc, #544]	; (8022314 <ip4_frag+0x27c>)
 80220f2:	f001 fe45 	bl	8023d80 <iprintf>
 80220f6:	f06f 0305 	mvn.w	r3, #5
 80220fa:	e102      	b.n	8022302 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80220fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220fe:	88db      	ldrh	r3, [r3, #6]
 8022100:	b29b      	uxth	r3, r3
 8022102:	4618      	mov	r0, r3
 8022104:	f7f5 f812 	bl	801712c <lwip_htons>
 8022108:	4603      	mov	r3, r0
 802210a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 802210c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802210e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022112:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8022116:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802211c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 802211e:	68fb      	ldr	r3, [r7, #12]
 8022120:	891b      	ldrh	r3, [r3, #8]
 8022122:	3b14      	subs	r3, #20
 8022124:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8022128:	e0e1      	b.n	80222ee <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802212a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802212c:	00db      	lsls	r3, r3, #3
 802212e:	b29b      	uxth	r3, r3
 8022130:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8022134:	4293      	cmp	r3, r2
 8022136:	bf28      	it	cs
 8022138:	4613      	movcs	r3, r2
 802213a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 802213c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022140:	2114      	movs	r1, #20
 8022142:	200e      	movs	r0, #14
 8022144:	f7f6 f900 	bl	8018348 <pbuf_alloc>
 8022148:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 802214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802214c:	2b00      	cmp	r3, #0
 802214e:	f000 80d5 	beq.w	80222fc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8022152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022154:	895b      	ldrh	r3, [r3, #10]
 8022156:	2b13      	cmp	r3, #19
 8022158:	d806      	bhi.n	8022168 <ip4_frag+0xd0>
 802215a:	4b6c      	ldr	r3, [pc, #432]	; (802230c <ip4_frag+0x274>)
 802215c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8022160:	496d      	ldr	r1, [pc, #436]	; (8022318 <ip4_frag+0x280>)
 8022162:	486c      	ldr	r0, [pc, #432]	; (8022314 <ip4_frag+0x27c>)
 8022164:	f001 fe0c 	bl	8023d80 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8022168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802216a:	685b      	ldr	r3, [r3, #4]
 802216c:	2214      	movs	r2, #20
 802216e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8022170:	4618      	mov	r0, r3
 8022172:	f001 fcf5 	bl	8023b60 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8022176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022178:	685b      	ldr	r3, [r3, #4]
 802217a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 802217c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802217e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8022182:	e064      	b.n	802224e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8022184:	68fb      	ldr	r3, [r7, #12]
 8022186:	895a      	ldrh	r2, [r3, #10]
 8022188:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802218a:	1ad3      	subs	r3, r2, r3
 802218c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802218e:	68fb      	ldr	r3, [r7, #12]
 8022190:	895b      	ldrh	r3, [r3, #10]
 8022192:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8022194:	429a      	cmp	r2, r3
 8022196:	d906      	bls.n	80221a6 <ip4_frag+0x10e>
 8022198:	4b5c      	ldr	r3, [pc, #368]	; (802230c <ip4_frag+0x274>)
 802219a:	f240 322d 	movw	r2, #813	; 0x32d
 802219e:	495f      	ldr	r1, [pc, #380]	; (802231c <ip4_frag+0x284>)
 80221a0:	485c      	ldr	r0, [pc, #368]	; (8022314 <ip4_frag+0x27c>)
 80221a2:	f001 fded 	bl	8023d80 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80221a6:	8bfa      	ldrh	r2, [r7, #30]
 80221a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80221ac:	4293      	cmp	r3, r2
 80221ae:	bf28      	it	cs
 80221b0:	4613      	movcs	r3, r2
 80221b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80221b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80221ba:	2b00      	cmp	r3, #0
 80221bc:	d105      	bne.n	80221ca <ip4_frag+0x132>
        poff = 0;
 80221be:	2300      	movs	r3, #0
 80221c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80221c2:	68fb      	ldr	r3, [r7, #12]
 80221c4:	681b      	ldr	r3, [r3, #0]
 80221c6:	60fb      	str	r3, [r7, #12]
        continue;
 80221c8:	e041      	b.n	802224e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80221ca:	f7ff ff0d 	bl	8021fe8 <ip_frag_alloc_pbuf_custom_ref>
 80221ce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80221d0:	69bb      	ldr	r3, [r7, #24]
 80221d2:	2b00      	cmp	r3, #0
 80221d4:	d103      	bne.n	80221de <ip4_frag+0x146>
        pbuf_free(rambuf);
 80221d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80221d8:	f7f6 fb9a 	bl	8018910 <pbuf_free>
        goto memerr;
 80221dc:	e08f      	b.n	80222fe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80221de:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80221e0:	68fb      	ldr	r3, [r7, #12]
 80221e2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80221e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80221e6:	4413      	add	r3, r2
 80221e8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80221ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80221f0:	9201      	str	r2, [sp, #4]
 80221f2:	9300      	str	r3, [sp, #0]
 80221f4:	4603      	mov	r3, r0
 80221f6:	2241      	movs	r2, #65	; 0x41
 80221f8:	2000      	movs	r0, #0
 80221fa:	f7f6 f9cf 	bl	801859c <pbuf_alloced_custom>
 80221fe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8022200:	697b      	ldr	r3, [r7, #20]
 8022202:	2b00      	cmp	r3, #0
 8022204:	d106      	bne.n	8022214 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8022206:	69b8      	ldr	r0, [r7, #24]
 8022208:	f7ff fef6 	bl	8021ff8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 802220c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802220e:	f7f6 fb7f 	bl	8018910 <pbuf_free>
        goto memerr;
 8022212:	e074      	b.n	80222fe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8022214:	68f8      	ldr	r0, [r7, #12]
 8022216:	f7f6 fc21 	bl	8018a5c <pbuf_ref>
      pcr->original = p;
 802221a:	69bb      	ldr	r3, [r7, #24]
 802221c:	68fa      	ldr	r2, [r7, #12]
 802221e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8022220:	69bb      	ldr	r3, [r7, #24]
 8022222:	4a3f      	ldr	r2, [pc, #252]	; (8022320 <ip4_frag+0x288>)
 8022224:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8022226:	6979      	ldr	r1, [r7, #20]
 8022228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802222a:	f7f6 fc3f 	bl	8018aac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802222e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8022232:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8022236:	1ad3      	subs	r3, r2, r3
 8022238:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 802223c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8022240:	2b00      	cmp	r3, #0
 8022242:	d004      	beq.n	802224e <ip4_frag+0x1b6>
        poff = 0;
 8022244:	2300      	movs	r3, #0
 8022246:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8022248:	68fb      	ldr	r3, [r7, #12]
 802224a:	681b      	ldr	r3, [r3, #0]
 802224c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 802224e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8022252:	2b00      	cmp	r3, #0
 8022254:	d196      	bne.n	8022184 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8022256:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8022258:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802225c:	4413      	add	r3, r2
 802225e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8022260:	68bb      	ldr	r3, [r7, #8]
 8022262:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8022264:	f1a3 0213 	sub.w	r2, r3, #19
 8022268:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802226c:	429a      	cmp	r2, r3
 802226e:	bfcc      	ite	gt
 8022270:	2301      	movgt	r3, #1
 8022272:	2300      	movle	r3, #0
 8022274:	b2db      	uxtb	r3, r3
 8022276:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8022278:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802227c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022280:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8022282:	6a3b      	ldr	r3, [r7, #32]
 8022284:	2b00      	cmp	r3, #0
 8022286:	d002      	beq.n	802228e <ip4_frag+0x1f6>
 8022288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802228a:	2b00      	cmp	r3, #0
 802228c:	d003      	beq.n	8022296 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 802228e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022290:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022294:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8022296:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022298:	4618      	mov	r0, r3
 802229a:	f7f4 ff47 	bl	801712c <lwip_htons>
 802229e:	4603      	mov	r3, r0
 80222a0:	461a      	mov	r2, r3
 80222a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222a4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80222a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80222a8:	3314      	adds	r3, #20
 80222aa:	b29b      	uxth	r3, r3
 80222ac:	4618      	mov	r0, r3
 80222ae:	f7f4 ff3d 	bl	801712c <lwip_htons>
 80222b2:	4603      	mov	r3, r0
 80222b4:	461a      	mov	r2, r3
 80222b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222b8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80222ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222bc:	2200      	movs	r2, #0
 80222be:	729a      	strb	r2, [r3, #10]
 80222c0:	2200      	movs	r2, #0
 80222c2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80222c4:	68bb      	ldr	r3, [r7, #8]
 80222c6:	695b      	ldr	r3, [r3, #20]
 80222c8:	687a      	ldr	r2, [r7, #4]
 80222ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80222cc:	68b8      	ldr	r0, [r7, #8]
 80222ce:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80222d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80222d2:	f7f6 fb1d 	bl	8018910 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80222d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80222da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80222dc:	1ad3      	subs	r3, r2, r3
 80222de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80222e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80222e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80222e8:	4413      	add	r3, r2
 80222ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80222ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80222f2:	2b00      	cmp	r3, #0
 80222f4:	f47f af19 	bne.w	802212a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80222f8:	2300      	movs	r3, #0
 80222fa:	e002      	b.n	8022302 <ip4_frag+0x26a>
      goto memerr;
 80222fc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80222fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8022302:	4618      	mov	r0, r3
 8022304:	3748      	adds	r7, #72	; 0x48
 8022306:	46bd      	mov	sp, r7
 8022308:	bd80      	pop	{r7, pc}
 802230a:	bf00      	nop
 802230c:	08028534 	.word	0x08028534
 8022310:	08028710 	.word	0x08028710
 8022314:	0802857c 	.word	0x0802857c
 8022318:	0802872c 	.word	0x0802872c
 802231c:	0802874c 	.word	0x0802874c
 8022320:	08022031 	.word	0x08022031

08022324 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8022324:	b580      	push	{r7, lr}
 8022326:	b086      	sub	sp, #24
 8022328:	af00      	add	r7, sp, #0
 802232a:	6078      	str	r0, [r7, #4]
 802232c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802232e:	230e      	movs	r3, #14
 8022330:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8022332:	687b      	ldr	r3, [r7, #4]
 8022334:	895b      	ldrh	r3, [r3, #10]
 8022336:	2b0e      	cmp	r3, #14
 8022338:	d96e      	bls.n	8022418 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802233a:	687b      	ldr	r3, [r7, #4]
 802233c:	7bdb      	ldrb	r3, [r3, #15]
 802233e:	2b00      	cmp	r3, #0
 8022340:	d106      	bne.n	8022350 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8022342:	683b      	ldr	r3, [r7, #0]
 8022344:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022348:	3301      	adds	r3, #1
 802234a:	b2da      	uxtb	r2, r3
 802234c:	687b      	ldr	r3, [r7, #4]
 802234e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	685b      	ldr	r3, [r3, #4]
 8022354:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8022356:	693b      	ldr	r3, [r7, #16]
 8022358:	7b1a      	ldrb	r2, [r3, #12]
 802235a:	7b5b      	ldrb	r3, [r3, #13]
 802235c:	021b      	lsls	r3, r3, #8
 802235e:	4313      	orrs	r3, r2
 8022360:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8022362:	693b      	ldr	r3, [r7, #16]
 8022364:	781b      	ldrb	r3, [r3, #0]
 8022366:	f003 0301 	and.w	r3, r3, #1
 802236a:	2b00      	cmp	r3, #0
 802236c:	d023      	beq.n	80223b6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802236e:	693b      	ldr	r3, [r7, #16]
 8022370:	781b      	ldrb	r3, [r3, #0]
 8022372:	2b01      	cmp	r3, #1
 8022374:	d10f      	bne.n	8022396 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022376:	693b      	ldr	r3, [r7, #16]
 8022378:	785b      	ldrb	r3, [r3, #1]
 802237a:	2b00      	cmp	r3, #0
 802237c:	d11b      	bne.n	80223b6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 802237e:	693b      	ldr	r3, [r7, #16]
 8022380:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022382:	2b5e      	cmp	r3, #94	; 0x5e
 8022384:	d117      	bne.n	80223b6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8022386:	687b      	ldr	r3, [r7, #4]
 8022388:	7b5b      	ldrb	r3, [r3, #13]
 802238a:	f043 0310 	orr.w	r3, r3, #16
 802238e:	b2da      	uxtb	r2, r3
 8022390:	687b      	ldr	r3, [r7, #4]
 8022392:	735a      	strb	r2, [r3, #13]
 8022394:	e00f      	b.n	80223b6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8022396:	693b      	ldr	r3, [r7, #16]
 8022398:	2206      	movs	r2, #6
 802239a:	4928      	ldr	r1, [pc, #160]	; (802243c <ethernet_input+0x118>)
 802239c:	4618      	mov	r0, r3
 802239e:	f001 fbcf 	bl	8023b40 <memcmp>
 80223a2:	4603      	mov	r3, r0
 80223a4:	2b00      	cmp	r3, #0
 80223a6:	d106      	bne.n	80223b6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80223a8:	687b      	ldr	r3, [r7, #4]
 80223aa:	7b5b      	ldrb	r3, [r3, #13]
 80223ac:	f043 0308 	orr.w	r3, r3, #8
 80223b0:	b2da      	uxtb	r2, r3
 80223b2:	687b      	ldr	r3, [r7, #4]
 80223b4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80223b6:	89fb      	ldrh	r3, [r7, #14]
 80223b8:	2b08      	cmp	r3, #8
 80223ba:	d003      	beq.n	80223c4 <ethernet_input+0xa0>
 80223bc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80223c0:	d014      	beq.n	80223ec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80223c2:	e032      	b.n	802242a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80223c4:	683b      	ldr	r3, [r7, #0]
 80223c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80223ca:	f003 0308 	and.w	r3, r3, #8
 80223ce:	2b00      	cmp	r3, #0
 80223d0:	d024      	beq.n	802241c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80223d2:	8afb      	ldrh	r3, [r7, #22]
 80223d4:	4619      	mov	r1, r3
 80223d6:	6878      	ldr	r0, [r7, #4]
 80223d8:	f7f6 fa14 	bl	8018804 <pbuf_remove_header>
 80223dc:	4603      	mov	r3, r0
 80223de:	2b00      	cmp	r3, #0
 80223e0:	d11e      	bne.n	8022420 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80223e2:	6839      	ldr	r1, [r7, #0]
 80223e4:	6878      	ldr	r0, [r7, #4]
 80223e6:	f7fe ff21 	bl	802122c <ip4_input>
      break;
 80223ea:	e013      	b.n	8022414 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80223ec:	683b      	ldr	r3, [r7, #0]
 80223ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80223f2:	f003 0308 	and.w	r3, r3, #8
 80223f6:	2b00      	cmp	r3, #0
 80223f8:	d014      	beq.n	8022424 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80223fa:	8afb      	ldrh	r3, [r7, #22]
 80223fc:	4619      	mov	r1, r3
 80223fe:	6878      	ldr	r0, [r7, #4]
 8022400:	f7f6 fa00 	bl	8018804 <pbuf_remove_header>
 8022404:	4603      	mov	r3, r0
 8022406:	2b00      	cmp	r3, #0
 8022408:	d10e      	bne.n	8022428 <ethernet_input+0x104>
        etharp_input(p, netif);
 802240a:	6839      	ldr	r1, [r7, #0]
 802240c:	6878      	ldr	r0, [r7, #4]
 802240e:	f7fe f8c1 	bl	8020594 <etharp_input>
      break;
 8022412:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8022414:	2300      	movs	r3, #0
 8022416:	e00c      	b.n	8022432 <ethernet_input+0x10e>
    goto free_and_return;
 8022418:	bf00      	nop
 802241a:	e006      	b.n	802242a <ethernet_input+0x106>
        goto free_and_return;
 802241c:	bf00      	nop
 802241e:	e004      	b.n	802242a <ethernet_input+0x106>
        goto free_and_return;
 8022420:	bf00      	nop
 8022422:	e002      	b.n	802242a <ethernet_input+0x106>
        goto free_and_return;
 8022424:	bf00      	nop
 8022426:	e000      	b.n	802242a <ethernet_input+0x106>
        goto free_and_return;
 8022428:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802242a:	6878      	ldr	r0, [r7, #4]
 802242c:	f7f6 fa70 	bl	8018910 <pbuf_free>
  return ERR_OK;
 8022430:	2300      	movs	r3, #0
}
 8022432:	4618      	mov	r0, r3
 8022434:	3718      	adds	r7, #24
 8022436:	46bd      	mov	sp, r7
 8022438:	bd80      	pop	{r7, pc}
 802243a:	bf00      	nop
 802243c:	0802897c 	.word	0x0802897c

08022440 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8022440:	b580      	push	{r7, lr}
 8022442:	b086      	sub	sp, #24
 8022444:	af00      	add	r7, sp, #0
 8022446:	60f8      	str	r0, [r7, #12]
 8022448:	60b9      	str	r1, [r7, #8]
 802244a:	607a      	str	r2, [r7, #4]
 802244c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802244e:	8c3b      	ldrh	r3, [r7, #32]
 8022450:	4618      	mov	r0, r3
 8022452:	f7f4 fe6b 	bl	801712c <lwip_htons>
 8022456:	4603      	mov	r3, r0
 8022458:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 802245a:	210e      	movs	r1, #14
 802245c:	68b8      	ldr	r0, [r7, #8]
 802245e:	f7f6 f9c1 	bl	80187e4 <pbuf_add_header>
 8022462:	4603      	mov	r3, r0
 8022464:	2b00      	cmp	r3, #0
 8022466:	d125      	bne.n	80224b4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8022468:	68bb      	ldr	r3, [r7, #8]
 802246a:	685b      	ldr	r3, [r3, #4]
 802246c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802246e:	693b      	ldr	r3, [r7, #16]
 8022470:	8afa      	ldrh	r2, [r7, #22]
 8022472:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8022474:	693b      	ldr	r3, [r7, #16]
 8022476:	2206      	movs	r2, #6
 8022478:	6839      	ldr	r1, [r7, #0]
 802247a:	4618      	mov	r0, r3
 802247c:	f001 fb70 	bl	8023b60 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8022480:	693b      	ldr	r3, [r7, #16]
 8022482:	3306      	adds	r3, #6
 8022484:	2206      	movs	r2, #6
 8022486:	6879      	ldr	r1, [r7, #4]
 8022488:	4618      	mov	r0, r3
 802248a:	f001 fb69 	bl	8023b60 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802248e:	68fb      	ldr	r3, [r7, #12]
 8022490:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8022494:	2b06      	cmp	r3, #6
 8022496:	d006      	beq.n	80224a6 <ethernet_output+0x66>
 8022498:	4b0a      	ldr	r3, [pc, #40]	; (80224c4 <ethernet_output+0x84>)
 802249a:	f44f 7299 	mov.w	r2, #306	; 0x132
 802249e:	490a      	ldr	r1, [pc, #40]	; (80224c8 <ethernet_output+0x88>)
 80224a0:	480a      	ldr	r0, [pc, #40]	; (80224cc <ethernet_output+0x8c>)
 80224a2:	f001 fc6d 	bl	8023d80 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80224a6:	68fb      	ldr	r3, [r7, #12]
 80224a8:	699b      	ldr	r3, [r3, #24]
 80224aa:	68b9      	ldr	r1, [r7, #8]
 80224ac:	68f8      	ldr	r0, [r7, #12]
 80224ae:	4798      	blx	r3
 80224b0:	4603      	mov	r3, r0
 80224b2:	e002      	b.n	80224ba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80224b4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80224b6:	f06f 0301 	mvn.w	r3, #1
}
 80224ba:	4618      	mov	r0, r3
 80224bc:	3718      	adds	r7, #24
 80224be:	46bd      	mov	sp, r7
 80224c0:	bd80      	pop	{r7, pc}
 80224c2:	bf00      	nop
 80224c4:	0802875c 	.word	0x0802875c
 80224c8:	08028794 	.word	0x08028794
 80224cc:	080287c8 	.word	0x080287c8

080224d0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80224d0:	b580      	push	{r7, lr}
 80224d2:	b086      	sub	sp, #24
 80224d4:	af00      	add	r7, sp, #0
 80224d6:	6078      	str	r0, [r7, #4]
 80224d8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80224da:	683b      	ldr	r3, [r7, #0]
 80224dc:	60bb      	str	r3, [r7, #8]
 80224de:	2304      	movs	r3, #4
 80224e0:	60fb      	str	r3, [r7, #12]
 80224e2:	2300      	movs	r3, #0
 80224e4:	613b      	str	r3, [r7, #16]
 80224e6:	2300      	movs	r3, #0
 80224e8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80224ea:	f107 0308 	add.w	r3, r7, #8
 80224ee:	2100      	movs	r1, #0
 80224f0:	4618      	mov	r0, r3
 80224f2:	f7ef fb6e 	bl	8011bd2 <osMessageCreate>
 80224f6:	4602      	mov	r2, r0
 80224f8:	687b      	ldr	r3, [r7, #4]
 80224fa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80224fc:	687b      	ldr	r3, [r7, #4]
 80224fe:	681b      	ldr	r3, [r3, #0]
 8022500:	2b00      	cmp	r3, #0
 8022502:	d102      	bne.n	802250a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8022504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022508:	e000      	b.n	802250c <sys_mbox_new+0x3c>

  return ERR_OK;
 802250a:	2300      	movs	r3, #0
}
 802250c:	4618      	mov	r0, r3
 802250e:	3718      	adds	r7, #24
 8022510:	46bd      	mov	sp, r7
 8022512:	bd80      	pop	{r7, pc}

08022514 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8022514:	b580      	push	{r7, lr}
 8022516:	b082      	sub	sp, #8
 8022518:	af00      	add	r7, sp, #0
 802251a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 802251c:	687b      	ldr	r3, [r7, #4]
 802251e:	681b      	ldr	r3, [r3, #0]
 8022520:	4618      	mov	r0, r3
 8022522:	f7ef fc33 	bl	8011d8c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8022526:	687b      	ldr	r3, [r7, #4]
 8022528:	681b      	ldr	r3, [r3, #0]
 802252a:	4618      	mov	r0, r3
 802252c:	f7ef fc44 	bl	8011db8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8022530:	bf00      	nop
 8022532:	3708      	adds	r7, #8
 8022534:	46bd      	mov	sp, r7
 8022536:	bd80      	pop	{r7, pc}

08022538 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8022538:	b580      	push	{r7, lr}
 802253a:	b084      	sub	sp, #16
 802253c:	af00      	add	r7, sp, #0
 802253e:	6078      	str	r0, [r7, #4]
 8022540:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8022542:	687b      	ldr	r3, [r7, #4]
 8022544:	681b      	ldr	r3, [r3, #0]
 8022546:	6839      	ldr	r1, [r7, #0]
 8022548:	2200      	movs	r2, #0
 802254a:	4618      	mov	r0, r3
 802254c:	f7ef fb6a 	bl	8011c24 <osMessagePut>
 8022550:	4603      	mov	r3, r0
 8022552:	2b00      	cmp	r3, #0
 8022554:	d102      	bne.n	802255c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8022556:	2300      	movs	r3, #0
 8022558:	73fb      	strb	r3, [r7, #15]
 802255a:	e001      	b.n	8022560 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 802255c:	23ff      	movs	r3, #255	; 0xff
 802255e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8022560:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8022564:	4618      	mov	r0, r3
 8022566:	3710      	adds	r7, #16
 8022568:	46bd      	mov	sp, r7
 802256a:	bd80      	pop	{r7, pc}

0802256c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 802256c:	b580      	push	{r7, lr}
 802256e:	b08c      	sub	sp, #48	; 0x30
 8022570:	af00      	add	r7, sp, #0
 8022572:	61f8      	str	r0, [r7, #28]
 8022574:	61b9      	str	r1, [r7, #24]
 8022576:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8022578:	f7ef f956 	bl	8011828 <osKernelSysTick>
 802257c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 802257e:	697b      	ldr	r3, [r7, #20]
 8022580:	2b00      	cmp	r3, #0
 8022582:	d017      	beq.n	80225b4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8022584:	69fb      	ldr	r3, [r7, #28]
 8022586:	6819      	ldr	r1, [r3, #0]
 8022588:	f107 0320 	add.w	r3, r7, #32
 802258c:	697a      	ldr	r2, [r7, #20]
 802258e:	4618      	mov	r0, r3
 8022590:	f7ef fb88 	bl	8011ca4 <osMessageGet>

    if(event.status == osEventMessage)
 8022594:	6a3b      	ldr	r3, [r7, #32]
 8022596:	2b10      	cmp	r3, #16
 8022598:	d109      	bne.n	80225ae <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 802259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802259c:	461a      	mov	r2, r3
 802259e:	69bb      	ldr	r3, [r7, #24]
 80225a0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80225a2:	f7ef f941 	bl	8011828 <osKernelSysTick>
 80225a6:	4602      	mov	r2, r0
 80225a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80225aa:	1ad3      	subs	r3, r2, r3
 80225ac:	e019      	b.n	80225e2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80225ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80225b2:	e016      	b.n	80225e2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80225b4:	69fb      	ldr	r3, [r7, #28]
 80225b6:	6819      	ldr	r1, [r3, #0]
 80225b8:	463b      	mov	r3, r7
 80225ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80225be:	4618      	mov	r0, r3
 80225c0:	f7ef fb70 	bl	8011ca4 <osMessageGet>
 80225c4:	f107 0320 	add.w	r3, r7, #32
 80225c8:	463a      	mov	r2, r7
 80225ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80225cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80225d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225d2:	461a      	mov	r2, r3
 80225d4:	69bb      	ldr	r3, [r7, #24]
 80225d6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80225d8:	f7ef f926 	bl	8011828 <osKernelSysTick>
 80225dc:	4602      	mov	r2, r0
 80225de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80225e0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80225e2:	4618      	mov	r0, r3
 80225e4:	3730      	adds	r7, #48	; 0x30
 80225e6:	46bd      	mov	sp, r7
 80225e8:	bd80      	pop	{r7, pc}

080225ea <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80225ea:	b580      	push	{r7, lr}
 80225ec:	b086      	sub	sp, #24
 80225ee:	af00      	add	r7, sp, #0
 80225f0:	6078      	str	r0, [r7, #4]
 80225f2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80225f4:	687b      	ldr	r3, [r7, #4]
 80225f6:	6819      	ldr	r1, [r3, #0]
 80225f8:	f107 030c 	add.w	r3, r7, #12
 80225fc:	2200      	movs	r2, #0
 80225fe:	4618      	mov	r0, r3
 8022600:	f7ef fb50 	bl	8011ca4 <osMessageGet>

  if(event.status == osEventMessage)
 8022604:	68fb      	ldr	r3, [r7, #12]
 8022606:	2b10      	cmp	r3, #16
 8022608:	d105      	bne.n	8022616 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 802260a:	693b      	ldr	r3, [r7, #16]
 802260c:	461a      	mov	r2, r3
 802260e:	683b      	ldr	r3, [r7, #0]
 8022610:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8022612:	2300      	movs	r3, #0
 8022614:	e001      	b.n	802261a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8022616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 802261a:	4618      	mov	r0, r3
 802261c:	3718      	adds	r7, #24
 802261e:	46bd      	mov	sp, r7
 8022620:	bd80      	pop	{r7, pc}

08022622 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8022622:	b480      	push	{r7}
 8022624:	b083      	sub	sp, #12
 8022626:	af00      	add	r7, sp, #0
 8022628:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 802262a:	687b      	ldr	r3, [r7, #4]
 802262c:	681b      	ldr	r3, [r3, #0]
 802262e:	2b00      	cmp	r3, #0
 8022630:	d101      	bne.n	8022636 <sys_mbox_valid+0x14>
    return 0;
 8022632:	2300      	movs	r3, #0
 8022634:	e000      	b.n	8022638 <sys_mbox_valid+0x16>
  else
    return 1;
 8022636:	2301      	movs	r3, #1
}
 8022638:	4618      	mov	r0, r3
 802263a:	370c      	adds	r7, #12
 802263c:	46bd      	mov	sp, r7
 802263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022642:	4770      	bx	lr

08022644 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8022644:	b480      	push	{r7}
 8022646:	b083      	sub	sp, #12
 8022648:	af00      	add	r7, sp, #0
 802264a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	2200      	movs	r2, #0
 8022650:	601a      	str	r2, [r3, #0]
}
 8022652:	bf00      	nop
 8022654:	370c      	adds	r7, #12
 8022656:	46bd      	mov	sp, r7
 8022658:	f85d 7b04 	ldr.w	r7, [sp], #4
 802265c:	4770      	bx	lr

0802265e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 802265e:	b580      	push	{r7, lr}
 8022660:	b084      	sub	sp, #16
 8022662:	af00      	add	r7, sp, #0
 8022664:	6078      	str	r0, [r7, #4]
 8022666:	460b      	mov	r3, r1
 8022668:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 802266a:	2300      	movs	r3, #0
 802266c:	60bb      	str	r3, [r7, #8]
 802266e:	2300      	movs	r3, #0
 8022670:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8022672:	f107 0308 	add.w	r3, r7, #8
 8022676:	2101      	movs	r1, #1
 8022678:	4618      	mov	r0, r3
 802267a:	f7ef f9e1 	bl	8011a40 <osSemaphoreCreate>
 802267e:	4602      	mov	r2, r0
 8022680:	687b      	ldr	r3, [r7, #4]
 8022682:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8022684:	687b      	ldr	r3, [r7, #4]
 8022686:	681b      	ldr	r3, [r3, #0]
 8022688:	2b00      	cmp	r3, #0
 802268a:	d102      	bne.n	8022692 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 802268c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022690:	e009      	b.n	80226a6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8022692:	78fb      	ldrb	r3, [r7, #3]
 8022694:	2b00      	cmp	r3, #0
 8022696:	d105      	bne.n	80226a4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	681b      	ldr	r3, [r3, #0]
 802269c:	2100      	movs	r1, #0
 802269e:	4618      	mov	r0, r3
 80226a0:	f7ef fa00 	bl	8011aa4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80226a4:	2300      	movs	r3, #0
}
 80226a6:	4618      	mov	r0, r3
 80226a8:	3710      	adds	r7, #16
 80226aa:	46bd      	mov	sp, r7
 80226ac:	bd80      	pop	{r7, pc}

080226ae <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80226ae:	b580      	push	{r7, lr}
 80226b0:	b084      	sub	sp, #16
 80226b2:	af00      	add	r7, sp, #0
 80226b4:	6078      	str	r0, [r7, #4]
 80226b6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80226b8:	f7ef f8b6 	bl	8011828 <osKernelSysTick>
 80226bc:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80226be:	683b      	ldr	r3, [r7, #0]
 80226c0:	2b00      	cmp	r3, #0
 80226c2:	d011      	beq.n	80226e8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80226c4:	687b      	ldr	r3, [r7, #4]
 80226c6:	681b      	ldr	r3, [r3, #0]
 80226c8:	6839      	ldr	r1, [r7, #0]
 80226ca:	4618      	mov	r0, r3
 80226cc:	f7ef f9ea 	bl	8011aa4 <osSemaphoreWait>
 80226d0:	4603      	mov	r3, r0
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	d105      	bne.n	80226e2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80226d6:	f7ef f8a7 	bl	8011828 <osKernelSysTick>
 80226da:	4602      	mov	r2, r0
 80226dc:	68fb      	ldr	r3, [r7, #12]
 80226de:	1ad3      	subs	r3, r2, r3
 80226e0:	e012      	b.n	8022708 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80226e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80226e6:	e00f      	b.n	8022708 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80226e8:	bf00      	nop
 80226ea:	687b      	ldr	r3, [r7, #4]
 80226ec:	681b      	ldr	r3, [r3, #0]
 80226ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80226f2:	4618      	mov	r0, r3
 80226f4:	f7ef f9d6 	bl	8011aa4 <osSemaphoreWait>
 80226f8:	4603      	mov	r3, r0
 80226fa:	2b00      	cmp	r3, #0
 80226fc:	d1f5      	bne.n	80226ea <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80226fe:	f7ef f893 	bl	8011828 <osKernelSysTick>
 8022702:	4602      	mov	r2, r0
 8022704:	68fb      	ldr	r3, [r7, #12]
 8022706:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8022708:	4618      	mov	r0, r3
 802270a:	3710      	adds	r7, #16
 802270c:	46bd      	mov	sp, r7
 802270e:	bd80      	pop	{r7, pc}

08022710 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8022710:	b580      	push	{r7, lr}
 8022712:	b082      	sub	sp, #8
 8022714:	af00      	add	r7, sp, #0
 8022716:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8022718:	687b      	ldr	r3, [r7, #4]
 802271a:	681b      	ldr	r3, [r3, #0]
 802271c:	4618      	mov	r0, r3
 802271e:	f7ef fa0f 	bl	8011b40 <osSemaphoreRelease>
}
 8022722:	bf00      	nop
 8022724:	3708      	adds	r7, #8
 8022726:	46bd      	mov	sp, r7
 8022728:	bd80      	pop	{r7, pc}

0802272a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 802272a:	b580      	push	{r7, lr}
 802272c:	b082      	sub	sp, #8
 802272e:	af00      	add	r7, sp, #0
 8022730:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8022732:	687b      	ldr	r3, [r7, #4]
 8022734:	681b      	ldr	r3, [r3, #0]
 8022736:	4618      	mov	r0, r3
 8022738:	f7ef fa38 	bl	8011bac <osSemaphoreDelete>
}
 802273c:	bf00      	nop
 802273e:	3708      	adds	r7, #8
 8022740:	46bd      	mov	sp, r7
 8022742:	bd80      	pop	{r7, pc}

08022744 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8022744:	b480      	push	{r7}
 8022746:	b083      	sub	sp, #12
 8022748:	af00      	add	r7, sp, #0
 802274a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	681b      	ldr	r3, [r3, #0]
 8022750:	2b00      	cmp	r3, #0
 8022752:	d101      	bne.n	8022758 <sys_sem_valid+0x14>
    return 0;
 8022754:	2300      	movs	r3, #0
 8022756:	e000      	b.n	802275a <sys_sem_valid+0x16>
  else
    return 1;
 8022758:	2301      	movs	r3, #1
}
 802275a:	4618      	mov	r0, r3
 802275c:	370c      	adds	r7, #12
 802275e:	46bd      	mov	sp, r7
 8022760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022764:	4770      	bx	lr

08022766 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8022766:	b480      	push	{r7}
 8022768:	b083      	sub	sp, #12
 802276a:	af00      	add	r7, sp, #0
 802276c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 802276e:	687b      	ldr	r3, [r7, #4]
 8022770:	2200      	movs	r2, #0
 8022772:	601a      	str	r2, [r3, #0]
}
 8022774:	bf00      	nop
 8022776:	370c      	adds	r7, #12
 8022778:	46bd      	mov	sp, r7
 802277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802277e:	4770      	bx	lr

08022780 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8022780:	b580      	push	{r7, lr}
 8022782:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8022784:	4803      	ldr	r0, [pc, #12]	; (8022794 <sys_init+0x14>)
 8022786:	f7ef f8bf 	bl	8011908 <osMutexCreate>
 802278a:	4603      	mov	r3, r0
 802278c:	4a02      	ldr	r2, [pc, #8]	; (8022798 <sys_init+0x18>)
 802278e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8022790:	bf00      	nop
 8022792:	bd80      	pop	{r7, pc}
 8022794:	0802898c 	.word	0x0802898c
 8022798:	2000c0f4 	.word	0x2000c0f4

0802279c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 802279c:	b580      	push	{r7, lr}
 802279e:	b084      	sub	sp, #16
 80227a0:	af00      	add	r7, sp, #0
 80227a2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80227a4:	2300      	movs	r3, #0
 80227a6:	60bb      	str	r3, [r7, #8]
 80227a8:	2300      	movs	r3, #0
 80227aa:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80227ac:	f107 0308 	add.w	r3, r7, #8
 80227b0:	4618      	mov	r0, r3
 80227b2:	f7ef f8a9 	bl	8011908 <osMutexCreate>
 80227b6:	4602      	mov	r2, r0
 80227b8:	687b      	ldr	r3, [r7, #4]
 80227ba:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	681b      	ldr	r3, [r3, #0]
 80227c0:	2b00      	cmp	r3, #0
 80227c2:	d102      	bne.n	80227ca <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80227c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80227c8:	e000      	b.n	80227cc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80227ca:	2300      	movs	r3, #0
}
 80227cc:	4618      	mov	r0, r3
 80227ce:	3710      	adds	r7, #16
 80227d0:	46bd      	mov	sp, r7
 80227d2:	bd80      	pop	{r7, pc}

080227d4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80227d4:	b580      	push	{r7, lr}
 80227d6:	b082      	sub	sp, #8
 80227d8:	af00      	add	r7, sp, #0
 80227da:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80227dc:	687b      	ldr	r3, [r7, #4]
 80227de:	681b      	ldr	r3, [r3, #0]
 80227e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80227e4:	4618      	mov	r0, r3
 80227e6:	f7ef f8a7 	bl	8011938 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80227ea:	bf00      	nop
 80227ec:	3708      	adds	r7, #8
 80227ee:	46bd      	mov	sp, r7
 80227f0:	bd80      	pop	{r7, pc}

080227f2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80227f2:	b580      	push	{r7, lr}
 80227f4:	b082      	sub	sp, #8
 80227f6:	af00      	add	r7, sp, #0
 80227f8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80227fa:	687b      	ldr	r3, [r7, #4]
 80227fc:	681b      	ldr	r3, [r3, #0]
 80227fe:	4618      	mov	r0, r3
 8022800:	f7ef f8e8 	bl	80119d4 <osMutexRelease>
}
 8022804:	bf00      	nop
 8022806:	3708      	adds	r7, #8
 8022808:	46bd      	mov	sp, r7
 802280a:	bd80      	pop	{r7, pc}

0802280c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 802280c:	b580      	push	{r7, lr}
 802280e:	b08c      	sub	sp, #48	; 0x30
 8022810:	af00      	add	r7, sp, #0
 8022812:	60f8      	str	r0, [r7, #12]
 8022814:	60b9      	str	r1, [r7, #8]
 8022816:	607a      	str	r2, [r7, #4]
 8022818:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 802281a:	f107 0314 	add.w	r3, r7, #20
 802281e:	2200      	movs	r2, #0
 8022820:	601a      	str	r2, [r3, #0]
 8022822:	605a      	str	r2, [r3, #4]
 8022824:	609a      	str	r2, [r3, #8]
 8022826:	60da      	str	r2, [r3, #12]
 8022828:	611a      	str	r2, [r3, #16]
 802282a:	615a      	str	r2, [r3, #20]
 802282c:	619a      	str	r2, [r3, #24]
 802282e:	68fb      	ldr	r3, [r7, #12]
 8022830:	617b      	str	r3, [r7, #20]
 8022832:	68bb      	ldr	r3, [r7, #8]
 8022834:	61bb      	str	r3, [r7, #24]
 8022836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022838:	b21b      	sxth	r3, r3
 802283a:	83bb      	strh	r3, [r7, #28]
 802283c:	683b      	ldr	r3, [r7, #0]
 802283e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8022840:	f107 0314 	add.w	r3, r7, #20
 8022844:	6879      	ldr	r1, [r7, #4]
 8022846:	4618      	mov	r0, r3
 8022848:	f7ee fffe 	bl	8011848 <osThreadCreate>
 802284c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 802284e:	4618      	mov	r0, r3
 8022850:	3730      	adds	r7, #48	; 0x30
 8022852:	46bd      	mov	sp, r7
 8022854:	bd80      	pop	{r7, pc}
	...

08022858 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8022858:	b580      	push	{r7, lr}
 802285a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 802285c:	4b04      	ldr	r3, [pc, #16]	; (8022870 <sys_arch_protect+0x18>)
 802285e:	681b      	ldr	r3, [r3, #0]
 8022860:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022864:	4618      	mov	r0, r3
 8022866:	f7ef f867 	bl	8011938 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 802286a:	2301      	movs	r3, #1
}
 802286c:	4618      	mov	r0, r3
 802286e:	bd80      	pop	{r7, pc}
 8022870:	2000c0f4 	.word	0x2000c0f4

08022874 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8022874:	b580      	push	{r7, lr}
 8022876:	b082      	sub	sp, #8
 8022878:	af00      	add	r7, sp, #0
 802287a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 802287c:	4b04      	ldr	r3, [pc, #16]	; (8022890 <sys_arch_unprotect+0x1c>)
 802287e:	681b      	ldr	r3, [r3, #0]
 8022880:	4618      	mov	r0, r3
 8022882:	f7ef f8a7 	bl	80119d4 <osMutexRelease>
}
 8022886:	bf00      	nop
 8022888:	3708      	adds	r7, #8
 802288a:	46bd      	mov	sp, r7
 802288c:	bd80      	pop	{r7, pc}
 802288e:	bf00      	nop
 8022890:	2000c0f4 	.word	0x2000c0f4

08022894 <_ZdlPvj>:
 8022894:	f000 b8db 	b.w	8022a4e <_ZdlPv>

08022898 <__cxa_guard_acquire>:
 8022898:	6803      	ldr	r3, [r0, #0]
 802289a:	07db      	lsls	r3, r3, #31
 802289c:	d406      	bmi.n	80228ac <__cxa_guard_acquire+0x14>
 802289e:	7843      	ldrb	r3, [r0, #1]
 80228a0:	b103      	cbz	r3, 80228a4 <__cxa_guard_acquire+0xc>
 80228a2:	deff      	udf	#255	; 0xff
 80228a4:	2301      	movs	r3, #1
 80228a6:	7043      	strb	r3, [r0, #1]
 80228a8:	4618      	mov	r0, r3
 80228aa:	4770      	bx	lr
 80228ac:	2000      	movs	r0, #0
 80228ae:	4770      	bx	lr

080228b0 <__cxa_guard_release>:
 80228b0:	2301      	movs	r3, #1
 80228b2:	6003      	str	r3, [r0, #0]
 80228b4:	4770      	bx	lr

080228b6 <_Znwj>:
 80228b6:	2801      	cmp	r0, #1
 80228b8:	bf38      	it	cc
 80228ba:	2001      	movcc	r0, #1
 80228bc:	b510      	push	{r4, lr}
 80228be:	4604      	mov	r4, r0
 80228c0:	4620      	mov	r0, r4
 80228c2:	f001 f92d 	bl	8023b20 <malloc>
 80228c6:	b930      	cbnz	r0, 80228d6 <_Znwj+0x20>
 80228c8:	f000 f8d6 	bl	8022a78 <_ZSt15get_new_handlerv>
 80228cc:	b908      	cbnz	r0, 80228d2 <_Znwj+0x1c>
 80228ce:	f000 fff5 	bl	80238bc <abort>
 80228d2:	4780      	blx	r0
 80228d4:	e7f4      	b.n	80228c0 <_Znwj+0xa>
 80228d6:	bd10      	pop	{r4, pc}

080228d8 <__cxa_pure_virtual>:
 80228d8:	b508      	push	{r3, lr}
 80228da:	f000 f8c7 	bl	8022a6c <_ZSt9terminatev>

080228de <_ZSt17__throw_bad_allocv>:
 80228de:	b508      	push	{r3, lr}
 80228e0:	f000 ffec 	bl	80238bc <abort>

080228e4 <_ZSt19__throw_logic_errorPKc>:
 80228e4:	b508      	push	{r3, lr}
 80228e6:	f000 ffe9 	bl	80238bc <abort>

080228ea <_ZSt20__throw_length_errorPKc>:
 80228ea:	b508      	push	{r3, lr}
 80228ec:	f000 ffe6 	bl	80238bc <abort>

080228f0 <_ZSt24__throw_out_of_range_fmtPKcz>:
 80228f0:	b40f      	push	{r0, r1, r2, r3}
 80228f2:	b580      	push	{r7, lr}
 80228f4:	b084      	sub	sp, #16
 80228f6:	af00      	add	r7, sp, #0
 80228f8:	f107 0418 	add.w	r4, r7, #24
 80228fc:	f854 2b04 	ldr.w	r2, [r4], #4
 8022900:	607a      	str	r2, [r7, #4]
 8022902:	4610      	mov	r0, r2
 8022904:	f7dd fc84 	bl	8000210 <strlen>
 8022908:	f200 2307 	addw	r3, r0, #519	; 0x207
 802290c:	f023 0307 	bic.w	r3, r3, #7
 8022910:	ebad 0d03 	sub.w	sp, sp, r3
 8022914:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8022918:	687a      	ldr	r2, [r7, #4]
 802291a:	60fc      	str	r4, [r7, #12]
 802291c:	4623      	mov	r3, r4
 802291e:	4668      	mov	r0, sp
 8022920:	f000 f854 	bl	80229cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8022924:	f000 ffca 	bl	80238bc <abort>

08022928 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8022928:	b580      	push	{r7, lr}
 802292a:	b09c      	sub	sp, #112	; 0x70
 802292c:	4606      	mov	r6, r0
 802292e:	af00      	add	r7, sp, #0
 8022930:	460c      	mov	r4, r1
 8022932:	1ba4      	subs	r4, r4, r6
 8022934:	490e      	ldr	r1, [pc, #56]	; (8022970 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8022936:	2269      	movs	r2, #105	; 0x69
 8022938:	1d38      	adds	r0, r7, #4
 802293a:	f001 f911 	bl	8023b60 <memcpy>
 802293e:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8022942:	f023 0307 	bic.w	r3, r3, #7
 8022946:	ebad 0d03 	sub.w	sp, sp, r3
 802294a:	466d      	mov	r5, sp
 802294c:	2268      	movs	r2, #104	; 0x68
 802294e:	1d39      	adds	r1, r7, #4
 8022950:	4628      	mov	r0, r5
 8022952:	f001 f905 	bl	8023b60 <memcpy>
 8022956:	4622      	mov	r2, r4
 8022958:	4631      	mov	r1, r6
 802295a:	f105 0068 	add.w	r0, r5, #104	; 0x68
 802295e:	442c      	add	r4, r5
 8022960:	f001 f8fe 	bl	8023b60 <memcpy>
 8022964:	2300      	movs	r3, #0
 8022966:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 802296a:	4628      	mov	r0, r5
 802296c:	f7ff ffba 	bl	80228e4 <_ZSt19__throw_logic_errorPKc>
 8022970:	08028994 	.word	0x08028994

08022974 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8022974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022978:	af00      	add	r7, sp, #0
 802297a:	b084      	sub	sp, #16
 802297c:	466d      	mov	r5, sp
 802297e:	f105 040c 	add.w	r4, r5, #12
 8022982:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80229c8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8022986:	4623      	mov	r3, r4
 8022988:	f04f 0c0a 	mov.w	ip, #10
 802298c:	fbb2 f6fc 	udiv	r6, r2, ip
 8022990:	fb0c 2e16 	mls	lr, ip, r6, r2
 8022994:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8022998:	f803 ed01 	strb.w	lr, [r3, #-1]!
 802299c:	4696      	mov	lr, r2
 802299e:	f1be 0f09 	cmp.w	lr, #9
 80229a2:	4632      	mov	r2, r6
 80229a4:	d8f2      	bhi.n	802298c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 80229a6:	1ae4      	subs	r4, r4, r3
 80229a8:	428c      	cmp	r4, r1
 80229aa:	d809      	bhi.n	80229c0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80229ac:	f1c4 030c 	rsb	r3, r4, #12
 80229b0:	4622      	mov	r2, r4
 80229b2:	18e9      	adds	r1, r5, r3
 80229b4:	f001 f8d4 	bl	8023b60 <memcpy>
 80229b8:	4620      	mov	r0, r4
 80229ba:	46bd      	mov	sp, r7
 80229bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80229c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80229c4:	e7f8      	b.n	80229b8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80229c6:	bf00      	nop
 80229c8:	080289fd 	.word	0x080289fd

080229cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80229cc:	3901      	subs	r1, #1
 80229ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80229d2:	4607      	mov	r7, r0
 80229d4:	4615      	mov	r5, r2
 80229d6:	eb00 0801 	add.w	r8, r0, r1
 80229da:	4604      	mov	r4, r0
 80229dc:	782a      	ldrb	r2, [r5, #0]
 80229de:	b392      	cbz	r2, 8022a46 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80229e0:	4544      	cmp	r4, r8
 80229e2:	d22a      	bcs.n	8022a3a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80229e4:	2a25      	cmp	r2, #37	; 0x25
 80229e6:	d107      	bne.n	80229f8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80229e8:	786a      	ldrb	r2, [r5, #1]
 80229ea:	2a73      	cmp	r2, #115	; 0x73
 80229ec:	d009      	beq.n	8022a02 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80229ee:	2a7a      	cmp	r2, #122	; 0x7a
 80229f0:	d012      	beq.n	8022a18 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 80229f2:	2a25      	cmp	r2, #37	; 0x25
 80229f4:	d100      	bne.n	80229f8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80229f6:	3501      	adds	r5, #1
 80229f8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80229fc:	f804 2b01 	strb.w	r2, [r4], #1
 8022a00:	e7ec      	b.n	80229dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8022a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8022a06:	3a01      	subs	r2, #1
 8022a08:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8022a0c:	b1c9      	cbz	r1, 8022a42 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8022a0e:	4544      	cmp	r4, r8
 8022a10:	d013      	beq.n	8022a3a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8022a12:	f804 1b01 	strb.w	r1, [r4], #1
 8022a16:	e7f7      	b.n	8022a08 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8022a18:	78aa      	ldrb	r2, [r5, #2]
 8022a1a:	2a75      	cmp	r2, #117	; 0x75
 8022a1c:	d1ec      	bne.n	80229f8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8022a1e:	461e      	mov	r6, r3
 8022a20:	eba8 0104 	sub.w	r1, r8, r4
 8022a24:	f856 2b04 	ldr.w	r2, [r6], #4
 8022a28:	4620      	mov	r0, r4
 8022a2a:	f7ff ffa3 	bl	8022974 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8022a2e:	2800      	cmp	r0, #0
 8022a30:	dd03      	ble.n	8022a3a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8022a32:	4404      	add	r4, r0
 8022a34:	3503      	adds	r5, #3
 8022a36:	4633      	mov	r3, r6
 8022a38:	e7d0      	b.n	80229dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8022a3a:	4621      	mov	r1, r4
 8022a3c:	4638      	mov	r0, r7
 8022a3e:	f7ff ff73 	bl	8022928 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8022a42:	3502      	adds	r5, #2
 8022a44:	e7ca      	b.n	80229dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8022a46:	7022      	strb	r2, [r4, #0]
 8022a48:	1be0      	subs	r0, r4, r7
 8022a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08022a4e <_ZdlPv>:
 8022a4e:	f001 b86f 	b.w	8023b30 <free>

08022a52 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8022a52:	b508      	push	{r3, lr}
 8022a54:	4780      	blx	r0
 8022a56:	f000 ff31 	bl	80238bc <abort>
	...

08022a5c <_ZSt13get_terminatev>:
 8022a5c:	4b02      	ldr	r3, [pc, #8]	; (8022a68 <_ZSt13get_terminatev+0xc>)
 8022a5e:	6818      	ldr	r0, [r3, #0]
 8022a60:	f3bf 8f5b 	dmb	ish
 8022a64:	4770      	bx	lr
 8022a66:	bf00      	nop
 8022a68:	20000038 	.word	0x20000038

08022a6c <_ZSt9terminatev>:
 8022a6c:	b508      	push	{r3, lr}
 8022a6e:	f7ff fff5 	bl	8022a5c <_ZSt13get_terminatev>
 8022a72:	f7ff ffee 	bl	8022a52 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08022a78 <_ZSt15get_new_handlerv>:
 8022a78:	4b02      	ldr	r3, [pc, #8]	; (8022a84 <_ZSt15get_new_handlerv+0xc>)
 8022a7a:	6818      	ldr	r0, [r3, #0]
 8022a7c:	f3bf 8f5b 	dmb	ish
 8022a80:	4770      	bx	lr
 8022a82:	bf00      	nop
 8022a84:	2000c0f8 	.word	0x2000c0f8

08022a88 <pow>:
 8022a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a8a:	ed2d 8b02 	vpush	{d8}
 8022a8e:	eeb0 8a40 	vmov.f32	s16, s0
 8022a92:	eef0 8a60 	vmov.f32	s17, s1
 8022a96:	ec55 4b11 	vmov	r4, r5, d1
 8022a9a:	f000 f865 	bl	8022b68 <__ieee754_pow>
 8022a9e:	4622      	mov	r2, r4
 8022aa0:	462b      	mov	r3, r5
 8022aa2:	4620      	mov	r0, r4
 8022aa4:	4629      	mov	r1, r5
 8022aa6:	ec57 6b10 	vmov	r6, r7, d0
 8022aaa:	f7de f85f 	bl	8000b6c <__aeabi_dcmpun>
 8022aae:	2800      	cmp	r0, #0
 8022ab0:	d13b      	bne.n	8022b2a <pow+0xa2>
 8022ab2:	ec51 0b18 	vmov	r0, r1, d8
 8022ab6:	2200      	movs	r2, #0
 8022ab8:	2300      	movs	r3, #0
 8022aba:	f7de f825 	bl	8000b08 <__aeabi_dcmpeq>
 8022abe:	b1b8      	cbz	r0, 8022af0 <pow+0x68>
 8022ac0:	2200      	movs	r2, #0
 8022ac2:	2300      	movs	r3, #0
 8022ac4:	4620      	mov	r0, r4
 8022ac6:	4629      	mov	r1, r5
 8022ac8:	f7de f81e 	bl	8000b08 <__aeabi_dcmpeq>
 8022acc:	2800      	cmp	r0, #0
 8022ace:	d146      	bne.n	8022b5e <pow+0xd6>
 8022ad0:	ec45 4b10 	vmov	d0, r4, r5
 8022ad4:	f000 fe61 	bl	802379a <finite>
 8022ad8:	b338      	cbz	r0, 8022b2a <pow+0xa2>
 8022ada:	2200      	movs	r2, #0
 8022adc:	2300      	movs	r3, #0
 8022ade:	4620      	mov	r0, r4
 8022ae0:	4629      	mov	r1, r5
 8022ae2:	f7de f81b 	bl	8000b1c <__aeabi_dcmplt>
 8022ae6:	b300      	cbz	r0, 8022b2a <pow+0xa2>
 8022ae8:	f000 fef6 	bl	80238d8 <__errno>
 8022aec:	2322      	movs	r3, #34	; 0x22
 8022aee:	e01b      	b.n	8022b28 <pow+0xa0>
 8022af0:	ec47 6b10 	vmov	d0, r6, r7
 8022af4:	f000 fe51 	bl	802379a <finite>
 8022af8:	b9e0      	cbnz	r0, 8022b34 <pow+0xac>
 8022afa:	eeb0 0a48 	vmov.f32	s0, s16
 8022afe:	eef0 0a68 	vmov.f32	s1, s17
 8022b02:	f000 fe4a 	bl	802379a <finite>
 8022b06:	b1a8      	cbz	r0, 8022b34 <pow+0xac>
 8022b08:	ec45 4b10 	vmov	d0, r4, r5
 8022b0c:	f000 fe45 	bl	802379a <finite>
 8022b10:	b180      	cbz	r0, 8022b34 <pow+0xac>
 8022b12:	4632      	mov	r2, r6
 8022b14:	463b      	mov	r3, r7
 8022b16:	4630      	mov	r0, r6
 8022b18:	4639      	mov	r1, r7
 8022b1a:	f7de f827 	bl	8000b6c <__aeabi_dcmpun>
 8022b1e:	2800      	cmp	r0, #0
 8022b20:	d0e2      	beq.n	8022ae8 <pow+0x60>
 8022b22:	f000 fed9 	bl	80238d8 <__errno>
 8022b26:	2321      	movs	r3, #33	; 0x21
 8022b28:	6003      	str	r3, [r0, #0]
 8022b2a:	ecbd 8b02 	vpop	{d8}
 8022b2e:	ec47 6b10 	vmov	d0, r6, r7
 8022b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022b34:	2200      	movs	r2, #0
 8022b36:	2300      	movs	r3, #0
 8022b38:	4630      	mov	r0, r6
 8022b3a:	4639      	mov	r1, r7
 8022b3c:	f7dd ffe4 	bl	8000b08 <__aeabi_dcmpeq>
 8022b40:	2800      	cmp	r0, #0
 8022b42:	d0f2      	beq.n	8022b2a <pow+0xa2>
 8022b44:	eeb0 0a48 	vmov.f32	s0, s16
 8022b48:	eef0 0a68 	vmov.f32	s1, s17
 8022b4c:	f000 fe25 	bl	802379a <finite>
 8022b50:	2800      	cmp	r0, #0
 8022b52:	d0ea      	beq.n	8022b2a <pow+0xa2>
 8022b54:	ec45 4b10 	vmov	d0, r4, r5
 8022b58:	f000 fe1f 	bl	802379a <finite>
 8022b5c:	e7c3      	b.n	8022ae6 <pow+0x5e>
 8022b5e:	4f01      	ldr	r7, [pc, #4]	; (8022b64 <pow+0xdc>)
 8022b60:	2600      	movs	r6, #0
 8022b62:	e7e2      	b.n	8022b2a <pow+0xa2>
 8022b64:	3ff00000 	.word	0x3ff00000

08022b68 <__ieee754_pow>:
 8022b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b6c:	ed2d 8b06 	vpush	{d8-d10}
 8022b70:	b089      	sub	sp, #36	; 0x24
 8022b72:	ed8d 1b00 	vstr	d1, [sp]
 8022b76:	e9dd 2900 	ldrd	r2, r9, [sp]
 8022b7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8022b7e:	ea58 0102 	orrs.w	r1, r8, r2
 8022b82:	ec57 6b10 	vmov	r6, r7, d0
 8022b86:	d115      	bne.n	8022bb4 <__ieee754_pow+0x4c>
 8022b88:	19b3      	adds	r3, r6, r6
 8022b8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8022b8e:	4152      	adcs	r2, r2
 8022b90:	4299      	cmp	r1, r3
 8022b92:	4b89      	ldr	r3, [pc, #548]	; (8022db8 <__ieee754_pow+0x250>)
 8022b94:	4193      	sbcs	r3, r2
 8022b96:	f080 84d2 	bcs.w	802353e <__ieee754_pow+0x9d6>
 8022b9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022b9e:	4630      	mov	r0, r6
 8022ba0:	4639      	mov	r1, r7
 8022ba2:	f7dd fb93 	bl	80002cc <__adddf3>
 8022ba6:	ec41 0b10 	vmov	d0, r0, r1
 8022baa:	b009      	add	sp, #36	; 0x24
 8022bac:	ecbd 8b06 	vpop	{d8-d10}
 8022bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bb4:	4b81      	ldr	r3, [pc, #516]	; (8022dbc <__ieee754_pow+0x254>)
 8022bb6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8022bba:	429c      	cmp	r4, r3
 8022bbc:	ee10 aa10 	vmov	sl, s0
 8022bc0:	463d      	mov	r5, r7
 8022bc2:	dc06      	bgt.n	8022bd2 <__ieee754_pow+0x6a>
 8022bc4:	d101      	bne.n	8022bca <__ieee754_pow+0x62>
 8022bc6:	2e00      	cmp	r6, #0
 8022bc8:	d1e7      	bne.n	8022b9a <__ieee754_pow+0x32>
 8022bca:	4598      	cmp	r8, r3
 8022bcc:	dc01      	bgt.n	8022bd2 <__ieee754_pow+0x6a>
 8022bce:	d10f      	bne.n	8022bf0 <__ieee754_pow+0x88>
 8022bd0:	b172      	cbz	r2, 8022bf0 <__ieee754_pow+0x88>
 8022bd2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8022bd6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8022bda:	ea55 050a 	orrs.w	r5, r5, sl
 8022bde:	d1dc      	bne.n	8022b9a <__ieee754_pow+0x32>
 8022be0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8022be4:	18db      	adds	r3, r3, r3
 8022be6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8022bea:	4152      	adcs	r2, r2
 8022bec:	429d      	cmp	r5, r3
 8022bee:	e7d0      	b.n	8022b92 <__ieee754_pow+0x2a>
 8022bf0:	2d00      	cmp	r5, #0
 8022bf2:	da3b      	bge.n	8022c6c <__ieee754_pow+0x104>
 8022bf4:	4b72      	ldr	r3, [pc, #456]	; (8022dc0 <__ieee754_pow+0x258>)
 8022bf6:	4598      	cmp	r8, r3
 8022bf8:	dc51      	bgt.n	8022c9e <__ieee754_pow+0x136>
 8022bfa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8022bfe:	4598      	cmp	r8, r3
 8022c00:	f340 84ac 	ble.w	802355c <__ieee754_pow+0x9f4>
 8022c04:	ea4f 5328 	mov.w	r3, r8, asr #20
 8022c08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8022c0c:	2b14      	cmp	r3, #20
 8022c0e:	dd0f      	ble.n	8022c30 <__ieee754_pow+0xc8>
 8022c10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8022c14:	fa22 f103 	lsr.w	r1, r2, r3
 8022c18:	fa01 f303 	lsl.w	r3, r1, r3
 8022c1c:	4293      	cmp	r3, r2
 8022c1e:	f040 849d 	bne.w	802355c <__ieee754_pow+0x9f4>
 8022c22:	f001 0101 	and.w	r1, r1, #1
 8022c26:	f1c1 0302 	rsb	r3, r1, #2
 8022c2a:	9304      	str	r3, [sp, #16]
 8022c2c:	b182      	cbz	r2, 8022c50 <__ieee754_pow+0xe8>
 8022c2e:	e05f      	b.n	8022cf0 <__ieee754_pow+0x188>
 8022c30:	2a00      	cmp	r2, #0
 8022c32:	d15b      	bne.n	8022cec <__ieee754_pow+0x184>
 8022c34:	f1c3 0314 	rsb	r3, r3, #20
 8022c38:	fa48 f103 	asr.w	r1, r8, r3
 8022c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8022c40:	4543      	cmp	r3, r8
 8022c42:	f040 8488 	bne.w	8023556 <__ieee754_pow+0x9ee>
 8022c46:	f001 0101 	and.w	r1, r1, #1
 8022c4a:	f1c1 0302 	rsb	r3, r1, #2
 8022c4e:	9304      	str	r3, [sp, #16]
 8022c50:	4b5c      	ldr	r3, [pc, #368]	; (8022dc4 <__ieee754_pow+0x25c>)
 8022c52:	4598      	cmp	r8, r3
 8022c54:	d132      	bne.n	8022cbc <__ieee754_pow+0x154>
 8022c56:	f1b9 0f00 	cmp.w	r9, #0
 8022c5a:	f280 8478 	bge.w	802354e <__ieee754_pow+0x9e6>
 8022c5e:	4959      	ldr	r1, [pc, #356]	; (8022dc4 <__ieee754_pow+0x25c>)
 8022c60:	4632      	mov	r2, r6
 8022c62:	463b      	mov	r3, r7
 8022c64:	2000      	movs	r0, #0
 8022c66:	f7dd fe11 	bl	800088c <__aeabi_ddiv>
 8022c6a:	e79c      	b.n	8022ba6 <__ieee754_pow+0x3e>
 8022c6c:	2300      	movs	r3, #0
 8022c6e:	9304      	str	r3, [sp, #16]
 8022c70:	2a00      	cmp	r2, #0
 8022c72:	d13d      	bne.n	8022cf0 <__ieee754_pow+0x188>
 8022c74:	4b51      	ldr	r3, [pc, #324]	; (8022dbc <__ieee754_pow+0x254>)
 8022c76:	4598      	cmp	r8, r3
 8022c78:	d1ea      	bne.n	8022c50 <__ieee754_pow+0xe8>
 8022c7a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8022c7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8022c82:	ea53 030a 	orrs.w	r3, r3, sl
 8022c86:	f000 845a 	beq.w	802353e <__ieee754_pow+0x9d6>
 8022c8a:	4b4f      	ldr	r3, [pc, #316]	; (8022dc8 <__ieee754_pow+0x260>)
 8022c8c:	429c      	cmp	r4, r3
 8022c8e:	dd08      	ble.n	8022ca2 <__ieee754_pow+0x13a>
 8022c90:	f1b9 0f00 	cmp.w	r9, #0
 8022c94:	f2c0 8457 	blt.w	8023546 <__ieee754_pow+0x9de>
 8022c98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022c9c:	e783      	b.n	8022ba6 <__ieee754_pow+0x3e>
 8022c9e:	2302      	movs	r3, #2
 8022ca0:	e7e5      	b.n	8022c6e <__ieee754_pow+0x106>
 8022ca2:	f1b9 0f00 	cmp.w	r9, #0
 8022ca6:	f04f 0000 	mov.w	r0, #0
 8022caa:	f04f 0100 	mov.w	r1, #0
 8022cae:	f6bf af7a 	bge.w	8022ba6 <__ieee754_pow+0x3e>
 8022cb2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8022cb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022cba:	e774      	b.n	8022ba6 <__ieee754_pow+0x3e>
 8022cbc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8022cc0:	d106      	bne.n	8022cd0 <__ieee754_pow+0x168>
 8022cc2:	4632      	mov	r2, r6
 8022cc4:	463b      	mov	r3, r7
 8022cc6:	4630      	mov	r0, r6
 8022cc8:	4639      	mov	r1, r7
 8022cca:	f7dd fcb5 	bl	8000638 <__aeabi_dmul>
 8022cce:	e76a      	b.n	8022ba6 <__ieee754_pow+0x3e>
 8022cd0:	4b3e      	ldr	r3, [pc, #248]	; (8022dcc <__ieee754_pow+0x264>)
 8022cd2:	4599      	cmp	r9, r3
 8022cd4:	d10c      	bne.n	8022cf0 <__ieee754_pow+0x188>
 8022cd6:	2d00      	cmp	r5, #0
 8022cd8:	db0a      	blt.n	8022cf0 <__ieee754_pow+0x188>
 8022cda:	ec47 6b10 	vmov	d0, r6, r7
 8022cde:	b009      	add	sp, #36	; 0x24
 8022ce0:	ecbd 8b06 	vpop	{d8-d10}
 8022ce4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ce8:	f000 bc6c 	b.w	80235c4 <__ieee754_sqrt>
 8022cec:	2300      	movs	r3, #0
 8022cee:	9304      	str	r3, [sp, #16]
 8022cf0:	ec47 6b10 	vmov	d0, r6, r7
 8022cf4:	f000 fd48 	bl	8023788 <fabs>
 8022cf8:	ec51 0b10 	vmov	r0, r1, d0
 8022cfc:	f1ba 0f00 	cmp.w	sl, #0
 8022d00:	d129      	bne.n	8022d56 <__ieee754_pow+0x1ee>
 8022d02:	b124      	cbz	r4, 8022d0e <__ieee754_pow+0x1a6>
 8022d04:	4b2f      	ldr	r3, [pc, #188]	; (8022dc4 <__ieee754_pow+0x25c>)
 8022d06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8022d0a:	429a      	cmp	r2, r3
 8022d0c:	d123      	bne.n	8022d56 <__ieee754_pow+0x1ee>
 8022d0e:	f1b9 0f00 	cmp.w	r9, #0
 8022d12:	da05      	bge.n	8022d20 <__ieee754_pow+0x1b8>
 8022d14:	4602      	mov	r2, r0
 8022d16:	460b      	mov	r3, r1
 8022d18:	2000      	movs	r0, #0
 8022d1a:	492a      	ldr	r1, [pc, #168]	; (8022dc4 <__ieee754_pow+0x25c>)
 8022d1c:	f7dd fdb6 	bl	800088c <__aeabi_ddiv>
 8022d20:	2d00      	cmp	r5, #0
 8022d22:	f6bf af40 	bge.w	8022ba6 <__ieee754_pow+0x3e>
 8022d26:	9b04      	ldr	r3, [sp, #16]
 8022d28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8022d2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8022d30:	4323      	orrs	r3, r4
 8022d32:	d108      	bne.n	8022d46 <__ieee754_pow+0x1de>
 8022d34:	4602      	mov	r2, r0
 8022d36:	460b      	mov	r3, r1
 8022d38:	4610      	mov	r0, r2
 8022d3a:	4619      	mov	r1, r3
 8022d3c:	f7dd fac4 	bl	80002c8 <__aeabi_dsub>
 8022d40:	4602      	mov	r2, r0
 8022d42:	460b      	mov	r3, r1
 8022d44:	e78f      	b.n	8022c66 <__ieee754_pow+0xfe>
 8022d46:	9b04      	ldr	r3, [sp, #16]
 8022d48:	2b01      	cmp	r3, #1
 8022d4a:	f47f af2c 	bne.w	8022ba6 <__ieee754_pow+0x3e>
 8022d4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022d52:	4619      	mov	r1, r3
 8022d54:	e727      	b.n	8022ba6 <__ieee754_pow+0x3e>
 8022d56:	0feb      	lsrs	r3, r5, #31
 8022d58:	3b01      	subs	r3, #1
 8022d5a:	9306      	str	r3, [sp, #24]
 8022d5c:	9a06      	ldr	r2, [sp, #24]
 8022d5e:	9b04      	ldr	r3, [sp, #16]
 8022d60:	4313      	orrs	r3, r2
 8022d62:	d102      	bne.n	8022d6a <__ieee754_pow+0x202>
 8022d64:	4632      	mov	r2, r6
 8022d66:	463b      	mov	r3, r7
 8022d68:	e7e6      	b.n	8022d38 <__ieee754_pow+0x1d0>
 8022d6a:	4b19      	ldr	r3, [pc, #100]	; (8022dd0 <__ieee754_pow+0x268>)
 8022d6c:	4598      	cmp	r8, r3
 8022d6e:	f340 80fb 	ble.w	8022f68 <__ieee754_pow+0x400>
 8022d72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8022d76:	4598      	cmp	r8, r3
 8022d78:	4b13      	ldr	r3, [pc, #76]	; (8022dc8 <__ieee754_pow+0x260>)
 8022d7a:	dd0c      	ble.n	8022d96 <__ieee754_pow+0x22e>
 8022d7c:	429c      	cmp	r4, r3
 8022d7e:	dc0f      	bgt.n	8022da0 <__ieee754_pow+0x238>
 8022d80:	f1b9 0f00 	cmp.w	r9, #0
 8022d84:	da0f      	bge.n	8022da6 <__ieee754_pow+0x23e>
 8022d86:	2000      	movs	r0, #0
 8022d88:	b009      	add	sp, #36	; 0x24
 8022d8a:	ecbd 8b06 	vpop	{d8-d10}
 8022d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d92:	f000 bcf0 	b.w	8023776 <__math_oflow>
 8022d96:	429c      	cmp	r4, r3
 8022d98:	dbf2      	blt.n	8022d80 <__ieee754_pow+0x218>
 8022d9a:	4b0a      	ldr	r3, [pc, #40]	; (8022dc4 <__ieee754_pow+0x25c>)
 8022d9c:	429c      	cmp	r4, r3
 8022d9e:	dd19      	ble.n	8022dd4 <__ieee754_pow+0x26c>
 8022da0:	f1b9 0f00 	cmp.w	r9, #0
 8022da4:	dcef      	bgt.n	8022d86 <__ieee754_pow+0x21e>
 8022da6:	2000      	movs	r0, #0
 8022da8:	b009      	add	sp, #36	; 0x24
 8022daa:	ecbd 8b06 	vpop	{d8-d10}
 8022dae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022db2:	f000 bcd7 	b.w	8023764 <__math_uflow>
 8022db6:	bf00      	nop
 8022db8:	fff00000 	.word	0xfff00000
 8022dbc:	7ff00000 	.word	0x7ff00000
 8022dc0:	433fffff 	.word	0x433fffff
 8022dc4:	3ff00000 	.word	0x3ff00000
 8022dc8:	3fefffff 	.word	0x3fefffff
 8022dcc:	3fe00000 	.word	0x3fe00000
 8022dd0:	41e00000 	.word	0x41e00000
 8022dd4:	4b60      	ldr	r3, [pc, #384]	; (8022f58 <__ieee754_pow+0x3f0>)
 8022dd6:	2200      	movs	r2, #0
 8022dd8:	f7dd fa76 	bl	80002c8 <__aeabi_dsub>
 8022ddc:	a354      	add	r3, pc, #336	; (adr r3, 8022f30 <__ieee754_pow+0x3c8>)
 8022dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022de2:	4604      	mov	r4, r0
 8022de4:	460d      	mov	r5, r1
 8022de6:	f7dd fc27 	bl	8000638 <__aeabi_dmul>
 8022dea:	a353      	add	r3, pc, #332	; (adr r3, 8022f38 <__ieee754_pow+0x3d0>)
 8022dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022df0:	4606      	mov	r6, r0
 8022df2:	460f      	mov	r7, r1
 8022df4:	4620      	mov	r0, r4
 8022df6:	4629      	mov	r1, r5
 8022df8:	f7dd fc1e 	bl	8000638 <__aeabi_dmul>
 8022dfc:	4b57      	ldr	r3, [pc, #348]	; (8022f5c <__ieee754_pow+0x3f4>)
 8022dfe:	4682      	mov	sl, r0
 8022e00:	468b      	mov	fp, r1
 8022e02:	2200      	movs	r2, #0
 8022e04:	4620      	mov	r0, r4
 8022e06:	4629      	mov	r1, r5
 8022e08:	f7dd fc16 	bl	8000638 <__aeabi_dmul>
 8022e0c:	4602      	mov	r2, r0
 8022e0e:	460b      	mov	r3, r1
 8022e10:	a14b      	add	r1, pc, #300	; (adr r1, 8022f40 <__ieee754_pow+0x3d8>)
 8022e12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022e16:	f7dd fa57 	bl	80002c8 <__aeabi_dsub>
 8022e1a:	4622      	mov	r2, r4
 8022e1c:	462b      	mov	r3, r5
 8022e1e:	f7dd fc0b 	bl	8000638 <__aeabi_dmul>
 8022e22:	4602      	mov	r2, r0
 8022e24:	460b      	mov	r3, r1
 8022e26:	2000      	movs	r0, #0
 8022e28:	494d      	ldr	r1, [pc, #308]	; (8022f60 <__ieee754_pow+0x3f8>)
 8022e2a:	f7dd fa4d 	bl	80002c8 <__aeabi_dsub>
 8022e2e:	4622      	mov	r2, r4
 8022e30:	4680      	mov	r8, r0
 8022e32:	4689      	mov	r9, r1
 8022e34:	462b      	mov	r3, r5
 8022e36:	4620      	mov	r0, r4
 8022e38:	4629      	mov	r1, r5
 8022e3a:	f7dd fbfd 	bl	8000638 <__aeabi_dmul>
 8022e3e:	4602      	mov	r2, r0
 8022e40:	460b      	mov	r3, r1
 8022e42:	4640      	mov	r0, r8
 8022e44:	4649      	mov	r1, r9
 8022e46:	f7dd fbf7 	bl	8000638 <__aeabi_dmul>
 8022e4a:	a33f      	add	r3, pc, #252	; (adr r3, 8022f48 <__ieee754_pow+0x3e0>)
 8022e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e50:	f7dd fbf2 	bl	8000638 <__aeabi_dmul>
 8022e54:	4602      	mov	r2, r0
 8022e56:	460b      	mov	r3, r1
 8022e58:	4650      	mov	r0, sl
 8022e5a:	4659      	mov	r1, fp
 8022e5c:	f7dd fa34 	bl	80002c8 <__aeabi_dsub>
 8022e60:	4602      	mov	r2, r0
 8022e62:	460b      	mov	r3, r1
 8022e64:	4680      	mov	r8, r0
 8022e66:	4689      	mov	r9, r1
 8022e68:	4630      	mov	r0, r6
 8022e6a:	4639      	mov	r1, r7
 8022e6c:	f7dd fa2e 	bl	80002cc <__adddf3>
 8022e70:	2000      	movs	r0, #0
 8022e72:	4632      	mov	r2, r6
 8022e74:	463b      	mov	r3, r7
 8022e76:	4604      	mov	r4, r0
 8022e78:	460d      	mov	r5, r1
 8022e7a:	f7dd fa25 	bl	80002c8 <__aeabi_dsub>
 8022e7e:	4602      	mov	r2, r0
 8022e80:	460b      	mov	r3, r1
 8022e82:	4640      	mov	r0, r8
 8022e84:	4649      	mov	r1, r9
 8022e86:	f7dd fa1f 	bl	80002c8 <__aeabi_dsub>
 8022e8a:	9b04      	ldr	r3, [sp, #16]
 8022e8c:	9a06      	ldr	r2, [sp, #24]
 8022e8e:	3b01      	subs	r3, #1
 8022e90:	4313      	orrs	r3, r2
 8022e92:	4682      	mov	sl, r0
 8022e94:	468b      	mov	fp, r1
 8022e96:	f040 81e7 	bne.w	8023268 <__ieee754_pow+0x700>
 8022e9a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8022f50 <__ieee754_pow+0x3e8>
 8022e9e:	eeb0 8a47 	vmov.f32	s16, s14
 8022ea2:	eef0 8a67 	vmov.f32	s17, s15
 8022ea6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8022eaa:	2600      	movs	r6, #0
 8022eac:	4632      	mov	r2, r6
 8022eae:	463b      	mov	r3, r7
 8022eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022eb4:	f7dd fa08 	bl	80002c8 <__aeabi_dsub>
 8022eb8:	4622      	mov	r2, r4
 8022eba:	462b      	mov	r3, r5
 8022ebc:	f7dd fbbc 	bl	8000638 <__aeabi_dmul>
 8022ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022ec4:	4680      	mov	r8, r0
 8022ec6:	4689      	mov	r9, r1
 8022ec8:	4650      	mov	r0, sl
 8022eca:	4659      	mov	r1, fp
 8022ecc:	f7dd fbb4 	bl	8000638 <__aeabi_dmul>
 8022ed0:	4602      	mov	r2, r0
 8022ed2:	460b      	mov	r3, r1
 8022ed4:	4640      	mov	r0, r8
 8022ed6:	4649      	mov	r1, r9
 8022ed8:	f7dd f9f8 	bl	80002cc <__adddf3>
 8022edc:	4632      	mov	r2, r6
 8022ede:	463b      	mov	r3, r7
 8022ee0:	4680      	mov	r8, r0
 8022ee2:	4689      	mov	r9, r1
 8022ee4:	4620      	mov	r0, r4
 8022ee6:	4629      	mov	r1, r5
 8022ee8:	f7dd fba6 	bl	8000638 <__aeabi_dmul>
 8022eec:	460b      	mov	r3, r1
 8022eee:	4604      	mov	r4, r0
 8022ef0:	460d      	mov	r5, r1
 8022ef2:	4602      	mov	r2, r0
 8022ef4:	4649      	mov	r1, r9
 8022ef6:	4640      	mov	r0, r8
 8022ef8:	f7dd f9e8 	bl	80002cc <__adddf3>
 8022efc:	4b19      	ldr	r3, [pc, #100]	; (8022f64 <__ieee754_pow+0x3fc>)
 8022efe:	4299      	cmp	r1, r3
 8022f00:	ec45 4b19 	vmov	d9, r4, r5
 8022f04:	4606      	mov	r6, r0
 8022f06:	460f      	mov	r7, r1
 8022f08:	468b      	mov	fp, r1
 8022f0a:	f340 82f1 	ble.w	80234f0 <__ieee754_pow+0x988>
 8022f0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8022f12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8022f16:	4303      	orrs	r3, r0
 8022f18:	f000 81e4 	beq.w	80232e4 <__ieee754_pow+0x77c>
 8022f1c:	ec51 0b18 	vmov	r0, r1, d8
 8022f20:	2200      	movs	r2, #0
 8022f22:	2300      	movs	r3, #0
 8022f24:	f7dd fdfa 	bl	8000b1c <__aeabi_dcmplt>
 8022f28:	3800      	subs	r0, #0
 8022f2a:	bf18      	it	ne
 8022f2c:	2001      	movne	r0, #1
 8022f2e:	e72b      	b.n	8022d88 <__ieee754_pow+0x220>
 8022f30:	60000000 	.word	0x60000000
 8022f34:	3ff71547 	.word	0x3ff71547
 8022f38:	f85ddf44 	.word	0xf85ddf44
 8022f3c:	3e54ae0b 	.word	0x3e54ae0b
 8022f40:	55555555 	.word	0x55555555
 8022f44:	3fd55555 	.word	0x3fd55555
 8022f48:	652b82fe 	.word	0x652b82fe
 8022f4c:	3ff71547 	.word	0x3ff71547
 8022f50:	00000000 	.word	0x00000000
 8022f54:	bff00000 	.word	0xbff00000
 8022f58:	3ff00000 	.word	0x3ff00000
 8022f5c:	3fd00000 	.word	0x3fd00000
 8022f60:	3fe00000 	.word	0x3fe00000
 8022f64:	408fffff 	.word	0x408fffff
 8022f68:	4bd5      	ldr	r3, [pc, #852]	; (80232c0 <__ieee754_pow+0x758>)
 8022f6a:	402b      	ands	r3, r5
 8022f6c:	2200      	movs	r2, #0
 8022f6e:	b92b      	cbnz	r3, 8022f7c <__ieee754_pow+0x414>
 8022f70:	4bd4      	ldr	r3, [pc, #848]	; (80232c4 <__ieee754_pow+0x75c>)
 8022f72:	f7dd fb61 	bl	8000638 <__aeabi_dmul>
 8022f76:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8022f7a:	460c      	mov	r4, r1
 8022f7c:	1523      	asrs	r3, r4, #20
 8022f7e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8022f82:	4413      	add	r3, r2
 8022f84:	9305      	str	r3, [sp, #20]
 8022f86:	4bd0      	ldr	r3, [pc, #832]	; (80232c8 <__ieee754_pow+0x760>)
 8022f88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8022f8c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8022f90:	429c      	cmp	r4, r3
 8022f92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8022f96:	dd08      	ble.n	8022faa <__ieee754_pow+0x442>
 8022f98:	4bcc      	ldr	r3, [pc, #816]	; (80232cc <__ieee754_pow+0x764>)
 8022f9a:	429c      	cmp	r4, r3
 8022f9c:	f340 8162 	ble.w	8023264 <__ieee754_pow+0x6fc>
 8022fa0:	9b05      	ldr	r3, [sp, #20]
 8022fa2:	3301      	adds	r3, #1
 8022fa4:	9305      	str	r3, [sp, #20]
 8022fa6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8022faa:	2400      	movs	r4, #0
 8022fac:	00e3      	lsls	r3, r4, #3
 8022fae:	9307      	str	r3, [sp, #28]
 8022fb0:	4bc7      	ldr	r3, [pc, #796]	; (80232d0 <__ieee754_pow+0x768>)
 8022fb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022fb6:	ed93 7b00 	vldr	d7, [r3]
 8022fba:	4629      	mov	r1, r5
 8022fbc:	ec53 2b17 	vmov	r2, r3, d7
 8022fc0:	eeb0 9a47 	vmov.f32	s18, s14
 8022fc4:	eef0 9a67 	vmov.f32	s19, s15
 8022fc8:	4682      	mov	sl, r0
 8022fca:	f7dd f97d 	bl	80002c8 <__aeabi_dsub>
 8022fce:	4652      	mov	r2, sl
 8022fd0:	4606      	mov	r6, r0
 8022fd2:	460f      	mov	r7, r1
 8022fd4:	462b      	mov	r3, r5
 8022fd6:	ec51 0b19 	vmov	r0, r1, d9
 8022fda:	f7dd f977 	bl	80002cc <__adddf3>
 8022fde:	4602      	mov	r2, r0
 8022fe0:	460b      	mov	r3, r1
 8022fe2:	2000      	movs	r0, #0
 8022fe4:	49bb      	ldr	r1, [pc, #748]	; (80232d4 <__ieee754_pow+0x76c>)
 8022fe6:	f7dd fc51 	bl	800088c <__aeabi_ddiv>
 8022fea:	ec41 0b1a 	vmov	d10, r0, r1
 8022fee:	4602      	mov	r2, r0
 8022ff0:	460b      	mov	r3, r1
 8022ff2:	4630      	mov	r0, r6
 8022ff4:	4639      	mov	r1, r7
 8022ff6:	f7dd fb1f 	bl	8000638 <__aeabi_dmul>
 8022ffa:	2300      	movs	r3, #0
 8022ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023000:	9302      	str	r3, [sp, #8]
 8023002:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8023006:	46ab      	mov	fp, r5
 8023008:	106d      	asrs	r5, r5, #1
 802300a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 802300e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8023012:	ec41 0b18 	vmov	d8, r0, r1
 8023016:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 802301a:	2200      	movs	r2, #0
 802301c:	4640      	mov	r0, r8
 802301e:	4649      	mov	r1, r9
 8023020:	4614      	mov	r4, r2
 8023022:	461d      	mov	r5, r3
 8023024:	f7dd fb08 	bl	8000638 <__aeabi_dmul>
 8023028:	4602      	mov	r2, r0
 802302a:	460b      	mov	r3, r1
 802302c:	4630      	mov	r0, r6
 802302e:	4639      	mov	r1, r7
 8023030:	f7dd f94a 	bl	80002c8 <__aeabi_dsub>
 8023034:	ec53 2b19 	vmov	r2, r3, d9
 8023038:	4606      	mov	r6, r0
 802303a:	460f      	mov	r7, r1
 802303c:	4620      	mov	r0, r4
 802303e:	4629      	mov	r1, r5
 8023040:	f7dd f942 	bl	80002c8 <__aeabi_dsub>
 8023044:	4602      	mov	r2, r0
 8023046:	460b      	mov	r3, r1
 8023048:	4650      	mov	r0, sl
 802304a:	4659      	mov	r1, fp
 802304c:	f7dd f93c 	bl	80002c8 <__aeabi_dsub>
 8023050:	4642      	mov	r2, r8
 8023052:	464b      	mov	r3, r9
 8023054:	f7dd faf0 	bl	8000638 <__aeabi_dmul>
 8023058:	4602      	mov	r2, r0
 802305a:	460b      	mov	r3, r1
 802305c:	4630      	mov	r0, r6
 802305e:	4639      	mov	r1, r7
 8023060:	f7dd f932 	bl	80002c8 <__aeabi_dsub>
 8023064:	ec53 2b1a 	vmov	r2, r3, d10
 8023068:	f7dd fae6 	bl	8000638 <__aeabi_dmul>
 802306c:	ec53 2b18 	vmov	r2, r3, d8
 8023070:	ec41 0b19 	vmov	d9, r0, r1
 8023074:	ec51 0b18 	vmov	r0, r1, d8
 8023078:	f7dd fade 	bl	8000638 <__aeabi_dmul>
 802307c:	a37c      	add	r3, pc, #496	; (adr r3, 8023270 <__ieee754_pow+0x708>)
 802307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023082:	4604      	mov	r4, r0
 8023084:	460d      	mov	r5, r1
 8023086:	f7dd fad7 	bl	8000638 <__aeabi_dmul>
 802308a:	a37b      	add	r3, pc, #492	; (adr r3, 8023278 <__ieee754_pow+0x710>)
 802308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023090:	f7dd f91c 	bl	80002cc <__adddf3>
 8023094:	4622      	mov	r2, r4
 8023096:	462b      	mov	r3, r5
 8023098:	f7dd face 	bl	8000638 <__aeabi_dmul>
 802309c:	a378      	add	r3, pc, #480	; (adr r3, 8023280 <__ieee754_pow+0x718>)
 802309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230a2:	f7dd f913 	bl	80002cc <__adddf3>
 80230a6:	4622      	mov	r2, r4
 80230a8:	462b      	mov	r3, r5
 80230aa:	f7dd fac5 	bl	8000638 <__aeabi_dmul>
 80230ae:	a376      	add	r3, pc, #472	; (adr r3, 8023288 <__ieee754_pow+0x720>)
 80230b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230b4:	f7dd f90a 	bl	80002cc <__adddf3>
 80230b8:	4622      	mov	r2, r4
 80230ba:	462b      	mov	r3, r5
 80230bc:	f7dd fabc 	bl	8000638 <__aeabi_dmul>
 80230c0:	a373      	add	r3, pc, #460	; (adr r3, 8023290 <__ieee754_pow+0x728>)
 80230c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230c6:	f7dd f901 	bl	80002cc <__adddf3>
 80230ca:	4622      	mov	r2, r4
 80230cc:	462b      	mov	r3, r5
 80230ce:	f7dd fab3 	bl	8000638 <__aeabi_dmul>
 80230d2:	a371      	add	r3, pc, #452	; (adr r3, 8023298 <__ieee754_pow+0x730>)
 80230d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230d8:	f7dd f8f8 	bl	80002cc <__adddf3>
 80230dc:	4622      	mov	r2, r4
 80230de:	4606      	mov	r6, r0
 80230e0:	460f      	mov	r7, r1
 80230e2:	462b      	mov	r3, r5
 80230e4:	4620      	mov	r0, r4
 80230e6:	4629      	mov	r1, r5
 80230e8:	f7dd faa6 	bl	8000638 <__aeabi_dmul>
 80230ec:	4602      	mov	r2, r0
 80230ee:	460b      	mov	r3, r1
 80230f0:	4630      	mov	r0, r6
 80230f2:	4639      	mov	r1, r7
 80230f4:	f7dd faa0 	bl	8000638 <__aeabi_dmul>
 80230f8:	4642      	mov	r2, r8
 80230fa:	4604      	mov	r4, r0
 80230fc:	460d      	mov	r5, r1
 80230fe:	464b      	mov	r3, r9
 8023100:	ec51 0b18 	vmov	r0, r1, d8
 8023104:	f7dd f8e2 	bl	80002cc <__adddf3>
 8023108:	ec53 2b19 	vmov	r2, r3, d9
 802310c:	f7dd fa94 	bl	8000638 <__aeabi_dmul>
 8023110:	4622      	mov	r2, r4
 8023112:	462b      	mov	r3, r5
 8023114:	f7dd f8da 	bl	80002cc <__adddf3>
 8023118:	4642      	mov	r2, r8
 802311a:	4682      	mov	sl, r0
 802311c:	468b      	mov	fp, r1
 802311e:	464b      	mov	r3, r9
 8023120:	4640      	mov	r0, r8
 8023122:	4649      	mov	r1, r9
 8023124:	f7dd fa88 	bl	8000638 <__aeabi_dmul>
 8023128:	4b6b      	ldr	r3, [pc, #428]	; (80232d8 <__ieee754_pow+0x770>)
 802312a:	2200      	movs	r2, #0
 802312c:	4606      	mov	r6, r0
 802312e:	460f      	mov	r7, r1
 8023130:	f7dd f8cc 	bl	80002cc <__adddf3>
 8023134:	4652      	mov	r2, sl
 8023136:	465b      	mov	r3, fp
 8023138:	f7dd f8c8 	bl	80002cc <__adddf3>
 802313c:	2000      	movs	r0, #0
 802313e:	4604      	mov	r4, r0
 8023140:	460d      	mov	r5, r1
 8023142:	4602      	mov	r2, r0
 8023144:	460b      	mov	r3, r1
 8023146:	4640      	mov	r0, r8
 8023148:	4649      	mov	r1, r9
 802314a:	f7dd fa75 	bl	8000638 <__aeabi_dmul>
 802314e:	4b62      	ldr	r3, [pc, #392]	; (80232d8 <__ieee754_pow+0x770>)
 8023150:	4680      	mov	r8, r0
 8023152:	4689      	mov	r9, r1
 8023154:	2200      	movs	r2, #0
 8023156:	4620      	mov	r0, r4
 8023158:	4629      	mov	r1, r5
 802315a:	f7dd f8b5 	bl	80002c8 <__aeabi_dsub>
 802315e:	4632      	mov	r2, r6
 8023160:	463b      	mov	r3, r7
 8023162:	f7dd f8b1 	bl	80002c8 <__aeabi_dsub>
 8023166:	4602      	mov	r2, r0
 8023168:	460b      	mov	r3, r1
 802316a:	4650      	mov	r0, sl
 802316c:	4659      	mov	r1, fp
 802316e:	f7dd f8ab 	bl	80002c8 <__aeabi_dsub>
 8023172:	ec53 2b18 	vmov	r2, r3, d8
 8023176:	f7dd fa5f 	bl	8000638 <__aeabi_dmul>
 802317a:	4622      	mov	r2, r4
 802317c:	4606      	mov	r6, r0
 802317e:	460f      	mov	r7, r1
 8023180:	462b      	mov	r3, r5
 8023182:	ec51 0b19 	vmov	r0, r1, d9
 8023186:	f7dd fa57 	bl	8000638 <__aeabi_dmul>
 802318a:	4602      	mov	r2, r0
 802318c:	460b      	mov	r3, r1
 802318e:	4630      	mov	r0, r6
 8023190:	4639      	mov	r1, r7
 8023192:	f7dd f89b 	bl	80002cc <__adddf3>
 8023196:	4606      	mov	r6, r0
 8023198:	460f      	mov	r7, r1
 802319a:	4602      	mov	r2, r0
 802319c:	460b      	mov	r3, r1
 802319e:	4640      	mov	r0, r8
 80231a0:	4649      	mov	r1, r9
 80231a2:	f7dd f893 	bl	80002cc <__adddf3>
 80231a6:	a33e      	add	r3, pc, #248	; (adr r3, 80232a0 <__ieee754_pow+0x738>)
 80231a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231ac:	2000      	movs	r0, #0
 80231ae:	4604      	mov	r4, r0
 80231b0:	460d      	mov	r5, r1
 80231b2:	f7dd fa41 	bl	8000638 <__aeabi_dmul>
 80231b6:	4642      	mov	r2, r8
 80231b8:	ec41 0b18 	vmov	d8, r0, r1
 80231bc:	464b      	mov	r3, r9
 80231be:	4620      	mov	r0, r4
 80231c0:	4629      	mov	r1, r5
 80231c2:	f7dd f881 	bl	80002c8 <__aeabi_dsub>
 80231c6:	4602      	mov	r2, r0
 80231c8:	460b      	mov	r3, r1
 80231ca:	4630      	mov	r0, r6
 80231cc:	4639      	mov	r1, r7
 80231ce:	f7dd f87b 	bl	80002c8 <__aeabi_dsub>
 80231d2:	a335      	add	r3, pc, #212	; (adr r3, 80232a8 <__ieee754_pow+0x740>)
 80231d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231d8:	f7dd fa2e 	bl	8000638 <__aeabi_dmul>
 80231dc:	a334      	add	r3, pc, #208	; (adr r3, 80232b0 <__ieee754_pow+0x748>)
 80231de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231e2:	4606      	mov	r6, r0
 80231e4:	460f      	mov	r7, r1
 80231e6:	4620      	mov	r0, r4
 80231e8:	4629      	mov	r1, r5
 80231ea:	f7dd fa25 	bl	8000638 <__aeabi_dmul>
 80231ee:	4602      	mov	r2, r0
 80231f0:	460b      	mov	r3, r1
 80231f2:	4630      	mov	r0, r6
 80231f4:	4639      	mov	r1, r7
 80231f6:	f7dd f869 	bl	80002cc <__adddf3>
 80231fa:	9a07      	ldr	r2, [sp, #28]
 80231fc:	4b37      	ldr	r3, [pc, #220]	; (80232dc <__ieee754_pow+0x774>)
 80231fe:	4413      	add	r3, r2
 8023200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023204:	f7dd f862 	bl	80002cc <__adddf3>
 8023208:	4682      	mov	sl, r0
 802320a:	9805      	ldr	r0, [sp, #20]
 802320c:	468b      	mov	fp, r1
 802320e:	f7dd f9a9 	bl	8000564 <__aeabi_i2d>
 8023212:	9a07      	ldr	r2, [sp, #28]
 8023214:	4b32      	ldr	r3, [pc, #200]	; (80232e0 <__ieee754_pow+0x778>)
 8023216:	4413      	add	r3, r2
 8023218:	e9d3 8900 	ldrd	r8, r9, [r3]
 802321c:	4606      	mov	r6, r0
 802321e:	460f      	mov	r7, r1
 8023220:	4652      	mov	r2, sl
 8023222:	465b      	mov	r3, fp
 8023224:	ec51 0b18 	vmov	r0, r1, d8
 8023228:	f7dd f850 	bl	80002cc <__adddf3>
 802322c:	4642      	mov	r2, r8
 802322e:	464b      	mov	r3, r9
 8023230:	f7dd f84c 	bl	80002cc <__adddf3>
 8023234:	4632      	mov	r2, r6
 8023236:	463b      	mov	r3, r7
 8023238:	f7dd f848 	bl	80002cc <__adddf3>
 802323c:	2000      	movs	r0, #0
 802323e:	4632      	mov	r2, r6
 8023240:	463b      	mov	r3, r7
 8023242:	4604      	mov	r4, r0
 8023244:	460d      	mov	r5, r1
 8023246:	f7dd f83f 	bl	80002c8 <__aeabi_dsub>
 802324a:	4642      	mov	r2, r8
 802324c:	464b      	mov	r3, r9
 802324e:	f7dd f83b 	bl	80002c8 <__aeabi_dsub>
 8023252:	ec53 2b18 	vmov	r2, r3, d8
 8023256:	f7dd f837 	bl	80002c8 <__aeabi_dsub>
 802325a:	4602      	mov	r2, r0
 802325c:	460b      	mov	r3, r1
 802325e:	4650      	mov	r0, sl
 8023260:	4659      	mov	r1, fp
 8023262:	e610      	b.n	8022e86 <__ieee754_pow+0x31e>
 8023264:	2401      	movs	r4, #1
 8023266:	e6a1      	b.n	8022fac <__ieee754_pow+0x444>
 8023268:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80232b8 <__ieee754_pow+0x750>
 802326c:	e617      	b.n	8022e9e <__ieee754_pow+0x336>
 802326e:	bf00      	nop
 8023270:	4a454eef 	.word	0x4a454eef
 8023274:	3fca7e28 	.word	0x3fca7e28
 8023278:	93c9db65 	.word	0x93c9db65
 802327c:	3fcd864a 	.word	0x3fcd864a
 8023280:	a91d4101 	.word	0xa91d4101
 8023284:	3fd17460 	.word	0x3fd17460
 8023288:	518f264d 	.word	0x518f264d
 802328c:	3fd55555 	.word	0x3fd55555
 8023290:	db6fabff 	.word	0xdb6fabff
 8023294:	3fdb6db6 	.word	0x3fdb6db6
 8023298:	33333303 	.word	0x33333303
 802329c:	3fe33333 	.word	0x3fe33333
 80232a0:	e0000000 	.word	0xe0000000
 80232a4:	3feec709 	.word	0x3feec709
 80232a8:	dc3a03fd 	.word	0xdc3a03fd
 80232ac:	3feec709 	.word	0x3feec709
 80232b0:	145b01f5 	.word	0x145b01f5
 80232b4:	be3e2fe0 	.word	0xbe3e2fe0
 80232b8:	00000000 	.word	0x00000000
 80232bc:	3ff00000 	.word	0x3ff00000
 80232c0:	7ff00000 	.word	0x7ff00000
 80232c4:	43400000 	.word	0x43400000
 80232c8:	0003988e 	.word	0x0003988e
 80232cc:	000bb679 	.word	0x000bb679
 80232d0:	08028a08 	.word	0x08028a08
 80232d4:	3ff00000 	.word	0x3ff00000
 80232d8:	40080000 	.word	0x40080000
 80232dc:	08028a28 	.word	0x08028a28
 80232e0:	08028a18 	.word	0x08028a18
 80232e4:	a3b5      	add	r3, pc, #724	; (adr r3, 80235bc <__ieee754_pow+0xa54>)
 80232e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232ea:	4640      	mov	r0, r8
 80232ec:	4649      	mov	r1, r9
 80232ee:	f7dc ffed 	bl	80002cc <__adddf3>
 80232f2:	4622      	mov	r2, r4
 80232f4:	ec41 0b1a 	vmov	d10, r0, r1
 80232f8:	462b      	mov	r3, r5
 80232fa:	4630      	mov	r0, r6
 80232fc:	4639      	mov	r1, r7
 80232fe:	f7dc ffe3 	bl	80002c8 <__aeabi_dsub>
 8023302:	4602      	mov	r2, r0
 8023304:	460b      	mov	r3, r1
 8023306:	ec51 0b1a 	vmov	r0, r1, d10
 802330a:	f7dd fc25 	bl	8000b58 <__aeabi_dcmpgt>
 802330e:	2800      	cmp	r0, #0
 8023310:	f47f ae04 	bne.w	8022f1c <__ieee754_pow+0x3b4>
 8023314:	4aa4      	ldr	r2, [pc, #656]	; (80235a8 <__ieee754_pow+0xa40>)
 8023316:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802331a:	4293      	cmp	r3, r2
 802331c:	f340 8108 	ble.w	8023530 <__ieee754_pow+0x9c8>
 8023320:	151b      	asrs	r3, r3, #20
 8023322:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8023326:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802332a:	fa4a f303 	asr.w	r3, sl, r3
 802332e:	445b      	add	r3, fp
 8023330:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8023334:	4e9d      	ldr	r6, [pc, #628]	; (80235ac <__ieee754_pow+0xa44>)
 8023336:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802333a:	4116      	asrs	r6, r2
 802333c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8023340:	2000      	movs	r0, #0
 8023342:	ea23 0106 	bic.w	r1, r3, r6
 8023346:	f1c2 0214 	rsb	r2, r2, #20
 802334a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802334e:	fa4a fa02 	asr.w	sl, sl, r2
 8023352:	f1bb 0f00 	cmp.w	fp, #0
 8023356:	4602      	mov	r2, r0
 8023358:	460b      	mov	r3, r1
 802335a:	4620      	mov	r0, r4
 802335c:	4629      	mov	r1, r5
 802335e:	bfb8      	it	lt
 8023360:	f1ca 0a00 	rsblt	sl, sl, #0
 8023364:	f7dc ffb0 	bl	80002c8 <__aeabi_dsub>
 8023368:	ec41 0b19 	vmov	d9, r0, r1
 802336c:	4642      	mov	r2, r8
 802336e:	464b      	mov	r3, r9
 8023370:	ec51 0b19 	vmov	r0, r1, d9
 8023374:	f7dc ffaa 	bl	80002cc <__adddf3>
 8023378:	a37b      	add	r3, pc, #492	; (adr r3, 8023568 <__ieee754_pow+0xa00>)
 802337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802337e:	2000      	movs	r0, #0
 8023380:	4604      	mov	r4, r0
 8023382:	460d      	mov	r5, r1
 8023384:	f7dd f958 	bl	8000638 <__aeabi_dmul>
 8023388:	ec53 2b19 	vmov	r2, r3, d9
 802338c:	4606      	mov	r6, r0
 802338e:	460f      	mov	r7, r1
 8023390:	4620      	mov	r0, r4
 8023392:	4629      	mov	r1, r5
 8023394:	f7dc ff98 	bl	80002c8 <__aeabi_dsub>
 8023398:	4602      	mov	r2, r0
 802339a:	460b      	mov	r3, r1
 802339c:	4640      	mov	r0, r8
 802339e:	4649      	mov	r1, r9
 80233a0:	f7dc ff92 	bl	80002c8 <__aeabi_dsub>
 80233a4:	a372      	add	r3, pc, #456	; (adr r3, 8023570 <__ieee754_pow+0xa08>)
 80233a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233aa:	f7dd f945 	bl	8000638 <__aeabi_dmul>
 80233ae:	a372      	add	r3, pc, #456	; (adr r3, 8023578 <__ieee754_pow+0xa10>)
 80233b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233b4:	4680      	mov	r8, r0
 80233b6:	4689      	mov	r9, r1
 80233b8:	4620      	mov	r0, r4
 80233ba:	4629      	mov	r1, r5
 80233bc:	f7dd f93c 	bl	8000638 <__aeabi_dmul>
 80233c0:	4602      	mov	r2, r0
 80233c2:	460b      	mov	r3, r1
 80233c4:	4640      	mov	r0, r8
 80233c6:	4649      	mov	r1, r9
 80233c8:	f7dc ff80 	bl	80002cc <__adddf3>
 80233cc:	4604      	mov	r4, r0
 80233ce:	460d      	mov	r5, r1
 80233d0:	4602      	mov	r2, r0
 80233d2:	460b      	mov	r3, r1
 80233d4:	4630      	mov	r0, r6
 80233d6:	4639      	mov	r1, r7
 80233d8:	f7dc ff78 	bl	80002cc <__adddf3>
 80233dc:	4632      	mov	r2, r6
 80233de:	463b      	mov	r3, r7
 80233e0:	4680      	mov	r8, r0
 80233e2:	4689      	mov	r9, r1
 80233e4:	f7dc ff70 	bl	80002c8 <__aeabi_dsub>
 80233e8:	4602      	mov	r2, r0
 80233ea:	460b      	mov	r3, r1
 80233ec:	4620      	mov	r0, r4
 80233ee:	4629      	mov	r1, r5
 80233f0:	f7dc ff6a 	bl	80002c8 <__aeabi_dsub>
 80233f4:	4642      	mov	r2, r8
 80233f6:	4606      	mov	r6, r0
 80233f8:	460f      	mov	r7, r1
 80233fa:	464b      	mov	r3, r9
 80233fc:	4640      	mov	r0, r8
 80233fe:	4649      	mov	r1, r9
 8023400:	f7dd f91a 	bl	8000638 <__aeabi_dmul>
 8023404:	a35e      	add	r3, pc, #376	; (adr r3, 8023580 <__ieee754_pow+0xa18>)
 8023406:	e9d3 2300 	ldrd	r2, r3, [r3]
 802340a:	4604      	mov	r4, r0
 802340c:	460d      	mov	r5, r1
 802340e:	f7dd f913 	bl	8000638 <__aeabi_dmul>
 8023412:	a35d      	add	r3, pc, #372	; (adr r3, 8023588 <__ieee754_pow+0xa20>)
 8023414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023418:	f7dc ff56 	bl	80002c8 <__aeabi_dsub>
 802341c:	4622      	mov	r2, r4
 802341e:	462b      	mov	r3, r5
 8023420:	f7dd f90a 	bl	8000638 <__aeabi_dmul>
 8023424:	a35a      	add	r3, pc, #360	; (adr r3, 8023590 <__ieee754_pow+0xa28>)
 8023426:	e9d3 2300 	ldrd	r2, r3, [r3]
 802342a:	f7dc ff4f 	bl	80002cc <__adddf3>
 802342e:	4622      	mov	r2, r4
 8023430:	462b      	mov	r3, r5
 8023432:	f7dd f901 	bl	8000638 <__aeabi_dmul>
 8023436:	a358      	add	r3, pc, #352	; (adr r3, 8023598 <__ieee754_pow+0xa30>)
 8023438:	e9d3 2300 	ldrd	r2, r3, [r3]
 802343c:	f7dc ff44 	bl	80002c8 <__aeabi_dsub>
 8023440:	4622      	mov	r2, r4
 8023442:	462b      	mov	r3, r5
 8023444:	f7dd f8f8 	bl	8000638 <__aeabi_dmul>
 8023448:	a355      	add	r3, pc, #340	; (adr r3, 80235a0 <__ieee754_pow+0xa38>)
 802344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802344e:	f7dc ff3d 	bl	80002cc <__adddf3>
 8023452:	4622      	mov	r2, r4
 8023454:	462b      	mov	r3, r5
 8023456:	f7dd f8ef 	bl	8000638 <__aeabi_dmul>
 802345a:	4602      	mov	r2, r0
 802345c:	460b      	mov	r3, r1
 802345e:	4640      	mov	r0, r8
 8023460:	4649      	mov	r1, r9
 8023462:	f7dc ff31 	bl	80002c8 <__aeabi_dsub>
 8023466:	4604      	mov	r4, r0
 8023468:	460d      	mov	r5, r1
 802346a:	4602      	mov	r2, r0
 802346c:	460b      	mov	r3, r1
 802346e:	4640      	mov	r0, r8
 8023470:	4649      	mov	r1, r9
 8023472:	f7dd f8e1 	bl	8000638 <__aeabi_dmul>
 8023476:	2200      	movs	r2, #0
 8023478:	ec41 0b19 	vmov	d9, r0, r1
 802347c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023480:	4620      	mov	r0, r4
 8023482:	4629      	mov	r1, r5
 8023484:	f7dc ff20 	bl	80002c8 <__aeabi_dsub>
 8023488:	4602      	mov	r2, r0
 802348a:	460b      	mov	r3, r1
 802348c:	ec51 0b19 	vmov	r0, r1, d9
 8023490:	f7dd f9fc 	bl	800088c <__aeabi_ddiv>
 8023494:	4632      	mov	r2, r6
 8023496:	4604      	mov	r4, r0
 8023498:	460d      	mov	r5, r1
 802349a:	463b      	mov	r3, r7
 802349c:	4640      	mov	r0, r8
 802349e:	4649      	mov	r1, r9
 80234a0:	f7dd f8ca 	bl	8000638 <__aeabi_dmul>
 80234a4:	4632      	mov	r2, r6
 80234a6:	463b      	mov	r3, r7
 80234a8:	f7dc ff10 	bl	80002cc <__adddf3>
 80234ac:	4602      	mov	r2, r0
 80234ae:	460b      	mov	r3, r1
 80234b0:	4620      	mov	r0, r4
 80234b2:	4629      	mov	r1, r5
 80234b4:	f7dc ff08 	bl	80002c8 <__aeabi_dsub>
 80234b8:	4642      	mov	r2, r8
 80234ba:	464b      	mov	r3, r9
 80234bc:	f7dc ff04 	bl	80002c8 <__aeabi_dsub>
 80234c0:	460b      	mov	r3, r1
 80234c2:	4602      	mov	r2, r0
 80234c4:	493a      	ldr	r1, [pc, #232]	; (80235b0 <__ieee754_pow+0xa48>)
 80234c6:	2000      	movs	r0, #0
 80234c8:	f7dc fefe 	bl	80002c8 <__aeabi_dsub>
 80234cc:	ec41 0b10 	vmov	d0, r0, r1
 80234d0:	ee10 3a90 	vmov	r3, s1
 80234d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80234d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80234dc:	da2b      	bge.n	8023536 <__ieee754_pow+0x9ce>
 80234de:	4650      	mov	r0, sl
 80234e0:	f000 f966 	bl	80237b0 <scalbn>
 80234e4:	ec51 0b10 	vmov	r0, r1, d0
 80234e8:	ec53 2b18 	vmov	r2, r3, d8
 80234ec:	f7ff bbed 	b.w	8022cca <__ieee754_pow+0x162>
 80234f0:	4b30      	ldr	r3, [pc, #192]	; (80235b4 <__ieee754_pow+0xa4c>)
 80234f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80234f6:	429e      	cmp	r6, r3
 80234f8:	f77f af0c 	ble.w	8023314 <__ieee754_pow+0x7ac>
 80234fc:	4b2e      	ldr	r3, [pc, #184]	; (80235b8 <__ieee754_pow+0xa50>)
 80234fe:	440b      	add	r3, r1
 8023500:	4303      	orrs	r3, r0
 8023502:	d009      	beq.n	8023518 <__ieee754_pow+0x9b0>
 8023504:	ec51 0b18 	vmov	r0, r1, d8
 8023508:	2200      	movs	r2, #0
 802350a:	2300      	movs	r3, #0
 802350c:	f7dd fb06 	bl	8000b1c <__aeabi_dcmplt>
 8023510:	3800      	subs	r0, #0
 8023512:	bf18      	it	ne
 8023514:	2001      	movne	r0, #1
 8023516:	e447      	b.n	8022da8 <__ieee754_pow+0x240>
 8023518:	4622      	mov	r2, r4
 802351a:	462b      	mov	r3, r5
 802351c:	f7dc fed4 	bl	80002c8 <__aeabi_dsub>
 8023520:	4642      	mov	r2, r8
 8023522:	464b      	mov	r3, r9
 8023524:	f7dd fb0e 	bl	8000b44 <__aeabi_dcmpge>
 8023528:	2800      	cmp	r0, #0
 802352a:	f43f aef3 	beq.w	8023314 <__ieee754_pow+0x7ac>
 802352e:	e7e9      	b.n	8023504 <__ieee754_pow+0x99c>
 8023530:	f04f 0a00 	mov.w	sl, #0
 8023534:	e71a      	b.n	802336c <__ieee754_pow+0x804>
 8023536:	ec51 0b10 	vmov	r0, r1, d0
 802353a:	4619      	mov	r1, r3
 802353c:	e7d4      	b.n	80234e8 <__ieee754_pow+0x980>
 802353e:	491c      	ldr	r1, [pc, #112]	; (80235b0 <__ieee754_pow+0xa48>)
 8023540:	2000      	movs	r0, #0
 8023542:	f7ff bb30 	b.w	8022ba6 <__ieee754_pow+0x3e>
 8023546:	2000      	movs	r0, #0
 8023548:	2100      	movs	r1, #0
 802354a:	f7ff bb2c 	b.w	8022ba6 <__ieee754_pow+0x3e>
 802354e:	4630      	mov	r0, r6
 8023550:	4639      	mov	r1, r7
 8023552:	f7ff bb28 	b.w	8022ba6 <__ieee754_pow+0x3e>
 8023556:	9204      	str	r2, [sp, #16]
 8023558:	f7ff bb7a 	b.w	8022c50 <__ieee754_pow+0xe8>
 802355c:	2300      	movs	r3, #0
 802355e:	f7ff bb64 	b.w	8022c2a <__ieee754_pow+0xc2>
 8023562:	bf00      	nop
 8023564:	f3af 8000 	nop.w
 8023568:	00000000 	.word	0x00000000
 802356c:	3fe62e43 	.word	0x3fe62e43
 8023570:	fefa39ef 	.word	0xfefa39ef
 8023574:	3fe62e42 	.word	0x3fe62e42
 8023578:	0ca86c39 	.word	0x0ca86c39
 802357c:	be205c61 	.word	0xbe205c61
 8023580:	72bea4d0 	.word	0x72bea4d0
 8023584:	3e663769 	.word	0x3e663769
 8023588:	c5d26bf1 	.word	0xc5d26bf1
 802358c:	3ebbbd41 	.word	0x3ebbbd41
 8023590:	af25de2c 	.word	0xaf25de2c
 8023594:	3f11566a 	.word	0x3f11566a
 8023598:	16bebd93 	.word	0x16bebd93
 802359c:	3f66c16c 	.word	0x3f66c16c
 80235a0:	5555553e 	.word	0x5555553e
 80235a4:	3fc55555 	.word	0x3fc55555
 80235a8:	3fe00000 	.word	0x3fe00000
 80235ac:	000fffff 	.word	0x000fffff
 80235b0:	3ff00000 	.word	0x3ff00000
 80235b4:	4090cbff 	.word	0x4090cbff
 80235b8:	3f6f3400 	.word	0x3f6f3400
 80235bc:	652b82fe 	.word	0x652b82fe
 80235c0:	3c971547 	.word	0x3c971547

080235c4 <__ieee754_sqrt>:
 80235c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80235c8:	ec55 4b10 	vmov	r4, r5, d0
 80235cc:	4e55      	ldr	r6, [pc, #340]	; (8023724 <__ieee754_sqrt+0x160>)
 80235ce:	43ae      	bics	r6, r5
 80235d0:	ee10 0a10 	vmov	r0, s0
 80235d4:	ee10 3a10 	vmov	r3, s0
 80235d8:	462a      	mov	r2, r5
 80235da:	4629      	mov	r1, r5
 80235dc:	d110      	bne.n	8023600 <__ieee754_sqrt+0x3c>
 80235de:	ee10 2a10 	vmov	r2, s0
 80235e2:	462b      	mov	r3, r5
 80235e4:	f7dd f828 	bl	8000638 <__aeabi_dmul>
 80235e8:	4602      	mov	r2, r0
 80235ea:	460b      	mov	r3, r1
 80235ec:	4620      	mov	r0, r4
 80235ee:	4629      	mov	r1, r5
 80235f0:	f7dc fe6c 	bl	80002cc <__adddf3>
 80235f4:	4604      	mov	r4, r0
 80235f6:	460d      	mov	r5, r1
 80235f8:	ec45 4b10 	vmov	d0, r4, r5
 80235fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023600:	2d00      	cmp	r5, #0
 8023602:	dc10      	bgt.n	8023626 <__ieee754_sqrt+0x62>
 8023604:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8023608:	4330      	orrs	r0, r6
 802360a:	d0f5      	beq.n	80235f8 <__ieee754_sqrt+0x34>
 802360c:	b15d      	cbz	r5, 8023626 <__ieee754_sqrt+0x62>
 802360e:	ee10 2a10 	vmov	r2, s0
 8023612:	462b      	mov	r3, r5
 8023614:	ee10 0a10 	vmov	r0, s0
 8023618:	f7dc fe56 	bl	80002c8 <__aeabi_dsub>
 802361c:	4602      	mov	r2, r0
 802361e:	460b      	mov	r3, r1
 8023620:	f7dd f934 	bl	800088c <__aeabi_ddiv>
 8023624:	e7e6      	b.n	80235f4 <__ieee754_sqrt+0x30>
 8023626:	1512      	asrs	r2, r2, #20
 8023628:	d074      	beq.n	8023714 <__ieee754_sqrt+0x150>
 802362a:	07d4      	lsls	r4, r2, #31
 802362c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8023630:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8023634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8023638:	bf5e      	ittt	pl
 802363a:	0fda      	lsrpl	r2, r3, #31
 802363c:	005b      	lslpl	r3, r3, #1
 802363e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8023642:	2400      	movs	r4, #0
 8023644:	0fda      	lsrs	r2, r3, #31
 8023646:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 802364a:	107f      	asrs	r7, r7, #1
 802364c:	005b      	lsls	r3, r3, #1
 802364e:	2516      	movs	r5, #22
 8023650:	4620      	mov	r0, r4
 8023652:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8023656:	1886      	adds	r6, r0, r2
 8023658:	428e      	cmp	r6, r1
 802365a:	bfde      	ittt	le
 802365c:	1b89      	suble	r1, r1, r6
 802365e:	18b0      	addle	r0, r6, r2
 8023660:	18a4      	addle	r4, r4, r2
 8023662:	0049      	lsls	r1, r1, #1
 8023664:	3d01      	subs	r5, #1
 8023666:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 802366a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 802366e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8023672:	d1f0      	bne.n	8023656 <__ieee754_sqrt+0x92>
 8023674:	462a      	mov	r2, r5
 8023676:	f04f 0e20 	mov.w	lr, #32
 802367a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 802367e:	4281      	cmp	r1, r0
 8023680:	eb06 0c05 	add.w	ip, r6, r5
 8023684:	dc02      	bgt.n	802368c <__ieee754_sqrt+0xc8>
 8023686:	d113      	bne.n	80236b0 <__ieee754_sqrt+0xec>
 8023688:	459c      	cmp	ip, r3
 802368a:	d811      	bhi.n	80236b0 <__ieee754_sqrt+0xec>
 802368c:	f1bc 0f00 	cmp.w	ip, #0
 8023690:	eb0c 0506 	add.w	r5, ip, r6
 8023694:	da43      	bge.n	802371e <__ieee754_sqrt+0x15a>
 8023696:	2d00      	cmp	r5, #0
 8023698:	db41      	blt.n	802371e <__ieee754_sqrt+0x15a>
 802369a:	f100 0801 	add.w	r8, r0, #1
 802369e:	1a09      	subs	r1, r1, r0
 80236a0:	459c      	cmp	ip, r3
 80236a2:	bf88      	it	hi
 80236a4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80236a8:	eba3 030c 	sub.w	r3, r3, ip
 80236ac:	4432      	add	r2, r6
 80236ae:	4640      	mov	r0, r8
 80236b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80236b4:	f1be 0e01 	subs.w	lr, lr, #1
 80236b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80236bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80236c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80236c4:	d1db      	bne.n	802367e <__ieee754_sqrt+0xba>
 80236c6:	430b      	orrs	r3, r1
 80236c8:	d006      	beq.n	80236d8 <__ieee754_sqrt+0x114>
 80236ca:	1c50      	adds	r0, r2, #1
 80236cc:	bf13      	iteet	ne
 80236ce:	3201      	addne	r2, #1
 80236d0:	3401      	addeq	r4, #1
 80236d2:	4672      	moveq	r2, lr
 80236d4:	f022 0201 	bicne.w	r2, r2, #1
 80236d8:	1063      	asrs	r3, r4, #1
 80236da:	0852      	lsrs	r2, r2, #1
 80236dc:	07e1      	lsls	r1, r4, #31
 80236de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80236e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80236e6:	bf48      	it	mi
 80236e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80236ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80236f0:	4614      	mov	r4, r2
 80236f2:	e781      	b.n	80235f8 <__ieee754_sqrt+0x34>
 80236f4:	0ad9      	lsrs	r1, r3, #11
 80236f6:	3815      	subs	r0, #21
 80236f8:	055b      	lsls	r3, r3, #21
 80236fa:	2900      	cmp	r1, #0
 80236fc:	d0fa      	beq.n	80236f4 <__ieee754_sqrt+0x130>
 80236fe:	02cd      	lsls	r5, r1, #11
 8023700:	d50a      	bpl.n	8023718 <__ieee754_sqrt+0x154>
 8023702:	f1c2 0420 	rsb	r4, r2, #32
 8023706:	fa23 f404 	lsr.w	r4, r3, r4
 802370a:	1e55      	subs	r5, r2, #1
 802370c:	4093      	lsls	r3, r2
 802370e:	4321      	orrs	r1, r4
 8023710:	1b42      	subs	r2, r0, r5
 8023712:	e78a      	b.n	802362a <__ieee754_sqrt+0x66>
 8023714:	4610      	mov	r0, r2
 8023716:	e7f0      	b.n	80236fa <__ieee754_sqrt+0x136>
 8023718:	0049      	lsls	r1, r1, #1
 802371a:	3201      	adds	r2, #1
 802371c:	e7ef      	b.n	80236fe <__ieee754_sqrt+0x13a>
 802371e:	4680      	mov	r8, r0
 8023720:	e7bd      	b.n	802369e <__ieee754_sqrt+0xda>
 8023722:	bf00      	nop
 8023724:	7ff00000 	.word	0x7ff00000

08023728 <with_errno>:
 8023728:	b570      	push	{r4, r5, r6, lr}
 802372a:	4604      	mov	r4, r0
 802372c:	460d      	mov	r5, r1
 802372e:	4616      	mov	r6, r2
 8023730:	f000 f8d2 	bl	80238d8 <__errno>
 8023734:	4629      	mov	r1, r5
 8023736:	6006      	str	r6, [r0, #0]
 8023738:	4620      	mov	r0, r4
 802373a:	bd70      	pop	{r4, r5, r6, pc}

0802373c <xflow>:
 802373c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802373e:	4614      	mov	r4, r2
 8023740:	461d      	mov	r5, r3
 8023742:	b108      	cbz	r0, 8023748 <xflow+0xc>
 8023744:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023748:	e9cd 2300 	strd	r2, r3, [sp]
 802374c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023750:	4620      	mov	r0, r4
 8023752:	4629      	mov	r1, r5
 8023754:	f7dc ff70 	bl	8000638 <__aeabi_dmul>
 8023758:	2222      	movs	r2, #34	; 0x22
 802375a:	b003      	add	sp, #12
 802375c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023760:	f7ff bfe2 	b.w	8023728 <with_errno>

08023764 <__math_uflow>:
 8023764:	b508      	push	{r3, lr}
 8023766:	2200      	movs	r2, #0
 8023768:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 802376c:	f7ff ffe6 	bl	802373c <xflow>
 8023770:	ec41 0b10 	vmov	d0, r0, r1
 8023774:	bd08      	pop	{r3, pc}

08023776 <__math_oflow>:
 8023776:	b508      	push	{r3, lr}
 8023778:	2200      	movs	r2, #0
 802377a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 802377e:	f7ff ffdd 	bl	802373c <xflow>
 8023782:	ec41 0b10 	vmov	d0, r0, r1
 8023786:	bd08      	pop	{r3, pc}

08023788 <fabs>:
 8023788:	ec51 0b10 	vmov	r0, r1, d0
 802378c:	ee10 2a10 	vmov	r2, s0
 8023790:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8023794:	ec43 2b10 	vmov	d0, r2, r3
 8023798:	4770      	bx	lr

0802379a <finite>:
 802379a:	b082      	sub	sp, #8
 802379c:	ed8d 0b00 	vstr	d0, [sp]
 80237a0:	9801      	ldr	r0, [sp, #4]
 80237a2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80237a6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80237aa:	0fc0      	lsrs	r0, r0, #31
 80237ac:	b002      	add	sp, #8
 80237ae:	4770      	bx	lr

080237b0 <scalbn>:
 80237b0:	b570      	push	{r4, r5, r6, lr}
 80237b2:	ec55 4b10 	vmov	r4, r5, d0
 80237b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80237ba:	4606      	mov	r6, r0
 80237bc:	462b      	mov	r3, r5
 80237be:	b99a      	cbnz	r2, 80237e8 <scalbn+0x38>
 80237c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80237c4:	4323      	orrs	r3, r4
 80237c6:	d036      	beq.n	8023836 <scalbn+0x86>
 80237c8:	4b39      	ldr	r3, [pc, #228]	; (80238b0 <scalbn+0x100>)
 80237ca:	4629      	mov	r1, r5
 80237cc:	ee10 0a10 	vmov	r0, s0
 80237d0:	2200      	movs	r2, #0
 80237d2:	f7dc ff31 	bl	8000638 <__aeabi_dmul>
 80237d6:	4b37      	ldr	r3, [pc, #220]	; (80238b4 <scalbn+0x104>)
 80237d8:	429e      	cmp	r6, r3
 80237da:	4604      	mov	r4, r0
 80237dc:	460d      	mov	r5, r1
 80237de:	da10      	bge.n	8023802 <scalbn+0x52>
 80237e0:	a32b      	add	r3, pc, #172	; (adr r3, 8023890 <scalbn+0xe0>)
 80237e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237e6:	e03a      	b.n	802385e <scalbn+0xae>
 80237e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80237ec:	428a      	cmp	r2, r1
 80237ee:	d10c      	bne.n	802380a <scalbn+0x5a>
 80237f0:	ee10 2a10 	vmov	r2, s0
 80237f4:	4620      	mov	r0, r4
 80237f6:	4629      	mov	r1, r5
 80237f8:	f7dc fd68 	bl	80002cc <__adddf3>
 80237fc:	4604      	mov	r4, r0
 80237fe:	460d      	mov	r5, r1
 8023800:	e019      	b.n	8023836 <scalbn+0x86>
 8023802:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8023806:	460b      	mov	r3, r1
 8023808:	3a36      	subs	r2, #54	; 0x36
 802380a:	4432      	add	r2, r6
 802380c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8023810:	428a      	cmp	r2, r1
 8023812:	dd08      	ble.n	8023826 <scalbn+0x76>
 8023814:	2d00      	cmp	r5, #0
 8023816:	a120      	add	r1, pc, #128	; (adr r1, 8023898 <scalbn+0xe8>)
 8023818:	e9d1 0100 	ldrd	r0, r1, [r1]
 802381c:	da1c      	bge.n	8023858 <scalbn+0xa8>
 802381e:	a120      	add	r1, pc, #128	; (adr r1, 80238a0 <scalbn+0xf0>)
 8023820:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023824:	e018      	b.n	8023858 <scalbn+0xa8>
 8023826:	2a00      	cmp	r2, #0
 8023828:	dd08      	ble.n	802383c <scalbn+0x8c>
 802382a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802382e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023832:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8023836:	ec45 4b10 	vmov	d0, r4, r5
 802383a:	bd70      	pop	{r4, r5, r6, pc}
 802383c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8023840:	da19      	bge.n	8023876 <scalbn+0xc6>
 8023842:	f24c 3350 	movw	r3, #50000	; 0xc350
 8023846:	429e      	cmp	r6, r3
 8023848:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802384c:	dd0a      	ble.n	8023864 <scalbn+0xb4>
 802384e:	a112      	add	r1, pc, #72	; (adr r1, 8023898 <scalbn+0xe8>)
 8023850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023854:	2b00      	cmp	r3, #0
 8023856:	d1e2      	bne.n	802381e <scalbn+0x6e>
 8023858:	a30f      	add	r3, pc, #60	; (adr r3, 8023898 <scalbn+0xe8>)
 802385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802385e:	f7dc feeb 	bl	8000638 <__aeabi_dmul>
 8023862:	e7cb      	b.n	80237fc <scalbn+0x4c>
 8023864:	a10a      	add	r1, pc, #40	; (adr r1, 8023890 <scalbn+0xe0>)
 8023866:	e9d1 0100 	ldrd	r0, r1, [r1]
 802386a:	2b00      	cmp	r3, #0
 802386c:	d0b8      	beq.n	80237e0 <scalbn+0x30>
 802386e:	a10e      	add	r1, pc, #56	; (adr r1, 80238a8 <scalbn+0xf8>)
 8023870:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023874:	e7b4      	b.n	80237e0 <scalbn+0x30>
 8023876:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802387a:	3236      	adds	r2, #54	; 0x36
 802387c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023880:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8023884:	4620      	mov	r0, r4
 8023886:	4b0c      	ldr	r3, [pc, #48]	; (80238b8 <scalbn+0x108>)
 8023888:	2200      	movs	r2, #0
 802388a:	e7e8      	b.n	802385e <scalbn+0xae>
 802388c:	f3af 8000 	nop.w
 8023890:	c2f8f359 	.word	0xc2f8f359
 8023894:	01a56e1f 	.word	0x01a56e1f
 8023898:	8800759c 	.word	0x8800759c
 802389c:	7e37e43c 	.word	0x7e37e43c
 80238a0:	8800759c 	.word	0x8800759c
 80238a4:	fe37e43c 	.word	0xfe37e43c
 80238a8:	c2f8f359 	.word	0xc2f8f359
 80238ac:	81a56e1f 	.word	0x81a56e1f
 80238b0:	43500000 	.word	0x43500000
 80238b4:	ffff3cb0 	.word	0xffff3cb0
 80238b8:	3c900000 	.word	0x3c900000

080238bc <abort>:
 80238bc:	b508      	push	{r3, lr}
 80238be:	2006      	movs	r0, #6
 80238c0:	f000 fb46 	bl	8023f50 <raise>
 80238c4:	2001      	movs	r0, #1
 80238c6:	f7e6 ffc1 	bl	800a84c <_exit>

080238ca <atexit>:
 80238ca:	2300      	movs	r3, #0
 80238cc:	4601      	mov	r1, r0
 80238ce:	461a      	mov	r2, r3
 80238d0:	4618      	mov	r0, r3
 80238d2:	f000 bc01 	b.w	80240d8 <__register_exitproc>
	...

080238d8 <__errno>:
 80238d8:	4b01      	ldr	r3, [pc, #4]	; (80238e0 <__errno+0x8>)
 80238da:	6818      	ldr	r0, [r3, #0]
 80238dc:	4770      	bx	lr
 80238de:	bf00      	nop
 80238e0:	2000003c 	.word	0x2000003c

080238e4 <std>:
 80238e4:	2300      	movs	r3, #0
 80238e6:	b510      	push	{r4, lr}
 80238e8:	4604      	mov	r4, r0
 80238ea:	e9c0 3300 	strd	r3, r3, [r0]
 80238ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80238f2:	6083      	str	r3, [r0, #8]
 80238f4:	8181      	strh	r1, [r0, #12]
 80238f6:	6643      	str	r3, [r0, #100]	; 0x64
 80238f8:	81c2      	strh	r2, [r0, #14]
 80238fa:	6183      	str	r3, [r0, #24]
 80238fc:	4619      	mov	r1, r3
 80238fe:	2208      	movs	r2, #8
 8023900:	305c      	adds	r0, #92	; 0x5c
 8023902:	f000 f955 	bl	8023bb0 <memset>
 8023906:	4b05      	ldr	r3, [pc, #20]	; (802391c <std+0x38>)
 8023908:	6263      	str	r3, [r4, #36]	; 0x24
 802390a:	4b05      	ldr	r3, [pc, #20]	; (8023920 <std+0x3c>)
 802390c:	62a3      	str	r3, [r4, #40]	; 0x28
 802390e:	4b05      	ldr	r3, [pc, #20]	; (8023924 <std+0x40>)
 8023910:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023912:	4b05      	ldr	r3, [pc, #20]	; (8023928 <std+0x44>)
 8023914:	6224      	str	r4, [r4, #32]
 8023916:	6323      	str	r3, [r4, #48]	; 0x30
 8023918:	bd10      	pop	{r4, pc}
 802391a:	bf00      	nop
 802391c:	08023fc9 	.word	0x08023fc9
 8023920:	08023feb 	.word	0x08023feb
 8023924:	08024023 	.word	0x08024023
 8023928:	08024047 	.word	0x08024047

0802392c <_cleanup_r>:
 802392c:	4901      	ldr	r1, [pc, #4]	; (8023934 <_cleanup_r+0x8>)
 802392e:	f000 b8af 	b.w	8023a90 <_fwalk_reent>
 8023932:	bf00      	nop
 8023934:	08024305 	.word	0x08024305

08023938 <__sfmoreglue>:
 8023938:	b570      	push	{r4, r5, r6, lr}
 802393a:	2268      	movs	r2, #104	; 0x68
 802393c:	1e4d      	subs	r5, r1, #1
 802393e:	4355      	muls	r5, r2
 8023940:	460e      	mov	r6, r1
 8023942:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023946:	f000 f9a7 	bl	8023c98 <_malloc_r>
 802394a:	4604      	mov	r4, r0
 802394c:	b140      	cbz	r0, 8023960 <__sfmoreglue+0x28>
 802394e:	2100      	movs	r1, #0
 8023950:	e9c0 1600 	strd	r1, r6, [r0]
 8023954:	300c      	adds	r0, #12
 8023956:	60a0      	str	r0, [r4, #8]
 8023958:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802395c:	f000 f928 	bl	8023bb0 <memset>
 8023960:	4620      	mov	r0, r4
 8023962:	bd70      	pop	{r4, r5, r6, pc}

08023964 <__sfp_lock_acquire>:
 8023964:	4801      	ldr	r0, [pc, #4]	; (802396c <__sfp_lock_acquire+0x8>)
 8023966:	f000 b8d8 	b.w	8023b1a <__retarget_lock_acquire_recursive>
 802396a:	bf00      	nop
 802396c:	2000c0fd 	.word	0x2000c0fd

08023970 <__sfp_lock_release>:
 8023970:	4801      	ldr	r0, [pc, #4]	; (8023978 <__sfp_lock_release+0x8>)
 8023972:	f000 b8d4 	b.w	8023b1e <__retarget_lock_release_recursive>
 8023976:	bf00      	nop
 8023978:	2000c0fd 	.word	0x2000c0fd

0802397c <__sinit_lock_acquire>:
 802397c:	4801      	ldr	r0, [pc, #4]	; (8023984 <__sinit_lock_acquire+0x8>)
 802397e:	f000 b8cc 	b.w	8023b1a <__retarget_lock_acquire_recursive>
 8023982:	bf00      	nop
 8023984:	2000c0fe 	.word	0x2000c0fe

08023988 <__sinit_lock_release>:
 8023988:	4801      	ldr	r0, [pc, #4]	; (8023990 <__sinit_lock_release+0x8>)
 802398a:	f000 b8c8 	b.w	8023b1e <__retarget_lock_release_recursive>
 802398e:	bf00      	nop
 8023990:	2000c0fe 	.word	0x2000c0fe

08023994 <__sinit>:
 8023994:	b510      	push	{r4, lr}
 8023996:	4604      	mov	r4, r0
 8023998:	f7ff fff0 	bl	802397c <__sinit_lock_acquire>
 802399c:	69a3      	ldr	r3, [r4, #24]
 802399e:	b11b      	cbz	r3, 80239a8 <__sinit+0x14>
 80239a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239a4:	f7ff bff0 	b.w	8023988 <__sinit_lock_release>
 80239a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80239ac:	6523      	str	r3, [r4, #80]	; 0x50
 80239ae:	4b13      	ldr	r3, [pc, #76]	; (80239fc <__sinit+0x68>)
 80239b0:	4a13      	ldr	r2, [pc, #76]	; (8023a00 <__sinit+0x6c>)
 80239b2:	681b      	ldr	r3, [r3, #0]
 80239b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80239b6:	42a3      	cmp	r3, r4
 80239b8:	bf04      	itt	eq
 80239ba:	2301      	moveq	r3, #1
 80239bc:	61a3      	streq	r3, [r4, #24]
 80239be:	4620      	mov	r0, r4
 80239c0:	f000 f820 	bl	8023a04 <__sfp>
 80239c4:	6060      	str	r0, [r4, #4]
 80239c6:	4620      	mov	r0, r4
 80239c8:	f000 f81c 	bl	8023a04 <__sfp>
 80239cc:	60a0      	str	r0, [r4, #8]
 80239ce:	4620      	mov	r0, r4
 80239d0:	f000 f818 	bl	8023a04 <__sfp>
 80239d4:	2200      	movs	r2, #0
 80239d6:	60e0      	str	r0, [r4, #12]
 80239d8:	2104      	movs	r1, #4
 80239da:	6860      	ldr	r0, [r4, #4]
 80239dc:	f7ff ff82 	bl	80238e4 <std>
 80239e0:	68a0      	ldr	r0, [r4, #8]
 80239e2:	2201      	movs	r2, #1
 80239e4:	2109      	movs	r1, #9
 80239e6:	f7ff ff7d 	bl	80238e4 <std>
 80239ea:	68e0      	ldr	r0, [r4, #12]
 80239ec:	2202      	movs	r2, #2
 80239ee:	2112      	movs	r1, #18
 80239f0:	f7ff ff78 	bl	80238e4 <std>
 80239f4:	2301      	movs	r3, #1
 80239f6:	61a3      	str	r3, [r4, #24]
 80239f8:	e7d2      	b.n	80239a0 <__sinit+0xc>
 80239fa:	bf00      	nop
 80239fc:	08028a98 	.word	0x08028a98
 8023a00:	0802392d 	.word	0x0802392d

08023a04 <__sfp>:
 8023a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a06:	4607      	mov	r7, r0
 8023a08:	f7ff ffac 	bl	8023964 <__sfp_lock_acquire>
 8023a0c:	4b1e      	ldr	r3, [pc, #120]	; (8023a88 <__sfp+0x84>)
 8023a0e:	681e      	ldr	r6, [r3, #0]
 8023a10:	69b3      	ldr	r3, [r6, #24]
 8023a12:	b913      	cbnz	r3, 8023a1a <__sfp+0x16>
 8023a14:	4630      	mov	r0, r6
 8023a16:	f7ff ffbd 	bl	8023994 <__sinit>
 8023a1a:	3648      	adds	r6, #72	; 0x48
 8023a1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023a20:	3b01      	subs	r3, #1
 8023a22:	d503      	bpl.n	8023a2c <__sfp+0x28>
 8023a24:	6833      	ldr	r3, [r6, #0]
 8023a26:	b30b      	cbz	r3, 8023a6c <__sfp+0x68>
 8023a28:	6836      	ldr	r6, [r6, #0]
 8023a2a:	e7f7      	b.n	8023a1c <__sfp+0x18>
 8023a2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023a30:	b9d5      	cbnz	r5, 8023a68 <__sfp+0x64>
 8023a32:	4b16      	ldr	r3, [pc, #88]	; (8023a8c <__sfp+0x88>)
 8023a34:	60e3      	str	r3, [r4, #12]
 8023a36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023a3a:	6665      	str	r5, [r4, #100]	; 0x64
 8023a3c:	f000 f86c 	bl	8023b18 <__retarget_lock_init_recursive>
 8023a40:	f7ff ff96 	bl	8023970 <__sfp_lock_release>
 8023a44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023a48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023a4c:	6025      	str	r5, [r4, #0]
 8023a4e:	61a5      	str	r5, [r4, #24]
 8023a50:	2208      	movs	r2, #8
 8023a52:	4629      	mov	r1, r5
 8023a54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023a58:	f000 f8aa 	bl	8023bb0 <memset>
 8023a5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023a60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023a64:	4620      	mov	r0, r4
 8023a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023a68:	3468      	adds	r4, #104	; 0x68
 8023a6a:	e7d9      	b.n	8023a20 <__sfp+0x1c>
 8023a6c:	2104      	movs	r1, #4
 8023a6e:	4638      	mov	r0, r7
 8023a70:	f7ff ff62 	bl	8023938 <__sfmoreglue>
 8023a74:	4604      	mov	r4, r0
 8023a76:	6030      	str	r0, [r6, #0]
 8023a78:	2800      	cmp	r0, #0
 8023a7a:	d1d5      	bne.n	8023a28 <__sfp+0x24>
 8023a7c:	f7ff ff78 	bl	8023970 <__sfp_lock_release>
 8023a80:	230c      	movs	r3, #12
 8023a82:	603b      	str	r3, [r7, #0]
 8023a84:	e7ee      	b.n	8023a64 <__sfp+0x60>
 8023a86:	bf00      	nop
 8023a88:	08028a98 	.word	0x08028a98
 8023a8c:	ffff0001 	.word	0xffff0001

08023a90 <_fwalk_reent>:
 8023a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023a94:	4606      	mov	r6, r0
 8023a96:	4688      	mov	r8, r1
 8023a98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023a9c:	2700      	movs	r7, #0
 8023a9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023aa2:	f1b9 0901 	subs.w	r9, r9, #1
 8023aa6:	d505      	bpl.n	8023ab4 <_fwalk_reent+0x24>
 8023aa8:	6824      	ldr	r4, [r4, #0]
 8023aaa:	2c00      	cmp	r4, #0
 8023aac:	d1f7      	bne.n	8023a9e <_fwalk_reent+0xe>
 8023aae:	4638      	mov	r0, r7
 8023ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023ab4:	89ab      	ldrh	r3, [r5, #12]
 8023ab6:	2b01      	cmp	r3, #1
 8023ab8:	d907      	bls.n	8023aca <_fwalk_reent+0x3a>
 8023aba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023abe:	3301      	adds	r3, #1
 8023ac0:	d003      	beq.n	8023aca <_fwalk_reent+0x3a>
 8023ac2:	4629      	mov	r1, r5
 8023ac4:	4630      	mov	r0, r6
 8023ac6:	47c0      	blx	r8
 8023ac8:	4307      	orrs	r7, r0
 8023aca:	3568      	adds	r5, #104	; 0x68
 8023acc:	e7e9      	b.n	8023aa2 <_fwalk_reent+0x12>
	...

08023ad0 <__libc_init_array>:
 8023ad0:	b570      	push	{r4, r5, r6, lr}
 8023ad2:	4d0d      	ldr	r5, [pc, #52]	; (8023b08 <__libc_init_array+0x38>)
 8023ad4:	4c0d      	ldr	r4, [pc, #52]	; (8023b0c <__libc_init_array+0x3c>)
 8023ad6:	1b64      	subs	r4, r4, r5
 8023ad8:	10a4      	asrs	r4, r4, #2
 8023ada:	2600      	movs	r6, #0
 8023adc:	42a6      	cmp	r6, r4
 8023ade:	d109      	bne.n	8023af4 <__libc_init_array+0x24>
 8023ae0:	4d0b      	ldr	r5, [pc, #44]	; (8023b10 <__libc_init_array+0x40>)
 8023ae2:	4c0c      	ldr	r4, [pc, #48]	; (8023b14 <__libc_init_array+0x44>)
 8023ae4:	f001 fa4a 	bl	8024f7c <_init>
 8023ae8:	1b64      	subs	r4, r4, r5
 8023aea:	10a4      	asrs	r4, r4, #2
 8023aec:	2600      	movs	r6, #0
 8023aee:	42a6      	cmp	r6, r4
 8023af0:	d105      	bne.n	8023afe <__libc_init_array+0x2e>
 8023af2:	bd70      	pop	{r4, r5, r6, pc}
 8023af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8023af8:	4798      	blx	r3
 8023afa:	3601      	adds	r6, #1
 8023afc:	e7ee      	b.n	8023adc <__libc_init_array+0xc>
 8023afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8023b02:	4798      	blx	r3
 8023b04:	3601      	adds	r6, #1
 8023b06:	e7f2      	b.n	8023aee <__libc_init_array+0x1e>
 8023b08:	08028b88 	.word	0x08028b88
 8023b0c:	08028b88 	.word	0x08028b88
 8023b10:	08028b88 	.word	0x08028b88
 8023b14:	08028b90 	.word	0x08028b90

08023b18 <__retarget_lock_init_recursive>:
 8023b18:	4770      	bx	lr

08023b1a <__retarget_lock_acquire_recursive>:
 8023b1a:	4770      	bx	lr

08023b1c <__retarget_lock_release>:
 8023b1c:	4770      	bx	lr

08023b1e <__retarget_lock_release_recursive>:
 8023b1e:	4770      	bx	lr

08023b20 <malloc>:
 8023b20:	4b02      	ldr	r3, [pc, #8]	; (8023b2c <malloc+0xc>)
 8023b22:	4601      	mov	r1, r0
 8023b24:	6818      	ldr	r0, [r3, #0]
 8023b26:	f000 b8b7 	b.w	8023c98 <_malloc_r>
 8023b2a:	bf00      	nop
 8023b2c:	2000003c 	.word	0x2000003c

08023b30 <free>:
 8023b30:	4b02      	ldr	r3, [pc, #8]	; (8023b3c <free+0xc>)
 8023b32:	4601      	mov	r1, r0
 8023b34:	6818      	ldr	r0, [r3, #0]
 8023b36:	f000 b843 	b.w	8023bc0 <_free_r>
 8023b3a:	bf00      	nop
 8023b3c:	2000003c 	.word	0x2000003c

08023b40 <memcmp>:
 8023b40:	b510      	push	{r4, lr}
 8023b42:	3901      	subs	r1, #1
 8023b44:	4402      	add	r2, r0
 8023b46:	4290      	cmp	r0, r2
 8023b48:	d101      	bne.n	8023b4e <memcmp+0xe>
 8023b4a:	2000      	movs	r0, #0
 8023b4c:	e005      	b.n	8023b5a <memcmp+0x1a>
 8023b4e:	7803      	ldrb	r3, [r0, #0]
 8023b50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023b54:	42a3      	cmp	r3, r4
 8023b56:	d001      	beq.n	8023b5c <memcmp+0x1c>
 8023b58:	1b18      	subs	r0, r3, r4
 8023b5a:	bd10      	pop	{r4, pc}
 8023b5c:	3001      	adds	r0, #1
 8023b5e:	e7f2      	b.n	8023b46 <memcmp+0x6>

08023b60 <memcpy>:
 8023b60:	440a      	add	r2, r1
 8023b62:	4291      	cmp	r1, r2
 8023b64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8023b68:	d100      	bne.n	8023b6c <memcpy+0xc>
 8023b6a:	4770      	bx	lr
 8023b6c:	b510      	push	{r4, lr}
 8023b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023b76:	4291      	cmp	r1, r2
 8023b78:	d1f9      	bne.n	8023b6e <memcpy+0xe>
 8023b7a:	bd10      	pop	{r4, pc}

08023b7c <memmove>:
 8023b7c:	4288      	cmp	r0, r1
 8023b7e:	b510      	push	{r4, lr}
 8023b80:	eb01 0402 	add.w	r4, r1, r2
 8023b84:	d902      	bls.n	8023b8c <memmove+0x10>
 8023b86:	4284      	cmp	r4, r0
 8023b88:	4623      	mov	r3, r4
 8023b8a:	d807      	bhi.n	8023b9c <memmove+0x20>
 8023b8c:	1e43      	subs	r3, r0, #1
 8023b8e:	42a1      	cmp	r1, r4
 8023b90:	d008      	beq.n	8023ba4 <memmove+0x28>
 8023b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023b96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023b9a:	e7f8      	b.n	8023b8e <memmove+0x12>
 8023b9c:	4402      	add	r2, r0
 8023b9e:	4601      	mov	r1, r0
 8023ba0:	428a      	cmp	r2, r1
 8023ba2:	d100      	bne.n	8023ba6 <memmove+0x2a>
 8023ba4:	bd10      	pop	{r4, pc}
 8023ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023baa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023bae:	e7f7      	b.n	8023ba0 <memmove+0x24>

08023bb0 <memset>:
 8023bb0:	4402      	add	r2, r0
 8023bb2:	4603      	mov	r3, r0
 8023bb4:	4293      	cmp	r3, r2
 8023bb6:	d100      	bne.n	8023bba <memset+0xa>
 8023bb8:	4770      	bx	lr
 8023bba:	f803 1b01 	strb.w	r1, [r3], #1
 8023bbe:	e7f9      	b.n	8023bb4 <memset+0x4>

08023bc0 <_free_r>:
 8023bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023bc2:	2900      	cmp	r1, #0
 8023bc4:	d044      	beq.n	8023c50 <_free_r+0x90>
 8023bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023bca:	9001      	str	r0, [sp, #4]
 8023bcc:	2b00      	cmp	r3, #0
 8023bce:	f1a1 0404 	sub.w	r4, r1, #4
 8023bd2:	bfb8      	it	lt
 8023bd4:	18e4      	addlt	r4, r4, r3
 8023bd6:	f7dd fbbb 	bl	8001350 <__malloc_lock>
 8023bda:	4a1e      	ldr	r2, [pc, #120]	; (8023c54 <_free_r+0x94>)
 8023bdc:	9801      	ldr	r0, [sp, #4]
 8023bde:	6813      	ldr	r3, [r2, #0]
 8023be0:	b933      	cbnz	r3, 8023bf0 <_free_r+0x30>
 8023be2:	6063      	str	r3, [r4, #4]
 8023be4:	6014      	str	r4, [r2, #0]
 8023be6:	b003      	add	sp, #12
 8023be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023bec:	f7dd bbdb 	b.w	80013a6 <__malloc_unlock>
 8023bf0:	42a3      	cmp	r3, r4
 8023bf2:	d908      	bls.n	8023c06 <_free_r+0x46>
 8023bf4:	6825      	ldr	r5, [r4, #0]
 8023bf6:	1961      	adds	r1, r4, r5
 8023bf8:	428b      	cmp	r3, r1
 8023bfa:	bf01      	itttt	eq
 8023bfc:	6819      	ldreq	r1, [r3, #0]
 8023bfe:	685b      	ldreq	r3, [r3, #4]
 8023c00:	1949      	addeq	r1, r1, r5
 8023c02:	6021      	streq	r1, [r4, #0]
 8023c04:	e7ed      	b.n	8023be2 <_free_r+0x22>
 8023c06:	461a      	mov	r2, r3
 8023c08:	685b      	ldr	r3, [r3, #4]
 8023c0a:	b10b      	cbz	r3, 8023c10 <_free_r+0x50>
 8023c0c:	42a3      	cmp	r3, r4
 8023c0e:	d9fa      	bls.n	8023c06 <_free_r+0x46>
 8023c10:	6811      	ldr	r1, [r2, #0]
 8023c12:	1855      	adds	r5, r2, r1
 8023c14:	42a5      	cmp	r5, r4
 8023c16:	d10b      	bne.n	8023c30 <_free_r+0x70>
 8023c18:	6824      	ldr	r4, [r4, #0]
 8023c1a:	4421      	add	r1, r4
 8023c1c:	1854      	adds	r4, r2, r1
 8023c1e:	42a3      	cmp	r3, r4
 8023c20:	6011      	str	r1, [r2, #0]
 8023c22:	d1e0      	bne.n	8023be6 <_free_r+0x26>
 8023c24:	681c      	ldr	r4, [r3, #0]
 8023c26:	685b      	ldr	r3, [r3, #4]
 8023c28:	6053      	str	r3, [r2, #4]
 8023c2a:	4421      	add	r1, r4
 8023c2c:	6011      	str	r1, [r2, #0]
 8023c2e:	e7da      	b.n	8023be6 <_free_r+0x26>
 8023c30:	d902      	bls.n	8023c38 <_free_r+0x78>
 8023c32:	230c      	movs	r3, #12
 8023c34:	6003      	str	r3, [r0, #0]
 8023c36:	e7d6      	b.n	8023be6 <_free_r+0x26>
 8023c38:	6825      	ldr	r5, [r4, #0]
 8023c3a:	1961      	adds	r1, r4, r5
 8023c3c:	428b      	cmp	r3, r1
 8023c3e:	bf04      	itt	eq
 8023c40:	6819      	ldreq	r1, [r3, #0]
 8023c42:	685b      	ldreq	r3, [r3, #4]
 8023c44:	6063      	str	r3, [r4, #4]
 8023c46:	bf04      	itt	eq
 8023c48:	1949      	addeq	r1, r1, r5
 8023c4a:	6021      	streq	r1, [r4, #0]
 8023c4c:	6054      	str	r4, [r2, #4]
 8023c4e:	e7ca      	b.n	8023be6 <_free_r+0x26>
 8023c50:	b003      	add	sp, #12
 8023c52:	bd30      	pop	{r4, r5, pc}
 8023c54:	2000c100 	.word	0x2000c100

08023c58 <sbrk_aligned>:
 8023c58:	b570      	push	{r4, r5, r6, lr}
 8023c5a:	4e0e      	ldr	r6, [pc, #56]	; (8023c94 <sbrk_aligned+0x3c>)
 8023c5c:	460c      	mov	r4, r1
 8023c5e:	6831      	ldr	r1, [r6, #0]
 8023c60:	4605      	mov	r5, r0
 8023c62:	b911      	cbnz	r1, 8023c6a <sbrk_aligned+0x12>
 8023c64:	f7dd fb18 	bl	8001298 <_sbrk_r>
 8023c68:	6030      	str	r0, [r6, #0]
 8023c6a:	4621      	mov	r1, r4
 8023c6c:	4628      	mov	r0, r5
 8023c6e:	f7dd fb13 	bl	8001298 <_sbrk_r>
 8023c72:	1c43      	adds	r3, r0, #1
 8023c74:	d00a      	beq.n	8023c8c <sbrk_aligned+0x34>
 8023c76:	1cc4      	adds	r4, r0, #3
 8023c78:	f024 0403 	bic.w	r4, r4, #3
 8023c7c:	42a0      	cmp	r0, r4
 8023c7e:	d007      	beq.n	8023c90 <sbrk_aligned+0x38>
 8023c80:	1a21      	subs	r1, r4, r0
 8023c82:	4628      	mov	r0, r5
 8023c84:	f7dd fb08 	bl	8001298 <_sbrk_r>
 8023c88:	3001      	adds	r0, #1
 8023c8a:	d101      	bne.n	8023c90 <sbrk_aligned+0x38>
 8023c8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8023c90:	4620      	mov	r0, r4
 8023c92:	bd70      	pop	{r4, r5, r6, pc}
 8023c94:	2000c104 	.word	0x2000c104

08023c98 <_malloc_r>:
 8023c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023c9c:	1ccd      	adds	r5, r1, #3
 8023c9e:	f025 0503 	bic.w	r5, r5, #3
 8023ca2:	3508      	adds	r5, #8
 8023ca4:	2d0c      	cmp	r5, #12
 8023ca6:	bf38      	it	cc
 8023ca8:	250c      	movcc	r5, #12
 8023caa:	2d00      	cmp	r5, #0
 8023cac:	4607      	mov	r7, r0
 8023cae:	db01      	blt.n	8023cb4 <_malloc_r+0x1c>
 8023cb0:	42a9      	cmp	r1, r5
 8023cb2:	d905      	bls.n	8023cc0 <_malloc_r+0x28>
 8023cb4:	230c      	movs	r3, #12
 8023cb6:	603b      	str	r3, [r7, #0]
 8023cb8:	2600      	movs	r6, #0
 8023cba:	4630      	mov	r0, r6
 8023cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023cc0:	4e2e      	ldr	r6, [pc, #184]	; (8023d7c <_malloc_r+0xe4>)
 8023cc2:	f7dd fb45 	bl	8001350 <__malloc_lock>
 8023cc6:	6833      	ldr	r3, [r6, #0]
 8023cc8:	461c      	mov	r4, r3
 8023cca:	bb34      	cbnz	r4, 8023d1a <_malloc_r+0x82>
 8023ccc:	4629      	mov	r1, r5
 8023cce:	4638      	mov	r0, r7
 8023cd0:	f7ff ffc2 	bl	8023c58 <sbrk_aligned>
 8023cd4:	1c43      	adds	r3, r0, #1
 8023cd6:	4604      	mov	r4, r0
 8023cd8:	d14d      	bne.n	8023d76 <_malloc_r+0xde>
 8023cda:	6834      	ldr	r4, [r6, #0]
 8023cdc:	4626      	mov	r6, r4
 8023cde:	2e00      	cmp	r6, #0
 8023ce0:	d140      	bne.n	8023d64 <_malloc_r+0xcc>
 8023ce2:	6823      	ldr	r3, [r4, #0]
 8023ce4:	4631      	mov	r1, r6
 8023ce6:	4638      	mov	r0, r7
 8023ce8:	eb04 0803 	add.w	r8, r4, r3
 8023cec:	f7dd fad4 	bl	8001298 <_sbrk_r>
 8023cf0:	4580      	cmp	r8, r0
 8023cf2:	d13a      	bne.n	8023d6a <_malloc_r+0xd2>
 8023cf4:	6821      	ldr	r1, [r4, #0]
 8023cf6:	3503      	adds	r5, #3
 8023cf8:	1a6d      	subs	r5, r5, r1
 8023cfa:	f025 0503 	bic.w	r5, r5, #3
 8023cfe:	3508      	adds	r5, #8
 8023d00:	2d0c      	cmp	r5, #12
 8023d02:	bf38      	it	cc
 8023d04:	250c      	movcc	r5, #12
 8023d06:	4629      	mov	r1, r5
 8023d08:	4638      	mov	r0, r7
 8023d0a:	f7ff ffa5 	bl	8023c58 <sbrk_aligned>
 8023d0e:	3001      	adds	r0, #1
 8023d10:	d02b      	beq.n	8023d6a <_malloc_r+0xd2>
 8023d12:	6823      	ldr	r3, [r4, #0]
 8023d14:	442b      	add	r3, r5
 8023d16:	6023      	str	r3, [r4, #0]
 8023d18:	e00e      	b.n	8023d38 <_malloc_r+0xa0>
 8023d1a:	6822      	ldr	r2, [r4, #0]
 8023d1c:	1b52      	subs	r2, r2, r5
 8023d1e:	d41e      	bmi.n	8023d5e <_malloc_r+0xc6>
 8023d20:	2a0b      	cmp	r2, #11
 8023d22:	d916      	bls.n	8023d52 <_malloc_r+0xba>
 8023d24:	1961      	adds	r1, r4, r5
 8023d26:	42a3      	cmp	r3, r4
 8023d28:	6025      	str	r5, [r4, #0]
 8023d2a:	bf18      	it	ne
 8023d2c:	6059      	strne	r1, [r3, #4]
 8023d2e:	6863      	ldr	r3, [r4, #4]
 8023d30:	bf08      	it	eq
 8023d32:	6031      	streq	r1, [r6, #0]
 8023d34:	5162      	str	r2, [r4, r5]
 8023d36:	604b      	str	r3, [r1, #4]
 8023d38:	4638      	mov	r0, r7
 8023d3a:	f104 060b 	add.w	r6, r4, #11
 8023d3e:	f7dd fb32 	bl	80013a6 <__malloc_unlock>
 8023d42:	f026 0607 	bic.w	r6, r6, #7
 8023d46:	1d23      	adds	r3, r4, #4
 8023d48:	1af2      	subs	r2, r6, r3
 8023d4a:	d0b6      	beq.n	8023cba <_malloc_r+0x22>
 8023d4c:	1b9b      	subs	r3, r3, r6
 8023d4e:	50a3      	str	r3, [r4, r2]
 8023d50:	e7b3      	b.n	8023cba <_malloc_r+0x22>
 8023d52:	6862      	ldr	r2, [r4, #4]
 8023d54:	42a3      	cmp	r3, r4
 8023d56:	bf0c      	ite	eq
 8023d58:	6032      	streq	r2, [r6, #0]
 8023d5a:	605a      	strne	r2, [r3, #4]
 8023d5c:	e7ec      	b.n	8023d38 <_malloc_r+0xa0>
 8023d5e:	4623      	mov	r3, r4
 8023d60:	6864      	ldr	r4, [r4, #4]
 8023d62:	e7b2      	b.n	8023cca <_malloc_r+0x32>
 8023d64:	4634      	mov	r4, r6
 8023d66:	6876      	ldr	r6, [r6, #4]
 8023d68:	e7b9      	b.n	8023cde <_malloc_r+0x46>
 8023d6a:	230c      	movs	r3, #12
 8023d6c:	603b      	str	r3, [r7, #0]
 8023d6e:	4638      	mov	r0, r7
 8023d70:	f7dd fb19 	bl	80013a6 <__malloc_unlock>
 8023d74:	e7a1      	b.n	8023cba <_malloc_r+0x22>
 8023d76:	6025      	str	r5, [r4, #0]
 8023d78:	e7de      	b.n	8023d38 <_malloc_r+0xa0>
 8023d7a:	bf00      	nop
 8023d7c:	2000c100 	.word	0x2000c100

08023d80 <iprintf>:
 8023d80:	b40f      	push	{r0, r1, r2, r3}
 8023d82:	4b0a      	ldr	r3, [pc, #40]	; (8023dac <iprintf+0x2c>)
 8023d84:	b513      	push	{r0, r1, r4, lr}
 8023d86:	681c      	ldr	r4, [r3, #0]
 8023d88:	b124      	cbz	r4, 8023d94 <iprintf+0x14>
 8023d8a:	69a3      	ldr	r3, [r4, #24]
 8023d8c:	b913      	cbnz	r3, 8023d94 <iprintf+0x14>
 8023d8e:	4620      	mov	r0, r4
 8023d90:	f7ff fe00 	bl	8023994 <__sinit>
 8023d94:	ab05      	add	r3, sp, #20
 8023d96:	9a04      	ldr	r2, [sp, #16]
 8023d98:	68a1      	ldr	r1, [r4, #8]
 8023d9a:	9301      	str	r3, [sp, #4]
 8023d9c:	4620      	mov	r0, r4
 8023d9e:	f000 fc97 	bl	80246d0 <_vfiprintf_r>
 8023da2:	b002      	add	sp, #8
 8023da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023da8:	b004      	add	sp, #16
 8023daa:	4770      	bx	lr
 8023dac:	2000003c 	.word	0x2000003c

08023db0 <rand>:
 8023db0:	4b16      	ldr	r3, [pc, #88]	; (8023e0c <rand+0x5c>)
 8023db2:	b510      	push	{r4, lr}
 8023db4:	681c      	ldr	r4, [r3, #0]
 8023db6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023db8:	b9b3      	cbnz	r3, 8023de8 <rand+0x38>
 8023dba:	2018      	movs	r0, #24
 8023dbc:	f7ff feb0 	bl	8023b20 <malloc>
 8023dc0:	63a0      	str	r0, [r4, #56]	; 0x38
 8023dc2:	b928      	cbnz	r0, 8023dd0 <rand+0x20>
 8023dc4:	4602      	mov	r2, r0
 8023dc6:	4b12      	ldr	r3, [pc, #72]	; (8023e10 <rand+0x60>)
 8023dc8:	4812      	ldr	r0, [pc, #72]	; (8023e14 <rand+0x64>)
 8023dca:	214e      	movs	r1, #78	; 0x4e
 8023dcc:	f000 f9e6 	bl	802419c <__assert_func>
 8023dd0:	4a11      	ldr	r2, [pc, #68]	; (8023e18 <rand+0x68>)
 8023dd2:	4b12      	ldr	r3, [pc, #72]	; (8023e1c <rand+0x6c>)
 8023dd4:	e9c0 2300 	strd	r2, r3, [r0]
 8023dd8:	4b11      	ldr	r3, [pc, #68]	; (8023e20 <rand+0x70>)
 8023dda:	6083      	str	r3, [r0, #8]
 8023ddc:	230b      	movs	r3, #11
 8023dde:	8183      	strh	r3, [r0, #12]
 8023de0:	2201      	movs	r2, #1
 8023de2:	2300      	movs	r3, #0
 8023de4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8023de8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8023dea:	4a0e      	ldr	r2, [pc, #56]	; (8023e24 <rand+0x74>)
 8023dec:	6920      	ldr	r0, [r4, #16]
 8023dee:	6963      	ldr	r3, [r4, #20]
 8023df0:	490d      	ldr	r1, [pc, #52]	; (8023e28 <rand+0x78>)
 8023df2:	4342      	muls	r2, r0
 8023df4:	fb01 2203 	mla	r2, r1, r3, r2
 8023df8:	fba0 0101 	umull	r0, r1, r0, r1
 8023dfc:	1c43      	adds	r3, r0, #1
 8023dfe:	eb42 0001 	adc.w	r0, r2, r1
 8023e02:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8023e06:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8023e0a:	bd10      	pop	{r4, pc}
 8023e0c:	2000003c 	.word	0x2000003c
 8023e10:	08028a9c 	.word	0x08028a9c
 8023e14:	08028ab3 	.word	0x08028ab3
 8023e18:	abcd330e 	.word	0xabcd330e
 8023e1c:	e66d1234 	.word	0xe66d1234
 8023e20:	0005deec 	.word	0x0005deec
 8023e24:	5851f42d 	.word	0x5851f42d
 8023e28:	4c957f2d 	.word	0x4c957f2d

08023e2c <cleanup_glue>:
 8023e2c:	b538      	push	{r3, r4, r5, lr}
 8023e2e:	460c      	mov	r4, r1
 8023e30:	6809      	ldr	r1, [r1, #0]
 8023e32:	4605      	mov	r5, r0
 8023e34:	b109      	cbz	r1, 8023e3a <cleanup_glue+0xe>
 8023e36:	f7ff fff9 	bl	8023e2c <cleanup_glue>
 8023e3a:	4621      	mov	r1, r4
 8023e3c:	4628      	mov	r0, r5
 8023e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023e42:	f7ff bebd 	b.w	8023bc0 <_free_r>
	...

08023e48 <_reclaim_reent>:
 8023e48:	4b2c      	ldr	r3, [pc, #176]	; (8023efc <_reclaim_reent+0xb4>)
 8023e4a:	681b      	ldr	r3, [r3, #0]
 8023e4c:	4283      	cmp	r3, r0
 8023e4e:	b570      	push	{r4, r5, r6, lr}
 8023e50:	4604      	mov	r4, r0
 8023e52:	d051      	beq.n	8023ef8 <_reclaim_reent+0xb0>
 8023e54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8023e56:	b143      	cbz	r3, 8023e6a <_reclaim_reent+0x22>
 8023e58:	68db      	ldr	r3, [r3, #12]
 8023e5a:	2b00      	cmp	r3, #0
 8023e5c:	d14a      	bne.n	8023ef4 <_reclaim_reent+0xac>
 8023e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023e60:	6819      	ldr	r1, [r3, #0]
 8023e62:	b111      	cbz	r1, 8023e6a <_reclaim_reent+0x22>
 8023e64:	4620      	mov	r0, r4
 8023e66:	f7ff feab 	bl	8023bc0 <_free_r>
 8023e6a:	6961      	ldr	r1, [r4, #20]
 8023e6c:	b111      	cbz	r1, 8023e74 <_reclaim_reent+0x2c>
 8023e6e:	4620      	mov	r0, r4
 8023e70:	f7ff fea6 	bl	8023bc0 <_free_r>
 8023e74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8023e76:	b111      	cbz	r1, 8023e7e <_reclaim_reent+0x36>
 8023e78:	4620      	mov	r0, r4
 8023e7a:	f7ff fea1 	bl	8023bc0 <_free_r>
 8023e7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8023e80:	b111      	cbz	r1, 8023e88 <_reclaim_reent+0x40>
 8023e82:	4620      	mov	r0, r4
 8023e84:	f7ff fe9c 	bl	8023bc0 <_free_r>
 8023e88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8023e8a:	b111      	cbz	r1, 8023e92 <_reclaim_reent+0x4a>
 8023e8c:	4620      	mov	r0, r4
 8023e8e:	f7ff fe97 	bl	8023bc0 <_free_r>
 8023e92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023e94:	b111      	cbz	r1, 8023e9c <_reclaim_reent+0x54>
 8023e96:	4620      	mov	r0, r4
 8023e98:	f7ff fe92 	bl	8023bc0 <_free_r>
 8023e9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8023e9e:	b111      	cbz	r1, 8023ea6 <_reclaim_reent+0x5e>
 8023ea0:	4620      	mov	r0, r4
 8023ea2:	f7ff fe8d 	bl	8023bc0 <_free_r>
 8023ea6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8023ea8:	b111      	cbz	r1, 8023eb0 <_reclaim_reent+0x68>
 8023eaa:	4620      	mov	r0, r4
 8023eac:	f7ff fe88 	bl	8023bc0 <_free_r>
 8023eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023eb2:	b111      	cbz	r1, 8023eba <_reclaim_reent+0x72>
 8023eb4:	4620      	mov	r0, r4
 8023eb6:	f7ff fe83 	bl	8023bc0 <_free_r>
 8023eba:	69a3      	ldr	r3, [r4, #24]
 8023ebc:	b1e3      	cbz	r3, 8023ef8 <_reclaim_reent+0xb0>
 8023ebe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8023ec0:	4620      	mov	r0, r4
 8023ec2:	4798      	blx	r3
 8023ec4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8023ec6:	b1b9      	cbz	r1, 8023ef8 <_reclaim_reent+0xb0>
 8023ec8:	4620      	mov	r0, r4
 8023eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023ece:	f7ff bfad 	b.w	8023e2c <cleanup_glue>
 8023ed2:	5949      	ldr	r1, [r1, r5]
 8023ed4:	b941      	cbnz	r1, 8023ee8 <_reclaim_reent+0xa0>
 8023ed6:	3504      	adds	r5, #4
 8023ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023eda:	2d80      	cmp	r5, #128	; 0x80
 8023edc:	68d9      	ldr	r1, [r3, #12]
 8023ede:	d1f8      	bne.n	8023ed2 <_reclaim_reent+0x8a>
 8023ee0:	4620      	mov	r0, r4
 8023ee2:	f7ff fe6d 	bl	8023bc0 <_free_r>
 8023ee6:	e7ba      	b.n	8023e5e <_reclaim_reent+0x16>
 8023ee8:	680e      	ldr	r6, [r1, #0]
 8023eea:	4620      	mov	r0, r4
 8023eec:	f7ff fe68 	bl	8023bc0 <_free_r>
 8023ef0:	4631      	mov	r1, r6
 8023ef2:	e7ef      	b.n	8023ed4 <_reclaim_reent+0x8c>
 8023ef4:	2500      	movs	r5, #0
 8023ef6:	e7ef      	b.n	8023ed8 <_reclaim_reent+0x90>
 8023ef8:	bd70      	pop	{r4, r5, r6, pc}
 8023efa:	bf00      	nop
 8023efc:	2000003c 	.word	0x2000003c

08023f00 <_raise_r>:
 8023f00:	291f      	cmp	r1, #31
 8023f02:	b538      	push	{r3, r4, r5, lr}
 8023f04:	4604      	mov	r4, r0
 8023f06:	460d      	mov	r5, r1
 8023f08:	d904      	bls.n	8023f14 <_raise_r+0x14>
 8023f0a:	2316      	movs	r3, #22
 8023f0c:	6003      	str	r3, [r0, #0]
 8023f0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023f12:	bd38      	pop	{r3, r4, r5, pc}
 8023f14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023f16:	b112      	cbz	r2, 8023f1e <_raise_r+0x1e>
 8023f18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023f1c:	b94b      	cbnz	r3, 8023f32 <_raise_r+0x32>
 8023f1e:	4620      	mov	r0, r4
 8023f20:	f000 f830 	bl	8023f84 <_getpid_r>
 8023f24:	462a      	mov	r2, r5
 8023f26:	4601      	mov	r1, r0
 8023f28:	4620      	mov	r0, r4
 8023f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023f2e:	f000 b817 	b.w	8023f60 <_kill_r>
 8023f32:	2b01      	cmp	r3, #1
 8023f34:	d00a      	beq.n	8023f4c <_raise_r+0x4c>
 8023f36:	1c59      	adds	r1, r3, #1
 8023f38:	d103      	bne.n	8023f42 <_raise_r+0x42>
 8023f3a:	2316      	movs	r3, #22
 8023f3c:	6003      	str	r3, [r0, #0]
 8023f3e:	2001      	movs	r0, #1
 8023f40:	e7e7      	b.n	8023f12 <_raise_r+0x12>
 8023f42:	2400      	movs	r4, #0
 8023f44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023f48:	4628      	mov	r0, r5
 8023f4a:	4798      	blx	r3
 8023f4c:	2000      	movs	r0, #0
 8023f4e:	e7e0      	b.n	8023f12 <_raise_r+0x12>

08023f50 <raise>:
 8023f50:	4b02      	ldr	r3, [pc, #8]	; (8023f5c <raise+0xc>)
 8023f52:	4601      	mov	r1, r0
 8023f54:	6818      	ldr	r0, [r3, #0]
 8023f56:	f7ff bfd3 	b.w	8023f00 <_raise_r>
 8023f5a:	bf00      	nop
 8023f5c:	2000003c 	.word	0x2000003c

08023f60 <_kill_r>:
 8023f60:	b538      	push	{r3, r4, r5, lr}
 8023f62:	4d07      	ldr	r5, [pc, #28]	; (8023f80 <_kill_r+0x20>)
 8023f64:	2300      	movs	r3, #0
 8023f66:	4604      	mov	r4, r0
 8023f68:	4608      	mov	r0, r1
 8023f6a:	4611      	mov	r1, r2
 8023f6c:	602b      	str	r3, [r5, #0]
 8023f6e:	f7e6 fc5b 	bl	800a828 <_kill>
 8023f72:	1c43      	adds	r3, r0, #1
 8023f74:	d102      	bne.n	8023f7c <_kill_r+0x1c>
 8023f76:	682b      	ldr	r3, [r5, #0]
 8023f78:	b103      	cbz	r3, 8023f7c <_kill_r+0x1c>
 8023f7a:	6023      	str	r3, [r4, #0]
 8023f7c:	bd38      	pop	{r3, r4, r5, pc}
 8023f7e:	bf00      	nop
 8023f80:	2000c108 	.word	0x2000c108

08023f84 <_getpid_r>:
 8023f84:	f7e6 bc48 	b.w	800a818 <_getpid>

08023f88 <siprintf>:
 8023f88:	b40e      	push	{r1, r2, r3}
 8023f8a:	b500      	push	{lr}
 8023f8c:	b09c      	sub	sp, #112	; 0x70
 8023f8e:	ab1d      	add	r3, sp, #116	; 0x74
 8023f90:	9002      	str	r0, [sp, #8]
 8023f92:	9006      	str	r0, [sp, #24]
 8023f94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023f98:	4809      	ldr	r0, [pc, #36]	; (8023fc0 <siprintf+0x38>)
 8023f9a:	9107      	str	r1, [sp, #28]
 8023f9c:	9104      	str	r1, [sp, #16]
 8023f9e:	4909      	ldr	r1, [pc, #36]	; (8023fc4 <siprintf+0x3c>)
 8023fa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8023fa4:	9105      	str	r1, [sp, #20]
 8023fa6:	6800      	ldr	r0, [r0, #0]
 8023fa8:	9301      	str	r3, [sp, #4]
 8023faa:	a902      	add	r1, sp, #8
 8023fac:	f000 fa66 	bl	802447c <_svfiprintf_r>
 8023fb0:	9b02      	ldr	r3, [sp, #8]
 8023fb2:	2200      	movs	r2, #0
 8023fb4:	701a      	strb	r2, [r3, #0]
 8023fb6:	b01c      	add	sp, #112	; 0x70
 8023fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8023fbc:	b003      	add	sp, #12
 8023fbe:	4770      	bx	lr
 8023fc0:	2000003c 	.word	0x2000003c
 8023fc4:	ffff0208 	.word	0xffff0208

08023fc8 <__sread>:
 8023fc8:	b510      	push	{r4, lr}
 8023fca:	460c      	mov	r4, r1
 8023fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023fd0:	f000 fe42 	bl	8024c58 <_read_r>
 8023fd4:	2800      	cmp	r0, #0
 8023fd6:	bfab      	itete	ge
 8023fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023fda:	89a3      	ldrhlt	r3, [r4, #12]
 8023fdc:	181b      	addge	r3, r3, r0
 8023fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023fe2:	bfac      	ite	ge
 8023fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8023fe6:	81a3      	strhlt	r3, [r4, #12]
 8023fe8:	bd10      	pop	{r4, pc}

08023fea <__swrite>:
 8023fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023fee:	461f      	mov	r7, r3
 8023ff0:	898b      	ldrh	r3, [r1, #12]
 8023ff2:	05db      	lsls	r3, r3, #23
 8023ff4:	4605      	mov	r5, r0
 8023ff6:	460c      	mov	r4, r1
 8023ff8:	4616      	mov	r6, r2
 8023ffa:	d505      	bpl.n	8024008 <__swrite+0x1e>
 8023ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024000:	2302      	movs	r3, #2
 8024002:	2200      	movs	r2, #0
 8024004:	f000 f9cc 	bl	80243a0 <_lseek_r>
 8024008:	89a3      	ldrh	r3, [r4, #12]
 802400a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802400e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024012:	81a3      	strh	r3, [r4, #12]
 8024014:	4632      	mov	r2, r6
 8024016:	463b      	mov	r3, r7
 8024018:	4628      	mov	r0, r5
 802401a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802401e:	f000 b849 	b.w	80240b4 <_write_r>

08024022 <__sseek>:
 8024022:	b510      	push	{r4, lr}
 8024024:	460c      	mov	r4, r1
 8024026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802402a:	f000 f9b9 	bl	80243a0 <_lseek_r>
 802402e:	1c43      	adds	r3, r0, #1
 8024030:	89a3      	ldrh	r3, [r4, #12]
 8024032:	bf15      	itete	ne
 8024034:	6560      	strne	r0, [r4, #84]	; 0x54
 8024036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802403a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802403e:	81a3      	strheq	r3, [r4, #12]
 8024040:	bf18      	it	ne
 8024042:	81a3      	strhne	r3, [r4, #12]
 8024044:	bd10      	pop	{r4, pc}

08024046 <__sclose>:
 8024046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802404a:	f000 b8c5 	b.w	80241d8 <_close_r>

0802404e <strncpy>:
 802404e:	b510      	push	{r4, lr}
 8024050:	3901      	subs	r1, #1
 8024052:	4603      	mov	r3, r0
 8024054:	b132      	cbz	r2, 8024064 <strncpy+0x16>
 8024056:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802405a:	f803 4b01 	strb.w	r4, [r3], #1
 802405e:	3a01      	subs	r2, #1
 8024060:	2c00      	cmp	r4, #0
 8024062:	d1f7      	bne.n	8024054 <strncpy+0x6>
 8024064:	441a      	add	r2, r3
 8024066:	2100      	movs	r1, #0
 8024068:	4293      	cmp	r3, r2
 802406a:	d100      	bne.n	802406e <strncpy+0x20>
 802406c:	bd10      	pop	{r4, pc}
 802406e:	f803 1b01 	strb.w	r1, [r3], #1
 8024072:	e7f9      	b.n	8024068 <strncpy+0x1a>

08024074 <_vsiprintf_r>:
 8024074:	b500      	push	{lr}
 8024076:	b09b      	sub	sp, #108	; 0x6c
 8024078:	9100      	str	r1, [sp, #0]
 802407a:	9104      	str	r1, [sp, #16]
 802407c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024080:	9105      	str	r1, [sp, #20]
 8024082:	9102      	str	r1, [sp, #8]
 8024084:	4905      	ldr	r1, [pc, #20]	; (802409c <_vsiprintf_r+0x28>)
 8024086:	9103      	str	r1, [sp, #12]
 8024088:	4669      	mov	r1, sp
 802408a:	f000 f9f7 	bl	802447c <_svfiprintf_r>
 802408e:	9b00      	ldr	r3, [sp, #0]
 8024090:	2200      	movs	r2, #0
 8024092:	701a      	strb	r2, [r3, #0]
 8024094:	b01b      	add	sp, #108	; 0x6c
 8024096:	f85d fb04 	ldr.w	pc, [sp], #4
 802409a:	bf00      	nop
 802409c:	ffff0208 	.word	0xffff0208

080240a0 <vsiprintf>:
 80240a0:	4613      	mov	r3, r2
 80240a2:	460a      	mov	r2, r1
 80240a4:	4601      	mov	r1, r0
 80240a6:	4802      	ldr	r0, [pc, #8]	; (80240b0 <vsiprintf+0x10>)
 80240a8:	6800      	ldr	r0, [r0, #0]
 80240aa:	f7ff bfe3 	b.w	8024074 <_vsiprintf_r>
 80240ae:	bf00      	nop
 80240b0:	2000003c 	.word	0x2000003c

080240b4 <_write_r>:
 80240b4:	b538      	push	{r3, r4, r5, lr}
 80240b6:	4d07      	ldr	r5, [pc, #28]	; (80240d4 <_write_r+0x20>)
 80240b8:	4604      	mov	r4, r0
 80240ba:	4608      	mov	r0, r1
 80240bc:	4611      	mov	r1, r2
 80240be:	2200      	movs	r2, #0
 80240c0:	602a      	str	r2, [r5, #0]
 80240c2:	461a      	mov	r2, r3
 80240c4:	f7e6 fbe9 	bl	800a89a <_write>
 80240c8:	1c43      	adds	r3, r0, #1
 80240ca:	d102      	bne.n	80240d2 <_write_r+0x1e>
 80240cc:	682b      	ldr	r3, [r5, #0]
 80240ce:	b103      	cbz	r3, 80240d2 <_write_r+0x1e>
 80240d0:	6023      	str	r3, [r4, #0]
 80240d2:	bd38      	pop	{r3, r4, r5, pc}
 80240d4:	2000c108 	.word	0x2000c108

080240d8 <__register_exitproc>:
 80240d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80240dc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8024198 <__register_exitproc+0xc0>
 80240e0:	4606      	mov	r6, r0
 80240e2:	f8d8 0000 	ldr.w	r0, [r8]
 80240e6:	461f      	mov	r7, r3
 80240e8:	460d      	mov	r5, r1
 80240ea:	4691      	mov	r9, r2
 80240ec:	f7ff fd15 	bl	8023b1a <__retarget_lock_acquire_recursive>
 80240f0:	4b25      	ldr	r3, [pc, #148]	; (8024188 <__register_exitproc+0xb0>)
 80240f2:	681c      	ldr	r4, [r3, #0]
 80240f4:	b934      	cbnz	r4, 8024104 <__register_exitproc+0x2c>
 80240f6:	4c25      	ldr	r4, [pc, #148]	; (802418c <__register_exitproc+0xb4>)
 80240f8:	601c      	str	r4, [r3, #0]
 80240fa:	4b25      	ldr	r3, [pc, #148]	; (8024190 <__register_exitproc+0xb8>)
 80240fc:	b113      	cbz	r3, 8024104 <__register_exitproc+0x2c>
 80240fe:	681b      	ldr	r3, [r3, #0]
 8024100:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8024104:	6863      	ldr	r3, [r4, #4]
 8024106:	2b1f      	cmp	r3, #31
 8024108:	dd07      	ble.n	802411a <__register_exitproc+0x42>
 802410a:	f8d8 0000 	ldr.w	r0, [r8]
 802410e:	f7ff fd06 	bl	8023b1e <__retarget_lock_release_recursive>
 8024112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802411a:	b34e      	cbz	r6, 8024170 <__register_exitproc+0x98>
 802411c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8024120:	b988      	cbnz	r0, 8024146 <__register_exitproc+0x6e>
 8024122:	4b1c      	ldr	r3, [pc, #112]	; (8024194 <__register_exitproc+0xbc>)
 8024124:	b923      	cbnz	r3, 8024130 <__register_exitproc+0x58>
 8024126:	f8d8 0000 	ldr.w	r0, [r8]
 802412a:	f7ff fcf7 	bl	8023b1c <__retarget_lock_release>
 802412e:	e7f0      	b.n	8024112 <__register_exitproc+0x3a>
 8024130:	f44f 7084 	mov.w	r0, #264	; 0x108
 8024134:	f7ff fcf4 	bl	8023b20 <malloc>
 8024138:	2800      	cmp	r0, #0
 802413a:	d0f4      	beq.n	8024126 <__register_exitproc+0x4e>
 802413c:	2300      	movs	r3, #0
 802413e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8024142:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8024146:	6863      	ldr	r3, [r4, #4]
 8024148:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802414c:	2201      	movs	r2, #1
 802414e:	409a      	lsls	r2, r3
 8024150:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8024154:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8024158:	4313      	orrs	r3, r2
 802415a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802415e:	2e02      	cmp	r6, #2
 8024160:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8024164:	bf02      	ittt	eq
 8024166:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802416a:	4313      	orreq	r3, r2
 802416c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8024170:	6863      	ldr	r3, [r4, #4]
 8024172:	f8d8 0000 	ldr.w	r0, [r8]
 8024176:	1c5a      	adds	r2, r3, #1
 8024178:	3302      	adds	r3, #2
 802417a:	6062      	str	r2, [r4, #4]
 802417c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8024180:	f7ff fccd 	bl	8023b1e <__retarget_lock_release_recursive>
 8024184:	2000      	movs	r0, #0
 8024186:	e7c6      	b.n	8024116 <__register_exitproc+0x3e>
 8024188:	2000c198 	.word	0x2000c198
 802418c:	2000c10c 	.word	0x2000c10c
 8024190:	00000000 	.word	0x00000000
 8024194:	08023b21 	.word	0x08023b21
 8024198:	200000a0 	.word	0x200000a0

0802419c <__assert_func>:
 802419c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802419e:	4614      	mov	r4, r2
 80241a0:	461a      	mov	r2, r3
 80241a2:	4b09      	ldr	r3, [pc, #36]	; (80241c8 <__assert_func+0x2c>)
 80241a4:	681b      	ldr	r3, [r3, #0]
 80241a6:	4605      	mov	r5, r0
 80241a8:	68d8      	ldr	r0, [r3, #12]
 80241aa:	b14c      	cbz	r4, 80241c0 <__assert_func+0x24>
 80241ac:	4b07      	ldr	r3, [pc, #28]	; (80241cc <__assert_func+0x30>)
 80241ae:	9100      	str	r1, [sp, #0]
 80241b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80241b4:	4906      	ldr	r1, [pc, #24]	; (80241d0 <__assert_func+0x34>)
 80241b6:	462b      	mov	r3, r5
 80241b8:	f000 f8e0 	bl	802437c <fiprintf>
 80241bc:	f7ff fb7e 	bl	80238bc <abort>
 80241c0:	4b04      	ldr	r3, [pc, #16]	; (80241d4 <__assert_func+0x38>)
 80241c2:	461c      	mov	r4, r3
 80241c4:	e7f3      	b.n	80241ae <__assert_func+0x12>
 80241c6:	bf00      	nop
 80241c8:	2000003c 	.word	0x2000003c
 80241cc:	08028b0e 	.word	0x08028b0e
 80241d0:	08028b1b 	.word	0x08028b1b
 80241d4:	08028b49 	.word	0x08028b49

080241d8 <_close_r>:
 80241d8:	b538      	push	{r3, r4, r5, lr}
 80241da:	4d06      	ldr	r5, [pc, #24]	; (80241f4 <_close_r+0x1c>)
 80241dc:	2300      	movs	r3, #0
 80241de:	4604      	mov	r4, r0
 80241e0:	4608      	mov	r0, r1
 80241e2:	602b      	str	r3, [r5, #0]
 80241e4:	f7e6 fb75 	bl	800a8d2 <_close>
 80241e8:	1c43      	adds	r3, r0, #1
 80241ea:	d102      	bne.n	80241f2 <_close_r+0x1a>
 80241ec:	682b      	ldr	r3, [r5, #0]
 80241ee:	b103      	cbz	r3, 80241f2 <_close_r+0x1a>
 80241f0:	6023      	str	r3, [r4, #0]
 80241f2:	bd38      	pop	{r3, r4, r5, pc}
 80241f4:	2000c108 	.word	0x2000c108

080241f8 <__sflush_r>:
 80241f8:	898a      	ldrh	r2, [r1, #12]
 80241fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80241fe:	4605      	mov	r5, r0
 8024200:	0710      	lsls	r0, r2, #28
 8024202:	460c      	mov	r4, r1
 8024204:	d458      	bmi.n	80242b8 <__sflush_r+0xc0>
 8024206:	684b      	ldr	r3, [r1, #4]
 8024208:	2b00      	cmp	r3, #0
 802420a:	dc05      	bgt.n	8024218 <__sflush_r+0x20>
 802420c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802420e:	2b00      	cmp	r3, #0
 8024210:	dc02      	bgt.n	8024218 <__sflush_r+0x20>
 8024212:	2000      	movs	r0, #0
 8024214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802421a:	2e00      	cmp	r6, #0
 802421c:	d0f9      	beq.n	8024212 <__sflush_r+0x1a>
 802421e:	2300      	movs	r3, #0
 8024220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024224:	682f      	ldr	r7, [r5, #0]
 8024226:	602b      	str	r3, [r5, #0]
 8024228:	d032      	beq.n	8024290 <__sflush_r+0x98>
 802422a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802422c:	89a3      	ldrh	r3, [r4, #12]
 802422e:	075a      	lsls	r2, r3, #29
 8024230:	d505      	bpl.n	802423e <__sflush_r+0x46>
 8024232:	6863      	ldr	r3, [r4, #4]
 8024234:	1ac0      	subs	r0, r0, r3
 8024236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024238:	b10b      	cbz	r3, 802423e <__sflush_r+0x46>
 802423a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802423c:	1ac0      	subs	r0, r0, r3
 802423e:	2300      	movs	r3, #0
 8024240:	4602      	mov	r2, r0
 8024242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024244:	6a21      	ldr	r1, [r4, #32]
 8024246:	4628      	mov	r0, r5
 8024248:	47b0      	blx	r6
 802424a:	1c43      	adds	r3, r0, #1
 802424c:	89a3      	ldrh	r3, [r4, #12]
 802424e:	d106      	bne.n	802425e <__sflush_r+0x66>
 8024250:	6829      	ldr	r1, [r5, #0]
 8024252:	291d      	cmp	r1, #29
 8024254:	d82c      	bhi.n	80242b0 <__sflush_r+0xb8>
 8024256:	4a2a      	ldr	r2, [pc, #168]	; (8024300 <__sflush_r+0x108>)
 8024258:	40ca      	lsrs	r2, r1
 802425a:	07d6      	lsls	r6, r2, #31
 802425c:	d528      	bpl.n	80242b0 <__sflush_r+0xb8>
 802425e:	2200      	movs	r2, #0
 8024260:	6062      	str	r2, [r4, #4]
 8024262:	04d9      	lsls	r1, r3, #19
 8024264:	6922      	ldr	r2, [r4, #16]
 8024266:	6022      	str	r2, [r4, #0]
 8024268:	d504      	bpl.n	8024274 <__sflush_r+0x7c>
 802426a:	1c42      	adds	r2, r0, #1
 802426c:	d101      	bne.n	8024272 <__sflush_r+0x7a>
 802426e:	682b      	ldr	r3, [r5, #0]
 8024270:	b903      	cbnz	r3, 8024274 <__sflush_r+0x7c>
 8024272:	6560      	str	r0, [r4, #84]	; 0x54
 8024274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024276:	602f      	str	r7, [r5, #0]
 8024278:	2900      	cmp	r1, #0
 802427a:	d0ca      	beq.n	8024212 <__sflush_r+0x1a>
 802427c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024280:	4299      	cmp	r1, r3
 8024282:	d002      	beq.n	802428a <__sflush_r+0x92>
 8024284:	4628      	mov	r0, r5
 8024286:	f7ff fc9b 	bl	8023bc0 <_free_r>
 802428a:	2000      	movs	r0, #0
 802428c:	6360      	str	r0, [r4, #52]	; 0x34
 802428e:	e7c1      	b.n	8024214 <__sflush_r+0x1c>
 8024290:	6a21      	ldr	r1, [r4, #32]
 8024292:	2301      	movs	r3, #1
 8024294:	4628      	mov	r0, r5
 8024296:	47b0      	blx	r6
 8024298:	1c41      	adds	r1, r0, #1
 802429a:	d1c7      	bne.n	802422c <__sflush_r+0x34>
 802429c:	682b      	ldr	r3, [r5, #0]
 802429e:	2b00      	cmp	r3, #0
 80242a0:	d0c4      	beq.n	802422c <__sflush_r+0x34>
 80242a2:	2b1d      	cmp	r3, #29
 80242a4:	d001      	beq.n	80242aa <__sflush_r+0xb2>
 80242a6:	2b16      	cmp	r3, #22
 80242a8:	d101      	bne.n	80242ae <__sflush_r+0xb6>
 80242aa:	602f      	str	r7, [r5, #0]
 80242ac:	e7b1      	b.n	8024212 <__sflush_r+0x1a>
 80242ae:	89a3      	ldrh	r3, [r4, #12]
 80242b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80242b4:	81a3      	strh	r3, [r4, #12]
 80242b6:	e7ad      	b.n	8024214 <__sflush_r+0x1c>
 80242b8:	690f      	ldr	r7, [r1, #16]
 80242ba:	2f00      	cmp	r7, #0
 80242bc:	d0a9      	beq.n	8024212 <__sflush_r+0x1a>
 80242be:	0793      	lsls	r3, r2, #30
 80242c0:	680e      	ldr	r6, [r1, #0]
 80242c2:	bf08      	it	eq
 80242c4:	694b      	ldreq	r3, [r1, #20]
 80242c6:	600f      	str	r7, [r1, #0]
 80242c8:	bf18      	it	ne
 80242ca:	2300      	movne	r3, #0
 80242cc:	eba6 0807 	sub.w	r8, r6, r7
 80242d0:	608b      	str	r3, [r1, #8]
 80242d2:	f1b8 0f00 	cmp.w	r8, #0
 80242d6:	dd9c      	ble.n	8024212 <__sflush_r+0x1a>
 80242d8:	6a21      	ldr	r1, [r4, #32]
 80242da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80242dc:	4643      	mov	r3, r8
 80242de:	463a      	mov	r2, r7
 80242e0:	4628      	mov	r0, r5
 80242e2:	47b0      	blx	r6
 80242e4:	2800      	cmp	r0, #0
 80242e6:	dc06      	bgt.n	80242f6 <__sflush_r+0xfe>
 80242e8:	89a3      	ldrh	r3, [r4, #12]
 80242ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80242ee:	81a3      	strh	r3, [r4, #12]
 80242f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80242f4:	e78e      	b.n	8024214 <__sflush_r+0x1c>
 80242f6:	4407      	add	r7, r0
 80242f8:	eba8 0800 	sub.w	r8, r8, r0
 80242fc:	e7e9      	b.n	80242d2 <__sflush_r+0xda>
 80242fe:	bf00      	nop
 8024300:	20400001 	.word	0x20400001

08024304 <_fflush_r>:
 8024304:	b538      	push	{r3, r4, r5, lr}
 8024306:	690b      	ldr	r3, [r1, #16]
 8024308:	4605      	mov	r5, r0
 802430a:	460c      	mov	r4, r1
 802430c:	b913      	cbnz	r3, 8024314 <_fflush_r+0x10>
 802430e:	2500      	movs	r5, #0
 8024310:	4628      	mov	r0, r5
 8024312:	bd38      	pop	{r3, r4, r5, pc}
 8024314:	b118      	cbz	r0, 802431e <_fflush_r+0x1a>
 8024316:	6983      	ldr	r3, [r0, #24]
 8024318:	b90b      	cbnz	r3, 802431e <_fflush_r+0x1a>
 802431a:	f7ff fb3b 	bl	8023994 <__sinit>
 802431e:	4b14      	ldr	r3, [pc, #80]	; (8024370 <_fflush_r+0x6c>)
 8024320:	429c      	cmp	r4, r3
 8024322:	d11b      	bne.n	802435c <_fflush_r+0x58>
 8024324:	686c      	ldr	r4, [r5, #4]
 8024326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802432a:	2b00      	cmp	r3, #0
 802432c:	d0ef      	beq.n	802430e <_fflush_r+0xa>
 802432e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024330:	07d0      	lsls	r0, r2, #31
 8024332:	d404      	bmi.n	802433e <_fflush_r+0x3a>
 8024334:	0599      	lsls	r1, r3, #22
 8024336:	d402      	bmi.n	802433e <_fflush_r+0x3a>
 8024338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802433a:	f7ff fbee 	bl	8023b1a <__retarget_lock_acquire_recursive>
 802433e:	4628      	mov	r0, r5
 8024340:	4621      	mov	r1, r4
 8024342:	f7ff ff59 	bl	80241f8 <__sflush_r>
 8024346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024348:	07da      	lsls	r2, r3, #31
 802434a:	4605      	mov	r5, r0
 802434c:	d4e0      	bmi.n	8024310 <_fflush_r+0xc>
 802434e:	89a3      	ldrh	r3, [r4, #12]
 8024350:	059b      	lsls	r3, r3, #22
 8024352:	d4dd      	bmi.n	8024310 <_fflush_r+0xc>
 8024354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024356:	f7ff fbe2 	bl	8023b1e <__retarget_lock_release_recursive>
 802435a:	e7d9      	b.n	8024310 <_fflush_r+0xc>
 802435c:	4b05      	ldr	r3, [pc, #20]	; (8024374 <_fflush_r+0x70>)
 802435e:	429c      	cmp	r4, r3
 8024360:	d101      	bne.n	8024366 <_fflush_r+0x62>
 8024362:	68ac      	ldr	r4, [r5, #8]
 8024364:	e7df      	b.n	8024326 <_fflush_r+0x22>
 8024366:	4b04      	ldr	r3, [pc, #16]	; (8024378 <_fflush_r+0x74>)
 8024368:	429c      	cmp	r4, r3
 802436a:	bf08      	it	eq
 802436c:	68ec      	ldreq	r4, [r5, #12]
 802436e:	e7da      	b.n	8024326 <_fflush_r+0x22>
 8024370:	08028a58 	.word	0x08028a58
 8024374:	08028a78 	.word	0x08028a78
 8024378:	08028a38 	.word	0x08028a38

0802437c <fiprintf>:
 802437c:	b40e      	push	{r1, r2, r3}
 802437e:	b503      	push	{r0, r1, lr}
 8024380:	4601      	mov	r1, r0
 8024382:	ab03      	add	r3, sp, #12
 8024384:	4805      	ldr	r0, [pc, #20]	; (802439c <fiprintf+0x20>)
 8024386:	f853 2b04 	ldr.w	r2, [r3], #4
 802438a:	6800      	ldr	r0, [r0, #0]
 802438c:	9301      	str	r3, [sp, #4]
 802438e:	f000 f99f 	bl	80246d0 <_vfiprintf_r>
 8024392:	b002      	add	sp, #8
 8024394:	f85d eb04 	ldr.w	lr, [sp], #4
 8024398:	b003      	add	sp, #12
 802439a:	4770      	bx	lr
 802439c:	2000003c 	.word	0x2000003c

080243a0 <_lseek_r>:
 80243a0:	b538      	push	{r3, r4, r5, lr}
 80243a2:	4d07      	ldr	r5, [pc, #28]	; (80243c0 <_lseek_r+0x20>)
 80243a4:	4604      	mov	r4, r0
 80243a6:	4608      	mov	r0, r1
 80243a8:	4611      	mov	r1, r2
 80243aa:	2200      	movs	r2, #0
 80243ac:	602a      	str	r2, [r5, #0]
 80243ae:	461a      	mov	r2, r3
 80243b0:	f7e6 fab6 	bl	800a920 <_lseek>
 80243b4:	1c43      	adds	r3, r0, #1
 80243b6:	d102      	bne.n	80243be <_lseek_r+0x1e>
 80243b8:	682b      	ldr	r3, [r5, #0]
 80243ba:	b103      	cbz	r3, 80243be <_lseek_r+0x1e>
 80243bc:	6023      	str	r3, [r4, #0]
 80243be:	bd38      	pop	{r3, r4, r5, pc}
 80243c0:	2000c108 	.word	0x2000c108

080243c4 <__ssputs_r>:
 80243c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80243c8:	688e      	ldr	r6, [r1, #8]
 80243ca:	429e      	cmp	r6, r3
 80243cc:	4682      	mov	sl, r0
 80243ce:	460c      	mov	r4, r1
 80243d0:	4690      	mov	r8, r2
 80243d2:	461f      	mov	r7, r3
 80243d4:	d838      	bhi.n	8024448 <__ssputs_r+0x84>
 80243d6:	898a      	ldrh	r2, [r1, #12]
 80243d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80243dc:	d032      	beq.n	8024444 <__ssputs_r+0x80>
 80243de:	6825      	ldr	r5, [r4, #0]
 80243e0:	6909      	ldr	r1, [r1, #16]
 80243e2:	eba5 0901 	sub.w	r9, r5, r1
 80243e6:	6965      	ldr	r5, [r4, #20]
 80243e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80243ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80243f0:	3301      	adds	r3, #1
 80243f2:	444b      	add	r3, r9
 80243f4:	106d      	asrs	r5, r5, #1
 80243f6:	429d      	cmp	r5, r3
 80243f8:	bf38      	it	cc
 80243fa:	461d      	movcc	r5, r3
 80243fc:	0553      	lsls	r3, r2, #21
 80243fe:	d531      	bpl.n	8024464 <__ssputs_r+0xa0>
 8024400:	4629      	mov	r1, r5
 8024402:	f7ff fc49 	bl	8023c98 <_malloc_r>
 8024406:	4606      	mov	r6, r0
 8024408:	b950      	cbnz	r0, 8024420 <__ssputs_r+0x5c>
 802440a:	230c      	movs	r3, #12
 802440c:	f8ca 3000 	str.w	r3, [sl]
 8024410:	89a3      	ldrh	r3, [r4, #12]
 8024412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024416:	81a3      	strh	r3, [r4, #12]
 8024418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802441c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024420:	6921      	ldr	r1, [r4, #16]
 8024422:	464a      	mov	r2, r9
 8024424:	f7ff fb9c 	bl	8023b60 <memcpy>
 8024428:	89a3      	ldrh	r3, [r4, #12]
 802442a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802442e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024432:	81a3      	strh	r3, [r4, #12]
 8024434:	6126      	str	r6, [r4, #16]
 8024436:	6165      	str	r5, [r4, #20]
 8024438:	444e      	add	r6, r9
 802443a:	eba5 0509 	sub.w	r5, r5, r9
 802443e:	6026      	str	r6, [r4, #0]
 8024440:	60a5      	str	r5, [r4, #8]
 8024442:	463e      	mov	r6, r7
 8024444:	42be      	cmp	r6, r7
 8024446:	d900      	bls.n	802444a <__ssputs_r+0x86>
 8024448:	463e      	mov	r6, r7
 802444a:	6820      	ldr	r0, [r4, #0]
 802444c:	4632      	mov	r2, r6
 802444e:	4641      	mov	r1, r8
 8024450:	f7ff fb94 	bl	8023b7c <memmove>
 8024454:	68a3      	ldr	r3, [r4, #8]
 8024456:	1b9b      	subs	r3, r3, r6
 8024458:	60a3      	str	r3, [r4, #8]
 802445a:	6823      	ldr	r3, [r4, #0]
 802445c:	4433      	add	r3, r6
 802445e:	6023      	str	r3, [r4, #0]
 8024460:	2000      	movs	r0, #0
 8024462:	e7db      	b.n	802441c <__ssputs_r+0x58>
 8024464:	462a      	mov	r2, r5
 8024466:	f000 fd2f 	bl	8024ec8 <_realloc_r>
 802446a:	4606      	mov	r6, r0
 802446c:	2800      	cmp	r0, #0
 802446e:	d1e1      	bne.n	8024434 <__ssputs_r+0x70>
 8024470:	6921      	ldr	r1, [r4, #16]
 8024472:	4650      	mov	r0, sl
 8024474:	f7ff fba4 	bl	8023bc0 <_free_r>
 8024478:	e7c7      	b.n	802440a <__ssputs_r+0x46>
	...

0802447c <_svfiprintf_r>:
 802447c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024480:	4698      	mov	r8, r3
 8024482:	898b      	ldrh	r3, [r1, #12]
 8024484:	061b      	lsls	r3, r3, #24
 8024486:	b09d      	sub	sp, #116	; 0x74
 8024488:	4607      	mov	r7, r0
 802448a:	460d      	mov	r5, r1
 802448c:	4614      	mov	r4, r2
 802448e:	d50e      	bpl.n	80244ae <_svfiprintf_r+0x32>
 8024490:	690b      	ldr	r3, [r1, #16]
 8024492:	b963      	cbnz	r3, 80244ae <_svfiprintf_r+0x32>
 8024494:	2140      	movs	r1, #64	; 0x40
 8024496:	f7ff fbff 	bl	8023c98 <_malloc_r>
 802449a:	6028      	str	r0, [r5, #0]
 802449c:	6128      	str	r0, [r5, #16]
 802449e:	b920      	cbnz	r0, 80244aa <_svfiprintf_r+0x2e>
 80244a0:	230c      	movs	r3, #12
 80244a2:	603b      	str	r3, [r7, #0]
 80244a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80244a8:	e0d1      	b.n	802464e <_svfiprintf_r+0x1d2>
 80244aa:	2340      	movs	r3, #64	; 0x40
 80244ac:	616b      	str	r3, [r5, #20]
 80244ae:	2300      	movs	r3, #0
 80244b0:	9309      	str	r3, [sp, #36]	; 0x24
 80244b2:	2320      	movs	r3, #32
 80244b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80244b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80244bc:	2330      	movs	r3, #48	; 0x30
 80244be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024668 <_svfiprintf_r+0x1ec>
 80244c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80244c6:	f04f 0901 	mov.w	r9, #1
 80244ca:	4623      	mov	r3, r4
 80244cc:	469a      	mov	sl, r3
 80244ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80244d2:	b10a      	cbz	r2, 80244d8 <_svfiprintf_r+0x5c>
 80244d4:	2a25      	cmp	r2, #37	; 0x25
 80244d6:	d1f9      	bne.n	80244cc <_svfiprintf_r+0x50>
 80244d8:	ebba 0b04 	subs.w	fp, sl, r4
 80244dc:	d00b      	beq.n	80244f6 <_svfiprintf_r+0x7a>
 80244de:	465b      	mov	r3, fp
 80244e0:	4622      	mov	r2, r4
 80244e2:	4629      	mov	r1, r5
 80244e4:	4638      	mov	r0, r7
 80244e6:	f7ff ff6d 	bl	80243c4 <__ssputs_r>
 80244ea:	3001      	adds	r0, #1
 80244ec:	f000 80aa 	beq.w	8024644 <_svfiprintf_r+0x1c8>
 80244f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80244f2:	445a      	add	r2, fp
 80244f4:	9209      	str	r2, [sp, #36]	; 0x24
 80244f6:	f89a 3000 	ldrb.w	r3, [sl]
 80244fa:	2b00      	cmp	r3, #0
 80244fc:	f000 80a2 	beq.w	8024644 <_svfiprintf_r+0x1c8>
 8024500:	2300      	movs	r3, #0
 8024502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802450a:	f10a 0a01 	add.w	sl, sl, #1
 802450e:	9304      	str	r3, [sp, #16]
 8024510:	9307      	str	r3, [sp, #28]
 8024512:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024516:	931a      	str	r3, [sp, #104]	; 0x68
 8024518:	4654      	mov	r4, sl
 802451a:	2205      	movs	r2, #5
 802451c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024520:	4851      	ldr	r0, [pc, #324]	; (8024668 <_svfiprintf_r+0x1ec>)
 8024522:	f7db fe7d 	bl	8000220 <memchr>
 8024526:	9a04      	ldr	r2, [sp, #16]
 8024528:	b9d8      	cbnz	r0, 8024562 <_svfiprintf_r+0xe6>
 802452a:	06d0      	lsls	r0, r2, #27
 802452c:	bf44      	itt	mi
 802452e:	2320      	movmi	r3, #32
 8024530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024534:	0711      	lsls	r1, r2, #28
 8024536:	bf44      	itt	mi
 8024538:	232b      	movmi	r3, #43	; 0x2b
 802453a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802453e:	f89a 3000 	ldrb.w	r3, [sl]
 8024542:	2b2a      	cmp	r3, #42	; 0x2a
 8024544:	d015      	beq.n	8024572 <_svfiprintf_r+0xf6>
 8024546:	9a07      	ldr	r2, [sp, #28]
 8024548:	4654      	mov	r4, sl
 802454a:	2000      	movs	r0, #0
 802454c:	f04f 0c0a 	mov.w	ip, #10
 8024550:	4621      	mov	r1, r4
 8024552:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024556:	3b30      	subs	r3, #48	; 0x30
 8024558:	2b09      	cmp	r3, #9
 802455a:	d94e      	bls.n	80245fa <_svfiprintf_r+0x17e>
 802455c:	b1b0      	cbz	r0, 802458c <_svfiprintf_r+0x110>
 802455e:	9207      	str	r2, [sp, #28]
 8024560:	e014      	b.n	802458c <_svfiprintf_r+0x110>
 8024562:	eba0 0308 	sub.w	r3, r0, r8
 8024566:	fa09 f303 	lsl.w	r3, r9, r3
 802456a:	4313      	orrs	r3, r2
 802456c:	9304      	str	r3, [sp, #16]
 802456e:	46a2      	mov	sl, r4
 8024570:	e7d2      	b.n	8024518 <_svfiprintf_r+0x9c>
 8024572:	9b03      	ldr	r3, [sp, #12]
 8024574:	1d19      	adds	r1, r3, #4
 8024576:	681b      	ldr	r3, [r3, #0]
 8024578:	9103      	str	r1, [sp, #12]
 802457a:	2b00      	cmp	r3, #0
 802457c:	bfbb      	ittet	lt
 802457e:	425b      	neglt	r3, r3
 8024580:	f042 0202 	orrlt.w	r2, r2, #2
 8024584:	9307      	strge	r3, [sp, #28]
 8024586:	9307      	strlt	r3, [sp, #28]
 8024588:	bfb8      	it	lt
 802458a:	9204      	strlt	r2, [sp, #16]
 802458c:	7823      	ldrb	r3, [r4, #0]
 802458e:	2b2e      	cmp	r3, #46	; 0x2e
 8024590:	d10c      	bne.n	80245ac <_svfiprintf_r+0x130>
 8024592:	7863      	ldrb	r3, [r4, #1]
 8024594:	2b2a      	cmp	r3, #42	; 0x2a
 8024596:	d135      	bne.n	8024604 <_svfiprintf_r+0x188>
 8024598:	9b03      	ldr	r3, [sp, #12]
 802459a:	1d1a      	adds	r2, r3, #4
 802459c:	681b      	ldr	r3, [r3, #0]
 802459e:	9203      	str	r2, [sp, #12]
 80245a0:	2b00      	cmp	r3, #0
 80245a2:	bfb8      	it	lt
 80245a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80245a8:	3402      	adds	r4, #2
 80245aa:	9305      	str	r3, [sp, #20]
 80245ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8024678 <_svfiprintf_r+0x1fc>
 80245b0:	7821      	ldrb	r1, [r4, #0]
 80245b2:	2203      	movs	r2, #3
 80245b4:	4650      	mov	r0, sl
 80245b6:	f7db fe33 	bl	8000220 <memchr>
 80245ba:	b140      	cbz	r0, 80245ce <_svfiprintf_r+0x152>
 80245bc:	2340      	movs	r3, #64	; 0x40
 80245be:	eba0 000a 	sub.w	r0, r0, sl
 80245c2:	fa03 f000 	lsl.w	r0, r3, r0
 80245c6:	9b04      	ldr	r3, [sp, #16]
 80245c8:	4303      	orrs	r3, r0
 80245ca:	3401      	adds	r4, #1
 80245cc:	9304      	str	r3, [sp, #16]
 80245ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80245d2:	4826      	ldr	r0, [pc, #152]	; (802466c <_svfiprintf_r+0x1f0>)
 80245d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80245d8:	2206      	movs	r2, #6
 80245da:	f7db fe21 	bl	8000220 <memchr>
 80245de:	2800      	cmp	r0, #0
 80245e0:	d038      	beq.n	8024654 <_svfiprintf_r+0x1d8>
 80245e2:	4b23      	ldr	r3, [pc, #140]	; (8024670 <_svfiprintf_r+0x1f4>)
 80245e4:	bb1b      	cbnz	r3, 802462e <_svfiprintf_r+0x1b2>
 80245e6:	9b03      	ldr	r3, [sp, #12]
 80245e8:	3307      	adds	r3, #7
 80245ea:	f023 0307 	bic.w	r3, r3, #7
 80245ee:	3308      	adds	r3, #8
 80245f0:	9303      	str	r3, [sp, #12]
 80245f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245f4:	4433      	add	r3, r6
 80245f6:	9309      	str	r3, [sp, #36]	; 0x24
 80245f8:	e767      	b.n	80244ca <_svfiprintf_r+0x4e>
 80245fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80245fe:	460c      	mov	r4, r1
 8024600:	2001      	movs	r0, #1
 8024602:	e7a5      	b.n	8024550 <_svfiprintf_r+0xd4>
 8024604:	2300      	movs	r3, #0
 8024606:	3401      	adds	r4, #1
 8024608:	9305      	str	r3, [sp, #20]
 802460a:	4619      	mov	r1, r3
 802460c:	f04f 0c0a 	mov.w	ip, #10
 8024610:	4620      	mov	r0, r4
 8024612:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024616:	3a30      	subs	r2, #48	; 0x30
 8024618:	2a09      	cmp	r2, #9
 802461a:	d903      	bls.n	8024624 <_svfiprintf_r+0x1a8>
 802461c:	2b00      	cmp	r3, #0
 802461e:	d0c5      	beq.n	80245ac <_svfiprintf_r+0x130>
 8024620:	9105      	str	r1, [sp, #20]
 8024622:	e7c3      	b.n	80245ac <_svfiprintf_r+0x130>
 8024624:	fb0c 2101 	mla	r1, ip, r1, r2
 8024628:	4604      	mov	r4, r0
 802462a:	2301      	movs	r3, #1
 802462c:	e7f0      	b.n	8024610 <_svfiprintf_r+0x194>
 802462e:	ab03      	add	r3, sp, #12
 8024630:	9300      	str	r3, [sp, #0]
 8024632:	462a      	mov	r2, r5
 8024634:	4b0f      	ldr	r3, [pc, #60]	; (8024674 <_svfiprintf_r+0x1f8>)
 8024636:	a904      	add	r1, sp, #16
 8024638:	4638      	mov	r0, r7
 802463a:	f3af 8000 	nop.w
 802463e:	1c42      	adds	r2, r0, #1
 8024640:	4606      	mov	r6, r0
 8024642:	d1d6      	bne.n	80245f2 <_svfiprintf_r+0x176>
 8024644:	89ab      	ldrh	r3, [r5, #12]
 8024646:	065b      	lsls	r3, r3, #25
 8024648:	f53f af2c 	bmi.w	80244a4 <_svfiprintf_r+0x28>
 802464c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802464e:	b01d      	add	sp, #116	; 0x74
 8024650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024654:	ab03      	add	r3, sp, #12
 8024656:	9300      	str	r3, [sp, #0]
 8024658:	462a      	mov	r2, r5
 802465a:	4b06      	ldr	r3, [pc, #24]	; (8024674 <_svfiprintf_r+0x1f8>)
 802465c:	a904      	add	r1, sp, #16
 802465e:	4638      	mov	r0, r7
 8024660:	f000 f9d4 	bl	8024a0c <_printf_i>
 8024664:	e7eb      	b.n	802463e <_svfiprintf_r+0x1c2>
 8024666:	bf00      	nop
 8024668:	08028b4a 	.word	0x08028b4a
 802466c:	08028b54 	.word	0x08028b54
 8024670:	00000000 	.word	0x00000000
 8024674:	080243c5 	.word	0x080243c5
 8024678:	08028b50 	.word	0x08028b50

0802467c <__sfputc_r>:
 802467c:	6893      	ldr	r3, [r2, #8]
 802467e:	3b01      	subs	r3, #1
 8024680:	2b00      	cmp	r3, #0
 8024682:	b410      	push	{r4}
 8024684:	6093      	str	r3, [r2, #8]
 8024686:	da08      	bge.n	802469a <__sfputc_r+0x1e>
 8024688:	6994      	ldr	r4, [r2, #24]
 802468a:	42a3      	cmp	r3, r4
 802468c:	db01      	blt.n	8024692 <__sfputc_r+0x16>
 802468e:	290a      	cmp	r1, #10
 8024690:	d103      	bne.n	802469a <__sfputc_r+0x1e>
 8024692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024696:	f000 baf1 	b.w	8024c7c <__swbuf_r>
 802469a:	6813      	ldr	r3, [r2, #0]
 802469c:	1c58      	adds	r0, r3, #1
 802469e:	6010      	str	r0, [r2, #0]
 80246a0:	7019      	strb	r1, [r3, #0]
 80246a2:	4608      	mov	r0, r1
 80246a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80246a8:	4770      	bx	lr

080246aa <__sfputs_r>:
 80246aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80246ac:	4606      	mov	r6, r0
 80246ae:	460f      	mov	r7, r1
 80246b0:	4614      	mov	r4, r2
 80246b2:	18d5      	adds	r5, r2, r3
 80246b4:	42ac      	cmp	r4, r5
 80246b6:	d101      	bne.n	80246bc <__sfputs_r+0x12>
 80246b8:	2000      	movs	r0, #0
 80246ba:	e007      	b.n	80246cc <__sfputs_r+0x22>
 80246bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80246c0:	463a      	mov	r2, r7
 80246c2:	4630      	mov	r0, r6
 80246c4:	f7ff ffda 	bl	802467c <__sfputc_r>
 80246c8:	1c43      	adds	r3, r0, #1
 80246ca:	d1f3      	bne.n	80246b4 <__sfputs_r+0xa>
 80246cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080246d0 <_vfiprintf_r>:
 80246d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246d4:	460d      	mov	r5, r1
 80246d6:	b09d      	sub	sp, #116	; 0x74
 80246d8:	4614      	mov	r4, r2
 80246da:	4698      	mov	r8, r3
 80246dc:	4606      	mov	r6, r0
 80246de:	b118      	cbz	r0, 80246e8 <_vfiprintf_r+0x18>
 80246e0:	6983      	ldr	r3, [r0, #24]
 80246e2:	b90b      	cbnz	r3, 80246e8 <_vfiprintf_r+0x18>
 80246e4:	f7ff f956 	bl	8023994 <__sinit>
 80246e8:	4b89      	ldr	r3, [pc, #548]	; (8024910 <_vfiprintf_r+0x240>)
 80246ea:	429d      	cmp	r5, r3
 80246ec:	d11b      	bne.n	8024726 <_vfiprintf_r+0x56>
 80246ee:	6875      	ldr	r5, [r6, #4]
 80246f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80246f2:	07d9      	lsls	r1, r3, #31
 80246f4:	d405      	bmi.n	8024702 <_vfiprintf_r+0x32>
 80246f6:	89ab      	ldrh	r3, [r5, #12]
 80246f8:	059a      	lsls	r2, r3, #22
 80246fa:	d402      	bmi.n	8024702 <_vfiprintf_r+0x32>
 80246fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80246fe:	f7ff fa0c 	bl	8023b1a <__retarget_lock_acquire_recursive>
 8024702:	89ab      	ldrh	r3, [r5, #12]
 8024704:	071b      	lsls	r3, r3, #28
 8024706:	d501      	bpl.n	802470c <_vfiprintf_r+0x3c>
 8024708:	692b      	ldr	r3, [r5, #16]
 802470a:	b9eb      	cbnz	r3, 8024748 <_vfiprintf_r+0x78>
 802470c:	4629      	mov	r1, r5
 802470e:	4630      	mov	r0, r6
 8024710:	f000 fb06 	bl	8024d20 <__swsetup_r>
 8024714:	b1c0      	cbz	r0, 8024748 <_vfiprintf_r+0x78>
 8024716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024718:	07dc      	lsls	r4, r3, #31
 802471a:	d50e      	bpl.n	802473a <_vfiprintf_r+0x6a>
 802471c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024720:	b01d      	add	sp, #116	; 0x74
 8024722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024726:	4b7b      	ldr	r3, [pc, #492]	; (8024914 <_vfiprintf_r+0x244>)
 8024728:	429d      	cmp	r5, r3
 802472a:	d101      	bne.n	8024730 <_vfiprintf_r+0x60>
 802472c:	68b5      	ldr	r5, [r6, #8]
 802472e:	e7df      	b.n	80246f0 <_vfiprintf_r+0x20>
 8024730:	4b79      	ldr	r3, [pc, #484]	; (8024918 <_vfiprintf_r+0x248>)
 8024732:	429d      	cmp	r5, r3
 8024734:	bf08      	it	eq
 8024736:	68f5      	ldreq	r5, [r6, #12]
 8024738:	e7da      	b.n	80246f0 <_vfiprintf_r+0x20>
 802473a:	89ab      	ldrh	r3, [r5, #12]
 802473c:	0598      	lsls	r0, r3, #22
 802473e:	d4ed      	bmi.n	802471c <_vfiprintf_r+0x4c>
 8024740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024742:	f7ff f9ec 	bl	8023b1e <__retarget_lock_release_recursive>
 8024746:	e7e9      	b.n	802471c <_vfiprintf_r+0x4c>
 8024748:	2300      	movs	r3, #0
 802474a:	9309      	str	r3, [sp, #36]	; 0x24
 802474c:	2320      	movs	r3, #32
 802474e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024752:	f8cd 800c 	str.w	r8, [sp, #12]
 8024756:	2330      	movs	r3, #48	; 0x30
 8024758:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802491c <_vfiprintf_r+0x24c>
 802475c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024760:	f04f 0901 	mov.w	r9, #1
 8024764:	4623      	mov	r3, r4
 8024766:	469a      	mov	sl, r3
 8024768:	f813 2b01 	ldrb.w	r2, [r3], #1
 802476c:	b10a      	cbz	r2, 8024772 <_vfiprintf_r+0xa2>
 802476e:	2a25      	cmp	r2, #37	; 0x25
 8024770:	d1f9      	bne.n	8024766 <_vfiprintf_r+0x96>
 8024772:	ebba 0b04 	subs.w	fp, sl, r4
 8024776:	d00b      	beq.n	8024790 <_vfiprintf_r+0xc0>
 8024778:	465b      	mov	r3, fp
 802477a:	4622      	mov	r2, r4
 802477c:	4629      	mov	r1, r5
 802477e:	4630      	mov	r0, r6
 8024780:	f7ff ff93 	bl	80246aa <__sfputs_r>
 8024784:	3001      	adds	r0, #1
 8024786:	f000 80aa 	beq.w	80248de <_vfiprintf_r+0x20e>
 802478a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802478c:	445a      	add	r2, fp
 802478e:	9209      	str	r2, [sp, #36]	; 0x24
 8024790:	f89a 3000 	ldrb.w	r3, [sl]
 8024794:	2b00      	cmp	r3, #0
 8024796:	f000 80a2 	beq.w	80248de <_vfiprintf_r+0x20e>
 802479a:	2300      	movs	r3, #0
 802479c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80247a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80247a4:	f10a 0a01 	add.w	sl, sl, #1
 80247a8:	9304      	str	r3, [sp, #16]
 80247aa:	9307      	str	r3, [sp, #28]
 80247ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80247b0:	931a      	str	r3, [sp, #104]	; 0x68
 80247b2:	4654      	mov	r4, sl
 80247b4:	2205      	movs	r2, #5
 80247b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80247ba:	4858      	ldr	r0, [pc, #352]	; (802491c <_vfiprintf_r+0x24c>)
 80247bc:	f7db fd30 	bl	8000220 <memchr>
 80247c0:	9a04      	ldr	r2, [sp, #16]
 80247c2:	b9d8      	cbnz	r0, 80247fc <_vfiprintf_r+0x12c>
 80247c4:	06d1      	lsls	r1, r2, #27
 80247c6:	bf44      	itt	mi
 80247c8:	2320      	movmi	r3, #32
 80247ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80247ce:	0713      	lsls	r3, r2, #28
 80247d0:	bf44      	itt	mi
 80247d2:	232b      	movmi	r3, #43	; 0x2b
 80247d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80247d8:	f89a 3000 	ldrb.w	r3, [sl]
 80247dc:	2b2a      	cmp	r3, #42	; 0x2a
 80247de:	d015      	beq.n	802480c <_vfiprintf_r+0x13c>
 80247e0:	9a07      	ldr	r2, [sp, #28]
 80247e2:	4654      	mov	r4, sl
 80247e4:	2000      	movs	r0, #0
 80247e6:	f04f 0c0a 	mov.w	ip, #10
 80247ea:	4621      	mov	r1, r4
 80247ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80247f0:	3b30      	subs	r3, #48	; 0x30
 80247f2:	2b09      	cmp	r3, #9
 80247f4:	d94e      	bls.n	8024894 <_vfiprintf_r+0x1c4>
 80247f6:	b1b0      	cbz	r0, 8024826 <_vfiprintf_r+0x156>
 80247f8:	9207      	str	r2, [sp, #28]
 80247fa:	e014      	b.n	8024826 <_vfiprintf_r+0x156>
 80247fc:	eba0 0308 	sub.w	r3, r0, r8
 8024800:	fa09 f303 	lsl.w	r3, r9, r3
 8024804:	4313      	orrs	r3, r2
 8024806:	9304      	str	r3, [sp, #16]
 8024808:	46a2      	mov	sl, r4
 802480a:	e7d2      	b.n	80247b2 <_vfiprintf_r+0xe2>
 802480c:	9b03      	ldr	r3, [sp, #12]
 802480e:	1d19      	adds	r1, r3, #4
 8024810:	681b      	ldr	r3, [r3, #0]
 8024812:	9103      	str	r1, [sp, #12]
 8024814:	2b00      	cmp	r3, #0
 8024816:	bfbb      	ittet	lt
 8024818:	425b      	neglt	r3, r3
 802481a:	f042 0202 	orrlt.w	r2, r2, #2
 802481e:	9307      	strge	r3, [sp, #28]
 8024820:	9307      	strlt	r3, [sp, #28]
 8024822:	bfb8      	it	lt
 8024824:	9204      	strlt	r2, [sp, #16]
 8024826:	7823      	ldrb	r3, [r4, #0]
 8024828:	2b2e      	cmp	r3, #46	; 0x2e
 802482a:	d10c      	bne.n	8024846 <_vfiprintf_r+0x176>
 802482c:	7863      	ldrb	r3, [r4, #1]
 802482e:	2b2a      	cmp	r3, #42	; 0x2a
 8024830:	d135      	bne.n	802489e <_vfiprintf_r+0x1ce>
 8024832:	9b03      	ldr	r3, [sp, #12]
 8024834:	1d1a      	adds	r2, r3, #4
 8024836:	681b      	ldr	r3, [r3, #0]
 8024838:	9203      	str	r2, [sp, #12]
 802483a:	2b00      	cmp	r3, #0
 802483c:	bfb8      	it	lt
 802483e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8024842:	3402      	adds	r4, #2
 8024844:	9305      	str	r3, [sp, #20]
 8024846:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802492c <_vfiprintf_r+0x25c>
 802484a:	7821      	ldrb	r1, [r4, #0]
 802484c:	2203      	movs	r2, #3
 802484e:	4650      	mov	r0, sl
 8024850:	f7db fce6 	bl	8000220 <memchr>
 8024854:	b140      	cbz	r0, 8024868 <_vfiprintf_r+0x198>
 8024856:	2340      	movs	r3, #64	; 0x40
 8024858:	eba0 000a 	sub.w	r0, r0, sl
 802485c:	fa03 f000 	lsl.w	r0, r3, r0
 8024860:	9b04      	ldr	r3, [sp, #16]
 8024862:	4303      	orrs	r3, r0
 8024864:	3401      	adds	r4, #1
 8024866:	9304      	str	r3, [sp, #16]
 8024868:	f814 1b01 	ldrb.w	r1, [r4], #1
 802486c:	482c      	ldr	r0, [pc, #176]	; (8024920 <_vfiprintf_r+0x250>)
 802486e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024872:	2206      	movs	r2, #6
 8024874:	f7db fcd4 	bl	8000220 <memchr>
 8024878:	2800      	cmp	r0, #0
 802487a:	d03f      	beq.n	80248fc <_vfiprintf_r+0x22c>
 802487c:	4b29      	ldr	r3, [pc, #164]	; (8024924 <_vfiprintf_r+0x254>)
 802487e:	bb1b      	cbnz	r3, 80248c8 <_vfiprintf_r+0x1f8>
 8024880:	9b03      	ldr	r3, [sp, #12]
 8024882:	3307      	adds	r3, #7
 8024884:	f023 0307 	bic.w	r3, r3, #7
 8024888:	3308      	adds	r3, #8
 802488a:	9303      	str	r3, [sp, #12]
 802488c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802488e:	443b      	add	r3, r7
 8024890:	9309      	str	r3, [sp, #36]	; 0x24
 8024892:	e767      	b.n	8024764 <_vfiprintf_r+0x94>
 8024894:	fb0c 3202 	mla	r2, ip, r2, r3
 8024898:	460c      	mov	r4, r1
 802489a:	2001      	movs	r0, #1
 802489c:	e7a5      	b.n	80247ea <_vfiprintf_r+0x11a>
 802489e:	2300      	movs	r3, #0
 80248a0:	3401      	adds	r4, #1
 80248a2:	9305      	str	r3, [sp, #20]
 80248a4:	4619      	mov	r1, r3
 80248a6:	f04f 0c0a 	mov.w	ip, #10
 80248aa:	4620      	mov	r0, r4
 80248ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80248b0:	3a30      	subs	r2, #48	; 0x30
 80248b2:	2a09      	cmp	r2, #9
 80248b4:	d903      	bls.n	80248be <_vfiprintf_r+0x1ee>
 80248b6:	2b00      	cmp	r3, #0
 80248b8:	d0c5      	beq.n	8024846 <_vfiprintf_r+0x176>
 80248ba:	9105      	str	r1, [sp, #20]
 80248bc:	e7c3      	b.n	8024846 <_vfiprintf_r+0x176>
 80248be:	fb0c 2101 	mla	r1, ip, r1, r2
 80248c2:	4604      	mov	r4, r0
 80248c4:	2301      	movs	r3, #1
 80248c6:	e7f0      	b.n	80248aa <_vfiprintf_r+0x1da>
 80248c8:	ab03      	add	r3, sp, #12
 80248ca:	9300      	str	r3, [sp, #0]
 80248cc:	462a      	mov	r2, r5
 80248ce:	4b16      	ldr	r3, [pc, #88]	; (8024928 <_vfiprintf_r+0x258>)
 80248d0:	a904      	add	r1, sp, #16
 80248d2:	4630      	mov	r0, r6
 80248d4:	f3af 8000 	nop.w
 80248d8:	4607      	mov	r7, r0
 80248da:	1c78      	adds	r0, r7, #1
 80248dc:	d1d6      	bne.n	802488c <_vfiprintf_r+0x1bc>
 80248de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80248e0:	07d9      	lsls	r1, r3, #31
 80248e2:	d405      	bmi.n	80248f0 <_vfiprintf_r+0x220>
 80248e4:	89ab      	ldrh	r3, [r5, #12]
 80248e6:	059a      	lsls	r2, r3, #22
 80248e8:	d402      	bmi.n	80248f0 <_vfiprintf_r+0x220>
 80248ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80248ec:	f7ff f917 	bl	8023b1e <__retarget_lock_release_recursive>
 80248f0:	89ab      	ldrh	r3, [r5, #12]
 80248f2:	065b      	lsls	r3, r3, #25
 80248f4:	f53f af12 	bmi.w	802471c <_vfiprintf_r+0x4c>
 80248f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80248fa:	e711      	b.n	8024720 <_vfiprintf_r+0x50>
 80248fc:	ab03      	add	r3, sp, #12
 80248fe:	9300      	str	r3, [sp, #0]
 8024900:	462a      	mov	r2, r5
 8024902:	4b09      	ldr	r3, [pc, #36]	; (8024928 <_vfiprintf_r+0x258>)
 8024904:	a904      	add	r1, sp, #16
 8024906:	4630      	mov	r0, r6
 8024908:	f000 f880 	bl	8024a0c <_printf_i>
 802490c:	e7e4      	b.n	80248d8 <_vfiprintf_r+0x208>
 802490e:	bf00      	nop
 8024910:	08028a58 	.word	0x08028a58
 8024914:	08028a78 	.word	0x08028a78
 8024918:	08028a38 	.word	0x08028a38
 802491c:	08028b4a 	.word	0x08028b4a
 8024920:	08028b54 	.word	0x08028b54
 8024924:	00000000 	.word	0x00000000
 8024928:	080246ab 	.word	0x080246ab
 802492c:	08028b50 	.word	0x08028b50

08024930 <_printf_common>:
 8024930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024934:	4616      	mov	r6, r2
 8024936:	4699      	mov	r9, r3
 8024938:	688a      	ldr	r2, [r1, #8]
 802493a:	690b      	ldr	r3, [r1, #16]
 802493c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024940:	4293      	cmp	r3, r2
 8024942:	bfb8      	it	lt
 8024944:	4613      	movlt	r3, r2
 8024946:	6033      	str	r3, [r6, #0]
 8024948:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802494c:	4607      	mov	r7, r0
 802494e:	460c      	mov	r4, r1
 8024950:	b10a      	cbz	r2, 8024956 <_printf_common+0x26>
 8024952:	3301      	adds	r3, #1
 8024954:	6033      	str	r3, [r6, #0]
 8024956:	6823      	ldr	r3, [r4, #0]
 8024958:	0699      	lsls	r1, r3, #26
 802495a:	bf42      	ittt	mi
 802495c:	6833      	ldrmi	r3, [r6, #0]
 802495e:	3302      	addmi	r3, #2
 8024960:	6033      	strmi	r3, [r6, #0]
 8024962:	6825      	ldr	r5, [r4, #0]
 8024964:	f015 0506 	ands.w	r5, r5, #6
 8024968:	d106      	bne.n	8024978 <_printf_common+0x48>
 802496a:	f104 0a19 	add.w	sl, r4, #25
 802496e:	68e3      	ldr	r3, [r4, #12]
 8024970:	6832      	ldr	r2, [r6, #0]
 8024972:	1a9b      	subs	r3, r3, r2
 8024974:	42ab      	cmp	r3, r5
 8024976:	dc26      	bgt.n	80249c6 <_printf_common+0x96>
 8024978:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802497c:	1e13      	subs	r3, r2, #0
 802497e:	6822      	ldr	r2, [r4, #0]
 8024980:	bf18      	it	ne
 8024982:	2301      	movne	r3, #1
 8024984:	0692      	lsls	r2, r2, #26
 8024986:	d42b      	bmi.n	80249e0 <_printf_common+0xb0>
 8024988:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802498c:	4649      	mov	r1, r9
 802498e:	4638      	mov	r0, r7
 8024990:	47c0      	blx	r8
 8024992:	3001      	adds	r0, #1
 8024994:	d01e      	beq.n	80249d4 <_printf_common+0xa4>
 8024996:	6823      	ldr	r3, [r4, #0]
 8024998:	68e5      	ldr	r5, [r4, #12]
 802499a:	6832      	ldr	r2, [r6, #0]
 802499c:	f003 0306 	and.w	r3, r3, #6
 80249a0:	2b04      	cmp	r3, #4
 80249a2:	bf08      	it	eq
 80249a4:	1aad      	subeq	r5, r5, r2
 80249a6:	68a3      	ldr	r3, [r4, #8]
 80249a8:	6922      	ldr	r2, [r4, #16]
 80249aa:	bf0c      	ite	eq
 80249ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80249b0:	2500      	movne	r5, #0
 80249b2:	4293      	cmp	r3, r2
 80249b4:	bfc4      	itt	gt
 80249b6:	1a9b      	subgt	r3, r3, r2
 80249b8:	18ed      	addgt	r5, r5, r3
 80249ba:	2600      	movs	r6, #0
 80249bc:	341a      	adds	r4, #26
 80249be:	42b5      	cmp	r5, r6
 80249c0:	d11a      	bne.n	80249f8 <_printf_common+0xc8>
 80249c2:	2000      	movs	r0, #0
 80249c4:	e008      	b.n	80249d8 <_printf_common+0xa8>
 80249c6:	2301      	movs	r3, #1
 80249c8:	4652      	mov	r2, sl
 80249ca:	4649      	mov	r1, r9
 80249cc:	4638      	mov	r0, r7
 80249ce:	47c0      	blx	r8
 80249d0:	3001      	adds	r0, #1
 80249d2:	d103      	bne.n	80249dc <_printf_common+0xac>
 80249d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80249d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80249dc:	3501      	adds	r5, #1
 80249de:	e7c6      	b.n	802496e <_printf_common+0x3e>
 80249e0:	18e1      	adds	r1, r4, r3
 80249e2:	1c5a      	adds	r2, r3, #1
 80249e4:	2030      	movs	r0, #48	; 0x30
 80249e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80249ea:	4422      	add	r2, r4
 80249ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80249f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80249f4:	3302      	adds	r3, #2
 80249f6:	e7c7      	b.n	8024988 <_printf_common+0x58>
 80249f8:	2301      	movs	r3, #1
 80249fa:	4622      	mov	r2, r4
 80249fc:	4649      	mov	r1, r9
 80249fe:	4638      	mov	r0, r7
 8024a00:	47c0      	blx	r8
 8024a02:	3001      	adds	r0, #1
 8024a04:	d0e6      	beq.n	80249d4 <_printf_common+0xa4>
 8024a06:	3601      	adds	r6, #1
 8024a08:	e7d9      	b.n	80249be <_printf_common+0x8e>
	...

08024a0c <_printf_i>:
 8024a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024a10:	7e0f      	ldrb	r7, [r1, #24]
 8024a12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024a14:	2f78      	cmp	r7, #120	; 0x78
 8024a16:	4691      	mov	r9, r2
 8024a18:	4680      	mov	r8, r0
 8024a1a:	460c      	mov	r4, r1
 8024a1c:	469a      	mov	sl, r3
 8024a1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8024a22:	d807      	bhi.n	8024a34 <_printf_i+0x28>
 8024a24:	2f62      	cmp	r7, #98	; 0x62
 8024a26:	d80a      	bhi.n	8024a3e <_printf_i+0x32>
 8024a28:	2f00      	cmp	r7, #0
 8024a2a:	f000 80d8 	beq.w	8024bde <_printf_i+0x1d2>
 8024a2e:	2f58      	cmp	r7, #88	; 0x58
 8024a30:	f000 80a3 	beq.w	8024b7a <_printf_i+0x16e>
 8024a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024a38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024a3c:	e03a      	b.n	8024ab4 <_printf_i+0xa8>
 8024a3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024a42:	2b15      	cmp	r3, #21
 8024a44:	d8f6      	bhi.n	8024a34 <_printf_i+0x28>
 8024a46:	a101      	add	r1, pc, #4	; (adr r1, 8024a4c <_printf_i+0x40>)
 8024a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024a4c:	08024aa5 	.word	0x08024aa5
 8024a50:	08024ab9 	.word	0x08024ab9
 8024a54:	08024a35 	.word	0x08024a35
 8024a58:	08024a35 	.word	0x08024a35
 8024a5c:	08024a35 	.word	0x08024a35
 8024a60:	08024a35 	.word	0x08024a35
 8024a64:	08024ab9 	.word	0x08024ab9
 8024a68:	08024a35 	.word	0x08024a35
 8024a6c:	08024a35 	.word	0x08024a35
 8024a70:	08024a35 	.word	0x08024a35
 8024a74:	08024a35 	.word	0x08024a35
 8024a78:	08024bc5 	.word	0x08024bc5
 8024a7c:	08024ae9 	.word	0x08024ae9
 8024a80:	08024ba7 	.word	0x08024ba7
 8024a84:	08024a35 	.word	0x08024a35
 8024a88:	08024a35 	.word	0x08024a35
 8024a8c:	08024be7 	.word	0x08024be7
 8024a90:	08024a35 	.word	0x08024a35
 8024a94:	08024ae9 	.word	0x08024ae9
 8024a98:	08024a35 	.word	0x08024a35
 8024a9c:	08024a35 	.word	0x08024a35
 8024aa0:	08024baf 	.word	0x08024baf
 8024aa4:	682b      	ldr	r3, [r5, #0]
 8024aa6:	1d1a      	adds	r2, r3, #4
 8024aa8:	681b      	ldr	r3, [r3, #0]
 8024aaa:	602a      	str	r2, [r5, #0]
 8024aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024ab4:	2301      	movs	r3, #1
 8024ab6:	e0a3      	b.n	8024c00 <_printf_i+0x1f4>
 8024ab8:	6820      	ldr	r0, [r4, #0]
 8024aba:	6829      	ldr	r1, [r5, #0]
 8024abc:	0606      	lsls	r6, r0, #24
 8024abe:	f101 0304 	add.w	r3, r1, #4
 8024ac2:	d50a      	bpl.n	8024ada <_printf_i+0xce>
 8024ac4:	680e      	ldr	r6, [r1, #0]
 8024ac6:	602b      	str	r3, [r5, #0]
 8024ac8:	2e00      	cmp	r6, #0
 8024aca:	da03      	bge.n	8024ad4 <_printf_i+0xc8>
 8024acc:	232d      	movs	r3, #45	; 0x2d
 8024ace:	4276      	negs	r6, r6
 8024ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024ad4:	485e      	ldr	r0, [pc, #376]	; (8024c50 <_printf_i+0x244>)
 8024ad6:	230a      	movs	r3, #10
 8024ad8:	e019      	b.n	8024b0e <_printf_i+0x102>
 8024ada:	680e      	ldr	r6, [r1, #0]
 8024adc:	602b      	str	r3, [r5, #0]
 8024ade:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024ae2:	bf18      	it	ne
 8024ae4:	b236      	sxthne	r6, r6
 8024ae6:	e7ef      	b.n	8024ac8 <_printf_i+0xbc>
 8024ae8:	682b      	ldr	r3, [r5, #0]
 8024aea:	6820      	ldr	r0, [r4, #0]
 8024aec:	1d19      	adds	r1, r3, #4
 8024aee:	6029      	str	r1, [r5, #0]
 8024af0:	0601      	lsls	r1, r0, #24
 8024af2:	d501      	bpl.n	8024af8 <_printf_i+0xec>
 8024af4:	681e      	ldr	r6, [r3, #0]
 8024af6:	e002      	b.n	8024afe <_printf_i+0xf2>
 8024af8:	0646      	lsls	r6, r0, #25
 8024afa:	d5fb      	bpl.n	8024af4 <_printf_i+0xe8>
 8024afc:	881e      	ldrh	r6, [r3, #0]
 8024afe:	4854      	ldr	r0, [pc, #336]	; (8024c50 <_printf_i+0x244>)
 8024b00:	2f6f      	cmp	r7, #111	; 0x6f
 8024b02:	bf0c      	ite	eq
 8024b04:	2308      	moveq	r3, #8
 8024b06:	230a      	movne	r3, #10
 8024b08:	2100      	movs	r1, #0
 8024b0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024b0e:	6865      	ldr	r5, [r4, #4]
 8024b10:	60a5      	str	r5, [r4, #8]
 8024b12:	2d00      	cmp	r5, #0
 8024b14:	bfa2      	ittt	ge
 8024b16:	6821      	ldrge	r1, [r4, #0]
 8024b18:	f021 0104 	bicge.w	r1, r1, #4
 8024b1c:	6021      	strge	r1, [r4, #0]
 8024b1e:	b90e      	cbnz	r6, 8024b24 <_printf_i+0x118>
 8024b20:	2d00      	cmp	r5, #0
 8024b22:	d04d      	beq.n	8024bc0 <_printf_i+0x1b4>
 8024b24:	4615      	mov	r5, r2
 8024b26:	fbb6 f1f3 	udiv	r1, r6, r3
 8024b2a:	fb03 6711 	mls	r7, r3, r1, r6
 8024b2e:	5dc7      	ldrb	r7, [r0, r7]
 8024b30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8024b34:	4637      	mov	r7, r6
 8024b36:	42bb      	cmp	r3, r7
 8024b38:	460e      	mov	r6, r1
 8024b3a:	d9f4      	bls.n	8024b26 <_printf_i+0x11a>
 8024b3c:	2b08      	cmp	r3, #8
 8024b3e:	d10b      	bne.n	8024b58 <_printf_i+0x14c>
 8024b40:	6823      	ldr	r3, [r4, #0]
 8024b42:	07de      	lsls	r6, r3, #31
 8024b44:	d508      	bpl.n	8024b58 <_printf_i+0x14c>
 8024b46:	6923      	ldr	r3, [r4, #16]
 8024b48:	6861      	ldr	r1, [r4, #4]
 8024b4a:	4299      	cmp	r1, r3
 8024b4c:	bfde      	ittt	le
 8024b4e:	2330      	movle	r3, #48	; 0x30
 8024b50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024b54:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8024b58:	1b52      	subs	r2, r2, r5
 8024b5a:	6122      	str	r2, [r4, #16]
 8024b5c:	f8cd a000 	str.w	sl, [sp]
 8024b60:	464b      	mov	r3, r9
 8024b62:	aa03      	add	r2, sp, #12
 8024b64:	4621      	mov	r1, r4
 8024b66:	4640      	mov	r0, r8
 8024b68:	f7ff fee2 	bl	8024930 <_printf_common>
 8024b6c:	3001      	adds	r0, #1
 8024b6e:	d14c      	bne.n	8024c0a <_printf_i+0x1fe>
 8024b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024b74:	b004      	add	sp, #16
 8024b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024b7a:	4835      	ldr	r0, [pc, #212]	; (8024c50 <_printf_i+0x244>)
 8024b7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8024b80:	6829      	ldr	r1, [r5, #0]
 8024b82:	6823      	ldr	r3, [r4, #0]
 8024b84:	f851 6b04 	ldr.w	r6, [r1], #4
 8024b88:	6029      	str	r1, [r5, #0]
 8024b8a:	061d      	lsls	r5, r3, #24
 8024b8c:	d514      	bpl.n	8024bb8 <_printf_i+0x1ac>
 8024b8e:	07df      	lsls	r7, r3, #31
 8024b90:	bf44      	itt	mi
 8024b92:	f043 0320 	orrmi.w	r3, r3, #32
 8024b96:	6023      	strmi	r3, [r4, #0]
 8024b98:	b91e      	cbnz	r6, 8024ba2 <_printf_i+0x196>
 8024b9a:	6823      	ldr	r3, [r4, #0]
 8024b9c:	f023 0320 	bic.w	r3, r3, #32
 8024ba0:	6023      	str	r3, [r4, #0]
 8024ba2:	2310      	movs	r3, #16
 8024ba4:	e7b0      	b.n	8024b08 <_printf_i+0xfc>
 8024ba6:	6823      	ldr	r3, [r4, #0]
 8024ba8:	f043 0320 	orr.w	r3, r3, #32
 8024bac:	6023      	str	r3, [r4, #0]
 8024bae:	2378      	movs	r3, #120	; 0x78
 8024bb0:	4828      	ldr	r0, [pc, #160]	; (8024c54 <_printf_i+0x248>)
 8024bb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024bb6:	e7e3      	b.n	8024b80 <_printf_i+0x174>
 8024bb8:	0659      	lsls	r1, r3, #25
 8024bba:	bf48      	it	mi
 8024bbc:	b2b6      	uxthmi	r6, r6
 8024bbe:	e7e6      	b.n	8024b8e <_printf_i+0x182>
 8024bc0:	4615      	mov	r5, r2
 8024bc2:	e7bb      	b.n	8024b3c <_printf_i+0x130>
 8024bc4:	682b      	ldr	r3, [r5, #0]
 8024bc6:	6826      	ldr	r6, [r4, #0]
 8024bc8:	6961      	ldr	r1, [r4, #20]
 8024bca:	1d18      	adds	r0, r3, #4
 8024bcc:	6028      	str	r0, [r5, #0]
 8024bce:	0635      	lsls	r5, r6, #24
 8024bd0:	681b      	ldr	r3, [r3, #0]
 8024bd2:	d501      	bpl.n	8024bd8 <_printf_i+0x1cc>
 8024bd4:	6019      	str	r1, [r3, #0]
 8024bd6:	e002      	b.n	8024bde <_printf_i+0x1d2>
 8024bd8:	0670      	lsls	r0, r6, #25
 8024bda:	d5fb      	bpl.n	8024bd4 <_printf_i+0x1c8>
 8024bdc:	8019      	strh	r1, [r3, #0]
 8024bde:	2300      	movs	r3, #0
 8024be0:	6123      	str	r3, [r4, #16]
 8024be2:	4615      	mov	r5, r2
 8024be4:	e7ba      	b.n	8024b5c <_printf_i+0x150>
 8024be6:	682b      	ldr	r3, [r5, #0]
 8024be8:	1d1a      	adds	r2, r3, #4
 8024bea:	602a      	str	r2, [r5, #0]
 8024bec:	681d      	ldr	r5, [r3, #0]
 8024bee:	6862      	ldr	r2, [r4, #4]
 8024bf0:	2100      	movs	r1, #0
 8024bf2:	4628      	mov	r0, r5
 8024bf4:	f7db fb14 	bl	8000220 <memchr>
 8024bf8:	b108      	cbz	r0, 8024bfe <_printf_i+0x1f2>
 8024bfa:	1b40      	subs	r0, r0, r5
 8024bfc:	6060      	str	r0, [r4, #4]
 8024bfe:	6863      	ldr	r3, [r4, #4]
 8024c00:	6123      	str	r3, [r4, #16]
 8024c02:	2300      	movs	r3, #0
 8024c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024c08:	e7a8      	b.n	8024b5c <_printf_i+0x150>
 8024c0a:	6923      	ldr	r3, [r4, #16]
 8024c0c:	462a      	mov	r2, r5
 8024c0e:	4649      	mov	r1, r9
 8024c10:	4640      	mov	r0, r8
 8024c12:	47d0      	blx	sl
 8024c14:	3001      	adds	r0, #1
 8024c16:	d0ab      	beq.n	8024b70 <_printf_i+0x164>
 8024c18:	6823      	ldr	r3, [r4, #0]
 8024c1a:	079b      	lsls	r3, r3, #30
 8024c1c:	d413      	bmi.n	8024c46 <_printf_i+0x23a>
 8024c1e:	68e0      	ldr	r0, [r4, #12]
 8024c20:	9b03      	ldr	r3, [sp, #12]
 8024c22:	4298      	cmp	r0, r3
 8024c24:	bfb8      	it	lt
 8024c26:	4618      	movlt	r0, r3
 8024c28:	e7a4      	b.n	8024b74 <_printf_i+0x168>
 8024c2a:	2301      	movs	r3, #1
 8024c2c:	4632      	mov	r2, r6
 8024c2e:	4649      	mov	r1, r9
 8024c30:	4640      	mov	r0, r8
 8024c32:	47d0      	blx	sl
 8024c34:	3001      	adds	r0, #1
 8024c36:	d09b      	beq.n	8024b70 <_printf_i+0x164>
 8024c38:	3501      	adds	r5, #1
 8024c3a:	68e3      	ldr	r3, [r4, #12]
 8024c3c:	9903      	ldr	r1, [sp, #12]
 8024c3e:	1a5b      	subs	r3, r3, r1
 8024c40:	42ab      	cmp	r3, r5
 8024c42:	dcf2      	bgt.n	8024c2a <_printf_i+0x21e>
 8024c44:	e7eb      	b.n	8024c1e <_printf_i+0x212>
 8024c46:	2500      	movs	r5, #0
 8024c48:	f104 0619 	add.w	r6, r4, #25
 8024c4c:	e7f5      	b.n	8024c3a <_printf_i+0x22e>
 8024c4e:	bf00      	nop
 8024c50:	08028b5b 	.word	0x08028b5b
 8024c54:	08028b6c 	.word	0x08028b6c

08024c58 <_read_r>:
 8024c58:	b538      	push	{r3, r4, r5, lr}
 8024c5a:	4d07      	ldr	r5, [pc, #28]	; (8024c78 <_read_r+0x20>)
 8024c5c:	4604      	mov	r4, r0
 8024c5e:	4608      	mov	r0, r1
 8024c60:	4611      	mov	r1, r2
 8024c62:	2200      	movs	r2, #0
 8024c64:	602a      	str	r2, [r5, #0]
 8024c66:	461a      	mov	r2, r3
 8024c68:	f7e5 fdfa 	bl	800a860 <_read>
 8024c6c:	1c43      	adds	r3, r0, #1
 8024c6e:	d102      	bne.n	8024c76 <_read_r+0x1e>
 8024c70:	682b      	ldr	r3, [r5, #0]
 8024c72:	b103      	cbz	r3, 8024c76 <_read_r+0x1e>
 8024c74:	6023      	str	r3, [r4, #0]
 8024c76:	bd38      	pop	{r3, r4, r5, pc}
 8024c78:	2000c108 	.word	0x2000c108

08024c7c <__swbuf_r>:
 8024c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c7e:	460e      	mov	r6, r1
 8024c80:	4614      	mov	r4, r2
 8024c82:	4605      	mov	r5, r0
 8024c84:	b118      	cbz	r0, 8024c8e <__swbuf_r+0x12>
 8024c86:	6983      	ldr	r3, [r0, #24]
 8024c88:	b90b      	cbnz	r3, 8024c8e <__swbuf_r+0x12>
 8024c8a:	f7fe fe83 	bl	8023994 <__sinit>
 8024c8e:	4b21      	ldr	r3, [pc, #132]	; (8024d14 <__swbuf_r+0x98>)
 8024c90:	429c      	cmp	r4, r3
 8024c92:	d12b      	bne.n	8024cec <__swbuf_r+0x70>
 8024c94:	686c      	ldr	r4, [r5, #4]
 8024c96:	69a3      	ldr	r3, [r4, #24]
 8024c98:	60a3      	str	r3, [r4, #8]
 8024c9a:	89a3      	ldrh	r3, [r4, #12]
 8024c9c:	071a      	lsls	r2, r3, #28
 8024c9e:	d52f      	bpl.n	8024d00 <__swbuf_r+0x84>
 8024ca0:	6923      	ldr	r3, [r4, #16]
 8024ca2:	b36b      	cbz	r3, 8024d00 <__swbuf_r+0x84>
 8024ca4:	6923      	ldr	r3, [r4, #16]
 8024ca6:	6820      	ldr	r0, [r4, #0]
 8024ca8:	1ac0      	subs	r0, r0, r3
 8024caa:	6963      	ldr	r3, [r4, #20]
 8024cac:	b2f6      	uxtb	r6, r6
 8024cae:	4283      	cmp	r3, r0
 8024cb0:	4637      	mov	r7, r6
 8024cb2:	dc04      	bgt.n	8024cbe <__swbuf_r+0x42>
 8024cb4:	4621      	mov	r1, r4
 8024cb6:	4628      	mov	r0, r5
 8024cb8:	f7ff fb24 	bl	8024304 <_fflush_r>
 8024cbc:	bb30      	cbnz	r0, 8024d0c <__swbuf_r+0x90>
 8024cbe:	68a3      	ldr	r3, [r4, #8]
 8024cc0:	3b01      	subs	r3, #1
 8024cc2:	60a3      	str	r3, [r4, #8]
 8024cc4:	6823      	ldr	r3, [r4, #0]
 8024cc6:	1c5a      	adds	r2, r3, #1
 8024cc8:	6022      	str	r2, [r4, #0]
 8024cca:	701e      	strb	r6, [r3, #0]
 8024ccc:	6963      	ldr	r3, [r4, #20]
 8024cce:	3001      	adds	r0, #1
 8024cd0:	4283      	cmp	r3, r0
 8024cd2:	d004      	beq.n	8024cde <__swbuf_r+0x62>
 8024cd4:	89a3      	ldrh	r3, [r4, #12]
 8024cd6:	07db      	lsls	r3, r3, #31
 8024cd8:	d506      	bpl.n	8024ce8 <__swbuf_r+0x6c>
 8024cda:	2e0a      	cmp	r6, #10
 8024cdc:	d104      	bne.n	8024ce8 <__swbuf_r+0x6c>
 8024cde:	4621      	mov	r1, r4
 8024ce0:	4628      	mov	r0, r5
 8024ce2:	f7ff fb0f 	bl	8024304 <_fflush_r>
 8024ce6:	b988      	cbnz	r0, 8024d0c <__swbuf_r+0x90>
 8024ce8:	4638      	mov	r0, r7
 8024cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024cec:	4b0a      	ldr	r3, [pc, #40]	; (8024d18 <__swbuf_r+0x9c>)
 8024cee:	429c      	cmp	r4, r3
 8024cf0:	d101      	bne.n	8024cf6 <__swbuf_r+0x7a>
 8024cf2:	68ac      	ldr	r4, [r5, #8]
 8024cf4:	e7cf      	b.n	8024c96 <__swbuf_r+0x1a>
 8024cf6:	4b09      	ldr	r3, [pc, #36]	; (8024d1c <__swbuf_r+0xa0>)
 8024cf8:	429c      	cmp	r4, r3
 8024cfa:	bf08      	it	eq
 8024cfc:	68ec      	ldreq	r4, [r5, #12]
 8024cfe:	e7ca      	b.n	8024c96 <__swbuf_r+0x1a>
 8024d00:	4621      	mov	r1, r4
 8024d02:	4628      	mov	r0, r5
 8024d04:	f000 f80c 	bl	8024d20 <__swsetup_r>
 8024d08:	2800      	cmp	r0, #0
 8024d0a:	d0cb      	beq.n	8024ca4 <__swbuf_r+0x28>
 8024d0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8024d10:	e7ea      	b.n	8024ce8 <__swbuf_r+0x6c>
 8024d12:	bf00      	nop
 8024d14:	08028a58 	.word	0x08028a58
 8024d18:	08028a78 	.word	0x08028a78
 8024d1c:	08028a38 	.word	0x08028a38

08024d20 <__swsetup_r>:
 8024d20:	4b32      	ldr	r3, [pc, #200]	; (8024dec <__swsetup_r+0xcc>)
 8024d22:	b570      	push	{r4, r5, r6, lr}
 8024d24:	681d      	ldr	r5, [r3, #0]
 8024d26:	4606      	mov	r6, r0
 8024d28:	460c      	mov	r4, r1
 8024d2a:	b125      	cbz	r5, 8024d36 <__swsetup_r+0x16>
 8024d2c:	69ab      	ldr	r3, [r5, #24]
 8024d2e:	b913      	cbnz	r3, 8024d36 <__swsetup_r+0x16>
 8024d30:	4628      	mov	r0, r5
 8024d32:	f7fe fe2f 	bl	8023994 <__sinit>
 8024d36:	4b2e      	ldr	r3, [pc, #184]	; (8024df0 <__swsetup_r+0xd0>)
 8024d38:	429c      	cmp	r4, r3
 8024d3a:	d10f      	bne.n	8024d5c <__swsetup_r+0x3c>
 8024d3c:	686c      	ldr	r4, [r5, #4]
 8024d3e:	89a3      	ldrh	r3, [r4, #12]
 8024d40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024d44:	0719      	lsls	r1, r3, #28
 8024d46:	d42c      	bmi.n	8024da2 <__swsetup_r+0x82>
 8024d48:	06dd      	lsls	r5, r3, #27
 8024d4a:	d411      	bmi.n	8024d70 <__swsetup_r+0x50>
 8024d4c:	2309      	movs	r3, #9
 8024d4e:	6033      	str	r3, [r6, #0]
 8024d50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024d54:	81a3      	strh	r3, [r4, #12]
 8024d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024d5a:	e03e      	b.n	8024dda <__swsetup_r+0xba>
 8024d5c:	4b25      	ldr	r3, [pc, #148]	; (8024df4 <__swsetup_r+0xd4>)
 8024d5e:	429c      	cmp	r4, r3
 8024d60:	d101      	bne.n	8024d66 <__swsetup_r+0x46>
 8024d62:	68ac      	ldr	r4, [r5, #8]
 8024d64:	e7eb      	b.n	8024d3e <__swsetup_r+0x1e>
 8024d66:	4b24      	ldr	r3, [pc, #144]	; (8024df8 <__swsetup_r+0xd8>)
 8024d68:	429c      	cmp	r4, r3
 8024d6a:	bf08      	it	eq
 8024d6c:	68ec      	ldreq	r4, [r5, #12]
 8024d6e:	e7e6      	b.n	8024d3e <__swsetup_r+0x1e>
 8024d70:	0758      	lsls	r0, r3, #29
 8024d72:	d512      	bpl.n	8024d9a <__swsetup_r+0x7a>
 8024d74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024d76:	b141      	cbz	r1, 8024d8a <__swsetup_r+0x6a>
 8024d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024d7c:	4299      	cmp	r1, r3
 8024d7e:	d002      	beq.n	8024d86 <__swsetup_r+0x66>
 8024d80:	4630      	mov	r0, r6
 8024d82:	f7fe ff1d 	bl	8023bc0 <_free_r>
 8024d86:	2300      	movs	r3, #0
 8024d88:	6363      	str	r3, [r4, #52]	; 0x34
 8024d8a:	89a3      	ldrh	r3, [r4, #12]
 8024d8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024d90:	81a3      	strh	r3, [r4, #12]
 8024d92:	2300      	movs	r3, #0
 8024d94:	6063      	str	r3, [r4, #4]
 8024d96:	6923      	ldr	r3, [r4, #16]
 8024d98:	6023      	str	r3, [r4, #0]
 8024d9a:	89a3      	ldrh	r3, [r4, #12]
 8024d9c:	f043 0308 	orr.w	r3, r3, #8
 8024da0:	81a3      	strh	r3, [r4, #12]
 8024da2:	6923      	ldr	r3, [r4, #16]
 8024da4:	b94b      	cbnz	r3, 8024dba <__swsetup_r+0x9a>
 8024da6:	89a3      	ldrh	r3, [r4, #12]
 8024da8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024db0:	d003      	beq.n	8024dba <__swsetup_r+0x9a>
 8024db2:	4621      	mov	r1, r4
 8024db4:	4630      	mov	r0, r6
 8024db6:	f000 f847 	bl	8024e48 <__smakebuf_r>
 8024dba:	89a0      	ldrh	r0, [r4, #12]
 8024dbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024dc0:	f010 0301 	ands.w	r3, r0, #1
 8024dc4:	d00a      	beq.n	8024ddc <__swsetup_r+0xbc>
 8024dc6:	2300      	movs	r3, #0
 8024dc8:	60a3      	str	r3, [r4, #8]
 8024dca:	6963      	ldr	r3, [r4, #20]
 8024dcc:	425b      	negs	r3, r3
 8024dce:	61a3      	str	r3, [r4, #24]
 8024dd0:	6923      	ldr	r3, [r4, #16]
 8024dd2:	b943      	cbnz	r3, 8024de6 <__swsetup_r+0xc6>
 8024dd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024dd8:	d1ba      	bne.n	8024d50 <__swsetup_r+0x30>
 8024dda:	bd70      	pop	{r4, r5, r6, pc}
 8024ddc:	0781      	lsls	r1, r0, #30
 8024dde:	bf58      	it	pl
 8024de0:	6963      	ldrpl	r3, [r4, #20]
 8024de2:	60a3      	str	r3, [r4, #8]
 8024de4:	e7f4      	b.n	8024dd0 <__swsetup_r+0xb0>
 8024de6:	2000      	movs	r0, #0
 8024de8:	e7f7      	b.n	8024dda <__swsetup_r+0xba>
 8024dea:	bf00      	nop
 8024dec:	2000003c 	.word	0x2000003c
 8024df0:	08028a58 	.word	0x08028a58
 8024df4:	08028a78 	.word	0x08028a78
 8024df8:	08028a38 	.word	0x08028a38

08024dfc <__swhatbuf_r>:
 8024dfc:	b570      	push	{r4, r5, r6, lr}
 8024dfe:	460e      	mov	r6, r1
 8024e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024e04:	2900      	cmp	r1, #0
 8024e06:	b096      	sub	sp, #88	; 0x58
 8024e08:	4614      	mov	r4, r2
 8024e0a:	461d      	mov	r5, r3
 8024e0c:	da08      	bge.n	8024e20 <__swhatbuf_r+0x24>
 8024e0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8024e12:	2200      	movs	r2, #0
 8024e14:	602a      	str	r2, [r5, #0]
 8024e16:	061a      	lsls	r2, r3, #24
 8024e18:	d410      	bmi.n	8024e3c <__swhatbuf_r+0x40>
 8024e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024e1e:	e00e      	b.n	8024e3e <__swhatbuf_r+0x42>
 8024e20:	466a      	mov	r2, sp
 8024e22:	f000 f881 	bl	8024f28 <_fstat_r>
 8024e26:	2800      	cmp	r0, #0
 8024e28:	dbf1      	blt.n	8024e0e <__swhatbuf_r+0x12>
 8024e2a:	9a01      	ldr	r2, [sp, #4]
 8024e2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024e30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024e34:	425a      	negs	r2, r3
 8024e36:	415a      	adcs	r2, r3
 8024e38:	602a      	str	r2, [r5, #0]
 8024e3a:	e7ee      	b.n	8024e1a <__swhatbuf_r+0x1e>
 8024e3c:	2340      	movs	r3, #64	; 0x40
 8024e3e:	2000      	movs	r0, #0
 8024e40:	6023      	str	r3, [r4, #0]
 8024e42:	b016      	add	sp, #88	; 0x58
 8024e44:	bd70      	pop	{r4, r5, r6, pc}
	...

08024e48 <__smakebuf_r>:
 8024e48:	898b      	ldrh	r3, [r1, #12]
 8024e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024e4c:	079d      	lsls	r5, r3, #30
 8024e4e:	4606      	mov	r6, r0
 8024e50:	460c      	mov	r4, r1
 8024e52:	d507      	bpl.n	8024e64 <__smakebuf_r+0x1c>
 8024e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024e58:	6023      	str	r3, [r4, #0]
 8024e5a:	6123      	str	r3, [r4, #16]
 8024e5c:	2301      	movs	r3, #1
 8024e5e:	6163      	str	r3, [r4, #20]
 8024e60:	b002      	add	sp, #8
 8024e62:	bd70      	pop	{r4, r5, r6, pc}
 8024e64:	ab01      	add	r3, sp, #4
 8024e66:	466a      	mov	r2, sp
 8024e68:	f7ff ffc8 	bl	8024dfc <__swhatbuf_r>
 8024e6c:	9900      	ldr	r1, [sp, #0]
 8024e6e:	4605      	mov	r5, r0
 8024e70:	4630      	mov	r0, r6
 8024e72:	f7fe ff11 	bl	8023c98 <_malloc_r>
 8024e76:	b948      	cbnz	r0, 8024e8c <__smakebuf_r+0x44>
 8024e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024e7c:	059a      	lsls	r2, r3, #22
 8024e7e:	d4ef      	bmi.n	8024e60 <__smakebuf_r+0x18>
 8024e80:	f023 0303 	bic.w	r3, r3, #3
 8024e84:	f043 0302 	orr.w	r3, r3, #2
 8024e88:	81a3      	strh	r3, [r4, #12]
 8024e8a:	e7e3      	b.n	8024e54 <__smakebuf_r+0xc>
 8024e8c:	4b0d      	ldr	r3, [pc, #52]	; (8024ec4 <__smakebuf_r+0x7c>)
 8024e8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8024e90:	89a3      	ldrh	r3, [r4, #12]
 8024e92:	6020      	str	r0, [r4, #0]
 8024e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024e98:	81a3      	strh	r3, [r4, #12]
 8024e9a:	9b00      	ldr	r3, [sp, #0]
 8024e9c:	6163      	str	r3, [r4, #20]
 8024e9e:	9b01      	ldr	r3, [sp, #4]
 8024ea0:	6120      	str	r0, [r4, #16]
 8024ea2:	b15b      	cbz	r3, 8024ebc <__smakebuf_r+0x74>
 8024ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024ea8:	4630      	mov	r0, r6
 8024eaa:	f000 f84f 	bl	8024f4c <_isatty_r>
 8024eae:	b128      	cbz	r0, 8024ebc <__smakebuf_r+0x74>
 8024eb0:	89a3      	ldrh	r3, [r4, #12]
 8024eb2:	f023 0303 	bic.w	r3, r3, #3
 8024eb6:	f043 0301 	orr.w	r3, r3, #1
 8024eba:	81a3      	strh	r3, [r4, #12]
 8024ebc:	89a0      	ldrh	r0, [r4, #12]
 8024ebe:	4305      	orrs	r5, r0
 8024ec0:	81a5      	strh	r5, [r4, #12]
 8024ec2:	e7cd      	b.n	8024e60 <__smakebuf_r+0x18>
 8024ec4:	0802392d 	.word	0x0802392d

08024ec8 <_realloc_r>:
 8024ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024ecc:	4680      	mov	r8, r0
 8024ece:	4614      	mov	r4, r2
 8024ed0:	460e      	mov	r6, r1
 8024ed2:	b921      	cbnz	r1, 8024ede <_realloc_r+0x16>
 8024ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024ed8:	4611      	mov	r1, r2
 8024eda:	f7fe bedd 	b.w	8023c98 <_malloc_r>
 8024ede:	b92a      	cbnz	r2, 8024eec <_realloc_r+0x24>
 8024ee0:	f7fe fe6e 	bl	8023bc0 <_free_r>
 8024ee4:	4625      	mov	r5, r4
 8024ee6:	4628      	mov	r0, r5
 8024ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024eec:	f000 f83e 	bl	8024f6c <_malloc_usable_size_r>
 8024ef0:	4284      	cmp	r4, r0
 8024ef2:	4607      	mov	r7, r0
 8024ef4:	d802      	bhi.n	8024efc <_realloc_r+0x34>
 8024ef6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8024efa:	d812      	bhi.n	8024f22 <_realloc_r+0x5a>
 8024efc:	4621      	mov	r1, r4
 8024efe:	4640      	mov	r0, r8
 8024f00:	f7fe feca 	bl	8023c98 <_malloc_r>
 8024f04:	4605      	mov	r5, r0
 8024f06:	2800      	cmp	r0, #0
 8024f08:	d0ed      	beq.n	8024ee6 <_realloc_r+0x1e>
 8024f0a:	42bc      	cmp	r4, r7
 8024f0c:	4622      	mov	r2, r4
 8024f0e:	4631      	mov	r1, r6
 8024f10:	bf28      	it	cs
 8024f12:	463a      	movcs	r2, r7
 8024f14:	f7fe fe24 	bl	8023b60 <memcpy>
 8024f18:	4631      	mov	r1, r6
 8024f1a:	4640      	mov	r0, r8
 8024f1c:	f7fe fe50 	bl	8023bc0 <_free_r>
 8024f20:	e7e1      	b.n	8024ee6 <_realloc_r+0x1e>
 8024f22:	4635      	mov	r5, r6
 8024f24:	e7df      	b.n	8024ee6 <_realloc_r+0x1e>
	...

08024f28 <_fstat_r>:
 8024f28:	b538      	push	{r3, r4, r5, lr}
 8024f2a:	4d07      	ldr	r5, [pc, #28]	; (8024f48 <_fstat_r+0x20>)
 8024f2c:	2300      	movs	r3, #0
 8024f2e:	4604      	mov	r4, r0
 8024f30:	4608      	mov	r0, r1
 8024f32:	4611      	mov	r1, r2
 8024f34:	602b      	str	r3, [r5, #0]
 8024f36:	f7e5 fcd8 	bl	800a8ea <_fstat>
 8024f3a:	1c43      	adds	r3, r0, #1
 8024f3c:	d102      	bne.n	8024f44 <_fstat_r+0x1c>
 8024f3e:	682b      	ldr	r3, [r5, #0]
 8024f40:	b103      	cbz	r3, 8024f44 <_fstat_r+0x1c>
 8024f42:	6023      	str	r3, [r4, #0]
 8024f44:	bd38      	pop	{r3, r4, r5, pc}
 8024f46:	bf00      	nop
 8024f48:	2000c108 	.word	0x2000c108

08024f4c <_isatty_r>:
 8024f4c:	b538      	push	{r3, r4, r5, lr}
 8024f4e:	4d06      	ldr	r5, [pc, #24]	; (8024f68 <_isatty_r+0x1c>)
 8024f50:	2300      	movs	r3, #0
 8024f52:	4604      	mov	r4, r0
 8024f54:	4608      	mov	r0, r1
 8024f56:	602b      	str	r3, [r5, #0]
 8024f58:	f7e5 fcd7 	bl	800a90a <_isatty>
 8024f5c:	1c43      	adds	r3, r0, #1
 8024f5e:	d102      	bne.n	8024f66 <_isatty_r+0x1a>
 8024f60:	682b      	ldr	r3, [r5, #0]
 8024f62:	b103      	cbz	r3, 8024f66 <_isatty_r+0x1a>
 8024f64:	6023      	str	r3, [r4, #0]
 8024f66:	bd38      	pop	{r3, r4, r5, pc}
 8024f68:	2000c108 	.word	0x2000c108

08024f6c <_malloc_usable_size_r>:
 8024f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024f70:	1f18      	subs	r0, r3, #4
 8024f72:	2b00      	cmp	r3, #0
 8024f74:	bfbc      	itt	lt
 8024f76:	580b      	ldrlt	r3, [r1, r0]
 8024f78:	18c0      	addlt	r0, r0, r3
 8024f7a:	4770      	bx	lr

08024f7c <_init>:
 8024f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f7e:	bf00      	nop
 8024f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024f82:	bc08      	pop	{r3}
 8024f84:	469e      	mov	lr, r3
 8024f86:	4770      	bx	lr

08024f88 <_fini>:
 8024f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f8a:	bf00      	nop
 8024f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024f8e:	bc08      	pop	{r3}
 8024f90:	469e      	mov	lr, r3
 8024f92:	4770      	bx	lr
