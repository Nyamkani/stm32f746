
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000237f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bd8  080239c8  080239c8  000339c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080275a0  080275a0  000401e0  2**0
                  CONTENTS
  4 .ARM          00000008  080275a0  080275a0  000375a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080275a8  080275a8  000401e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080275a8  080275a8  000375a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080275b0  080275b0  000375b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080275b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a0  08027658  000400a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000140  080276f8  00040140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000bfd8  200001e0  08027798  000401e0  2**3
                  ALLOC
 12 ._user_heap_stack 00006000  2000c1b8  08027798  0004c1b8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000401e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000a0085  00000000  00000000  00040210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000e0af  00000000  00000000  000e0295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004560  00000000  00000000  000ee348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004320  00000000  00000000  000f28a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003524d  00000000  00000000  000f6bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0002ce05  00000000  00000000  0012be15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158c1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00014074  00000000  00000000  00158c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080239ac 	.word	0x080239ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080239ac 	.word	0x080239ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <_Z6vprintPKcSt9__va_list>:

static uint8_t str1_;
static uint8_t str3_;

void vprint(const char *fmt, va_list argp)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b0b4      	sub	sp, #208	; 0xd0
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f021 fdc6 	bl	8022ad0 <vsiprintf>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	bfcc      	ite	gt
 8000f4a:	2301      	movgt	r3, #1
 8000f4c:	2300      	movle	r3, #0
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00c      	beq.n	8000f6e <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	  HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 10); // send message via UART
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff f959 	bl	8000210 <strlen>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	f107 0108 	add.w	r1, r7, #8
 8000f66:	230a      	movs	r3, #10
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <_Z6vprintPKcSt9__va_list+0x4c>)
 8000f6a:	f00c fd8f 	bl	800da8c <HAL_UART_Transmit>
    }
}
 8000f6e:	bf00      	nop
 8000f70:	37d0      	adds	r7, #208	; 0xd0
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200006ec 	.word	0x200006ec

08000f7c <_Z7DprintfPKcz>:

void Dprintf(const char *fmt, ...) // custom printf() function
{
 8000f7c:	b40f      	push	{r0, r1, r2, r3}
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	6938      	ldr	r0, [r7, #16]
 8000f8e:	f7ff ffcd 	bl	8000f2c <_Z6vprintPKcSt9__va_list>
    va_end(argp);
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f9c:	b004      	add	sp, #16
 8000f9e:	4770      	bx	lr

08000fa0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <HAL_UART_RxCpltCallback+0x50>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d110      	bne.n	8000fd4 <HAL_UART_RxCpltCallback+0x34>
	{
		HAL_NVIC_DisableIRQ(USART1_IRQn); //Rx Callback 함수 Disable
 8000fb2:	2025      	movs	r0, #37	; 0x25
 8000fb4:	f009 fbc8 	bl	800a748 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit_IT(&huart1, &str1_, sizeof(str1_));
 8000fb8:	2201      	movs	r2, #1
 8000fba:	490e      	ldr	r1, [pc, #56]	; (8000ff4 <HAL_UART_RxCpltCallback+0x54>)
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <HAL_UART_RxCpltCallback+0x58>)
 8000fbe:	f00c fead 	bl	800dd1c <HAL_UART_Transmit_IT>
		HAL_NVIC_EnableIRQ(USART1_IRQn);  //Rx callback 함수 enable
 8000fc2:	2025      	movs	r0, #37	; 0x25
 8000fc4:	f009 fbb2 	bl	800a72c <HAL_NVIC_EnableIRQ>
		HAL_UART_Receive_IT(&huart1, &str1_, sizeof(str1_));
 8000fc8:	2201      	movs	r2, #1
 8000fca:	490a      	ldr	r1, [pc, #40]	; (8000ff4 <HAL_UART_RxCpltCallback+0x54>)
 8000fcc:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <HAL_UART_RxCpltCallback+0x58>)
 8000fce:	f00c ff03 	bl	800ddd8 <HAL_UART_Receive_IT>
	{
		//HAL_NVIC_DisableIRQ(USART3_IRQn); //Rx Callback 함수 Disable
		//HAL_NVIC_EnableIRQ(USART3_IRQn);  //Rx callback 함수 enable
		HAL_UART_Receive_IT(&huart3, &str3_, 1);
	}
}
 8000fd2:	e009      	b.n	8000fe8 <HAL_UART_RxCpltCallback+0x48>
	else if(huart->Instance == USART3)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_UART_RxCpltCallback+0x5c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d104      	bne.n	8000fe8 <HAL_UART_RxCpltCallback+0x48>
		HAL_UART_Receive_IT(&huart3, &str3_, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4907      	ldr	r1, [pc, #28]	; (8001000 <HAL_UART_RxCpltCallback+0x60>)
 8000fe2:	4808      	ldr	r0, [pc, #32]	; (8001004 <HAL_UART_RxCpltCallback+0x64>)
 8000fe4:	f00c fef8 	bl	800ddd8 <HAL_UART_Receive_IT>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40011000 	.word	0x40011000
 8000ff4:	200001fc 	.word	0x200001fc
 8000ff8:	200006ec 	.word	0x200006ec
 8000ffc:	40004800 	.word	0x40004800
 8001000:	200001fd 	.word	0x200001fd
 8001004:	20000774 	.word	0x20000774

08001008 <_Z15Debug_Uart_Initv>:




void Debug_Uart_Init()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &str1_, 1); 	//for debugging
 800100c:	2201      	movs	r2, #1
 800100e:	4905      	ldr	r1, [pc, #20]	; (8001024 <_Z15Debug_Uart_Initv+0x1c>)
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <_Z15Debug_Uart_Initv+0x20>)
 8001012:	f00c fee1 	bl	800ddd8 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &str3_, 1);	//for Controlling
 8001016:	2201      	movs	r2, #1
 8001018:	4904      	ldr	r1, [pc, #16]	; (800102c <_Z15Debug_Uart_Initv+0x24>)
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <_Z15Debug_Uart_Initv+0x28>)
 800101c:	f00c fedc 	bl	800ddd8 <HAL_UART_Receive_IT>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200001fc 	.word	0x200001fc
 8001028:	200006ec 	.word	0x200006ec
 800102c:	200001fd 	.word	0x200001fd
 8001030:	20000774 	.word	0x20000774

08001034 <_Z10DebugDrivev>:
BG95 bg95test(&hcan1);


//for uart1 debug
void DebugDrive()
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
	int cmd = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
	int cmd1 = str1_;
 800103e:	4b37      	ldr	r3, [pc, #220]	; (800111c <_Z10DebugDrivev+0xe8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	60bb      	str	r3, [r7, #8]
	int cmd2 = str3_;
 8001044:	4b36      	ldr	r3, [pc, #216]	; (8001120 <_Z10DebugDrivev+0xec>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	607b      	str	r3, [r7, #4]
	int cmd3 = char_ethernet;
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <_Z10DebugDrivev+0xf0>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	603b      	str	r3, [r7, #0]



	if (cmd1 != 0) cmd = cmd1;
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <_Z10DebugDrivev+0x28>
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e00a      	b.n	8001072 <_Z10DebugDrivev+0x3e>
	else if (cmd2 !=0) cmd = cmd2;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <_Z10DebugDrivev+0x34>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	e004      	b.n	8001072 <_Z10DebugDrivev+0x3e>
	else if (cmd3 !=0) cmd = cmd3;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <_Z10DebugDrivev+0x3e>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	60fb      	str	r3, [r7, #12]

	switch(cmd)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3b31      	subs	r3, #49	; 0x31
 8001076:	2b07      	cmp	r3, #7
 8001078:	d841      	bhi.n	80010fe <_Z10DebugDrivev+0xca>
 800107a:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <_Z10DebugDrivev+0x4c>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	080010a1 	.word	0x080010a1
 8001084:	080010af 	.word	0x080010af
 8001088:	080010bd 	.word	0x080010bd
 800108c:	080010cb 	.word	0x080010cb
 8001090:	080010d9 	.word	0x080010d9
 8001094:	080010e7 	.word	0x080010e7
 8001098:	080010ef 	.word	0x080010ef
 800109c:	080010f7 	.word	0x080010f7
	{
		case '1': SensorManager::GetInstance().PGV100DirStraight(); /*function 1*/ break;
 80010a0:	f005 fbda 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 ff64 	bl	8006f74 <_ZN13SensorManager17PGV100DirStraightEv>
 80010ac:	e028      	b.n	8001100 <_Z10DebugDrivev+0xcc>
		case '2': SensorManager::GetInstance().PGV100DirLeft();/*function 2*/ break;
 80010ae:	f005 fbd3 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 ff70 	bl	8006f9a <_ZN13SensorManager13PGV100DirLeftEv>
 80010ba:	e021      	b.n	8001100 <_Z10DebugDrivev+0xcc>
		case '3': SensorManager::GetInstance().PGV100DirRight();/*function 2*/ break;
 80010bc:	f005 fbcc 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f005 ff7c 	bl	8006fc0 <_ZN13SensorManager14PGV100DirRightEv>
 80010c8:	e01a      	b.n	8001100 <_Z10DebugDrivev+0xcc>
		case '4': SensorManager::GetInstance().PGV100Drive(); break;
 80010ca:	f005 fbc5 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f005 fe8a 	bl	8006dea <_ZN13SensorManager11PGV100DriveEv>
 80010d6:	e013      	b.n	8001100 <_Z10DebugDrivev+0xcc>
		case '5': SensorManager::GetInstance().CommonSensorDrive(); break;
 80010d8:	f005 fbbe 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 80010dc:	4603      	mov	r3, r0
 80010de:	4618      	mov	r0, r3
 80010e0:	f005 fd76 	bl	8006bd0 <_ZN13SensorManager17CommonSensorDriveEv>
 80010e4:	e00c      	b.n	8001100 <_Z10DebugDrivev+0xcc>
		//can test
		case '6': bg95test.Initialization(); break;
 80010e6:	4810      	ldr	r0, [pc, #64]	; (8001128 <_Z10DebugDrivev+0xf4>)
 80010e8:	f001 f8d8 	bl	800229c <_ZN4BG9514InitializationEv>
 80010ec:	e008      	b.n	8001100 <_Z10DebugDrivev+0xcc>
		case '7': bg95test.SetPositionCommand(); break;
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <_Z10DebugDrivev+0xf4>)
 80010f0:	f001 f99b 	bl	800242a <_ZN4BG9518SetPositionCommandEv>
 80010f4:	e004      	b.n	8001100 <_Z10DebugDrivev+0xcc>
		case '8': bg95test.Drive(); break;
 80010f6:	480c      	ldr	r0, [pc, #48]	; (8001128 <_Z10DebugDrivev+0xf4>)
 80010f8:	f001 f8db 	bl	80022b2 <_ZN4BG955DriveEv>
 80010fc:	e000      	b.n	8001100 <_Z10DebugDrivev+0xcc>

		default: break;
 80010fe:	bf00      	nop
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <_Z10DebugDrivev+0xe8>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <_Z10DebugDrivev+0xec>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <_Z10DebugDrivev+0xf0>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
	}
	memset(&str1_, '\0', sizeof(str1_));
	memset(&str3_, '\0', sizeof(str3_));
	memset(&char_ethernet, '\0', sizeof(char_ethernet));
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001fc 	.word	0x200001fc
 8001120:	200001fd 	.word	0x200001fd
 8001124:	200003a4 	.word	0x200003a4
 8001128:	20000200 	.word	0x20000200

0800112c <_Z41__static_initialization_and_destruction_0ii>:

		HAL_Delay(10);

	}
	*/
}
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001142:	4293      	cmp	r3, r2
 8001144:	d103      	bne.n	800114e <_Z41__static_initialization_and_destruction_0ii+0x22>
BG95 bg95test(&hcan1);
 8001146:	4909      	ldr	r1, [pc, #36]	; (800116c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800114a:	f000 ff1f 	bl	8001f8c <_ZN4BG95C1EP19__CAN_HandleTypeDef>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d107      	bne.n	8001164 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115a:	4293      	cmp	r3, r2
 800115c:	d102      	bne.n	8001164 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800115e:	4804      	ldr	r0, [pc, #16]	; (8001170 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001160:	f000 ff40 	bl	8001fe4 <_ZN4BG95D1Ev>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000540 	.word	0x20000540
 8001170:	20000200 	.word	0x20000200

08001174 <_GLOBAL__sub_I__Z6vprintPKcSt9__va_list>:
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
 8001178:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff ffd5 	bl	800112c <_Z41__static_initialization_and_destruction_0ii>
 8001182:	bd80      	pop	{r7, pc}

08001184 <_GLOBAL__sub_D__Z6vprintPKcSt9__va_list>:
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
 8001188:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff ffcd 	bl	800112c <_Z41__static_initialization_and_destruction_0ii>
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>:
#include "common_sensor.h"


CommonSensor::CommonSensor(){}

CommonSensor::CommonSensor(uint16_t index, bool active_type, uint8_t max_filter_cnt,
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	4608      	mov	r0, r1
 800119e:	4611      	mov	r1, r2
 80011a0:	461a      	mov	r2, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	807b      	strh	r3, [r7, #2]
 80011a6:	460b      	mov	r3, r1
 80011a8:	707b      	strb	r3, [r7, #1]
 80011aa:	4613      	mov	r3, r2
 80011ac:	703b      	strb	r3, [r7, #0]
		GPIO_TypeDef* GPIOx, uint32_t PinMask)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2205      	movs	r2, #5
 80011b8:	731a      	strb	r2, [r3, #12]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	735a      	strb	r2, [r3, #13]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	739a      	strb	r2, [r3, #14]
{
	this->index_ = index;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	887a      	ldrh	r2, [r7, #2]
 80011ca:	801a      	strh	r2, [r3, #0]
	this->active_type_ = active_type;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	787a      	ldrb	r2, [r7, #1]
 80011d0:	709a      	strb	r2, [r3, #2]
	this->max_filter_cnt_ = max_filter_cnt;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	783a      	ldrb	r2, [r7, #0]
 80011d6:	731a      	strb	r2, [r3, #12]
	this->GPIOx_ = GPIOx;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	605a      	str	r2, [r3, #4]
	this->PinMask_ = PinMask;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	609a      	str	r2, [r3, #8]
}
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <_ZN12CommonSensorD1Ev>:

CommonSensor::~CommonSensor(){}
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <_ZNK12CommonSensor13GetSensorDataEv>:


bool CommonSensor::GetSensorData() const {return this->output_;}
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	78db      	ldrb	r3, [r3, #3]
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <_ZNK12CommonSensor14GetSensorIndexEv>:

uint16_t CommonSensor::GetSensorIndex() const {return this->index_;}
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <_ZN12CommonSensor16CheckSensorValueEv>:


//use hal or ll function
bool CommonSensor::CheckSensorValue()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(this->GPIOx_, this->PinMask_) == 1) (this->state) = 1;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4619      	mov	r1, r3
 800124c:	4610      	mov	r0, r2
 800124e:	f00a fef5 	bl	800c03c <HAL_GPIO_ReadPin>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	bf0c      	ite	eq
 8001258:	2301      	moveq	r3, #1
 800125a:	2300      	movne	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <_ZN12CommonSensor16CheckSensorValueEv+0x32>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	739a      	strb	r2, [r3, #14]
 8001268:	e002      	b.n	8001270 <_ZN12CommonSensor16CheckSensorValueEv+0x38>
	else (this->state) = 0;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	739a      	strb	r2, [r3, #14]

	if(!active_type_) this->state = !(this->state);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	789b      	ldrb	r3, [r3, #2]
 8001274:	f083 0301 	eor.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <_ZN12CommonSensor16CheckSensorValueEv+0x54>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7b9b      	ldrb	r3, [r3, #14]
 8001282:	f083 0301 	eor.w	r3, r3, #1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	739a      	strb	r2, [r3, #14]
	return this->state;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7b9b      	ldrb	r3, [r3, #14]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <_ZN12CommonSensor14IsInfoFilteredEv>:

bool CommonSensor::IsInfoFiltered()
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	return (this->now_filter_cnt_>= this->max_filter_cnt_);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7b5a      	ldrb	r2, [r3, #13]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7b1b      	ldrb	r3, [r3, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	bf2c      	ite	cs
 80012ac:	2301      	movcs	r3, #1
 80012ae:	2300      	movcc	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_ZN12CommonSensor13FilterCountUpEv>:

void CommonSensor::FilterCountUp()
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
	if(this->now_filter_cnt_< this->max_filter_cnt_) this->now_filter_cnt_++;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7b5a      	ldrb	r2, [r3, #13]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7b1b      	ldrb	r3, [r3, #12]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d205      	bcs.n	80012de <_ZN12CommonSensor13FilterCountUpEv+0x20>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7b5b      	ldrb	r3, [r3, #13]
 80012d6:	3301      	adds	r3, #1
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	735a      	strb	r2, [r3, #13]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <_ZN12CommonSensor19FilterStatusChangedEv>:

void CommonSensor::FilterStatusChanged(){this->now_filter_cnt_ = 0;}
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	735a      	strb	r2, [r3, #13]
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_ZN12CommonSensor5DriveEv>:


bool CommonSensor::Drive()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	bool prev_val = this->state;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7b9b      	ldrb	r3, [r3, #14]
 8001310:	73fb      	strb	r3, [r7, #15]
	bool now_val = CheckSensorValue();
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ff90 	bl	8001238 <_ZN12CommonSensor16CheckSensorValueEv>
 8001318:	4603      	mov	r3, r0
 800131a:	73bb      	strb	r3, [r7, #14]


	//1. Check Error status
	if(prev_val != now_val)
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	7bbb      	ldrb	r3, [r7, #14]
 8001320:	429a      	cmp	r2, r3
 8001322:	d008      	beq.n	8001336 <_ZN12CommonSensor5DriveEv+0x32>
	{
		FilterStatusChanged();
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ffe0 	bl	80012ea <_ZN12CommonSensor19FilterStatusChangedEv>
		this->output_ = prev_val;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	70da      	strb	r2, [r3, #3]
		return this->output_;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	78db      	ldrb	r3, [r3, #3]
 8001334:	e016      	b.n	8001364 <_ZN12CommonSensor5DriveEv+0x60>
	}

	//2. wait until state is stabled(normal or error)
	if(!IsInfoFiltered())
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffae 	bl	8001298 <_ZN12CommonSensor14IsInfoFilteredEv>
 800133c:	4603      	mov	r3, r0
 800133e:	f083 0301 	eor.w	r3, r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <_ZN12CommonSensor5DriveEv+0x56>
	{
		FilterCountUp();
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ffb8 	bl	80012be <_ZN12CommonSensor13FilterCountUpEv>
		this->output_ = prev_val;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	70da      	strb	r2, [r3, #3]
		return this->output_;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	78db      	ldrb	r3, [r3, #3]
 8001358:	e004      	b.n	8001364 <_ZN12CommonSensor5DriveEv+0x60>
	}

	this->output_ = now_val;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7bba      	ldrb	r2, [r7, #14]
 800135e:	70da      	strb	r2, [r3, #3]
	return this->output_;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	78db      	ldrb	r3, [r3, #3]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_sbrk_r>:
    static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit;  // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <_sbrk_r+0x9c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10e      	bne.n	800139c <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 800137e:	4a23      	ldr	r2, [pc, #140]	; (800140c <_sbrk_r+0xa0>)
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <_sbrk_r+0xa4>)
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001388:	4a22      	ldr	r2, [pc, #136]	; (8001414 <_sbrk_r+0xa8>)
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4a1f      	ldr	r2, [pc, #124]	; (800140c <_sbrk_r+0xa0>)
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <_sbrk_r+0xa4>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001396:	461a      	mov	r2, r3
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <_sbrk_r+0x9c>)
 800139a:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 800139c:	f011 fa3e 	bl	801281c <xTaskGetSchedulerState>
 80013a0:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <_sbrk_r+0x3e>
 80013a6:	466b      	mov	r3, sp
 80013a8:	e000      	b.n	80013ac <_sbrk_r+0x40>
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 80013ac:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 80013ae:	f010 fe5b 	bl	8012068 <vTaskSuspendAll>
    char *previousHeapEnd = currentHeapEnd;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <_sbrk_r+0xb0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	60bb      	str	r3, [r7, #8]
    if (currentHeapEnd + incr > limit) {
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <_sbrk_r+0xb0>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d207      	bcs.n	80013d6 <_sbrk_r+0x6a>
            // If you want to alert debugger or halt...
            // WARNING: brkpt instruction may prevent watchdog operation...
            while(1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	220c      	movs	r2, #12
 80013ca:	601a      	str	r2, [r3, #0]
            DRN_EXIT_CRITICAL_SECTION(usis);
 80013cc:	f010 fe5a 	bl	8012084 <xTaskResumeAll>
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d4:	e014      	b.n	8001400 <_sbrk_r+0x94>
    }
    // 'incr' of memory is available: update accounting and return it.
    currentHeapEnd += incr;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <_sbrk_r+0xb0>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	4413      	add	r3, r2
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <_sbrk_r+0xb0>)
 80013e0:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <_sbrk_r+0xa8>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <_sbrk_r+0xa8>)
 80013ec:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <_sbrk_r+0xb4>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <_sbrk_r+0xb4>)
 80013f8:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 80013fa:	f010 fe43 	bl	8012084 <xTaskResumeAll>
    return (char *) previousHeapEnd;
 80013fe:	68bb      	ldr	r3, [r7, #8]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000264 	.word	0x20000264
 800140c:	20050000 	.word	0x20050000
 8001410:	2000c1b8 	.word	0x2000c1b8
 8001414:	20000260 	.word	0x20000260
 8001418:	2004fe00 	.word	0x2004fe00
 800141c:	20000000 	.word	0x20000000
 8001420:	20000268 	.word	0x20000268

08001424 <__malloc_lock>:
char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)     {
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
{
uint32_t ulCurrentInterrupt;
BaseType_t xReturn;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800142c:	f3ef 8305 	mrs	r3, IPSR
 8001430:	613b      	str	r3, [r7, #16]

	if( ulCurrentInterrupt == 0 )
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <__malloc_lock+0x1a>
	{
		xReturn = pdFALSE;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	e001      	b.n	8001442 <__malloc_lock+0x1e>
	}
	else
	{
		xReturn = pdTRUE;
 800143e:	2301      	movs	r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8001442:	68fb      	ldr	r3, [r7, #12]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00c      	beq.n	800146e <__malloc_lock+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001458:	b672      	cpsid	i
 800145a:	f383 8811 	msr	BASEPRI, r3
 800145e:	f3bf 8f6f 	isb	sy
 8001462:	f3bf 8f4f 	dsb	sy
 8001466:	b662      	cpsie	i
 8001468:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800146a:	bf00      	nop
 800146c:	e7fe      	b.n	800146c <__malloc_lock+0x48>
    vTaskSuspendAll();
 800146e:	f010 fdfb 	bl	8012068 <vTaskSuspendAll>
  #endif
};
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <__malloc_unlock>:
void __malloc_unlock(struct _reent *r)   {
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    (void)xTaskResumeAll();
 8001482:	f010 fdff 	bl	8012084 <xTaskResumeAll>
  #endif
};
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f021 f85a 	bl	8022550 <malloc>
 800149c:	4603      	mov	r3, r0
 800149e:	60fb      	str	r3, [r7, #12]
    return p;
 80014a0:	68fb      	ldr	r3, [r7, #12]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
    free(pv);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f021 f854 	bl	8022560 <free>
};
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_ZL16TcpServerInitSeqv>:

/**** Send RESPONSE every time the client sends some data ******/


static int TcpServerInitSeq()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	err_t err;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2010      	movs	r0, #16
 80014cc:	f011 fe40 	bl	8013150 <netconn_new_with_proto_and_callback>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a14      	ldr	r2, [pc, #80]	; (8001524 <_ZL16TcpServerInitSeqv+0x64>)
 80014d4:	6013      	str	r3, [r2, #0]

	if (conn == NULL)
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <_ZL16TcpServerInitSeqv+0x64>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d107      	bne.n	80014ee <_ZL16TcpServerInitSeqv+0x2e>
	{
		netconn_delete(conn);
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <_ZL16TcpServerInitSeqv+0x64>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f011 fed2 	bl	801328c <netconn_delete>
		return -1;
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ec:	e016      	b.n	800151c <_ZL16TcpServerInitSeqv+0x5c>
	}

	/* Bind connection to the port number 8. */
	err = netconn_bind(conn, IP_ADDR_ANY, ServerPort);
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <_ZL16TcpServerInitSeqv+0x64>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	220a      	movs	r2, #10
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <_ZL16TcpServerInitSeqv+0x68>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f011 fee4 	bl	80132c4 <netconn_bind>
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]

	if (err != ERR_OK) return -1;
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <_ZL16TcpServerInitSeqv+0x4e>
 8001508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800150c:	e006      	b.n	800151c <_ZL16TcpServerInitSeqv+0x5c>

	/* Tell connection to go into listening mode. */
	netconn_listen(conn);
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <_ZL16TcpServerInitSeqv+0x64>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	21ff      	movs	r1, #255	; 0xff
 8001514:	4618      	mov	r0, r3
 8001516:	f011 ff45 	bl	80133a4 <netconn_listen_with_backlog>

	/*Successfully Initialized*/
	return 0;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000026c 	.word	0x2000026c
 8001528:	08027398 	.word	0x08027398

0800152c <_ZL17TcpServerDriveSeqv>:

static int TcpServerDriveSeq()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af02      	add	r7, sp, #8
	err_t accept_err;

	/* Grab new connection. */
	accept_err = netconn_accept(conn, &newconn);
 8001532:	4b34      	ldr	r3, [pc, #208]	; (8001604 <_ZL17TcpServerDriveSeqv+0xd8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4934      	ldr	r1, [pc, #208]	; (8001608 <_ZL17TcpServerDriveSeqv+0xdc>)
 8001538:	4618      	mov	r0, r3
 800153a:	f011 ff5f 	bl	80133fc <netconn_accept>
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]

	/* Process the new connection. */
	if(accept_err == ERR_OK)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d157      	bne.n	80015fa <_ZL17TcpServerDriveSeqv+0xce>
	{
		/* receive the data from the client */
		while (netconn_recv(newconn, &buf) == ERR_OK)
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <_ZL17TcpServerDriveSeqv+0xdc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	492f      	ldr	r1, [pc, #188]	; (800160c <_ZL17TcpServerDriveSeqv+0xe0>)
 8001550:	4618      	mov	r0, r3
 8001552:	f012 f95b 	bl	801380c <netconn_recv>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf0c      	ite	eq
 800155c:	2301      	moveq	r3, #1
 800155e:	2300      	movne	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d03f      	beq.n	80015e6 <_ZL17TcpServerDriveSeqv+0xba>
		{
			/* If there is some data remaining to be sent, the following process will continue */
			do
			{
				strncpy (msg, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 8001566:	4b29      	ldr	r3, [pc, #164]	; (800160c <_ZL17TcpServerDriveSeqv+0xe0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6859      	ldr	r1, [r3, #4]
 800156e:	4b27      	ldr	r3, [pc, #156]	; (800160c <_ZL17TcpServerDriveSeqv+0xe0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	895b      	ldrh	r3, [r3, #10]
 8001576:	461a      	mov	r2, r3
 8001578:	4825      	ldr	r0, [pc, #148]	; (8001610 <_ZL17TcpServerDriveSeqv+0xe4>)
 800157a:	f021 fa80 	bl	8022a7e <strncpy>

				//for test debug
				strncpy (char_ethernet, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <_ZL17TcpServerDriveSeqv+0xe0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6859      	ldr	r1, [r3, #4]
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <_ZL17TcpServerDriveSeqv+0xe0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	895b      	ldrh	r3, [r3, #10]
 800158e:	461a      	mov	r2, r3
 8001590:	4820      	ldr	r0, [pc, #128]	; (8001614 <_ZL17TcpServerDriveSeqv+0xe8>)
 8001592:	f021 fa74 	bl	8022a7e <strncpy>


				*/
				// Or modify the message received, so that we can send it back to the client
				//response
				int len = sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 8001596:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <_ZL17TcpServerDriveSeqv+0xe4>)
 8001598:	491f      	ldr	r1, [pc, #124]	; (8001618 <_ZL17TcpServerDriveSeqv+0xec>)
 800159a:	4820      	ldr	r0, [pc, #128]	; (800161c <_ZL17TcpServerDriveSeqv+0xf0>)
 800159c:	f021 fa0c 	bl	80229b8 <siprintf>
 80015a0:	6038      	str	r0, [r7, #0]

				netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <_ZL17TcpServerDriveSeqv+0xdc>)
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	2300      	movs	r3, #0
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2301      	movs	r3, #1
 80015ae:	491b      	ldr	r1, [pc, #108]	; (800161c <_ZL17TcpServerDriveSeqv+0xf0>)
 80015b0:	f012 f9d4 	bl	801395c <netconn_write_partly>
				memset (msg, '\0', 100);  // clear the buffer
 80015b4:	2264      	movs	r2, #100	; 0x64
 80015b6:	2100      	movs	r1, #0
 80015b8:	4815      	ldr	r0, [pc, #84]	; (8001610 <_ZL17TcpServerDriveSeqv+0xe4>)
 80015ba:	f021 f811 	bl	80225e0 <memset>
			}
			while (netbuf_next(buf) >0);
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <_ZL17TcpServerDriveSeqv+0xe0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f014 f8e2 	bl	801578c <netbuf_next>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bfcc      	ite	gt
 80015ce:	2301      	movgt	r3, #1
 80015d0:	2300      	movle	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d000      	beq.n	80015da <_ZL17TcpServerDriveSeqv+0xae>
			do
 80015d8:	e7c5      	b.n	8001566 <_ZL17TcpServerDriveSeqv+0x3a>

			netbuf_delete(buf);
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <_ZL17TcpServerDriveSeqv+0xe0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f014 f86a 	bl	80156b8 <netbuf_delete>
		while (netconn_recv(newconn, &buf) == ERR_OK)
 80015e4:	e7b1      	b.n	800154a <_ZL17TcpServerDriveSeqv+0x1e>
		}
		/* Close connection and discard connection identifier. */
		netconn_close(newconn);
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <_ZL17TcpServerDriveSeqv+0xdc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f012 fab8 	bl	8013b60 <netconn_close>
		netconn_delete(newconn);
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <_ZL17TcpServerDriveSeqv+0xdc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f011 fe49 	bl	801328c <netconn_delete>
	}
}
 80015fa:	bf00      	nop
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000026c 	.word	0x2000026c
 8001608:	20000270 	.word	0x20000270
 800160c:	20000274 	.word	0x20000274
 8001610:	20000278 	.word	0x20000278
 8001614:	200003a4 	.word	0x200003a4
 8001618:	080239c8 	.word	0x080239c8
 800161c:	200002dc 	.word	0x200002dc

08001620 <_ZL15TcpServerThreadPv>:




static void TcpServerThread(void *arg)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	TcpServerInitSeq();
 8001628:	f7ff ff4a 	bl	80014c0 <_ZL16TcpServerInitSeqv>

	TcpServerDriveSeq();
 800162c:	f7ff ff7e 	bl	800152c <_ZL17TcpServerDriveSeqv>

	//if out of TcpServerDriveSeq(); it means error occur
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_Z13TcpServerInitv>:



void TcpServerInit(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af02      	add	r7, sp, #8
  sys_thread_new("TcpServerThread", TcpServerThread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 800163e:	2300      	movs	r3, #0
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001646:	2200      	movs	r2, #0
 8001648:	4903      	ldr	r1, [pc, #12]	; (8001658 <_Z13TcpServerInitv+0x20>)
 800164a:	4804      	ldr	r0, [pc, #16]	; (800165c <_Z13TcpServerInitv+0x24>)
 800164c:	f01f fdf6 	bl	802123c <sys_thread_new>
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	08001621 	.word	0x08001621
 800165c:	080239e8 	.word	0x080239e8

08001660 <_Z7udpsendPc>:
/*------------------------------------Client-----------------------------------------*/
/*-----------------------------------------------------------------------------------*/

/*-------UDP Send function to send the data to the server-------------*/
void udpsend (char *data)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	buf = netbuf_new();   // Create a new netbuf
 8001668:	f014 f812 	bl	8015690 <netbuf_new>
 800166c:	4603      	mov	r3, r0
 800166e:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <_Z7udpsendPc+0x4c>)
 8001670:	6013      	str	r3, [r2, #0]
	netbuf_ref(buf, data, strlen(data));  // refer the netbuf to the data to be sent
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <_Z7udpsendPc+0x4c>)
 8001674:	681c      	ldr	r4, [r3, #0]
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7fe fdca 	bl	8000210 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	b29b      	uxth	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4620      	mov	r0, r4
 8001686:	f014 f837 	bl	80156f8 <netbuf_ref>
	netconn_send(conn,buf);  // send the netbuf to the client
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <_Z7udpsendPc+0x50>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <_Z7udpsendPc+0x4c>)
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f012 f933 	bl	8013900 <netconn_send>
	netbuf_delete(buf);  // delete the netbuf
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <_Z7udpsendPc+0x4c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f014 f80a 	bl	80156b8 <netbuf_delete>
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}
 80016ac:	2000040c 	.word	0x2000040c
 80016b0:	20000408 	.word	0x20000408

080016b4 <_ZL15UdpClientThreadPv>:



static void UdpClientThread(void *arg)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	err_t err, recv_err;
	ip_addr_t dest_addr;
	/* Create a new connection identifier */
	conn = netconn_new(NETCONN_UDP);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	2020      	movs	r0, #32
 80016c2:	f011 fd45 	bl	8013150 <netconn_new_with_proto_and_callback>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a2d      	ldr	r2, [pc, #180]	; (8001780 <_ZL15UdpClientThreadPv+0xcc>)
 80016ca:	6013      	str	r3, [r2, #0]

	if (conn!= NULL)
 80016cc:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <_ZL15UdpClientThreadPv+0xcc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d04c      	beq.n	800176e <_ZL15UdpClientThreadPv+0xba>
	{
		/* Bind connection to the port 7 */
		err = netconn_bind(conn, IP_ADDR_ANY, ClientPort);
 80016d4:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <_ZL15UdpClientThreadPv+0xcc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2208      	movs	r2, #8
 80016da:	492a      	ldr	r1, [pc, #168]	; (8001784 <_ZL15UdpClientThreadPv+0xd0>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f011 fdf1 	bl	80132c4 <netconn_bind>
 80016e2:	4603      	mov	r3, r0
 80016e4:	73fb      	strb	r3, [r7, #15]
		if (err == ERR_OK)
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d144      	bne.n	8001778 <_ZL15UdpClientThreadPv+0xc4>
		{
			/* The desination IP adress of the computer */
			IP_ADDR4(&dest_addr, 192, 168, 1, 25);
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <_ZL15UdpClientThreadPv+0xd4>)
 80016f0:	60bb      	str	r3, [r7, #8]
			/* connect to the destination (server) at port 8 */
			err = netconn_connect(conn, &dest_addr, ServerPort);
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <_ZL15UdpClientThreadPv+0xcc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f107 0108 	add.w	r1, r7, #8
 80016fa:	2207      	movs	r2, #7
 80016fc:	4618      	mov	r0, r3
 80016fe:	f011 fe19 	bl	8013334 <netconn_connect>
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]
			if (err == ERR_OK)
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d134      	bne.n	8001778 <_ZL15UdpClientThreadPv+0xc4>
			{
				/* Got into infinite loop after initialisation */
				for (;;)
				{
						/* Receive data from the server */
						recv_err = netconn_recv(conn, &rxbuf);
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <_ZL15UdpClientThreadPv+0xcc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	491e      	ldr	r1, [pc, #120]	; (800178c <_ZL15UdpClientThreadPv+0xd8>)
 8001714:	4618      	mov	r0, r3
 8001716:	f012 f879 	bl	801380c <netconn_recv>
 800171a:	4603      	mov	r3, r0
 800171c:	73bb      	strb	r3, [r7, #14]
						if (recv_err == ERR_OK)
 800171e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f3      	bne.n	800170e <_ZL15UdpClientThreadPv+0x5a>
						{
							strncpy (msg, (char *) rxbuf->p->payload, rxbuf->p->len);  // get the message from the client
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <_ZL15UdpClientThreadPv+0xd8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <_ZL15UdpClientThreadPv+0xd8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	895b      	ldrh	r3, [r3, #10]
 8001736:	461a      	mov	r2, r3
 8001738:	4815      	ldr	r0, [pc, #84]	; (8001790 <_ZL15UdpClientThreadPv+0xdc>)
 800173a:	f021 f9a0 	bl	8022a7e <strncpy>
							/* copy the data into our buffer (smsg) */
							sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 800173e:	4a14      	ldr	r2, [pc, #80]	; (8001790 <_ZL15UdpClientThreadPv+0xdc>)
 8001740:	4914      	ldr	r1, [pc, #80]	; (8001794 <_ZL15UdpClientThreadPv+0xe0>)
 8001742:	4815      	ldr	r0, [pc, #84]	; (8001798 <_ZL15UdpClientThreadPv+0xe4>)
 8001744:	f021 f938 	bl	80229b8 <siprintf>
							udpsend(smsg);  // send the message to the server
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <_ZL15UdpClientThreadPv+0xe4>)
 800174a:	f7ff ff89 	bl	8001660 <_Z7udpsendPc>
							netbuf_delete(rxbuf);  // delete the netbuf
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <_ZL15UdpClientThreadPv+0xd8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f013 ffb0 	bl	80156b8 <netbuf_delete>
							memset(msg, '\0', sizeof(msg));
 8001758:	2264      	movs	r2, #100	; 0x64
 800175a:	2100      	movs	r1, #0
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <_ZL15UdpClientThreadPv+0xdc>)
 800175e:	f020 ff3f 	bl	80225e0 <memset>
							memset(msg, '\0', sizeof(smsg));
 8001762:	22c8      	movs	r2, #200	; 0xc8
 8001764:	2100      	movs	r1, #0
 8001766:	480a      	ldr	r0, [pc, #40]	; (8001790 <_ZL15UdpClientThreadPv+0xdc>)
 8001768:	f020 ff3a 	bl	80225e0 <memset>
						recv_err = netconn_recv(conn, &rxbuf);
 800176c:	e7cf      	b.n	800170e <_ZL15UdpClientThreadPv+0x5a>
		}
	}

	else
	{
		netconn_delete(conn);
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <_ZL15UdpClientThreadPv+0xcc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f011 fd8a 	bl	801328c <netconn_delete>
	}
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000408 	.word	0x20000408
 8001784:	08027398 	.word	0x08027398
 8001788:	1901a8c0 	.word	0x1901a8c0
 800178c:	20000410 	.word	0x20000410
 8001790:	20000414 	.word	0x20000414
 8001794:	08023a58 	.word	0x08023a58
 8001798:	20000478 	.word	0x20000478

0800179c <_Z13UdpClientInitv>:
	}
}
*/

void UdpClientInit(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af02      	add	r7, sp, #8
	//sys_thread_new("udpsend_thread", udpsend_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
	sys_thread_new("UdpClientThread", UdpClientThread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 80017a2:	2300      	movs	r3, #0
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017aa:	2200      	movs	r2, #0
 80017ac:	4903      	ldr	r1, [pc, #12]	; (80017bc <_Z13UdpClientInitv+0x20>)
 80017ae:	4804      	ldr	r0, [pc, #16]	; (80017c0 <_Z13UdpClientInitv+0x24>)
 80017b0:	f01f fd44 	bl	802123c <sys_thread_new>
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	080016b5 	.word	0x080016b5
 80017c0:	08023a78 	.word	0x08023a78

080017c4 <init_stm32f746>:




void init_stm32f746()
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80017c8:	f000 faa8 	bl	8001d1c <MX_GPIO_Init>
	MX_CAN1_Init();
 80017cc:	f000 f88c 	bl	80018e8 <MX_CAN1_Init>
	MX_FMC_Init();
 80017d0:	f000 fa3c 	bl	8001c4c <MX_FMC_Init>
	MX_UART4_Init();
 80017d4:	f000 f932 	bl	8001a3c <MX_UART4_Init>
	MX_USART1_UART_Init();
 80017d8:	f000 f99a 	bl	8001b10 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80017dc:	f000 f9cc 	bl	8001b78 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 80017e0:	f000 f9fe 	bl	8001be0 <MX_USART6_UART_Init>
	MX_UART5_Init();
 80017e4:	f000 f95e 	bl	8001aa4 <MX_UART5_Init>
	MX_TIM7_Init();
 80017e8:	f000 f8e8 	bl	80019bc <MX_TIM7_Init>
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b094      	sub	sp, #80	; 0x50
 80017f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f6:	f107 0320 	add.w	r3, r7, #32
 80017fa:	2230      	movs	r2, #48	; 0x30
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f020 feee 	bl	80225e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <SystemClock_Config+0xf0>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	4a31      	ldr	r2, [pc, #196]	; (80018e0 <SystemClock_Config+0xf0>)
 800181a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181e:	6413      	str	r3, [r2, #64]	; 0x40
 8001820:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <SystemClock_Config+0xf0>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800182c:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <SystemClock_Config+0xf4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a2c      	ldr	r2, [pc, #176]	; (80018e4 <SystemClock_Config+0xf4>)
 8001832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <SystemClock_Config+0xf4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001844:	2301      	movs	r3, #1
 8001846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184e:	2302      	movs	r3, #2
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001852:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001858:	2319      	movs	r3, #25
 800185a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800185c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001860:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001862:	2302      	movs	r3, #2
 8001864:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001866:	2302      	movs	r3, #2
 8001868:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	4618      	mov	r0, r3
 8001870:	f00a fc66 	bl	800c140 <HAL_RCC_OscConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	bf14      	ite	ne
 800187a:	2301      	movne	r3, #1
 800187c:	2300      	moveq	r3, #0
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001884:	f000 fb4a 	bl	8001f1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001888:	f00a fc0a 	bl	800c0a0 <HAL_PWREx_EnableOverDrive>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	bf14      	ite	ne
 8001892:	2301      	movne	r3, #1
 8001894:	2300      	moveq	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800189c:	f000 fb3e 	bl	8001f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a0:	230f      	movs	r3, #15
 80018a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a4:	2302      	movs	r3, #2
 80018a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	2107      	movs	r1, #7
 80018be:	4618      	mov	r0, r3
 80018c0:	f00a fee2 	bl	800c688 <HAL_RCC_ClockConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	bf14      	ite	ne
 80018ca:	2301      	movne	r3, #1
 80018cc:	2300      	moveq	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80018d4:	f000 fb22 	bl	8001f1c <Error_Handler>
  }
}
 80018d8:	bf00      	nop
 80018da:	3750      	adds	r7, #80	; 0x50
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40007000 	.word	0x40007000

080018e8 <MX_CAN1_Init>:
/**
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN1_Init(void){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80018ec:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <MX_CAN1_Init+0xc8>)
 80018ee:	4a31      	ldr	r2, [pc, #196]	; (80019b4 <MX_CAN1_Init+0xcc>)
 80018f0:	601a      	str	r2, [r3, #0]
  //125 ~ 500khz
  //hcan1.Init.Prescaler = 9;//500khz
  hcan1.Init.Prescaler = 18;//250khz
 80018f2:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <MX_CAN1_Init+0xc8>)
 80018f4:	2212      	movs	r2, #18
 80018f6:	605a      	str	r2, [r3, #4]
  //hcan1.Init.Prescaler = 36;//125khz
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <MX_CAN1_Init+0xc8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <MX_CAN1_Init+0xc8>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <MX_CAN1_Init+0xc8>)
 8001906:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800190a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <MX_CAN1_Init+0xc8>)
 800190e:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001912:	615a      	str	r2, [r3, #20]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
*/
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <MX_CAN1_Init+0xc8>)
 8001916:	2200      	movs	r2, #0
 8001918:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800191a:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <MX_CAN1_Init+0xc8>)
 800191c:	2200      	movs	r2, #0
 800191e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <MX_CAN1_Init+0xc8>)
 8001922:	2200      	movs	r2, #0
 8001924:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <MX_CAN1_Init+0xc8>)
 8001928:	2200      	movs	r2, #0
 800192a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800192c:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <MX_CAN1_Init+0xc8>)
 800192e:	2200      	movs	r2, #0
 8001930:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <MX_CAN1_Init+0xc8>)
 8001934:	2200      	movs	r2, #0
 8001936:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan1) != HAL_OK){
 8001938:	481d      	ldr	r0, [pc, #116]	; (80019b0 <MX_CAN1_Init+0xc8>)
 800193a:	f007 ff85 	bl	8009848 <HAL_CAN_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf14      	ite	ne
 8001944:	2301      	movne	r3, #1
 8001946:	2300      	moveq	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_CAN1_Init+0x6a>
    Error_Handler();
 800194e:	f000 fae5 	bl	8001f1c <Error_Handler>
  }

  sFilterConfig.FilterBank = 0;
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <MX_CAN1_Init+0xd0>)
 8001954:	2200      	movs	r2, #0
 8001956:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_CAN1_Init+0xd0>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <MX_CAN1_Init+0xd0>)
 8001960:	2201      	movs	r2, #1
 8001962:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_CAN1_Init+0xd0>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <MX_CAN1_Init+0xd0>)
 800196c:	2200      	movs	r2, #0
 800196e:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;             //maximum range of accepting id
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_CAN1_Init+0xd0>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;				//minimum range of accepting id
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <MX_CAN1_Init+0xd0>)
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_CAN1_Init+0xd0>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <MX_CAN1_Init+0xd0>)
 8001984:	2201      	movs	r2, #1
 8001986:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <MX_CAN1_Init+0xd0>)
 800198a:	220e      	movs	r2, #14
 800198c:	625a      	str	r2, [r3, #36]	; 0x24


  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800198e:	490a      	ldr	r1, [pc, #40]	; (80019b8 <MX_CAN1_Init+0xd0>)
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <MX_CAN1_Init+0xc8>)
 8001992:	f008 f855 	bl	8009a40 <HAL_CAN_ConfigFilter>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf14      	ite	ne
 800199c:	2301      	movne	r3, #1
 800199e:	2300      	moveq	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_CAN1_Init+0xc2>
  {
    /* Filter configuration Error */
    Error_Handler();
 80019a6:	f000 fab9 	bl	8001f1c <Error_Handler>

  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000540 	.word	0x20000540
 80019b4:	40006400 	.word	0x40006400
 80019b8:	20000568 	.word	0x20000568

080019bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM7_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <MX_TIM7_Init+0x78>)
 80019ce:	4a1a      	ldr	r2, [pc, #104]	; (8001a38 <MX_TIM7_Init+0x7c>)
 80019d0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <MX_TIM7_Init+0x78>)
 80019d4:	226b      	movs	r2, #107	; 0x6b
 80019d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <MX_TIM7_Init+0x78>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_TIM7_Init+0x78>)
 80019e0:	2263      	movs	r2, #99	; 0x63
 80019e2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <MX_TIM7_Init+0x78>)
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019ea:	4812      	ldr	r0, [pc, #72]	; (8001a34 <MX_TIM7_Init+0x78>)
 80019ec:	f00b fc9c 	bl	800d328 <HAL_TIM_Base_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf14      	ite	ne
 80019f6:	2301      	movne	r3, #1
 80019f8:	2300      	moveq	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM7_Init+0x48>
  {
    Error_Handler();
 8001a00:	f000 fa8c 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4808      	ldr	r0, [pc, #32]	; (8001a34 <MX_TIM7_Init+0x78>)
 8001a12:	f00b ff41 	bl	800d898 <HAL_TIMEx_MasterConfigSynchronization>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf14      	ite	ne
 8001a1c:	2301      	movne	r3, #1
 8001a1e:	2300      	moveq	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 8001a26:	f000 fa79 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000590 	.word	0x20000590
 8001a38:	40001400 	.word	0x40001400

08001a3c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART4_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <MX_UART4_Init+0x60>)
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <MX_UART4_Init+0x64>)
 8001a44:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <MX_UART4_Init+0x60>)
 8001a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a4c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <MX_UART4_Init+0x60>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_UART4_Init+0x60>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <MX_UART4_Init+0x60>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_UART4_Init+0x60>)
 8001a62:	220c      	movs	r2, #12
 8001a64:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <MX_UART4_Init+0x60>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_UART4_Init+0x60>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <MX_UART4_Init+0x60>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MX_UART4_Init+0x60>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a7e:	4807      	ldr	r0, [pc, #28]	; (8001a9c <MX_UART4_Init+0x60>)
 8001a80:	f00b ffb6 	bl	800d9f0 <HAL_UART_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf14      	ite	ne
 8001a8a:	2301      	movne	r3, #1
 8001a8c:	2300      	moveq	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001a94:	f000 fa42 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200005dc 	.word	0x200005dc
 8001aa0:	40004c00 	.word	0x40004c00

08001aa4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART5_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <MX_UART5_Init+0x64>)
 8001aaa:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <MX_UART5_Init+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <MX_UART5_Init+0x64>)
 8001ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_UART5_Init+0x64>)
 8001ab8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001abc:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <MX_UART5_Init+0x64>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <MX_UART5_Init+0x64>)
 8001ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_UART5_Init+0x64>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <MX_UART5_Init+0x64>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_UART5_Init+0x64>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <MX_UART5_Init+0x64>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_UART5_Init+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001aea:	4807      	ldr	r0, [pc, #28]	; (8001b08 <MX_UART5_Init+0x64>)
 8001aec:	f00b ff80 	bl	800d9f0 <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bf14      	ite	ne
 8001af6:	2301      	movne	r3, #1
 8001af8:	2300      	moveq	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_UART5_Init+0x60>
  {
    Error_Handler();
 8001b00:	f000 fa0c 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000664 	.word	0x20000664
 8001b0c:	40005000 	.word	0x40005000

08001b10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_USART1_UART_Init+0x60>)
 8001b16:	4a17      	ldr	r2, [pc, #92]	; (8001b74 <MX_USART1_UART_Init+0x64>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <MX_USART1_UART_Init+0x60>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_USART1_UART_Init+0x60>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_USART1_UART_Init+0x60>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <MX_USART1_UART_Init+0x60>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_USART1_UART_Init+0x60>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <MX_USART1_UART_Init+0x60>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <MX_USART1_UART_Init+0x60>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MX_USART1_UART_Init+0x60>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <MX_USART1_UART_Init+0x60>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b52:	4807      	ldr	r0, [pc, #28]	; (8001b70 <MX_USART1_UART_Init+0x60>)
 8001b54:	f00b ff4c 	bl	800d9f0 <HAL_UART_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	bf14      	ite	ne
 8001b5e:	2301      	movne	r3, #1
 8001b60:	2300      	moveq	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001b68:	f000 f9d8 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200006ec 	.word	0x200006ec
 8001b74:	40011000 	.word	0x40011000

08001b78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <MX_USART3_UART_Init+0x60>)
 8001b7e:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <MX_USART3_UART_Init+0x64>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_USART3_UART_Init+0x60>)
 8001b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_USART3_UART_Init+0x60>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_USART3_UART_Init+0x60>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_USART3_UART_Init+0x60>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_USART3_UART_Init+0x60>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <MX_USART3_UART_Init+0x60>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_USART3_UART_Init+0x60>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <MX_USART3_UART_Init+0x60>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MX_USART3_UART_Init+0x60>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bba:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <MX_USART3_UART_Init+0x60>)
 8001bbc:	f00b ff18 	bl	800d9f0 <HAL_UART_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8001bd0:	f000 f9a4 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000774 	.word	0x20000774
 8001bdc:	40004800 	.word	0x40004800

08001be0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART6_UART_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <MX_USART6_UART_Init+0x64>)
 8001be6:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <MX_USART6_UART_Init+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_USART6_UART_Init+0x64>)
 8001bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_USART6_UART_Init+0x64>)
 8001bf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf8:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_USART6_UART_Init+0x64>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <MX_USART6_UART_Init+0x64>)
 8001c02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_USART6_UART_Init+0x64>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <MX_USART6_UART_Init+0x64>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <MX_USART6_UART_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MX_USART6_UART_Init+0x64>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <MX_USART6_UART_Init+0x64>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c26:	4807      	ldr	r0, [pc, #28]	; (8001c44 <MX_USART6_UART_Init+0x64>)
 8001c28:	f00b fee2 	bl	800d9f0 <HAL_UART_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf14      	ite	ne
 8001c32:	2301      	movne	r3, #1
 8001c34:	2300      	moveq	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_USART6_UART_Init+0x60>
  {
    Error_Handler();
 8001c3c:	f000 f96e 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200007fc 	.word	0x200007fc
 8001c48:	40011400 	.word	0x40011400

08001c4c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
 8001c60:	615a      	str	r2, [r3, #20]
 8001c62:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001c64:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001c66:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001c6a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001c6c:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001c6e:	4a2a      	ldr	r2, [pc, #168]	; (8001d18 <MX_FMC_Init+0xcc>)
 8001c70:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8001c7e:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001c80:	2204      	movs	r2, #4
 8001c82:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001c86:	2210      	movs	r2, #16
 8001c88:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001c90:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001c96:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001cc2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 8001cce:	2305      	movs	r3, #5
 8001cd0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001cd2:	230f      	movs	r3, #15
 8001cd4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 4;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001cde:	2310      	movs	r3, #16
 8001ce0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001ce2:	2311      	movs	r3, #17
 8001ce4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4808      	ldr	r0, [pc, #32]	; (8001d14 <MX_FMC_Init+0xc8>)
 8001cf2:	f00b fad1 	bl	800d298 <HAL_SRAM_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_FMC_Init+0xbe>
  {
    Error_Handler( );
 8001d06:	f000 f909 	bl	8001f1c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001d0a:	bf00      	nop
 8001d0c:	3720      	adds	r7, #32
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000884 	.word	0x20000884
 8001d18:	a0000104 	.word	0xa0000104

08001d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08e      	sub	sp, #56	; 0x38
 8001d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
 8001d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d32:	4b6b      	ldr	r3, [pc, #428]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a6a      	ldr	r2, [pc, #424]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001d38:	f043 0310 	orr.w	r3, r3, #16
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	623b      	str	r3, [r7, #32]
 8001d48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	4b65      	ldr	r3, [pc, #404]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a64      	ldr	r2, [pc, #400]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b62      	ldr	r3, [pc, #392]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d62:	4b5f      	ldr	r3, [pc, #380]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a5e      	ldr	r2, [pc, #376]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001d68:	f043 0320 	orr.w	r3, r3, #32
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b5c      	ldr	r3, [pc, #368]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d7a:	4b59      	ldr	r3, [pc, #356]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b56      	ldr	r3, [pc, #344]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a52      	ldr	r2, [pc, #328]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	4b4d      	ldr	r3, [pc, #308]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a4c      	ldr	r2, [pc, #304]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b4a      	ldr	r3, [pc, #296]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dc2:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a46      	ldr	r2, [pc, #280]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b44      	ldr	r3, [pc, #272]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dda:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a40      	ldr	r2, [pc, #256]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <MX_GPIO_Init+0x1c4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 8001df2:	2200      	movs	r2, #0
 8001df4:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8001df8:	483a      	ldr	r0, [pc, #232]	; (8001ee4 <MX_GPIO_Init+0x1c8>)
 8001dfa:	f00a f937 	bl	800c06c <HAL_GPIO_WritePin>
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|BUZZER_Pin
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001e04:	4838      	ldr	r0, [pc, #224]	; (8001ee8 <MX_GPIO_Init+0x1cc>)
 8001e06:	f00a f931 	bl	800c06c <HAL_GPIO_WritePin>
                          |SLED1_Pin|SLED2_Pin|SLED3_Pin|SLED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCX512_RST_Pin|MCX512_EMG_Pin, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001e10:	4836      	ldr	r0, [pc, #216]	; (8001eec <MX_GPIO_Init+0x1d0>)
 8001e12:	f00a f92b 	bl	800c06c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI18_Pin DI19_Pin DI20_Pin DI_EMG1_Pin
                           DI_EMG2_Pin DI16_Pin DI17_Pin */
  GPIO_InitStruct.Pin = DI18_Pin|DI19_Pin|DI20_Pin|DI_EMG1_Pin
 8001e16:	237f      	movs	r3, #127	; 0x7f
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI_EMG2_Pin|DI16_Pin|DI17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e26:	4619      	mov	r1, r3
 8001e28:	4831      	ldr	r0, [pc, #196]	; (8001ef0 <MX_GPIO_Init+0x1d4>)
 8001e2a:	f009 ff5b 	bl	800bce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_INT0_Pin MCX512_INT1_Pin */
  GPIO_InitStruct.Pin = MCX512_INT0_Pin|MCX512_INT1_Pin;
 8001e2e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e40:	4619      	mov	r1, r3
 8001e42:	482a      	ldr	r0, [pc, #168]	; (8001eec <MX_GPIO_Init+0x1d0>)
 8001e44:	f009 ff4e 	bl	800bce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CO1_Pin CO2_Pin LED1_R_Pin LED1_G_Pin
                           LED1_B_Pin LED2_R_Pin LED2_G_Pin LED2_B_Pin
                           DO1_Pin DO2_Pin DO3_Pin DO4_Pin */
  GPIO_InitStruct.Pin = CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 8001e48:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4820      	ldr	r0, [pc, #128]	; (8001ee4 <MX_GPIO_Init+0x1c8>)
 8001e62:	f009 ff3f 	bl	800bce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART5_DIR_Pin UART6_DIR_Pin UART4_DIR_Pin SLED1_Pin
                           SLED2_Pin SLED3_Pin SLED4_Pin */
  GPIO_InitStruct.Pin = UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|SLED1_Pin
 8001e66:	f240 33c7 	movw	r3, #967	; 0x3c7
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SLED2_Pin|SLED3_Pin|SLED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	481a      	ldr	r0, [pc, #104]	; (8001ee8 <MX_GPIO_Init+0x1cc>)
 8001e80:	f009 ff30 	bl	800bce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI5_Pin DI6_Pin DI7_Pin DI8_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin
                           DI13_Pin DI14_Pin DI15_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8001e84:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin
                          |DI13_Pin|DI14_Pin|DI15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e96:	4619      	mov	r1, r3
 8001e98:	4816      	ldr	r0, [pc, #88]	; (8001ef4 <MX_GPIO_Init+0x1d8>)
 8001e9a:	f009 ff23 	bl	800bce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_RST_Pin MCX512_EMG_Pin */
  GPIO_InitStruct.Pin = MCX512_RST_Pin|MCX512_EMG_Pin;
 8001e9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	480d      	ldr	r0, [pc, #52]	; (8001eec <MX_GPIO_Init+0x1d0>)
 8001eb8:	f009 ff14 	bl	800bce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001ebc:	2320      	movs	r3, #32
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_GPIO_Init+0x1cc>)
 8001ed4:	f009 ff06 	bl	800bce4 <HAL_GPIO_Init>

}
 8001ed8:	bf00      	nop
 8001eda:	3738      	adds	r7, #56	; 0x38
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40021400 	.word	0x40021400
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40021800 	.word	0x40021800

08001ef8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f0a:	f007 fc59 	bl	80097c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40001000 	.word	0x40001000

08001f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <Error_Handler+0x8>

08001f26 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fad9 	bl	80024fe <_ZNSaI21CANData_HandleTypeDefED1Ev>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 fabc 	bl	80024de <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ffeb 	bl	8001f56 <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EEC1Ev>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <_ZN4BG95C1EP19__CAN_HandleTypeDef>:

#include <lift_motor/bg95.h>

// TODO Auto-generated constructor stub

BG95::BG95(CAN_HandleTypeDef *hcanx)
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <_ZN4BG95C1EP19__CAN_HandleTypeDef+0x54>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	227f      	movs	r2, #127	; 0x7f
 8001fa6:	811a      	strh	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3312      	adds	r3, #18
 8001fac:	221e      	movs	r2, #30
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f020 fb15 	bl	80225e0 <memset>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3350      	adds	r3, #80	; 0x50
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ffd8 	bl	8001f70 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EEC1Ev>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3350      	adds	r3, #80	; 0x50
 8001fc4:	687c      	ldr	r4, [r7, #4]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fa79 	bl	80024be <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE5beginEv>
 8001fcc:	65e0      	str	r0, [r4, #92]	; 0x5c
{
	this->hcanx_ = hcanx;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
}
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd90      	pop	{r4, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	08027218 	.word	0x08027218

08001fe4 <_ZN4BG95D1Ev>:
	//this->Txid_ = Txid;
	//this->Rxid_ = Rxid;
}

// TODO Auto-generated destructor stub
BG95::~BG95()
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <_ZN4BG95D1Ev+0x28>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	601a      	str	r2, [r3, #0]
{
	//if you using heap memory, delete all in this function
	HAL_CAN_DeInitialization();
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f905 	bl	8002202 <_ZN4BG9524HAL_CAN_DeInitializationEv>
BG95::~BG95()
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3350      	adds	r3, #80	; 0x50
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 faa9 	bl	8002554 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EED1Ev>
}
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	08027218 	.word	0x08027218

08002010 <_ZN4BG95D0Ev>:
BG95::~BG95()
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
}
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ffe3 	bl	8001fe4 <_ZN4BG95D1Ev>
 800201e:	2160      	movs	r1, #96	; 0x60
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f01f f94f 	bl	80212c4 <_ZdlPvj>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_ZN4BG9519TransmitSendRequestEv>:


//--------------------------------------------------------------------send or read function
uint16_t BG95::TransmitSendRequest()
{
 8002030:	b5b0      	push	{r4, r5, r7, lr}
 8002032:	b094      	sub	sp, #80	; 0x50
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	CANData_HandleTypeDef temp_DATA = RequestQueue.front();
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3350      	adds	r3, #80	; 0x50
 800203c:	4618      	mov	r0, r3
 800203e:	f000 faa4 	bl	800258a <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE5frontEv>
 8002042:	4603      	mov	r3, r0
 8002044:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002048:	461d      	mov	r5, r3
 800204a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800204c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800204e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002052:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint8_t TxData[8];
	uint32_t TxMailbox;
	uint8_t state;

	/* Configure Transmission process */
	TxHeader.StdId = this->nodeid_ + temp_DATA.txid_;                 // Standard Identifier, 0 ~ 0x7FF
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	891b      	ldrh	r3, [r3, #8]
 800205a:	461a      	mov	r2, r3
 800205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205e:	4413      	add	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
	TxHeader.ExtId = 0x01;                  // Extended Identifier, 0 ~ 0x1FFFFFFF
 8002062:	2301      	movs	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA;            // frame type, DATA or REMOTE
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.IDE = CAN_ID_STD;              // identifier type, STD or EXT
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = temp_DATA.data_length_;                       // data length, 0 ~ 8 byte
 800206e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.TransmitGlobalTime = DISABLE;  // timestamp counter capture.
 8002072:	2300      	movs	r3, #0
 8002074:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	/* Set the data to be transmitted */
	std::copy(temp_DATA.write_Data_Byte_, temp_DATA.write_Data_Byte_ + temp_DATA.data_length_, TxData);
 8002078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800207a:	461a      	mov	r2, r3
 800207c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002080:	330c      	adds	r3, #12
 8002082:	1899      	adds	r1, r3, r2
 8002084:	f107 0210 	add.w	r2, r7, #16
 8002088:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800208c:	330c      	adds	r3, #12
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fa8e 	bl	80025b0 <_ZSt4copyIPhS0_ET0_T_S2_S1_>

	state = HAL_CANTransmit(hcanx_, &TxHeader, (unsigned char*)TxData, &TxMailbox);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6858      	ldr	r0, [r3, #4]
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	f107 0210 	add.w	r2, r7, #16
 80020a0:	f107 0118 	add.w	r1, r7, #24
 80020a4:	f006 fbac 	bl	8008800 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	return state;
 80020ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020b2:	b29b      	uxth	r3, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3750      	adds	r7, #80	; 0x50
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bdb0      	pop	{r4, r5, r7, pc}

080020bc <_ZN4BG9523TransmitReceiveResponseEv>:

uint16_t BG95::TransmitReceiveResponse()
{
 80020bc:	b5b0      	push	{r4, r5, r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8] = {0,};
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
	uint8_t state;

	/* Configure Receive process */
	state = HAL_CANReceive(hcanx_, &RxHeader, (unsigned char*)RxData);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f107 0208 	add.w	r2, r7, #8
 80020d4:	f107 0110 	add.w	r1, r7, #16
 80020d8:	4618      	mov	r0, r3
 80020da:	f006 fba3 	bl	8008824 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh>
 80020de:	4603      	mov	r3, r0
 80020e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(state == HAL_OK)
 80020e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d12a      	bne.n	8002142 <_ZN4BG9523TransmitReceiveResponseEv+0x86>
	{
		/* Retrieve the received data */
		RequestQueue.front().rxid_ = this->nodeid_ + RxHeader.StdId;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	891b      	ldrh	r3, [r3, #8]
 80020f0:	461a      	mov	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	18d4      	adds	r4, r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3350      	adds	r3, #80	; 0x50
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fa45 	bl	800258a <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE5frontEv>
 8002100:	4603      	mov	r3, r0
 8002102:	4622      	mov	r2, r4
 8002104:	605a      	str	r2, [r3, #4]

		std::copy(RequestQueue.front().read_Data_Byte_,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3350      	adds	r3, #80	; 0x50
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fa3d 	bl	800258a <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE5frontEv>
 8002110:	4603      	mov	r3, r0
 8002112:	f103 0514 	add.w	r5, r3, #20
				RequestQueue.front().read_Data_Byte_ + RequestQueue.front().data_length_, RxData);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3350      	adds	r3, #80	; 0x50
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fa35 	bl	800258a <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE5frontEv>
 8002120:	4603      	mov	r3, r0
 8002122:	f103 0414 	add.w	r4, r3, #20
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3350      	adds	r3, #80	; 0x50
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fa2d 	bl	800258a <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE5frontEv>
 8002130:	4603      	mov	r3, r0
 8002132:	689b      	ldr	r3, [r3, #8]
		std::copy(RequestQueue.front().read_Data_Byte_,
 8002134:	4423      	add	r3, r4
 8002136:	f107 0208 	add.w	r2, r7, #8
 800213a:	4619      	mov	r1, r3
 800213c:	4628      	mov	r0, r5
 800213e:	f000 fa37 	bl	80025b0 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
	}

	return state;
 8002142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002146:	b29b      	uxth	r3, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	3730      	adds	r7, #48	; 0x30
 800214c:	46bd      	mov	sp, r7
 800214e:	bdb0      	pop	{r4, r5, r7, pc}

08002150 <_ZN4BG9516QueueSaveRequestE21CANData_HandleTypeDef>:
//---------------------------------------------------------------Command queue functions
//queue system functions

void BG95::AsyncQueueSaveRequest(CANData_HandleTypeDef cmd){this->RequestQueue.insert(it, cmd);}

void BG95::QueueSaveRequest(CANData_HandleTypeDef cmd){this->RequestQueue.push_back(cmd);}
 8002150:	b084      	sub	sp, #16
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	f107 0014 	add.w	r0, r7, #20
 800215e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3350      	adds	r3, #80	; 0x50
 8002166:	f107 0214 	add.w	r2, r7, #20
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fa48 	bl	8002602 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE9push_backERKS0_>
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800217c:	b004      	add	sp, #16
 800217e:	4770      	bx	lr

08002180 <_ZN4BG9518QueueDeleteRequestEv>:
void BG95::QueueDeleteRequest()
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	if(!(RequestQueue.empty())) this->RequestQueue.erase(RequestQueue.begin());
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3350      	adds	r3, #80	; 0x50
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fa5e 	bl	800264e <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE5emptyEv>
 8002192:	4603      	mov	r3, r0
 8002194:	f083 0301 	eor.w	r3, r3, #1
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d015      	beq.n	80021ca <_ZN4BG9518QueueDeleteRequestEv+0x4a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3350      	adds	r3, #80	; 0x50
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 f988 	bl	80024be <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE5beginEv>
 80021ae:	4603      	mov	r3, r0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	f107 020c 	add.w	r2, r7, #12
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fa0f 	bl	80025e0 <_ZN9__gnu_cxx17__normal_iteratorIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	4620      	mov	r0, r4
 80021c6:	f000 fa5d 	bl	8002684 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd90      	pop	{r4, r7, pc}

080021d2 <_ZN4BG9522HAL_CAN_InitializationEv>:


//--------------------------------------------------------------------initialization
void BG95::HAL_CAN_Initialization()
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
	 /* Can Start */
	/* Activate CAN RX notification */
	if ((HAL_CAN_Start(this->hcanx_) != HAL_OK))// ||
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	f007 fd0e 	bl	8009c00 <HAL_CAN_Start>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <_ZN4BG9522HAL_CAN_InitializationEv+0x28>
		//	(HAL_CAN_ActivateNotification(this->hcanx_, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK))
	{
		this->err_code_ = initfailed;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
	}
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_ZN4BG9524HAL_CAN_DeInitializationEv>:

void BG95::HAL_CAN_DeInitialization()
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_Stop(this->hcanx_) != HAL_OK){} //this->err_code_ = initfailed;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4618      	mov	r0, r3
 8002210:	f007 fd3a 	bl	8009c88 <HAL_CAN_Stop>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <_ZN4BG959DriveInitEv>:



//--------------------------------------------------------------------Drive
void BG95::DriveInit()
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	//ReadBufferInit();
	//DataBufferInit();
	if(RequestQueue.empty()) ReadSchduleCommand();
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3350      	adds	r3, #80	; 0x50
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fa0e 	bl	800264e <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE5emptyEv>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <_ZN4BG959DriveInitEv+0x1e>
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f91c 	bl	8002476 <_ZN4BG9518ReadSchduleCommandEv>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_ZN4BG959DriveCommEv>:


void BG95::DriveComm()
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
	//if(RequestQueue.empty()) return;

	if(TransmitSendRequest()!=HAL_OK || TransmitReceiveResponse()!=HAL_OK)
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff feee 	bl	8002030 <_ZN4BG9519TransmitSendRequestEv>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d105      	bne.n	8002266 <_ZN4BG959DriveCommEv+0x20>
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ff2e 	bl	80020bc <_ZN4BG9523TransmitReceiveResponseEv>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <_ZN4BG959DriveCommEv+0x24>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <_ZN4BG959DriveCommEv+0x26>
 800226a:	2300      	movs	r3, #0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <_ZN4BG959DriveCommEv+0x32>
	{
		this->comm_status_ = false;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	741a      	strb	r2, [r3, #16]
		return;
 8002276:	e003      	b.n	8002280 <_ZN4BG959DriveCommEv+0x3a>
	}
	else
	{
		this->comm_status_ = true;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	741a      	strb	r2, [r3, #16]
		return;
 800227e:	bf00      	nop
	}

}
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <_ZN4BG9513DriveAnalysisEv>:

void BG95::DriveAnalysis()
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
	QueueDeleteRequest();
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff76 	bl	8002180 <_ZN4BG9518QueueDeleteRequestEv>
	//ProcessGetTotalInfo();
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <_ZN4BG9514InitializationEv>:




void BG95::Initialization()
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	HAL_CAN_Initialization();
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff94 	bl	80021d2 <_ZN4BG9522HAL_CAN_InitializationEv>
	//if(RxData_ == nullptr) RxData_ = new uint8_t[data_length_];

	//RegisterRequsetCmd();
	//RegisterDefaultParam();

}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_ZN4BG955DriveEv>:

}


void BG95::Drive()
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
	DriveInit();
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ffb0 	bl	8002220 <_ZN4BG959DriveInitEv>

	DriveComm();
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ffc0 	bl	8002246 <_ZN4BG959DriveCommEv>

	DriveAnalysis();
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffdd 	bl	8002286 <_ZN4BG9513DriveAnalysisEv>
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_ZN21CANData_HandleTypeDefC1Ev>:
	int txid_;
	int rxid_;
	int data_length_;
	unsigned char write_Data_Byte_[8] = {0,};
	unsigned char read_Data_Byte_[8] = {0,};
} CANData_HandleTypeDef;
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	330c      	adds	r3, #12
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3314      	adds	r3, #20
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <_ZN4BG9516WriteDataEnqueueEiii>:



//-----------------------------------------------------------------------applications
void BG95::WriteDataEnqueue(int index, int subindex, int data)
{
 80022fe:	b590      	push	{r4, r7, lr}
 8002300:	b093      	sub	sp, #76	; 0x4c
 8002302:	af04      	add	r7, sp, #16
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	603b      	str	r3, [r7, #0]
	/*Declare the buffers*/
	CANData_HandleTypeDef cal_data;
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ffdf 	bl	80022d4 <_ZN21CANData_HandleTypeDefC1Ev>
	int index_ = index;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
	int data_ = data;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	633b      	str	r3, [r7, #48]	; 0x30

	/*input the data to buffer*/
	cal_data.txid_ = 600;
 800231e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002322:	617b      	str	r3, [r7, #20]
	cal_data.data_length_ = 8;
 8002324:	2308      	movs	r3, #8
 8002326:	61fb      	str	r3, [r7, #28]

	cal_data.write_Data_Byte_[0] = 0x40;    					//command byte(4bytes fixed)
 8002328:	2340      	movs	r3, #64	; 0x40
 800232a:	f887 3020 	strb.w	r3, [r7, #32]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 800232e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 8002336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002338:	121b      	asrs	r3, r3, #8
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	cal_data.write_Data_Byte_[3] = subindex;					//sub Index
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(data !=0)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d012      	beq.n	8002374 <_ZN4BG9516WriteDataEnqueueEiii+0x76>
	{
		cal_data.write_Data_Byte_[4] = (data_ & 0xff);				//data for lsb
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		cal_data.write_Data_Byte_[5] = ((data_ >> 8) & 0xff);
 8002356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002358:	121b      	asrs	r3, r3, #8
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		cal_data.write_Data_Byte_[6] = ((data_ >> 16) & 0xff);
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	141b      	asrs	r3, r3, #16
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		cal_data.write_Data_Byte_[7] = ((data_ >> 24) & 0xff);
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	0e1b      	lsrs	r3, r3, #24
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/*Register data from buffer*/
	QueueSaveRequest(cal_data);
 8002374:	466c      	mov	r4, sp
 8002376:	f107 0320 	add.w	r3, r7, #32
 800237a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800237c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f7ff fee2 	bl	8002150 <_ZN4BG9516QueueSaveRequestE21CANData_HandleTypeDef>
}
 800238c:	bf00      	nop
 800238e:	373c      	adds	r7, #60	; 0x3c
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}

08002394 <_ZN4BG9515ReadDataEnqueueEiii>:

void BG95::ReadDataEnqueue(int index, int subindex, int data)
{
 8002394:	b590      	push	{r4, r7, lr}
 8002396:	b093      	sub	sp, #76	; 0x4c
 8002398:	af04      	add	r7, sp, #16
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
	/*Declare the buffers*/
	CANData_HandleTypeDef cal_data;
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ff94 	bl	80022d4 <_ZN21CANData_HandleTypeDefC1Ev>
	int index_ = index;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	637b      	str	r3, [r7, #52]	; 0x34
	int data_ = data;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30

	/*input the data to buffer*/
	cal_data.txid_ = 580;
 80023b4:	f44f 7311 	mov.w	r3, #580	; 0x244
 80023b8:	617b      	str	r3, [r7, #20]
	cal_data.data_length_ = 8;
 80023ba:	2308      	movs	r3, #8
 80023bc:	61fb      	str	r3, [r7, #28]

	cal_data.write_Data_Byte_[0] = 0x40;    					//command byte(4bytes fixed)
 80023be:	2340      	movs	r3, #64	; 0x40
 80023c0:	f887 3020 	strb.w	r3, [r7, #32]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 80023c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 80023cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ce:	121b      	asrs	r3, r3, #8
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	cal_data.write_Data_Byte_[3] = subindex;					//sub Index
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if(data !=0)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d012      	beq.n	800240a <_ZN4BG9515ReadDataEnqueueEiii+0x76>
	{
		cal_data.write_Data_Byte_[4] = (data_ & 0xff);				//data for lsb
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		cal_data.write_Data_Byte_[5] = ((data_ >> 8) & 0xff);
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ee:	121b      	asrs	r3, r3, #8
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		cal_data.write_Data_Byte_[6] = ((data_ >> 16) & 0xff);
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	141b      	asrs	r3, r3, #16
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		cal_data.write_Data_Byte_[7] = ((data_ >> 24) & 0xff);
 8002400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002402:	0e1b      	lsrs	r3, r3, #24
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/*Register data from buffer*/
	QueueSaveRequest(cal_data);
 800240a:	466c      	mov	r4, sp
 800240c:	f107 0320 	add.w	r3, r7, #32
 8002410:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002412:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002416:	f107 0314 	add.w	r3, r7, #20
 800241a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f7ff fe97 	bl	8002150 <_ZN4BG9516QueueSaveRequestE21CANData_HandleTypeDef>
}
 8002422:	bf00      	nop
 8002424:	373c      	adds	r7, #60	; 0x3c
 8002426:	46bd      	mov	sp, r7
 8002428:	bd90      	pop	{r4, r7, pc}

0800242a <_ZN4BG9518SetPositionCommandEv>:



void BG95::SetPositionCommand()
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
	WriteDataEnqueue(0x3000, 0, 1);      // reset error register
 8002432:	2301      	movs	r3, #1
 8002434:	2200      	movs	r2, #0
 8002436:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff ff5f 	bl	80022fe <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3003, 0, 7);      // device mode "position mode"
 8002440:	2307      	movs	r3, #7
 8002442:	2200      	movs	r2, #0
 8002444:	f243 0103 	movw	r1, #12291	; 0x3003
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff58 	bl	80022fe <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3300, 0, 2500);   // desired velocity (2500 rpm)
 800244e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002452:	2200      	movs	r2, #0
 8002454:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff50 	bl	80022fe <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(0x3732, 0, 1000);   // position following error - window
 800245e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002462:	2200      	movs	r2, #0
 8002464:	f243 7132 	movw	r1, #14130	; 0x3732
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff48 	bl	80022fe <_ZN4BG9516WriteDataEnqueueEiii>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_ZN4BG9518ReadSchduleCommandEv>:

void BG95::ReadSchduleCommand()
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
	ReadDataEnqueue(0x3112, 0, 0);      // motor voltage
 800247e:	2300      	movs	r3, #0
 8002480:	2200      	movs	r2, #0
 8002482:	f243 1112 	movw	r1, #12562	; 0x3112
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ff84 	bl	8002394 <_ZN4BG9515ReadDataEnqueueEiii>
	ReadDataEnqueue(0x3113, 0, 0);      // actual motor current
 800248c:	2300      	movs	r3, #0
 800248e:	2200      	movs	r2, #0
 8002490:	f243 1113 	movw	r1, #12563	; 0x3113
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ff7d 	bl	8002394 <_ZN4BG9515ReadDataEnqueueEiii>
	ReadDataEnqueue(0x3760, 0, 0);      // Actual Target Position
 800249a:	2300      	movs	r3, #0
 800249c:	2200      	movs	r2, #0
 800249e:	f243 7160 	movw	r1, #14176	; 0x3760
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ff76 	bl	8002394 <_ZN4BG9515ReadDataEnqueueEiii>
	ReadDataEnqueue(0x3761, 0, 1);      // Actual Command Position
 80024a8:	2301      	movs	r3, #1
 80024aa:	2200      	movs	r2, #0
 80024ac:	f243 7161 	movw	r1, #14177	; 0x3761
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff6f 	bl	8002394 <_ZN4BG9515ReadDataEnqueueEiii>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	f107 030c 	add.w	r3, r7, #12
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f8ff 	bl	80026d2 <_ZN9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f903 	bl	80026f2 <_ZNSaI21CANData_HandleTypeDefEC1Ev>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f90b 	bl	800270a <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <_ZNSaI21CANData_HandleTypeDefED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f913 	bl	8002732 <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefED1Ev>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	109b      	asrs	r3, r3, #2
 8002530:	4a07      	ldr	r2, [pc, #28]	; (8002550 <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EED1Ev+0x38>)
 8002532:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8002536:	461a      	mov	r2, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f905 	bl	8002748 <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      }
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fcfc 	bl	8001f3e <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	b6db6db7 	.word	0xb6db6db7

08002554 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002554:	b5b0      	push	{r4, r5, r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681c      	ldr	r4, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f901 	bl	800276e <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800256c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800256e:	461a      	mov	r2, r3
 8002570:	4629      	mov	r1, r5
 8002572:	4620      	mov	r0, r4
 8002574:	f000 f906 	bl	8002784 <_ZSt8_DestroyIP21CANData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      }
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff ffcc 	bl	8002518 <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EED1Ev>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bdb0      	pop	{r4, r5, r7, pc}

0800258a <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %vector.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ff93 	bl	80024be <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE5beginEv>
 8002598:	4603      	mov	r3, r0
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 f8fd 	bl	80027a0 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>
 80025a6:	4603      	mov	r3, r0
      }
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f8fb 	bl	80027b8 <_ZSt12__miter_baseIPhET_S1_>
 80025c2:	4604      	mov	r4, r0
 80025c4:	68b8      	ldr	r0, [r7, #8]
 80025c6:	f000 f8f7 	bl	80027b8 <_ZSt12__miter_baseIPhET_S1_>
 80025ca:	4603      	mov	r3, r0
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4619      	mov	r1, r3
 80025d0:	4620      	mov	r0, r4
 80025d2:	f000 f8fc 	bl	80027ce <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 80025d6:	4603      	mov	r3, r0
    }
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd90      	pop	{r4, r7, pc}

080025e0 <_ZN9__gnu_cxx17__normal_iteratorIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
      : _M_current(__i) { }

      // Allow iterator to const_iterator conversion
      template<typename _Iter>
        _GLIBCXX20_CONSTEXPR
        __normal_iterator(const __normal_iterator<_Iter,
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
			  typename __enable_if<
      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }
 80025ea:	6838      	ldr	r0, [r7, #0]
 80025ec:	f000 f912 	bl	8002814 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80025f0:	4603      	mov	r3, r0
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	429a      	cmp	r2, r3
 8002616:	d00d      	beq.n	8002634 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	f000 f913 	bl	800284c <_ZNSt16allocator_traitsISaI21CANData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f103 021c 	add.w	r2, r3, #28
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8002632:	e008      	b.n	8002646 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f8f8 	bl	800282a <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE3endEv>
 800263a:	4603      	mov	r3, r0
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	4619      	mov	r1, r3
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f97d 	bl	8002940 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fa3a 	bl	8002ad0 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE5beginEv>
 800265c:	4603      	mov	r3, r0
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fa45 	bl	8002af0 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE3endEv>
 8002666:	4603      	mov	r3, r0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	f107 020c 	add.w	r2, r7, #12
 800266e:	f107 0308 	add.w	r3, r7, #8
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fa4c 	bl	8002b12 <_ZN9__gnu_cxxeqIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800267a:	4603      	mov	r3, r0
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff15 	bl	80024be <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE5beginEv>
 8002694:	4603      	mov	r3, r0
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f8ea 	bl	8002872 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE6cbeginEv>
 800269e:	4603      	mov	r3, r0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	f107 020c 	add.w	r2, r7, #12
 80026a6:	463b      	mov	r3, r7
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f8f2 	bl	8002894 <_ZN9__gnu_cxxmiIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f905 	bl	80028c8 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 80026be:	4603      	mov	r3, r0
 80026c0:	4619      	mov	r1, r3
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fa3d 	bl	8002b42 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <_ZN9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_ZNSaI21CANData_HandleTypeDefEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fa5e 	bl	8002bbc <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefEC1Ev>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
	{ }
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
	if (__p)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fa36 	bl	8002bd2 <_ZNSt16allocator_traitsISaI21CANData_HandleTypeDefEE10deallocateERS1_PS0_j>
      }
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <_ZSt8_DestroyIP21CANData_HandleTypeDefS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fa2c 	bl	8002bf0 <_ZSt8_DestroyIP21CANData_HandleTypeDefEvT_S2_>
    }
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>:

      // Forward iterator requirements
      _GLIBCXX20_CONSTEXPR
      reference
      operator*() const _GLIBCXX_NOEXCEPT
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
    { return __it; }
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80027ce:	b5b0      	push	{r4, r5, r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fa15 	bl	8002c0a <_ZSt12__niter_baseIPhET_S1_>
 80027e0:	4604      	mov	r4, r0
 80027e2:	68b8      	ldr	r0, [r7, #8]
 80027e4:	f000 fa11 	bl	8002c0a <_ZSt12__niter_baseIPhET_S1_>
 80027e8:	4605      	mov	r5, r0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fa0c 	bl	8002c0a <_ZSt12__niter_baseIPhET_S1_>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461a      	mov	r2, r3
 80027f6:	4629      	mov	r1, r5
 80027f8:	4620      	mov	r0, r4
 80027fa:	f000 fa11 	bl	8002c20 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 80027fe:	4602      	mov	r2, r0
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fa1b 	bl	8002c40 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 800280a:	4603      	mov	r3, r0
    }
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bdb0      	pop	{r4, r5, r7, pc}

08002814 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	1d1a      	adds	r2, r3, #4
 8002836:	f107 030c 	add.w	r3, r7, #12
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff48 	bl	80026d2 <_ZN9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_ZNSt16allocator_traitsISaI21CANData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fa08 	bl	8002c6e <_ZSt7forwardIRK21CANData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 fa0d 	bl	8002c84 <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fa19 	bl	8002cba <_ZN9__gnu_cxx17__normal_iteratorIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <_ZN9__gnu_cxxmiIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002894:	b590      	push	{r4, r7, lr}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f9da 	bl	8002c58 <_ZNK9__gnu_cxx17__normal_iteratorIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80028a4:	4603      	mov	r3, r0
 80028a6:	681c      	ldr	r4, [r3, #0]
 80028a8:	6838      	ldr	r0, [r7, #0]
 80028aa:	f000 f9d5 	bl	8002c58 <_ZNK9__gnu_cxx17__normal_iteratorIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	1ae3      	subs	r3, r4, r3
 80028b4:	109b      	asrs	r3, r3, #2
 80028b6:	4a03      	ldr	r2, [pc, #12]	; (80028c4 <_ZN9__gnu_cxxmiIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd90      	pop	{r4, r7, pc}
 80028c4:	b6db6db7 	.word	0xb6db6db7

080028c8 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6819      	ldr	r1, [r3, #0]
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	f107 020c 	add.w	r2, r7, #12
 80028e8:	f107 0308 	add.w	r3, r7, #8
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff feef 	bl	80026d2 <_ZN9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <_ZSt4moveIR21CANData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f805 	bl	800292a <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8002920:	4603      	mov	r3, r0
      }
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8002932:	2301      	movs	r3, #1
      }
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b08c      	sub	sp, #48	; 0x30
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800294c:	4a5e      	ldr	r2, [pc, #376]	; (8002ac8 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 800294e:	2101      	movs	r1, #1
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f9ed 	bl	8002d30 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>
 8002956:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff fdaa 	bl	80024be <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE5beginEv>
 800296a:	4603      	mov	r3, r0
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	f107 0214 	add.w	r2, r7, #20
 8002972:	f107 0308 	add.w	r3, r7, #8
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fa21 	bl	8002dc0 <_ZN9__gnu_cxxmiIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800297e:	4603      	mov	r3, r0
 8002980:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fa34 	bl	8002df4 <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE11_M_allocateEj>
 800298c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8002992:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	189d      	adds	r5, r3, r2
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f962 	bl	8002c6e <_ZSt7forwardIRK21CANData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 80029aa:	4603      	mov	r3, r0
 80029ac:	461a      	mov	r2, r3
 80029ae:	4629      	mov	r1, r5
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7ff ff4b 	bl	800284c <_ZNSt16allocator_traitsISaI21CANData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80029b6:	2300      	movs	r3, #0
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80029ba:	f7ff ffab 	bl	8002914 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d027      	beq.n	8002a14 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80029c4:	f107 0308 	add.w	r3, r7, #8
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff23 	bl	8002814 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80029ce:	4603      	mov	r3, r0
 80029d0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff feca 	bl	800276e <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80029da:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4621      	mov	r1, r4
 80029e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029e2:	f000 fa1b 	bl	8002e1c <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80029e6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80029e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ea:	331c      	adds	r3, #28
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80029ee:	f107 0308 	add.w	r3, r7, #8
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff0e 	bl	8002814 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80029f8:	4603      	mov	r3, r0
 80029fa:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff feb5 	bl	800276e <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002a04:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a08:	6a39      	ldr	r1, [r7, #32]
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	f000 fa06 	bl	8002e1c <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8002a10:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002a12:	e026      	b.n	8002a62 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8002a14:	f107 0308 	add.w	r3, r7, #8
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fefb 	bl	8002814 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fea2 	bl	800276e <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002a2a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4621      	mov	r1, r4
 8002a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a32:	f000 fa07 	bl	8002e44 <_ZSt34__uninitialized_move_if_noexcept_aIP21CANData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002a36:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8002a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3a:	331c      	adds	r3, #28
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8002a3e:	f107 0308 	add.w	r3, r7, #8
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fee6 	bl	8002814 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fe8d 	bl	800276e <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002a54:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8002a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a58:	6a39      	ldr	r1, [r7, #32]
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	f000 f9f2 	bl	8002e44 <_ZSt34__uninitialized_move_if_noexcept_aIP21CANData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002a60:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8002a62:	f7ff ff57 	bl	8002914 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f083 0301 	eor.w	r3, r3, #1
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fe7a 	bl	800276e <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6a39      	ldr	r1, [r7, #32]
 8002a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a82:	f7ff fe7f 	bl	8002784 <_ZSt8_DestroyIP21CANData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8002a86:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	109b      	asrs	r3, r3, #2
 8002a92:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8002a98:	461a      	mov	r2, r3
 8002a9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a9c:	f7ff fe54 	bl	8002748 <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aaa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	441a      	add	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	609a      	str	r2, [r3, #8]
    }
 8002ac0:	bf00      	nop
 8002ac2:	3730      	adds	r7, #48	; 0x30
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ac8:	08023a88 	.word	0x08023a88
 8002acc:	b6db6db7 	.word	0xb6db6db7

08002ad0 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	f107 030c 	add.w	r3, r7, #12
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 f8ea 	bl	8002cba <_ZN9__gnu_cxx17__normal_iteratorIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	1d1a      	adds	r2, r3, #4
 8002afc:	f107 030c 	add.w	r3, r7, #12
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f8d9 	bl	8002cba <_ZN9__gnu_cxx17__normal_iteratorIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <_ZN9__gnu_cxxeqIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002b12:	b590      	push	{r4, r7, lr}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f89b 	bl	8002c58 <_ZNK9__gnu_cxx17__normal_iteratorIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002b22:	4603      	mov	r3, r0
 8002b24:	681c      	ldr	r4, [r3, #0]
 8002b26:	6838      	ldr	r0, [r7, #0]
 8002b28:	f000 f896 	bl	8002c58 <_ZNK9__gnu_cxx17__normal_iteratorIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	429c      	cmp	r4, r3
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd90      	pop	{r4, r7, pc}

08002b42 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 8002b42:	b590      	push	{r4, r7, lr}
 8002b44:	b085      	sub	sp, #20
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff feb9 	bl	80028c8 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8002b56:	4603      	mov	r3, r0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff fe65 	bl	800282a <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE3endEv>
 8002b60:	4603      	mov	r3, r0
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	f107 020c 	add.w	r2, r7, #12
 8002b68:	f107 0308 	add.w	r3, r7, #8
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f981 	bl	8002e76 <_ZN9__gnu_cxxneIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00e      	beq.n	8002b98 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fea2 	bl	80028c8 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8002b84:	4604      	mov	r4, r0
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff fe4f 	bl	800282a <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE3endEv>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	4620      	mov	r0, r4
 8002b94:	f000 f987 	bl	8002ea6 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      --this->_M_impl._M_finish;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f1a3 021c 	sub.w	r2, r3, #28
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4619      	mov	r1, r3
 8002bac:	4610      	mov	r0, r2
 8002bae:	f000 f894 	bl	8002cda <_ZNSt16allocator_traitsISaI21CANData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
      return __position;
 8002bb2:	683b      	ldr	r3, [r7, #0]
    }
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd90      	pop	{r4, r7, pc}

08002bbc <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <_ZNSt16allocator_traitsISaI21CANData_HandleTypeDefEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f977 	bl	8002ed6 <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE10deallocateEPS1_j>
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_ZSt8_DestroyIP21CANData_HandleTypeDefEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002bfa:	6839      	ldr	r1, [r7, #0]
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f97d 	bl	8002efc <_ZNSt12_Destroy_auxILb1EE9__destroyIP21CANData_HandleTypeDefEEvT_S4_>
    }
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f96e 	bl	8002f12 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_ZNK9__gnu_cxx17__normal_iteratorIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <_ZSt7forwardIRK21CANData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8002c84:	b5b0      	push	{r4, r5, r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ffec 	bl	8002c6e <_ZSt7forwardIRK21CANData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8002c96:	4605      	mov	r5, r0
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	201c      	movs	r0, #28
 8002c9e:	f7ff f942 	bl	8001f26 <_ZnwjPv>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	461c      	mov	r4, r3
 8002ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002caa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002cae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bdb0      	pop	{r4, r5, r7, pc}

08002cba <_ZN9__gnu_cxx17__normal_iteratorIPK21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <_ZNSt16allocator_traitsISaI21CANData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8002ce4:	6839      	ldr	r1, [r7, #0]
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f923 	bl	8002f32 <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE7destroyIS1_EEvPT_>
	}
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <_ZNSt16allocator_traitsISaI21CANData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f80a 	bl	8002d1a <_ZSt7forwardI21CANData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 8002d06:	4603      	mov	r3, r0
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f91b 	bl	8002f48 <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <_ZSt7forwardI21CANData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f91e 	bl	8002f7e <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE8max_sizeEv>
 8002d42:	4604      	mov	r4, r0
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f92b 	bl	8002fa0 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE4sizeEv>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	1ae2      	subs	r2, r4, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	bf34      	ite	cc
 8002d54:	2301      	movcc	r3, #1
 8002d56:	2300      	movcs	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f01e fadb 	bl	802131a <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f91b 	bl	8002fa0 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE4sizeEv>
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f917 	bl	8002fa0 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE4sizeEv>
 8002d72:	4603      	mov	r3, r0
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	f107 0208 	add.w	r2, r7, #8
 8002d7a:	f107 0310 	add.w	r3, r7, #16
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 f923 	bl	8002fcc <_ZSt3maxIjERKT_S2_S2_>
 8002d86:	4603      	mov	r3, r0
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4423      	add	r3, r4
 8002d8c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f906 	bl	8002fa0 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE4sizeEv>
 8002d94:	4602      	mov	r2, r0
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d306      	bcc.n	8002daa <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f8ee 	bl	8002f7e <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE8max_sizeEv>
 8002da2:	4602      	mov	r2, r0
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d904      	bls.n	8002db4 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x84>
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f8e7 	bl	8002f7e <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE8max_sizeEv>
 8002db0:	4603      	mov	r3, r0
 8002db2:	e000      	b.n	8002db6 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x86>
 8002db4:	697b      	ldr	r3, [r7, #20]
      }
 8002db6:	4618      	mov	r0, r3
 8002db8:	371c      	adds	r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd90      	pop	{r4, r7, pc}
	...

08002dc0 <_ZN9__gnu_cxxmiIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff fd22 	bl	8002814 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	681c      	ldr	r4, [r3, #0]
 8002dd4:	6838      	ldr	r0, [r7, #0]
 8002dd6:	f7ff fd1d 	bl	8002814 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	1ae3      	subs	r3, r4, r3
 8002de0:	109b      	asrs	r3, r3, #2
 8002de2:	4a03      	ldr	r2, [pc, #12]	; (8002df0 <_ZN9__gnu_cxxmiIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8002de4:	fb02 f303 	mul.w	r3, r2, r3
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd90      	pop	{r4, r7, pc}
 8002df0:	b6db6db7 	.word	0xb6db6db7

08002df4 <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d006      	beq.n	8002e12 <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x1e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6839      	ldr	r1, [r7, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 f8f3 	bl	8002ff4 <_ZNSt16allocator_traitsISaI21CANData_HandleTypeDefEE8allocateERS1_j>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	e000      	b.n	8002e14 <_ZNSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x20>
 8002e12:	2300      	movs	r3, #0
      }
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8002e2a:	f88d 4000 	strb.w	r4, [sp]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f8ec 	bl	8003012 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8002e3a:	4603      	mov	r3, r0
      }
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd90      	pop	{r4, r7, pc}

08002e44 <_ZSt34__uninitialized_move_if_noexcept_aIP21CANData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f8ef 	bl	8003036 <_ZSt32__make_move_if_noexcept_iteratorI21CANData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 8002e58:	4604      	mov	r4, r0
 8002e5a:	68b8      	ldr	r0, [r7, #8]
 8002e5c:	f000 f8eb 	bl	8003036 <_ZSt32__make_move_if_noexcept_iteratorI21CANData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 8002e60:	4601      	mov	r1, r0
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	4620      	mov	r0, r4
 8002e68:	f000 f8f4 	bl	8003054 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP21CANData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8002e6c:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd90      	pop	{r4, r7, pc}

08002e76 <_ZN9__gnu_cxxneIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002e76:	b590      	push	{r4, r7, lr}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff fcc7 	bl	8002814 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002e86:	4603      	mov	r3, r0
 8002e88:	681c      	ldr	r4, [r3, #0]
 8002e8a:	6838      	ldr	r0, [r7, #0]
 8002e8c:	f7ff fcc2 	bl	8002814 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002e90:	4603      	mov	r3, r0
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	429c      	cmp	r4, r3
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}

08002ea6 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8002ea6:	b590      	push	{r4, r7, lr}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f8df 	bl	8003076 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 8002eb8:	4604      	mov	r4, r0
 8002eba:	68b8      	ldr	r0, [r7, #8]
 8002ebc:	f000 f8db 	bl	8003076 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	f000 f8e0 	bl	800308c <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 8002ecc:	4603      	mov	r3, r0
				      std::__miter_base(__last), __result);
    }
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}

08002ed6 <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4619      	mov	r1, r3
 8002eee:	68b8      	ldr	r0, [r7, #8]
 8002ef0:	f01e f9e8 	bl	80212c4 <_ZdlPvj>
      }
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_ZNSt12_Destroy_auxILb1EE9__destroyIP21CANData_HandleTypeDefEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f8d3 	bl	80030ce <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8002f28:	4603      	mov	r3, r0
    }
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002f48:	b5b0      	push	{r4, r5, r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff fee0 	bl	8002d1a <_ZSt7forwardI21CANData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 8002f5a:	4605      	mov	r5, r0
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	201c      	movs	r0, #28
 8002f62:	f7fe ffe0 	bl	8001f26 <_ZnwjPv>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461c      	mov	r4, r3
 8002f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bdb0      	pop	{r4, r5, r7, pc}

08002f7e <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f8e1 	bl	8003150 <_ZNKSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 f8c1 	bl	8003118 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	109b      	asrs	r3, r3, #2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <_ZNKSt6vectorI21CANData_HandleTypeDefSaIS0_EE4sizeEv+0x28>)
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	b6db6db7 	.word	0xb6db6db7

08002fcc <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d201      	bcs.n	8002fe6 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	e000      	b.n	8002fe8 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002fe6:	687b      	ldr	r3, [r7, #4]
    }
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <_ZNSt16allocator_traitsISaI21CANData_HandleTypeDefEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002ffe:	2200      	movs	r2, #0
 8003000:	6839      	ldr	r1, [r7, #0]
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f8af 	bl	8003166 <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE8allocateEjPKv>
 8003008:	4603      	mov	r3, r0
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f8be 	bl	80031a8 <_ZSt12__relocate_aIP21CANData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 800302c:	4603      	mov	r3, r0
      }
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <_ZSt32__make_move_if_noexcept_iteratorI21CANData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800303e:	f107 030c 	add.w	r3, r7, #12
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	f000 f8cc 	bl	80031e2 <_ZNSt13move_iteratorIP21CANData_HandleTypeDefEC1ES1_>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP21CANData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f8cd 	bl	8003206 <_ZSt18uninitialized_copyISt13move_iteratorIP21CANData_HandleTypeDefES2_ET0_T_S5_S4_>
 800306c:	4603      	mov	r3, r0
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>:
    __miter_base(_Iterator __it)
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800308c:	b5b0      	push	{r4, r5, r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f8c6 	bl	800322a <_ZSt12__niter_baseIP21CANData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800309e:	4604      	mov	r4, r0
 80030a0:	68b8      	ldr	r0, [r7, #8]
 80030a2:	f000 f8c2 	bl	800322a <_ZSt12__niter_baseIP21CANData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80030a6:	4605      	mov	r5, r0
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f8be 	bl	800322a <_ZSt12__niter_baseIP21CANData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	4629      	mov	r1, r5
 80030b4:	4620      	mov	r0, r4
 80030b6:	f000 f8c6 	bl	8003246 <_ZSt14__copy_move_a1ILb1EP21CANData_HandleTypeDefS1_ET1_T0_S3_S2_>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8d2 	bl	8003268 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 80030c4:	4603      	mov	r3, r0
    }
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bdb0      	pop	{r4, r5, r7, pc}

080030ce <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b086      	sub	sp, #24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68f9      	ldr	r1, [r7, #12]
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f01f fa5c 	bl	80225ac <memmove>
	  return __result + _Num;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4413      	add	r3, r2
	}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <_ZSt12__niter_baseIP21CANData_HandleTypeDefET_S2_>:
    __niter_base(_Iterator __it)
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
    { return __it; }
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <_ZNSt6vectorI21CANData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8003122:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f8bb 	bl	80032a0 <_ZNSt16allocator_traitsISaI21CANData_HandleTypeDefEE8max_sizeERKS1_>
 800312a:	4603      	mov	r3, r0
 800312c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800312e:	f107 0208 	add.w	r2, r7, #8
 8003132:	f107 030c 	add.w	r3, r7, #12
 8003136:	4611      	mov	r1, r2
 8003138:	4618      	mov	r0, r3
 800313a:	f000 f8bd 	bl	80032b8 <_ZSt3minIjERKT_S2_S2_>
 800313e:	4603      	mov	r3, r0
 8003140:	681b      	ldr	r3, [r3, #0]
      }
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	04924924 	.word	0x04924924

08003150 <_ZNKSt12_Vector_baseI21CANData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f8b4 	bl	80032e0 <_ZNK9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE11_M_max_sizeEv>
 8003178:	4602      	mov	r2, r0
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4293      	cmp	r3, r2
 800317e:	bf8c      	ite	hi
 8003180:	2301      	movhi	r3, #1
 8003182:	2300      	movls	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <_ZN9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800318a:	f01e f8c0 	bl	802130e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4618      	mov	r0, r3
 800319a:	f01e f8a4 	bl	80212e6 <_Znwj>
 800319e:	4603      	mov	r3, r0
      }
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <_ZSt12__relocate_aIP21CANData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80031a8:	b5b0      	push	{r4, r5, r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7ff ffa3 	bl	8003102 <_ZSt12__niter_baseIP21CANData_HandleTypeDefET_S2_>
 80031bc:	4604      	mov	r4, r0
 80031be:	68b8      	ldr	r0, [r7, #8]
 80031c0:	f7ff ff9f 	bl	8003102 <_ZSt12__niter_baseIP21CANData_HandleTypeDefET_S2_>
 80031c4:	4605      	mov	r5, r0
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ff9b 	bl	8003102 <_ZSt12__niter_baseIP21CANData_HandleTypeDefET_S2_>
 80031cc:	4602      	mov	r2, r0
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	4629      	mov	r1, r5
 80031d2:	4620      	mov	r0, r4
 80031d4:	f000 f892 	bl	80032fc <_ZSt14__relocate_a_1IP21CANData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 80031d8:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bdb0      	pop	{r4, r5, r7, pc}

080031e2 <_ZNSt13move_iteratorIP21CANData_HandleTypeDefEC1ES1_>:
      move_iterator(iterator_type __i)
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80031ec:	463b      	mov	r3, r7
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f8aa 	bl	8003348 <_ZSt4moveIRP21CANData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 80031f4:	4603      	mov	r3, r0
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <_ZSt18uninitialized_copyISt13move_iteratorIP21CANData_HandleTypeDefES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f89f 	bl	800335e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP21CANData_HandleTypeDefES4_EET0_T_S7_S6_>
 8003220:	4603      	mov	r3, r0
    }
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <_ZSt12__niter_baseIP21CANData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8003232:	1d3b      	adds	r3, r7, #4
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff faed 	bl	8002814 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800323a:	4603      	mov	r3, r0
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <_ZSt14__copy_move_a1ILb1EP21CANData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f8b0 	bl	80033bc <_ZSt14__copy_move_a2ILb1EP21CANData_HandleTypeDefS1_ET1_T0_S3_S2_>
 800325c:	4603      	mov	r3, r0
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>:
    __niter_wrap(_From __from, _To __res)
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ffd9 	bl	800322a <_ZSt12__niter_baseIP21CANData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003278:	4602      	mov	r2, r0
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	109b      	asrs	r3, r3, #2
 8003280:	4a06      	ldr	r2, [pc, #24]	; (800329c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_+0x34>)
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	461a      	mov	r2, r3
 8003288:	1d3b      	adds	r3, r7, #4
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fb1b 	bl	80028c8 <_ZNK9__gnu_cxx17__normal_iteratorIP21CANData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8003292:	4603      	mov	r3, r0
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	b6db6db7 	.word	0xb6db6db7

080032a0 <_ZNSt16allocator_traitsISaI21CANData_HandleTypeDefEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f897 	bl	80033dc <_ZNK9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE8max_sizeEv>
 80032ae:	4603      	mov	r3, r0
      }
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d201      	bcs.n	80032d2 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	e000      	b.n	80032d4 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80032d2:	687b      	ldr	r3, [r7, #4]
    }
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <_ZNK9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <_ZNK9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	04924924 	.word	0x04924924

080032fc <_ZSt14__relocate_a_1IP21CANData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	429a      	cmp	r2, r3
 8003314:	d013      	beq.n	800333e <_ZSt14__relocate_a_1IP21CANData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f000 f86c 	bl	80033f4 <_ZSt11__addressofI21CANData_HandleTypeDefEPT_RS1_>
 800331c:	4604      	mov	r4, r0
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f868 	bl	80033f4 <_ZSt11__addressofI21CANData_HandleTypeDefEPT_RS1_>
 8003324:	4603      	mov	r3, r0
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	4619      	mov	r1, r3
 800332a:	4620      	mov	r0, r4
 800332c:	f000 f86d 	bl	800340a <_ZSt19__relocate_object_aI21CANData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	331c      	adds	r3, #28
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	331c      	adds	r3, #28
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	e7e7      	b.n	800330e <_ZSt14__relocate_a_1IP21CANData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 800333e:	697b      	ldr	r3, [r7, #20]
    }
 8003340:	4618      	mov	r0, r3
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	bd90      	pop	{r4, r7, pc}

08003348 <_ZSt4moveIRP21CANData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP21CANData_HandleTypeDefES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800335e:	b590      	push	{r4, r7, lr}
 8003360:	b087      	sub	sp, #28
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800336e:	f107 0208 	add.w	r2, r7, #8
 8003372:	f107 030c 	add.w	r3, r7, #12
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f861 	bl	8003440 <_ZStneIP21CANData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d016      	beq.n	80033b2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP21CANData_HandleTypeDefES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8003384:	6978      	ldr	r0, [r7, #20]
 8003386:	f000 f835 	bl	80033f4 <_ZSt11__addressofI21CANData_HandleTypeDefEPT_RS1_>
 800338a:	4604      	mov	r4, r0
 800338c:	f107 030c 	add.w	r3, r7, #12
 8003390:	4618      	mov	r0, r3
 8003392:	f000 f877 	bl	8003484 <_ZNKSt13move_iteratorIP21CANData_HandleTypeDefEdeEv>
 8003396:	4603      	mov	r3, r0
 8003398:	4619      	mov	r1, r3
 800339a:	4620      	mov	r0, r4
 800339c:	f000 f87e 	bl	800349c <_ZSt10_ConstructI21CANData_HandleTypeDefJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80033a0:	f107 030c 	add.w	r3, r7, #12
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 f85c 	bl	8003462 <_ZNSt13move_iteratorIP21CANData_HandleTypeDefEppEv>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	331c      	adds	r3, #28
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e7dd      	b.n	800336e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP21CANData_HandleTypeDefES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 80033b2:	697b      	ldr	r3, [r7, #20]
	}
 80033b4:	4618      	mov	r0, r3
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd90      	pop	{r4, r7, pc}

080033bc <_ZSt14__copy_move_a2ILb1EP21CANData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f87f 	bl	80034d0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI21CANData_HandleTypeDefEEPT_PKS4_S7_S5_>
 80033d2:	4603      	mov	r3, r0
    }
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <_ZNK9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ff7b 	bl	80032e0 <_ZNK9__gnu_cxx13new_allocatorI21CANData_HandleTypeDefE11_M_max_sizeEv>
 80033ea:	4603      	mov	r3, r0
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <_ZSt11__addressofI21CANData_HandleTypeDefEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <_ZSt19__relocate_object_aI21CANData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8003416:	68b8      	ldr	r0, [r7, #8]
 8003418:	f7ff fa71 	bl	80028fe <_ZSt4moveIR21CANData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>
 800341c:	4603      	mov	r3, r0
 800341e:	461a      	mov	r2, r3
 8003420:	68f9      	ldr	r1, [r7, #12]
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff fc66 	bl	8002cf4 <_ZNSt16allocator_traitsISaI21CANData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8003428:	68b8      	ldr	r0, [r7, #8]
 800342a:	f7ff ffe3 	bl	80033f4 <_ZSt11__addressofI21CANData_HandleTypeDefEPT_RS1_>
 800342e:	4603      	mov	r3, r0
 8003430:	4619      	mov	r1, r3
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff fc51 	bl	8002cda <_ZNSt16allocator_traitsISaI21CANData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
    }
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <_ZStneIP21CANData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800344a:	6839      	ldr	r1, [r7, #0]
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f869 	bl	8003524 <_ZSteqIP21CANData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 8003452:	4603      	mov	r3, r0
 8003454:	f083 0301 	eor.w	r3, r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <_ZNSt13move_iteratorIP21CANData_HandleTypeDefEppEv>:
      operator++()
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
	++_M_current;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f103 021c 	add.w	r2, r3, #28
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	601a      	str	r2, [r3, #0]
	return *this;
 8003476:	687b      	ldr	r3, [r7, #4]
      }
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <_ZNKSt13move_iteratorIP21CANData_HandleTypeDefEdeEv>:
      operator*() const
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <_ZSt10_ConstructI21CANData_HandleTypeDefJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800349c:	b5b0      	push	{r4, r5, r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 80034a6:	6838      	ldr	r0, [r7, #0]
 80034a8:	f7ff fc37 	bl	8002d1a <_ZSt7forwardI21CANData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 80034ac:	4605      	mov	r5, r0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4619      	mov	r1, r3
 80034b2:	201c      	movs	r0, #28
 80034b4:	f7fe fd37 	bl	8001f26 <_ZnwjPv>
 80034b8:	4603      	mov	r3, r0
 80034ba:	461c      	mov	r4, r3
 80034bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bdb0      	pop	{r4, r5, r7, pc}

080034d0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI21CANData_HandleTypeDefEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	109b      	asrs	r3, r3, #2
 80034e4:	4a0e      	ldr	r2, [pc, #56]	; (8003520 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI21CANData_HandleTypeDefEEPT_PKS4_S7_S5_+0x50>)
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI21CANData_HandleTypeDefEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	461a      	mov	r2, r3
 80034fe:	68f9      	ldr	r1, [r7, #12]
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f01f f853 	bl	80225ac <memmove>
	  return __result + _Num;
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	461a      	mov	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4413      	add	r3, r2
	}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	b6db6db7 	.word	0xb6db6db7

08003524 <_ZSteqIP21CANData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f80e 	bl	8003550 <_ZNKSt13move_iteratorIP21CANData_HandleTypeDefE4baseEv>
 8003534:	4604      	mov	r4, r0
 8003536:	6838      	ldr	r0, [r7, #0]
 8003538:	f000 f80a 	bl	8003550 <_ZNKSt13move_iteratorIP21CANData_HandleTypeDefE4baseEv>
 800353c:	4603      	mov	r3, r0
 800353e:	429c      	cmp	r4, r3
 8003540:	bf0c      	ite	eq
 8003542:	2301      	moveq	r3, #1
 8003544:	2300      	movne	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bd90      	pop	{r4, r7, pc}

08003550 <_ZNKSt13move_iteratorIP21CANData_HandleTypeDefE4baseEv>:
      base() const
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003576:	d205      	bcs.n	8003584 <_ZSt16__deque_buf_sizej+0x1c>
 8003578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003582:	e000      	b.n	8003586 <_ZSt16__deque_buf_sizej+0x1e>
 8003584:	2301      	movs	r3, #1
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <_ZNSt12_Vector_baseItSaItEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f9ef 	bl	800397e <_ZNSaItED1Ev>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <_ZNSt12_Vector_baseItSaItEEC1Ev>:
      _Vector_base() = default;
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 f9d2 	bl	800395e <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1Ev>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <_ZNSt6vectorItSaItEEC1Ev>:
      vector() = default;
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff ffeb 	bl	80035aa <_ZNSt12_Vector_baseItSaItEEC1Ev>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <_ZNSt5queueItSt5dequeItSaItEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fa29 	bl	8003a40 <_ZNSt5dequeItSaItEED1Ev>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <_ZN12PNFPosSensorC1Ev>:

#include "PNFPosSensor.h"
#include "transmit_tools/transmit_tools.h"


PNFPosSensor::PNFPosSensor(){};
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	4a1d      	ldr	r2, [pc, #116]	; (8003678 <_ZN12PNFPosSensorC1Ev+0x80>)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2205      	movs	r2, #5
 800360a:	80da      	strh	r2, [r3, #6]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	811a      	strh	r2, [r3, #8]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	841a      	strh	r2, [r3, #32]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003642:	875a      	strh	r2, [r3, #58]	; 0x3a
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	649a      	str	r2, [r3, #72]	; 0x48
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	334c      	adds	r3, #76	; 0x4c
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ffb5 	bl	80035c4 <_ZNSt6vectorItSaItEEC1Ev>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	335c      	adds	r3, #92	; 0x5c
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff ffb0 	bl	80035c4 <_ZNSt6vectorItSaItEEC1Ev>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3368      	adds	r3, #104	; 0x68
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f9d5 	bl	8003a18 <_ZNSt5queueItSt5dequeItSaItEEEC1IS2_vEEv>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	08027228 	.word	0x08027228

0800367c <_ZN12PNFPosSensorD1Ev>:
PNFPosSensor::~PNFPosSensor(){};
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	4a0b      	ldr	r2, [pc, #44]	; (80036b4 <_ZN12PNFPosSensorD1Ev+0x38>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3368      	adds	r3, #104	; 0x68
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff ffa5 	bl	80035de <_ZNSt5queueItSt5dequeItSaItEEED1Ev>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	335c      	adds	r3, #92	; 0x5c
 8003698:	4618      	mov	r0, r3
 800369a:	f000 f995 	bl	80039c8 <_ZNSt6vectorItSaItEED1Ev>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	334c      	adds	r3, #76	; 0x4c
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f990 	bl	80039c8 <_ZNSt6vectorItSaItEED1Ev>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	08027228 	.word	0x08027228

080036b8 <_ZN12PNFPosSensor19TransmitSendRequestEv>:


//---------------------------------------------------------------send or read functions
uint16_t PNFPosSensor::TransmitSendRequest()
{
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	unsigned char temp_data_ =  RequestCmd[RequestQueue.front()];
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3368      	adds	r3, #104	; 0x68
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f9dd 	bl	8003a8a <_ZNSt5queueItSt5dequeItSaItEEE5frontEv>
 80036d0:	4603      	mov	r3, r0
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	4619      	mov	r1, r3
 80036d6:	4620      	mov	r0, r4
 80036d8:	f000 f9e4 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 80036dc:	4603      	mov	r3, r0
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	73fb      	strb	r3, [r7, #15]
	unsigned char temp_data_rev = ~temp_data_;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	73bb      	strb	r3, [r7, #14]
	unsigned char address_data[3]= {temp_data_, temp_data_rev, 0x00};
 80036e8:	f107 0308 	add.w	r3, r7, #8
 80036ec:	2100      	movs	r1, #0
 80036ee:	460a      	mov	r2, r1
 80036f0:	801a      	strh	r2, [r3, #0]
 80036f2:	460a      	mov	r2, r1
 80036f4:	709a      	strb	r2, [r3, #2]
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	723b      	strb	r3, [r7, #8]
 80036fa:	7bbb      	ldrb	r3, [r7, #14]
 80036fc:	727b      	strb	r3, [r7, #9]

	if(this->comm_dir_available_ == true) HAL_GPIO_WritePin(this->GPIO_, (uint16_t)this->dir_pin_no_, GPIO_PIN_SET);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003704:	2b01      	cmp	r3, #1
 8003706:	d108      	bne.n	800371a <_ZN12PNFPosSensor19TransmitSendRequestEv+0x62>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003712:	2201      	movs	r2, #1
 8003714:	4619      	mov	r1, r3
 8003716:	f008 fca9 	bl	800c06c <HAL_GPIO_WritePin>

	return HAL_UsartTransmit(this->huartx_, address_data, (sizeof(address_data)/sizeof(address_data[0])));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371e:	f107 0108 	add.w	r1, r7, #8
 8003722:	2203      	movs	r2, #3
 8003724:	4618      	mov	r0, r3
 8003726:	f005 f847 	bl	80087b8 <_Z17HAL_UsartTransmitP20__UART_HandleTypeDefPhi>
 800372a:	4603      	mov	r3, r0
 800372c:	b29b      	uxth	r3, r3
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	bd90      	pop	{r4, r7, pc}

08003736 <_ZN12PNFPosSensor23TransmitReceiveResponseEv>:


uint16_t PNFPosSensor::TransmitReceiveResponse()
{
 8003736:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
		return HAL_OK;
	}
	else
	{
		return HAL_TIMEOUT;
	}
 8003740:	466b      	mov	r3, sp
 8003742:	461e      	mov	r6, r3
	unsigned char tempdata[this->max_read_buf_size_] = {0,};
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800374a:	1e59      	subs	r1, r3, #1
 800374c:	6139      	str	r1, [r7, #16]
 800374e:	460b      	mov	r3, r1
 8003750:	3301      	adds	r3, #1
 8003752:	2200      	movs	r2, #0
 8003754:	4698      	mov	r8, r3
 8003756:	4691      	mov	r9, r2
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003764:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003768:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800376c:	460b      	mov	r3, r1
 800376e:	3301      	adds	r3, #1
 8003770:	2200      	movs	r2, #0
 8003772:	461c      	mov	r4, r3
 8003774:	4615      	mov	r5, r2
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	00eb      	lsls	r3, r5, #3
 8003780:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003784:	00e2      	lsls	r2, r4, #3
 8003786:	460b      	mov	r3, r1
 8003788:	3301      	adds	r3, #1
 800378a:	3307      	adds	r3, #7
 800378c:	08db      	lsrs	r3, r3, #3
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	ebad 0d03 	sub.w	sp, sp, r3
 8003794:	466b      	mov	r3, sp
 8003796:	3300      	adds	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	1e4b      	subs	r3, r1, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	db04      	blt.n	80037b2 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0x7c>
 80037a8:	2100      	movs	r1, #0
 80037aa:	7011      	strb	r1, [r2, #0]
 80037ac:	3201      	adds	r2, #1
 80037ae:	3b01      	subs	r3, #1
 80037b0:	e7f8      	b.n	80037a4 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0x6e>
	if(this->comm_dir_available_ == true) HAL_GPIO_WritePin(this->GPIO_, (uint16_t)this->dir_pin_no_, GPIO_PIN_RESET);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d108      	bne.n	80037ce <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0x98>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037c6:	2200      	movs	r2, #0
 80037c8:	4619      	mov	r1, r3
 80037ca:	f008 fc4f 	bl	800c06c <HAL_GPIO_WritePin>
	if(HAL_UsartReceive(this->huartx_, tempdata, this->max_read_buf_size_) == HAL_OK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037d8:	461a      	mov	r2, r3
 80037da:	68f9      	ldr	r1, [r7, #12]
 80037dc:	f004 fffe 	bl	80087dc <_Z16HAL_UsartReceiveP20__UART_HandleTypeDefPht>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bf0c      	ite	eq
 80037e6:	2301      	moveq	r3, #1
 80037e8:	2300      	movne	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d017      	beq.n	8003820 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xea>
		for(int i = 0; i<this->max_read_buf_size_; i++)
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037fa:	461a      	mov	r2, r3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	4293      	cmp	r3, r2
 8003800:	da0c      	bge.n	800381c <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xe6>
			this->pos_buf_.emplace_back(tempdata[i]);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	4413      	add	r3, r2
 800380e:	4619      	mov	r1, r3
 8003810:	f000 f958 	bl	8003ac4 <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_>
		for(int i = 0; i<this->max_read_buf_size_; i++)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	3301      	adds	r3, #1
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	e7eb      	b.n	80037f4 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xbe>
		return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xec>
		return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	46b5      	mov	sp, r6
}
 8003824:	4618      	mov	r0, r3
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800382e <_ZN12PNFPosSensor16QueueSaveRequestEt>:


//---------------------------------------------------------------Command queue functions
//queue system functions
void PNFPosSensor::QueueSaveRequest(uint16_t cmd){this->RequestQueue.push(cmd);}
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	807b      	strh	r3, [r7, #2]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3368      	adds	r3, #104	; 0x68
 800383e:	1cba      	adds	r2, r7, #2
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f96c 	bl	8003b20 <_ZNSt5queueItSt5dequeItSaItEEE4pushERKt>
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <_ZN12PNFPosSensor18QueueDeleteRequestEv>:
void PNFPosSensor::QueueDeleteRequest()
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	if(this->now_filter_cnt_ == 0) this->RequestQueue.pop();
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	891b      	ldrh	r3, [r3, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d104      	bne.n	800386a <_ZN12PNFPosSensor18QueueDeleteRequestEv+0x1a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3368      	adds	r3, #104	; 0x68
 8003864:	4618      	mov	r0, r3
 8003866:	f000 f969 	bl	8003b3c <_ZNSt5queueItSt5dequeItSaItEEE3popEv>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <_ZN12PNFPosSensor14IsInfoFilteredEv>:


//---------------------------------------------------------------filter functions

bool PNFPosSensor::IsInfoFiltered()
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
	return (this->now_filter_cnt_>= this->max_filter_cnt_);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	891a      	ldrh	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	88db      	ldrh	r3, [r3, #6]
 8003882:	429a      	cmp	r2, r3
 8003884:	bf2c      	ite	cs
 8003886:	2301      	movcs	r3, #1
 8003888:	2300      	movcc	r3, #0
 800388a:	b2db      	uxtb	r3, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <_ZN12PNFPosSensor10IsWorkDoneEv>:

bool PNFPosSensor::IsWorkDone()
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	return !(this->now_filter_cnt_ == 0);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	891b      	ldrh	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <_ZN12PNFPosSensor13FilterCountUpEv>:


void PNFPosSensor::FilterCountUp()
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
	if(this->now_filter_cnt_< this->max_filter_cnt_) this->now_filter_cnt_++;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	891a      	ldrh	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	88db      	ldrh	r3, [r3, #6]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d205      	bcs.n	80038da <_ZN12PNFPosSensor13FilterCountUpEv+0x20>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	891b      	ldrh	r3, [r3, #8]
 80038d2:	3301      	adds	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	811a      	strh	r2, [r3, #8]
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <_ZN12PNFPosSensor16FilterCountResetEv>:

void PNFPosSensor::FilterCountReset()
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
	this->now_filter_cnt_ = 0;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	811a      	strh	r2, [r3, #8]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <_ZN12PNFPosSensor7IsErrUpEv>:


//---------------------------------------------------------------public main functions
bool PNFPosSensor::IsErrUp()
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	if(this->err_code_ >= 1) return true;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8c1b      	ldrh	r3, [r3, #32]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <_ZN12PNFPosSensor7IsErrUpEv+0x14>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <_ZN12PNFPosSensor7IsErrUpEv+0x16>
	else return false;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <_ZN12PNFPosSensor5DriveEv>:


bool PNFPosSensor::Drive()
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
	DriveInit();
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3308      	adds	r3, #8
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3

	DriveComm();
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3

	DriveAnalysis();
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3310      	adds	r3, #16
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3

	return IsWorkDone();
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ffa2 	bl	8003898 <_ZN12PNFPosSensor10IsWorkDoneEv>
 8003954:	4603      	mov	r3, r0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f8f4 	bl	8003b54 <_ZNSaItEC1Ev>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f8fc 	bl	8003b6c <_ZNSt12_Vector_baseItSaItEE17_Vector_impl_dataC1Ev>
	{ }
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <_ZNSaItED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f904 	bl	8003b94 <_ZN9__gnu_cxx13new_allocatorItED1Ev>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <_ZNSt12_Vector_baseItSaItEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	105b      	asrs	r3, r3, #1
	_M_deallocate(_M_impl._M_start,
 80039ae:	461a      	mov	r2, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f8fa 	bl	8003baa <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
      }
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fdea 	bl	8003592 <_ZNSt12_Vector_baseItSaItEE12_Vector_implD1Ev>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <_ZNSt6vectorItSaItEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80039c8:	b5b0      	push	{r4, r5, r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681c      	ldr	r4, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 f8f8 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80039e0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80039e2:	461a      	mov	r2, r3
 80039e4:	4629      	mov	r1, r5
 80039e6:	4620      	mov	r0, r4
 80039e8:	f000 f8fd 	bl	8003be6 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
      }
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ffd1 	bl	8003996 <_ZNSt12_Vector_baseItSaItEED1Ev>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bdb0      	pop	{r4, r5, r7, pc}

080039fe <_ZNSt5dequeItSaItEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 f906 	bl	8003c1a <_ZNSt11_Deque_baseItSaItEEC1Ev>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <_ZNSt5queueItSt5dequeItSaItEEEC1IS2_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	: c() { }
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4618      	mov	r0, r3
 8003a24:	2328      	movs	r3, #40	; 0x28
 8003a26:	461a      	mov	r2, r3
 8003a28:	2100      	movs	r1, #0
 8003a2a:	f01e fdd9 	bl	80225e0 <memset>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ffe4 	bl	80039fe <_ZNSt5dequeItSaItEEC1Ev>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <_ZNSt5dequeItSaItEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	; 0x28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8003a48:	f107 0308 	add.w	r3, r7, #8
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f916 	bl	8003c80 <_ZNSt5dequeItSaItEE5beginEv>
 8003a54:	f107 0318 	add.w	r3, r7, #24
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f91f 	bl	8003c9e <_ZNSt5dequeItSaItEE3endEv>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f92a 	bl	8003cbc <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f107 0218 	add.w	r2, r7, #24
 8003a6e:	f107 0108 	add.w	r1, r7, #8
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f949 	bl	8003d0a <_ZNSt5dequeItSaItEE15_M_destroy_dataESt15_Deque_iteratorItRtPtES5_RKS0_>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f8de 	bl	8003c3c <_ZNSt11_Deque_baseItSaItEED1Ev>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4618      	mov	r0, r3
 8003a84:	3728      	adds	r7, #40	; 0x28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <_ZNSt5queueItSt5dequeItSaItEEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %queue.
       */
      reference
      front()
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.front();
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 f945 	bl	8003d24 <_ZNSt5dequeItSaItEE5frontEv>
 8003a9a:	4603      	mov	r3, r0
      }
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <_ZNSt6vectorItSaItEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	4413      	add	r3, r2
      }
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8003ac4:	b5b0      	push	{r4, r5, r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d011      	beq.n	8003afe <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003ada:	687c      	ldr	r4, [r7, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685d      	ldr	r5, [r3, #4]
 8003ae0:	6838      	ldr	r0, [r7, #0]
 8003ae2:	f000 f933 	bl	8003d4c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4629      	mov	r1, r5
 8003aec:	4620      	mov	r0, r4
 8003aee:	f000 f938 	bl	8003d62 <_ZNSt16allocator_traitsISaItEE9constructItJRhEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	1c9a      	adds	r2, r3, #2
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	605a      	str	r2, [r3, #4]
      }
 8003afc:	e00c      	b.n	8003b18 <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f942 	bl	8003d88 <_ZNSt6vectorItSaItEE3endEv>
 8003b04:	4604      	mov	r4, r0
 8003b06:	6838      	ldr	r0, [r7, #0]
 8003b08:	f000 f920 	bl	8003d4c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4621      	mov	r1, r4
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f960 	bl	8003dd8 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
      }
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bdb0      	pop	{r4, r5, r7, pc}

08003b20 <_ZNSt5queueItSt5dequeItSaItEEE4pushERKt>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6839      	ldr	r1, [r7, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fa0e 	bl	8003f50 <_ZNSt5dequeItSaItEE9push_backERKt>
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <_ZNSt5queueItSt5dequeItSaItEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fa23 	bl	8003f92 <_ZNSt5dequeItSaItEE9pop_frontEv>
      }
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <_ZNSaItEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fa3b 	bl	8003fd8 <_ZN9__gnu_cxx13new_allocatorItEC1Ev>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <_ZNSt12_Vector_baseItSaItEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]
	{ }
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <_ZN9__gnu_cxx13new_allocatorItED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>:
      _M_deallocate(pointer __p, size_t __n)
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
	if (__p)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fa13 	bl	8003fee <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>
      }
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fa09 	bl	800400c <_ZSt8_DestroyIPtEvT_S1_>
    }
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <_ZNSt11_Deque_baseItSaItEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff feb7 	bl	800397e <_ZNSaItED1Ev>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <_ZNSt11_Deque_baseItSaItEEC1Ev>:
      _Deque_base()
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f9fe 	bl	8004026 <_ZNSt11_Deque_baseItSaItEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fa0a 	bl	8004046 <_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEj>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <_ZNSt11_Deque_baseItSaItEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d010      	beq.n	8003c6e <_ZNSt11_Deque_baseItSaItEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003c54:	3304      	adds	r3, #4
 8003c56:	461a      	mov	r2, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fa57 	bl	800410c <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	461a      	mov	r2, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fa69 	bl	8004140 <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>
    }
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ffc6 	bl	8003c02 <_ZNSt11_Deque_baseItSaItEE11_Deque_implD1Ev>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <_ZNSt5dequeItSaItEE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f81e 	bl	8003cd2 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <_ZNSt5dequeItSaItEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	3318      	adds	r3, #24
 8003cac:	4619      	mov	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f80f 	bl	8003cd2 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	60da      	str	r2, [r3, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <_ZNSt5dequeItSaItEE15_M_destroy_dataESt15_Deque_iteratorItRtPtES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8003d0a:	b480      	push	{r7}
 8003d0c:	b08d      	sub	sp, #52	; 0x34
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8003d18:	bf00      	nop
 8003d1a:	3734      	adds	r7, #52	; 0x34
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <_ZNSt5dequeItSaItEE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	return *begin();
 8003d2c:	f107 0308 	add.w	r3, r7, #8
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff ffa4 	bl	8003c80 <_ZNSt5dequeItSaItEE5beginEv>
 8003d38:	f107 0308 	add.w	r3, r7, #8
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fa1b 	bl	8004178 <_ZNKSt15_Deque_iteratorItRtPtEdeEv>
 8003d42:	4603      	mov	r3, r0
      }
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <_ZNSt16allocator_traitsISaItEE9constructItJRhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff ffec 	bl	8003d4c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003d74:	4603      	mov	r3, r0
 8003d76:	461a      	mov	r2, r3
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fa08 	bl	8004190 <_ZN9__gnu_cxx13new_allocatorItE9constructItJRhEEEvPT_DpOT0_>
	}
 8003d80:	bf00      	nop
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <_ZNSt6vectorItSaItEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	1d1a      	adds	r2, r3, #4
 8003d94:	f107 030c 	add.w	r3, r7, #12
 8003d98:	4611      	mov	r1, r2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fa10 	bl	80041c0 <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <_ZNSt6vectorItSaItEE15_S_use_relocateEv>:
      _S_use_relocate()
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 f805 	bl	8003dc0 <_ZNSt6vectorItSaItEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8003db6:	4603      	mov	r3, r0
      }
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <_ZNSt6vectorItSaItEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8003dc8:	2301      	movs	r3, #1
      }
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8003dd8:	b5b0      	push	{r4, r5, r7, lr}
 8003dda:	b08c      	sub	sp, #48	; 0x30
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8003de4:	4a59      	ldr	r2, [pc, #356]	; (8003f4c <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x174>)
 8003de6:	2101      	movs	r1, #1
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f9f9 	bl	80041e0 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>
 8003dee:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fa36 	bl	800426e <_ZNSt6vectorItSaItEE5beginEv>
 8003e02:	4603      	mov	r3, r0
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	f107 0214 	add.w	r2, r7, #20
 8003e0a:	f107 0308 	add.w	r3, r7, #8
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fa3c 	bl	800428e <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8003e16:	4603      	mov	r3, r0
 8003e18:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fa4a 	bl	80042b8 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8003e24:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8003e2a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
	  _Alloc_traits::construct(this->_M_impl,
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	18d5      	adds	r5, r2, r3
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff ff89 	bl	8003d4c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4629      	mov	r1, r5
 8003e40:	4620      	mov	r0, r4
 8003e42:	f7ff ff8e 	bl	8003d62 <_ZNSt16allocator_traitsISaItEE9constructItJRhEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8003e46:	2300      	movs	r3, #0
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8003e4a:	f7ff ffae 	bl	8003daa <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d027      	beq.n	8003ea4 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003e54:	f107 0308 	add.w	r3, r7, #8
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fa55 	bl	8004308 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff feb3 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8003e6a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4621      	mov	r1, r4
 8003e70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e72:	f000 fa35 	bl	80042e0 <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 8003e76:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003e7e:	f107 0308 	add.w	r3, r7, #8
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fa40 	bl	8004308 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff fe9e 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8003e94:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e98:	6a39      	ldr	r1, [r7, #32]
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f000 fa20 	bl	80042e0 <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 8003ea0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003ea2:	e026      	b.n	8003ef2 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8003ea4:	f107 0308 	add.w	r3, r7, #8
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fa2d 	bl	8004308 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fe8b 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8003eba:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ec2:	f000 fa2c 	bl	800431e <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 8003ec6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	3302      	adds	r3, #2
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8003ece:	f107 0308 	add.w	r3, r7, #8
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fa18 	bl	8004308 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fe76 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8003ee4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8003ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee8:	6a39      	ldr	r1, [r7, #32]
 8003eea:	4620      	mov	r0, r4
 8003eec:	f000 fa17 	bl	800431e <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 8003ef0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8003ef2:	f7ff ff5a 	bl	8003daa <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f083 0301 	eor.w	r3, r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff fe63 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6a39      	ldr	r1, [r7, #32]
 8003f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f12:	f7ff fe68 	bl	8003be6 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 8003f16:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	105b      	asrs	r3, r3, #1
      _M_deallocate(__old_start,
 8003f22:	461a      	mov	r2, r3
 8003f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f26:	f7ff fe40 	bl	8003baa <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
      this->_M_impl._M_start = __new_start;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f34:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	441a      	add	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	609a      	str	r2, [r3, #8]
    }
 8003f42:	bf00      	nop
 8003f44:	3730      	adds	r7, #48	; 0x30
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bdb0      	pop	{r4, r5, r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	08023aa4 	.word	0x08023aa4

08003f50 <_ZNSt5dequeItSaItEE9push_backERKt>:
      push_back(const value_type& __x)
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	3b02      	subs	r3, #2
	if (this->_M_impl._M_finish._M_cur
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d00c      	beq.n	8003f82 <_ZNSt5dequeItSaItEE9push_backERKt+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	4619      	mov	r1, r3
 8003f72:	f000 f9fa 	bl	800436a <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	1c9a      	adds	r2, r3, #2
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	619a      	str	r2, [r3, #24]
      }
 8003f80:	e003      	b.n	8003f8a <_ZNSt5dequeItSaItEE9push_backERKt+0x3a>
	  _M_push_back_aux(__x);
 8003f82:	6839      	ldr	r1, [r7, #0]
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fa03 	bl	8004390 <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_>
      }
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_ZNSt5dequeItSaItEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	3b02      	subs	r3, #2
	if (this->_M_impl._M_start._M_cur
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d010      	beq.n	8003fca <_ZNSt5dequeItSaItEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fe86 	bl	8003cbc <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f000 f9c9 	bl	8004350 <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	1c9a      	adds	r2, r3, #2
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	609a      	str	r2, [r3, #8]
      }
 8003fc8:	e002      	b.n	8003fd0 <_ZNSt5dequeItSaItEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fa24 	bl	8004418 <_ZNSt5dequeItSaItEE16_M_pop_front_auxEv>
      }
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <_ZN9__gnu_cxx13new_allocatorItEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fa32 	bl	8004468 <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <_ZSt8_DestroyIPtEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8004016:	6839      	ldr	r1, [r7, #0]
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fa35 	bl	8004488 <_ZNSt12_Destroy_auxILb1EE9__destroyIPtEEvT_S3_>
    }
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <_ZNSt11_Deque_baseItSaItEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fd90 	bl	8003b54 <_ZNSaItEC1Ev>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fa31 	bl	800449e <_ZNSt11_Deque_baseItSaItEE16_Deque_impl_dataC1Ev>
	{ }
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8004046:	b590      	push	{r4, r7, lr}
 8004048:	b089      	sub	sp, #36	; 0x24
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8004050:	2002      	movs	r0, #2
 8004052:	f7ff fa89 	bl	8003568 <_ZSt16__deque_buf_sizej>
 8004056:	4602      	mov	r2, r0
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	fbb3 f3f2 	udiv	r3, r3, r2
 800405e:	3301      	adds	r3, #1
 8004060:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8004062:	2308      	movs	r3, #8
 8004064:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3302      	adds	r3, #2
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	f107 0210 	add.w	r2, r7, #16
 8004070:	f107 030c 	add.w	r3, r7, #12
 8004074:	4611      	mov	r1, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe ffa8 	bl	8002fcc <_ZSt3maxIjERKT_S2_S2_>
 800407c:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fa20 	bl	80044d0 <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>
 8004090:	4602      	mov	r2, r0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6859      	ldr	r1, [r3, #4]
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	1acb      	subs	r3, r1, r3
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80040a6:	4413      	add	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4413      	add	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	69b9      	ldr	r1, [r7, #24]
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fa26 	bl	800450a <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3308      	adds	r3, #8
 80040c2:	69b9      	ldr	r1, [r7, #24]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fa3a 	bl	800453e <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f103 0218 	add.w	r2, r3, #24
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	3b04      	subs	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f000 fa31 	bl	800453e <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80040e8:	2002      	movs	r0, #2
 80040ea:	f7ff fa3d 	bl	8003568 <_ZSt16__deque_buf_sizej>
 80040ee:	4602      	mov	r2, r0
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80040f6:	fb01 f202 	mul.w	r2, r1, r2
 80040fa:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	619a      	str	r2, [r3, #24]
    }
 8004104:	bf00      	nop
 8004106:	3724      	adds	r7, #36	; 0x24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd90      	pop	{r4, r7, pc}

0800410c <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_>:
    _Deque_base<_Tp, _Alloc>::
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	429a      	cmp	r2, r3
 8004122:	d209      	bcs.n	8004138 <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_+0x2c>
	_M_deallocate_node(*__n);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4619      	mov	r1, r3
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 fa20 	bl	8004570 <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3304      	adds	r3, #4
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e7f1      	b.n	800411c <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_+0x10>
    }
 8004138:	bf00      	nop
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800414c:	f107 0314 	add.w	r3, r7, #20
 8004150:	68f9      	ldr	r1, [r7, #12]
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fa1f 	bl	8004596 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8004158:	f107 0314 	add.w	r3, r7, #20
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fa35 	bl	80045d0 <_ZNSt16allocator_traitsISaIPtEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004166:	f107 0314 	add.w	r3, r7, #20
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fa24 	bl	80045b8 <_ZNSaIPtED1Ev>
      }
 8004170:	bf00      	nop
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <_ZNKSt15_Deque_iteratorItRtPtEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <_ZN9__gnu_cxx13new_allocatorItE9constructItJRhEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fdd5 	bl	8003d4c <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80041a2:	4603      	mov	r3, r0
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b29c      	uxth	r4, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4619      	mov	r1, r3
 80041ac:	2002      	movs	r0, #2
 80041ae:	f7fd feba 	bl	8001f26 <_ZnwjPv>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4622      	mov	r2, r4
 80041b6:	801a      	strh	r2, [r3, #0]
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd90      	pop	{r4, r7, pc}

080041c0 <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80041e0:	b590      	push	{r4, r7, lr}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f9fe 	bl	80045ee <_ZNKSt6vectorItSaItEE8max_sizeEv>
 80041f2:	4604      	mov	r4, r0
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fa0b 	bl	8004610 <_ZNKSt6vectorItSaItEE4sizeEv>
 80041fa:	4603      	mov	r3, r0
 80041fc:	1ae2      	subs	r2, r4, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	429a      	cmp	r2, r3
 8004202:	bf34      	ite	cc
 8004204:	2301      	movcc	r3, #1
 8004206:	2300      	movcs	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f01d f883 	bl	802131a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f9fb 	bl	8004610 <_ZNKSt6vectorItSaItEE4sizeEv>
 800421a:	4604      	mov	r4, r0
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f9f7 	bl	8004610 <_ZNKSt6vectorItSaItEE4sizeEv>
 8004222:	4603      	mov	r3, r0
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	f107 0208 	add.w	r2, r7, #8
 800422a:	f107 0310 	add.w	r3, r7, #16
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe fecb 	bl	8002fcc <_ZSt3maxIjERKT_S2_S2_>
 8004236:	4603      	mov	r3, r0
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4423      	add	r3, r4
 800423c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f9e6 	bl	8004610 <_ZNKSt6vectorItSaItEE4sizeEv>
 8004244:	4602      	mov	r2, r0
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4293      	cmp	r3, r2
 800424a:	d306      	bcc.n	800425a <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x7a>
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f9ce 	bl	80045ee <_ZNKSt6vectorItSaItEE8max_sizeEv>
 8004252:	4602      	mov	r2, r0
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	4293      	cmp	r3, r2
 8004258:	d904      	bls.n	8004264 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x84>
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f9c7 	bl	80045ee <_ZNKSt6vectorItSaItEE8max_sizeEv>
 8004260:	4603      	mov	r3, r0
 8004262:	e000      	b.n	8004266 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x86>
 8004264:	697b      	ldr	r3, [r7, #20]
      }
 8004266:	4618      	mov	r0, r3
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	bd90      	pop	{r4, r7, pc}

0800426e <_ZNSt6vectorItSaItEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	f107 030c 	add.w	r3, r7, #12
 800427c:	4611      	mov	r1, r2
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff ff9e 	bl	80041c0 <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800428e:	b590      	push	{r4, r7, lr}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f835 	bl	8004308 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 800429e:	4603      	mov	r3, r0
 80042a0:	681c      	ldr	r4, [r3, #0]
 80042a2:	6838      	ldr	r0, [r7, #0]
 80042a4:	f000 f830 	bl	8004308 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 80042a8:	4603      	mov	r3, r0
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	1ae3      	subs	r3, r4, r3
 80042ae:	105b      	asrs	r3, r3, #1
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd90      	pop	{r4, r7, pc}

080042b8 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d006      	beq.n	80042d6 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj+0x1e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6839      	ldr	r1, [r7, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 f9af 	bl	8004630 <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>
 80042d2:	4603      	mov	r3, r0
 80042d4:	e000      	b.n	80042d8 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj+0x20>
 80042d6:	2300      	movs	r3, #0
      }
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80042e0:	b590      	push	{r4, r7, lr}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80042ee:	f88d 4000 	strb.w	r4, [sp]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f9a8 	bl	800464e <_ZNSt6vectorItSaItEE14_S_do_relocateEPtS2_S2_RS0_St17integral_constantIbLb1EE>
 80042fe:	4603      	mov	r3, r0
      }
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	bd90      	pop	{r4, r7, pc}

08004308 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800431e:	b590      	push	{r4, r7, lr}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
 800432a:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f9a0 	bl	8004672 <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 8004332:	4604      	mov	r4, r0
 8004334:	68b8      	ldr	r0, [r7, #8]
 8004336:	f000 f99c 	bl	8004672 <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 800433a:	4601      	mov	r1, r0
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	4620      	mov	r0, r4
 8004342:	f000 f9a5 	bl	8004690 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>
 8004346:	4603      	mov	r3, r0
    }
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	bd90      	pop	{r4, r7, pc}

08004350 <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800435a:	6839      	ldr	r1, [r7, #0]
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f9a8 	bl	80046b2 <_ZN9__gnu_cxx13new_allocatorItE7destroyItEEvPT_>
	}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f9a6 	bl	80046c8 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 800437c:	4603      	mov	r3, r0
 800437e:	461a      	mov	r2, r3
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f9ab 	bl	80046de <_ZN9__gnu_cxx13new_allocatorItE9constructItJRKtEEEvPT_DpOT0_>
	}
 8004388:	bf00      	nop
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8004390:	b5b0      	push	{r4, r5, r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f9b6 	bl	800470c <_ZNKSt5dequeItSaItEE4sizeEv>
 80043a0:	4604      	mov	r4, r0
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f9c4 	bl	8004730 <_ZNKSt5dequeItSaItEE8max_sizeEv>
 80043a8:	4603      	mov	r3, r0
 80043aa:	429c      	cmp	r4, r3
 80043ac:	bf0c      	ite	eq
 80043ae:	2301      	moveq	r3, #1
 80043b0:	2300      	movne	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_+0x2e>
	  __throw_length_error(
 80043b8:	4816      	ldr	r0, [pc, #88]	; (8004414 <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_+0x84>)
 80043ba:	f01c ffae 	bl	802131a <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 80043be:	2101      	movs	r1, #1
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f9c6 	bl	8004752 <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	1d1c      	adds	r4, r3, #4
 80043ce:	4610      	mov	r0, r2
 80043d0:	f000 f9da 	bl	8004788 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>
 80043d4:	4603      	mov	r3, r0
 80043d6:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 80043d8:	687c      	ldr	r4, [r7, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699d      	ldr	r5, [r3, #24]
 80043de:	6838      	ldr	r0, [r7, #0]
 80043e0:	f000 f972 	bl	80046c8 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 80043e4:	4603      	mov	r3, r0
 80043e6:	461a      	mov	r2, r3
 80043e8:	4629      	mov	r1, r5
 80043ea:	4620      	mov	r0, r4
 80043ec:	f7ff ffbd 	bl	800436a <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f103 0218 	add.w	r2, r3, #24
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	3304      	adds	r3, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f000 f89d 	bl	800453e <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bdb0      	pop	{r4, r5, r7, pc}
 8004414:	08023ac0 	.word	0x08023ac0

08004418 <_ZNSt5dequeItSaItEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fc4a 	bl	8003cbc <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8004428:	4602      	mov	r2, r0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	4619      	mov	r1, r3
 8004430:	4610      	mov	r0, r2
 8004432:	f7ff ff8d 	bl	8004350 <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f000 f896 	bl	8004570 <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f103 0208 	add.w	r2, r3, #8
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	3304      	adds	r3, #4
 8004450:	4619      	mov	r1, r3
 8004452:	4610      	mov	r0, r2
 8004454:	f000 f873 	bl	800453e <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	609a      	str	r2, [r3, #8]
    }
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>:
      deallocate(_Tp* __p, size_type __t)
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4619      	mov	r1, r3
 800447a:	68b8      	ldr	r0, [r7, #8]
 800447c:	f01c ff22 	bl	80212c4 <_ZdlPvj>
      }
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <_ZNSt12_Destroy_auxILb1EE9__destroyIPtEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <_ZNSt11_Deque_baseItSaItEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3308      	adds	r3, #8
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f978 	bl	80047ac <_ZNSt15_Deque_iteratorItRtPtEC1Ev>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3318      	adds	r3, #24
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 f973 	bl	80047ac <_ZNSt15_Deque_iteratorItRtPtEC1Ev>
	{ }
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80044d0:	b590      	push	{r4, r7, lr}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80044da:	f107 030c 	add.w	r3, r7, #12
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 f858 	bl	8004596 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80044e6:	f107 030c 	add.w	r3, r7, #12
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 f974 	bl	80047da <_ZNSt16allocator_traitsISaIPtEE8allocateERS1_j>
 80044f2:	4604      	mov	r4, r0
 80044f4:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80044f6:	f107 030c 	add.w	r3, r7, #12
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f85c 	bl	80045b8 <_ZNSaIPtED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004500:	4623      	mov	r3, r4
      }
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	bd90      	pop	{r4, r7, pc}

0800450a <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_>:
    _Deque_base<_Tp, _Alloc>::
 800450a:	b580      	push	{r7, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	d209      	bcs.n	8004536 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f930 	bl	8004788 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>
 8004528:	4602      	mov	r2, r0
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	3304      	adds	r3, #4
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e7f1      	b.n	800451a <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_+0x10>
    }
 8004536:	bf00      	nop
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800453e:	b590      	push	{r4, r7, lr}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685c      	ldr	r4, [r3, #4]
 800455a:	f000 f94d 	bl	80047f8 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 800455e:	4603      	mov	r3, r0
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	18e2      	adds	r2, r4, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	609a      	str	r2, [r3, #8]
      }
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	bd90      	pop	{r4, r7, pc}

08004570 <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8004570:	b590      	push	{r4, r7, lr}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800457a:	687c      	ldr	r4, [r7, #4]
 800457c:	2002      	movs	r0, #2
 800457e:	f7fe fff3 	bl	8003568 <_ZSt16__deque_buf_sizej>
 8004582:	4603      	mov	r3, r0
 8004584:	461a      	mov	r2, r3
 8004586:	6839      	ldr	r1, [r7, #0]
 8004588:	4620      	mov	r0, r4
 800458a:	f7ff fd30 	bl	8003fee <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>
      }
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	bd90      	pop	{r4, r7, pc}

08004596 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80045a0:	6838      	ldr	r0, [r7, #0]
 80045a2:	f000 f931 	bl	8004808 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 80045a6:	4603      	mov	r3, r0
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f937 	bl	800481e <_ZNSaIPtEC1ItEERKSaIT_E>
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <_ZNSaIPtED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f939 	bl	8004838 <_ZN9__gnu_cxx13new_allocatorIPtED1Ev>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <_ZNSt16allocator_traitsISaIPtEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f934 	bl	800484e <_ZN9__gnu_cxx13new_allocatorIPtE10deallocateEPS1_j>
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <_ZNKSt6vectorItSaItEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 f952 	bl	80048a2 <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80045fe:	4603      	mov	r3, r0
 8004600:	4618      	mov	r0, r3
 8004602:	f000 f934 	bl	800486e <_ZNSt6vectorItSaItEE11_S_max_sizeERKS0_>
 8004606:	4603      	mov	r3, r0
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_ZNKSt6vectorItSaItEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	105b      	asrs	r3, r3, #1
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800463a:	2200      	movs	r2, #0
 800463c:	6839      	ldr	r1, [r7, #0]
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f93a 	bl	80048b8 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>
 8004644:	4603      	mov	r3, r0
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <_ZNSt6vectorItSaItEE14_S_do_relocateEPtS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f946 	bl	80048f4 <_ZSt12__relocate_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 8004668:	4603      	mov	r3, r0
      }
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800467a:	f107 030c 	add.w	r3, r7, #12
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4618      	mov	r0, r3
 8004682:	f000 f954 	bl	800492e <_ZNSt13move_iteratorIPtEC1ES0_>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f955 	bl	8004952 <_ZSt18uninitialized_copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>
 80046a8:	4603      	mov	r3, r0
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <_ZN9__gnu_cxx13new_allocatorItE7destroyItEEvPT_>:
	destroy(_Up* __p)
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <_ZN9__gnu_cxx13new_allocatorItE9constructItJRKtEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80046de:	b590      	push	{r4, r7, lr}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff ffec 	bl	80046c8 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 80046f0:	4603      	mov	r3, r0
 80046f2:	881c      	ldrh	r4, [r3, #0]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4619      	mov	r1, r3
 80046f8:	2002      	movs	r0, #2
 80046fa:	f7fd fc14 	bl	8001f26 <_ZnwjPv>
 80046fe:	4603      	mov	r3, r0
 8004700:	4622      	mov	r2, r4
 8004702:	801a      	strh	r2, [r3, #0]
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	bd90      	pop	{r4, r7, pc}

0800470c <_ZNKSt5dequeItSaItEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f103 0218 	add.w	r2, r3, #24
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3308      	adds	r3, #8
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f000 f928 	bl	8004976 <_ZStmiRKSt15_Deque_iteratorItRtPtES4_>
 8004726:	4603      	mov	r3, r0
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <_ZNKSt5dequeItSaItEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 f864 	bl	8004808 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8004740:	4603      	mov	r3, r0
 8004742:	4618      	mov	r0, r3
 8004744:	f000 f93b 	bl	80049be <_ZNSt5dequeItSaItEE11_S_max_sizeERKS0_>
 8004748:	4603      	mov	r3, r0
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	6809      	ldr	r1, [r1, #0]
 800476c:	1a41      	subs	r1, r0, r1
 800476e:	1089      	asrs	r1, r1, #2
 8004770:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004772:	429a      	cmp	r2, r3
 8004774:	d904      	bls.n	8004780 <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8004776:	2200      	movs	r2, #0
 8004778:	6839      	ldr	r1, [r7, #0]
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f939 	bl	80049f2 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb>
      }
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8004788:	b590      	push	{r4, r7, lr}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8004790:	687c      	ldr	r4, [r7, #4]
 8004792:	2002      	movs	r0, #2
 8004794:	f7fe fee8 	bl	8003568 <_ZSt16__deque_buf_sizej>
 8004798:	4603      	mov	r3, r0
 800479a:	4619      	mov	r1, r3
 800479c:	4620      	mov	r0, r4
 800479e:	f7ff ff47 	bl	8004630 <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>
 80047a2:	4603      	mov	r3, r0
      }
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd90      	pop	{r4, r7, pc}

080047ac <_ZNSt15_Deque_iteratorItRtPtEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	605a      	str	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	60da      	str	r2, [r3, #12]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <_ZNSt16allocator_traitsISaIPtEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80047e4:	2200      	movs	r2, #0
 80047e6:	6839      	ldr	r1, [r7, #0]
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f99c 	bl	8004b26 <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv>
 80047ee:	4603      	mov	r3, r0
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80047fc:	2002      	movs	r0, #2
 80047fe:	f7fe feb3 	bl	8003568 <_ZSt16__deque_buf_sizej>
 8004802:	4603      	mov	r3, r0
 8004804:	4618      	mov	r0, r3
 8004806:	bd80      	pop	{r7, pc}

08004808 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <_ZNSaIPtEC1ItEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	6039      	str	r1, [r7, #0]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f99a 	bl	8004b62 <_ZN9__gnu_cxx13new_allocatorIPtEC1Ev>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <_ZN9__gnu_cxx13new_allocatorIPtED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <_ZN9__gnu_cxx13new_allocatorIPtE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4619      	mov	r1, r3
 8004860:	68b8      	ldr	r0, [r7, #8]
 8004862:	f01c fd2f 	bl	80212c4 <_ZdlPvj>
      }
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <_ZNSt6vectorItSaItEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8004876:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800487a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f97b 	bl	8004b78 <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>
 8004882:	4603      	mov	r3, r0
 8004884:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004886:	f107 0208 	add.w	r2, r7, #8
 800488a:	f107 030c 	add.w	r3, r7, #12
 800488e:	4611      	mov	r1, r2
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe fd11 	bl	80032b8 <_ZSt3minIjERKT_S2_S2_>
 8004896:	4603      	mov	r3, r0
 8004898:	681b      	ldr	r3, [r3, #0]
      }
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f963 	bl	8004b90 <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>
 80048ca:	4602      	mov	r2, r0
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4293      	cmp	r3, r2
 80048d0:	bf8c      	ite	hi
 80048d2:	2301      	movhi	r3, #1
 80048d4:	2300      	movls	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80048dc:	f01c fd17 	bl	802130e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	4618      	mov	r0, r3
 80048e6:	f01c fcfe 	bl	80212e6 <_Znwj>
 80048ea:	4603      	mov	r3, r0
      }
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <_ZSt12__relocate_aIPtS0_SaItEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80048f4:	b5b0      	push	{r4, r5, r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f950 	bl	8004ba8 <_ZSt12__niter_baseIPtET_S1_>
 8004908:	4604      	mov	r4, r0
 800490a:	68b8      	ldr	r0, [r7, #8]
 800490c:	f000 f94c 	bl	8004ba8 <_ZSt12__niter_baseIPtET_S1_>
 8004910:	4605      	mov	r5, r0
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f948 	bl	8004ba8 <_ZSt12__niter_baseIPtET_S1_>
 8004918:	4602      	mov	r2, r0
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	4629      	mov	r1, r5
 800491e:	4620      	mov	r0, r4
 8004920:	f000 f94d 	bl	8004bbe <_ZSt14__relocate_a_1IttENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8004924:	4603      	mov	r3, r0
    }
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bdb0      	pop	{r4, r5, r7, pc}

0800492e <_ZNSt13move_iteratorIPtEC1ES0_>:
      move_iterator(iterator_type __i)
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8004938:	463b      	mov	r3, r7
 800493a:	4618      	mov	r0, r3
 800493c:	f000 f95d 	bl	8004bfa <_ZSt4moveIRPtEONSt16remove_referenceIT_E4typeEOS3_>
 8004940:	4603      	mov	r3, r0
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <_ZSt18uninitialized_copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004952:	b580      	push	{r7, lr}
 8004954:	b086      	sub	sp, #24
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800495e:	2301      	movs	r3, #1
 8004960:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f952 	bl	8004c10 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPtES3_EET0_T_S6_S5_>
 800496c:	4603      	mov	r3, r0
    }
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <_ZStmiRKSt15_Deque_iteratorItRtPtES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8004980:	f7ff ff3a 	bl	80047f8 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 8004984:	4603      	mov	r3, r0
 8004986:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	109b      	asrs	r3, r3, #2
 8004994:	3b01      	subs	r3, #1
 8004996:	fb01 f303 	mul.w	r3, r1, r3
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6811      	ldr	r1, [r2, #0]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6852      	ldr	r2, [r2, #4]
 80049a2:	1a8a      	subs	r2, r1, r2
 80049a4:	1052      	asrs	r2, r2, #1
 80049a6:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	6891      	ldr	r1, [r2, #8]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	1a8a      	subs	r2, r1, r2
 80049b2:	1052      	asrs	r2, r2, #1
 80049b4:	4413      	add	r3, r2
      }
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <_ZNSt5dequeItSaItEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80049c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80049ca:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f8d3 	bl	8004b78 <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>
 80049d2:	4603      	mov	r3, r0
 80049d4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80049d6:	f107 0208 	add.w	r2, r7, #8
 80049da:	f107 030c 	add.w	r3, r7, #12
 80049de:	4611      	mov	r1, r2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fe fc69 	bl	80032b8 <_ZSt3minIjERKT_S2_S2_>
 80049e6:	4603      	mov	r3, r0
 80049e8:	681b      	ldr	r3, [r3, #0]
      }
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80049f2:	b590      	push	{r4, r7, lr}
 80049f4:	b08b      	sub	sp, #44	; 0x2c
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	4613      	mov	r3, r2
 80049fe:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	109b      	asrs	r3, r3, #2
 8004a0c:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8004a0e:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	6a3a      	ldr	r2, [r7, #32]
 8004a14:	4413      	add	r3, r2
 8004a16:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d92d      	bls.n	8004a80 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	1acb      	subs	r3, r1, r3
 8004a30:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004a32:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x4e>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	e000      	b.n	8004a42 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x50>
 8004a40:	2300      	movs	r3, #0
 8004a42:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004a44:	4413      	add	r3, r2
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d209      	bcs.n	8004a66 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	4619      	mov	r1, r3
 8004a60:	f000 f8e6 	bl	8004c30 <_ZSt4copyIPPtS1_ET0_T_S3_S2_>
 8004a64:	e048      	b.n	8004af8 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004a6e:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a76:	4413      	add	r3, r2
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f000 f8f1 	bl	8004c60 <_ZSt13copy_backwardIPPtS1_ET0_T_S3_S2_>
 8004a7e:	e03b      	b.n	8004af8 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3304      	adds	r3, #4
 8004a88:	f107 0208 	add.w	r2, r7, #8
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe fa9c 	bl	8002fcc <_ZSt3maxIjERKT_S2_S2_>
 8004a94:	4603      	mov	r3, r0
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	69b9      	ldr	r1, [r7, #24]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fd14 	bl	80044d0 <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>
 8004aa8:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	085b      	lsrs	r3, r3, #1
 8004ab2:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0xce>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	e000      	b.n	8004ac2 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0xd0>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	f000 f8aa 	bl	8004c30 <_ZSt4copyIPPtS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6819      	ldr	r1, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f7ff fb2a 	bl	8004140 <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>

	  this->_M_impl._M_map = __new_map;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3308      	adds	r3, #8
 8004afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff fd1d 	bl	800453e <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f103 0018 	add.w	r0, r3, #24
 8004b0a:	6a3a      	ldr	r2, [r7, #32]
 8004b0c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b16:	4413      	add	r3, r2
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f7ff fd10 	bl	800453e <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
    }
 8004b1e:	bf00      	nop
 8004b20:	372c      	adds	r7, #44	; 0x2c
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd90      	pop	{r4, r7, pc}

08004b26 <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f8ac 	bl	8004c90 <_ZNK9__gnu_cxx13new_allocatorIPtE11_M_max_sizeEv>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	bf8c      	ite	hi
 8004b40:	2301      	movhi	r3, #1
 8004b42:	2300      	movls	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004b4a:	f01c fbe0 	bl	802130e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f01c fbc7 	bl	80212e6 <_Znwj>
 8004b58:	4603      	mov	r3, r0
      }
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <_ZN9__gnu_cxx13new_allocatorIPtEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f891 	bl	8004ca8 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>
 8004b86:	4603      	mov	r3, r0
      }
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004b98:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <_ZSt12__niter_baseIPtET_S1_>:
    __niter_base(_Iterator __it)
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <_ZSt14__relocate_a_1IttENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b086      	sub	sp, #24
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
 8004bca:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	105b      	asrs	r3, r3, #1
 8004bd4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	dd06      	ble.n	8004bea <_ZSt14__relocate_a_1IttENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	461a      	mov	r2, r3
 8004be2:	68f9      	ldr	r1, [r7, #12]
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f01d fce1 	bl	80225ac <memmove>
      return __result + __count;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	4413      	add	r3, r2
    }
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <_ZSt4moveIRPtEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPtES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f84d 	bl	8004cc0 <_ZSt4copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <_ZSt4copyIPPtS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f857 	bl	8004cf0 <_ZSt12__miter_baseIPPtET_S2_>
 8004c42:	4604      	mov	r4, r0
 8004c44:	68b8      	ldr	r0, [r7, #8]
 8004c46:	f000 f853 	bl	8004cf0 <_ZSt12__miter_baseIPPtET_S2_>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4620      	mov	r0, r4
 8004c52:	f000 f858 	bl	8004d06 <_ZSt13__copy_move_aILb0EPPtS1_ET1_T0_S3_S2_>
 8004c56:	4603      	mov	r3, r0
    }
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd90      	pop	{r4, r7, pc}

08004c60 <_ZSt13copy_backwardIPPtS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8004c60:	b590      	push	{r4, r7, lr}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f83f 	bl	8004cf0 <_ZSt12__miter_baseIPPtET_S2_>
 8004c72:	4604      	mov	r4, r0
 8004c74:	68b8      	ldr	r0, [r7, #8]
 8004c76:	f000 f83b 	bl	8004cf0 <_ZSt12__miter_baseIPPtET_S2_>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4620      	mov	r0, r4
 8004c82:	f000 f863 	bl	8004d4c <_ZSt22__copy_move_backward_aILb0EPPtS1_ET1_T0_S3_S2_>
 8004c86:	4603      	mov	r3, r0
    }
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd90      	pop	{r4, r7, pc}

08004c90 <_ZNK9__gnu_cxx13new_allocatorIPtE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004c98:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff ff6d 	bl	8004b90 <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <_ZSt4copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8004cc0:	b590      	push	{r4, r7, lr}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f860 	bl	8004d92 <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	68b8      	ldr	r0, [r7, #8]
 8004cd6:	f000 f85c 	bl	8004d92 <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f000 f867 	bl	8004db4 <_ZSt13__copy_move_aILb1EPtS0_ET1_T0_S2_S1_>
 8004ce6:	4603      	mov	r3, r0
    }
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd90      	pop	{r4, r7, pc}

08004cf0 <_ZSt12__miter_baseIPPtET_S2_>:
    __miter_base(_Iterator __it)
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <_ZSt13__copy_move_aILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004d06:	b5b0      	push	{r4, r5, r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f871 	bl	8004dfa <_ZSt12__niter_baseIPPtET_S2_>
 8004d18:	4604      	mov	r4, r0
 8004d1a:	68b8      	ldr	r0, [r7, #8]
 8004d1c:	f000 f86d 	bl	8004dfa <_ZSt12__niter_baseIPPtET_S2_>
 8004d20:	4605      	mov	r5, r0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 f868 	bl	8004dfa <_ZSt12__niter_baseIPPtET_S2_>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4629      	mov	r1, r5
 8004d30:	4620      	mov	r0, r4
 8004d32:	f000 f86d 	bl	8004e10 <_ZSt14__copy_move_a1ILb0EPPtS1_ET1_T0_S3_S2_>
 8004d36:	4602      	mov	r2, r0
 8004d38:	1d3b      	adds	r3, r7, #4
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 f877 	bl	8004e30 <_ZSt12__niter_wrapIPPtET_RKS2_S2_>
 8004d42:	4603      	mov	r3, r0
    }
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bdb0      	pop	{r4, r5, r7, pc}

08004d4c <_ZSt22__copy_move_backward_aILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8004d4c:	b5b0      	push	{r4, r5, r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f84e 	bl	8004dfa <_ZSt12__niter_baseIPPtET_S2_>
 8004d5e:	4604      	mov	r4, r0
 8004d60:	68b8      	ldr	r0, [r7, #8]
 8004d62:	f000 f84a 	bl	8004dfa <_ZSt12__niter_baseIPPtET_S2_>
 8004d66:	4605      	mov	r5, r0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 f845 	bl	8004dfa <_ZSt12__niter_baseIPPtET_S2_>
 8004d70:	4603      	mov	r3, r0
 8004d72:	461a      	mov	r2, r3
 8004d74:	4629      	mov	r1, r5
 8004d76:	4620      	mov	r0, r4
 8004d78:	f000 f866 	bl	8004e48 <_ZSt23__copy_move_backward_a1ILb0EPPtS1_ET1_T0_S3_S2_>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	1d3b      	adds	r3, r7, #4
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f854 	bl	8004e30 <_ZSt12__niter_wrapIPPtET_RKS2_S2_>
 8004d88:	4603      	mov	r3, r0
    }
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bdb0      	pop	{r4, r5, r7, pc}

08004d92 <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8004d9a:	1d3b      	adds	r3, r7, #4
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 f863 	bl	8004e68 <_ZNKSt13move_iteratorIPtE4baseEv>
 8004da2:	4603      	mov	r3, r0
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 f86b 	bl	8004e80 <_ZSt12__miter_baseIPtET_S1_>
 8004daa:	4603      	mov	r3, r0
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <_ZSt13__copy_move_aILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004db4:	b5b0      	push	{r4, r5, r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f7ff fef1 	bl	8004ba8 <_ZSt12__niter_baseIPtET_S1_>
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	68b8      	ldr	r0, [r7, #8]
 8004dca:	f7ff feed 	bl	8004ba8 <_ZSt12__niter_baseIPtET_S1_>
 8004dce:	4605      	mov	r5, r0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff fee8 	bl	8004ba8 <_ZSt12__niter_baseIPtET_S1_>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4629      	mov	r1, r5
 8004dde:	4620      	mov	r0, r4
 8004de0:	f000 f859 	bl	8004e96 <_ZSt14__copy_move_a1ILb1EPtS0_ET1_T0_S2_S1_>
 8004de4:	4602      	mov	r2, r0
 8004de6:	1d3b      	adds	r3, r7, #4
 8004de8:	4611      	mov	r1, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 f863 	bl	8004eb6 <_ZSt12__niter_wrapIPtET_RKS1_S1_>
 8004df0:	4603      	mov	r3, r0
    }
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bdb0      	pop	{r4, r5, r7, pc}

08004dfa <_ZSt12__niter_baseIPPtET_S2_>:
    __niter_base(_Iterator __it)
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <_ZSt14__copy_move_a1ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 f854 	bl	8004ece <_ZSt14__copy_move_a2ILb0EPPtS1_ET1_T0_S3_S2_>
 8004e26:	4603      	mov	r3, r0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <_ZSt12__niter_wrapIPPtET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
    { return __res; }
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <_ZSt23__copy_move_backward_a1ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f848 	bl	8004eee <_ZSt23__copy_move_backward_a2ILb0EPPtS1_ET1_T0_S3_S2_>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <_ZNKSt13move_iteratorIPtE4baseEv>:
      base() const
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <_ZSt12__miter_baseIPtET_S1_>:
    __miter_base(_Iterator __it)
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <_ZSt14__copy_move_a1ILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f831 	bl	8004f0e <_ZSt14__copy_move_a2ILb1EPtS0_ET1_T0_S2_S1_>
 8004eac:	4603      	mov	r3, r0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <_ZSt12__niter_wrapIPtET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
    { return __res; }
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <_ZSt14__copy_move_a2ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f825 	bl	8004f2e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_>
 8004ee4:	4603      	mov	r3, r0
    }
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <_ZSt23__copy_move_backward_a2ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f832 	bl	8004f68 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_>
 8004f04:	4603      	mov	r3, r0
    }
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <_ZSt14__copy_move_a2ILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f844 	bl	8004fac <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>
 8004f24:	4603      	mov	r3, r0
    }
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b086      	sub	sp, #24
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	109b      	asrs	r3, r3, #2
 8004f42:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d006      	beq.n	8004f58 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68f9      	ldr	r1, [r7, #12]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f01d fb2a 	bl	80225ac <memmove>
	  return __result + _Num;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	4413      	add	r3, r2
	}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	109b      	asrs	r3, r3, #2
 8004f7c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	425b      	negs	r3, r3
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	18d0      	adds	r0, r2, r3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	461a      	mov	r2, r3
 8004f94:	68f9      	ldr	r1, [r7, #12]
 8004f96:	f01d fb09 	bl	80225ac <memmove>
	  return __result - _Num;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	425b      	negs	r3, r3
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	4413      	add	r3, r2
	}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	105b      	asrs	r3, r3, #1
 8004fc0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d006      	beq.n	8004fd6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	461a      	mov	r2, r3
 8004fce:	68f9      	ldr	r1, [r7, #12]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f01d faeb 	bl	80225ac <memmove>
	  return __result + _Num;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	4413      	add	r3, r2
	}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8004fe6:	b5b0      	push	{r4, r5, r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fb fab7 	bl	8000564 <__aeabi_i2d>
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	460d      	mov	r5, r1
 8004ffa:	6838      	ldr	r0, [r7, #0]
 8004ffc:	f7fb fab2 	bl	8000564 <__aeabi_i2d>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	ec43 2b11 	vmov	d1, r2, r3
 8005008:	ec45 4b10 	vmov	d0, r4, r5
 800500c:	f01c fa54 	bl	80214b8 <pow>
 8005010:	eeb0 7a40 	vmov.f32	s14, s0
 8005014:	eef0 7a60 	vmov.f32	s15, s1
    }
 8005018:	eeb0 0a47 	vmov.f32	s0, s14
 800501c:	eef0 0a67 	vmov.f32	s1, s15
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005028 <_ZNSt6vectorItSaItEE7reserveEj>:
    vector<_Tp, _Alloc>::
 8005028:	b5b0      	push	{r4, r5, r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
      if (__n > this->max_size())
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff fadb 	bl	80045ee <_ZNKSt6vectorItSaItEE8max_sizeEv>
 8005038:	4602      	mov	r2, r0
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	4293      	cmp	r3, r2
 800503e:	bf8c      	ite	hi
 8005040:	2301      	movhi	r3, #1
 8005042:	2300      	movls	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <_ZNSt6vectorItSaItEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 800504a:	4836      	ldr	r0, [pc, #216]	; (8005124 <_ZNSt6vectorItSaItEE7reserveEj+0xfc>)
 800504c:	f01c f965 	bl	802131a <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f952 	bl	80052fa <_ZNKSt6vectorItSaItEE8capacityEv>
 8005056:	4602      	mov	r2, r0
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	4293      	cmp	r3, r2
 800505c:	bf8c      	ite	hi
 800505e:	2301      	movhi	r3, #1
 8005060:	2300      	movls	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d059      	beq.n	800511c <_ZNSt6vectorItSaItEE7reserveEj+0xf4>
	  const size_type __old_size = size();
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff fad1 	bl	8004610 <_ZNKSt6vectorItSaItEE4sizeEv>
 800506e:	60b8      	str	r0, [r7, #8]
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8005070:	f7fe fe9b 	bl	8003daa <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d014      	beq.n	80050a4 <_ZNSt6vectorItSaItEE7reserveEj+0x7c>
	      __tmp = this->_M_allocate(__n);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff f91a 	bl	80042b8 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8005084:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681c      	ldr	r4, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4618      	mov	r0, r3
 8005092:	f7fe fd9d 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005096:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4629      	mov	r1, r5
 800509c:	4620      	mov	r0, r4
 800509e:	f7ff f91f 	bl	80042e0 <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 80050a2:	e01f      	b.n	80050e4 <_ZNSt6vectorItSaItEE7reserveEj+0xbc>
	      __tmp = _M_allocate_and_copy(__n,
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fae2 	bl	8004672 <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 80050ae:	4604      	mov	r4, r0
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff fadc 	bl	8004672 <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 80050ba:	4603      	mov	r3, r0
 80050bc:	4622      	mov	r2, r4
 80050be:	6839      	ldr	r1, [r7, #0]
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f92a 	bl	800531a <_ZNSt6vectorItSaItEE20_M_allocate_and_copyISt13move_iteratorIPtEEES4_jT_S6_>
 80050c6:	60f8      	str	r0, [r7, #12]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681c      	ldr	r4, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe fd7c 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80050d8:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80050da:	461a      	mov	r2, r3
 80050dc:	4629      	mov	r1, r5
 80050de:	4620      	mov	r0, r4
 80050e0:	f7fe fd81 	bl	8003be6 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
	  _M_deallocate(this->_M_impl._M_start,
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	105b      	asrs	r3, r3, #1
	  _M_deallocate(this->_M_impl._M_start,
 80050f6:	461a      	mov	r2, r3
 80050f8:	f7fe fd57 	bl	8003baa <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
	  this->_M_impl._M_start = __tmp;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	441a      	add	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	441a      	add	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	609a      	str	r2, [r3, #8]
    }
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bdb0      	pop	{r4, r5, r7, pc}
 8005124:	08023af0 	.word	0x08023af0

08005128 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8005128:	b5b0      	push	{r4, r5, r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	d011      	beq.n	8005162 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800513e:	687c      	ldr	r4, [r7, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685d      	ldr	r5, [r3, #4]
 8005144:	6838      	ldr	r0, [r7, #0]
 8005146:	f000 f904 	bl	8005352 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800514a:	4603      	mov	r3, r0
 800514c:	461a      	mov	r2, r3
 800514e:	4629      	mov	r1, r5
 8005150:	4620      	mov	r0, r4
 8005152:	f000 f909 	bl	8005368 <_ZNSt16allocator_traitsISaItEE9constructItJiEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	1c9a      	adds	r2, r3, #2
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	605a      	str	r2, [r3, #4]
      }
 8005160:	e00c      	b.n	800517c <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7fe fe10 	bl	8003d88 <_ZNSt6vectorItSaItEE3endEv>
 8005168:	4604      	mov	r4, r0
 800516a:	6838      	ldr	r0, [r7, #0]
 800516c:	f000 f8f1 	bl	8005352 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8005170:	4603      	mov	r3, r0
 8005172:	461a      	mov	r2, r3
 8005174:	4621      	mov	r1, r4
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f90a 	bl	8005390 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
      }
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bdb0      	pop	{r4, r5, r7, pc}

08005184 <_ZNSt6vectorItSaItEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f9b8 	bl	8005508 <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt>
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <_ZNKSt5queueItSt5dequeItSaItEEE5emptyEv>:
      empty() const
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 f9cd 	bl	800554a <_ZNKSt5dequeItSaItEE5emptyEv>
 80051b0:	4603      	mov	r3, r0
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <_ZNSt6vectorItSaItEE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
	--this->_M_impl._M_finish;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	1e9a      	subs	r2, r3, #2
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7ff f8bb 	bl	8004350 <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>
      }
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <_ZN9__gnu_cxxneIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80051e2:	b590      	push	{r4, r7, lr}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff f88b 	bl	8004308 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 80051f2:	4603      	mov	r3, r0
 80051f4:	681c      	ldr	r4, [r3, #0]
 80051f6:	6838      	ldr	r0, [r7, #0]
 80051f8:	f7ff f886 	bl	8004308 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 80051fc:	4603      	mov	r3, r0
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	429c      	cmp	r4, r3
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	bd90      	pop	{r4, r7, pc}

08005212 <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
	++_M_current;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	1c9a      	adds	r2, r3, #2
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	601a      	str	r2, [r3, #0]
	return *this;
 8005224:	687b      	ldr	r3, [r7, #4]
      }
 8005226:	4618      	mov	r0, r3
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <_ZNSt6vectorItSaItEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fe fd98 	bl	8003d88 <_ZNSt6vectorItSaItEE3endEv>
 8005258:	4603      	mov	r3, r0
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	f107 030c 	add.w	r3, r7, #12
 8005260:	2101      	movs	r1, #1
 8005262:	4618      	mov	r0, r3
 8005264:	f000 f983 	bl	800556e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>
 8005268:	4603      	mov	r3, r0
 800526a:	60bb      	str	r3, [r7, #8]
 800526c:	f107 0308 	add.w	r3, r7, #8
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff ffde 	bl	8005232 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8005276:	4603      	mov	r3, r0
      }
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <_ZNSt6vectorItSaItEEC1ERKS1_>:
      vector(const vector& __x)
 8005280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800528a:	687c      	ldr	r4, [r7, #4]
 800528c:	6838      	ldr	r0, [r7, #0]
 800528e:	f7ff f9bf 	bl	8004610 <_ZNKSt6vectorItSaItEE4sizeEv>
 8005292:	4605      	mov	r5, r0
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fb03 	bl	80048a2 <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 800529c:	4602      	mov	r2, r0
 800529e:	f107 030c 	add.w	r3, r7, #12
 80052a2:	4611      	mov	r1, r2
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 f97b 	bl	80055a0 <_ZN9__gnu_cxx14__alloc_traitsISaItEtE17_S_select_on_copyERKS1_>
 80052aa:	f107 030c 	add.w	r3, r7, #12
 80052ae:	461a      	mov	r2, r3
 80052b0:	4629      	mov	r1, r5
 80052b2:	4620      	mov	r0, r4
 80052b4:	f000 f982 	bl	80055bc <_ZNSt12_Vector_baseItSaItEEC1EjRKS0_>
 80052b8:	f107 030c 	add.w	r3, r7, #12
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe fb5e 	bl	800397e <_ZNSaItED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80052c2:	6838      	ldr	r0, [r7, #0]
 80052c4:	f000 f98e 	bl	80055e4 <_ZNKSt6vectorItSaItEE5beginEv>
 80052c8:	4605      	mov	r5, r0
 80052ca:	6838      	ldr	r0, [r7, #0]
 80052cc:	f000 f99a 	bl	8005604 <_ZNKSt6vectorItSaItEE3endEv>
 80052d0:	4606      	mov	r6, r0
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fe fc79 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80052de:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80052e0:	4622      	mov	r2, r4
 80052e2:	4631      	mov	r1, r6
 80052e4:	4628      	mov	r0, r5
 80052e6:	f000 f99e 	bl	8005626 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPttET0_T_SA_S9_RSaIT1_E>
 80052ea:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	605a      	str	r2, [r3, #4]
      }
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052fa <_ZNKSt6vectorItSaItEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	105b      	asrs	r3, r3, #1
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <_ZNSt6vectorItSaItEE20_M_allocate_and_copyISt13move_iteratorIPtEEES4_jT_S6_>:
	_M_allocate_and_copy(size_type __n,
 800531a:	b580      	push	{r7, lr}
 800531c:	b086      	sub	sp, #24
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
 8005326:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	4618      	mov	r0, r3
 800532e:	f7fe ffc3 	bl	80042b8 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8005332:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fc4a 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 800533c:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff f9a4 	bl	8004690 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8005348:	697b      	ldr	r3, [r7, #20]
	}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <_ZNSt16allocator_traitsISaItEE9constructItJiEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff ffec 	bl	8005352 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800537a:	4603      	mov	r3, r0
 800537c:	461a      	mov	r2, r3
 800537e:	68b9      	ldr	r1, [r7, #8]
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f961 	bl	8005648 <_ZN9__gnu_cxx13new_allocatorItE9constructItJiEEEvPT_DpOT0_>
	}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005390:	b5b0      	push	{r4, r5, r7, lr}
 8005392:	b08c      	sub	sp, #48	; 0x30
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800539c:	4a59      	ldr	r2, [pc, #356]	; (8005504 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x174>)
 800539e:	2101      	movs	r1, #1
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7fe ff1d 	bl	80041e0 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>
 80053a6:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7fe ff5a 	bl	800426e <_ZNSt6vectorItSaItEE5beginEv>
 80053ba:	4603      	mov	r3, r0
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	f107 0214 	add.w	r2, r7, #20
 80053c2:	f107 0308 	add.w	r3, r7, #8
 80053c6:	4611      	mov	r1, r2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fe ff60 	bl	800428e <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80053ce:	4603      	mov	r3, r0
 80053d0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fe ff6e 	bl	80042b8 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 80053dc:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 80053e2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	005b      	lsls	r3, r3, #1
	  _Alloc_traits::construct(this->_M_impl,
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	18d5      	adds	r5, r2, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff ffb0 	bl	8005352 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80053f2:	4603      	mov	r3, r0
 80053f4:	461a      	mov	r2, r3
 80053f6:	4629      	mov	r1, r5
 80053f8:	4620      	mov	r0, r4
 80053fa:	f7ff ffb5 	bl	8005368 <_ZNSt16allocator_traitsISaItEE9constructItJiEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 80053fe:	2300      	movs	r3, #0
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8005402:	f7fe fcd2 	bl	8003daa <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d027      	beq.n	800545c <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800540c:	f107 0308 	add.w	r3, r7, #8
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe ff79 	bl	8004308 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8005416:	4603      	mov	r3, r0
 8005418:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe fbd7 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005422:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	4621      	mov	r1, r4
 8005428:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800542a:	f7fe ff59 	bl	80042e0 <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 800542e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	3302      	adds	r3, #2
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005436:	f107 0308 	add.w	r3, r7, #8
 800543a:	4618      	mov	r0, r3
 800543c:	f7fe ff64 	bl	8004308 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8005440:	4603      	mov	r3, r0
 8005442:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4618      	mov	r0, r3
 8005448:	f7fe fbc2 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 800544c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800544e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005450:	6a39      	ldr	r1, [r7, #32]
 8005452:	4620      	mov	r0, r4
 8005454:	f7fe ff44 	bl	80042e0 <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 8005458:	62f8      	str	r0, [r7, #44]	; 0x2c
 800545a:	e026      	b.n	80054aa <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800545c:	f107 0308 	add.w	r3, r7, #8
 8005460:	4618      	mov	r0, r3
 8005462:	f7fe ff51 	bl	8004308 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8005466:	4603      	mov	r3, r0
 8005468:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe fbaf 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005472:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	4621      	mov	r1, r4
 8005478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800547a:	f7fe ff50 	bl	800431e <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 800547e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	3302      	adds	r3, #2
 8005484:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8005486:	f107 0308 	add.w	r3, r7, #8
 800548a:	4618      	mov	r0, r3
 800548c:	f7fe ff3c 	bl	8004308 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8005490:	4603      	mov	r3, r0
 8005492:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe fb9a 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 800549c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800549e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a0:	6a39      	ldr	r1, [r7, #32]
 80054a2:	4620      	mov	r0, r4
 80054a4:	f7fe ff3b 	bl	800431e <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 80054a8:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80054aa:	f7fe fc7e 	bl	8003daa <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f083 0301 	eor.w	r3, r3, #1
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d009      	beq.n	80054ce <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fe fb87 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80054c2:	4603      	mov	r3, r0
 80054c4:	461a      	mov	r2, r3
 80054c6:	6a39      	ldr	r1, [r7, #32]
 80054c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054ca:	f7fe fb8c 	bl	8003be6 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 80054ce:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	105b      	asrs	r3, r3, #1
      _M_deallocate(__old_start,
 80054da:	461a      	mov	r2, r3
 80054dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054de:	f7fe fb64 	bl	8003baa <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
      this->_M_impl._M_start = __new_start;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ec:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	441a      	add	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	609a      	str	r2, [r3, #8]
    }
 80054fa:	bf00      	nop
 80054fc:	3730      	adds	r7, #48	; 0x30
 80054fe:	46bd      	mov	sp, r7
 8005500:	bdb0      	pop	{r4, r5, r7, pc}
 8005502:	bf00      	nop
 8005504:	08023b00 	.word	0x08023b00

08005508 <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8005508:	b590      	push	{r4, r7, lr}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	105b      	asrs	r3, r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00e      	beq.n	8005542 <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4618      	mov	r0, r3
 800552c:	f7fe fb50 	bl	8003bd0 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005530:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8005532:	461a      	mov	r2, r3
 8005534:	4621      	mov	r1, r4
 8005536:	6838      	ldr	r0, [r7, #0]
 8005538:	f7fe fb55 	bl	8003be6 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8005542:	bf00      	nop
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	bd90      	pop	{r4, r7, pc}

0800554a <_ZNKSt5dequeItSaItEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f103 0218 	add.w	r2, r3, #24
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3308      	adds	r3, #8
 800555c:	4619      	mov	r1, r3
 800555e:	4610      	mov	r0, r2
 8005560:	f000 f88a 	bl	8005678 <_ZSteqRKSt15_Deque_iteratorItRtPtES4_>
 8005564:	4603      	mov	r3, r0
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	425b      	negs	r3, r3
 8005582:	4413      	add	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	f107 020c 	add.w	r2, r7, #12
 800558a:	f107 0308 	add.w	r3, r7, #8
 800558e:	4611      	mov	r1, r2
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe fe15 	bl	80041c0 <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <_ZN9__gnu_cxx14__alloc_traitsISaItEtE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6839      	ldr	r1, [r7, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 f876 	bl	80056a0 <_ZNSt16allocator_traitsISaItEE37select_on_container_copy_constructionERKS0_>
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <_ZNSt12_Vector_baseItSaItEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 f882 	bl	80056d6 <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f890 	bl	80056fa <_ZNSt12_Vector_baseItSaItEE17_M_create_storageEj>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <_ZNKSt6vectorItSaItEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	f107 030c 	add.w	r3, r7, #12
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 f89b 	bl	8005730 <_ZN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEC1ERKS2_>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <_ZNKSt6vectorItSaItEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	1d1a      	adds	r2, r3, #4
 8005610:	f107 030c 	add.w	r3, r7, #12
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f000 f88a 	bl	8005730 <_ZN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEC1ERKS2_>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPttET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
 8005632:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f889 	bl	8005750 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>
 800563e:	4603      	mov	r3, r0
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <_ZN9__gnu_cxx13new_allocatorItE9constructItJiEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff fe7c 	bl	8005352 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800565a:	4603      	mov	r3, r0
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	b29c      	uxth	r4, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4619      	mov	r1, r3
 8005664:	2002      	movs	r0, #2
 8005666:	f7fc fc5e 	bl	8001f26 <_ZnwjPv>
 800566a:	4603      	mov	r3, r0
 800566c:	4622      	mov	r2, r4
 800566e:	801a      	strh	r2, [r3, #0]
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	bd90      	pop	{r4, r7, pc}

08005678 <_ZSteqRKSt15_Deque_iteratorItRtPtES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	bf0c      	ite	eq
 800568e:	2301      	moveq	r3, #1
 8005690:	2300      	movne	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <_ZNSt16allocator_traitsISaItEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80056aa:	6839      	ldr	r1, [r7, #0]
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f804 	bl	80056ba <_ZNSaItEC1ERKS_>
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <_ZNSaItEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f854 	bl	8005774 <_ZN9__gnu_cxx13new_allocatorItEC1ERKS1_>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff ffe9 	bl	80056ba <_ZNSaItEC1ERKS_>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe fa3e 	bl	8003b6c <_ZNSt12_Vector_baseItSaItEE17_Vector_impl_dataC1Ev>
	{ }
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <_ZNSt12_Vector_baseItSaItEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fe fdd6 	bl	80042b8 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 800570c:	4602      	mov	r2, r0
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	441a      	add	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	609a      	str	r2, [r3, #8]
      }
 8005728:	bf00      	nop
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <_ZN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800575c:	2301      	movs	r3, #1
 800575e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f811 	bl	800578c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtEET0_T_SC_SB_>
 800576a:	4603      	mov	r3, r0
    }
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <_ZN9__gnu_cxx13new_allocatorItEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f805 	bl	80057ac <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>
 80057a2:	4603      	mov	r3, r0
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 80057ac:	b590      	push	{r4, r7, lr}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f80f 	bl	80057dc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEET_S8_>
 80057be:	4604      	mov	r4, r0
 80057c0:	68b8      	ldr	r0, [r7, #8]
 80057c2:	f000 f80b 	bl	80057dc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEET_S8_>
 80057c6:	4603      	mov	r3, r0
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	4619      	mov	r1, r3
 80057cc:	4620      	mov	r0, r4
 80057ce:	f000 f810 	bl	80057f2 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET1_T0_SA_S9_>
 80057d2:	4603      	mov	r3, r0
    }
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd90      	pop	{r4, r7, pc}

080057dc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEET_S8_>:
    __miter_base(_Iterator __it)
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80057f2:	b5b0      	push	{r4, r5, r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 f81a 	bl	8005838 <_ZSt12__niter_baseIPKtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8005804:	4604      	mov	r4, r0
 8005806:	68b8      	ldr	r0, [r7, #8]
 8005808:	f000 f816 	bl	8005838 <_ZSt12__niter_baseIPKtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800580c:	4605      	mov	r5, r0
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff f9c9 	bl	8004ba8 <_ZSt12__niter_baseIPtET_S1_>
 8005816:	4603      	mov	r3, r0
 8005818:	461a      	mov	r2, r3
 800581a:	4629      	mov	r1, r5
 800581c:	4620      	mov	r0, r4
 800581e:	f000 f819 	bl	8005854 <_ZSt14__copy_move_a1ILb0EPKtPtET1_T0_S4_S3_>
 8005822:	4602      	mov	r2, r0
 8005824:	1d3b      	adds	r3, r7, #4
 8005826:	4611      	mov	r1, r2
 8005828:	4618      	mov	r0, r3
 800582a:	f7ff fb44 	bl	8004eb6 <_ZSt12__niter_wrapIPtET_RKS1_S1_>
 800582e:	4603      	mov	r3, r0
    }
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bdb0      	pop	{r4, r5, r7, pc}

08005838 <_ZSt12__niter_baseIPKtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8005840:	1d3b      	adds	r3, r7, #4
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f816 	bl	8005874 <_ZNK9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEE4baseEv>
 8005848:	4603      	mov	r3, r0
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <_ZSt14__copy_move_a1ILb0EPKtPtET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 f810 	bl	800588a <_ZSt14__copy_move_a2ILb0EPKtPtET1_T0_S4_S3_>
 800586a:	4603      	mov	r3, r0
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <_ZNK9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <_ZSt14__copy_move_a2ILb0EPKtPtET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 f805 	bl	80058aa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>
 80058a0:	4603      	mov	r3, r0
    }
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b086      	sub	sp, #24
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	105b      	asrs	r3, r3, #1
 80058be:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d006      	beq.n	80058d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	461a      	mov	r2, r3
 80058cc:	68f9      	ldr	r1, [r7, #12]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f01c fe6c 	bl	80225ac <memmove>
	  return __result + _Num;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	4413      	add	r3, r2
	}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <_ZN6PGV100C1EttP20__UART_HandleTypeDefP12GPIO_TypeDefttddd>:
	this->unit_ = Unit;
	this->angle_offset_ = Angle_Offset;
	this->comm_dir_available_ = false;
}

PGV100::PGV100(uint16_t index,  uint16_t commtype, UART_HandleTypeDef *huartx,
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08a      	sub	sp, #40	; 0x28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6278      	str	r0, [r7, #36]	; 0x24
 80058ec:	61fb      	str	r3, [r7, #28]
 80058ee:	ed87 0b04 	vstr	d0, [r7, #16]
 80058f2:	ed87 1b02 	vstr	d1, [r7, #8]
 80058f6:	ed87 2b00 	vstr	d2, [r7]
 80058fa:	460b      	mov	r3, r1
 80058fc:	847b      	strh	r3, [r7, #34]	; 0x22
 80058fe:	4613      	mov	r3, r2
 8005900:	843b      	strh	r3, [r7, #32]
				GPIO_TypeDef* GPIO, uint16_t dir_pin_no, uint16_t Unit, double X_Offset, double Y_Offset, double Angle_Offset)
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	4618      	mov	r0, r3
 8005906:	f7fd fe77 	bl	80035f8 <_ZN12PNFPosSensorC1Ev>
 800590a:	4a27      	ldr	r2, [pc, #156]	; (80059a8 <_ZN6PGV100C1EttP20__UART_HandleTypeDefP12GPIO_TypeDefttddd+0xc4>)
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005912:	f04f 0200 	mov.w	r2, #0
 8005916:	f04f 0300 	mov.w	r3, #0
 800591a:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	2200      	movs	r2, #0
 8005922:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	2200      	movs	r2, #0
 800592a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	2200      	movs	r2, #0
 8005932:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	2200      	movs	r2, #0
 800593a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	f644 6220 	movw	r2, #20000	; 0x4e20
 8005944:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800594e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
{
	this->index_ = index;
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005956:	809a      	strh	r2, [r3, #4]
	this->comm_type_ = commtype;
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	8c3a      	ldrh	r2, [r7, #32]
 800595c:	871a      	strh	r2, [r3, #56]	; 0x38
	this->x_offset_ = X_Offset;
 800595e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005960:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005964:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	this->y_offset_ = Y_Offset;
 8005968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800596a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800596e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->huartx_= huartx;
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	649a      	str	r2, [r3, #72]	; 0x48
	this->unit_ = Unit;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800597c:	875a      	strh	r2, [r3, #58]	; 0x3a
	this->angle_offset_ = Angle_Offset;
 800597e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005984:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	this->GPIO_ = GPIO;
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
	this->dir_pin_no_ = dir_pin_no;
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005992:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	this->comm_dir_available_ = true;
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	2201      	movs	r2, #1
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	4618      	mov	r0, r3
 80059a2:	3728      	adds	r7, #40	; 0x28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	08027248 	.word	0x08027248

080059ac <_ZN6PGV100D1Ev>:

PGV100::~PGV100(){/*Total_PNF_Sensor_Num--;*/}
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	4a05      	ldr	r2, [pc, #20]	; (80059cc <_ZN6PGV100D1Ev+0x20>)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fd fe5d 	bl	800367c <_ZN12PNFPosSensorD1Ev>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	08027248 	.word	0x08027248

080059d0 <_ZN6PGV100D0Ev>:
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff ffe7 	bl	80059ac <_ZN6PGV100D1Ev>
 80059de:	21b8      	movs	r1, #184	; 0xb8
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f01b fc6f 	bl	80212c4 <_ZdlPvj>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4618      	mov	r0, r3
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <_ZN6PGV10012ResetAllDataEv>:
/*---------------------------------------------------*/
/*Queue - queue systems ->Queue*/

//--------------------------------------------------------------Reset all data
void PGV100::ResetAllData()
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	this->xpos_ = 0;
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	f04f 0300 	mov.w	r3, #0
 8005a02:	e9c1 2304 	strd	r2, r3, [r1, #16]
	this->ypos_ = 0;
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	f04f 0300 	mov.w	r3, #0
 8005a10:	e9c1 2306 	strd	r2, r3, [r1, #24]
	this->angle_ = 0;
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	this->tagNo_ = 0;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <_ZN6PGV10018RegisterRequsetCmdEv>:



//--------------------------------------------------------------Construct level - network, first parmas. declation
void PGV100::RegisterRequsetCmd()
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b08a      	sub	sp, #40	; 0x28
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
	RequestCmd.reserve(10);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	335c      	adds	r3, #92	; 0x5c
 8005a42:	210a      	movs	r1, #10
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff faef 	bl	8005028 <_ZNSt6vectorItSaItEE7reserveEj>
	RequestCmd.emplace_back(0xEC);   //0
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	335c      	adds	r3, #92	; 0x5c
 8005a4e:	22ec      	movs	r2, #236	; 0xec
 8005a50:	60ba      	str	r2, [r7, #8]
 8005a52:	f107 0208 	add.w	r2, r7, #8
 8005a56:	4611      	mov	r1, r2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff fb65 	bl	8005128 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xE8);   //1
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	335c      	adds	r3, #92	; 0x5c
 8005a62:	22e8      	movs	r2, #232	; 0xe8
 8005a64:	60fa      	str	r2, [r7, #12]
 8005a66:	f107 020c 	add.w	r2, r7, #12
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fb5b 	bl	8005128 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xE4);   //2
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	335c      	adds	r3, #92	; 0x5c
 8005a76:	22e4      	movs	r2, #228	; 0xe4
 8005a78:	613a      	str	r2, [r7, #16]
 8005a7a:	f107 0210 	add.w	r2, r7, #16
 8005a7e:	4611      	mov	r1, r2
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff fb51 	bl	8005128 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0x90);   //3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	335c      	adds	r3, #92	; 0x5c
 8005a8a:	2290      	movs	r2, #144	; 0x90
 8005a8c:	617a      	str	r2, [r7, #20]
 8005a8e:	f107 0214 	add.w	r2, r7, #20
 8005a92:	4611      	mov	r1, r2
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff fb47 	bl	8005128 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0x88);   //4
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	335c      	adds	r3, #92	; 0x5c
 8005a9e:	2288      	movs	r2, #136	; 0x88
 8005aa0:	61ba      	str	r2, [r7, #24]
 8005aa2:	f107 0218 	add.w	r2, r7, #24
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff fb3d 	bl	8005128 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xC4);   //5
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	335c      	adds	r3, #92	; 0x5c
 8005ab2:	22c4      	movs	r2, #196	; 0xc4
 8005ab4:	61fa      	str	r2, [r7, #28]
 8005ab6:	f107 021c 	add.w	r2, r7, #28
 8005aba:	4611      	mov	r1, r2
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff fb33 	bl	8005128 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xC8);   //6
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	335c      	adds	r3, #92	; 0x5c
 8005ac6:	22c8      	movs	r2, #200	; 0xc8
 8005ac8:	623a      	str	r2, [r7, #32]
 8005aca:	f107 0220 	add.w	r2, r7, #32
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff fb29 	bl	8005128 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xA0);   //7
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	335c      	adds	r3, #92	; 0x5c
 8005ada:	22a0      	movs	r2, #160	; 0xa0
 8005adc:	627a      	str	r2, [r7, #36]	; 0x24
 8005ade:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff fb1f 	bl	8005128 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
}
 8005aea:	bf00      	nop
 8005aec:	3728      	adds	r7, #40	; 0x28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <_ZN6PGV10020RegisterDefaultParamEv>:

void PGV100::RegisterDefaultParam()
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
	//Change_XOffset(1);
	//Change_YOffset(1);
	//Change_Angle_Offset(1);
	ResetAllData();
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff ff78 	bl	80059f0 <_ZN6PGV10012ResetAllDataEv>
	RequestChangeDirstraight();
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f851 	bl	8005ba8 <_ZN6PGV10024RequestChangeDirstraightEv>
}
 8005b06:	bf00      	nop
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <_ZN6PGV10014ReadBufferInitEv>:


//Initialization for work-loop
void PGV100::ReadBufferInit()
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
	int BufferLength = RequestQueue.front();
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3368      	adds	r3, #104	; 0x68
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fd ffb4 	bl	8003a8a <_ZNSt5queueItSt5dequeItSaItEEE5frontEv>
 8005b22:	4603      	mov	r3, r0
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	60fb      	str	r3, [r7, #12]
	switch(BufferLength)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d833      	bhi.n	8005b96 <_ZN6PGV10014ReadBufferInitEv+0x86>
 8005b2e:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <_ZN6PGV10014ReadBufferInitEv+0x24>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b5b 	.word	0x08005b5b
 8005b38:	08005b65 	.word	0x08005b65
 8005b3c:	08005b6f 	.word	0x08005b6f
 8005b40:	08005b79 	.word	0x08005b79
 8005b44:	08005b83 	.word	0x08005b83
 8005b48:	08005b8d 	.word	0x08005b8d
 8005b4c:	08005b51 	.word	0x08005b51
	{
		//position
		case PGV100PosRequest: this->max_read_buf_size_ = PGV100Pos; break;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2215      	movs	r2, #21
 8005b54:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005b58:	e01d      	b.n	8005b96 <_ZN6PGV10014ReadBufferInitEv+0x86>
		//Directions
		case PGV100StraightRequest: this->max_read_buf_size_ = PGV100Dir; break;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2203      	movs	r2, #3
 8005b5e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005b62:	e018      	b.n	8005b96 <_ZN6PGV10014ReadBufferInitEv+0x86>
		case PGV100LeftRequest: this->max_read_buf_size_ = PGV100Dir; break;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2203      	movs	r2, #3
 8005b68:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005b6c:	e013      	b.n	8005b96 <_ZN6PGV10014ReadBufferInitEv+0x86>
		case PGV100RightRequest: this->max_read_buf_size_ = PGV100Dir; break;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2203      	movs	r2, #3
 8005b72:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005b76:	e00e      	b.n	8005b96 <_ZN6PGV10014ReadBufferInitEv+0x86>
		//Colors
		case PGV100RedRequest: this->max_read_buf_size_ = PGV100Color; break;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005b80:	e009      	b.n	8005b96 <_ZN6PGV10014ReadBufferInitEv+0x86>
		case PGV100GreenRequest: this->max_read_buf_size_ = PGV100Color; break;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005b8a:	e004      	b.n	8005b96 <_ZN6PGV10014ReadBufferInitEv+0x86>
		case PGV100BlueRequest: this->max_read_buf_size_ = PGV100Color; break;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005b94:	bf00      	nop
	}
	//size initialize
	this->pos_buf_.clear();
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	334c      	adds	r3, #76	; 0x4c
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff faf2 	bl	8005184 <_ZNSt6vectorItSaItEE5clearEv>
}
 8005ba0:	bf00      	nop
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <_ZN6PGV10024RequestChangeDirstraightEv>:
	return* this;
}

//---------------------------------------------------------------Request command
//pgv100 only
void PGV100::RequestChangeDirstraight() {QueueSaveRequest(PGV100StraightRequest);}
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fd fe3a 	bl	800382e <_ZN12PNFPosSensor16QueueSaveRequestEt>
 8005bba:	bf00      	nop
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <_ZN6PGV10020RequestChangeDirleftEv>:
void PGV100::RequestChangeDirleft() {QueueSaveRequest(PGV100LeftRequest);}
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b082      	sub	sp, #8
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2101      	movs	r1, #1
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fd fe2d 	bl	800382e <_ZN12PNFPosSensor16QueueSaveRequestEt>
 8005bd4:	bf00      	nop
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <_ZN6PGV10021RequestChangeDirrightEv>:
void PGV100::RequestChangeDirright() {QueueSaveRequest(PGV100RightRequest);}
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2102      	movs	r1, #2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fd fe20 	bl	800382e <_ZN12PNFPosSensor16QueueSaveRequestEt>
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <_ZN6PGV10019RequestGetPGV100PosEv>:

void PGV100::RequestChangeColoryellow() {QueueSaveRequest(PGV100RedRequest);}
void PGV100::RequestChangeColorred() {QueueSaveRequest(PGV100GreenRequest);}
void PGV100::RequestChangeColorblue() {QueueSaveRequest(PGV100BlueRequest);}

void PGV100::RequestGetPGV100Pos() {QueueSaveRequest(PGV100PosRequest);}
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2106      	movs	r1, #6
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fd fe13 	bl	800382e <_ZN12PNFPosSensor16QueueSaveRequestEt>
 8005c08:	bf00      	nop
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <_ZN6PGV10021QueueRepeatPosReqeustEv>:


//---------------------------------------------------------------Command queue functions
//queue system functions
void PGV100::QueueRepeatPosReqeust()
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
	if(RequestQueue.empty()) RequestGetPGV100Pos();
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3368      	adds	r3, #104	; 0x68
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff fabf 	bl	80051a0 <_ZNKSt5queueItSt5dequeItSaItEEE5emptyEv>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <_ZN6PGV10021QueueRepeatPosReqeustEv+0x1e>
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff ffe4 	bl	8005bf6 <_ZN6PGV10019RequestGetPGV100PosEv>
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <_ZNK6PGV1007GetXPosEv>:
//---------------------------------------------------------------return value functions

double PGV100::GetXPos() const {return xpos_;}
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005c44:	ec43 2b17 	vmov	d7, r2, r3
 8005c48:	eeb0 0a47 	vmov.f32	s0, s14
 8005c4c:	eef0 0a67 	vmov.f32	s1, s15
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <_ZNK6PGV1007GetYPosEv>:
double PGV100::GetYPos() const {return ypos_;}
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005c68:	ec43 2b17 	vmov	d7, r2, r3
 8005c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8005c70:	eef0 0a67 	vmov.f32	s1, s15
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <_ZNK6PGV1008GetAngleEv>:
double PGV100::GetAngle() const {return angle_;}
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8005c8c:	ec43 2b17 	vmov	d7, r2, r3
 8005c90:	eeb0 0a47 	vmov.f32	s0, s14
 8005c94:	eef0 0a67 	vmov.f32	s1, s15
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <_ZNK6PGV1008GetTagNoEv>:
uint16_t PGV100::GetTagNo() const {return tagNo_;}
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <_ZNK6PGV10012GetErrStatusEv>:
uint16_t PGV100::GetDir() const {return dir_;}
uint16_t PGV100::GetColor() const {return color_;}
uint32_t PGV100::GetErrStatus() const {return err_code_;}
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	8c1b      	ldrh	r3, [r3, #32]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <_ZN6PGV10017ProcessGetERRInfoESt6vectorItSaItEE>:
double PGV100::GetUnit() const {return unit_;}
uint16_t PGV100::GetCommtype() const {return comm_type_;}


uint32_t PGV100::ProcessGetERRInfo(std::vector<uint16_t> temp_buf)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
	uint32_t err_data = ((temp_buf)[5]) & 0xFF;
 8005cde:	2105      	movs	r1, #5
 8005ce0:	6838      	ldr	r0, [r7, #0]
 8005ce2:	f7fd fedf 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	60fb      	str	r3, [r7, #12]
	(err_data)|=((temp_buf)[4] << 7) & 0xFF;
 8005cee:	2104      	movs	r1, #4
 8005cf0:	6838      	ldr	r0, [r7, #0]
 8005cf2:	f7fd fed7 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	01db      	lsls	r3, r3, #7
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
	(err_data)|=((temp_buf)[3] << 14) & 0xFF;
 8005d04:	2103      	movs	r1, #3
 8005d06:	6838      	ldr	r0, [r7, #0]
 8005d08:	f7fd fecc 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	039b      	lsls	r3, r3, #14
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]
	(err_data)|=(((temp_buf)[2]&0x07) << 21) & 0xFF;
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	6838      	ldr	r0, [r7, #0]
 8005d1e:	f7fd fec1 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005d22:	2200      	movs	r2, #0
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]
	return err_data;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE>:

//for getting data
bool PGV100::ProcessIsTagDetected(std::vector<uint16_t> temp_buf)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
	if((temp_buf)[1] & 0x40) return true;
 8005d3e:	2101      	movs	r1, #1
 8005d40:	6838      	ldr	r0, [r7, #0]
 8005d42:	f7fd feaf 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005d46:	4603      	mov	r3, r0
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bf14      	ite	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	2300      	moveq	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE+0x2c>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE+0x2e>
	else return false;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <_ZN6PGV10019ProcessGetTagNumberESt6vectorItSaItEE>:

uint16_t PGV100::ProcessGetTagNumber(std::vector<uint16_t> temp_buf)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
	 uint16_t tag_num = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	81fb      	strh	r3, [r7, #14]
	 (tag_num)=((temp_buf)[17]) & 0xFF;
 8005d78:	2111      	movs	r1, #17
 8005d7a:	6838      	ldr	r0, [r7, #0]
 8005d7c:	f7fd fe92 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005d80:	4603      	mov	r3, r0
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	81fb      	strh	r3, [r7, #14]
	 (tag_num)|=((temp_buf)[16]<<7) & 0xFF;
 8005d8a:	2110      	movs	r1, #16
 8005d8c:	6838      	ldr	r0, [r7, #0]
 8005d8e:	f7fd fe89 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005d92:	4603      	mov	r3, r0
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	01db      	lsls	r3, r3, #7
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	89fa      	ldrh	r2, [r7, #14]
 8005d9c:	b212      	sxth	r2, r2
 8005d9e:	b21b      	sxth	r3, r3
 8005da0:	4313      	orrs	r3, r2
 8005da2:	b21b      	sxth	r3, r3
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	81fb      	strh	r3, [r7, #14]
	 (tag_num)|=((temp_buf)[15]<<14) & 0xFF;
 8005da8:	210f      	movs	r1, #15
 8005daa:	6838      	ldr	r0, [r7, #0]
 8005dac:	f7fd fe7a 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005db0:	4603      	mov	r3, r0
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	039b      	lsls	r3, r3, #14
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	89fa      	ldrh	r2, [r7, #14]
 8005dba:	b212      	sxth	r2, r2
 8005dbc:	b21b      	sxth	r3, r3
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	b21b      	sxth	r3, r3
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	81fb      	strh	r3, [r7, #14]
	 (tag_num)|=((temp_buf)[14]<<21) & 0xFF;
 8005dc6:	210e      	movs	r1, #14
 8005dc8:	6838      	ldr	r0, [r7, #0]
 8005dca:	f7fd fe6b 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	055b      	lsls	r3, r3, #21
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	89fa      	ldrh	r2, [r7, #14]
 8005dd8:	b212      	sxth	r2, r2
 8005dda:	b21b      	sxth	r3, r3
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	b21b      	sxth	r3, r3
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	81fb      	strh	r3, [r7, #14]
	 return tag_num;
 8005de4:	89fb      	ldrh	r3, [r7, #14]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE>:

double PGV100::ProcessGetAngleInfo(std::vector<uint16_t> temp_buf)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
	 uint16_t angle = ((temp_buf)[11]) & 0xFF;
 8005dfa:	210b      	movs	r1, #11
 8005dfc:	6838      	ldr	r0, [r7, #0]
 8005dfe:	f7fd fe51 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005e02:	4603      	mov	r3, r0
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	81fb      	strh	r3, [r7, #14]
	 (angle) |= ((temp_buf)[10] << 7) &0xFF;
 8005e0c:	210a      	movs	r1, #10
 8005e0e:	6838      	ldr	r0, [r7, #0]
 8005e10:	f7fd fe48 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005e14:	4603      	mov	r3, r0
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	01db      	lsls	r3, r3, #7
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	89fa      	ldrh	r2, [r7, #14]
 8005e1e:	b212      	sxth	r2, r2
 8005e20:	b21b      	sxth	r3, r3
 8005e22:	4313      	orrs	r3, r2
 8005e24:	b21b      	sxth	r3, r3
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	81fb      	strh	r3, [r7, #14]

	 double angle_d = (double)angle/10;
 8005e2a:	89fb      	ldrh	r3, [r7, #14]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fa fb89 	bl	8000544 <__aeabi_ui2d>
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	4b17      	ldr	r3, [pc, #92]	; (8005e94 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0xa4>)
 8005e38:	f7fa fd28 	bl	800088c <__aeabi_ddiv>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	e9c7 2304 	strd	r2, r3, [r7, #16]
	 if((angle_d)> 180.0f) angle_d-=360.0f; //makes x-axis zero centered
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0xa8>)
 8005e4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005e4e:	f7fa fe83 	bl	8000b58 <__aeabi_dcmpgt>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0x7e>
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0xac>)
 8005e5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005e62:	f7fa fa31 	bl	80002c8 <__aeabi_dsub>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	 return angle_d + this->angle_offset_;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8005e74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e78:	f7fa fa28 	bl	80002cc <__adddf3>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	ec43 2b17 	vmov	d7, r2, r3
}
 8005e84:	eeb0 0a47 	vmov.f32	s0, s14
 8005e88:	eef0 0a67 	vmov.f32	s1, s15
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40240000 	.word	0x40240000
 8005e98:	40668000 	.word	0x40668000
 8005e9c:	40768000 	.word	0x40768000

08005ea0 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE>:

double PGV100::ProcessGetXPosInfo(std::vector<uint16_t> temp_buf)
{
 8005ea0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ea4:	b086      	sub	sp, #24
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
	int32_t XPosition_DATA=((temp_buf)[5]) & 0xFF;
 8005eac:	2105      	movs	r1, #5
 8005eae:	6838      	ldr	r0, [r7, #0]
 8005eb0:	f7fd fdf8 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	60fb      	str	r3, [r7, #12]
	(XPosition_DATA)|=((temp_buf)[4] << 7) & 0xFF;
 8005ebc:	2104      	movs	r1, #4
 8005ebe:	6838      	ldr	r0, [r7, #0]
 8005ec0:	f7fd fdf0 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	01db      	lsls	r3, r3, #7
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
	(XPosition_DATA)|=((temp_buf)[4] << 14) & 0xFF;
 8005ed2:	2104      	movs	r1, #4
 8005ed4:	6838      	ldr	r0, [r7, #0]
 8005ed6:	f7fd fde5 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005eda:	4603      	mov	r3, r0
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	039b      	lsls	r3, r3, #14
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
	(XPosition_DATA)|=(((temp_buf)[2]&0x07) << 21) & 0xFF;
 8005ee8:	2102      	movs	r1, #2
 8005eea:	6838      	ldr	r0, [r7, #0]
 8005eec:	f7fd fdda 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

	 //for making X-axis center to zero
	if(XPosition_DATA>=(100000)) XPosition_DATA = (XPosition_DATA-((double)(pow(2,24)-1))-((this->x_offset_)*(this->unit_)));
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4a50      	ldr	r2, [pc, #320]	; (800603c <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x19c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	dd37      	ble.n	8005f70 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0xd0>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fa fb2e 	bl	8000564 <__aeabi_i2d>
 8005f08:	4604      	mov	r4, r0
 8005f0a:	460d      	mov	r5, r1
 8005f0c:	2118      	movs	r1, #24
 8005f0e:	2002      	movs	r0, #2
 8005f10:	f7ff f869 	bl	8004fe6 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005f14:	ec51 0b10 	vmov	r0, r1, d0
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	4b48      	ldr	r3, [pc, #288]	; (8006040 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x1a0>)
 8005f1e:	f7fa f9d3 	bl	80002c8 <__aeabi_dsub>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4620      	mov	r0, r4
 8005f28:	4629      	mov	r1, r5
 8005f2a:	f7fa f9cd 	bl	80002c8 <__aeabi_dsub>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4690      	mov	r8, r2
 8005f34:	4699      	mov	r9, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fa fb0f 	bl	8000564 <__aeabi_i2d>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	f7fa fb73 	bl	8000638 <__aeabi_dmul>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4640      	mov	r0, r8
 8005f58:	4649      	mov	r1, r9
 8005f5a:	f7fa f9b5 	bl	80002c8 <__aeabi_dsub>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4610      	mov	r0, r2
 8005f64:	4619      	mov	r1, r3
 8005f66:	f7fa fe17 	bl	8000b98 <__aeabi_d2iz>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	e021      	b.n	8005fb4 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x114>
	else XPosition_DATA = (XPosition_DATA-((this->x_offset_)*(this->unit_)));
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fa faf6 	bl	8000564 <__aeabi_i2d>
 8005f78:	4680      	mov	r8, r0
 8005f7a:	4689      	mov	r9, r1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fa faec 	bl	8000564 <__aeabi_i2d>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4620      	mov	r0, r4
 8005f92:	4629      	mov	r1, r5
 8005f94:	f7fa fb50 	bl	8000638 <__aeabi_dmul>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4640      	mov	r0, r8
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	f7fa f992 	bl	80002c8 <__aeabi_dsub>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	f7fa fdf4 	bl	8000b98 <__aeabi_d2iz>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	60fb      	str	r3, [r7, #12]


	double xpos = ((XPosition_DATA/(double)(this->unit_)));                   //To make units milimeters to meters
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fa fad4 	bl	8000564 <__aeabi_i2d>
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	460d      	mov	r5, r1
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fa fabd 	bl	8000544 <__aeabi_ui2d>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4620      	mov	r0, r4
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	f7fa fc5b 	bl	800088c <__aeabi_ddiv>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if(xpos >= this->pos_area_min_ && xpos <= this->pos_area_max_) return xpos;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fa fabd 	bl	8000564 <__aeabi_i2d>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005ff2:	f7fa fda7 	bl	8000b44 <__aeabi_dcmpge>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d011      	beq.n	8006020 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x180>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006002:	4618      	mov	r0, r3
 8006004:	f7fa faae 	bl	8000564 <__aeabi_i2d>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006010:	f7fa fd8e 	bl	8000b30 <__aeabi_dcmple>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x180>
 800601a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800601e:	e002      	b.n	8006026 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x186>
	else return this->xpos_;  //	  else { state |= 0x0010;} //Out of Range
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
}
 8006026:	ec43 2b17 	vmov	d7, r2, r3
 800602a:	eeb0 0a47 	vmov.f32	s0, s14
 800602e:	eef0 0a67 	vmov.f32	s1, s15
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800603a:	bf00      	nop
 800603c:	0001869f 	.word	0x0001869f
 8006040:	3ff00000 	.word	0x3ff00000

08006044 <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE>:

double PGV100::ProcessGetYPosInfo(std::vector<uint16_t> temp_buf)
{
 8006044:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006048:	b086      	sub	sp, #24
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
	int32_t YPosition_DATA = ((temp_buf)[7]) & 0xFF;//Y Buf
 8006050:	2107      	movs	r1, #7
 8006052:	6838      	ldr	r0, [r7, #0]
 8006054:	f7fd fd26 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8006058:	4603      	mov	r3, r0
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	60fb      	str	r3, [r7, #12]
	(YPosition_DATA) |= (((temp_buf)[6]) << 7) & 0xFF;
 8006060:	2106      	movs	r1, #6
 8006062:	6838      	ldr	r0, [r7, #0]
 8006064:	f7fd fd1e 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8006068:	4603      	mov	r3, r0
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	01db      	lsls	r3, r3, #7
 800606e:	b2da      	uxtb	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

	//for making Y-axis center to zero
	if(YPosition_DATA>=(1000))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800607c:	db24      	blt.n	80060c8 <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE+0x84>
	YPosition_DATA = (YPosition_DATA-(16383)) - ((this->y_offset_)*(this->unit_));
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4b33      	ldr	r3, [pc, #204]	; (8006150 <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE+0x10c>)
 8006082:	4413      	add	r3, r2
 8006084:	4618      	mov	r0, r3
 8006086:	f7fa fa6d 	bl	8000564 <__aeabi_i2d>
 800608a:	4680      	mov	r8, r0
 800608c:	4689      	mov	r9, r1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006098:	4618      	mov	r0, r3
 800609a:	f7fa fa63 	bl	8000564 <__aeabi_i2d>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4620      	mov	r0, r4
 80060a4:	4629      	mov	r1, r5
 80060a6:	f7fa fac7 	bl	8000638 <__aeabi_dmul>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4640      	mov	r0, r8
 80060b0:	4649      	mov	r1, r9
 80060b2:	f7fa f909 	bl	80002c8 <__aeabi_dsub>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4610      	mov	r0, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	f7fa fd6b 	bl	8000b98 <__aeabi_d2iz>
 80060c2:	4603      	mov	r3, r0
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	e021      	b.n	800610c <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE+0xc8>
	else YPosition_DATA = (YPosition_DATA-(this->y_offset_*(this->unit_)));
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fa fa4a 	bl	8000564 <__aeabi_i2d>
 80060d0:	4680      	mov	r8, r0
 80060d2:	4689      	mov	r9, r1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fa fa40 	bl	8000564 <__aeabi_i2d>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4620      	mov	r0, r4
 80060ea:	4629      	mov	r1, r5
 80060ec:	f7fa faa4 	bl	8000638 <__aeabi_dmul>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4640      	mov	r0, r8
 80060f6:	4649      	mov	r1, r9
 80060f8:	f7fa f8e6 	bl	80002c8 <__aeabi_dsub>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4610      	mov	r0, r2
 8006102:	4619      	mov	r1, r3
 8006104:	f7fa fd48 	bl	8000b98 <__aeabi_d2iz>
 8006108:	4603      	mov	r3, r0
 800610a:	60fb      	str	r3, [r7, #12]

	double ypos = ((YPosition_DATA/(double)(this->unit_)));
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4618      	mov	r0, r3
 8006110:	f7fa fa28 	bl	8000564 <__aeabi_i2d>
 8006114:	4604      	mov	r4, r0
 8006116:	460d      	mov	r5, r1
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800611c:	4618      	mov	r0, r3
 800611e:	f7fa fa11 	bl	8000544 <__aeabi_ui2d>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4620      	mov	r0, r4
 8006128:	4629      	mov	r1, r5
 800612a:	f7fa fbaf 	bl	800088c <__aeabi_ddiv>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return ypos;
 8006136:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800613a:	ec43 2b17 	vmov	d7, r2, r3
}
 800613e:	eeb0 0a47 	vmov.f32	s0, s14
 8006142:	eef0 0a67 	vmov.f32	s1, s15
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800614e:	bf00      	nop
 8006150:	ffffc001 	.word	0xffffc001

08006154 <_ZN6PGV10023ProcessGetDirectionInfoESt6vectorItSaItEE>:

uint16_t PGV100::ProcessGetDirectionInfo(std::vector<uint16_t> temp_buf)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
	return (uint16_t)(temp_buf)[1]&0x03;
 800615e:	2101      	movs	r1, #1
 8006160:	6838      	ldr	r0, [r7, #0]
 8006162:	f7fd fc9f 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8006166:	4603      	mov	r3, r0
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	b29b      	uxth	r3, r3
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE>:

uint16_t PGV100::ProcessGetColorInfo(std::vector<uint16_t> temp_buf)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
	if((temp_buf)[0]&0x07 && (temp_buf)[1]&0x07) return (uint16_t)(temp_buf)[1]&0x07;
 8006182:	2100      	movs	r1, #0
 8006184:	6838      	ldr	r0, [r7, #0]
 8006186:	f7fd fc8d 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 800618a:	4603      	mov	r3, r0
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00b      	beq.n	80061ae <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x36>
 8006196:	2101      	movs	r1, #1
 8006198:	6838      	ldr	r0, [r7, #0]
 800619a:	f7fd fc83 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 800619e:	4603      	mov	r3, r0
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x36>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x38>
 80061ae:	2300      	movs	r3, #0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d009      	beq.n	80061c8 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x50>
 80061b4:	2101      	movs	r1, #1
 80061b6:	6838      	ldr	r0, [r7, #0]
 80061b8:	f7fd fc74 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 80061bc:	4603      	mov	r3, r0
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	e002      	b.n	80061ce <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x56>
	else return this->color_;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE>:

//---------------------------------------------------------------Processing data
//for Error checking
uint16_t PGV100::ProcessChecksumData(std::vector<uint16_t> temp_buf)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b08c      	sub	sp, #48	; 0x30
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t ChkSum_Data = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t even_cnt[8]={0,};
 80061e8:	f107 0310 	add.w	r3, r7, #16
 80061ec:	2200      	movs	r2, #0
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	605a      	str	r2, [r3, #4]
 80061f2:	609a      	str	r2, [r3, #8]
 80061f4:	60da      	str	r2, [r3, #12]

	//1. the last byte is for chksum data
	temp_buf.pop_back();
 80061f6:	6838      	ldr	r0, [r7, #0]
 80061f8:	f7fe ffdf 	bl	80051ba <_ZNSt6vectorItSaItEE8pop_backEv>

	//2. check each bytes for calculating 'xor' value
	for(uint16_t i=0; i<8; i++)
 80061fc:	2300      	movs	r3, #0
 80061fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006200:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006202:	2b07      	cmp	r3, #7
 8006204:	d85a      	bhi.n	80062bc <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0xe6>
	{
		for (auto& index : temp_buf)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
 800620a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800620c:	f7fe f82f 	bl	800426e <_ZNSt6vectorItSaItEE5beginEv>
 8006210:	4603      	mov	r3, r0
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006216:	f7fd fdb7 	bl	8003d88 <_ZNSt6vectorItSaItEE3endEv>
 800621a:	4603      	mov	r3, r0
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	f107 0208 	add.w	r2, r7, #8
 8006222:	f107 030c 	add.w	r3, r7, #12
 8006226:	4611      	mov	r1, r2
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe ffda 	bl	80051e2 <_ZN9__gnu_cxxneIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d026      	beq.n	8006282 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0xac>
 8006234:	f107 030c 	add.w	r3, r7, #12
 8006238:	4618      	mov	r0, r3
 800623a:	f7fe fffa 	bl	8005232 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 800623e:	6238      	str	r0, [r7, #32]
		{
			temp = index;
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	857b      	strh	r3, [r7, #42]	; 0x2a
			if((temp>>i)&0x01) even_cnt[i]+=1;//8bit, even
 8006246:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006248:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800624a:	fa42 f303 	asr.w	r3, r2, r3
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00d      	beq.n	8006272 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0x9c>
 8006256:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	3330      	adds	r3, #48	; 0x30
 800625c:	443b      	add	r3, r7
 800625e:	f833 2c20 	ldrh.w	r2, [r3, #-32]
 8006262:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006264:	3201      	adds	r2, #1
 8006266:	b292      	uxth	r2, r2
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	3330      	adds	r3, #48	; 0x30
 800626c:	443b      	add	r3, r7
 800626e:	f823 2c20 	strh.w	r2, [r3, #-32]
			temp = 0;
 8006272:	2300      	movs	r3, #0
 8006274:	857b      	strh	r3, [r7, #42]	; 0x2a
		for (auto& index : temp_buf)
 8006276:	f107 030c 	add.w	r3, r7, #12
 800627a:	4618      	mov	r0, r3
 800627c:	f7fe ffc9 	bl	8005212 <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>
 8006280:	e7cd      	b.n	800621e <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0x48>
		}
		if(even_cnt[i]!=0) ChkSum_Data |= (even_cnt[i]%2) * (1<<i);
 8006282:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	3330      	adds	r3, #48	; 0x30
 8006288:	443b      	add	r3, r7
 800628a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d010      	beq.n	80062b4 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0xde>
 8006292:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	3330      	adds	r3, #48	; 0x30
 8006298:	443b      	add	r3, r7
 800629a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800629e:	f003 0201 	and.w	r2, r3, #1
 80062a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	b21a      	sxth	r2, r3
 80062aa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80062ae:	4313      	orrs	r3, r2
 80062b0:	b21b      	sxth	r3, r3
 80062b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t i=0; i<8; i++)
 80062b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062b6:	3301      	adds	r3, #1
 80062b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80062ba:	e7a1      	b.n	8006200 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0x2a>
	}
	 return ChkSum_Data;
 80062bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3730      	adds	r7, #48	; 0x30
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE>:

uint16_t PGV100::ProcessCheckErr(std::vector<uint16_t> temp_buf)
{
 80062c6:	b590      	push	{r4, r7, lr}
 80062c8:	b08b      	sub	sp, #44	; 0x2c
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
	 // 0x1000 = internal error (Recommend to change sensors)
	 // 0x2000 = reserved
	 // 0x4000 = reserved
	 // 0x8000 = reserved
	 //--------------------------------------------------------------------
	 uint16_t state = 0x0000;
 80062d0:	2300      	movs	r3, #0
 80062d2:	84fb      	strh	r3, [r7, #38]	; 0x26

	//Check Comm. Error
	if(!comm_status_)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80062da:	f083 0301 	eor.w	r3, r3, #1
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x26>
	{
		state = CommTimeout;
 80062e4:	2340      	movs	r3, #64	; 0x40
 80062e6:	84fb      	strh	r3, [r7, #38]	; 0x26
		return state;
 80062e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062ea:	e074      	b.n	80063d6 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x110>
	}

	//If Comm Err is not, check others
	if((temp_buf.back()) == ProcessChecksumData(temp_buf))    //Checksum error pass or not(POS_BUF[20] <--- check sum buffer)
 80062ec:	6838      	ldr	r0, [r7, #0]
 80062ee:	f7fe ffac 	bl	800524a <_ZNSt6vectorItSaItEE4backEv>
 80062f2:	4603      	mov	r3, r0
 80062f4:	881c      	ldrh	r4, [r3, #0]
 80062f6:	f107 030c 	add.w	r3, r7, #12
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fe ffbf 	bl	8005280 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8006302:	f107 030c 	add.w	r3, r7, #12
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff ff64 	bl	80061d6 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE>
 800630e:	4603      	mov	r3, r0
 8006310:	429c      	cmp	r4, r3
 8006312:	bf0c      	ite	eq
 8006314:	2301      	moveq	r3, #1
 8006316:	2300      	movne	r3, #0
 8006318:	b2dc      	uxtb	r4, r3
 800631a:	f107 030c 	add.w	r3, r7, #12
 800631e:	4618      	mov	r0, r3
 8006320:	f7fd fb52 	bl	80039c8 <_ZNSt6vectorItSaItEED1Ev>
 8006324:	2c00      	cmp	r4, #0
 8006326:	d053      	beq.n	80063d0 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10a>
	{
		if((temp_buf)[0] & 0x01)    //Err Occured
 8006328:	2100      	movs	r1, #0
 800632a:	6838      	ldr	r0, [r7, #0]
 800632c:	f7fd fbba 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 8006330:	4603      	mov	r3, r0
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	bf14      	ite	ne
 800633c:	2301      	movne	r3, #1
 800633e:	2300      	moveq	r3, #0
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d032      	beq.n	80063ac <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xe6>
		{
			uint16_t errcode =  ProcessGetERRInfo(temp_buf);
 8006346:	f107 0318 	add.w	r3, r7, #24
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	f7fe ff97 	bl	8005280 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8006352:	f107 0318 	add.w	r3, r7, #24
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff fcbb 	bl	8005cd4 <_ZN6PGV10017ProcessGetERRInfoESt6vectorItSaItEE>
 800635e:	4603      	mov	r3, r0
 8006360:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006362:	f107 0318 	add.w	r3, r7, #24
 8006366:	4618      	mov	r0, r3
 8006368:	f7fd fb2e 	bl	80039c8 <_ZNSt6vectorItSaItEED1Ev>
			if(errcode >= 1000) state = InternalFatal;        //Internal Fatal Error
 800636c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800636e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006372:	d303      	bcc.n	800637c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xb6>
 8006374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006378:	84fb      	strh	r3, [r7, #38]	; 0x26
 800637a:	e02b      	b.n	80063d4 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==1) state = ReadHeadTilted;     //read head tilted 180°.(pcv80 only)
 800637c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800637e:	2b01      	cmp	r3, #1
 8006380:	d102      	bne.n	8006388 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xc2>
 8006382:	2301      	movs	r3, #1
 8006384:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006386:	e025      	b.n	80063d4 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==2) state = CodeConditionErr;     //code condition error(code distance chk)
 8006388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800638a:	2b02      	cmp	r3, #2
 800638c:	d102      	bne.n	8006394 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xce>
 800638e:	2302      	movs	r3, #2
 8006390:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006392:	e01f      	b.n	80063d4 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==5) state = NoDirectionDeclared;     //No clear position can be determined(�Ÿ�����)
 8006394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006396:	2b05      	cmp	r3, #5
 8006398:	d102      	bne.n	80063a0 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xda>
 800639a:	2304      	movs	r3, #4
 800639c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800639e:	e019      	b.n	80063d4 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==6) state = NoColorDeclared;     // No Color decision(Set Color choice)
 80063a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063a2:	2b06      	cmp	r3, #6
 80063a4:	d116      	bne.n	80063d4 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
 80063a6:	2308      	movs	r3, #8
 80063a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063aa:	e013      	b.n	80063d4 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
		}
		else if((temp_buf)[0]&0x02) state = NoPosition;    //No Position Error
 80063ac:	2100      	movs	r1, #0
 80063ae:	6838      	ldr	r0, [r7, #0]
 80063b0:	f7fd fb78 	bl	8003aa4 <_ZNSt6vectorItSaItEEixEj>
 80063b4:	4603      	mov	r3, r0
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bf14      	ite	ne
 80063c0:	2301      	movne	r3, #1
 80063c2:	2300      	moveq	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d004      	beq.n	80063d4 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
 80063ca:	2320      	movs	r3, #32
 80063cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063ce:	e001      	b.n	80063d4 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
	}
	else state = CheckSumErr;        //check sum error
 80063d0:	2380      	movs	r3, #128	; 0x80
 80063d2:	84fb      	strh	r3, [r7, #38]	; 0x26

	return state;
 80063d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	372c      	adds	r7, #44	; 0x2c
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd90      	pop	{r4, r7, pc}

080063de <_ZN6PGV10019ProcessGetTotalInfoEv>:



//finally we got combined function
uint16_t PGV100::ProcessGetTotalInfo()
{
 80063de:	b590      	push	{r4, r7, lr}
 80063e0:	b0a3      	sub	sp, #140	; 0x8c
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
	//0 .Copying temp. data from received data
	std::vector<uint16_t> temp_buf_ = this->pos_buf_;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80063ec:	f107 030c 	add.w	r3, r7, #12
 80063f0:	4611      	mov	r1, r2
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe ff44 	bl	8005280 <_ZNSt6vectorItSaItEEC1ERKS1_>

	//1. check color response -> no error check
	if(max_read_buf_size_ == PGV100Color)  //response for changing colors
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d11a      	bne.n	8006438 <_ZN6PGV10019ProcessGetTotalInfoEv+0x5a>
	{
		this->color_ = ProcessGetColorInfo(temp_buf_);
 8006402:	f107 020c 	add.w	r2, r7, #12
 8006406:	f107 0318 	add.w	r3, r7, #24
 800640a:	4611      	mov	r1, r2
 800640c:	4618      	mov	r0, r3
 800640e:	f7fe ff37 	bl	8005280 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8006412:	f107 0318 	add.w	r3, r7, #24
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff fead 	bl	8006178 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE>
 800641e:	4603      	mov	r3, r0
 8006420:	461a      	mov	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8006428:	f107 0318 	add.w	r3, r7, #24
 800642c:	4618      	mov	r0, r3
 800642e:	f7fd facb 	bl	80039c8 <_ZNSt6vectorItSaItEED1Ev>
		return this->err_code_;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	8c1c      	ldrh	r4, [r3, #32]
 8006436:	e0f7      	b.n	8006628 <_ZN6PGV10019ProcessGetTotalInfoEv+0x24a>
	}

	//2. Timeout or other error handling
	uint16_t now_err = ProcessCheckErr(temp_buf_);
 8006438:	f107 020c 	add.w	r2, r7, #12
 800643c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006440:	4611      	mov	r1, r2
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe ff1c 	bl	8005280 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8006448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff ff39 	bl	80062c6 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE>
 8006454:	4603      	mov	r3, r0
 8006456:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 800645a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800645e:	4618      	mov	r0, r3
 8006460:	f7fd fab2 	bl	80039c8 <_ZNSt6vectorItSaItEED1Ev>

	//3. simplized error handle error >=1, good = 0 and if error occur, error count is up
	//4. when the Error count reached max count, return err code
	if(now_err >= 1)
 8006464:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006468:	2b00      	cmp	r3, #0
 800646a:	d017      	beq.n	800649c <_ZN6PGV10019ProcessGetTotalInfoEv+0xbe>
	{
		FilterCountUp();
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4618      	mov	r0, r3
 8006470:	f7fd fa23 	bl	80038ba <_ZN12PNFPosSensor13FilterCountUpEv>
		if(IsInfoFiltered())
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4618      	mov	r0, r3
 8006478:	f7fd f9fb 	bl	8003872 <_ZN12PNFPosSensor14IsInfoFilteredEv>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <_ZN6PGV10019ProcessGetTotalInfoEv+0xba>
		{
			ResetAllData();
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7ff fab4 	bl	80059f0 <_ZN6PGV10012ResetAllDataEv>
			FilterCountReset();
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4618      	mov	r0, r3
 800648c:	f7fd fa2b 	bl	80038e6 <_ZN12PNFPosSensor16FilterCountResetEv>
			this->err_code_ = now_err;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8006496:	841a      	strh	r2, [r3, #32]
		}
		return 1;  //error occur
 8006498:	2401      	movs	r4, #1
 800649a:	e0c5      	b.n	8006628 <_ZN6PGV10019ProcessGetTotalInfoEv+0x24a>
	}

	//5. Processing data
	switch(this->max_read_buf_size_)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d002      	beq.n	80064ac <_ZN6PGV10019ProcessGetTotalInfoEv+0xce>
 80064a6:	2b15      	cmp	r3, #21
 80064a8:	d019      	beq.n	80064de <_ZN6PGV10019ProcessGetTotalInfoEv+0x100>
 80064aa:	e0b3      	b.n	8006614 <_ZN6PGV10019ProcessGetTotalInfoEv+0x236>
	{
		case PGV100Dir:
			this->dir_ = ProcessGetDirectionInfo(temp_buf_);
 80064ac:	f107 020c 	add.w	r2, r7, #12
 80064b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064b4:	4611      	mov	r1, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe fee2 	bl	8005280 <_ZNSt6vectorItSaItEEC1ERKS1_>
 80064bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fe46 	bl	8006154 <_ZN6PGV10023ProcessGetDirectionInfoESt6vectorItSaItEE>
 80064c8:	4603      	mov	r3, r0
 80064ca:	461a      	mov	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80064d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fd fa76 	bl	80039c8 <_ZNSt6vectorItSaItEED1Ev>
			break;
 80064dc:	e09a      	b.n	8006614 <_ZN6PGV10019ProcessGetTotalInfoEv+0x236>
		case PGV100Pos:
			if(ProcessIsTagDetected(temp_buf_)) this->tagNo_ = ProcessGetTagNumber(temp_buf_);
 80064de:	f107 020c 	add.w	r2, r7, #12
 80064e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064e6:	4611      	mov	r1, r2
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe fec9 	bl	8005280 <_ZNSt6vectorItSaItEEC1ERKS1_>
 80064ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff fc1d 	bl	8005d34 <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE>
 80064fa:	4603      	mov	r3, r0
 80064fc:	461c      	mov	r4, r3
 80064fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006502:	4618      	mov	r0, r3
 8006504:	f7fd fa60 	bl	80039c8 <_ZNSt6vectorItSaItEED1Ev>
 8006508:	2c00      	cmp	r4, #0
 800650a:	d018      	beq.n	800653e <_ZN6PGV10019ProcessGetTotalInfoEv+0x160>
 800650c:	f107 020c 	add.w	r2, r7, #12
 8006510:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006514:	4611      	mov	r1, r2
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe feb2 	bl	8005280 <_ZNSt6vectorItSaItEEC1ERKS1_>
 800651c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7ff fc21 	bl	8005d6a <_ZN6PGV10019ProcessGetTagNumberESt6vectorItSaItEE>
 8006528:	4603      	mov	r3, r0
 800652a:	461a      	mov	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8006532:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006536:	4618      	mov	r0, r3
 8006538:	f7fd fa46 	bl	80039c8 <_ZNSt6vectorItSaItEED1Ev>
 800653c:	e003      	b.n	8006546 <_ZN6PGV10019ProcessGetTotalInfoEv+0x168>
			else this->tagNo_ = 0;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
			this->dir_ = ProcessGetDirectionInfo(temp_buf_);
 8006546:	f107 020c 	add.w	r2, r7, #12
 800654a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800654e:	4611      	mov	r1, r2
 8006550:	4618      	mov	r0, r3
 8006552:	f7fe fe95 	bl	8005280 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8006556:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff fdf9 	bl	8006154 <_ZN6PGV10023ProcessGetDirectionInfoESt6vectorItSaItEE>
 8006562:	4603      	mov	r3, r0
 8006564:	461a      	mov	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800656c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006570:	4618      	mov	r0, r3
 8006572:	f7fd fa29 	bl	80039c8 <_ZNSt6vectorItSaItEED1Ev>
			this->angle_ = ProcessGetAngleInfo(temp_buf_); 	 			  //--- Get ANGLE INFO
 8006576:	f107 020c 	add.w	r2, r7, #12
 800657a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800657e:	4611      	mov	r1, r2
 8006580:	4618      	mov	r0, r3
 8006582:	f7fe fe7d 	bl	8005280 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8006586:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff fc2f 	bl	8005df0 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE>
 8006592:	eeb0 7a40 	vmov.f32	s14, s0
 8006596:	eef0 7a60 	vmov.f32	s15, s1
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
 80065a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fd fa0f 	bl	80039c8 <_ZNSt6vectorItSaItEED1Ev>
			this->xpos_ = ProcessGetXPosInfo(temp_buf_); 	 				  //--- Get X POSITION
 80065aa:	f107 020c 	add.w	r2, r7, #12
 80065ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80065b2:	4611      	mov	r1, r2
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe fe63 	bl	8005280 <_ZNSt6vectorItSaItEEC1ERKS1_>
 80065ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff fc6d 	bl	8005ea0 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE>
 80065c6:	eeb0 7a40 	vmov.f32	s14, s0
 80065ca:	eef0 7a60 	vmov.f32	s15, s1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	ed83 7b04 	vstr	d7, [r3, #16]
 80065d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fd f9f5 	bl	80039c8 <_ZNSt6vectorItSaItEED1Ev>
			this->ypos_ = ProcessGetYPosInfo(temp_buf_); 					  //--- Get Y POSITION
 80065de:	f107 020c 	add.w	r2, r7, #12
 80065e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80065e6:	4611      	mov	r1, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fe fe49 	bl	8005280 <_ZNSt6vectorItSaItEEC1ERKS1_>
 80065ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff fd25 	bl	8006044 <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE>
 80065fa:	eeb0 7a40 	vmov.f32	s14, s0
 80065fe:	eef0 7a60 	vmov.f32	s15, s1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	ed83 7b06 	vstr	d7, [r3, #24]
 8006608:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800660c:	4618      	mov	r0, r3
 800660e:	f7fd f9db 	bl	80039c8 <_ZNSt6vectorItSaItEED1Ev>
			break;
 8006612:	bf00      	nop
	}
	FilterCountReset();
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4618      	mov	r0, r3
 8006618:	f7fd f965 	bl	80038e6 <_ZN12PNFPosSensor16FilterCountResetEv>
	this->err_code_ = now_err;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8006622:	841a      	strh	r2, [r3, #32]
	return this->err_code_;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	8c1c      	ldrh	r4, [r3, #32]
	std::vector<uint16_t> temp_buf_ = this->pos_buf_;
 8006628:	f107 030c 	add.w	r3, r7, #12
 800662c:	4618      	mov	r0, r3
 800662e:	f7fd f9cb 	bl	80039c8 <_ZNSt6vectorItSaItEED1Ev>
}
 8006632:	4623      	mov	r3, r4
 8006634:	4618      	mov	r0, r3
 8006636:	378c      	adds	r7, #140	; 0x8c
 8006638:	46bd      	mov	sp, r7
 800663a:	bd90      	pop	{r4, r7, pc}

0800663c <_ZN6PGV1009DriveInitEv>:


void PGV100::DriveInit()
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	QueueRepeatPosReqeust();
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff fae3 	bl	8005c10 <_ZN6PGV10021QueueRepeatPosReqeustEv>
	ReadBufferInit();
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff fa60 	bl	8005b10 <_ZN6PGV10014ReadBufferInitEv>
}
 8006650:	bf00      	nop
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <_ZN6PGV1009DriveCommEv>:

void PGV100::DriveComm()
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
	if(TransmitSendRequest()!=HAL_OK || TransmitReceiveResponse()!=HAL_OK)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4618      	mov	r0, r3
 8006664:	f7fd f828 	bl	80036b8 <_ZN12PNFPosSensor19TransmitSendRequestEv>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <_ZN6PGV1009DriveCommEv+0x24>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4618      	mov	r0, r3
 8006672:	f7fd f860 	bl	8003736 <_ZN12PNFPosSensor23TransmitReceiveResponseEv>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <_ZN6PGV1009DriveCommEv+0x28>
 800667c:	2301      	movs	r3, #1
 800667e:	e000      	b.n	8006682 <_ZN6PGV1009DriveCommEv+0x2a>
 8006680:	2300      	movs	r3, #0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d004      	beq.n	8006690 <_ZN6PGV1009DriveCommEv+0x38>
	{
		this->comm_status_ = false;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	}
	else
	{
		this->comm_status_ = true;
	}
}
 800668e:	e003      	b.n	8006698 <_ZN6PGV1009DriveCommEv+0x40>
		this->comm_status_ = true;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <_ZN6PGV10013DriveAnalysisEv>:

void PGV100::DriveAnalysis()
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	ProcessGetTotalInfo();
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff fe98 	bl	80063de <_ZN6PGV10019ProcessGetTotalInfoEv>
	QueueDeleteRequest();
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fd f8cd 	bl	8003850 <_ZN12PNFPosSensor18QueueDeleteRequestEv>
}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <_ZN6PGV10014InitializationEv>:

//main functions
void PGV100::Initialization()
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
	RegisterRequsetCmd();
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff f9b5 	bl	8005a36 <_ZN6PGV10018RegisterRequsetCmdEv>
	RegisterDefaultParam();
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff fa10 	bl	8005af2 <_ZN6PGV10020RegisterDefaultParamEv>
}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fc8f 	bl	8007006 <_ZNSaIP12CommonSensorED1Ev>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 fc72 	bl	8006fe6 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implC1Ev>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4618      	mov	r0, r3
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <_ZNSt6vectorIP12CommonSensorSaIS1_EEC1Ev>:
      vector() = default;
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff ffeb 	bl	80066f2 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EEC1Ev>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8006726:	b580      	push	{r7, lr}
 8006728:	b082      	sub	sp, #8
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fcb9 	bl	80070a6 <_ZNSaIP6PGV100ED1Ev>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <_ZNSt12_Vector_baseIP6PGV100SaIS1_EEC1Ev>:
      _Vector_base() = default;
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fc9c 	bl	8007086 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implC1Ev>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <_ZNSt6vectorIP6PGV100SaIS1_EEC1Ev>:
      vector() = default;
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff ffeb 	bl	800673e <_ZNSt12_Vector_baseIP6PGV100SaIS1_EEC1Ev>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <_ZN13SensorManagerC1Ev>:
bool SensorManager::bDestroyed_ = false;
SensorManager* SensorManager::pIns_ = NULL;


//--------------------------------------------------------------------------------------------------Single instance:
SensorManager::SensorManager() {};
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff ffc5 	bl	800670c <_ZNSt6vectorIP12CommonSensorSaIS1_EEC1Ev>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	330c      	adds	r3, #12
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff ffe6 	bl	8006758 <_ZNSt6vectorIP6PGV100SaIS1_EEC1Ev>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <_ZN13SensorManagerD1Ev>:
SensorManager::SensorManager(const SensorManager& other){};
SensorManager& SensorManager::operator=(const SensorManager& ref) {return *this;};
SensorManager::~SensorManager()
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
{
	DeleteAllSensor();
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f881 	bl	80068a8 <_ZN13SensorManager15DeleteAllSensorEv>
	bDestroyed_ = true;
 80067a6:	4b08      	ldr	r3, [pc, #32]	; (80067c8 <_ZN13SensorManagerD1Ev+0x30>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	701a      	strb	r2, [r3, #0]
SensorManager::~SensorManager()
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	330c      	adds	r3, #12
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fc9d 	bl	80070f0 <_ZNSt6vectorIP6PGV100SaIS1_EED1Ev>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fc49 	bl	8007050 <_ZNSt6vectorIP12CommonSensorSaIS1_EED1Ev>
}
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	200008d0 	.word	0x200008d0

080067cc <__tcf_0>:

void SensorManager::ManagerCreate()
{
	static SensorManager ins;
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	4801      	ldr	r0, [pc, #4]	; (80067d8 <__tcf_0+0xc>)
 80067d2:	f7ff ffe1 	bl	8006798 <_ZN13SensorManagerD1Ev>
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	200008d8 	.word	0x200008d8

080067dc <_ZN13SensorManager13ManagerCreateEv>:
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
	static SensorManager ins;
 80067e0:	4b13      	ldr	r3, [pc, #76]	; (8006830 <_ZN13SensorManager13ManagerCreateEv+0x54>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	f3bf 8f5b 	dmb	ish
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bf0c      	ite	eq
 80067f2:	2301      	moveq	r3, #1
 80067f4:	2300      	movne	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d013      	beq.n	8006824 <_ZN13SensorManager13ManagerCreateEv+0x48>
 80067fc:	480c      	ldr	r0, [pc, #48]	; (8006830 <_ZN13SensorManager13ManagerCreateEv+0x54>)
 80067fe:	f01a fd63 	bl	80212c8 <__cxa_guard_acquire>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	bf14      	ite	ne
 8006808:	2301      	movne	r3, #1
 800680a:	2300      	moveq	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d008      	beq.n	8006824 <_ZN13SensorManager13ManagerCreateEv+0x48>
 8006812:	4808      	ldr	r0, [pc, #32]	; (8006834 <_ZN13SensorManager13ManagerCreateEv+0x58>)
 8006814:	f7ff ffad 	bl	8006772 <_ZN13SensorManagerC1Ev>
 8006818:	4807      	ldr	r0, [pc, #28]	; (8006838 <_ZN13SensorManager13ManagerCreateEv+0x5c>)
 800681a:	f01b fd6e 	bl	80222fa <atexit>
 800681e:	4804      	ldr	r0, [pc, #16]	; (8006830 <_ZN13SensorManager13ManagerCreateEv+0x54>)
 8006820:	f01a fd5e 	bl	80212e0 <__cxa_guard_release>
	pIns_ = &ins;
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <_ZN13SensorManager13ManagerCreateEv+0x60>)
 8006826:	4a03      	ldr	r2, [pc, #12]	; (8006834 <_ZN13SensorManager13ManagerCreateEv+0x58>)
 8006828:	601a      	str	r2, [r3, #0]
}
 800682a:	bf00      	nop
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	200008f4 	.word	0x200008f4
 8006834:	200008d8 	.word	0x200008d8
 8006838:	080067cd 	.word	0x080067cd
 800683c:	200008d4 	.word	0x200008d4

08006840 <_ZN13SensorManager13ManagerDeleteEv>:

void SensorManager::ManagerDelete()
{
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
	pIns_->~SensorManager();
 8006844:	4b03      	ldr	r3, [pc, #12]	; (8006854 <_ZN13SensorManager13ManagerDeleteEv+0x14>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff ffa5 	bl	8006798 <_ZN13SensorManagerD1Ev>
}
 800684e:	bf00      	nop
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	200008d4 	.word	0x200008d4

08006858 <_ZN13SensorManager11GetInstanceEv>:

SensorManager& SensorManager::GetInstance()
{
 8006858:	b598      	push	{r3, r4, r7, lr}
 800685a:	af00      	add	r7, sp, #0
	if(bDestroyed_)
 800685c:	4b0f      	ldr	r3, [pc, #60]	; (800689c <_ZN13SensorManager11GetInstanceEv+0x44>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d010      	beq.n	8006886 <_ZN13SensorManager11GetInstanceEv+0x2e>
	{
		pIns_ = new SensorManager();
 8006864:	201c      	movs	r0, #28
 8006866:	f01a fd3e 	bl	80212e6 <_Znwj>
 800686a:	4603      	mov	r3, r0
 800686c:	461c      	mov	r4, r3
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff ff7f 	bl	8006772 <_ZN13SensorManagerC1Ev>
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <_ZN13SensorManager11GetInstanceEv+0x48>)
 8006876:	601c      	str	r4, [r3, #0]
		// new(pIns) =  SensorManager;
		atexit(ManagerDelete);
 8006878:	480a      	ldr	r0, [pc, #40]	; (80068a4 <_ZN13SensorManager11GetInstanceEv+0x4c>)
 800687a:	f01b fd3e 	bl	80222fa <atexit>
		bDestroyed_ = false;
 800687e:	4b07      	ldr	r3, [pc, #28]	; (800689c <_ZN13SensorManager11GetInstanceEv+0x44>)
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
 8006884:	e005      	b.n	8006892 <_ZN13SensorManager11GetInstanceEv+0x3a>
	}
	else if (pIns_ == NULL)
 8006886:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <_ZN13SensorManager11GetInstanceEv+0x48>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <_ZN13SensorManager11GetInstanceEv+0x3a>
	{
		ManagerCreate();
 800688e:	f7ff ffa5 	bl	80067dc <_ZN13SensorManager13ManagerCreateEv>
	}
	 return *pIns_;
 8006892:	4b03      	ldr	r3, [pc, #12]	; (80068a0 <_ZN13SensorManager11GetInstanceEv+0x48>)
 8006894:	681b      	ldr	r3, [r3, #0]
}
 8006896:	4618      	mov	r0, r3
 8006898:	bd98      	pop	{r3, r4, r7, pc}
 800689a:	bf00      	nop
 800689c:	200008d0 	.word	0x200008d0
 80068a0:	200008d4 	.word	0x200008d4
 80068a4:	08006841 	.word	0x08006841

080068a8 <_ZN13SensorManager15DeleteAllSensorEv>:


void SensorManager::DeleteAllSensor()
{
 80068a8:	b590      	push	{r4, r7, lr}
 80068aa:	b08b      	sub	sp, #44	; 0x2c
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	for (auto& index : common_sensors_) delete (index);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
 80068b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068b6:	f000 fc36 	bl	8007126 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 80068ba:	4603      	mov	r3, r0
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068c0:	f000 fc41 	bl	8007146 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 80068c4:	4603      	mov	r3, r0
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	f107 0210 	add.w	r2, r7, #16
 80068cc:	f107 0314 	add.w	r3, r7, #20
 80068d0:	4611      	mov	r1, r2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fc48 	bl	8007168 <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d016      	beq.n	800690c <_ZN13SensorManager15DeleteAllSensorEv+0x64>
 80068de:	f107 0314 	add.w	r3, r7, #20
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fc68 	bl	80071b8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 80068e8:	61b8      	str	r0, [r7, #24]
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	681c      	ldr	r4, [r3, #0]
 80068ee:	2c00      	cmp	r4, #0
 80068f0:	d006      	beq.n	8006900 <_ZN13SensorManager15DeleteAllSensorEv+0x58>
 80068f2:	4620      	mov	r0, r4
 80068f4:	f7fa fc7d 	bl	80011f2 <_ZN12CommonSensorD1Ev>
 80068f8:	2110      	movs	r1, #16
 80068fa:	4620      	mov	r0, r4
 80068fc:	f01a fce2 	bl	80212c4 <_ZdlPvj>
 8006900:	f107 0314 	add.w	r3, r7, #20
 8006904:	4618      	mov	r0, r3
 8006906:	f000 fc47 	bl	8007198 <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 800690a:	e7dd      	b.n	80068c8 <_ZN13SensorManager15DeleteAllSensorEv+0x20>
	common_sensors_.clear();
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fc5e 	bl	80071d0 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5clearEv>
	for (auto& index : pgv100_) delete (index);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	330c      	adds	r3, #12
 8006918:	623b      	str	r3, [r7, #32]
 800691a:	6a38      	ldr	r0, [r7, #32]
 800691c:	f000 fc66 	bl	80071ec <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8006920:	4603      	mov	r3, r0
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	6a38      	ldr	r0, [r7, #32]
 8006926:	f000 fc71 	bl	800720c <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 800692a:	4603      	mov	r3, r0
 800692c:	60bb      	str	r3, [r7, #8]
 800692e:	f107 0208 	add.w	r2, r7, #8
 8006932:	f107 030c 	add.w	r3, r7, #12
 8006936:	4611      	mov	r1, r2
 8006938:	4618      	mov	r0, r3
 800693a:	f000 fc78 	bl	800722e <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d014      	beq.n	800696e <_ZN13SensorManager15DeleteAllSensorEv+0xc6>
 8006944:	f107 030c 	add.w	r3, r7, #12
 8006948:	4618      	mov	r0, r3
 800694a:	f000 fc98 	bl	800727e <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>
 800694e:	61f8      	str	r0, [r7, #28]
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d004      	beq.n	8006962 <_ZN13SensorManager15DeleteAllSensorEv+0xba>
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	3204      	adds	r2, #4
 800695c:	6812      	ldr	r2, [r2, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	4790      	blx	r2
 8006962:	f107 030c 	add.w	r3, r7, #12
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fc79 	bl	800725e <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>
 800696c:	e7df      	b.n	800692e <_ZN13SensorManager15DeleteAllSensorEv+0x86>
	pgv100_.clear();
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	330c      	adds	r3, #12
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fc8f 	bl	8007296 <_ZNSt6vectorIP6PGV100SaIS1_EE5clearEv>
}
 8006978:	bf00      	nop
 800697a:	372c      	adds	r7, #44	; 0x2c
 800697c:	46bd      	mov	sp, r7
 800697e:	bd90      	pop	{r4, r7, pc}

08006980 <_ZN13SensorManager20CommonSensorRegisterEv>:


//---------------------------------------------------------------------sensor function
//common sensor
void SensorManager::CommonSensorRegister()
{
 8006980:	b5b0      	push	{r4, r5, r7, lr}
 8006982:	b090      	sub	sp, #64	; 0x40
 8006984:	af02      	add	r7, sp, #8
 8006986:	6078      	str	r0, [r7, #4]
	if(common_sensors_.empty())
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fc91 	bl	80072b2 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5emptyEv>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 8106 	beq.w	8006ba4 <_ZN13SensorManager20CommonSensorRegisterEv+0x224>
	{
		//J6 -> PG9 ~ J11 -> PG15	, J12 -> PE0 , J16 -> PE4
		common_sensors_.emplace_back(new CommonSensor(AORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_9));
 8006998:	687d      	ldr	r5, [r7, #4]
 800699a:	2010      	movs	r0, #16
 800699c:	f01a fca3 	bl	80212e6 <_Znwj>
 80069a0:	4603      	mov	r3, r0
 80069a2:	461c      	mov	r4, r3
 80069a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	4b80      	ldr	r3, [pc, #512]	; (8006bac <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	2305      	movs	r3, #5
 80069b0:	2201      	movs	r2, #1
 80069b2:	2101      	movs	r1, #1
 80069b4:	4620      	mov	r0, r4
 80069b6:	f7fa fbed 	bl	8001194 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80069ba:	60fc      	str	r4, [r7, #12]
 80069bc:	f107 030c 	add.w	r3, r7, #12
 80069c0:	4619      	mov	r1, r3
 80069c2:	4628      	mov	r0, r5
 80069c4:	f000 fc90 	bl	80072e8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(AORG_R, ActiveH, Filter_5, GPIOG, GPIO_PIN_10));
 80069c8:	687d      	ldr	r5, [r7, #4]
 80069ca:	2010      	movs	r0, #16
 80069cc:	f01a fc8b 	bl	80212e6 <_Znwj>
 80069d0:	4603      	mov	r3, r0
 80069d2:	461c      	mov	r4, r3
 80069d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	4b74      	ldr	r3, [pc, #464]	; (8006bac <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	2305      	movs	r3, #5
 80069e0:	2201      	movs	r2, #1
 80069e2:	2102      	movs	r1, #2
 80069e4:	4620      	mov	r0, r4
 80069e6:	f7fa fbd5 	bl	8001194 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80069ea:	613c      	str	r4, [r7, #16]
 80069ec:	f107 0310 	add.w	r3, r7, #16
 80069f0:	4619      	mov	r1, r3
 80069f2:	4628      	mov	r0, r5
 80069f4:	f000 fc78 	bl	80072e8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(WORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_12));
 80069f8:	687d      	ldr	r5, [r7, #4]
 80069fa:	2010      	movs	r0, #16
 80069fc:	f01a fc73 	bl	80212e6 <_Znwj>
 8006a00:	4603      	mov	r3, r0
 8006a02:	461c      	mov	r4, r3
 8006a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a08:	9301      	str	r3, [sp, #4]
 8006a0a:	4b68      	ldr	r3, [pc, #416]	; (8006bac <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	2305      	movs	r3, #5
 8006a10:	2201      	movs	r2, #1
 8006a12:	2104      	movs	r1, #4
 8006a14:	4620      	mov	r0, r4
 8006a16:	f7fa fbbd 	bl	8001194 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8006a1a:	617c      	str	r4, [r7, #20]
 8006a1c:	f107 0314 	add.w	r3, r7, #20
 8006a20:	4619      	mov	r1, r3
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 fc60 	bl	80072e8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(WORG_R, ActiveH, Filter_5, GPIOG, GPIO_PIN_13));
 8006a28:	687d      	ldr	r5, [r7, #4]
 8006a2a:	2010      	movs	r0, #16
 8006a2c:	f01a fc5b 	bl	80212e6 <_Znwj>
 8006a30:	4603      	mov	r3, r0
 8006a32:	461c      	mov	r4, r3
 8006a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a38:	9301      	str	r3, [sp, #4]
 8006a3a:	4b5c      	ldr	r3, [pc, #368]	; (8006bac <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	2305      	movs	r3, #5
 8006a40:	2201      	movs	r2, #1
 8006a42:	2108      	movs	r1, #8
 8006a44:	4620      	mov	r0, r4
 8006a46:	f7fa fba5 	bl	8001194 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8006a4a:	61bc      	str	r4, [r7, #24]
 8006a4c:	f107 0318 	add.w	r3, r7, #24
 8006a50:	4619      	mov	r1, r3
 8006a52:	4628      	mov	r0, r5
 8006a54:	f000 fc48 	bl	80072e8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(TORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_14));
 8006a58:	687d      	ldr	r5, [r7, #4]
 8006a5a:	2010      	movs	r0, #16
 8006a5c:	f01a fc43 	bl	80212e6 <_Znwj>
 8006a60:	4603      	mov	r3, r0
 8006a62:	461c      	mov	r4, r3
 8006a64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	4b50      	ldr	r3, [pc, #320]	; (8006bac <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	2305      	movs	r3, #5
 8006a70:	2201      	movs	r2, #1
 8006a72:	2110      	movs	r1, #16
 8006a74:	4620      	mov	r0, r4
 8006a76:	f7fa fb8d 	bl	8001194 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8006a7a:	61fc      	str	r4, [r7, #28]
 8006a7c:	f107 031c 	add.w	r3, r7, #28
 8006a80:	4619      	mov	r1, r3
 8006a82:	4628      	mov	r0, r5
 8006a84:	f000 fc30 	bl	80072e8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(TORG_C, ActiveH, Filter_5, GPIOG, GPIO_PIN_15));
 8006a88:	687d      	ldr	r5, [r7, #4]
 8006a8a:	2010      	movs	r0, #16
 8006a8c:	f01a fc2b 	bl	80212e6 <_Znwj>
 8006a90:	4603      	mov	r3, r0
 8006a92:	461c      	mov	r4, r3
 8006a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a98:	9301      	str	r3, [sp, #4]
 8006a9a:	4b44      	ldr	r3, [pc, #272]	; (8006bac <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	2305      	movs	r3, #5
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	2120      	movs	r1, #32
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f7fa fb75 	bl	8001194 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8006aaa:	623c      	str	r4, [r7, #32]
 8006aac:	f107 0320 	add.w	r3, r7, #32
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f000 fc18 	bl	80072e8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>

		common_sensors_.emplace_back(new CommonSensor(TORG_R, ActiveH, Filter_5, GPIOE, GPIO_PIN_0));
 8006ab8:	687d      	ldr	r5, [r7, #4]
 8006aba:	2010      	movs	r0, #16
 8006abc:	f01a fc13 	bl	80212e6 <_Znwj>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	461c      	mov	r4, r3
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	9301      	str	r3, [sp, #4]
 8006ac8:	4b39      	ldr	r3, [pc, #228]	; (8006bb0 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	2305      	movs	r3, #5
 8006ace:	2201      	movs	r2, #1
 8006ad0:	2140      	movs	r1, #64	; 0x40
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f7fa fb5e 	bl	8001194 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8006ad8:	627c      	str	r4, [r7, #36]	; 0x24
 8006ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ade:	4619      	mov	r1, r3
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	f000 fc01 	bl	80072e8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_U, ActiveH, Filter_5, GPIOE, GPIO_PIN_1));
 8006ae6:	687d      	ldr	r5, [r7, #4]
 8006ae8:	2010      	movs	r0, #16
 8006aea:	f01a fbfc 	bl	80212e6 <_Znwj>
 8006aee:	4603      	mov	r3, r0
 8006af0:	461c      	mov	r4, r3
 8006af2:	2302      	movs	r3, #2
 8006af4:	9301      	str	r3, [sp, #4]
 8006af6:	4b2e      	ldr	r3, [pc, #184]	; (8006bb0 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	2305      	movs	r3, #5
 8006afc:	2201      	movs	r2, #1
 8006afe:	2180      	movs	r1, #128	; 0x80
 8006b00:	4620      	mov	r0, r4
 8006b02:	f7fa fb47 	bl	8001194 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8006b06:	62bc      	str	r4, [r7, #40]	; 0x28
 8006b08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 fbea 	bl	80072e8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_C, ActiveH, Filter_5, GPIOE, GPIO_PIN_2));
 8006b14:	687d      	ldr	r5, [r7, #4]
 8006b16:	2010      	movs	r0, #16
 8006b18:	f01a fbe5 	bl	80212e6 <_Znwj>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	461c      	mov	r4, r3
 8006b20:	2304      	movs	r3, #4
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	4b22      	ldr	r3, [pc, #136]	; (8006bb0 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	2305      	movs	r3, #5
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b30:	4620      	mov	r0, r4
 8006b32:	f7fa fb2f 	bl	8001194 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8006b36:	62fc      	str	r4, [r7, #44]	; 0x2c
 8006b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f000 fbd2 	bl	80072e8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_L, ActiveH, Filter_5, GPIOE, GPIO_PIN_3));
 8006b44:	687d      	ldr	r5, [r7, #4]
 8006b46:	2010      	movs	r0, #16
 8006b48:	f01a fbcd 	bl	80212e6 <_Znwj>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	461c      	mov	r4, r3
 8006b50:	2308      	movs	r3, #8
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	4b16      	ldr	r3, [pc, #88]	; (8006bb0 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	2305      	movs	r3, #5
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b60:	4620      	mov	r0, r4
 8006b62:	f7fa fb17 	bl	8001194 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8006b66:	633c      	str	r4, [r7, #48]	; 0x30
 8006b68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f000 fbba 	bl	80072e8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(IN_L, ActiveH, Filter_5, GPIOE, GPIO_PIN_4));
 8006b74:	687d      	ldr	r5, [r7, #4]
 8006b76:	2010      	movs	r0, #16
 8006b78:	f01a fbb5 	bl	80212e6 <_Znwj>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	461c      	mov	r4, r3
 8006b80:	2310      	movs	r3, #16
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	2305      	movs	r3, #5
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b90:	4620      	mov	r0, r4
 8006b92:	f7fa faff 	bl	8001194 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8006b96:	637c      	str	r4, [r7, #52]	; 0x34
 8006b98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f000 fba2 	bl	80072e8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		//common_sensors_.emplace_back(new CommonSensor(IN_R, ActiveH, Filter_5, GPIOE, GPIO_PIN_4));
		//common_sensors_.resize(common_sensors_.size());
	}
}
 8006ba4:	bf00      	nop
 8006ba6:	3738      	adds	r7, #56	; 0x38
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bdb0      	pop	{r4, r5, r7, pc}
 8006bac:	40021800 	.word	0x40021800
 8006bb0:	40021000 	.word	0x40021000

08006bb4 <_ZN13SensorManager22CommonSensorInitializeEv>:

void SensorManager::CommonSensorInitialize()
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
	CommonSensorRegister();
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff fedf 	bl	8006980 <_ZN13SensorManager20CommonSensorRegisterEv>
	CommonSensorDrive();
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f804 	bl	8006bd0 <_ZN13SensorManager17CommonSensorDriveEv>
}
 8006bc8:	bf00      	nop
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <_ZN13SensorManager17CommonSensorDriveEv>:
}



void SensorManager::CommonSensorDrive()
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
	for (auto& sensors : common_sensors_) sensors->Drive();
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	617b      	str	r3, [r7, #20]
 8006bdc:	6978      	ldr	r0, [r7, #20]
 8006bde:	f000 faa2 	bl	8007126 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 8006be2:	4603      	mov	r3, r0
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	6978      	ldr	r0, [r7, #20]
 8006be8:	f000 faad 	bl	8007146 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 8006bec:	4603      	mov	r3, r0
 8006bee:	60bb      	str	r3, [r7, #8]
 8006bf0:	f107 0208 	add.w	r2, r7, #8
 8006bf4:	f107 030c 	add.w	r3, r7, #12
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fab4 	bl	8007168 <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d010      	beq.n	8006c28 <_ZN13SensorManager17CommonSensorDriveEv+0x58>
 8006c06:	f107 030c 	add.w	r3, r7, #12
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fad4 	bl	80071b8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 8006c10:	6138      	str	r0, [r7, #16]
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fa fb74 	bl	8001304 <_ZN12CommonSensor5DriveEv>
 8006c1c:	f107 030c 	add.w	r3, r7, #12
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fab9 	bl	8007198 <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 8006c26:	e7e3      	b.n	8006bf0 <_ZN13SensorManager17CommonSensorDriveEv+0x20>
	CommonSensorGatherData();
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f804 	bl	8006c36 <_ZN13SensorManager22CommonSensorGatherDataEv>
}
 8006c2e:	bf00      	nop
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <_ZN13SensorManager22CommonSensorGatherDataEv>:
uint16_t SensorManager::OUT_LGetData(){return CommonSensorGetData(OUT_L);}
uint16_t SensorManager::OUT_RGetData(){return CommonSensorGetData(OUT_R);}


void SensorManager::CommonSensorGatherData()
{
 8006c36:	b590      	push	{r4, r7, lr}
 8006c38:	b089      	sub	sp, #36	; 0x24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
	uint16_t temp_sensor_data = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	83fb      	strh	r3, [r7, #30]
	for (auto& sensors : common_sensors_)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	61bb      	str	r3, [r7, #24]
 8006c46:	69b8      	ldr	r0, [r7, #24]
 8006c48:	f000 fa6d 	bl	8007126 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	69b8      	ldr	r0, [r7, #24]
 8006c52:	f000 fa78 	bl	8007146 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 8006c56:	4603      	mov	r3, r0
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	f107 020c 	add.w	r2, r7, #12
 8006c5e:	f107 0310 	add.w	r3, r7, #16
 8006c62:	4611      	mov	r1, r2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fa7f 	bl	8007168 <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d020      	beq.n	8006cb2 <_ZN13SensorManager22CommonSensorGatherDataEv+0x7c>
 8006c70:	f107 0310 	add.w	r3, r7, #16
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fa9f 	bl	80071b8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 8006c7a:	6178      	str	r0, [r7, #20]
	{
		temp_sensor_data |=  ((sensors->GetSensorIndex()) * (sensors->GetSensorData()));
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fa facd 	bl	8001220 <_ZNK12CommonSensor14GetSensorIndexEv>
 8006c86:	4603      	mov	r3, r0
 8006c88:	461c      	mov	r4, r3
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fa faba 	bl	8001208 <_ZNK12CommonSensor13GetSensorDataEv>
 8006c94:	4603      	mov	r3, r0
 8006c96:	fb04 f303 	mul.w	r3, r4, r3
 8006c9a:	b21a      	sxth	r2, r3
 8006c9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	b21b      	sxth	r3, r3
 8006ca4:	83fb      	strh	r3, [r7, #30]
	for (auto& sensors : common_sensors_)
 8006ca6:	f107 0310 	add.w	r3, r7, #16
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fa74 	bl	8007198 <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 8006cb0:	e7d3      	b.n	8006c5a <_ZN13SensorManager22CommonSensorGatherDataEv+0x24>
	}
	this->common_sensor_data_ = temp_sensor_data;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	8bfa      	ldrh	r2, [r7, #30]
 8006cb6:	831a      	strh	r2, [r3, #24]
}
 8006cb8:	bf00      	nop
 8006cba:	3724      	adds	r7, #36	; 0x24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd90      	pop	{r4, r7, pc}

08006cc0 <_ZNK13SensorManager22CommonSensorGetAllDataEv>:

uint16_t SensorManager::CommonSensorGetAllData() const {return this->common_sensor_data_;}
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	8b1b      	ldrh	r3, [r3, #24]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <_ZN13SensorManager23OpticalSensorInitializeEv>:

//---------------------------------------------------------------------PNFPOSsensor function
//PNFPos sensor

void SensorManager::OpticalSensorInitialize()
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	for (auto& index : pgv100_) index->Initialization();
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	6978      	ldr	r0, [r7, #20]
 8006ce8:	f000 fa80 	bl	80071ec <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8006cec:	4603      	mov	r3, r0
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	6978      	ldr	r0, [r7, #20]
 8006cf2:	f000 fa8b 	bl	800720c <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	60bb      	str	r3, [r7, #8]
 8006cfa:	f107 0208 	add.w	r2, r7, #8
 8006cfe:	f107 030c 	add.w	r3, r7, #12
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fa92 	bl	800722e <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d014      	beq.n	8006d3a <_ZN13SensorManager23OpticalSensorInitializeEv+0x62>
 8006d10:	f107 030c 	add.w	r3, r7, #12
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 fab2 	bl	800727e <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>
 8006d1a:	6138      	str	r0, [r7, #16]
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3314      	adds	r3, #20
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	4798      	blx	r3
 8006d2e:	f107 030c 	add.w	r3, r7, #12
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 fa93 	bl	800725e <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>
 8006d38:	e7df      	b.n	8006cfa <_ZN13SensorManager23OpticalSensorInitializeEv+0x22>
	//add pcv 80 or
}
 8006d3a:	bf00      	nop
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	0000      	movs	r0, r0
 8006d44:	0000      	movs	r0, r0
	...

08006d48 <_ZN13SensorManager14PGV100RegisterEv>:

void SensorManager::PGV100Register()
{
 8006d48:	b5b0      	push	{r4, r5, r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af04      	add	r7, sp, #16
 8006d4e:	6078      	str	r0, [r7, #4]
	if(pgv100_.empty())
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	330c      	adds	r3, #12
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 faf5 	bl	8007344 <_ZNKSt6vectorIP6PGV100SaIS1_EE5emptyEv>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d020      	beq.n	8006da2 <_ZN13SensorManager14PGV100RegisterEv+0x5a>
	{
		pgv100_.emplace_back(new PGV100(0x00, RS485, &huart5, GPIOB, GPIO_PIN_0, milimeter_1, 0.0, 0.0, 0.0));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f103 050c 	add.w	r5, r3, #12
 8006d66:	20b8      	movs	r0, #184	; 0xb8
 8006d68:	f01a fabd 	bl	80212e6 <_Znwj>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	461c      	mov	r4, r3
 8006d70:	230a      	movs	r3, #10
 8006d72:	9302      	str	r3, [sp, #8]
 8006d74:	2301      	movs	r3, #1
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	4b0f      	ldr	r3, [pc, #60]	; (8006db8 <_ZN13SensorManager14PGV100RegisterEv+0x70>)
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 8006db0 <_ZN13SensorManager14PGV100RegisterEv+0x68>
 8006d80:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8006db0 <_ZN13SensorManager14PGV100RegisterEv+0x68>
 8006d84:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8006db0 <_ZN13SensorManager14PGV100RegisterEv+0x68>
 8006d88:	4b0c      	ldr	r3, [pc, #48]	; (8006dbc <_ZN13SensorManager14PGV100RegisterEv+0x74>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f7fe fda8 	bl	80058e4 <_ZN6PGV100C1EttP20__UART_HandleTypeDefP12GPIO_TypeDefttddd>
 8006d94:	60fc      	str	r4, [r7, #12]
 8006d96:	f107 030c 	add.w	r3, r7, #12
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f000 faec 	bl	800737a <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_>
	}

}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bdb0      	pop	{r4, r5, r7, pc}
 8006daa:	bf00      	nop
 8006dac:	f3af 8000 	nop.w
	...
 8006db8:	40020400 	.word	0x40020400
 8006dbc:	20000664 	.word	0x20000664

08006dc0 <_ZN13SensorManager16PGV100InitializeEv>:


bool SensorManager::PGV100Initialize()
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
	PGV100Register();
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7ff ffbd 	bl	8006d48 <_ZN13SensorManager14PGV100RegisterEv>
	OpticalSensorInitialize();
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff ff82 	bl	8006cd8 <_ZN13SensorManager23OpticalSensorInitializeEv>
	PGV100Drive();
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f808 	bl	8006dea <_ZN13SensorManager11PGV100DriveEv>
	return PGV100IsErrUp();
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f8b6 	bl	8006f4c <_ZNK13SensorManager13PGV100IsErrUpEv>
 8006de0:	4603      	mov	r3, r0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <_ZN13SensorManager11PGV100DriveEv>:
}



void SensorManager::PGV100Drive()
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b086      	sub	sp, #24
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
	for (auto& index : pgv100_) index->Drive();
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	330c      	adds	r3, #12
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	6978      	ldr	r0, [r7, #20]
 8006dfa:	f000 f9f7 	bl	80071ec <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	6978      	ldr	r0, [r7, #20]
 8006e04:	f000 fa02 	bl	800720c <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	60bb      	str	r3, [r7, #8]
 8006e0c:	f107 0208 	add.w	r2, r7, #8
 8006e10:	f107 030c 	add.w	r3, r7, #12
 8006e14:	4611      	mov	r1, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fa09 	bl	800722e <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d010      	beq.n	8006e44 <_ZN13SensorManager11PGV100DriveEv+0x5a>
 8006e22:	f107 030c 	add.w	r3, r7, #12
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fa29 	bl	800727e <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>
 8006e2c:	6138      	str	r0, [r7, #16]
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fc fd75 	bl	8003922 <_ZN12PNFPosSensor5DriveEv>
 8006e38:	f107 030c 	add.w	r3, r7, #12
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 fa0e 	bl	800725e <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>
 8006e42:	e7e3      	b.n	8006e0c <_ZN13SensorManager11PGV100DriveEv+0x22>
}
 8006e44:	bf00      	nop
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <_ZNK13SensorManager14PGV100GetXDataEv>:


double SensorManager::PGV100GetXData() const
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
	return pgv100_.at(0)->GetXPos();
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	330c      	adds	r3, #12
 8006e58:	2100      	movs	r1, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fabb 	bl	80073d6 <_ZNKSt6vectorIP6PGV100SaIS1_EE2atEj>
 8006e60:	4603      	mov	r3, r0
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fe fee6 	bl	8005c36 <_ZNK6PGV1007GetXPosEv>
 8006e6a:	eeb0 7a40 	vmov.f32	s14, s0
 8006e6e:	eef0 7a60 	vmov.f32	s15, s1
}
 8006e72:	eeb0 0a47 	vmov.f32	s0, s14
 8006e76:	eef0 0a67 	vmov.f32	s1, s15
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <_ZNK13SensorManager14PGV100GetYDataEv>:

double SensorManager::PGV100GetYData() const
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	return pgv100_.at(0)->GetYPos();
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	330c      	adds	r3, #12
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 faa1 	bl	80073d6 <_ZNKSt6vectorIP6PGV100SaIS1_EE2atEj>
 8006e94:	4603      	mov	r3, r0
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fe fede 	bl	8005c5a <_ZNK6PGV1007GetYPosEv>
 8006e9e:	eeb0 7a40 	vmov.f32	s14, s0
 8006ea2:	eef0 7a60 	vmov.f32	s15, s1
}
 8006ea6:	eeb0 0a47 	vmov.f32	s0, s14
 8006eaa:	eef0 0a67 	vmov.f32	s1, s15
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <_ZNK13SensorManager18PGV100GetAngleDataEv>:

double SensorManager::PGV100GetAngleData() const
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
	return pgv100_.at(0)->GetAngle();
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	330c      	adds	r3, #12
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 fa87 	bl	80073d6 <_ZNKSt6vectorIP6PGV100SaIS1_EE2atEj>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe fed6 	bl	8005c7e <_ZNK6PGV1008GetAngleEv>
 8006ed2:	eeb0 7a40 	vmov.f32	s14, s0
 8006ed6:	eef0 7a60 	vmov.f32	s15, s1
}
 8006eda:	eeb0 0a47 	vmov.f32	s0, s14
 8006ede:	eef0 0a67 	vmov.f32	s1, s15
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <_ZNK13SensorManager16PGV100GetTagDataEv>:

uint16_t SensorManager::PGV100GetTagData() const
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
	return pgv100_.at(0)->GetTagNo();
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	330c      	adds	r3, #12
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fa6d 	bl	80073d6 <_ZNKSt6vectorIP6PGV100SaIS1_EE2atEj>
 8006efc:	4603      	mov	r3, r0
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fe fece 	bl	8005ca2 <_ZNK6PGV1008GetTagNoEv>
 8006f06:	4603      	mov	r3, r0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <_ZNK13SensorManager16PGV100GetErrDataEv>:

double SensorManager::PGV100GetErrData() const
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
	return pgv100_.at(0)->GetErrStatus();
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	330c      	adds	r3, #12
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fa59 	bl	80073d6 <_ZNKSt6vectorIP6PGV100SaIS1_EE2atEj>
 8006f24:	4603      	mov	r3, r0
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe fec7 	bl	8005cbc <_ZNK6PGV10012GetErrStatusEv>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7f9 fb07 	bl	8000544 <__aeabi_ui2d>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	ec43 2b17 	vmov	d7, r2, r3
}
 8006f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8006f42:	eef0 0a67 	vmov.f32	s1, s15
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <_ZNK13SensorManager13PGV100IsErrUpEv>:

bool SensorManager::PGV100IsErrUp() const
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
	return pgv100_.at(0)->IsErrUp();
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	330c      	adds	r3, #12
 8006f58:	2100      	movs	r1, #0
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fa3b 	bl	80073d6 <_ZNKSt6vectorIP6PGV100SaIS1_EE2atEj>
 8006f60:	4603      	mov	r3, r0
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fc fccb 	bl	8003900 <_ZN12PNFPosSensor7IsErrUpEv>
 8006f6a:	4603      	mov	r3, r0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <_ZN13SensorManager17PGV100DirStraightEv>:


void SensorManager::PGV100DirStraight()
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	pgv100_.at(0)->RequestChangeDirstraight();
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	330c      	adds	r3, #12
 8006f80:	2100      	movs	r1, #0
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fa39 	bl	80073fa <_ZNSt6vectorIP6PGV100SaIS1_EE2atEj>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe fe0b 	bl	8005ba8 <_ZN6PGV10024RequestChangeDirstraightEv>
}
 8006f92:	bf00      	nop
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <_ZN13SensorManager13PGV100DirLeftEv>:

void SensorManager::PGV100DirLeft()
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
	pgv100_.at(0)->RequestChangeDirleft();
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	330c      	adds	r3, #12
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 fa26 	bl	80073fa <_ZNSt6vectorIP6PGV100SaIS1_EE2atEj>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe fe05 	bl	8005bc2 <_ZN6PGV10020RequestChangeDirleftEv>
}
 8006fb8:	bf00      	nop
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <_ZN13SensorManager14PGV100DirRightEv>:

void SensorManager::PGV100DirRight()
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	pgv100_.at(0)->RequestChangeDirright();
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	330c      	adds	r3, #12
 8006fcc:	2100      	movs	r1, #0
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fa13 	bl	80073fa <_ZNSt6vectorIP6PGV100SaIS1_EE2atEj>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fe fdff 	bl	8005bdc <_ZN6PGV10021RequestChangeDirrightEv>
}
 8006fde:	bf00      	nop
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fa15 	bl	800741e <_ZNSaIP12CommonSensorEC1Ev>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fa1d 	bl	8007436 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <_ZNSaIP12CommonSensorED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fa25 	bl	800745e <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorED1Ev>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689a      	ldr	r2, [r3, #8]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8007036:	461a      	mov	r2, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fa1b 	bl	8007474 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>
      }
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff fb4a 	bl	80066da <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implD1Ev>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <_ZNSt6vectorIP12CommonSensorSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8007050:	b5b0      	push	{r4, r5, r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681c      	ldr	r4, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4618      	mov	r0, r3
 8007064:	f000 fa19 	bl	800749a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8007068:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800706a:	461a      	mov	r2, r3
 800706c:	4629      	mov	r1, r5
 800706e:	4620      	mov	r0, r4
 8007070:	f000 fa1e 	bl	80074b0 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
      }
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff ffd1 	bl	800701e <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EED1Ev>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bdb0      	pop	{r4, r5, r7, pc}

08007086 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8007086:	b580      	push	{r7, lr}
 8007088:	b082      	sub	sp, #8
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fa1c 	bl	80074cc <_ZNSaIP6PGV100EC1Ev>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4618      	mov	r0, r3
 8007098:	f000 fa24 	bl	80074e4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <_ZNSaIP6PGV100ED1Ev>:
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fa2c 	bl	800750c <_ZN9__gnu_cxx13new_allocatorIP6PGV100ED1Ev>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <_ZNSt12_Vector_baseIP6PGV100SaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80070d6:	461a      	mov	r2, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fa22 	bl	8007522 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j>
      }
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff fb20 	bl	8006726 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implD1Ev>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <_ZNSt6vectorIP6PGV100SaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80070f0:	b5b0      	push	{r4, r5, r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681c      	ldr	r4, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4618      	mov	r0, r3
 8007104:	f000 fa20 	bl	8007548 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8007108:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800710a:	461a      	mov	r2, r3
 800710c:	4629      	mov	r1, r5
 800710e:	4620      	mov	r0, r4
 8007110:	f000 fa25 	bl	800755e <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>
      }
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff ffd1 	bl	80070be <_ZNSt12_Vector_baseIP6PGV100SaIS1_EED1Ev>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bdb0      	pop	{r4, r5, r7, pc}

08007126 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	f107 030c 	add.w	r3, r7, #12
 8007134:	4611      	mov	r1, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fa1f 	bl	800757a <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8007146:	b580      	push	{r7, lr}
 8007148:	b084      	sub	sp, #16
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	1d1a      	adds	r2, r3, #4
 8007152:	f107 030c 	add.w	r3, r7, #12
 8007156:	4611      	mov	r1, r2
 8007158:	4618      	mov	r0, r3
 800715a:	f000 fa0e 	bl	800757a <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007168:	b590      	push	{r4, r7, lr}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fa11 	bl	800759a <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8007178:	4603      	mov	r3, r0
 800717a:	681c      	ldr	r4, [r3, #0]
 800717c:	6838      	ldr	r0, [r7, #0]
 800717e:	f000 fa0c 	bl	800759a <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8007182:	4603      	mov	r3, r0
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	429c      	cmp	r4, r3
 8007188:	bf14      	ite	ne
 800718a:	2301      	movne	r3, #1
 800718c:	2300      	moveq	r3, #0
 800718e:	b2db      	uxtb	r3, r3
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	bd90      	pop	{r4, r7, pc}

08007198 <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
	++_M_current;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	1d1a      	adds	r2, r3, #4
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	601a      	str	r2, [r3, #0]
	return *this;
 80071aa:	687b      	ldr	r3, [r7, #4]
      }
 80071ac:	4618      	mov	r0, r3
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f9e6 	bl	80075b0 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_>
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	f107 030c 	add.w	r3, r7, #12
 80071fa:	4611      	mov	r1, r2
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 f9f8 	bl	80075f2 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	1d1a      	adds	r2, r3, #4
 8007218:	f107 030c 	add.w	r3, r7, #12
 800721c:	4611      	mov	r1, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f000 f9e7 	bl	80075f2 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800722e:	b590      	push	{r4, r7, lr}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f9ea 	bl	8007612 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 800723e:	4603      	mov	r3, r0
 8007240:	681c      	ldr	r4, [r3, #0]
 8007242:	6838      	ldr	r0, [r7, #0]
 8007244:	f000 f9e5 	bl	8007612 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8007248:	4603      	mov	r3, r0
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	429c      	cmp	r4, r3
 800724e:	bf14      	ite	ne
 8007250:	2301      	movne	r3, #1
 8007252:	2300      	moveq	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	bd90      	pop	{r4, r7, pc}

0800725e <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
	++_M_current;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	1d1a      	adds	r2, r3, #4
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	601a      	str	r2, [r3, #0]
	return *this;
 8007270:	687b      	ldr	r3, [r7, #4]
      }
 8007272:	4618      	mov	r0, r3
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <_ZNSt6vectorIP6PGV100SaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f9bf 	bl	8007628 <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_>
 80072aa:	bf00      	nop
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f9d5 	bl	800766a <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 80072c0:	4603      	mov	r3, r0
 80072c2:	60bb      	str	r3, [r7, #8]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f9e0 	bl	800768a <_ZNKSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 80072ca:	4603      	mov	r3, r0
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	f107 020c 	add.w	r2, r7, #12
 80072d2:	f107 0308 	add.w	r3, r7, #8
 80072d6:	4611      	mov	r1, r2
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 f9e7 	bl	80076ac <_ZN9__gnu_cxxeqIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 80072de:	4603      	mov	r3, r0
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 80072e8:	b5b0      	push	{r4, r5, r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d011      	beq.n	8007322 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80072fe:	687c      	ldr	r4, [r7, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685d      	ldr	r5, [r3, #4]
 8007304:	6838      	ldr	r0, [r7, #0]
 8007306:	f000 f9e9 	bl	80076dc <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 800730a:	4603      	mov	r3, r0
 800730c:	461a      	mov	r2, r3
 800730e:	4629      	mov	r1, r5
 8007310:	4620      	mov	r0, r4
 8007312:	f000 f9ee 	bl	80076f2 <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	1d1a      	adds	r2, r3, #4
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	605a      	str	r2, [r3, #4]
      }
 8007320:	e00c      	b.n	800733c <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff ff0f 	bl	8007146 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 8007328:	4604      	mov	r4, r0
 800732a:	6838      	ldr	r0, [r7, #0]
 800732c:	f000 f9d6 	bl	80076dc <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8007330:	4603      	mov	r3, r0
 8007332:	461a      	mov	r2, r3
 8007334:	4621      	mov	r1, r4
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa04 	bl	8007744 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bdb0      	pop	{r4, r5, r7, pc}

08007344 <_ZNKSt6vectorIP6PGV100SaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fab5 	bl	80078bc <_ZNKSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8007352:	4603      	mov	r3, r0
 8007354:	60bb      	str	r3, [r7, #8]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fac0 	bl	80078dc <_ZNKSt6vectorIP6PGV100SaIS1_EE3endEv>
 800735c:	4603      	mov	r3, r0
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	f107 020c 	add.w	r2, r7, #12
 8007364:	f107 0308 	add.w	r3, r7, #8
 8007368:	4611      	mov	r1, r2
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fac7 	bl	80078fe <_ZN9__gnu_cxxeqIPKP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8007370:	4603      	mov	r3, r0
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800737a:	b5b0      	push	{r4, r5, r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	429a      	cmp	r2, r3
 800738e:	d011      	beq.n	80073b4 <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8007390:	687c      	ldr	r4, [r7, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685d      	ldr	r5, [r3, #4]
 8007396:	6838      	ldr	r0, [r7, #0]
 8007398:	f000 fac9 	bl	800792e <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 800739c:	4603      	mov	r3, r0
 800739e:	461a      	mov	r2, r3
 80073a0:	4629      	mov	r1, r5
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 face 	bl	8007944 <_ZNSt16allocator_traitsISaIP6PGV100EE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	1d1a      	adds	r2, r3, #4
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	605a      	str	r2, [r3, #4]
      }
 80073b2:	e00c      	b.n	80073ce <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff ff29 	bl	800720c <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 80073ba:	4604      	mov	r4, r0
 80073bc:	6838      	ldr	r0, [r7, #0]
 80073be:	f000 fab6 	bl	800792e <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 80073c2:	4603      	mov	r3, r0
 80073c4:	461a      	mov	r2, r3
 80073c6:	4621      	mov	r1, r4
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fae5 	bl	8007998 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bdb0      	pop	{r4, r5, r7, pc}

080073d6 <_ZNKSt6vectorIP6PGV100SaIS1_EE2atEj>:
      at(size_type __n) const
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b082      	sub	sp, #8
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fb94 	bl	8007b10 <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj>
	return (*this)[__n];
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fbb0 	bl	8007b50 <_ZNKSt6vectorIP6PGV100SaIS1_EEixEj>
 80073f0:	4603      	mov	r3, r0
      }
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <_ZNSt6vectorIP6PGV100SaIS1_EE2atEj>:
      at(size_type __n)
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fb82 	bl	8007b10 <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj>
	return (*this)[__n];
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fbae 	bl	8007b70 <_ZNSt6vectorIP6PGV100SaIS1_EEixEj>
 8007414:	4603      	mov	r3, r0
      }
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <_ZNSaIP12CommonSensorEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fbb2 	bl	8007b90 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorEC1Ev>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	605a      	str	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	609a      	str	r2, [r3, #8]
	{ }
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4618      	mov	r0, r3
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
	if (__p)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d005      	beq.n	8007492 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fb8a 	bl	8007ba6 <_ZNSt16allocator_traitsISaIP12CommonSensorEE10deallocateERS2_PS1_j>
      }
 8007492:	bf00      	nop
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4618      	mov	r0, r3
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80074bc:	68b9      	ldr	r1, [r7, #8]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fb80 	bl	8007bc4 <_ZSt8_DestroyIPP12CommonSensorEvT_S3_>
    }
 80074c4:	bf00      	nop
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <_ZNSaIP6PGV100EC1Ev>:
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fb82 	bl	8007bde <_ZN9__gnu_cxx13new_allocatorIP6PGV100EC1Ev>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	605a      	str	r2, [r3, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	609a      	str	r2, [r3, #8]
	{ }
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <_ZN9__gnu_cxx13new_allocatorIP6PGV100ED1Ev>:
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	607a      	str	r2, [r7, #4]
	if (__p)
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	68b9      	ldr	r1, [r7, #8]
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fb5a 	bl	8007bf4 <_ZNSt16allocator_traitsISaIP6PGV100EE10deallocateERS2_PS1_j>
      }
 8007540:	bf00      	nop
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4618      	mov	r0, r3
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800755e:	b580      	push	{r7, lr}
 8007560:	b084      	sub	sp, #16
 8007562:	af00      	add	r7, sp, #0
 8007564:	60f8      	str	r0, [r7, #12]
 8007566:	60b9      	str	r1, [r7, #8]
 8007568:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800756a:	68b9      	ldr	r1, [r7, #8]
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 fb50 	bl	8007c12 <_ZSt8_DestroyIPP6PGV100EvT_S3_>
    }
 8007572:	bf00      	nop
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4618      	mov	r0, r3
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80075b0:	b590      	push	{r4, r7, lr}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	109b      	asrs	r3, r3, #2
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00e      	beq.n	80075ea <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7ff ff61 	bl	800749a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80075d8:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80075da:	461a      	mov	r2, r3
 80075dc:	4621      	mov	r1, r4
 80075de:	6838      	ldr	r0, [r7, #0]
 80075e0:	f7ff ff66 	bl	80074b0 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	605a      	str	r2, [r3, #4]
      }
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd90      	pop	{r4, r7, pc}

080075f2 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4618      	mov	r0, r3
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8007628:	b590      	push	{r4, r7, lr}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	109b      	asrs	r3, r3, #2
 800763c:	60fb      	str	r3, [r7, #12]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00e      	beq.n	8007662 <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4618      	mov	r0, r3
 800764c:	f7ff ff7c 	bl	8007548 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8007650:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8007652:	461a      	mov	r2, r3
 8007654:	4621      	mov	r1, r4
 8007656:	6838      	ldr	r0, [r7, #0]
 8007658:	f7ff ff81 	bl	800755e <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	605a      	str	r2, [r3, #4]
      }
 8007662:	bf00      	nop
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	bd90      	pop	{r4, r7, pc}

0800766a <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	f107 030c 	add.w	r3, r7, #12
 8007678:	4611      	mov	r1, r2
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fad6 	bl	8007c2c <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <_ZNKSt6vectorIP12CommonSensorSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	1d1a      	adds	r2, r3, #4
 8007696:	f107 030c 	add.w	r3, r7, #12
 800769a:	4611      	mov	r1, r2
 800769c:	4618      	mov	r0, r3
 800769e:	f000 fac5 	bl	8007c2c <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <_ZN9__gnu_cxxeqIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80076ac:	b590      	push	{r4, r7, lr}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fac8 	bl	8007c4c <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80076bc:	4603      	mov	r3, r0
 80076be:	681c      	ldr	r4, [r3, #0]
 80076c0:	6838      	ldr	r0, [r7, #0]
 80076c2:	f000 fac3 	bl	8007c4c <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80076c6:	4603      	mov	r3, r0
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	429c      	cmp	r4, r3
 80076cc:	bf0c      	ite	eq
 80076ce:	2301      	moveq	r3, #1
 80076d0:	2300      	movne	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	4618      	mov	r0, r3
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd90      	pop	{r4, r7, pc}

080076dc <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4618      	mov	r0, r3
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff ffec 	bl	80076dc <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8007704:	4603      	mov	r3, r0
 8007706:	461a      	mov	r2, r3
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 faa9 	bl	8007c62 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8007710:	bf00      	nop
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800771e:	4618      	mov	r0, r3
 8007720:	f000 f805 	bl	800772e <_ZNSt6vectorIP12CommonSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8007724:	4603      	mov	r3, r0
      }
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <_ZNSt6vectorIP12CommonSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8007736:	2301      	movs	r3, #1
      }
 8007738:	4618      	mov	r0, r3
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8007744:	b5b0      	push	{r4, r5, r7, lr}
 8007746:	b08c      	sub	sp, #48	; 0x30
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8007750:	4a59      	ldr	r2, [pc, #356]	; (80078b8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8007752:	2101      	movs	r1, #1
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 fa9a 	bl	8007c8e <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc>
 800775a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff fcdc 	bl	8007126 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 800776e:	4603      	mov	r3, r0
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	f107 0214 	add.w	r2, r7, #20
 8007776:	f107 0308 	add.w	r3, r7, #8
 800777a:	4611      	mov	r1, r2
 800777c:	4618      	mov	r0, r3
 800777e:	f000 facd 	bl	8007d1c <_ZN9__gnu_cxxmiIPP12CommonSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8007782:	4603      	mov	r3, r0
 8007784:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fadb 	bl	8007d46 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj>
 8007790:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8007796:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	18d5      	adds	r5, r2, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7ff ff9b 	bl	80076dc <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 80077a6:	4603      	mov	r3, r0
 80077a8:	461a      	mov	r2, r3
 80077aa:	4629      	mov	r1, r5
 80077ac:	4620      	mov	r0, r4
 80077ae:	f7ff ffa0 	bl	80076f2 <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80077b2:	2300      	movs	r3, #0
 80077b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80077b6:	f7ff ffaf 	bl	8007718 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d027      	beq.n	8007810 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80077c0:	f107 0308 	add.w	r3, r7, #8
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7ff fee8 	bl	800759a <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80077ca:	4603      	mov	r3, r0
 80077cc:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff fe62 	bl	800749a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80077d6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	4621      	mov	r1, r4
 80077dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077de:	f000 fac6 	bl	8007d6e <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80077e2:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80077e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e6:	3304      	adds	r3, #4
 80077e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80077ea:	f107 0308 	add.w	r3, r7, #8
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff fed3 	bl	800759a <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80077f4:	4603      	mov	r3, r0
 80077f6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff fe4d 	bl	800749a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8007800:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8007802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007804:	6a39      	ldr	r1, [r7, #32]
 8007806:	4620      	mov	r0, r4
 8007808:	f000 fab1 	bl	8007d6e <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800780c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800780e:	e026      	b.n	800785e <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8007810:	f107 0308 	add.w	r3, r7, #8
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff fec0 	bl	800759a <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 800781a:	4603      	mov	r3, r0
 800781c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff fe3a 	bl	800749a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8007826:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	4621      	mov	r1, r4
 800782c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800782e:	f000 fab2 	bl	8007d96 <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007832:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8007834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007836:	3304      	adds	r3, #4
 8007838:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800783a:	f107 0308 	add.w	r3, r7, #8
 800783e:	4618      	mov	r0, r3
 8007840:	f7ff feab 	bl	800759a <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8007844:	4603      	mov	r3, r0
 8007846:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff fe25 	bl	800749a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8007850:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8007852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007854:	6a39      	ldr	r1, [r7, #32]
 8007856:	4620      	mov	r0, r4
 8007858:	f000 fa9d 	bl	8007d96 <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 800785c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800785e:	f7ff ff5b 	bl	8007718 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>
 8007862:	4603      	mov	r3, r0
 8007864:	f083 0301 	eor.w	r3, r3, #1
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff fe12 	bl	800749a <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8007876:	4603      	mov	r3, r0
 8007878:	461a      	mov	r2, r3
 800787a:	6a39      	ldr	r1, [r7, #32]
 800787c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800787e:	f7ff fe17 	bl	80074b0 <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8007882:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800788e:	461a      	mov	r2, r3
 8007890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007892:	f7ff fdef 	bl	8007474 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078a0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80078a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	441a      	add	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	609a      	str	r2, [r3, #8]
    }
 80078ae:	bf00      	nop
 80078b0:	3730      	adds	r7, #48	; 0x30
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bdb0      	pop	{r4, r5, r7, pc}
 80078b6:	bf00      	nop
 80078b8:	08023b1c 	.word	0x08023b1c

080078bc <_ZNKSt6vectorIP6PGV100SaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	f107 030c 	add.w	r3, r7, #12
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 fa7b 	bl	8007dc8 <_ZN9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS4_>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <_ZNKSt6vectorIP6PGV100SaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	1d1a      	adds	r2, r3, #4
 80078e8:	f107 030c 	add.w	r3, r7, #12
 80078ec:	4611      	mov	r1, r2
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 fa6a 	bl	8007dc8 <_ZN9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS4_>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <_ZN9__gnu_cxxeqIPKP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80078fe:	b590      	push	{r4, r7, lr}
 8007900:	b083      	sub	sp, #12
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fa6d 	bl	8007de8 <_ZNK9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 800790e:	4603      	mov	r3, r0
 8007910:	681c      	ldr	r4, [r3, #0]
 8007912:	6838      	ldr	r0, [r7, #0]
 8007914:	f000 fa68 	bl	8007de8 <_ZNK9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8007918:	4603      	mov	r3, r0
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	429c      	cmp	r4, r3
 800791e:	bf0c      	ite	eq
 8007920:	2301      	moveq	r3, #1
 8007922:	2300      	movne	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	4618      	mov	r0, r3
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	bd90      	pop	{r4, r7, pc}

0800792e <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4618      	mov	r0, r3
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <_ZNSt16allocator_traitsISaIP6PGV100EE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff ffec 	bl	800792e <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 8007956:	4603      	mov	r3, r0
 8007958:	461a      	mov	r2, r3
 800795a:	68b9      	ldr	r1, [r7, #8]
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 fa4e 	bl	8007dfe <_ZN9__gnu_cxx13new_allocatorIP6PGV100E9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8007962:	bf00      	nop
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <_ZNSt6vectorIP6PGV100SaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8007970:	4618      	mov	r0, r3
 8007972:	f000 f805 	bl	8007980 <_ZNSt6vectorIP6PGV100SaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8007976:	4603      	mov	r3, r0
      }
 8007978:	4618      	mov	r0, r3
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <_ZNSt6vectorIP6PGV100SaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8007988:	2301      	movs	r3, #1
      }
 800798a:	4618      	mov	r0, r3
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
	...

08007998 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8007998:	b5b0      	push	{r4, r5, r7, lr}
 800799a:	b08c      	sub	sp, #48	; 0x30
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80079a4:	4a59      	ldr	r2, [pc, #356]	; (8007b0c <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 80079a6:	2101      	movs	r1, #1
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 fa3e 	bl	8007e2a <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc>
 80079ae:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f7ff fc15 	bl	80071ec <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 80079c2:	4603      	mov	r3, r0
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	f107 0214 	add.w	r2, r7, #20
 80079ca:	f107 0308 	add.w	r3, r7, #8
 80079ce:	4611      	mov	r1, r2
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fa71 	bl	8007eb8 <_ZN9__gnu_cxxmiIPP6PGV100St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80079d6:	4603      	mov	r3, r0
 80079d8:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 fa7f 	bl	8007ee2 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj>
 80079e4:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 80079ea:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	18d5      	adds	r5, r2, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff ff9a 	bl	800792e <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 80079fa:	4603      	mov	r3, r0
 80079fc:	461a      	mov	r2, r3
 80079fe:	4629      	mov	r1, r5
 8007a00:	4620      	mov	r0, r4
 8007a02:	f7ff ff9f 	bl	8007944 <_ZNSt16allocator_traitsISaIP6PGV100EE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8007a06:	2300      	movs	r3, #0
 8007a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8007a0a:	f7ff ffae 	bl	800796a <_ZNSt6vectorIP6PGV100SaIS1_EE15_S_use_relocateEv>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d027      	beq.n	8007a64 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007a14:	f107 0308 	add.w	r3, r7, #8
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7ff fdfa 	bl	8007612 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff fd8f 	bl	8007548 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8007a2a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	4621      	mov	r1, r4
 8007a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a32:	f000 fa6a 	bl	8007f0a <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8007a36:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8007a3e:	f107 0308 	add.w	r3, r7, #8
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff fde5 	bl	8007612 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff fd7a 	bl	8007548 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8007a54:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8007a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a58:	6a39      	ldr	r1, [r7, #32]
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 fa55 	bl	8007f0a <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8007a60:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007a62:	e026      	b.n	8007ab2 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8007a64:	f107 0308 	add.w	r3, r7, #8
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff fdd2 	bl	8007612 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff fd67 	bl	8007548 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8007a7a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	4621      	mov	r1, r4
 8007a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a82:	f000 fa56 	bl	8007f32 <_ZSt34__uninitialized_move_if_noexcept_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>
 8007a86:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8007a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8007a8e:	f107 0308 	add.w	r3, r7, #8
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fdbd 	bl	8007612 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff fd52 	bl	8007548 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8007aa4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8007aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aa8:	6a39      	ldr	r1, [r7, #32]
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f000 fa41 	bl	8007f32 <_ZSt34__uninitialized_move_if_noexcept_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>
 8007ab0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8007ab2:	f7ff ff5a 	bl	800796a <_ZNSt6vectorIP6PGV100SaIS1_EE15_S_use_relocateEv>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	f083 0301 	eor.w	r3, r3, #1
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d009      	beq.n	8007ad6 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7ff fd3f 	bl	8007548 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8007aca:	4603      	mov	r3, r0
 8007acc:	461a      	mov	r2, r3
 8007ace:	6a39      	ldr	r1, [r7, #32]
 8007ad0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ad2:	f7ff fd44 	bl	800755e <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8007ad6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ae6:	f7ff fd1c 	bl	8007522 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	441a      	add	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	609a      	str	r2, [r3, #8]
    }
 8007b02:	bf00      	nop
 8007b04:	3730      	adds	r7, #48	; 0x30
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bdb0      	pop	{r4, r5, r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	08023b1c 	.word	0x08023b1c

08007b10 <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fa22 	bl	8007f64 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8007b20:	4602      	mov	r2, r0
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	4293      	cmp	r3, r2
 8007b26:	bf2c      	ite	cs
 8007b28:	2301      	movcs	r3, #1
 8007b2a:	2300      	movcc	r3, #0
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d008      	beq.n	8007b44 <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fa16 	bl	8007f64 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	4803      	ldr	r0, [pc, #12]	; (8007b4c <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj+0x3c>)
 8007b40:	f019 fbee 	bl	8021320 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8007b44:	bf00      	nop
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	08023b38 	.word	0x08023b38

08007b50 <_ZNKSt6vectorIP6PGV100SaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
      }
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <_ZNSt6vectorIP6PGV100SaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
      }
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <_ZNSt16allocator_traitsISaIP12CommonSensorEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	60f8      	str	r0, [r7, #12]
 8007bae:	60b9      	str	r1, [r7, #8]
 8007bb0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	68b9      	ldr	r1, [r7, #8]
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 f9e4 	bl	8007f84 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE10deallocateEPS2_j>
 8007bbc:	bf00      	nop
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <_ZSt8_DestroyIPP12CommonSensorEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f9e7 	bl	8007fa4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12CommonSensorEEvT_S5_>
    }
 8007bd6:	bf00      	nop
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <_ZN9__gnu_cxx13new_allocatorIP6PGV100EC1Ev>:
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4618      	mov	r0, r3
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <_ZNSt16allocator_traitsISaIP6PGV100EE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	68b9      	ldr	r1, [r7, #8]
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f9d8 	bl	8007fba <_ZN9__gnu_cxx13new_allocatorIP6PGV100E10deallocateEPS2_j>
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <_ZSt8_DestroyIPP6PGV100EvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f9db 	bl	8007fda <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6PGV100EEvT_S5_>
    }
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4618      	mov	r0, r3
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4618      	mov	r0, r3
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8007c62:	b590      	push	{r4, r7, lr}
 8007c64:	b085      	sub	sp, #20
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff fd34 	bl	80076dc <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8007c74:	4603      	mov	r3, r0
 8007c76:	681c      	ldr	r4, [r3, #0]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	2004      	movs	r0, #4
 8007c7e:	f7fa f952 	bl	8001f26 <_ZnwjPv>
 8007c82:	4603      	mov	r3, r0
 8007c84:	601c      	str	r4, [r3, #0]
 8007c86:	bf00      	nop
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd90      	pop	{r4, r7, pc}

08007c8e <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8007c8e:	b590      	push	{r4, r7, lr}
 8007c90:	b087      	sub	sp, #28
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	60f8      	str	r0, [r7, #12]
 8007c96:	60b9      	str	r1, [r7, #8]
 8007c98:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 f9a8 	bl	8007ff0 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f9b5 	bl	8008012 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	1ae2      	subs	r2, r4, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	bf34      	ite	cc
 8007cb2:	2301      	movcc	r3, #1
 8007cb4:	2300      	movcs	r3, #0
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f019 fb2c 	bl	802131a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 f9a5 	bl	8008012 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 8007cc8:	4604      	mov	r4, r0
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 f9a1 	bl	8008012 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	613b      	str	r3, [r7, #16]
 8007cd4:	f107 0208 	add.w	r2, r7, #8
 8007cd8:	f107 0310 	add.w	r3, r7, #16
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fb f974 	bl	8002fcc <_ZSt3maxIjERKT_S2_S2_>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4423      	add	r3, r4
 8007cea:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 f990 	bl	8008012 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d306      	bcc.n	8007d08 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f978 	bl	8007ff0 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 8007d00:	4602      	mov	r2, r0
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d904      	bls.n	8007d12 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x84>
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 f971 	bl	8007ff0 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	e000      	b.n	8007d14 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x86>
 8007d12:	697b      	ldr	r3, [r7, #20]
      }
 8007d14:	4618      	mov	r0, r3
 8007d16:	371c      	adds	r7, #28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd90      	pop	{r4, r7, pc}

08007d1c <_ZN9__gnu_cxxmiIPP12CommonSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007d1c:	b590      	push	{r4, r7, lr}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff fc37 	bl	800759a <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	681c      	ldr	r4, [r3, #0]
 8007d30:	6838      	ldr	r0, [r7, #0]
 8007d32:	f7ff fc32 	bl	800759a <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8007d36:	4603      	mov	r3, r0
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	1ae3      	subs	r3, r4, r3
 8007d3c:	109b      	asrs	r3, r3, #2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd90      	pop	{r4, r7, pc}

08007d46 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d006      	beq.n	8007d64 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj+0x1e>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 f969 	bl	8008032 <_ZNSt16allocator_traitsISaIP12CommonSensorEE8allocateERS2_j>
 8007d60:	4603      	mov	r3, r0
 8007d62:	e000      	b.n	8007d66 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj+0x20>
 8007d64:	2300      	movs	r3, #0
      }
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8007d6e:	b590      	push	{r4, r7, lr}
 8007d70:	b087      	sub	sp, #28
 8007d72:	af02      	add	r7, sp, #8
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	607a      	str	r2, [r7, #4]
 8007d7a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8007d7c:	f88d 4000 	strb.w	r4, [sp]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	68b9      	ldr	r1, [r7, #8]
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f962 	bl	8008050 <_ZNSt6vectorIP12CommonSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8007d8c:	4603      	mov	r3, r0
      }
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd90      	pop	{r4, r7, pc}

08007d96 <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8007d96:	b590      	push	{r4, r7, lr}
 8007d98:	b085      	sub	sp, #20
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	60f8      	str	r0, [r7, #12]
 8007d9e:	60b9      	str	r1, [r7, #8]
 8007da0:	607a      	str	r2, [r7, #4]
 8007da2:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 f965 	bl	8008074 <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>
 8007daa:	4604      	mov	r4, r0
 8007dac:	68b8      	ldr	r0, [r7, #8]
 8007dae:	f000 f961 	bl	8008074 <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>
 8007db2:	4601      	mov	r1, r0
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 f96a 	bl	8008092 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12CommonSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8007dbe:	4603      	mov	r3, r0
    }
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd90      	pop	{r4, r7, pc}

08007dc8 <_ZN9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <_ZNK9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4618      	mov	r0, r3
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <_ZN9__gnu_cxx13new_allocatorIP6PGV100E9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8007dfe:	b590      	push	{r4, r7, lr}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7ff fd8f 	bl	800792e <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 8007e10:	4603      	mov	r3, r0
 8007e12:	681c      	ldr	r4, [r3, #0]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4619      	mov	r1, r3
 8007e18:	2004      	movs	r0, #4
 8007e1a:	f7fa f884 	bl	8001f26 <_ZnwjPv>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	601c      	str	r4, [r3, #0]
 8007e22:	bf00      	nop
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd90      	pop	{r4, r7, pc}

08007e2a <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8007e2a:	b590      	push	{r4, r7, lr}
 8007e2c:	b087      	sub	sp, #28
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f93c 	bl	80080b4 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 f890 	bl	8007f64 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8007e44:	4603      	mov	r3, r0
 8007e46:	1ae2      	subs	r2, r4, r3
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	bf34      	ite	cc
 8007e4e:	2301      	movcc	r3, #1
 8007e50:	2300      	movcs	r3, #0
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f019 fa5e 	bl	802131a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 f880 	bl	8007f64 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8007e64:	4604      	mov	r4, r0
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 f87c 	bl	8007f64 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	613b      	str	r3, [r7, #16]
 8007e70:	f107 0208 	add.w	r2, r7, #8
 8007e74:	f107 0310 	add.w	r3, r7, #16
 8007e78:	4611      	mov	r1, r2
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fb f8a6 	bl	8002fcc <_ZSt3maxIjERKT_S2_S2_>
 8007e80:	4603      	mov	r3, r0
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4423      	add	r3, r4
 8007e86:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 f86b 	bl	8007f64 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d306      	bcc.n	8007ea4 <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x7a>
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 f90c 	bl	80080b4 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d904      	bls.n	8007eae <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x84>
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 f905 	bl	80080b4 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	e000      	b.n	8007eb0 <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x86>
 8007eae:	697b      	ldr	r3, [r7, #20]
      }
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd90      	pop	{r4, r7, pc}

08007eb8 <_ZN9__gnu_cxxmiIPP6PGV100St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007eb8:	b590      	push	{r4, r7, lr}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff fba5 	bl	8007612 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	681c      	ldr	r4, [r3, #0]
 8007ecc:	6838      	ldr	r0, [r7, #0]
 8007ece:	f7ff fba0 	bl	8007612 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	1ae3      	subs	r3, r4, r3
 8007ed8:	109b      	asrs	r3, r3, #2
 8007eda:	4618      	mov	r0, r3
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd90      	pop	{r4, r7, pc}

08007ee2 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d006      	beq.n	8007f00 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj+0x1e>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 f8ed 	bl	80080d6 <_ZNSt16allocator_traitsISaIP6PGV100EE8allocateERS2_j>
 8007efc:	4603      	mov	r3, r0
 8007efe:	e000      	b.n	8007f02 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj+0x20>
 8007f00:	2300      	movs	r3, #0
      }
 8007f02:	4618      	mov	r0, r3
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8007f0a:	b590      	push	{r4, r7, lr}
 8007f0c:	b087      	sub	sp, #28
 8007f0e:	af02      	add	r7, sp, #8
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	607a      	str	r2, [r7, #4]
 8007f16:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8007f18:	f88d 4000 	strb.w	r4, [sp]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	68b9      	ldr	r1, [r7, #8]
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 f8e6 	bl	80080f4 <_ZNSt6vectorIP6PGV100SaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8007f28:	4603      	mov	r3, r0
      }
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd90      	pop	{r4, r7, pc}

08007f32 <_ZSt34__uninitialized_move_if_noexcept_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8007f32:	b590      	push	{r4, r7, lr}
 8007f34:	b085      	sub	sp, #20
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
 8007f3e:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f8e9 	bl	8008118 <_ZSt32__make_move_if_noexcept_iteratorIP6PGV100St13move_iteratorIPS1_EET0_PT_>
 8007f46:	4604      	mov	r4, r0
 8007f48:	68b8      	ldr	r0, [r7, #8]
 8007f4a:	f000 f8e5 	bl	8008118 <_ZSt32__make_move_if_noexcept_iteratorIP6PGV100St13move_iteratorIPS1_EET0_PT_>
 8007f4e:	4601      	mov	r1, r0
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	4620      	mov	r0, r4
 8007f56:	f000 f8ee 	bl	8008136 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6PGV100ES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8007f5a:	4603      	mov	r3, r0
    }
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd90      	pop	{r4, r7, pc}

08007f64 <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	109b      	asrs	r3, r3, #2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4619      	mov	r1, r3
 8007f96:	68b8      	ldr	r0, [r7, #8]
 8007f98:	f019 f994 	bl	80212c4 <_ZdlPvj>
      }
 8007f9c:	bf00      	nop
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12CommonSensorEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <_ZN9__gnu_cxx13new_allocatorIP6PGV100E10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4619      	mov	r1, r3
 8007fcc:	68b8      	ldr	r0, [r7, #8]
 8007fce:	f019 f979 	bl	80212c4 <_ZdlPvj>
      }
 8007fd2:	bf00      	nop
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6PGV100EEvT_S5_>:
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 f8c6 	bl	800818c <_ZNKSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8008000:	4603      	mov	r3, r0
 8008002:	4618      	mov	r0, r3
 8008004:	f000 f8a8 	bl	8008158 <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_max_sizeERKS2_>
 8008008:	4603      	mov	r3, r0
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	109b      	asrs	r3, r3, #2
 8008026:	4618      	mov	r0, r3
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <_ZNSt16allocator_traitsISaIP12CommonSensorEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800803c:	2200      	movs	r2, #0
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f8ae 	bl	80081a2 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv>
 8008046:	4603      	mov	r3, r0
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <_ZNSt6vectorIP12CommonSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	68b9      	ldr	r1, [r7, #8]
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 f8ba 	bl	80081de <_ZSt12__relocate_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 800806a:	4603      	mov	r3, r0
      }
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800807c:	f107 030c 	add.w	r3, r7, #12
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4618      	mov	r0, r3
 8008084:	f000 f8c8 	bl	8008218 <_ZNSt13move_iteratorIPP12CommonSensorEC1ES2_>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12CommonSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	607a      	str	r2, [r7, #4]
 800809e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	68b9      	ldr	r1, [r7, #8]
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 f8c9 	bl	800823c <_ZSt18uninitialized_copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>
 80080aa:	4603      	mov	r3, r0
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 f8e8 	bl	8008294 <_ZNKSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 80080c4:	4603      	mov	r3, r0
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 f8ca 	bl	8008260 <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_max_sizeERKS2_>
 80080cc:	4603      	mov	r3, r0
 80080ce:	4618      	mov	r0, r3
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <_ZNSt16allocator_traitsISaIP6PGV100EE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b082      	sub	sp, #8
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80080e0:	2200      	movs	r2, #0
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f8e0 	bl	80082aa <_ZN9__gnu_cxx13new_allocatorIP6PGV100E8allocateEjPKv>
 80080ea:	4603      	mov	r3, r0
 80080ec:	4618      	mov	r0, r3
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <_ZNSt6vectorIP6PGV100SaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
 8008100:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	68b9      	ldr	r1, [r7, #8]
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 f8ec 	bl	80082e6 <_ZSt12__relocate_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>
 800810e:	4603      	mov	r3, r0
      }
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <_ZSt32__make_move_if_noexcept_iteratorIP6PGV100St13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8008120:	f107 030c 	add.w	r3, r7, #12
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	4618      	mov	r0, r3
 8008128:	f000 f8fa 	bl	8008320 <_ZNSt13move_iteratorIPP6PGV100EC1ES2_>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6PGV100ES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	607a      	str	r2, [r7, #4]
 8008142:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	68b9      	ldr	r1, [r7, #8]
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 f8fb 	bl	8008344 <_ZSt18uninitialized_copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>
 800814e:	4603      	mov	r3, r0
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8008160:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8008164:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f8fe 	bl	8008368 <_ZNSt16allocator_traitsISaIP12CommonSensorEE8max_sizeERKS2_>
 800816c:	4603      	mov	r3, r0
 800816e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8008170:	f107 0208 	add.w	r2, r7, #8
 8008174:	f107 030c 	add.w	r3, r7, #12
 8008178:	4611      	mov	r1, r2
 800817a:	4618      	mov	r0, r3
 800817c:	f7fb f89c 	bl	80032b8 <_ZSt3minIjERKT_S2_S2_>
 8008180:	4603      	mov	r3, r0
 8008182:	681b      	ldr	r3, [r3, #0]
      }
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <_ZNKSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4618      	mov	r0, r3
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f8e6 	bl	8008380 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>
 80081b4:	4602      	mov	r2, r0
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	4293      	cmp	r3, r2
 80081ba:	bf8c      	ite	hi
 80081bc:	2301      	movhi	r3, #1
 80081be:	2300      	movls	r3, #0
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80081c6:	f019 f8a2 	bl	802130e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4618      	mov	r0, r3
 80081d0:	f019 f889 	bl	80212e6 <_Znwj>
 80081d4:	4603      	mov	r3, r0
      }
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <_ZSt12__relocate_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80081de:	b5b0      	push	{r4, r5, r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 f8d3 	bl	8008398 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 80081f2:	4604      	mov	r4, r0
 80081f4:	68b8      	ldr	r0, [r7, #8]
 80081f6:	f000 f8cf 	bl	8008398 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 80081fa:	4605      	mov	r5, r0
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f8cb 	bl	8008398 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 8008202:	4602      	mov	r2, r0
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	4629      	mov	r1, r5
 8008208:	4620      	mov	r0, r4
 800820a:	f000 f8d0 	bl	80083ae <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800820e:	4603      	mov	r3, r0
    }
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bdb0      	pop	{r4, r5, r7, pc}

08008218 <_ZNSt13move_iteratorIPP12CommonSensorEC1ES2_>:
      move_iterator(iterator_type __i)
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8008222:	463b      	mov	r3, r7
 8008224:	4618      	mov	r0, r3
 8008226:	f000 f8e0 	bl	80083ea <_ZSt4moveIRPP12CommonSensorEONSt16remove_referenceIT_E4typeEOS5_>
 800822a:	4603      	mov	r3, r0
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4618      	mov	r0, r3
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <_ZSt18uninitialized_copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008248:	2301      	movs	r3, #1
 800824a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	68b9      	ldr	r1, [r7, #8]
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 f8d5 	bl	8008400 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12CommonSensorES5_EET0_T_S8_S7_>
 8008256:	4603      	mov	r3, r0
    }
 8008258:	4618      	mov	r0, r3
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8008268:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800826c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f8d6 	bl	8008420 <_ZNSt16allocator_traitsISaIP6PGV100EE8max_sizeERKS2_>
 8008274:	4603      	mov	r3, r0
 8008276:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8008278:	f107 0208 	add.w	r2, r7, #8
 800827c:	f107 030c 	add.w	r3, r7, #12
 8008280:	4611      	mov	r1, r2
 8008282:	4618      	mov	r0, r3
 8008284:	f7fb f818 	bl	80032b8 <_ZSt3minIjERKT_S2_S2_>
 8008288:	4603      	mov	r3, r0
 800828a:	681b      	ldr	r3, [r3, #0]
      }
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <_ZNKSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4618      	mov	r0, r3
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <_ZN9__gnu_cxx13new_allocatorIP6PGV100E8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f000 f8be 	bl	8008438 <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E11_M_max_sizeEv>
 80082bc:	4602      	mov	r2, r0
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	4293      	cmp	r3, r2
 80082c2:	bf8c      	ite	hi
 80082c4:	2301      	movhi	r3, #1
 80082c6:	2300      	movls	r3, #0
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <_ZN9__gnu_cxx13new_allocatorIP6PGV100E8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80082ce:	f019 f81e 	bl	802130e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f019 f805 	bl	80212e6 <_Znwj>
 80082dc:	4603      	mov	r3, r0
      }
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <_ZSt12__relocate_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80082e6:	b5b0      	push	{r4, r5, r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	607a      	str	r2, [r7, #4]
 80082f2:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 f8ab 	bl	8008450 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 80082fa:	4604      	mov	r4, r0
 80082fc:	68b8      	ldr	r0, [r7, #8]
 80082fe:	f000 f8a7 	bl	8008450 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 8008302:	4605      	mov	r5, r0
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f8a3 	bl	8008450 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 800830a:	4602      	mov	r2, r0
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	4629      	mov	r1, r5
 8008310:	4620      	mov	r0, r4
 8008312:	f000 f8a8 	bl	8008466 <_ZSt14__relocate_a_1IP6PGV100S1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8008316:	4603      	mov	r3, r0
    }
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bdb0      	pop	{r4, r5, r7, pc}

08008320 <_ZNSt13move_iteratorIPP6PGV100EC1ES2_>:
      move_iterator(iterator_type __i)
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800832a:	463b      	mov	r3, r7
 800832c:	4618      	mov	r0, r3
 800832e:	f000 f8b8 	bl	80084a2 <_ZSt4moveIRPP6PGV100EONSt16remove_referenceIT_E4typeEOS5_>
 8008332:	4603      	mov	r3, r0
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	601a      	str	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <_ZSt18uninitialized_copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008350:	2301      	movs	r3, #1
 8008352:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	68b9      	ldr	r1, [r7, #8]
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 f8ad 	bl	80084b8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6PGV100ES5_EET0_T_S8_S7_>
 800835e:	4603      	mov	r3, r0
    }
 8008360:	4618      	mov	r0, r3
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <_ZNSt16allocator_traitsISaIP12CommonSensorEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f8b1 	bl	80084d8 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE8max_sizeEv>
 8008376:	4603      	mov	r3, r0
      }
 8008378:	4618      	mov	r0, r3
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8008388:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800838c:	4618      	mov	r0, r3
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>:
    __niter_base(_Iterator __it)
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
    { return __it; }
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4618      	mov	r0, r3
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b086      	sub	sp, #24
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	60b9      	str	r1, [r7, #8]
 80083b8:	607a      	str	r2, [r7, #4]
 80083ba:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	109b      	asrs	r3, r3, #2
 80083c4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	dd06      	ble.n	80083da <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	461a      	mov	r2, r3
 80083d2:	68f9      	ldr	r1, [r7, #12]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f01a f8e9 	bl	80225ac <memmove>
      return __result + __count;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	4413      	add	r3, r2
    }
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <_ZSt4moveIRPP12CommonSensorEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80083ea:	b480      	push	{r7}
 80083ec:	b083      	sub	sp, #12
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4618      	mov	r0, r3
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12CommonSensorES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	68b9      	ldr	r1, [r7, #8]
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 f86d 	bl	80084f0 <_ZSt4copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>
 8008416:	4603      	mov	r3, r0
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <_ZNSt16allocator_traitsISaIP6PGV100EE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f879 	bl	8008520 <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E8max_sizeEv>
 800842e:	4603      	mov	r3, r0
      }
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8008440:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8008444:	4618      	mov	r0, r3
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <_ZSt12__niter_baseIPP6PGV100ET_S3_>:
    __niter_base(_Iterator __it)
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4618      	mov	r0, r3
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <_ZSt14__relocate_a_1IP6PGV100S1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8008466:	b580      	push	{r7, lr}
 8008468:	b086      	sub	sp, #24
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	607a      	str	r2, [r7, #4]
 8008472:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	109b      	asrs	r3, r3, #2
 800847c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	dd06      	ble.n	8008492 <_ZSt14__relocate_a_1IP6PGV100S1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	461a      	mov	r2, r3
 800848a:	68f9      	ldr	r1, [r7, #12]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f01a f88d 	bl	80225ac <memmove>
      return __result + __count;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	4413      	add	r3, r2
    }
 800849a:	4618      	mov	r0, r3
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <_ZSt4moveIRPP6PGV100EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6PGV100ES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 f835 	bl	8008538 <_ZSt4copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>
 80084ce:	4603      	mov	r3, r0
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff ff4d 	bl	8008380 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>
 80084e6:	4603      	mov	r3, r0
 80084e8:	4618      	mov	r0, r3
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <_ZSt4copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 80084f0:	b590      	push	{r4, r7, lr}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 f833 	bl	8008568 <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8008502:	4604      	mov	r4, r0
 8008504:	68b8      	ldr	r0, [r7, #8]
 8008506:	f000 f82f 	bl	8008568 <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800850a:	4603      	mov	r3, r0
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	4619      	mov	r1, r3
 8008510:	4620      	mov	r0, r4
 8008512:	f000 f83a 	bl	800858a <_ZSt13__copy_move_aILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 8008516:	4603      	mov	r3, r0
    }
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	bd90      	pop	{r4, r7, pc}

08008520 <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7ff ff85 	bl	8008438 <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E11_M_max_sizeEv>
 800852e:	4603      	mov	r3, r0
 8008530:	4618      	mov	r0, r3
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <_ZSt4copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8008538:	b590      	push	{r4, r7, lr}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 f843 	bl	80085d0 <_ZSt12__miter_baseIPP6PGV100EDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800854a:	4604      	mov	r4, r0
 800854c:	68b8      	ldr	r0, [r7, #8]
 800854e:	f000 f83f 	bl	80085d0 <_ZSt12__miter_baseIPP6PGV100EDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8008552:	4603      	mov	r3, r0
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	4619      	mov	r1, r3
 8008558:	4620      	mov	r0, r4
 800855a:	f000 f84a 	bl	80085f2 <_ZSt13__copy_move_aILb1EPP6PGV100S2_ET1_T0_S4_S3_>
 800855e:	4603      	mov	r3, r0
    }
 8008560:	4618      	mov	r0, r3
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	bd90      	pop	{r4, r7, pc}

08008568 <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8008570:	1d3b      	adds	r3, r7, #4
 8008572:	4618      	mov	r0, r3
 8008574:	f000 f860 	bl	8008638 <_ZNKSt13move_iteratorIPP12CommonSensorE4baseEv>
 8008578:	4603      	mov	r3, r0
 800857a:	4618      	mov	r0, r3
 800857c:	f000 f868 	bl	8008650 <_ZSt12__miter_baseIPP12CommonSensorET_S3_>
 8008580:	4603      	mov	r3, r0
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <_ZSt13__copy_move_aILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800858a:	b5b0      	push	{r4, r5, r7, lr}
 800858c:	b084      	sub	sp, #16
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7ff fefe 	bl	8008398 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 800859c:	4604      	mov	r4, r0
 800859e:	68b8      	ldr	r0, [r7, #8]
 80085a0:	f7ff fefa 	bl	8008398 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 80085a4:	4605      	mov	r5, r0
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff fef5 	bl	8008398 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 80085ae:	4603      	mov	r3, r0
 80085b0:	461a      	mov	r2, r3
 80085b2:	4629      	mov	r1, r5
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 f856 	bl	8008666 <_ZSt14__copy_move_a1ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 80085ba:	4602      	mov	r2, r0
 80085bc:	1d3b      	adds	r3, r7, #4
 80085be:	4611      	mov	r1, r2
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 f860 	bl	8008686 <_ZSt12__niter_wrapIPP12CommonSensorET_RKS3_S3_>
 80085c6:	4603      	mov	r3, r0
    }
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bdb0      	pop	{r4, r5, r7, pc}

080085d0 <_ZSt12__miter_baseIPP6PGV100EDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 80085d8:	1d3b      	adds	r3, r7, #4
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 f85f 	bl	800869e <_ZNKSt13move_iteratorIPP6PGV100E4baseEv>
 80085e0:	4603      	mov	r3, r0
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 f867 	bl	80086b6 <_ZSt12__miter_baseIPP6PGV100ET_S3_>
 80085e8:	4603      	mov	r3, r0
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <_ZSt13__copy_move_aILb1EPP6PGV100S2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80085f2:	b5b0      	push	{r4, r5, r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	60f8      	str	r0, [r7, #12]
 80085fa:	60b9      	str	r1, [r7, #8]
 80085fc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f7ff ff26 	bl	8008450 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 8008604:	4604      	mov	r4, r0
 8008606:	68b8      	ldr	r0, [r7, #8]
 8008608:	f7ff ff22 	bl	8008450 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 800860c:	4605      	mov	r5, r0
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff ff1d 	bl	8008450 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 8008616:	4603      	mov	r3, r0
 8008618:	461a      	mov	r2, r3
 800861a:	4629      	mov	r1, r5
 800861c:	4620      	mov	r0, r4
 800861e:	f000 f855 	bl	80086cc <_ZSt14__copy_move_a1ILb1EPP6PGV100S2_ET1_T0_S4_S3_>
 8008622:	4602      	mov	r2, r0
 8008624:	1d3b      	adds	r3, r7, #4
 8008626:	4611      	mov	r1, r2
 8008628:	4618      	mov	r0, r3
 800862a:	f000 f85f 	bl	80086ec <_ZSt12__niter_wrapIPP6PGV100ET_RKS3_S3_>
 800862e:	4603      	mov	r3, r0
    }
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bdb0      	pop	{r4, r5, r7, pc}

08008638 <_ZNKSt13move_iteratorIPP12CommonSensorE4baseEv>:
      base() const
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <_ZSt12__miter_baseIPP12CommonSensorET_S3_>:
    __miter_base(_Iterator __it)
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4618      	mov	r0, r3
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <_ZSt14__copy_move_a1ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	60b9      	str	r1, [r7, #8]
 8008670:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	68b9      	ldr	r1, [r7, #8]
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 f844 	bl	8008704 <_ZSt14__copy_move_a2ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 800867c:	4603      	mov	r3, r0
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <_ZSt12__niter_wrapIPP12CommonSensorET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	4618      	mov	r0, r3
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <_ZNKSt13move_iteratorIPP6PGV100E4baseEv>:
      base() const
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <_ZSt12__miter_baseIPP6PGV100ET_S3_>:
    __miter_base(_Iterator __it)
 80086b6:	b480      	push	{r7}
 80086b8:	b083      	sub	sp, #12
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4618      	mov	r0, r3
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <_ZSt14__copy_move_a1ILb1EPP6PGV100S2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	68b9      	ldr	r1, [r7, #8]
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 f821 	bl	8008724 <_ZSt14__copy_move_a2ILb1EPP6PGV100S2_ET1_T0_S4_S3_>
 80086e2:	4603      	mov	r3, r0
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <_ZSt12__niter_wrapIPP6PGV100ET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
    { return __res; }
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <_ZSt14__copy_move_a2ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	68b9      	ldr	r1, [r7, #8]
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 f815 	bl	8008744 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_>
 800871a:	4603      	mov	r3, r0
    }
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <_ZSt14__copy_move_a2ILb1EPP6PGV100S2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	68b9      	ldr	r1, [r7, #8]
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f000 f822 	bl	800877e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6PGV100EEPT_PKS5_S8_S6_>
 800873a:	4603      	mov	r3, r0
    }
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	109b      	asrs	r3, r3, #2
 8008758:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d006      	beq.n	800876e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	461a      	mov	r2, r3
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f019 ff1f 	bl	80225ac <memmove>
	  return __result + _Num;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	4413      	add	r3, r2
	}
 8008776:	4618      	mov	r0, r3
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6PGV100EEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800877e:	b580      	push	{r7, lr}
 8008780:	b086      	sub	sp, #24
 8008782:	af00      	add	r7, sp, #0
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	109b      	asrs	r3, r3, #2
 8008792:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d006      	beq.n	80087a8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6PGV100EEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	461a      	mov	r2, r3
 80087a0:	68f9      	ldr	r1, [r7, #12]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f019 ff02 	bl	80225ac <memmove>
	  return __result + _Num;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	4413      	add	r3, r2
	}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <_Z17HAL_UsartTransmitP20__UART_HandleTypeDefPhi>:
//these four-values must be in stm32f7xx_it.h or .c


//----------------------------------------------------------------------------------------UART
int HAL_UsartTransmit(UART_HandleTypeDef* huartx, uint8_t* todata, int datalength)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
	//return HAL_UART_Transmit_IT(huartx, todata, datalength);
	return HAL_UART_Transmit(huartx, todata, datalength, 10);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	230a      	movs	r3, #10
 80087ca:	68b9      	ldr	r1, [r7, #8]
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f005 f95d 	bl	800da8c <HAL_UART_Transmit>
 80087d2:	4603      	mov	r3, r0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <_Z16HAL_UsartReceiveP20__UART_HandleTypeDefPht>:

int HAL_UsartReceive(UART_HandleTypeDef* huartx, uint8_t* fromdata, uint16_t datalength)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	80fb      	strh	r3, [r7, #6]
	//return HAL_UART_Receive_IT(huartx, fromdata, datalength);
	return HAL_UART_Receive(huartx, fromdata, datalength, 10);
 80087ea:	88fa      	ldrh	r2, [r7, #6]
 80087ec:	230a      	movs	r3, #10
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f005 f9ce 	bl	800db92 <HAL_UART_Receive>
 80087f6:	4603      	mov	r3, r0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm>:


//----------------------------------------------------------------------------------------CANOpen
int HAL_CANTransmit(CAN_HandleTypeDef* hcanx, const CAN_TxHeaderTypeDef *pHeader,
					const uint8_t *aData, uint32_t *pTxMailbox)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
	return HAL_CAN_AddTxMessage(hcanx, pHeader, aData, pTxMailbox);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f001 fa80 	bl	8009d1a <HAL_CAN_AddTxMessage>
 800881a:	4603      	mov	r3, r0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh>:

int HAL_CANReceive(CAN_HandleTypeDef *hcanx, CAN_RxHeaderTypeDef *pHeader, uint8_t *aData)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
	return HAL_CAN_GetRxMessage(hcanx, CAN_RX_FIFO0, pHeader, aData);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	2100      	movs	r1, #0
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f001 fb3f 	bl	8009eba <HAL_CAN_GetRxMessage>
 800883c:	4603      	mov	r3, r0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b08c      	sub	sp, #48	; 0x30
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8] = {0,};
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
 8008852:	2300      	movs	r3, #0
 8008854:	613b      	str	r3, [r7, #16]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8008856:	f107 030c 	add.w	r3, r7, #12
 800885a:	f107 0214 	add.w	r2, r7, #20
 800885e:	2100      	movs	r1, #0
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 fb2a 	bl	8009eba <HAL_CAN_GetRxMessage>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	bf14      	ite	ne
 800886c:	2301      	movne	r3, #1
 800886e:	2300      	moveq	r3, #0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
  {
    /* Reception Error */
    Error_Handler();
 8008876:	f7f9 fb51 	bl	8001f1c <Error_Handler>
  }

}
 800887a:	bf00      	nop
 800887c:	3730      	adds	r7, #48	; 0x30
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
	...

08008884 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4a07      	ldr	r2, [pc, #28]	; (80088b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008894:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	4a06      	ldr	r2, [pc, #24]	; (80088b4 <vApplicationGetIdleTaskMemory+0x30>)
 800889a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088a2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80088a4:	bf00      	nop
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	200008f8 	.word	0x200008f8
 80088b4:	200009ac 	.word	0x200009ac

080088b8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80088b8:	b480      	push	{r7}
 80088ba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80088bc:	f3bf 8f4f 	dsb	sy
}
 80088c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80088c2:	f3bf 8f6f 	isb	sy
}
 80088c6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80088c8:	4b0d      	ldr	r3, [pc, #52]	; (8008900 <SCB_EnableICache+0x48>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80088d0:	f3bf 8f4f 	dsb	sy
}
 80088d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80088d6:	f3bf 8f6f 	isb	sy
}
 80088da:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80088dc:	4b08      	ldr	r3, [pc, #32]	; (8008900 <SCB_EnableICache+0x48>)
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	4a07      	ldr	r2, [pc, #28]	; (8008900 <SCB_EnableICache+0x48>)
 80088e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088e6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80088e8:	f3bf 8f4f 	dsb	sy
}
 80088ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80088ee:	f3bf 8f6f 	isb	sy
}
 80088f2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80088f4:	bf00      	nop
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	e000ed00 	.word	0xe000ed00

08008904 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800890a:	4b25      	ldr	r3, [pc, #148]	; (80089a0 <SCB_EnableDCache+0x9c>)
 800890c:	2200      	movs	r2, #0
 800890e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008912:	f3bf 8f4f 	dsb	sy
}
 8008916:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8008918:	4b21      	ldr	r3, [pc, #132]	; (80089a0 <SCB_EnableDCache+0x9c>)
 800891a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800891e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	0b5b      	lsrs	r3, r3, #13
 8008924:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008928:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	08db      	lsrs	r3, r3, #3
 800892e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008932:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800893c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008942:	4917      	ldr	r1, [pc, #92]	; (80089a0 <SCB_EnableDCache+0x9c>)
 8008944:	4313      	orrs	r3, r2
 8008946:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	1e5a      	subs	r2, r3, #1
 800894e:	60ba      	str	r2, [r7, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	bf14      	ite	ne
 8008954:	2301      	movne	r3, #1
 8008956:	2300      	moveq	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d000      	beq.n	8008960 <SCB_EnableDCache+0x5c>
      do {
 800895e:	e7e9      	b.n	8008934 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	1e5a      	subs	r2, r3, #1
 8008964:	60fa      	str	r2, [r7, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	bf14      	ite	ne
 800896a:	2301      	movne	r3, #1
 800896c:	2300      	moveq	r3, #0
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	d000      	beq.n	8008976 <SCB_EnableDCache+0x72>
    do {
 8008974:	e7d9      	b.n	800892a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8008976:	f3bf 8f4f 	dsb	sy
}
 800897a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800897c:	4b08      	ldr	r3, [pc, #32]	; (80089a0 <SCB_EnableDCache+0x9c>)
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	4a07      	ldr	r2, [pc, #28]	; (80089a0 <SCB_EnableDCache+0x9c>)
 8008982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008986:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008988:	f3bf 8f4f 	dsb	sy
}
 800898c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800898e:	f3bf 8f6f 	isb	sy
}
 8008992:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8008994:	bf00      	nop
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	e000ed00 	.word	0xe000ed00

080089a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80089a4:	b5b0      	push	{r4, r5, r7, lr}
 80089a6:	b096      	sub	sp, #88	; 0x58
 80089a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80089aa:	f7ff ff85 	bl	80088b8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80089ae:	f7ff ffa9 	bl	8008904 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80089b2:	f000 fef7 	bl	80097a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80089b6:	f7f8 ff1b 	bl	80017f0 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* USER CODE BEGIN 2 */

  init_stm32f746();
 80089ba:	f7f8 ff03 	bl	80017c4 <init_stm32f746>

	Dprintf("Stm32f746 Initializing is complete!\n");
 80089be:	482a      	ldr	r0, [pc, #168]	; (8008a68 <main+0xc4>)
 80089c0:	f7f8 fadc 	bl	8000f7c <_Z7DprintfPKcz>

	/* USER CODE BEGIN 5 */
	//debug init
	Debug_Uart_Init();
 80089c4:	f7f8 fb20 	bl	8001008 <_Z15Debug_Uart_Initv>

	Dprintf("Module Initializing\n");
 80089c8:	4828      	ldr	r0, [pc, #160]	; (8008a6c <main+0xc8>)
 80089ca:	f7f8 fad7 	bl	8000f7c <_Z7DprintfPKcz>
	HAL_Delay(5000);
 80089ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80089d2:	f000 ff15 	bl	8009800 <HAL_Delay>

	//sensor manager initialize
	//need some times for boot pgv100
	SensorManager::GetInstance().CommonSensorInitialize();
 80089d6:	f7fd ff3f 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 80089da:	4603      	mov	r3, r0
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fe f8e9 	bl	8006bb4 <_ZN13SensorManager22CommonSensorInitializeEv>
	SensorManager::GetInstance().PGV100Initialize();
 80089e2:	f7fd ff39 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 80089e6:	4603      	mov	r3, r0
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fe f9e9 	bl	8006dc0 <_ZN13SensorManager16PGV100InitializeEv>

	Dprintf("Module Initializing is complete!\n");
 80089ee:	4820      	ldr	r0, [pc, #128]	; (8008a70 <main+0xcc>)
 80089f0:	f7f8 fac4 	bl	8000f7c <_Z7DprintfPKcz>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitTask */
  osThreadDef(InitTask, StartInitTask, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 80089f4:	4b1f      	ldr	r3, [pc, #124]	; (8008a74 <main+0xd0>)
 80089f6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80089fa:	461d      	mov	r5, r3
 80089fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InitTaskHandle = osThreadCreate(osThread(InitTask), NULL);
 8008a08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f007 fc30 	bl	8010274 <osThreadCreate>
 8008a14:	4603      	mov	r3, r0
 8008a16:	4a18      	ldr	r2, [pc, #96]	; (8008a78 <main+0xd4>)
 8008a18:	6013      	str	r3, [r2, #0]

  /* definition and creation of CommonSensorTask */
  osThreadDef(CommonSensorTas, StartCommonSensorTask, osPriorityLow, 0, configMINIMAL_STACK_SIZE);
 8008a1a:	4b18      	ldr	r3, [pc, #96]	; (8008a7c <main+0xd8>)
 8008a1c:	f107 0420 	add.w	r4, r7, #32
 8008a20:	461d      	mov	r5, r3
 8008a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommonSensorTasHandle = osThreadCreate(osThread(CommonSensorTas), NULL);
 8008a2e:	f107 0320 	add.w	r3, r7, #32
 8008a32:	2100      	movs	r1, #0
 8008a34:	4618      	mov	r0, r3
 8008a36:	f007 fc1d 	bl	8010274 <osThreadCreate>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	4a10      	ldr	r2, [pc, #64]	; (8008a80 <main+0xdc>)
 8008a3e:	6013      	str	r3, [r2, #0]
  /* definition and creation of PGV100Task */
  //osThreadDef(PGV100Task, StartPGV100Task, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE);
  //PGV100TaskHandle = osThreadCreate(osThread(PGV100Task), NULL);

  /* definition and creation of ETHTask */
  osThreadDef(ETHTask, StartETHTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8008a40:	4b10      	ldr	r3, [pc, #64]	; (8008a84 <main+0xe0>)
 8008a42:	1d3c      	adds	r4, r7, #4
 8008a44:	461d      	mov	r5, r3
 8008a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ETHTaskHandle = osThreadCreate(osThread(ETHTask), NULL);
 8008a52:	1d3b      	adds	r3, r7, #4
 8008a54:	2100      	movs	r1, #0
 8008a56:	4618      	mov	r0, r3
 8008a58:	f007 fc0c 	bl	8010274 <osThreadCreate>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	4a0a      	ldr	r2, [pc, #40]	; (8008a88 <main+0xe4>)
 8008a60:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008a62:	f007 fbf0 	bl	8010246 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008a66:	e7fe      	b.n	8008a66 <main+0xc2>
 8008a68:	08023ba8 	.word	0x08023ba8
 8008a6c:	08023bd0 	.word	0x08023bd0
 8008a70:	08023be8 	.word	0x08023be8
 8008a74:	08023c0c 	.word	0x08023c0c
 8008a78:	200019ac 	.word	0x200019ac
 8008a7c:	08023c28 	.word	0x08023c28
 8008a80:	200019b0 	.word	0x200019b0
 8008a84:	08023c44 	.word	0x08023c44
 8008a88:	200019b4 	.word	0x200019b4

08008a8c <_Z13StartInitTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void const *argument)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
	Dprintf("Ethernet Initializing\n");
 8008a94:	4809      	ldr	r0, [pc, #36]	; (8008abc <_Z13StartInitTaskPKv+0x30>)
 8008a96:	f7f8 fa71 	bl	8000f7c <_Z7DprintfPKcz>

	/* init code for LWIP */
	MX_LWIP_Init();
 8008a9a:	f006 fd7b 	bl	800f594 <MX_LWIP_Init>

	//UdpRtosServerInit();
	UdpClientInit();
 8008a9e:	f7f8 fe7d 	bl	800179c <_Z13UdpClientInitv>
	TcpServerInit();
 8008aa2:	f7f8 fdc9 	bl	8001638 <_Z13TcpServerInitv>

	Dprintf("Ethernet Initializing is complete!\n");
 8008aa6:	4806      	ldr	r0, [pc, #24]	; (8008ac0 <_Z13StartInitTaskPKv+0x34>)
 8008aa8:	f7f8 fa68 	bl	8000f7c <_Z7DprintfPKcz>

	/* Infinite loop */
	for(;;)
	{
		osDelay(1000);  //1000ms
 8008aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008ab0:	f007 fc2c 	bl	801030c <osDelay>
		//vTaskDelayUntil(&xLastWakeTime, xTime);
		vTaskDelete(NULL);
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	f009 f91d 	bl	8011cf4 <vTaskDelete>
		osDelay(1000);  //1000ms
 8008aba:	e7f7      	b.n	8008aac <_Z13StartInitTaskPKv+0x20>
 8008abc:	08023c60 	.word	0x08023c60
 8008ac0:	08023c78 	.word	0x08023c78

08008ac4 <_Z21StartCommonSensorTaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommonSensorTask */
void StartCommonSensorTask(void const *argument)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommonSensorTask */
	const TickType_t xTime = pdMS_TO_TICKS(1);
 8008acc:	2301      	movs	r3, #1
 8008ace:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8008ad0:	f009 fb76 	bl	80121c0 <xTaskGetTickCount>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	//vTaskDelayUntil(&xLastWakeTime, xTime);
	SensorManager::GetInstance().CommonSensorDrive();
 8008ad8:	f7fd febe 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 8008adc:	4603      	mov	r3, r0
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fe f876 	bl	8006bd0 <_ZN13SensorManager17CommonSensorDriveEv>
	sensorsval = SensorManager::GetInstance().CommonSensorGetAllData();
 8008ae4:	f7fd feb8 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe f8e8 	bl	8006cc0 <_ZNK13SensorManager22CommonSensorGetAllDataEv>
 8008af0:	4603      	mov	r3, r0
 8008af2:	461a      	mov	r2, r3
 8008af4:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <_Z21StartCommonSensorTaskPKv+0x48>)
 8008af6:	801a      	strh	r2, [r3, #0]
    osDelay(1);
 8008af8:	2001      	movs	r0, #1
 8008afa:	f007 fc07 	bl	801030c <osDelay>
	vTaskDelayUntil(&xLastWakeTime, xTime);
 8008afe:	f107 0308 	add.w	r3, r7, #8
 8008b02:	2101      	movs	r1, #1
 8008b04:	4618      	mov	r0, r3
 8008b06:	f009 f987 	bl	8011e18 <vTaskDelayUntil>
	SensorManager::GetInstance().CommonSensorDrive();
 8008b0a:	e7e5      	b.n	8008ad8 <_Z21StartCommonSensorTaskPKv+0x14>
 8008b0c:	200019b8 	.word	0x200019b8

08008b10 <_Z12StartETHTaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartETHTask */
void StartETHTask(void const *argument)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartETHTask */
	const TickType_t xTime = pdMS_TO_TICKS(50);
 8008b18:	2332      	movs	r3, #50	; 0x32
 8008b1a:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8008b1c:	f009 fb50 	bl	80121c0 <xTaskGetTickCount>
 8008b20:	4603      	mov	r3, r0
 8008b22:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  	DebugDrive();
 8008b24:	f7f8 fa86 	bl	8001034 <_Z10DebugDrivev>

		pgvxpos = SensorManager::GetInstance().PGV100GetXData();
 8008b28:	f7fd fe96 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe f98c 	bl	8006e4c <_ZNK13SensorManager14PGV100GetXDataEv>
 8008b34:	eeb0 7a40 	vmov.f32	s14, s0
 8008b38:	eef0 7a60 	vmov.f32	s15, s1
 8008b3c:	4b23      	ldr	r3, [pc, #140]	; (8008bcc <_Z12StartETHTaskPKv+0xbc>)
 8008b3e:	ed83 7b00 	vstr	d7, [r3]
		pgvypos = SensorManager::GetInstance().PGV100GetYData();
 8008b42:	f7fd fe89 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 8008b46:	4603      	mov	r3, r0
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fe f999 	bl	8006e80 <_ZNK13SensorManager14PGV100GetYDataEv>
 8008b4e:	eeb0 7a40 	vmov.f32	s14, s0
 8008b52:	eef0 7a60 	vmov.f32	s15, s1
 8008b56:	4b1e      	ldr	r3, [pc, #120]	; (8008bd0 <_Z12StartETHTaskPKv+0xc0>)
 8008b58:	ed83 7b00 	vstr	d7, [r3]
		pcvAngle = SensorManager::GetInstance().PGV100GetAngleData();
 8008b5c:	f7fd fe7c 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 8008b60:	4603      	mov	r3, r0
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe f9a6 	bl	8006eb4 <_ZNK13SensorManager18PGV100GetAngleDataEv>
 8008b68:	eeb0 7a40 	vmov.f32	s14, s0
 8008b6c:	eef0 7a60 	vmov.f32	s15, s1
 8008b70:	4b18      	ldr	r3, [pc, #96]	; (8008bd4 <_Z12StartETHTaskPKv+0xc4>)
 8008b72:	ed83 7b00 	vstr	d7, [r3]
		pcverr = SensorManager::GetInstance().PGV100GetErrData();
 8008b76:	f7fd fe6f 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fe f9c7 	bl	8006f10 <_ZNK13SensorManager16PGV100GetErrDataEv>
 8008b82:	ec53 2b10 	vmov	r2, r3, d0
 8008b86:	4610      	mov	r0, r2
 8008b88:	4619      	mov	r1, r3
 8008b8a:	f7f8 f82d 	bl	8000be8 <__aeabi_d2uiz>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	4b11      	ldr	r3, [pc, #68]	; (8008bd8 <_Z12StartETHTaskPKv+0xc8>)
 8008b94:	801a      	strh	r2, [r3, #0]
		pcvtag = SensorManager::GetInstance().PGV100GetTagData();
 8008b96:	f7fd fe5f 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe f9a3 	bl	8006ee8 <_ZNK13SensorManager16PGV100GetTagDataEv>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	4b0d      	ldr	r3, [pc, #52]	; (8008bdc <_Z12StartETHTaskPKv+0xcc>)
 8008ba8:	801a      	strh	r2, [r3, #0]
		errup = SensorManager::GetInstance().PGV100IsErrUp();
 8008baa:	f7fd fe55 	bl	8006858 <_ZN13SensorManager11GetInstanceEv>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fe f9cb 	bl	8006f4c <_ZNK13SensorManager13PGV100IsErrUpEv>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	461a      	mov	r2, r3
 8008bba:	4b09      	ldr	r3, [pc, #36]	; (8008be0 <_Z12StartETHTaskPKv+0xd0>)
 8008bbc:	701a      	strb	r2, [r3, #0]

		//vTaskDelayUntil(&xLastWakeTime, xTime);
		//ethernetif_input(&gnetif);
		//sys_check_timeouts();
		vTaskDelayUntil(&xLastWakeTime, xTime);
 8008bbe:	f107 0308 	add.w	r3, r7, #8
 8008bc2:	2132      	movs	r1, #50	; 0x32
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f009 f927 	bl	8011e18 <vTaskDelayUntil>
	  	DebugDrive();
 8008bca:	e7ab      	b.n	8008b24 <_Z12StartETHTaskPKv+0x14>
 8008bcc:	200019c0 	.word	0x200019c0
 8008bd0:	200019c8 	.word	0x200019c8
 8008bd4:	200019d0 	.word	0x200019d0
 8008bd8:	200019d8 	.word	0x200019d8
 8008bdc:	200019da 	.word	0x200019da
 8008be0:	200019dc 	.word	0x200019dc

08008be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8008bea:	4b11      	ldr	r3, [pc, #68]	; (8008c30 <HAL_MspInit+0x4c>)
 8008bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bee:	4a10      	ldr	r2, [pc, #64]	; (8008c30 <HAL_MspInit+0x4c>)
 8008bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8008bf6:	4b0e      	ldr	r3, [pc, #56]	; (8008c30 <HAL_MspInit+0x4c>)
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bfe:	607b      	str	r3, [r7, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c02:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <HAL_MspInit+0x4c>)
 8008c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c06:	4a0a      	ldr	r2, [pc, #40]	; (8008c30 <HAL_MspInit+0x4c>)
 8008c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c0e:	4b08      	ldr	r3, [pc, #32]	; (8008c30 <HAL_MspInit+0x4c>)
 8008c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	210f      	movs	r1, #15
 8008c1e:	f06f 0001 	mvn.w	r0, #1
 8008c22:	f001 fd67 	bl	800a6f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c26:	bf00      	nop
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	40023800 	.word	0x40023800

08008c34 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08a      	sub	sp, #40	; 0x28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c3c:	f107 0314 	add.w	r3, r7, #20
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	605a      	str	r2, [r3, #4]
 8008c46:	609a      	str	r2, [r3, #8]
 8008c48:	60da      	str	r2, [r3, #12]
 8008c4a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a1b      	ldr	r2, [pc, #108]	; (8008cc0 <HAL_CAN_MspInit+0x8c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d130      	bne.n	8008cb8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008c56:	4b1b      	ldr	r3, [pc, #108]	; (8008cc4 <HAL_CAN_MspInit+0x90>)
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	4a1a      	ldr	r2, [pc, #104]	; (8008cc4 <HAL_CAN_MspInit+0x90>)
 8008c5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c60:	6413      	str	r3, [r2, #64]	; 0x40
 8008c62:	4b18      	ldr	r3, [pc, #96]	; (8008cc4 <HAL_CAN_MspInit+0x90>)
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c6a:	613b      	str	r3, [r7, #16]
 8008c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c6e:	4b15      	ldr	r3, [pc, #84]	; (8008cc4 <HAL_CAN_MspInit+0x90>)
 8008c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c72:	4a14      	ldr	r2, [pc, #80]	; (8008cc4 <HAL_CAN_MspInit+0x90>)
 8008c74:	f043 0301 	orr.w	r3, r3, #1
 8008c78:	6313      	str	r3, [r2, #48]	; 0x30
 8008c7a:	4b12      	ldr	r3, [pc, #72]	; (8008cc4 <HAL_CAN_MspInit+0x90>)
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c90:	2300      	movs	r3, #0
 8008c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c94:	2303      	movs	r3, #3
 8008c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8008c98:	2309      	movs	r3, #9
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c9c:	f107 0314 	add.w	r3, r7, #20
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	4809      	ldr	r0, [pc, #36]	; (8008cc8 <HAL_CAN_MspInit+0x94>)
 8008ca4:	f003 f81e 	bl	800bce4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2108      	movs	r1, #8
 8008cac:	2014      	movs	r0, #20
 8008cae:	f001 fd21 	bl	800a6f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8008cb2:	2014      	movs	r0, #20
 8008cb4:	f001 fd3a 	bl	800a72c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008cb8:	bf00      	nop
 8008cba:	3728      	adds	r7, #40	; 0x28
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	40006400 	.word	0x40006400
 8008cc4:	40023800 	.word	0x40023800
 8008cc8:	40020000 	.word	0x40020000

08008ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a0d      	ldr	r2, [pc, #52]	; (8008d10 <HAL_TIM_Base_MspInit+0x44>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d113      	bne.n	8008d06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8008cde:	4b0d      	ldr	r3, [pc, #52]	; (8008d14 <HAL_TIM_Base_MspInit+0x48>)
 8008ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce2:	4a0c      	ldr	r2, [pc, #48]	; (8008d14 <HAL_TIM_Base_MspInit+0x48>)
 8008ce4:	f043 0320 	orr.w	r3, r3, #32
 8008ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8008cea:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <HAL_TIM_Base_MspInit+0x48>)
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	f003 0320 	and.w	r3, r3, #32
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 7, 0);
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2107      	movs	r1, #7
 8008cfa:	2037      	movs	r0, #55	; 0x37
 8008cfc:	f001 fcfa 	bl	800a6f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8008d00:	2037      	movs	r0, #55	; 0x37
 8008d02:	f001 fd13 	bl	800a72c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8008d06:	bf00      	nop
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	40001400 	.word	0x40001400
 8008d14:	40023800 	.word	0x40023800

08008d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b0b4      	sub	sp, #208	; 0xd0
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d20:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	605a      	str	r2, [r3, #4]
 8008d2a:	609a      	str	r2, [r3, #8]
 8008d2c:	60da      	str	r2, [r3, #12]
 8008d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008d30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d34:	2284      	movs	r2, #132	; 0x84
 8008d36:	2100      	movs	r1, #0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f019 fc51 	bl	80225e0 <memset>
  if(huart->Instance==UART4)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4aa6      	ldr	r2, [pc, #664]	; (8008fdc <HAL_UART_MspInit+0x2c4>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d146      	bne.n	8008dd6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8008d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d4c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008d54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f003 fead 	bl	800cab8 <HAL_RCCEx_PeriphCLKConfig>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8008d64:	f7f9 f8da 	bl	8001f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008d68:	4b9d      	ldr	r3, [pc, #628]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6c:	4a9c      	ldr	r2, [pc, #624]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008d6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d72:	6413      	str	r3, [r2, #64]	; 0x40
 8008d74:	4b9a      	ldr	r3, [pc, #616]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d80:	4b97      	ldr	r3, [pc, #604]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d84:	4a96      	ldr	r2, [pc, #600]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008d86:	f043 0304 	orr.w	r3, r3, #4
 8008d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8008d8c:	4b94      	ldr	r3, [pc, #592]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	633b      	str	r3, [r7, #48]	; 0x30
 8008d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008d98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008da0:	2302      	movs	r3, #2
 8008da2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008da6:	2300      	movs	r3, #0
 8008da8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dac:	2303      	movs	r3, #3
 8008dae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008db2:	2308      	movs	r3, #8
 8008db4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008db8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4889      	ldr	r0, [pc, #548]	; (8008fe4 <HAL_UART_MspInit+0x2cc>)
 8008dc0:	f002 ff90 	bl	800bce4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2108      	movs	r1, #8
 8008dc8:	2034      	movs	r0, #52	; 0x34
 8008dca:	f001 fc93 	bl	800a6f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008dce:	2034      	movs	r0, #52	; 0x34
 8008dd0:	f001 fcac 	bl	800a72c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8008dd4:	e15e      	b.n	8009094 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==UART5)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a83      	ldr	r2, [pc, #524]	; (8008fe8 <HAL_UART_MspInit+0x2d0>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d167      	bne.n	8008eb0 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8008de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008de4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8008de6:	2300      	movs	r3, #0
 8008de8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008dec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008df0:	4618      	mov	r0, r3
 8008df2:	f003 fe61 	bl	800cab8 <HAL_RCCEx_PeriphCLKConfig>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8008dfc:	f7f9 f88e 	bl	8001f1c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8008e00:	4b77      	ldr	r3, [pc, #476]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e04:	4a76      	ldr	r2, [pc, #472]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8008e0c:	4b74      	ldr	r3, [pc, #464]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e18:	4b71      	ldr	r3, [pc, #452]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	4a70      	ldr	r2, [pc, #448]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008e1e:	f043 0304 	orr.w	r3, r3, #4
 8008e22:	6313      	str	r3, [r2, #48]	; 0x30
 8008e24:	4b6e      	ldr	r3, [pc, #440]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e28:	f003 0304 	and.w	r3, r3, #4
 8008e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e30:	4b6b      	ldr	r3, [pc, #428]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e34:	4a6a      	ldr	r2, [pc, #424]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008e36:	f043 0308 	orr.w	r3, r3, #8
 8008e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8008e3c:	4b68      	ldr	r3, [pc, #416]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e40:	f003 0308 	and.w	r3, r3, #8
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e50:	2302      	movs	r3, #2
 8008e52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e56:	2300      	movs	r3, #0
 8008e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008e62:	2308      	movs	r3, #8
 8008e64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e68:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	485d      	ldr	r0, [pc, #372]	; (8008fe4 <HAL_UART_MspInit+0x2cc>)
 8008e70:	f002 ff38 	bl	800bce4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008e74:	2304      	movs	r3, #4
 8008e76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e80:	2300      	movs	r3, #0
 8008e82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e86:	2303      	movs	r3, #3
 8008e88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008e8c:	2308      	movs	r3, #8
 8008e8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008e92:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008e96:	4619      	mov	r1, r3
 8008e98:	4854      	ldr	r0, [pc, #336]	; (8008fec <HAL_UART_MspInit+0x2d4>)
 8008e9a:	f002 ff23 	bl	800bce4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2105      	movs	r1, #5
 8008ea2:	2035      	movs	r0, #53	; 0x35
 8008ea4:	f001 fc26 	bl	800a6f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8008ea8:	2035      	movs	r0, #53	; 0x35
 8008eaa:	f001 fc3f 	bl	800a72c <HAL_NVIC_EnableIRQ>
}
 8008eae:	e0f1      	b.n	8009094 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART1)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a4e      	ldr	r2, [pc, #312]	; (8008ff0 <HAL_UART_MspInit+0x2d8>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d144      	bne.n	8008f44 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008eba:	2340      	movs	r3, #64	; 0x40
 8008ebc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008ec2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f003 fdf6 	bl	800cab8 <HAL_RCCEx_PeriphCLKConfig>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <HAL_UART_MspInit+0x1be>
      Error_Handler();
 8008ed2:	f7f9 f823 	bl	8001f1c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ed6:	4b42      	ldr	r3, [pc, #264]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eda:	4a41      	ldr	r2, [pc, #260]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008edc:	f043 0310 	orr.w	r3, r3, #16
 8008ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8008ee2:	4b3f      	ldr	r3, [pc, #252]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ee6:	f003 0310 	and.w	r3, r3, #16
 8008eea:	623b      	str	r3, [r7, #32]
 8008eec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eee:	4b3c      	ldr	r3, [pc, #240]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef2:	4a3b      	ldr	r2, [pc, #236]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008ef4:	f043 0301 	orr.w	r3, r3, #1
 8008ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8008efa:	4b39      	ldr	r3, [pc, #228]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	61fb      	str	r3, [r7, #28]
 8008f04:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008f06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f0e:	2302      	movs	r3, #2
 8008f10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f14:	2300      	movs	r3, #0
 8008f16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008f20:	2307      	movs	r3, #7
 8008f22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f26:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4831      	ldr	r0, [pc, #196]	; (8008ff4 <HAL_UART_MspInit+0x2dc>)
 8008f2e:	f002 fed9 	bl	800bce4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 8008f32:	2200      	movs	r2, #0
 8008f34:	210e      	movs	r1, #14
 8008f36:	2025      	movs	r0, #37	; 0x25
 8008f38:	f001 fbdc 	bl	800a6f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008f3c:	2025      	movs	r0, #37	; 0x25
 8008f3e:	f001 fbf5 	bl	800a72c <HAL_NVIC_EnableIRQ>
}
 8008f42:	e0a7      	b.n	8009094 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART3)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a2b      	ldr	r2, [pc, #172]	; (8008ff8 <HAL_UART_MspInit+0x2e0>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d158      	bne.n	8009000 <HAL_UART_MspInit+0x2e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8008f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f52:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008f54:	2300      	movs	r3, #0
 8008f56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008f5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f003 fdaa 	bl	800cab8 <HAL_RCCEx_PeriphCLKConfig>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <HAL_UART_MspInit+0x256>
      Error_Handler();
 8008f6a:	f7f8 ffd7 	bl	8001f1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008f6e:	4b1c      	ldr	r3, [pc, #112]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f72:	4a1b      	ldr	r2, [pc, #108]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f78:	6413      	str	r3, [r2, #64]	; 0x40
 8008f7a:	4b19      	ldr	r3, [pc, #100]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f82:	61bb      	str	r3, [r7, #24]
 8008f84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f86:	4b16      	ldr	r3, [pc, #88]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8a:	4a15      	ldr	r2, [pc, #84]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008f8c:	f043 0302 	orr.w	r3, r3, #2
 8008f90:	6313      	str	r3, [r2, #48]	; 0x30
 8008f92:	4b13      	ldr	r3, [pc, #76]	; (8008fe0 <HAL_UART_MspInit+0x2c8>)
 8008f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f96:	f003 0302 	and.w	r3, r3, #2
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008f9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008fa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fac:	2300      	movs	r3, #0
 8008fae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008fb8:	2307      	movs	r3, #7
 8008fba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fbe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	480d      	ldr	r0, [pc, #52]	; (8008ffc <HAL_UART_MspInit+0x2e4>)
 8008fc6:	f002 fe8d 	bl	800bce4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2108      	movs	r1, #8
 8008fce:	2027      	movs	r0, #39	; 0x27
 8008fd0:	f001 fb90 	bl	800a6f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008fd4:	2027      	movs	r0, #39	; 0x27
 8008fd6:	f001 fba9 	bl	800a72c <HAL_NVIC_EnableIRQ>
}
 8008fda:	e05b      	b.n	8009094 <HAL_UART_MspInit+0x37c>
 8008fdc:	40004c00 	.word	0x40004c00
 8008fe0:	40023800 	.word	0x40023800
 8008fe4:	40020800 	.word	0x40020800
 8008fe8:	40005000 	.word	0x40005000
 8008fec:	40020c00 	.word	0x40020c00
 8008ff0:	40011000 	.word	0x40011000
 8008ff4:	40020000 	.word	0x40020000
 8008ff8:	40004800 	.word	0x40004800
 8008ffc:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a25      	ldr	r2, [pc, #148]	; (800909c <HAL_UART_MspInit+0x384>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d144      	bne.n	8009094 <HAL_UART_MspInit+0x37c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800900a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800900e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8009010:	2300      	movs	r3, #0
 8009012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009016:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800901a:	4618      	mov	r0, r3
 800901c:	f003 fd4c 	bl	800cab8 <HAL_RCCEx_PeriphCLKConfig>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <HAL_UART_MspInit+0x312>
      Error_Handler();
 8009026:	f7f8 ff79 	bl	8001f1c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800902a:	4b1d      	ldr	r3, [pc, #116]	; (80090a0 <HAL_UART_MspInit+0x388>)
 800902c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800902e:	4a1c      	ldr	r2, [pc, #112]	; (80090a0 <HAL_UART_MspInit+0x388>)
 8009030:	f043 0320 	orr.w	r3, r3, #32
 8009034:	6453      	str	r3, [r2, #68]	; 0x44
 8009036:	4b1a      	ldr	r3, [pc, #104]	; (80090a0 <HAL_UART_MspInit+0x388>)
 8009038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903a:	f003 0320 	and.w	r3, r3, #32
 800903e:	613b      	str	r3, [r7, #16]
 8009040:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009042:	4b17      	ldr	r3, [pc, #92]	; (80090a0 <HAL_UART_MspInit+0x388>)
 8009044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009046:	4a16      	ldr	r2, [pc, #88]	; (80090a0 <HAL_UART_MspInit+0x388>)
 8009048:	f043 0304 	orr.w	r3, r3, #4
 800904c:	6313      	str	r3, [r2, #48]	; 0x30
 800904e:	4b14      	ldr	r3, [pc, #80]	; (80090a0 <HAL_UART_MspInit+0x388>)
 8009050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009052:	f003 0304 	and.w	r3, r3, #4
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800905a:	23c0      	movs	r3, #192	; 0xc0
 800905c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009060:	2302      	movs	r3, #2
 8009062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009066:	2300      	movs	r3, #0
 8009068:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800906c:	2303      	movs	r3, #3
 800906e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8009072:	2308      	movs	r3, #8
 8009074:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009078:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800907c:	4619      	mov	r1, r3
 800907e:	4809      	ldr	r0, [pc, #36]	; (80090a4 <HAL_UART_MspInit+0x38c>)
 8009080:	f002 fe30 	bl	800bce4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 8, 0);
 8009084:	2200      	movs	r2, #0
 8009086:	2108      	movs	r1, #8
 8009088:	2047      	movs	r0, #71	; 0x47
 800908a:	f001 fb33 	bl	800a6f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800908e:	2047      	movs	r0, #71	; 0x47
 8009090:	f001 fb4c 	bl	800a72c <HAL_NVIC_EnableIRQ>
}
 8009094:	bf00      	nop
 8009096:	37d0      	adds	r7, #208	; 0xd0
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	40011400 	.word	0x40011400
 80090a0:	40023800 	.word	0x40023800
 80090a4:	40020800 	.word	0x40020800

080090a8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80090ae:	1d3b      	adds	r3, r7, #4
 80090b0:	2200      	movs	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	605a      	str	r2, [r3, #4]
 80090b6:	609a      	str	r2, [r3, #8]
 80090b8:	60da      	str	r2, [r3, #12]
 80090ba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80090bc:	4b23      	ldr	r3, [pc, #140]	; (800914c <HAL_FMC_MspInit+0xa4>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d13e      	bne.n	8009142 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 80090c4:	4b21      	ldr	r3, [pc, #132]	; (800914c <HAL_FMC_MspInit+0xa4>)
 80090c6:	2201      	movs	r2, #1
 80090c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80090ca:	4b21      	ldr	r3, [pc, #132]	; (8009150 <HAL_FMC_MspInit+0xa8>)
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	4a20      	ldr	r2, [pc, #128]	; (8009150 <HAL_FMC_MspInit+0xa8>)
 80090d0:	f043 0301 	orr.w	r3, r3, #1
 80090d4:	6393      	str	r3, [r2, #56]	; 0x38
 80090d6:	4b1e      	ldr	r3, [pc, #120]	; (8009150 <HAL_FMC_MspInit+0xa8>)
 80090d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80090e2:	2307      	movs	r3, #7
 80090e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090e6:	2302      	movs	r3, #2
 80090e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090ea:	2300      	movs	r3, #0
 80090ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090ee:	2303      	movs	r3, #3
 80090f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80090f2:	230c      	movs	r3, #12
 80090f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80090f6:	1d3b      	adds	r3, r7, #4
 80090f8:	4619      	mov	r1, r3
 80090fa:	4816      	ldr	r0, [pc, #88]	; (8009154 <HAL_FMC_MspInit+0xac>)
 80090fc:	f002 fdf2 	bl	800bce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8009100:	f64f 7380 	movw	r3, #65408	; 0xff80
 8009104:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009106:	2302      	movs	r3, #2
 8009108:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800910a:	2300      	movs	r3, #0
 800910c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800910e:	2303      	movs	r3, #3
 8009110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009112:	230c      	movs	r3, #12
 8009114:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009116:	1d3b      	adds	r3, r7, #4
 8009118:	4619      	mov	r1, r3
 800911a:	480f      	ldr	r0, [pc, #60]	; (8009158 <HAL_FMC_MspInit+0xb0>)
 800911c:	f002 fde2 	bl	800bce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8009120:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8009124:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009126:	2302      	movs	r3, #2
 8009128:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800912a:	2300      	movs	r3, #0
 800912c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800912e:	2303      	movs	r3, #3
 8009130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009132:	230c      	movs	r3, #12
 8009134:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009136:	1d3b      	adds	r3, r7, #4
 8009138:	4619      	mov	r1, r3
 800913a:	4808      	ldr	r0, [pc, #32]	; (800915c <HAL_FMC_MspInit+0xb4>)
 800913c:	f002 fdd2 	bl	800bce4 <HAL_GPIO_Init>
 8009140:	e000      	b.n	8009144 <HAL_FMC_MspInit+0x9c>
    return;
 8009142:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	200019e0 	.word	0x200019e0
 8009150:	40023800 	.word	0x40023800
 8009154:	40021400 	.word	0x40021400
 8009158:	40021000 	.word	0x40021000
 800915c:	40020c00 	.word	0x40020c00

08009160 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8009168:	f7ff ff9e 	bl	80090a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b08e      	sub	sp, #56	; 0x38
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800917c:	2300      	movs	r3, #0
 800917e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8009184:	4b33      	ldr	r3, [pc, #204]	; (8009254 <HAL_InitTick+0xe0>)
 8009186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009188:	4a32      	ldr	r2, [pc, #200]	; (8009254 <HAL_InitTick+0xe0>)
 800918a:	f043 0310 	orr.w	r3, r3, #16
 800918e:	6413      	str	r3, [r2, #64]	; 0x40
 8009190:	4b30      	ldr	r3, [pc, #192]	; (8009254 <HAL_InitTick+0xe0>)
 8009192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009194:	f003 0310 	and.w	r3, r3, #16
 8009198:	60fb      	str	r3, [r7, #12]
 800919a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800919c:	f107 0210 	add.w	r2, r7, #16
 80091a0:	f107 0314 	add.w	r3, r7, #20
 80091a4:	4611      	mov	r1, r2
 80091a6:	4618      	mov	r0, r3
 80091a8:	f003 fc54 	bl	800ca54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80091b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d103      	bne.n	80091be <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80091b6:	f003 fc25 	bl	800ca04 <HAL_RCC_GetPCLK1Freq>
 80091ba:	6378      	str	r0, [r7, #52]	; 0x34
 80091bc:	e004      	b.n	80091c8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80091be:	f003 fc21 	bl	800ca04 <HAL_RCC_GetPCLK1Freq>
 80091c2:	4603      	mov	r3, r0
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80091c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ca:	4a23      	ldr	r2, [pc, #140]	; (8009258 <HAL_InitTick+0xe4>)
 80091cc:	fba2 2303 	umull	r2, r3, r2, r3
 80091d0:	0c9b      	lsrs	r3, r3, #18
 80091d2:	3b01      	subs	r3, #1
 80091d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80091d6:	4b21      	ldr	r3, [pc, #132]	; (800925c <HAL_InitTick+0xe8>)
 80091d8:	4a21      	ldr	r2, [pc, #132]	; (8009260 <HAL_InitTick+0xec>)
 80091da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80091dc:	4b1f      	ldr	r3, [pc, #124]	; (800925c <HAL_InitTick+0xe8>)
 80091de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80091e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80091e4:	4a1d      	ldr	r2, [pc, #116]	; (800925c <HAL_InitTick+0xe8>)
 80091e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80091ea:	4b1c      	ldr	r3, [pc, #112]	; (800925c <HAL_InitTick+0xe8>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80091f0:	4b1a      	ldr	r3, [pc, #104]	; (800925c <HAL_InitTick+0xe8>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80091f6:	4b19      	ldr	r3, [pc, #100]	; (800925c <HAL_InitTick+0xe8>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80091fc:	4817      	ldr	r0, [pc, #92]	; (800925c <HAL_InitTick+0xe8>)
 80091fe:	f004 f893 	bl	800d328 <HAL_TIM_Base_Init>
 8009202:	4603      	mov	r3, r0
 8009204:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8009208:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800920c:	2b00      	cmp	r3, #0
 800920e:	d11b      	bne.n	8009248 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8009210:	4812      	ldr	r0, [pc, #72]	; (800925c <HAL_InitTick+0xe8>)
 8009212:	f004 f8e1 	bl	800d3d8 <HAL_TIM_Base_Start_IT>
 8009216:	4603      	mov	r3, r0
 8009218:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800921c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009220:	2b00      	cmp	r3, #0
 8009222:	d111      	bne.n	8009248 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009224:	2036      	movs	r0, #54	; 0x36
 8009226:	f001 fa81 	bl	800a72c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b0f      	cmp	r3, #15
 800922e:	d808      	bhi.n	8009242 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8009230:	2200      	movs	r2, #0
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	2036      	movs	r0, #54	; 0x36
 8009236:	f001 fa5d 	bl	800a6f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800923a:	4a0a      	ldr	r2, [pc, #40]	; (8009264 <HAL_InitTick+0xf0>)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	e002      	b.n	8009248 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8009248:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800924c:	4618      	mov	r0, r3
 800924e:	3738      	adds	r7, #56	; 0x38
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	40023800 	.word	0x40023800
 8009258:	431bde83 	.word	0x431bde83
 800925c:	200019e4 	.word	0x200019e4
 8009260:	40001000 	.word	0x40001000
 8009264:	20000008 	.word	0x20000008

08009268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009268:	b480      	push	{r7}
 800926a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800926c:	e7fe      	b.n	800926c <NMI_Handler+0x4>

0800926e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800926e:	b480      	push	{r7}
 8009270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009272:	e7fe      	b.n	8009272 <HardFault_Handler+0x4>

08009274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009274:	b480      	push	{r7}
 8009276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009278:	e7fe      	b.n	8009278 <MemManage_Handler+0x4>

0800927a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800927a:	b480      	push	{r7}
 800927c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800927e:	e7fe      	b.n	800927e <BusFault_Handler+0x4>

08009280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009284:	e7fe      	b.n	8009284 <UsageFault_Handler+0x4>

08009286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009286:	b480      	push	{r7}
 8009288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800928a:	bf00      	nop
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009298:	4802      	ldr	r0, [pc, #8]	; (80092a4 <CAN1_RX0_IRQHandler+0x10>)
 800929a:	f000 ff20 	bl	800a0de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800929e:	bf00      	nop
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20000540 	.word	0x20000540

080092a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80092ac:	4802      	ldr	r0, [pc, #8]	; (80092b8 <USART1_IRQHandler+0x10>)
 80092ae:	f004 fdd7 	bl	800de60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80092b2:	bf00      	nop
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	200006ec 	.word	0x200006ec

080092bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80092c0:	4802      	ldr	r0, [pc, #8]	; (80092cc <USART3_IRQHandler+0x10>)
 80092c2:	f004 fdcd 	bl	800de60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80092c6:	bf00      	nop
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20000774 	.word	0x20000774

080092d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80092d4:	4802      	ldr	r0, [pc, #8]	; (80092e0 <UART4_IRQHandler+0x10>)
 80092d6:	f004 fdc3 	bl	800de60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80092da:	bf00      	nop
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	200005dc 	.word	0x200005dc

080092e4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80092e8:	4802      	ldr	r0, [pc, #8]	; (80092f4 <UART5_IRQHandler+0x10>)
 80092ea:	f004 fdb9 	bl	800de60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80092ee:	bf00      	nop
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	20000664 	.word	0x20000664

080092f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80092fc:	4802      	ldr	r0, [pc, #8]	; (8009308 <TIM6_DAC_IRQHandler+0x10>)
 80092fe:	f004 f8e3 	bl	800d4c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009302:	bf00      	nop
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	200019e4 	.word	0x200019e4

0800930c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009310:	4802      	ldr	r0, [pc, #8]	; (800931c <TIM7_IRQHandler+0x10>)
 8009312:	f004 f8d9 	bl	800d4c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8009316:	bf00      	nop
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	20000590 	.word	0x20000590

08009320 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8009324:	4802      	ldr	r0, [pc, #8]	; (8009330 <ETH_IRQHandler+0x10>)
 8009326:	f001 fe09 	bl	800af3c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800932a:	bf00      	nop
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	20006414 	.word	0x20006414

08009334 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8009338:	4802      	ldr	r0, [pc, #8]	; (8009344 <USART6_IRQHandler+0x10>)
 800933a:	f004 fd91 	bl	800de60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800933e:	bf00      	nop
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	200007fc 	.word	0x200007fc

08009348 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009348:	b480      	push	{r7}
 800934a:	af00      	add	r7, sp, #0
	return 1;
 800934c:	2301      	movs	r3, #1
}
 800934e:	4618      	mov	r0, r3
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <_kill>:

int _kill(int pid, int sig)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009362:	4b05      	ldr	r3, [pc, #20]	; (8009378 <_kill+0x20>)
 8009364:	2216      	movs	r2, #22
 8009366:	601a      	str	r2, [r3, #0]
	return -1;
 8009368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800936c:	4618      	mov	r0, r3
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr
 8009378:	2000c124 	.word	0x2000c124

0800937c <_exit>:

void _exit (int status)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009384:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff ffe5 	bl	8009358 <_kill>
	while (1) {}		/* Make sure we hang here */
 800938e:	e7fe      	b.n	800938e <_exit+0x12>

08009390 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800939c:	2300      	movs	r3, #0
 800939e:	617b      	str	r3, [r7, #20]
 80093a0:	e00a      	b.n	80093b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80093a2:	f3af 8000 	nop.w
 80093a6:	4601      	mov	r1, r0
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	60ba      	str	r2, [r7, #8]
 80093ae:	b2ca      	uxtb	r2, r1
 80093b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	3301      	adds	r3, #1
 80093b6:	617b      	str	r3, [r7, #20]
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	429a      	cmp	r2, r3
 80093be:	dbf0      	blt.n	80093a2 <_read+0x12>
	}

return len;
 80093c0:	687b      	ldr	r3, [r7, #4]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b086      	sub	sp, #24
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	60f8      	str	r0, [r7, #12]
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093d6:	2300      	movs	r3, #0
 80093d8:	617b      	str	r3, [r7, #20]
 80093da:	e009      	b.n	80093f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	60ba      	str	r2, [r7, #8]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	3301      	adds	r3, #1
 80093ee:	617b      	str	r3, [r7, #20]
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	dbf1      	blt.n	80093dc <_write+0x12>
	}
	return len;
 80093f8:	687b      	ldr	r3, [r7, #4]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3718      	adds	r7, #24
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <_close>:

int _close(int file)
{
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
	return -1;
 800940a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800942a:	605a      	str	r2, [r3, #4]
	return 0;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <_isatty>:

int _isatty(int file)
{
 800943a:	b480      	push	{r7}
 800943c:	b083      	sub	sp, #12
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
	return 1;
 8009442:	2301      	movs	r3, #1
}
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
	return 0;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
	...

0800946c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800946c:	b480      	push	{r7}
 800946e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009470:	4b06      	ldr	r3, [pc, #24]	; (800948c <SystemInit+0x20>)
 8009472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009476:	4a05      	ldr	r2, [pc, #20]	; (800948c <SystemInit+0x20>)
 8009478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800947c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009480:	bf00      	nop
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	e000ed00 	.word	0xe000ed00

08009490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80094c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009494:	480d      	ldr	r0, [pc, #52]	; (80094cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009496:	490e      	ldr	r1, [pc, #56]	; (80094d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009498:	4a0e      	ldr	r2, [pc, #56]	; (80094d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800949a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800949c:	e002      	b.n	80094a4 <LoopCopyDataInit>

0800949e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800949e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80094a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80094a2:	3304      	adds	r3, #4

080094a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80094a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80094a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80094a8:	d3f9      	bcc.n	800949e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80094aa:	4a0b      	ldr	r2, [pc, #44]	; (80094d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80094ac:	4c0b      	ldr	r4, [pc, #44]	; (80094dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80094ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80094b0:	e001      	b.n	80094b6 <LoopFillZerobss>

080094b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80094b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80094b4:	3204      	adds	r2, #4

080094b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80094b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80094b8:	d3fb      	bcc.n	80094b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80094ba:	f7ff ffd7 	bl	800946c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80094be:	f019 f81f 	bl	8022500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80094c2:	f7ff fa6f 	bl	80089a4 <main>
  bx  lr    
 80094c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80094c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80094cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80094d0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80094d4:	080275b8 	.word	0x080275b8
  ldr r2, =_sbss
 80094d8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80094dc:	2000c1b8 	.word	0x2000c1b8

080094e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80094e0:	e7fe      	b.n	80094e0 <ADC_IRQHandler>

080094e2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b083      	sub	sp, #12
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00b      	beq.n	800950a <LAN8742_RegisterBusIO+0x28>
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d007      	beq.n	800950a <LAN8742_RegisterBusIO+0x28>
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <LAN8742_RegisterBusIO+0x28>
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d102      	bne.n	8009510 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800950a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800950e:	e014      	b.n	800953a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	68da      	ldr	r2, [r3, #12]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	691a      	ldr	r2, [r3, #16]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8009546:	b580      	push	{r7, lr}
 8009548:	b086      	sub	sp, #24
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	2300      	movs	r3, #0
 8009554:	60bb      	str	r3, [r7, #8]
 8009556:	2300      	movs	r3, #0
 8009558:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d17c      	bne.n	8009660 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2220      	movs	r2, #32
 8009578:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800957a:	2300      	movs	r3, #0
 800957c:	617b      	str	r3, [r7, #20]
 800957e:	e01c      	b.n	80095ba <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	f107 0208 	add.w	r2, r7, #8
 8009588:	2112      	movs	r1, #18
 800958a:	6978      	ldr	r0, [r7, #20]
 800958c:	4798      	blx	r3
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	da03      	bge.n	800959c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8009594:	f06f 0304 	mvn.w	r3, #4
 8009598:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800959a:	e00b      	b.n	80095b4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f003 031f 	and.w	r3, r3, #31
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d105      	bne.n	80095b4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	613b      	str	r3, [r7, #16]
         break;
 80095b2:	e005      	b.n	80095c0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	3301      	adds	r3, #1
 80095b8:	617b      	str	r3, [r7, #20]
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2b1f      	cmp	r3, #31
 80095be:	d9df      	bls.n	8009580 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b1f      	cmp	r3, #31
 80095c6:	d902      	bls.n	80095ce <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80095c8:	f06f 0302 	mvn.w	r3, #2
 80095cc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d145      	bne.n	8009660 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	6810      	ldr	r0, [r2, #0]
 80095dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80095e0:	2100      	movs	r1, #0
 80095e2:	4798      	blx	r3
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	db37      	blt.n	800965a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	6810      	ldr	r0, [r2, #0]
 80095f2:	f107 0208 	add.w	r2, r7, #8
 80095f6:	2100      	movs	r1, #0
 80095f8:	4798      	blx	r3
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	db28      	blt.n	8009652 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	4798      	blx	r3
 8009606:	4603      	mov	r3, r0
 8009608:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800960a:	e01c      	b.n	8009646 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	4798      	blx	r3
 8009612:	4603      	mov	r3, r0
 8009614:	461a      	mov	r2, r3
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800961e:	d80e      	bhi.n	800963e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	6810      	ldr	r0, [r2, #0]
 8009628:	f107 0208 	add.w	r2, r7, #8
 800962c:	2100      	movs	r1, #0
 800962e:	4798      	blx	r3
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	da07      	bge.n	8009646 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8009636:	f06f 0304 	mvn.w	r3, #4
 800963a:	613b      	str	r3, [r7, #16]
                 break;
 800963c:	e010      	b.n	8009660 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800963e:	f06f 0301 	mvn.w	r3, #1
 8009642:	613b      	str	r3, [r7, #16]
               break;
 8009644:	e00c      	b.n	8009660 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1dd      	bne.n	800960c <LAN8742_Init+0xc6>
 8009650:	e006      	b.n	8009660 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8009652:	f06f 0304 	mvn.w	r3, #4
 8009656:	613b      	str	r3, [r7, #16]
 8009658:	e002      	b.n	8009660 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800965a:	f06f 0303 	mvn.w	r3, #3
 800965e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d112      	bne.n	800968c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	4798      	blx	r3
 800966c:	4603      	mov	r3, r0
 800966e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8009670:	bf00      	nop
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	4798      	blx	r3
 8009678:	4603      	mov	r3, r0
 800967a:	461a      	mov	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009684:	d9f5      	bls.n	8009672 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800968c:	693b      	ldr	r3, [r7, #16]
 }
 800968e:	4618      	mov	r0, r3
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b084      	sub	sp, #16
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800969e:	2300      	movs	r3, #0
 80096a0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	6810      	ldr	r0, [r2, #0]
 80096aa:	f107 020c 	add.w	r2, r7, #12
 80096ae:	2101      	movs	r1, #1
 80096b0:	4798      	blx	r3
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	da02      	bge.n	80096be <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80096b8:	f06f 0304 	mvn.w	r3, #4
 80096bc:	e06e      	b.n	800979c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	6810      	ldr	r0, [r2, #0]
 80096c6:	f107 020c 	add.w	r2, r7, #12
 80096ca:	2101      	movs	r1, #1
 80096cc:	4798      	blx	r3
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	da02      	bge.n	80096da <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80096d4:	f06f 0304 	mvn.w	r3, #4
 80096d8:	e060      	b.n	800979c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f003 0304 	and.w	r3, r3, #4
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80096e4:	2301      	movs	r3, #1
 80096e6:	e059      	b.n	800979c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	6810      	ldr	r0, [r2, #0]
 80096f0:	f107 020c 	add.w	r2, r7, #12
 80096f4:	2100      	movs	r1, #0
 80096f6:	4798      	blx	r3
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	da02      	bge.n	8009704 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80096fe:	f06f 0304 	mvn.w	r3, #4
 8009702:	e04b      	b.n	800979c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d11b      	bne.n	8009746 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009714:	2b00      	cmp	r3, #0
 8009716:	d006      	beq.n	8009726 <LAN8742_GetLinkState+0x90>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8009722:	2302      	movs	r3, #2
 8009724:	e03a      	b.n	800979c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8009730:	2303      	movs	r3, #3
 8009732:	e033      	b.n	800979c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800973a:	2b00      	cmp	r3, #0
 800973c:	d001      	beq.n	8009742 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800973e:	2304      	movs	r3, #4
 8009740:	e02c      	b.n	800979c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8009742:	2305      	movs	r3, #5
 8009744:	e02a      	b.n	800979c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	6810      	ldr	r0, [r2, #0]
 800974e:	f107 020c 	add.w	r2, r7, #12
 8009752:	211f      	movs	r1, #31
 8009754:	4798      	blx	r3
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	da02      	bge.n	8009762 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800975c:	f06f 0304 	mvn.w	r3, #4
 8009760:	e01c      	b.n	800979c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800976c:	2306      	movs	r3, #6
 800976e:	e015      	b.n	800979c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f003 031c 	and.w	r3, r3, #28
 8009776:	2b18      	cmp	r3, #24
 8009778:	d101      	bne.n	800977e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800977a:	2302      	movs	r3, #2
 800977c:	e00e      	b.n	800979c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f003 031c 	and.w	r3, r3, #28
 8009784:	2b08      	cmp	r3, #8
 8009786:	d101      	bne.n	800978c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8009788:	2303      	movs	r3, #3
 800978a:	e007      	b.n	800979c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f003 031c 	and.w	r3, r3, #28
 8009792:	2b14      	cmp	r3, #20
 8009794:	d101      	bne.n	800979a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8009796:	2304      	movs	r3, #4
 8009798:	e000      	b.n	800979c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800979a:	2305      	movs	r3, #5
    }				
  }
}
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80097a8:	2003      	movs	r0, #3
 80097aa:	f000 ff98 	bl	800a6de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80097ae:	200f      	movs	r0, #15
 80097b0:	f7ff fce0 	bl	8009174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80097b4:	f7ff fa16 	bl	8008be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80097c0:	b480      	push	{r7}
 80097c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80097c4:	4b06      	ldr	r3, [pc, #24]	; (80097e0 <HAL_IncTick+0x20>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	461a      	mov	r2, r3
 80097ca:	4b06      	ldr	r3, [pc, #24]	; (80097e4 <HAL_IncTick+0x24>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4413      	add	r3, r2
 80097d0:	4a04      	ldr	r2, [pc, #16]	; (80097e4 <HAL_IncTick+0x24>)
 80097d2:	6013      	str	r3, [r2, #0]
}
 80097d4:	bf00      	nop
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	2000000c 	.word	0x2000000c
 80097e4:	20001a30 	.word	0x20001a30

080097e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80097e8:	b480      	push	{r7}
 80097ea:	af00      	add	r7, sp, #0
  return uwTick;
 80097ec:	4b03      	ldr	r3, [pc, #12]	; (80097fc <HAL_GetTick+0x14>)
 80097ee:	681b      	ldr	r3, [r3, #0]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	20001a30 	.word	0x20001a30

08009800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009808:	f7ff ffee 	bl	80097e8 <HAL_GetTick>
 800980c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009818:	d005      	beq.n	8009826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800981a:	4b0a      	ldr	r3, [pc, #40]	; (8009844 <HAL_Delay+0x44>)
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	4413      	add	r3, r2
 8009824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009826:	bf00      	nop
 8009828:	f7ff ffde 	bl	80097e8 <HAL_GetTick>
 800982c:	4602      	mov	r2, r0
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	429a      	cmp	r2, r3
 8009836:	d8f7      	bhi.n	8009828 <HAL_Delay+0x28>
  {
  }
}
 8009838:	bf00      	nop
 800983a:	bf00      	nop
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	2000000c 	.word	0x2000000c

08009848 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e0ed      	b.n	8009a36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d102      	bne.n	800986c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7ff f9e4 	bl	8008c34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f042 0201 	orr.w	r2, r2, #1
 800987a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800987c:	f7ff ffb4 	bl	80097e8 <HAL_GetTick>
 8009880:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009882:	e012      	b.n	80098aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009884:	f7ff ffb0 	bl	80097e8 <HAL_GetTick>
 8009888:	4602      	mov	r2, r0
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	2b0a      	cmp	r3, #10
 8009890:	d90b      	bls.n	80098aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2205      	movs	r2, #5
 80098a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e0c5      	b.n	8009a36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0e5      	beq.n	8009884 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f022 0202 	bic.w	r2, r2, #2
 80098c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80098c8:	f7ff ff8e 	bl	80097e8 <HAL_GetTick>
 80098cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80098ce:	e012      	b.n	80098f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80098d0:	f7ff ff8a 	bl	80097e8 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	2b0a      	cmp	r3, #10
 80098dc:	d90b      	bls.n	80098f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2205      	movs	r2, #5
 80098ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e09f      	b.n	8009a36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1e5      	bne.n	80098d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	7e1b      	ldrb	r3, [r3, #24]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d108      	bne.n	800991e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	e007      	b.n	800992e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800992c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	7e5b      	ldrb	r3, [r3, #25]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d108      	bne.n	8009948 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	e007      	b.n	8009958 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009956:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7e9b      	ldrb	r3, [r3, #26]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d108      	bne.n	8009972 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f042 0220 	orr.w	r2, r2, #32
 800996e:	601a      	str	r2, [r3, #0]
 8009970:	e007      	b.n	8009982 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f022 0220 	bic.w	r2, r2, #32
 8009980:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	7edb      	ldrb	r3, [r3, #27]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d108      	bne.n	800999c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 0210 	bic.w	r2, r2, #16
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	e007      	b.n	80099ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f042 0210 	orr.w	r2, r2, #16
 80099aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	7f1b      	ldrb	r3, [r3, #28]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d108      	bne.n	80099c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f042 0208 	orr.w	r2, r2, #8
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	e007      	b.n	80099d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f022 0208 	bic.w	r2, r2, #8
 80099d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	7f5b      	ldrb	r3, [r3, #29]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d108      	bne.n	80099f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f042 0204 	orr.w	r2, r2, #4
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	e007      	b.n	8009a00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 0204 	bic.w	r2, r2, #4
 80099fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689a      	ldr	r2, [r3, #8]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	ea42 0103 	orr.w	r1, r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	1e5a      	subs	r2, r3, #1
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	430a      	orrs	r2, r1
 8009a24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a56:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8009a58:	7cfb      	ldrb	r3, [r7, #19]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d003      	beq.n	8009a66 <HAL_CAN_ConfigFilter+0x26>
 8009a5e:	7cfb      	ldrb	r3, [r7, #19]
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	f040 80be 	bne.w	8009be2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8009a66:	4b65      	ldr	r3, [pc, #404]	; (8009bfc <HAL_CAN_ConfigFilter+0x1bc>)
 8009a68:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a70:	f043 0201 	orr.w	r2, r3, #1
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a94:	021b      	lsls	r3, r3, #8
 8009a96:	431a      	orrs	r2, r3
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	f003 031f 	and.w	r3, r3, #31
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	43db      	mvns	r3, r3
 8009ab8:	401a      	ands	r2, r3
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	69db      	ldr	r3, [r3, #28]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d123      	bne.n	8009b10 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	43db      	mvns	r3, r3
 8009ad2:	401a      	ands	r2, r3
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009aea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	3248      	adds	r2, #72	; 0x48
 8009af0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009b04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009b06:	6979      	ldr	r1, [r7, #20]
 8009b08:	3348      	adds	r3, #72	; 0x48
 8009b0a:	00db      	lsls	r3, r3, #3
 8009b0c:	440b      	add	r3, r1
 8009b0e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	69db      	ldr	r3, [r3, #28]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d122      	bne.n	8009b5e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	431a      	orrs	r2, r3
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009b38:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	3248      	adds	r2, #72	; 0x48
 8009b3e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009b52:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009b54:	6979      	ldr	r1, [r7, #20]
 8009b56:	3348      	adds	r3, #72	; 0x48
 8009b58:	00db      	lsls	r3, r3, #3
 8009b5a:	440b      	add	r3, r1
 8009b5c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d109      	bne.n	8009b7a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	43db      	mvns	r3, r3
 8009b70:	401a      	ands	r2, r3
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009b78:	e007      	b.n	8009b8a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	431a      	orrs	r2, r3
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d109      	bne.n	8009ba6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	43db      	mvns	r3, r3
 8009b9c:	401a      	ands	r2, r3
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009ba4:	e007      	b.n	8009bb6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	431a      	orrs	r2, r3
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	6a1b      	ldr	r3, [r3, #32]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d107      	bne.n	8009bce <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	431a      	orrs	r2, r3
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009bd4:	f023 0201 	bic.w	r2, r3, #1
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	e006      	b.n	8009bf0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
  }
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	371c      	adds	r7, #28
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	40006400 	.word	0x40006400

08009c00 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d12e      	bne.n	8009c72 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2202      	movs	r2, #2
 8009c18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f022 0201 	bic.w	r2, r2, #1
 8009c2a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009c2c:	f7ff fddc 	bl	80097e8 <HAL_GetTick>
 8009c30:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009c32:	e012      	b.n	8009c5a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009c34:	f7ff fdd8 	bl	80097e8 <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b0a      	cmp	r3, #10
 8009c40:	d90b      	bls.n	8009c5a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2205      	movs	r2, #5
 8009c52:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e012      	b.n	8009c80 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f003 0301 	and.w	r3, r3, #1
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1e5      	bne.n	8009c34 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e006      	b.n	8009c80 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
  }
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d133      	bne.n	8009d04 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f042 0201 	orr.w	r2, r2, #1
 8009caa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009cac:	f7ff fd9c 	bl	80097e8 <HAL_GetTick>
 8009cb0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009cb2:	e012      	b.n	8009cda <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009cb4:	f7ff fd98 	bl	80097e8 <HAL_GetTick>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	2b0a      	cmp	r3, #10
 8009cc0:	d90b      	bls.n	8009cda <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2205      	movs	r2, #5
 8009cd2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e01b      	b.n	8009d12 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0e5      	beq.n	8009cb4 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f022 0202 	bic.w	r2, r2, #2
 8009cf6:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	e006      	b.n	8009d12 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
  }
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b089      	sub	sp, #36	; 0x24
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	60f8      	str	r0, [r7, #12]
 8009d22:	60b9      	str	r1, [r7, #8]
 8009d24:	607a      	str	r2, [r7, #4]
 8009d26:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009d38:	7ffb      	ldrb	r3, [r7, #31]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d003      	beq.n	8009d46 <HAL_CAN_AddTxMessage+0x2c>
 8009d3e:	7ffb      	ldrb	r3, [r7, #31]
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	f040 80ad 	bne.w	8009ea0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10a      	bne.n	8009d66 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d105      	bne.n	8009d66 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 8095 	beq.w	8009e90 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	0e1b      	lsrs	r3, r3, #24
 8009d6a:	f003 0303 	and.w	r3, r3, #3
 8009d6e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009d70:	2201      	movs	r2, #1
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	409a      	lsls	r2, r3
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10d      	bne.n	8009d9e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009d8c:	68f9      	ldr	r1, [r7, #12]
 8009d8e:	6809      	ldr	r1, [r1, #0]
 8009d90:	431a      	orrs	r2, r3
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	3318      	adds	r3, #24
 8009d96:	011b      	lsls	r3, r3, #4
 8009d98:	440b      	add	r3, r1
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	e00f      	b.n	8009dbe <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009da8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009dae:	68f9      	ldr	r1, [r7, #12]
 8009db0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009db2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	3318      	adds	r3, #24
 8009db8:	011b      	lsls	r3, r3, #4
 8009dba:	440b      	add	r3, r1
 8009dbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6819      	ldr	r1, [r3, #0]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	691a      	ldr	r2, [r3, #16]
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	3318      	adds	r3, #24
 8009dca:	011b      	lsls	r3, r3, #4
 8009dcc:	440b      	add	r3, r1
 8009dce:	3304      	adds	r3, #4
 8009dd0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	7d1b      	ldrb	r3, [r3, #20]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d111      	bne.n	8009dfe <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	3318      	adds	r3, #24
 8009de2:	011b      	lsls	r3, r3, #4
 8009de4:	4413      	add	r3, r2
 8009de6:	3304      	adds	r3, #4
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	6811      	ldr	r1, [r2, #0]
 8009dee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	3318      	adds	r3, #24
 8009df6:	011b      	lsls	r3, r3, #4
 8009df8:	440b      	add	r3, r1
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	3307      	adds	r3, #7
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	061a      	lsls	r2, r3, #24
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	3306      	adds	r3, #6
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	041b      	lsls	r3, r3, #16
 8009e0e:	431a      	orrs	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	3305      	adds	r3, #5
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	021b      	lsls	r3, r3, #8
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	3204      	adds	r2, #4
 8009e1e:	7812      	ldrb	r2, [r2, #0]
 8009e20:	4610      	mov	r0, r2
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	6811      	ldr	r1, [r2, #0]
 8009e26:	ea43 0200 	orr.w	r2, r3, r0
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	011b      	lsls	r3, r3, #4
 8009e2e:	440b      	add	r3, r1
 8009e30:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8009e34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	3303      	adds	r3, #3
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	061a      	lsls	r2, r3, #24
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	3302      	adds	r3, #2
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	041b      	lsls	r3, r3, #16
 8009e46:	431a      	orrs	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	021b      	lsls	r3, r3, #8
 8009e50:	4313      	orrs	r3, r2
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	7812      	ldrb	r2, [r2, #0]
 8009e56:	4610      	mov	r0, r2
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	6811      	ldr	r1, [r2, #0]
 8009e5c:	ea43 0200 	orr.w	r2, r3, r0
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	011b      	lsls	r3, r3, #4
 8009e64:	440b      	add	r3, r1
 8009e66:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009e6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	3318      	adds	r3, #24
 8009e74:	011b      	lsls	r3, r3, #4
 8009e76:	4413      	add	r3, r2
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	6811      	ldr	r1, [r2, #0]
 8009e7e:	f043 0201 	orr.w	r2, r3, #1
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	3318      	adds	r3, #24
 8009e86:	011b      	lsls	r3, r3, #4
 8009e88:	440b      	add	r3, r1
 8009e8a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	e00e      	b.n	8009eae <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e006      	b.n	8009eae <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
  }
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3724      	adds	r7, #36	; 0x24
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009eba:	b480      	push	{r7}
 8009ebc:	b087      	sub	sp, #28
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	60f8      	str	r0, [r7, #12]
 8009ec2:	60b9      	str	r1, [r7, #8]
 8009ec4:	607a      	str	r2, [r7, #4]
 8009ec6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ece:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009ed0:	7dfb      	ldrb	r3, [r7, #23]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d003      	beq.n	8009ede <HAL_CAN_GetRxMessage+0x24>
 8009ed6:	7dfb      	ldrb	r3, [r7, #23]
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	f040 80f3 	bne.w	800a0c4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10e      	bne.n	8009f02 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	f003 0303 	and.w	r3, r3, #3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d116      	bne.n	8009f20 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e0e7      	b.n	800a0d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	f003 0303 	and.w	r3, r3, #3
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d107      	bne.n	8009f20 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e0d8      	b.n	800a0d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	331b      	adds	r3, #27
 8009f28:	011b      	lsls	r3, r3, #4
 8009f2a:	4413      	add	r3, r2
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 0204 	and.w	r2, r3, #4
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10c      	bne.n	8009f58 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	331b      	adds	r3, #27
 8009f46:	011b      	lsls	r3, r3, #4
 8009f48:	4413      	add	r3, r2
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	0d5b      	lsrs	r3, r3, #21
 8009f4e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	601a      	str	r2, [r3, #0]
 8009f56:	e00b      	b.n	8009f70 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	331b      	adds	r3, #27
 8009f60:	011b      	lsls	r3, r3, #4
 8009f62:	4413      	add	r3, r2
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	08db      	lsrs	r3, r3, #3
 8009f68:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	331b      	adds	r3, #27
 8009f78:	011b      	lsls	r3, r3, #4
 8009f7a:	4413      	add	r3, r2
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f003 0202 	and.w	r2, r3, #2
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	331b      	adds	r3, #27
 8009f8e:	011b      	lsls	r3, r3, #4
 8009f90:	4413      	add	r3, r2
 8009f92:	3304      	adds	r3, #4
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 020f 	and.w	r2, r3, #15
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	331b      	adds	r3, #27
 8009fa6:	011b      	lsls	r3, r3, #4
 8009fa8:	4413      	add	r3, r2
 8009faa:	3304      	adds	r3, #4
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	0a1b      	lsrs	r3, r3, #8
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	331b      	adds	r3, #27
 8009fbe:	011b      	lsls	r3, r3, #4
 8009fc0:	4413      	add	r3, r2
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	0c1b      	lsrs	r3, r3, #16
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	011b      	lsls	r3, r3, #4
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	b2da      	uxtb	r2, r3
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	0a1a      	lsrs	r2, r3, #8
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	b2d2      	uxtb	r2, r2
 8009ffc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	011b      	lsls	r3, r3, #4
 800a006:	4413      	add	r3, r2
 800a008:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	0c1a      	lsrs	r2, r3, #16
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	3302      	adds	r3, #2
 800a014:	b2d2      	uxtb	r2, r2
 800a016:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	011b      	lsls	r3, r3, #4
 800a020:	4413      	add	r3, r2
 800a022:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	0e1a      	lsrs	r2, r3, #24
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	3303      	adds	r3, #3
 800a02e:	b2d2      	uxtb	r2, r2
 800a030:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	011b      	lsls	r3, r3, #4
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	3304      	adds	r3, #4
 800a046:	b2d2      	uxtb	r2, r2
 800a048:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	011b      	lsls	r3, r3, #4
 800a052:	4413      	add	r3, r2
 800a054:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	0a1a      	lsrs	r2, r3, #8
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	3305      	adds	r3, #5
 800a060:	b2d2      	uxtb	r2, r2
 800a062:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	011b      	lsls	r3, r3, #4
 800a06c:	4413      	add	r3, r2
 800a06e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	0c1a      	lsrs	r2, r3, #16
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	3306      	adds	r3, #6
 800a07a:	b2d2      	uxtb	r2, r2
 800a07c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	011b      	lsls	r3, r3, #4
 800a086:	4413      	add	r3, r2
 800a088:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	0e1a      	lsrs	r2, r3, #24
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	3307      	adds	r3, #7
 800a094:	b2d2      	uxtb	r2, r2
 800a096:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d108      	bne.n	800a0b0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68da      	ldr	r2, [r3, #12]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f042 0220 	orr.w	r2, r2, #32
 800a0ac:	60da      	str	r2, [r3, #12]
 800a0ae:	e007      	b.n	800a0c0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	691a      	ldr	r2, [r3, #16]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f042 0220 	orr.w	r2, r2, #32
 800a0be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	e006      	b.n	800a0d2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
  }
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	371c      	adds	r7, #28
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b08a      	sub	sp, #40	; 0x28
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	2b00      	cmp	r3, #0
 800a122:	d07c      	beq.n	800a21e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	f003 0301 	and.w	r3, r3, #1
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d023      	beq.n	800a176 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2201      	movs	r2, #1
 800a134:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	f003 0302 	and.w	r3, r3, #2
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d003      	beq.n	800a148 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f983 	bl	800a44c <HAL_CAN_TxMailbox0CompleteCallback>
 800a146:	e016      	b.n	800a176 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	f003 0304 	and.w	r3, r3, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d004      	beq.n	800a15c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a158:	627b      	str	r3, [r7, #36]	; 0x24
 800a15a:	e00c      	b.n	800a176 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	f003 0308 	and.w	r3, r3, #8
 800a162:	2b00      	cmp	r3, #0
 800a164:	d004      	beq.n	800a170 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a16c:	627b      	str	r3, [r7, #36]	; 0x24
 800a16e:	e002      	b.n	800a176 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f989 	bl	800a488 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d024      	beq.n	800a1ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a188:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a190:	2b00      	cmp	r3, #0
 800a192:	d003      	beq.n	800a19c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 f963 	bl	800a460 <HAL_CAN_TxMailbox1CompleteCallback>
 800a19a:	e016      	b.n	800a1ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d004      	beq.n	800a1b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a1ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ae:	e00c      	b.n	800a1ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d004      	beq.n	800a1c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a1c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a1c2:	e002      	b.n	800a1ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f969 	bl	800a49c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d024      	beq.n	800a21e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a1dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d003      	beq.n	800a1f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f943 	bl	800a474 <HAL_CAN_TxMailbox2CompleteCallback>
 800a1ee:	e016      	b.n	800a21e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d004      	beq.n	800a204 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a200:	627b      	str	r3, [r7, #36]	; 0x24
 800a202:	e00c      	b.n	800a21e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d004      	beq.n	800a218 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a214:	627b      	str	r3, [r7, #36]	; 0x24
 800a216:	e002      	b.n	800a21e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 f949 	bl	800a4b0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	f003 0308 	and.w	r3, r3, #8
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00c      	beq.n	800a242 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	f003 0310 	and.w	r3, r3, #16
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d007      	beq.n	800a242 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a238:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2210      	movs	r2, #16
 800a240:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800a242:	6a3b      	ldr	r3, [r7, #32]
 800a244:	f003 0304 	and.w	r3, r3, #4
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00b      	beq.n	800a264 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	f003 0308 	and.w	r3, r3, #8
 800a252:	2b00      	cmp	r3, #0
 800a254:	d006      	beq.n	800a264 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2208      	movs	r2, #8
 800a25c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f930 	bl	800a4c4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	f003 0302 	and.w	r3, r3, #2
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d009      	beq.n	800a282 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	f003 0303 	and.w	r3, r3, #3
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7fe fae2 	bl	8008846 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800a282:	6a3b      	ldr	r3, [r7, #32]
 800a284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00c      	beq.n	800a2a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f003 0310 	and.w	r3, r3, #16
 800a292:	2b00      	cmp	r3, #0
 800a294:	d007      	beq.n	800a2a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a29c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2210      	movs	r2, #16
 800a2a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	f003 0320 	and.w	r3, r3, #32
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00b      	beq.n	800a2c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f003 0308 	and.w	r3, r3, #8
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d006      	beq.n	800a2c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2208      	movs	r2, #8
 800a2c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 f912 	bl	800a4ec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800a2c8:	6a3b      	ldr	r3, [r7, #32]
 800a2ca:	f003 0310 	and.w	r3, r3, #16
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d009      	beq.n	800a2e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	f003 0303 	and.w	r3, r3, #3
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d002      	beq.n	800a2e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 f8f9 	bl	800a4d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00b      	beq.n	800a308 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	f003 0310 	and.w	r3, r3, #16
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d006      	beq.n	800a308 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2210      	movs	r2, #16
 800a300:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f8fc 	bl	800a500 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00b      	beq.n	800a32a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	f003 0308 	and.w	r3, r3, #8
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d006      	beq.n	800a32a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2208      	movs	r2, #8
 800a322:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f8f5 	bl	800a514 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800a32a:	6a3b      	ldr	r3, [r7, #32]
 800a32c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d07b      	beq.n	800a42c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	f003 0304 	and.w	r3, r3, #4
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d072      	beq.n	800a424 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a344:	2b00      	cmp	r3, #0
 800a346:	d008      	beq.n	800a35a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800a352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a354:	f043 0301 	orr.w	r3, r3, #1
 800a358:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a360:	2b00      	cmp	r3, #0
 800a362:	d008      	beq.n	800a376 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	f043 0302 	orr.w	r3, r3, #2
 800a374:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a376:	6a3b      	ldr	r3, [r7, #32]
 800a378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d008      	beq.n	800a392 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	f043 0304 	orr.w	r3, r3, #4
 800a390:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d043      	beq.n	800a424 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d03e      	beq.n	800a424 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3ac:	2b60      	cmp	r3, #96	; 0x60
 800a3ae:	d02b      	beq.n	800a408 <HAL_CAN_IRQHandler+0x32a>
 800a3b0:	2b60      	cmp	r3, #96	; 0x60
 800a3b2:	d82e      	bhi.n	800a412 <HAL_CAN_IRQHandler+0x334>
 800a3b4:	2b50      	cmp	r3, #80	; 0x50
 800a3b6:	d022      	beq.n	800a3fe <HAL_CAN_IRQHandler+0x320>
 800a3b8:	2b50      	cmp	r3, #80	; 0x50
 800a3ba:	d82a      	bhi.n	800a412 <HAL_CAN_IRQHandler+0x334>
 800a3bc:	2b40      	cmp	r3, #64	; 0x40
 800a3be:	d019      	beq.n	800a3f4 <HAL_CAN_IRQHandler+0x316>
 800a3c0:	2b40      	cmp	r3, #64	; 0x40
 800a3c2:	d826      	bhi.n	800a412 <HAL_CAN_IRQHandler+0x334>
 800a3c4:	2b30      	cmp	r3, #48	; 0x30
 800a3c6:	d010      	beq.n	800a3ea <HAL_CAN_IRQHandler+0x30c>
 800a3c8:	2b30      	cmp	r3, #48	; 0x30
 800a3ca:	d822      	bhi.n	800a412 <HAL_CAN_IRQHandler+0x334>
 800a3cc:	2b10      	cmp	r3, #16
 800a3ce:	d002      	beq.n	800a3d6 <HAL_CAN_IRQHandler+0x2f8>
 800a3d0:	2b20      	cmp	r3, #32
 800a3d2:	d005      	beq.n	800a3e0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800a3d4:	e01d      	b.n	800a412 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	f043 0308 	orr.w	r3, r3, #8
 800a3dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a3de:	e019      	b.n	800a414 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	f043 0310 	orr.w	r3, r3, #16
 800a3e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a3e8:	e014      	b.n	800a414 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	f043 0320 	orr.w	r3, r3, #32
 800a3f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a3f2:	e00f      	b.n	800a414 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a3fc:	e00a      	b.n	800a414 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a406:	e005      	b.n	800a414 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a40e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a410:	e000      	b.n	800a414 <HAL_CAN_IRQHandler+0x336>
            break;
 800a412:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	699a      	ldr	r2, [r3, #24]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a422:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2204      	movs	r2, #4
 800a42a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d008      	beq.n	800a444 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	431a      	orrs	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f872 	bl	800a528 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a444:	bf00      	nop
 800a446:	3728      	adds	r7, #40	; 0x28
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a508:	bf00      	nop
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a51c:	bf00      	nop
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <__NVIC_SetPriorityGrouping>:
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f003 0307 	and.w	r3, r3, #7
 800a54a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a54c:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <__NVIC_SetPriorityGrouping+0x40>)
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a558:	4013      	ands	r3, r2
 800a55a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a564:	4b06      	ldr	r3, [pc, #24]	; (800a580 <__NVIC_SetPriorityGrouping+0x44>)
 800a566:	4313      	orrs	r3, r2
 800a568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a56a:	4a04      	ldr	r2, [pc, #16]	; (800a57c <__NVIC_SetPriorityGrouping+0x40>)
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	60d3      	str	r3, [r2, #12]
}
 800a570:	bf00      	nop
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	e000ed00 	.word	0xe000ed00
 800a580:	05fa0000 	.word	0x05fa0000

0800a584 <__NVIC_GetPriorityGrouping>:
{
 800a584:	b480      	push	{r7}
 800a586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a588:	4b04      	ldr	r3, [pc, #16]	; (800a59c <__NVIC_GetPriorityGrouping+0x18>)
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	0a1b      	lsrs	r3, r3, #8
 800a58e:	f003 0307 	and.w	r3, r3, #7
}
 800a592:	4618      	mov	r0, r3
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	e000ed00 	.word	0xe000ed00

0800a5a0 <__NVIC_EnableIRQ>:
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	db0b      	blt.n	800a5ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a5b2:	79fb      	ldrb	r3, [r7, #7]
 800a5b4:	f003 021f 	and.w	r2, r3, #31
 800a5b8:	4907      	ldr	r1, [pc, #28]	; (800a5d8 <__NVIC_EnableIRQ+0x38>)
 800a5ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5be:	095b      	lsrs	r3, r3, #5
 800a5c0:	2001      	movs	r0, #1
 800a5c2:	fa00 f202 	lsl.w	r2, r0, r2
 800a5c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a5ca:	bf00      	nop
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	e000e100 	.word	0xe000e100

0800a5dc <__NVIC_DisableIRQ>:
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	db12      	blt.n	800a614 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a5ee:	79fb      	ldrb	r3, [r7, #7]
 800a5f0:	f003 021f 	and.w	r2, r3, #31
 800a5f4:	490a      	ldr	r1, [pc, #40]	; (800a620 <__NVIC_DisableIRQ+0x44>)
 800a5f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5fa:	095b      	lsrs	r3, r3, #5
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	fa00 f202 	lsl.w	r2, r0, r2
 800a602:	3320      	adds	r3, #32
 800a604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a608:	f3bf 8f4f 	dsb	sy
}
 800a60c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a60e:	f3bf 8f6f 	isb	sy
}
 800a612:	bf00      	nop
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr
 800a620:	e000e100 	.word	0xe000e100

0800a624 <__NVIC_SetPriority>:
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	4603      	mov	r3, r0
 800a62c:	6039      	str	r1, [r7, #0]
 800a62e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a634:	2b00      	cmp	r3, #0
 800a636:	db0a      	blt.n	800a64e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	490c      	ldr	r1, [pc, #48]	; (800a670 <__NVIC_SetPriority+0x4c>)
 800a63e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a642:	0112      	lsls	r2, r2, #4
 800a644:	b2d2      	uxtb	r2, r2
 800a646:	440b      	add	r3, r1
 800a648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a64c:	e00a      	b.n	800a664 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	b2da      	uxtb	r2, r3
 800a652:	4908      	ldr	r1, [pc, #32]	; (800a674 <__NVIC_SetPriority+0x50>)
 800a654:	79fb      	ldrb	r3, [r7, #7]
 800a656:	f003 030f 	and.w	r3, r3, #15
 800a65a:	3b04      	subs	r3, #4
 800a65c:	0112      	lsls	r2, r2, #4
 800a65e:	b2d2      	uxtb	r2, r2
 800a660:	440b      	add	r3, r1
 800a662:	761a      	strb	r2, [r3, #24]
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	e000e100 	.word	0xe000e100
 800a674:	e000ed00 	.word	0xe000ed00

0800a678 <NVIC_EncodePriority>:
{
 800a678:	b480      	push	{r7}
 800a67a:	b089      	sub	sp, #36	; 0x24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f003 0307 	and.w	r3, r3, #7
 800a68a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	f1c3 0307 	rsb	r3, r3, #7
 800a692:	2b04      	cmp	r3, #4
 800a694:	bf28      	it	cs
 800a696:	2304      	movcs	r3, #4
 800a698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	3304      	adds	r3, #4
 800a69e:	2b06      	cmp	r3, #6
 800a6a0:	d902      	bls.n	800a6a8 <NVIC_EncodePriority+0x30>
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	3b03      	subs	r3, #3
 800a6a6:	e000      	b.n	800a6aa <NVIC_EncodePriority+0x32>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b6:	43da      	mvns	r2, r3
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	401a      	ands	r2, r3
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a6c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ca:	43d9      	mvns	r1, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6d0:	4313      	orrs	r3, r2
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3724      	adds	r7, #36	; 0x24
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b082      	sub	sp, #8
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7ff ff28 	bl	800a53c <__NVIC_SetPriorityGrouping>
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a702:	2300      	movs	r3, #0
 800a704:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a706:	f7ff ff3d 	bl	800a584 <__NVIC_GetPriorityGrouping>
 800a70a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	68b9      	ldr	r1, [r7, #8]
 800a710:	6978      	ldr	r0, [r7, #20]
 800a712:	f7ff ffb1 	bl	800a678 <NVIC_EncodePriority>
 800a716:	4602      	mov	r2, r0
 800a718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a71c:	4611      	mov	r1, r2
 800a71e:	4618      	mov	r0, r3
 800a720:	f7ff ff80 	bl	800a624 <__NVIC_SetPriority>
}
 800a724:	bf00      	nop
 800a726:	3718      	adds	r7, #24
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff ff30 	bl	800a5a0 <__NVIC_EnableIRQ>
}
 800a740:	bf00      	nop
 800a742:	3708      	adds	r7, #8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	4603      	mov	r3, r0
 800a750:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff ff40 	bl	800a5dc <__NVIC_DisableIRQ>
}
 800a75c:	bf00      	nop
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a770:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a772:	f7ff f839 	bl	80097e8 <HAL_GetTick>
 800a776:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	2b02      	cmp	r3, #2
 800a782:	d008      	beq.n	800a796 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2280      	movs	r2, #128	; 0x80
 800a788:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	e052      	b.n	800a83c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f022 0216 	bic.w	r2, r2, #22
 800a7a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	695a      	ldr	r2, [r3, #20]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d103      	bne.n	800a7c6 <HAL_DMA_Abort+0x62>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d007      	beq.n	800a7d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f022 0208 	bic.w	r2, r2, #8
 800a7d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f022 0201 	bic.w	r2, r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a7e6:	e013      	b.n	800a810 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a7e8:	f7fe fffe 	bl	80097e8 <HAL_GetTick>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	2b05      	cmp	r3, #5
 800a7f4:	d90c      	bls.n	800a810 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2220      	movs	r2, #32
 800a7fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2203      	movs	r2, #3
 800a800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800a80c:	2303      	movs	r3, #3
 800a80e:	e015      	b.n	800a83c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1e4      	bne.n	800a7e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a822:	223f      	movs	r2, #63	; 0x3f
 800a824:	409a      	lsls	r2, r3
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a852:	b2db      	uxtb	r3, r3
 800a854:	2b02      	cmp	r3, #2
 800a856:	d004      	beq.n	800a862 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2280      	movs	r2, #128	; 0x80
 800a85c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e00c      	b.n	800a87c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2205      	movs	r2, #5
 800a866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f022 0201 	bic.w	r2, r2, #1
 800a878:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d101      	bne.n	800a89a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	e06a      	b.n	800a970 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d106      	bne.n	800a8b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2223      	movs	r2, #35	; 0x23
 800a8a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f005 fa89 	bl	800fdc4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8b2:	4b31      	ldr	r3, [pc, #196]	; (800a978 <HAL_ETH_Init+0xf0>)
 800a8b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8b6:	4a30      	ldr	r2, [pc, #192]	; (800a978 <HAL_ETH_Init+0xf0>)
 800a8b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8bc:	6453      	str	r3, [r2, #68]	; 0x44
 800a8be:	4b2e      	ldr	r3, [pc, #184]	; (800a978 <HAL_ETH_Init+0xf0>)
 800a8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8c6:	60bb      	str	r3, [r7, #8]
 800a8c8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a8ca:	4b2c      	ldr	r3, [pc, #176]	; (800a97c <HAL_ETH_Init+0xf4>)
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	4a2b      	ldr	r2, [pc, #172]	; (800a97c <HAL_ETH_Init+0xf4>)
 800a8d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a8d4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800a8d6:	4b29      	ldr	r3, [pc, #164]	; (800a97c <HAL_ETH_Init+0xf4>)
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	4927      	ldr	r1, [pc, #156]	; (800a97c <HAL_ETH_Init+0xf4>)
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800a8e4:	4b25      	ldr	r3, [pc, #148]	; (800a97c <HAL_ETH_Init+0xf4>)
 800a8e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	6812      	ldr	r2, [r2, #0]
 800a8f6:	f043 0301 	orr.w	r3, r3, #1
 800a8fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a900:	f7fe ff72 	bl	80097e8 <HAL_GetTick>
 800a904:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800a906:	e011      	b.n	800a92c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800a908:	f7fe ff6e 	bl	80097e8 <HAL_GetTick>
 800a90c:	4602      	mov	r2, r0
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a916:	d909      	bls.n	800a92c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2204      	movs	r2, #4
 800a91c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	22e0      	movs	r2, #224	; 0xe0
 800a924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	e021      	b.n	800a970 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1e4      	bne.n	800a908 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 ff2c 	bl	800b79c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 ffd3 	bl	800b8f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f001 f829 	bl	800b9a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	461a      	mov	r2, r3
 800a956:	2100      	movs	r1, #0
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 ff91 	bl	800b880 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2210      	movs	r2, #16
 800a96a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	40023800 	.word	0x40023800
 800a97c:	40013800 	.word	0x40013800

0800a980 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a98e:	2b10      	cmp	r3, #16
 800a990:	d150      	bne.n	800aa34 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2223      	movs	r2, #35	; 0x23
 800a996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2204      	movs	r2, #4
 800a99e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f9fb 	bl	800ad9c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f042 0208 	orr.w	r2, r2, #8
 800a9b4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a9be:	2001      	movs	r0, #1
 800a9c0:	f7fe ff1e 	bl	8009800 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f042 0204 	orr.w	r2, r2, #4
 800a9da:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a9e4:	2001      	movs	r0, #1
 800a9e6:	f7fe ff0b 	bl	8009800 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fd73 	bl	800b4de <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	6812      	ldr	r2, [r2, #0]
 800aa06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800aa0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa0e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	6812      	ldr	r2, [r2, #0]
 800aa1e:	f043 0302 	orr.w	r3, r3, #2
 800aa22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa26:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2223      	movs	r2, #35	; 0x23
 800aa2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	e000      	b.n	800aa36 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
  }
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
	...

0800aa40 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa4e:	2b10      	cmp	r3, #16
 800aa50:	d17b      	bne.n	800ab4a <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2223      	movs	r2, #35	; 0x23
 800aa56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800aa6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	4b35      	ldr	r3, [pc, #212]	; (800ab54 <HAL_ETH_Start_IT+0x114>)
 800aa7e:	430b      	orrs	r3, r1
 800aa80:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800aa94:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2204      	movs	r2, #4
 800aa9c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f97c 	bl	800ad9c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f042 0208 	orr.w	r2, r2, #8
 800aab2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800aabc:	2001      	movs	r0, #1
 800aabe:	f7fe fe9f 	bl	8009800 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f042 0204 	orr.w	r2, r2, #4
 800aad8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800aae2:	2001      	movs	r0, #1
 800aae4:	f7fe fe8c 	bl	8009800 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fcf4 	bl	800b4de <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	6812      	ldr	r2, [r2, #0]
 800ab04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ab08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab0c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	6812      	ldr	r2, [r2, #0]
 800ab1c:	f043 0302 	orr.w	r3, r3, #2
 800ab20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab24:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab2e:	69d9      	ldr	r1, [r3, #28]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	4b08      	ldr	r3, [pc, #32]	; (800ab58 <HAL_ETH_Start_IT+0x118>)
 800ab36:	430b      	orrs	r3, r1
 800ab38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab3c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2223      	movs	r2, #35	; 0x23
 800ab42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	e000      	b.n	800ab4c <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
  }
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	00020060 	.word	0x00020060
 800ab58:	0001a0c1 	.word	0x0001a0c1

0800ab5c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d109      	bne.n	800ab80 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab72:	f043 0201 	orr.w	r2, r3, #1
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e045      	b.n	800ac0c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab86:	2b23      	cmp	r3, #35	; 0x23
 800ab88:	d13f      	bne.n	800ac0a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800ab92:	2201      	movs	r2, #1
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 ff70 	bl	800ba7c <ETH_Prepare_Tx_Descriptors>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d009      	beq.n	800abb6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aba8:	f043 0202 	orr.w	r2, r3, #2
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e02a      	b.n	800ac0c <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800abb6:	f3bf 8f4f 	dsb	sy
}
 800abba:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc0:	1c5a      	adds	r2, r3, #1
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	629a      	str	r2, [r3, #40]	; 0x28
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abca:	2b03      	cmp	r3, #3
 800abcc:	d904      	bls.n	800abd8 <HAL_ETH_Transmit_IT+0x7c>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd2:	1f1a      	subs	r2, r3, #4
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abe0:	695b      	ldr	r3, [r3, #20]
 800abe2:	f003 0304 	and.w	r3, r3, #4
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00d      	beq.n	800ac06 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf2:	461a      	mov	r2, r3
 800abf4:	2304      	movs	r3, #4
 800abf6:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac00:	461a      	mov	r2, r3
 800ac02:	2300      	movs	r3, #0
 800ac04:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800ac06:	2300      	movs	r3, #0
 800ac08:	e000      	b.n	800ac0c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
  }
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b088      	sub	sp, #32
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800ac22:	2300      	movs	r3, #0
 800ac24:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d109      	bne.n	800ac40 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac32:	f043 0201 	orr.w	r2, r3, #1
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e0a8      	b.n	800ad92 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac46:	2b23      	cmp	r3, #35	; 0x23
 800ac48:	d001      	beq.n	800ac4e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e0a1      	b.n	800ad92 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac52:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	69fa      	ldr	r2, [r7, #28]
 800ac58:	3212      	adds	r2, #18
 800ac5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac5e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac64:	f1c3 0304 	rsb	r3, r3, #4
 800ac68:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800ac6a:	e06a      	b.n	800ad42 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d007      	beq.n	800ac88 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	699a      	ldr	r2, [r3, #24]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	69da      	ldr	r2, [r3, #28]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d103      	bne.n	800ac9c <HAL_ETH_ReadData+0x88>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d040      	beq.n	800ad1e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d005      	beq.n	800acb4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	695b      	ldr	r3, [r3, #20]
 800acb8:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00c      	beq.n	800ace0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	0c1b      	lsrs	r3, r3, #16
 800accc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800acd0:	3b04      	subs	r3, #4
 800acd2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800acdc:	2301      	movs	r3, #1
 800acde:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	689a      	ldr	r2, [r3, #8]
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800acf8:	461a      	mov	r2, r3
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	f005 fa2b 	bl	8010158 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad06:	1c5a      	adds	r2, r3, #1
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	441a      	add	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	3301      	adds	r3, #1
 800ad22:	61fb      	str	r3, [r7, #28]
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	2b03      	cmp	r3, #3
 800ad28:	d902      	bls.n	800ad30 <HAL_ETH_ReadData+0x11c>
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	3b04      	subs	r3, #4
 800ad2e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	69fa      	ldr	r2, [r7, #28]
 800ad34:	3212      	adds	r2, #18
 800ad36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad3a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	db06      	blt.n	800ad58 <HAL_ETH_ReadData+0x144>
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d202      	bcs.n	800ad58 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d089      	beq.n	800ac6c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	441a      	add	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d002      	beq.n	800ad72 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f815 	bl	800ad9c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	69fa      	ldr	r2, [r7, #28]
 800ad76:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d108      	bne.n	800ad90 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	e000      	b.n	800ad92 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3720      	adds	r7, #32
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
	...

0800ad9c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b088      	sub	sp, #32
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800ada4:	2300      	movs	r3, #0
 800ada6:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800ada8:	2301      	movs	r3, #1
 800adaa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adb0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	69fa      	ldr	r2, [r7, #28]
 800adb6:	3212      	adds	r2, #18
 800adb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adbc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adc2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800adc4:	e040      	b.n	800ae48 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d112      	bne.n	800adf4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800adce:	f107 030c 	add.w	r3, r7, #12
 800add2:	4618      	mov	r0, r3
 800add4:	f005 f990 	bl	80100f8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d102      	bne.n	800ade4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800adde:	2300      	movs	r3, #0
 800ade0:	74fb      	strb	r3, [r7, #19]
 800ade2:	e007      	b.n	800adf4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	461a      	mov	r2, r3
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	461a      	mov	r2, r3
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800adf4:	7cfb      	ldrb	r3, [r7, #19]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d026      	beq.n	800ae48 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d103      	bne.n	800ae0a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	4a1e      	ldr	r2, [pc, #120]	; (800ae80 <ETH_UpdateDescriptor+0xe4>)
 800ae06:	605a      	str	r2, [r3, #4]
 800ae08:	e003      	b.n	800ae12 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800ae10:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800ae12:	f3bf 8f5f 	dmb	sy
}
 800ae16:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	3301      	adds	r3, #1
 800ae28:	61fb      	str	r3, [r7, #28]
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	2b03      	cmp	r3, #3
 800ae2e:	d902      	bls.n	800ae36 <ETH_UpdateDescriptor+0x9a>
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	3b04      	subs	r3, #4
 800ae34:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	69fa      	ldr	r2, [r7, #28]
 800ae3a:	3212      	adds	r2, #18
 800ae3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae40:	617b      	str	r3, [r7, #20]
      desccount--;
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	3b01      	subs	r3, #1
 800ae46:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d002      	beq.n	800ae54 <ETH_UpdateDescriptor+0xb8>
 800ae4e:	7cfb      	ldrb	r3, [r7, #19]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1b8      	bne.n	800adc6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae58:	69ba      	ldr	r2, [r7, #24]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d00c      	beq.n	800ae78 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae66:	461a      	mov	r2, r3
 800ae68:	2300      	movs	r3, #0
 800ae6a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	69fa      	ldr	r2, [r7, #28]
 800ae70:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	69ba      	ldr	r2, [r7, #24]
 800ae76:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800ae78:	bf00      	nop
 800ae7a:	3720      	adds	r7, #32
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	800045f8 	.word	0x800045f8

0800ae84 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	3318      	adds	r3, #24
 800ae90:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae96:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800aea2:	e03f      	b.n	800af24 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800aea4:	2301      	movs	r3, #1
 800aea6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	3304      	adds	r3, #4
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4413      	add	r3, r2
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d106      	bne.n	800aecc <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	3301      	adds	r3, #1
 800aec2:	f003 0303 	and.w	r3, r3, #3
 800aec6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800aec8:	2300      	movs	r3, #0
 800aeca:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800aecc:	7bbb      	ldrb	r3, [r7, #14]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d028      	beq.n	800af24 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	68d9      	ldr	r1, [r3, #12]
 800aed6:	693a      	ldr	r2, [r7, #16]
 800aed8:	4613      	mov	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	00db      	lsls	r3, r3, #3
 800aee0:	440b      	add	r3, r1
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	db1b      	blt.n	800af20 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	3304      	adds	r3, #4
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	4413      	add	r3, r2
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	4618      	mov	r0, r3
 800aef6:	f005 f971 	bl	80101dc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	3304      	adds	r3, #4
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	2200      	movs	r2, #0
 800af06:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	3301      	adds	r3, #1
 800af0c:	f003 0303 	and.w	r3, r3, #3
 800af10:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	697a      	ldr	r2, [r7, #20]
 800af16:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	693a      	ldr	r2, [r7, #16]
 800af1c:	62da      	str	r2, [r3, #44]	; 0x2c
 800af1e:	e001      	b.n	800af24 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800af20:	2300      	movs	r3, #0
 800af22:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d002      	beq.n	800af30 <HAL_ETH_ReleaseTxPacket+0xac>
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1b9      	bne.n	800aea4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3718      	adds	r7, #24
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
	...

0800af3c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af4c:	695b      	ldr	r3, [r3, #20]
 800af4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af52:	2b40      	cmp	r3, #64	; 0x40
 800af54:	d112      	bne.n	800af7c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af5e:	69db      	ldr	r3, [r3, #28]
 800af60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af64:	2b40      	cmp	r3, #64	; 0x40
 800af66:	d109      	bne.n	800af7c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af70:	461a      	mov	r2, r3
 800af72:	4b50      	ldr	r3, [pc, #320]	; (800b0b4 <HAL_ETH_IRQHandler+0x178>)
 800af74:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f004 fc88 	bl	800f88c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af84:	695b      	ldr	r3, [r3, #20]
 800af86:	f003 0301 	and.w	r3, r3, #1
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d113      	bne.n	800afb6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af96:	69db      	ldr	r3, [r3, #28]
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d10a      	bne.n	800afb6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afa8:	461a      	mov	r2, r3
 800afaa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800afae:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f004 fc7b 	bl	800f8ac <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afbe:	695b      	ldr	r3, [r3, #20]
 800afc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800afc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afc8:	d14c      	bne.n	800b064 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afd2:	69db      	ldr	r3, [r3, #28]
 800afd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800afd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afdc:	d142      	bne.n	800b064 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afe4:	f043 0208 	orr.w	r2, r3, #8
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aff6:	695b      	ldr	r3, [r3, #20]
 800aff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800affc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b000:	d11a      	bne.n	800b038 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b00a:	695a      	ldr	r2, [r3, #20]
 800b00c:	4b2a      	ldr	r3, [pc, #168]	; (800b0b8 <HAL_ETH_IRQHandler+0x17c>)
 800b00e:	4013      	ands	r3, r2
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b01e:	69db      	ldr	r3, [r3, #28]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	6812      	ldr	r2, [r2, #0]
 800b024:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800b028:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b02c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	22e0      	movs	r2, #224	; 0xe0
 800b032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b036:	e012      	b.n	800b05e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b040:	695a      	ldr	r2, [r3, #20]
 800b042:	f248 6380 	movw	r3, #34432	; 0x8680
 800b046:	4013      	ands	r3, r2
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b056:	461a      	mov	r2, r3
 800b058:	f248 6380 	movw	r3, #34432	; 0x8680
 800b05c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f004 fc34 	bl	800f8cc <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b06a:	f003 0308 	and.w	r3, r3, #8
 800b06e:	2b08      	cmp	r3, #8
 800b070:	d10e      	bne.n	800b090 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b078:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f81c 	bl	800b0c0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800b090:	4b0a      	ldr	r3, [pc, #40]	; (800b0bc <HAL_ETH_IRQHandler+0x180>)
 800b092:	695b      	ldr	r3, [r3, #20]
 800b094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d006      	beq.n	800b0aa <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800b09c:	4b07      	ldr	r3, [pc, #28]	; (800b0bc <HAL_ETH_IRQHandler+0x180>)
 800b09e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b0a2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f815 	bl	800b0d4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800b0aa:	bf00      	nop
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	00010040 	.word	0x00010040
 800b0b8:	007e2000 	.word	0x007e2000
 800b0bc:	40013c00 	.word	0x40013c00

0800b0c0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800b0c8:	bf00      	nop
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
 800b0f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f003 031c 	and.w	r3, r3, #28
 800b104:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	02db      	lsls	r3, r3, #11
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	4313      	orrs	r3, r2
 800b110:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	019b      	lsls	r3, r3, #6
 800b116:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800b11a:	697a      	ldr	r2, [r7, #20]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	f023 0302 	bic.w	r3, r3, #2
 800b126:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	f043 0301 	orr.w	r3, r3, #1
 800b12e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	697a      	ldr	r2, [r7, #20]
 800b136:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800b138:	f7fe fb56 	bl	80097e8 <HAL_GetTick>
 800b13c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b13e:	e00d      	b.n	800b15c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800b140:	f7fe fb52 	bl	80097e8 <HAL_GetTick>
 800b144:	4602      	mov	r2, r0
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b14e:	d301      	bcc.n	800b154 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	e010      	b.n	800b176 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1ec      	bne.n	800b140 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	695b      	ldr	r3, [r3, #20]
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	461a      	mov	r2, r3
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b086      	sub	sp, #24
 800b182:	af00      	add	r7, sp, #0
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	60b9      	str	r1, [r7, #8]
 800b188:	607a      	str	r2, [r7, #4]
 800b18a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	f003 031c 	and.w	r3, r3, #28
 800b19a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	02db      	lsls	r3, r3, #11
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	697a      	ldr	r2, [r7, #20]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	019b      	lsls	r3, r3, #6
 800b1ac:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800b1b0:	697a      	ldr	r2, [r7, #20]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f043 0302 	orr.w	r3, r3, #2
 800b1bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	f043 0301 	orr.w	r3, r3, #1
 800b1c4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	697a      	ldr	r2, [r7, #20]
 800b1d6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b1d8:	f7fe fb06 	bl	80097e8 <HAL_GetTick>
 800b1dc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b1de:	e00d      	b.n	800b1fc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800b1e0:	f7fe fb02 	bl	80097e8 <HAL_GetTick>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1ee:	d301      	bcc.n	800b1f4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e009      	b.n	800b208 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1ec      	bne.n	800b1e0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	e0d9      	b.n	800b3d8 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 0310 	and.w	r3, r3, #16
 800b22e:	2b00      	cmp	r3, #0
 800b230:	bf14      	ite	ne
 800b232:	2301      	movne	r3, #1
 800b234:	2300      	moveq	r3, #0
 800b236:	b2db      	uxtb	r3, r3
 800b238:	461a      	mov	r2, r3
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b258:	2b00      	cmp	r3, #0
 800b25a:	bf0c      	ite	eq
 800b25c:	2301      	moveq	r3, #1
 800b25e:	2300      	movne	r3, #0
 800b260:	b2db      	uxtb	r3, r3
 800b262:	461a      	mov	r2, r3
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800b274:	2b00      	cmp	r3, #0
 800b276:	bf14      	ite	ne
 800b278:	2301      	movne	r3, #1
 800b27a:	2300      	moveq	r3, #0
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b28e:	2b00      	cmp	r3, #0
 800b290:	bf0c      	ite	eq
 800b292:	2301      	moveq	r3, #1
 800b294:	2300      	movne	r3, #0
 800b296:	b2db      	uxtb	r3, r3
 800b298:	461a      	mov	r2, r3
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	bf14      	ite	ne
 800b2ac:	2301      	movne	r3, #1
 800b2ae:	2300      	moveq	r3, #0
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	bf0c      	ite	eq
 800b2e2:	2301      	moveq	r3, #1
 800b2e4:	2300      	movne	r3, #0
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	bf0c      	ite	eq
 800b2fc:	2301      	moveq	r3, #1
 800b2fe:	2300      	movne	r3, #0
 800b300:	b2db      	uxtb	r3, r3
 800b302:	461a      	mov	r2, r3
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b312:	2b00      	cmp	r3, #0
 800b314:	bf14      	ite	ne
 800b316:	2301      	movne	r3, #1
 800b318:	2300      	moveq	r3, #0
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	461a      	mov	r2, r3
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	bf14      	ite	ne
 800b33e:	2301      	movne	r3, #1
 800b340:	2300      	moveq	r3, #0
 800b342:	b2db      	uxtb	r3, r3
 800b344:	461a      	mov	r2, r3
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	f003 0302 	and.w	r3, r3, #2
 800b354:	2b00      	cmp	r3, #0
 800b356:	bf14      	ite	ne
 800b358:	2301      	movne	r3, #1
 800b35a:	2300      	moveq	r3, #0
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	461a      	mov	r2, r3
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b370:	2b00      	cmp	r3, #0
 800b372:	bf0c      	ite	eq
 800b374:	2301      	moveq	r3, #1
 800b376:	2300      	movne	r3, #0
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	461a      	mov	r2, r3
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	699b      	ldr	r3, [r3, #24]
 800b388:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	0c1b      	lsrs	r3, r3, #16
 800b398:	b29a      	uxth	r2, r3
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	699b      	ldr	r3, [r3, #24]
 800b3a4:	f003 0304 	and.w	r3, r3, #4
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	bf14      	ite	ne
 800b3ac:	2301      	movne	r3, #1
 800b3ae:	2300      	moveq	r3, #0
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	699b      	ldr	r3, [r3, #24]
 800b3c0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	bf14      	ite	ne
 800b3c8:	2301      	movne	r3, #1
 800b3ca:	2300      	moveq	r3, #0
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e00b      	b.n	800b410 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3fe:	2b10      	cmp	r3, #16
 800b400:	d105      	bne.n	800b40e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f88f 	bl	800b528 <ETH_SetMACConfig>

    return HAL_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	e000      	b.n	800b410 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800b40e:	2301      	movs	r3, #1
  }
}
 800b410:	4618      	mov	r0, r3
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f023 031c 	bic.w	r3, r3, #28
 800b42e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800b430:	f001 fadc 	bl	800c9ec <HAL_RCC_GetHCLKFreq>
 800b434:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	4a1d      	ldr	r2, [pc, #116]	; (800b4b0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d908      	bls.n	800b450 <HAL_ETH_SetMDIOClockRange+0x38>
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	4a1c      	ldr	r2, [pc, #112]	; (800b4b4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d804      	bhi.n	800b450 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f043 0308 	orr.w	r3, r3, #8
 800b44c:	60fb      	str	r3, [r7, #12]
 800b44e:	e027      	b.n	800b4a0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	4a18      	ldr	r2, [pc, #96]	; (800b4b4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d908      	bls.n	800b46a <HAL_ETH_SetMDIOClockRange+0x52>
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	4a17      	ldr	r2, [pc, #92]	; (800b4b8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d204      	bcs.n	800b46a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f043 030c 	orr.w	r3, r3, #12
 800b466:	60fb      	str	r3, [r7, #12]
 800b468:	e01a      	b.n	800b4a0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	4a12      	ldr	r2, [pc, #72]	; (800b4b8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d303      	bcc.n	800b47a <HAL_ETH_SetMDIOClockRange+0x62>
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	4a11      	ldr	r2, [pc, #68]	; (800b4bc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d911      	bls.n	800b49e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	4a0f      	ldr	r2, [pc, #60]	; (800b4bc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d908      	bls.n	800b494 <HAL_ETH_SetMDIOClockRange+0x7c>
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	4a0e      	ldr	r2, [pc, #56]	; (800b4c0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d804      	bhi.n	800b494 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f043 0304 	orr.w	r3, r3, #4
 800b490:	60fb      	str	r3, [r7, #12]
 800b492:	e005      	b.n	800b4a0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f043 0310 	orr.w	r3, r3, #16
 800b49a:	60fb      	str	r3, [r7, #12]
 800b49c:	e000      	b.n	800b4a0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800b49e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	611a      	str	r2, [r3, #16]
}
 800b4a8:	bf00      	nop
 800b4aa:	3710      	adds	r7, #16
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	01312cff 	.word	0x01312cff
 800b4b4:	02160ebf 	.word	0x02160ebf
 800b4b8:	03938700 	.word	0x03938700
 800b4bc:	05f5e0ff 	.word	0x05f5e0ff
 800b4c0:	08f0d17f 	.word	0x08f0d17f

0800b4c4 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	370c      	adds	r7, #12
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr

0800b4de <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b084      	sub	sp, #16
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4f2:	699b      	ldr	r3, [r3, #24]
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	6812      	ldr	r2, [r2, #0]
 800b4f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b500:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b50a:	699b      	ldr	r3, [r3, #24]
 800b50c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b50e:	2001      	movs	r0, #1
 800b510:	f7fe f976 	bl	8009800 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b51e:	6193      	str	r3, [r2, #24]
}
 800b520:	bf00      	nop
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	4b51      	ldr	r3, [pc, #324]	; (800b684 <ETH_SetMACConfig+0x15c>)
 800b53e:	4013      	ands	r3, r2
 800b540:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	7c1b      	ldrb	r3, [r3, #16]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d102      	bne.n	800b550 <ETH_SetMACConfig+0x28>
 800b54a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b54e:	e000      	b.n	800b552 <ETH_SetMACConfig+0x2a>
 800b550:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	7c5b      	ldrb	r3, [r3, #17]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d102      	bne.n	800b560 <ETH_SetMACConfig+0x38>
 800b55a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b55e:	e000      	b.n	800b562 <ETH_SetMACConfig+0x3a>
 800b560:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800b562:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800b568:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	7fdb      	ldrb	r3, [r3, #31]
 800b56e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800b570:	431a      	orrs	r2, r3
                        macconf->Speed |
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800b576:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800b578:	683a      	ldr	r2, [r7, #0]
 800b57a:	7f92      	ldrb	r2, [r2, #30]
 800b57c:	2a00      	cmp	r2, #0
 800b57e:	d102      	bne.n	800b586 <ETH_SetMACConfig+0x5e>
 800b580:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b584:	e000      	b.n	800b588 <ETH_SetMACConfig+0x60>
 800b586:	2200      	movs	r2, #0
                        macconf->Speed |
 800b588:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	7f1b      	ldrb	r3, [r3, #28]
 800b58e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800b590:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800b596:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	791b      	ldrb	r3, [r3, #4]
 800b59c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800b59e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800b5a0:	683a      	ldr	r2, [r7, #0]
 800b5a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b5a6:	2a00      	cmp	r2, #0
 800b5a8:	d102      	bne.n	800b5b0 <ETH_SetMACConfig+0x88>
 800b5aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5ae:	e000      	b.n	800b5b2 <ETH_SetMACConfig+0x8a>
 800b5b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800b5b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	7bdb      	ldrb	r3, [r3, #15]
 800b5b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800b5ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800b5c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b5e2:	2001      	movs	r0, #1
 800b5e4:	f7fe f90c 	bl	8009800 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	f64f 7341 	movw	r3, #65345	; 0xff41
 800b5fe:	4013      	ands	r3, r2
 800b600:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b606:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800b608:	683a      	ldr	r2, [r7, #0]
 800b60a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800b60e:	2a00      	cmp	r2, #0
 800b610:	d101      	bne.n	800b616 <ETH_SetMACConfig+0xee>
 800b612:	2280      	movs	r2, #128	; 0x80
 800b614:	e000      	b.n	800b618 <ETH_SetMACConfig+0xf0>
 800b616:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800b618:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800b61e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800b620:	683a      	ldr	r2, [r7, #0]
 800b622:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800b626:	2a01      	cmp	r2, #1
 800b628:	d101      	bne.n	800b62e <ETH_SetMACConfig+0x106>
 800b62a:	2208      	movs	r2, #8
 800b62c:	e000      	b.n	800b630 <ETH_SetMACConfig+0x108>
 800b62e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800b630:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800b638:	2a01      	cmp	r2, #1
 800b63a:	d101      	bne.n	800b640 <ETH_SetMACConfig+0x118>
 800b63c:	2204      	movs	r2, #4
 800b63e:	e000      	b.n	800b642 <ETH_SetMACConfig+0x11a>
 800b640:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800b642:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800b64a:	2a01      	cmp	r2, #1
 800b64c:	d101      	bne.n	800b652 <ETH_SetMACConfig+0x12a>
 800b64e:	2202      	movs	r2, #2
 800b650:	e000      	b.n	800b654 <ETH_SetMACConfig+0x12c>
 800b652:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800b654:	4313      	orrs	r3, r2
 800b656:	68fa      	ldr	r2, [r7, #12]
 800b658:	4313      	orrs	r3, r2
 800b65a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68fa      	ldr	r2, [r7, #12]
 800b662:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	699b      	ldr	r3, [r3, #24]
 800b66a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b66c:	2001      	movs	r0, #1
 800b66e:	f7fe f8c7 	bl	8009800 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	619a      	str	r2, [r3, #24]
}
 800b67a:	bf00      	nop
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	ff20810f 	.word	0xff20810f

0800b688 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	4b3d      	ldr	r3, [pc, #244]	; (800b798 <ETH_SetDMAConfig+0x110>)
 800b6a2:	4013      	ands	r3, r2
 800b6a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	7b1b      	ldrb	r3, [r3, #12]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d102      	bne.n	800b6b4 <ETH_SetDMAConfig+0x2c>
 800b6ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b6b2:	e000      	b.n	800b6b6 <ETH_SetDMAConfig+0x2e>
 800b6b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	7b5b      	ldrb	r3, [r3, #13]
 800b6ba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800b6bc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	7f52      	ldrb	r2, [r2, #29]
 800b6c2:	2a00      	cmp	r2, #0
 800b6c4:	d102      	bne.n	800b6cc <ETH_SetDMAConfig+0x44>
 800b6c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b6ca:	e000      	b.n	800b6ce <ETH_SetDMAConfig+0x46>
 800b6cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800b6ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	7b9b      	ldrb	r3, [r3, #14]
 800b6d4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800b6d6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800b6dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	7f1b      	ldrb	r3, [r3, #28]
 800b6e2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800b6e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	7f9b      	ldrb	r3, [r3, #30]
 800b6ea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800b6ec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800b6f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b6fa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	4313      	orrs	r3, r2
 800b702:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b70c:	461a      	mov	r2, r3
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b71e:	2001      	movs	r0, #1
 800b720:	f7fe f86e 	bl	8009800 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b72c:	461a      	mov	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	791b      	ldrb	r3, [r3, #4]
 800b736:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800b73c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800b742:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800b748:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b750:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800b752:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b758:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800b75a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800b760:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	6812      	ldr	r2, [r2, #0]
 800b766:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b76a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b76e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800b77c:	2001      	movs	r0, #1
 800b77e:	f7fe f83f 	bl	8009800 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b78a:	461a      	mov	r2, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6013      	str	r3, [r2, #0]
}
 800b790:	bf00      	nop
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	f8de3f23 	.word	0xf8de3f23

0800b79c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b0a6      	sub	sp, #152	; 0x98
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800b7fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b802:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800b804:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b808:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800b80a:	2300      	movs	r3, #0
 800b80c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800b810:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b814:	4619      	mov	r1, r3
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff fe86 	bl	800b528 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800b81c:	2301      	movs	r3, #1
 800b81e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800b820:	2301      	movs	r3, #1
 800b822:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800b824:	2301      	movs	r3, #1
 800b826:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800b82a:	2301      	movs	r3, #1
 800b82c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800b82e:	2300      	movs	r3, #0
 800b830:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800b832:	2300      	movs	r3, #0
 800b834:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800b838:	2300      	movs	r3, #0
 800b83a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800b83e:	2300      	movs	r3, #0
 800b840:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800b842:	2301      	movs	r3, #1
 800b844:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800b848:	2301      	movs	r3, #1
 800b84a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800b84c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b850:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800b852:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b856:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800b858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b85c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800b85e:	2301      	movs	r3, #1
 800b860:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800b864:	2300      	movs	r3, #0
 800b866:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800b868:	2300      	movs	r3, #0
 800b86a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800b86c:	f107 0308 	add.w	r3, r7, #8
 800b870:	4619      	mov	r1, r3
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7ff ff08 	bl	800b688 <ETH_SetDMAConfig>
}
 800b878:	bf00      	nop
 800b87a:	3798      	adds	r7, #152	; 0x98
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800b880:	b480      	push	{r7}
 800b882:	b087      	sub	sp, #28
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	3305      	adds	r3, #5
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	021b      	lsls	r3, r3, #8
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	3204      	adds	r2, #4
 800b898:	7812      	ldrb	r2, [r2, #0]
 800b89a:	4313      	orrs	r3, r2
 800b89c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	4b11      	ldr	r3, [pc, #68]	; (800b8e8 <ETH_MACAddressConfig+0x68>)
 800b8a2:	4413      	add	r3, r2
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	3303      	adds	r3, #3
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	061a      	lsls	r2, r3, #24
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	3302      	adds	r3, #2
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	041b      	lsls	r3, r3, #16
 800b8ba:	431a      	orrs	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	021b      	lsls	r3, r3, #8
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	7812      	ldrb	r2, [r2, #0]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	4b06      	ldr	r3, [pc, #24]	; (800b8ec <ETH_MACAddressConfig+0x6c>)
 800b8d2:	4413      	add	r3, r2
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	6013      	str	r3, [r2, #0]
}
 800b8da:	bf00      	nop
 800b8dc:	371c      	adds	r7, #28
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	40028040 	.word	0x40028040
 800b8ec:	40028044 	.word	0x40028044

0800b8f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b085      	sub	sp, #20
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	60fb      	str	r3, [r7, #12]
 800b8fc:	e03e      	b.n	800b97c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	68d9      	ldr	r1, [r3, #12]
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	4613      	mov	r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4413      	add	r3, r2
 800b90a:	00db      	lsls	r3, r3, #3
 800b90c:	440b      	add	r3, r1
 800b90e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	2200      	movs	r2, #0
 800b914:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2200      	movs	r2, #0
 800b91a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	2200      	movs	r2, #0
 800b920:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	2200      	movs	r2, #0
 800b926:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800b928:	68b9      	ldr	r1, [r7, #8]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	3206      	adds	r2, #6
 800b930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2b02      	cmp	r3, #2
 800b944:	d80c      	bhi.n	800b960 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	68d9      	ldr	r1, [r3, #12]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	1c5a      	adds	r2, r3, #1
 800b94e:	4613      	mov	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4413      	add	r3, r2
 800b954:	00db      	lsls	r3, r3, #3
 800b956:	440b      	add	r3, r1
 800b958:	461a      	mov	r2, r3
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	60da      	str	r2, [r3, #12]
 800b95e:	e004      	b.n	800b96a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	461a      	mov	r2, r3
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	3301      	adds	r3, #1
 800b97a:	60fb      	str	r3, [r7, #12]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b03      	cmp	r3, #3
 800b980:	d9bd      	bls.n	800b8fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	68da      	ldr	r2, [r3, #12]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b994:	611a      	str	r2, [r3, #16]
}
 800b996:	bf00      	nop
 800b998:	3714      	adds	r7, #20
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800b9a2:	b480      	push	{r7}
 800b9a4:	b085      	sub	sp, #20
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	60fb      	str	r3, [r7, #12]
 800b9ae:	e046      	b.n	800ba3e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6919      	ldr	r1, [r3, #16]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	4413      	add	r3, r2
 800b9bc:	00db      	lsls	r3, r3, #3
 800b9be:	440b      	add	r3, r1
 800b9c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b9ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800b9f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800ba02:	68b9      	ldr	r1, [r7, #8]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	3212      	adds	r2, #18
 800ba0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d80c      	bhi.n	800ba2e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6919      	ldr	r1, [r3, #16]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	1c5a      	adds	r2, r3, #1
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4413      	add	r3, r2
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	440b      	add	r3, r1
 800ba26:	461a      	mov	r2, r3
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	60da      	str	r2, [r3, #12]
 800ba2c:	e004      	b.n	800ba38 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	691b      	ldr	r3, [r3, #16]
 800ba32:	461a      	mov	r2, r3
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	60fb      	str	r3, [r7, #12]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2b03      	cmp	r3, #3
 800ba42:	d9b5      	bls.n	800b9b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	691a      	ldr	r2, [r3, #16]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba6e:	60da      	str	r2, [r3, #12]
}
 800ba70:	bf00      	nop
 800ba72:	3714      	adds	r7, #20
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b08d      	sub	sp, #52	; 0x34
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	3318      	adds	r3, #24
 800ba8c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800bab2:	6a3b      	ldr	r3, [r7, #32]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800baba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800babe:	d007      	beq.n	800bad0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800bac0:	697a      	ldr	r2, [r7, #20]
 800bac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac4:	3304      	adds	r3, #4
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4413      	add	r3, r2
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d001      	beq.n	800bad4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800bad0:	2302      	movs	r3, #2
 800bad2:	e0ff      	b.n	800bcd4 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800bad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad6:	3301      	adds	r3, #1
 800bad8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	461a      	mov	r2, r3
 800bae0:	6a3b      	ldr	r3, [r7, #32]
 800bae2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800bae4:	6a3b      	ldr	r3, [r7, #32]
 800bae6:	685a      	ldr	r2, [r3, #4]
 800bae8:	4b7d      	ldr	r3, [pc, #500]	; (800bce0 <ETH_Prepare_Tx_Descriptors+0x264>)
 800baea:	4013      	ands	r3, r2
 800baec:	69fa      	ldr	r2, [r7, #28]
 800baee:	6852      	ldr	r2, [r2, #4]
 800baf0:	431a      	orrs	r2, r3
 800baf2:	6a3b      	ldr	r3, [r7, #32]
 800baf4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d008      	beq.n	800bb14 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800bb02:	6a3b      	ldr	r3, [r7, #32]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	695b      	ldr	r3, [r3, #20]
 800bb0e:	431a      	orrs	r2, r3
 800bb10:	6a3b      	ldr	r3, [r7, #32]
 800bb12:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f003 0320 	and.w	r3, r3, #32
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d008      	beq.n	800bb32 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800bb20:	6a3b      	ldr	r3, [r7, #32]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	431a      	orrs	r2, r3
 800bb2e:	6a3b      	ldr	r3, [r7, #32]
 800bb30:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f003 0304 	and.w	r3, r3, #4
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d005      	beq.n	800bb4a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800bb3e:	6a3b      	ldr	r3, [r7, #32]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bb46:	6a3b      	ldr	r3, [r7, #32]
 800bb48:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800bb4a:	6a3b      	ldr	r3, [r7, #32]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bb52:	6a3b      	ldr	r3, [r7, #32]
 800bb54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800bb56:	f3bf 8f5f 	dmb	sy
}
 800bb5a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bb64:	6a3b      	ldr	r3, [r7, #32]
 800bb66:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800bb68:	e082      	b.n	800bc70 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800bb6a:	6a3b      	ldr	r3, [r7, #32]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d006      	beq.n	800bb8a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800bb7c:	6a3b      	ldr	r3, [r7, #32]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bb84:	6a3b      	ldr	r3, [r7, #32]
 800bb86:	601a      	str	r2, [r3, #0]
 800bb88:	e005      	b.n	800bb96 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800bb8a:	6a3b      	ldr	r3, [r7, #32]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800bb92:	6a3b      	ldr	r3, [r7, #32]
 800bb94:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800bb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb98:	3301      	adds	r3, #1
 800bb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9e:	2b03      	cmp	r3, #3
 800bba0:	d902      	bls.n	800bba8 <ETH_Prepare_Tx_Descriptors+0x12c>
 800bba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba4:	3b04      	subs	r3, #4
 800bba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800bbb2:	6a3b      	ldr	r3, [r7, #32]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bbba:	6a3b      	ldr	r3, [r7, #32]
 800bbbc:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800bbbe:	6a3b      	ldr	r3, [r7, #32]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbca:	d007      	beq.n	800bbdc <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800bbcc:	697a      	ldr	r2, [r7, #20]
 800bbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd0:	3304      	adds	r3, #4
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	4413      	add	r3, r2
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d029      	beq.n	800bc30 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800bbea:	2300      	movs	r3, #0
 800bbec:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbee:	e019      	b.n	800bc24 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800bbf0:	f3bf 8f5f 	dmb	sy
}
 800bbf4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800bbf6:	6a3b      	ldr	r3, [r7, #32]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bbfe:	6a3b      	ldr	r3, [r7, #32]
 800bc00:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800bc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc04:	3301      	adds	r3, #1
 800bc06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0a:	2b03      	cmp	r3, #3
 800bc0c:	d902      	bls.n	800bc14 <ETH_Prepare_Tx_Descriptors+0x198>
 800bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc10:	3b04      	subs	r3, #4
 800bc12:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc1c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800bc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc20:	3301      	adds	r3, #1
 800bc22:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d3e1      	bcc.n	800bbf0 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800bc2c:	2302      	movs	r3, #2
 800bc2e:	e051      	b.n	800bcd4 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800bc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc32:	3301      	adds	r3, #1
 800bc34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	461a      	mov	r2, r3
 800bc42:	6a3b      	ldr	r3, [r7, #32]
 800bc44:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800bc46:	6a3b      	ldr	r3, [r7, #32]
 800bc48:	685a      	ldr	r2, [r3, #4]
 800bc4a:	4b25      	ldr	r3, [pc, #148]	; (800bce0 <ETH_Prepare_Tx_Descriptors+0x264>)
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	69fa      	ldr	r2, [r7, #28]
 800bc50:	6852      	ldr	r2, [r2, #4]
 800bc52:	431a      	orrs	r2, r3
 800bc54:	6a3b      	ldr	r3, [r7, #32]
 800bc56:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800bc5e:	f3bf 8f5f 	dmb	sy
}
 800bc62:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bc6c:	6a3b      	ldr	r3, [r7, #32]
 800bc6e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f47f af78 	bne.w	800bb6a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d006      	beq.n	800bc8e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800bc80:	6a3b      	ldr	r3, [r7, #32]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bc88:	6a3b      	ldr	r3, [r7, #32]
 800bc8a:	601a      	str	r2, [r3, #0]
 800bc8c:	e005      	b.n	800bc9a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800bc8e:	6a3b      	ldr	r3, [r7, #32]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800bc96:	6a3b      	ldr	r3, [r7, #32]
 800bc98:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bca2:	6a3b      	ldr	r3, [r7, #32]
 800bca4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcaa:	6979      	ldr	r1, [r7, #20]
 800bcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcae:	3304      	adds	r3, #4
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	440b      	add	r3, r1
 800bcb4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcba:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcbc:	b672      	cpsid	i
}
 800bcbe:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	1c5a      	adds	r2, r3, #1
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800bcce:	b662      	cpsie	i
}
 800bcd0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3734      	adds	r7, #52	; 0x34
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr
 800bce0:	ffffe000 	.word	0xffffe000

0800bce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b089      	sub	sp, #36	; 0x24
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800bcfe:	2300      	movs	r3, #0
 800bd00:	61fb      	str	r3, [r7, #28]
 800bd02:	e175      	b.n	800bff0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800bd04:	2201      	movs	r2, #1
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	fa02 f303 	lsl.w	r3, r2, r3
 800bd0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	4013      	ands	r3, r2
 800bd16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bd18:	693a      	ldr	r2, [r7, #16]
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	f040 8164 	bne.w	800bfea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	f003 0303 	and.w	r3, r3, #3
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d005      	beq.n	800bd3a <HAL_GPIO_Init+0x56>
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	f003 0303 	and.w	r3, r3, #3
 800bd36:	2b02      	cmp	r3, #2
 800bd38:	d130      	bne.n	800bd9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	005b      	lsls	r3, r3, #1
 800bd44:	2203      	movs	r2, #3
 800bd46:	fa02 f303 	lsl.w	r3, r2, r3
 800bd4a:	43db      	mvns	r3, r3
 800bd4c:	69ba      	ldr	r2, [r7, #24]
 800bd4e:	4013      	ands	r3, r2
 800bd50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd5e:	69ba      	ldr	r2, [r7, #24]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	69ba      	ldr	r2, [r7, #24]
 800bd68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bd70:	2201      	movs	r2, #1
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	fa02 f303 	lsl.w	r3, r2, r3
 800bd78:	43db      	mvns	r3, r3
 800bd7a:	69ba      	ldr	r2, [r7, #24]
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	091b      	lsrs	r3, r3, #4
 800bd86:	f003 0201 	and.w	r2, r3, #1
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd90:	69ba      	ldr	r2, [r7, #24]
 800bd92:	4313      	orrs	r3, r2
 800bd94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	69ba      	ldr	r2, [r7, #24]
 800bd9a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	f003 0303 	and.w	r3, r3, #3
 800bda4:	2b03      	cmp	r3, #3
 800bda6:	d017      	beq.n	800bdd8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	005b      	lsls	r3, r3, #1
 800bdb2:	2203      	movs	r2, #3
 800bdb4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb8:	43db      	mvns	r3, r3
 800bdba:	69ba      	ldr	r2, [r7, #24]
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	689a      	ldr	r2, [r3, #8]
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdcc:	69ba      	ldr	r2, [r7, #24]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	69ba      	ldr	r2, [r7, #24]
 800bdd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	f003 0303 	and.w	r3, r3, #3
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	d123      	bne.n	800be2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	08da      	lsrs	r2, r3, #3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	3208      	adds	r2, #8
 800bdec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	f003 0307 	and.w	r3, r3, #7
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	220f      	movs	r2, #15
 800bdfc:	fa02 f303 	lsl.w	r3, r2, r3
 800be00:	43db      	mvns	r3, r3
 800be02:	69ba      	ldr	r2, [r7, #24]
 800be04:	4013      	ands	r3, r2
 800be06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	691a      	ldr	r2, [r3, #16]
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	f003 0307 	and.w	r3, r3, #7
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	fa02 f303 	lsl.w	r3, r2, r3
 800be18:	69ba      	ldr	r2, [r7, #24]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	08da      	lsrs	r2, r3, #3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	3208      	adds	r2, #8
 800be26:	69b9      	ldr	r1, [r7, #24]
 800be28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	005b      	lsls	r3, r3, #1
 800be36:	2203      	movs	r2, #3
 800be38:	fa02 f303 	lsl.w	r3, r2, r3
 800be3c:	43db      	mvns	r3, r3
 800be3e:	69ba      	ldr	r2, [r7, #24]
 800be40:	4013      	ands	r3, r2
 800be42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	f003 0203 	and.w	r2, r3, #3
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	005b      	lsls	r3, r3, #1
 800be50:	fa02 f303 	lsl.w	r3, r2, r3
 800be54:	69ba      	ldr	r2, [r7, #24]
 800be56:	4313      	orrs	r3, r2
 800be58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	69ba      	ldr	r2, [r7, #24]
 800be5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 80be 	beq.w	800bfea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be6e:	4b66      	ldr	r3, [pc, #408]	; (800c008 <HAL_GPIO_Init+0x324>)
 800be70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be72:	4a65      	ldr	r2, [pc, #404]	; (800c008 <HAL_GPIO_Init+0x324>)
 800be74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be78:	6453      	str	r3, [r2, #68]	; 0x44
 800be7a:	4b63      	ldr	r3, [pc, #396]	; (800c008 <HAL_GPIO_Init+0x324>)
 800be7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be82:	60fb      	str	r3, [r7, #12]
 800be84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800be86:	4a61      	ldr	r2, [pc, #388]	; (800c00c <HAL_GPIO_Init+0x328>)
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	089b      	lsrs	r3, r3, #2
 800be8c:	3302      	adds	r3, #2
 800be8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	f003 0303 	and.w	r3, r3, #3
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	220f      	movs	r2, #15
 800be9e:	fa02 f303 	lsl.w	r3, r2, r3
 800bea2:	43db      	mvns	r3, r3
 800bea4:	69ba      	ldr	r2, [r7, #24]
 800bea6:	4013      	ands	r3, r2
 800bea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a58      	ldr	r2, [pc, #352]	; (800c010 <HAL_GPIO_Init+0x32c>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d037      	beq.n	800bf22 <HAL_GPIO_Init+0x23e>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4a57      	ldr	r2, [pc, #348]	; (800c014 <HAL_GPIO_Init+0x330>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d031      	beq.n	800bf1e <HAL_GPIO_Init+0x23a>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4a56      	ldr	r2, [pc, #344]	; (800c018 <HAL_GPIO_Init+0x334>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d02b      	beq.n	800bf1a <HAL_GPIO_Init+0x236>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4a55      	ldr	r2, [pc, #340]	; (800c01c <HAL_GPIO_Init+0x338>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d025      	beq.n	800bf16 <HAL_GPIO_Init+0x232>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4a54      	ldr	r2, [pc, #336]	; (800c020 <HAL_GPIO_Init+0x33c>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d01f      	beq.n	800bf12 <HAL_GPIO_Init+0x22e>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4a53      	ldr	r2, [pc, #332]	; (800c024 <HAL_GPIO_Init+0x340>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d019      	beq.n	800bf0e <HAL_GPIO_Init+0x22a>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4a52      	ldr	r2, [pc, #328]	; (800c028 <HAL_GPIO_Init+0x344>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d013      	beq.n	800bf0a <HAL_GPIO_Init+0x226>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a51      	ldr	r2, [pc, #324]	; (800c02c <HAL_GPIO_Init+0x348>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d00d      	beq.n	800bf06 <HAL_GPIO_Init+0x222>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4a50      	ldr	r2, [pc, #320]	; (800c030 <HAL_GPIO_Init+0x34c>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d007      	beq.n	800bf02 <HAL_GPIO_Init+0x21e>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4a4f      	ldr	r2, [pc, #316]	; (800c034 <HAL_GPIO_Init+0x350>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d101      	bne.n	800befe <HAL_GPIO_Init+0x21a>
 800befa:	2309      	movs	r3, #9
 800befc:	e012      	b.n	800bf24 <HAL_GPIO_Init+0x240>
 800befe:	230a      	movs	r3, #10
 800bf00:	e010      	b.n	800bf24 <HAL_GPIO_Init+0x240>
 800bf02:	2308      	movs	r3, #8
 800bf04:	e00e      	b.n	800bf24 <HAL_GPIO_Init+0x240>
 800bf06:	2307      	movs	r3, #7
 800bf08:	e00c      	b.n	800bf24 <HAL_GPIO_Init+0x240>
 800bf0a:	2306      	movs	r3, #6
 800bf0c:	e00a      	b.n	800bf24 <HAL_GPIO_Init+0x240>
 800bf0e:	2305      	movs	r3, #5
 800bf10:	e008      	b.n	800bf24 <HAL_GPIO_Init+0x240>
 800bf12:	2304      	movs	r3, #4
 800bf14:	e006      	b.n	800bf24 <HAL_GPIO_Init+0x240>
 800bf16:	2303      	movs	r3, #3
 800bf18:	e004      	b.n	800bf24 <HAL_GPIO_Init+0x240>
 800bf1a:	2302      	movs	r3, #2
 800bf1c:	e002      	b.n	800bf24 <HAL_GPIO_Init+0x240>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e000      	b.n	800bf24 <HAL_GPIO_Init+0x240>
 800bf22:	2300      	movs	r3, #0
 800bf24:	69fa      	ldr	r2, [r7, #28]
 800bf26:	f002 0203 	and.w	r2, r2, #3
 800bf2a:	0092      	lsls	r2, r2, #2
 800bf2c:	4093      	lsls	r3, r2
 800bf2e:	69ba      	ldr	r2, [r7, #24]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800bf34:	4935      	ldr	r1, [pc, #212]	; (800c00c <HAL_GPIO_Init+0x328>)
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	089b      	lsrs	r3, r3, #2
 800bf3a:	3302      	adds	r3, #2
 800bf3c:	69ba      	ldr	r2, [r7, #24]
 800bf3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bf42:	4b3d      	ldr	r3, [pc, #244]	; (800c038 <HAL_GPIO_Init+0x354>)
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	43db      	mvns	r3, r3
 800bf4c:	69ba      	ldr	r2, [r7, #24]
 800bf4e:	4013      	ands	r3, r2
 800bf50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800bf5e:	69ba      	ldr	r2, [r7, #24]
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bf66:	4a34      	ldr	r2, [pc, #208]	; (800c038 <HAL_GPIO_Init+0x354>)
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bf6c:	4b32      	ldr	r3, [pc, #200]	; (800c038 <HAL_GPIO_Init+0x354>)
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	43db      	mvns	r3, r3
 800bf76:	69ba      	ldr	r2, [r7, #24]
 800bf78:	4013      	ands	r3, r2
 800bf7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d003      	beq.n	800bf90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800bf88:	69ba      	ldr	r2, [r7, #24]
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bf90:	4a29      	ldr	r2, [pc, #164]	; (800c038 <HAL_GPIO_Init+0x354>)
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800bf96:	4b28      	ldr	r3, [pc, #160]	; (800c038 <HAL_GPIO_Init+0x354>)
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	43db      	mvns	r3, r3
 800bfa0:	69ba      	ldr	r2, [r7, #24]
 800bfa2:	4013      	ands	r3, r2
 800bfa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d003      	beq.n	800bfba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bfba:	4a1f      	ldr	r2, [pc, #124]	; (800c038 <HAL_GPIO_Init+0x354>)
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bfc0:	4b1d      	ldr	r3, [pc, #116]	; (800c038 <HAL_GPIO_Init+0x354>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	43db      	mvns	r3, r3
 800bfca:	69ba      	ldr	r2, [r7, #24]
 800bfcc:	4013      	ands	r3, r2
 800bfce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d003      	beq.n	800bfe4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800bfdc:	69ba      	ldr	r2, [r7, #24]
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bfe4:	4a14      	ldr	r2, [pc, #80]	; (800c038 <HAL_GPIO_Init+0x354>)
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	3301      	adds	r3, #1
 800bfee:	61fb      	str	r3, [r7, #28]
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	2b0f      	cmp	r3, #15
 800bff4:	f67f ae86 	bls.w	800bd04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800bff8:	bf00      	nop
 800bffa:	bf00      	nop
 800bffc:	3724      	adds	r7, #36	; 0x24
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	40023800 	.word	0x40023800
 800c00c:	40013800 	.word	0x40013800
 800c010:	40020000 	.word	0x40020000
 800c014:	40020400 	.word	0x40020400
 800c018:	40020800 	.word	0x40020800
 800c01c:	40020c00 	.word	0x40020c00
 800c020:	40021000 	.word	0x40021000
 800c024:	40021400 	.word	0x40021400
 800c028:	40021800 	.word	0x40021800
 800c02c:	40021c00 	.word	0x40021c00
 800c030:	40022000 	.word	0x40022000
 800c034:	40022400 	.word	0x40022400
 800c038:	40013c00 	.word	0x40013c00

0800c03c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	691a      	ldr	r2, [r3, #16]
 800c04c:	887b      	ldrh	r3, [r7, #2]
 800c04e:	4013      	ands	r3, r2
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c054:	2301      	movs	r3, #1
 800c056:	73fb      	strb	r3, [r7, #15]
 800c058:	e001      	b.n	800c05e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c05a:	2300      	movs	r3, #0
 800c05c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c060:	4618      	mov	r0, r3
 800c062:	3714      	adds	r7, #20
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	460b      	mov	r3, r1
 800c076:	807b      	strh	r3, [r7, #2]
 800c078:	4613      	mov	r3, r2
 800c07a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c07c:	787b      	ldrb	r3, [r7, #1]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d003      	beq.n	800c08a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c082:	887a      	ldrh	r2, [r7, #2]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c088:	e003      	b.n	800c092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c08a:	887b      	ldrh	r3, [r7, #2]
 800c08c:	041a      	lsls	r2, r3, #16
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	619a      	str	r2, [r3, #24]
}
 800c092:	bf00      	nop
 800c094:	370c      	adds	r7, #12
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
	...

0800c0a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c0aa:	4b23      	ldr	r3, [pc, #140]	; (800c138 <HAL_PWREx_EnableOverDrive+0x98>)
 800c0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ae:	4a22      	ldr	r2, [pc, #136]	; (800c138 <HAL_PWREx_EnableOverDrive+0x98>)
 800c0b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0b4:	6413      	str	r3, [r2, #64]	; 0x40
 800c0b6:	4b20      	ldr	r3, [pc, #128]	; (800c138 <HAL_PWREx_EnableOverDrive+0x98>)
 800c0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0be:	603b      	str	r3, [r7, #0]
 800c0c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c0c2:	4b1e      	ldr	r3, [pc, #120]	; (800c13c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a1d      	ldr	r2, [pc, #116]	; (800c13c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c0c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c0ce:	f7fd fb8b 	bl	80097e8 <HAL_GetTick>
 800c0d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c0d4:	e009      	b.n	800c0ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c0d6:	f7fd fb87 	bl	80097e8 <HAL_GetTick>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	1ad3      	subs	r3, r2, r3
 800c0e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0e4:	d901      	bls.n	800c0ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c0e6:	2303      	movs	r3, #3
 800c0e8:	e022      	b.n	800c130 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c0ea:	4b14      	ldr	r3, [pc, #80]	; (800c13c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0f6:	d1ee      	bne.n	800c0d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c0f8:	4b10      	ldr	r3, [pc, #64]	; (800c13c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a0f      	ldr	r2, [pc, #60]	; (800c13c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c0fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c102:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c104:	f7fd fb70 	bl	80097e8 <HAL_GetTick>
 800c108:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c10a:	e009      	b.n	800c120 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c10c:	f7fd fb6c 	bl	80097e8 <HAL_GetTick>
 800c110:	4602      	mov	r2, r0
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c11a:	d901      	bls.n	800c120 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c11c:	2303      	movs	r3, #3
 800c11e:	e007      	b.n	800c130 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c120:	4b06      	ldr	r3, [pc, #24]	; (800c13c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c12c:	d1ee      	bne.n	800c10c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	40023800 	.word	0x40023800
 800c13c:	40007000 	.word	0x40007000

0800c140 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c148:	2300      	movs	r3, #0
 800c14a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d101      	bne.n	800c156 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	e291      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f000 8087 	beq.w	800c272 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c164:	4b96      	ldr	r3, [pc, #600]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	f003 030c 	and.w	r3, r3, #12
 800c16c:	2b04      	cmp	r3, #4
 800c16e:	d00c      	beq.n	800c18a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c170:	4b93      	ldr	r3, [pc, #588]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	f003 030c 	and.w	r3, r3, #12
 800c178:	2b08      	cmp	r3, #8
 800c17a:	d112      	bne.n	800c1a2 <HAL_RCC_OscConfig+0x62>
 800c17c:	4b90      	ldr	r3, [pc, #576]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c188:	d10b      	bne.n	800c1a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c18a:	4b8d      	ldr	r3, [pc, #564]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c192:	2b00      	cmp	r3, #0
 800c194:	d06c      	beq.n	800c270 <HAL_RCC_OscConfig+0x130>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d168      	bne.n	800c270 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e26b      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1aa:	d106      	bne.n	800c1ba <HAL_RCC_OscConfig+0x7a>
 800c1ac:	4b84      	ldr	r3, [pc, #528]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a83      	ldr	r2, [pc, #524]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c1b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1b6:	6013      	str	r3, [r2, #0]
 800c1b8:	e02e      	b.n	800c218 <HAL_RCC_OscConfig+0xd8>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d10c      	bne.n	800c1dc <HAL_RCC_OscConfig+0x9c>
 800c1c2:	4b7f      	ldr	r3, [pc, #508]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a7e      	ldr	r2, [pc, #504]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c1c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1cc:	6013      	str	r3, [r2, #0]
 800c1ce:	4b7c      	ldr	r3, [pc, #496]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a7b      	ldr	r2, [pc, #492]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c1d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c1d8:	6013      	str	r3, [r2, #0]
 800c1da:	e01d      	b.n	800c218 <HAL_RCC_OscConfig+0xd8>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1e4:	d10c      	bne.n	800c200 <HAL_RCC_OscConfig+0xc0>
 800c1e6:	4b76      	ldr	r3, [pc, #472]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a75      	ldr	r2, [pc, #468]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c1ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c1f0:	6013      	str	r3, [r2, #0]
 800c1f2:	4b73      	ldr	r3, [pc, #460]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a72      	ldr	r2, [pc, #456]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c1f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1fc:	6013      	str	r3, [r2, #0]
 800c1fe:	e00b      	b.n	800c218 <HAL_RCC_OscConfig+0xd8>
 800c200:	4b6f      	ldr	r3, [pc, #444]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a6e      	ldr	r2, [pc, #440]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c20a:	6013      	str	r3, [r2, #0]
 800c20c:	4b6c      	ldr	r3, [pc, #432]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a6b      	ldr	r2, [pc, #428]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d013      	beq.n	800c248 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c220:	f7fd fae2 	bl	80097e8 <HAL_GetTick>
 800c224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c226:	e008      	b.n	800c23a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c228:	f7fd fade 	bl	80097e8 <HAL_GetTick>
 800c22c:	4602      	mov	r2, r0
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	2b64      	cmp	r3, #100	; 0x64
 800c234:	d901      	bls.n	800c23a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c236:	2303      	movs	r3, #3
 800c238:	e21f      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c23a:	4b61      	ldr	r3, [pc, #388]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c242:	2b00      	cmp	r3, #0
 800c244:	d0f0      	beq.n	800c228 <HAL_RCC_OscConfig+0xe8>
 800c246:	e014      	b.n	800c272 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c248:	f7fd face 	bl	80097e8 <HAL_GetTick>
 800c24c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c24e:	e008      	b.n	800c262 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c250:	f7fd faca 	bl	80097e8 <HAL_GetTick>
 800c254:	4602      	mov	r2, r0
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	1ad3      	subs	r3, r2, r3
 800c25a:	2b64      	cmp	r3, #100	; 0x64
 800c25c:	d901      	bls.n	800c262 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c25e:	2303      	movs	r3, #3
 800c260:	e20b      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c262:	4b57      	ldr	r3, [pc, #348]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1f0      	bne.n	800c250 <HAL_RCC_OscConfig+0x110>
 800c26e:	e000      	b.n	800c272 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f003 0302 	and.w	r3, r3, #2
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d069      	beq.n	800c352 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c27e:	4b50      	ldr	r3, [pc, #320]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	f003 030c 	and.w	r3, r3, #12
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00b      	beq.n	800c2a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c28a:	4b4d      	ldr	r3, [pc, #308]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	f003 030c 	and.w	r3, r3, #12
 800c292:	2b08      	cmp	r3, #8
 800c294:	d11c      	bne.n	800c2d0 <HAL_RCC_OscConfig+0x190>
 800c296:	4b4a      	ldr	r3, [pc, #296]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d116      	bne.n	800c2d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c2a2:	4b47      	ldr	r3, [pc, #284]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f003 0302 	and.w	r3, r3, #2
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d005      	beq.n	800c2ba <HAL_RCC_OscConfig+0x17a>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d001      	beq.n	800c2ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e1df      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c2ba:	4b41      	ldr	r3, [pc, #260]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	00db      	lsls	r3, r3, #3
 800c2c8:	493d      	ldr	r1, [pc, #244]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c2ce:	e040      	b.n	800c352 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d023      	beq.n	800c320 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c2d8:	4b39      	ldr	r3, [pc, #228]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a38      	ldr	r2, [pc, #224]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c2de:	f043 0301 	orr.w	r3, r3, #1
 800c2e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2e4:	f7fd fa80 	bl	80097e8 <HAL_GetTick>
 800c2e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c2ea:	e008      	b.n	800c2fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c2ec:	f7fd fa7c 	bl	80097e8 <HAL_GetTick>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	1ad3      	subs	r3, r2, r3
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	d901      	bls.n	800c2fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c2fa:	2303      	movs	r3, #3
 800c2fc:	e1bd      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c2fe:	4b30      	ldr	r3, [pc, #192]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f003 0302 	and.w	r3, r3, #2
 800c306:	2b00      	cmp	r3, #0
 800c308:	d0f0      	beq.n	800c2ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c30a:	4b2d      	ldr	r3, [pc, #180]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	00db      	lsls	r3, r3, #3
 800c318:	4929      	ldr	r1, [pc, #164]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c31a:	4313      	orrs	r3, r2
 800c31c:	600b      	str	r3, [r1, #0]
 800c31e:	e018      	b.n	800c352 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c320:	4b27      	ldr	r3, [pc, #156]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a26      	ldr	r2, [pc, #152]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c326:	f023 0301 	bic.w	r3, r3, #1
 800c32a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c32c:	f7fd fa5c 	bl	80097e8 <HAL_GetTick>
 800c330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c332:	e008      	b.n	800c346 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c334:	f7fd fa58 	bl	80097e8 <HAL_GetTick>
 800c338:	4602      	mov	r2, r0
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	2b02      	cmp	r3, #2
 800c340:	d901      	bls.n	800c346 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c342:	2303      	movs	r3, #3
 800c344:	e199      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c346:	4b1e      	ldr	r3, [pc, #120]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f003 0302 	and.w	r3, r3, #2
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1f0      	bne.n	800c334 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f003 0308 	and.w	r3, r3, #8
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d038      	beq.n	800c3d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d019      	beq.n	800c39a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c366:	4b16      	ldr	r3, [pc, #88]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c36a:	4a15      	ldr	r2, [pc, #84]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c36c:	f043 0301 	orr.w	r3, r3, #1
 800c370:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c372:	f7fd fa39 	bl	80097e8 <HAL_GetTick>
 800c376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c378:	e008      	b.n	800c38c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c37a:	f7fd fa35 	bl	80097e8 <HAL_GetTick>
 800c37e:	4602      	mov	r2, r0
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	2b02      	cmp	r3, #2
 800c386:	d901      	bls.n	800c38c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c388:	2303      	movs	r3, #3
 800c38a:	e176      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c38c:	4b0c      	ldr	r3, [pc, #48]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c38e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c390:	f003 0302 	and.w	r3, r3, #2
 800c394:	2b00      	cmp	r3, #0
 800c396:	d0f0      	beq.n	800c37a <HAL_RCC_OscConfig+0x23a>
 800c398:	e01a      	b.n	800c3d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c39a:	4b09      	ldr	r3, [pc, #36]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c39c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c39e:	4a08      	ldr	r2, [pc, #32]	; (800c3c0 <HAL_RCC_OscConfig+0x280>)
 800c3a0:	f023 0301 	bic.w	r3, r3, #1
 800c3a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3a6:	f7fd fa1f 	bl	80097e8 <HAL_GetTick>
 800c3aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c3ac:	e00a      	b.n	800c3c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c3ae:	f7fd fa1b 	bl	80097e8 <HAL_GetTick>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d903      	bls.n	800c3c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c3bc:	2303      	movs	r3, #3
 800c3be:	e15c      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
 800c3c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c3c4:	4b91      	ldr	r3, [pc, #580]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c3c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3c8:	f003 0302 	and.w	r3, r3, #2
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1ee      	bne.n	800c3ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 0304 	and.w	r3, r3, #4
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f000 80a4 	beq.w	800c526 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c3de:	4b8b      	ldr	r3, [pc, #556]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10d      	bne.n	800c406 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c3ea:	4b88      	ldr	r3, [pc, #544]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ee:	4a87      	ldr	r2, [pc, #540]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c3f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3f4:	6413      	str	r3, [r2, #64]	; 0x40
 800c3f6:	4b85      	ldr	r3, [pc, #532]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3fe:	60bb      	str	r3, [r7, #8]
 800c400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c402:	2301      	movs	r3, #1
 800c404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c406:	4b82      	ldr	r3, [pc, #520]	; (800c610 <HAL_RCC_OscConfig+0x4d0>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d118      	bne.n	800c444 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c412:	4b7f      	ldr	r3, [pc, #508]	; (800c610 <HAL_RCC_OscConfig+0x4d0>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a7e      	ldr	r2, [pc, #504]	; (800c610 <HAL_RCC_OscConfig+0x4d0>)
 800c418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c41c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c41e:	f7fd f9e3 	bl	80097e8 <HAL_GetTick>
 800c422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c424:	e008      	b.n	800c438 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c426:	f7fd f9df 	bl	80097e8 <HAL_GetTick>
 800c42a:	4602      	mov	r2, r0
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	2b64      	cmp	r3, #100	; 0x64
 800c432:	d901      	bls.n	800c438 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c434:	2303      	movs	r3, #3
 800c436:	e120      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c438:	4b75      	ldr	r3, [pc, #468]	; (800c610 <HAL_RCC_OscConfig+0x4d0>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c440:	2b00      	cmp	r3, #0
 800c442:	d0f0      	beq.n	800c426 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d106      	bne.n	800c45a <HAL_RCC_OscConfig+0x31a>
 800c44c:	4b6f      	ldr	r3, [pc, #444]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c44e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c450:	4a6e      	ldr	r2, [pc, #440]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c452:	f043 0301 	orr.w	r3, r3, #1
 800c456:	6713      	str	r3, [r2, #112]	; 0x70
 800c458:	e02d      	b.n	800c4b6 <HAL_RCC_OscConfig+0x376>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10c      	bne.n	800c47c <HAL_RCC_OscConfig+0x33c>
 800c462:	4b6a      	ldr	r3, [pc, #424]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c466:	4a69      	ldr	r2, [pc, #420]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c468:	f023 0301 	bic.w	r3, r3, #1
 800c46c:	6713      	str	r3, [r2, #112]	; 0x70
 800c46e:	4b67      	ldr	r3, [pc, #412]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c472:	4a66      	ldr	r2, [pc, #408]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c474:	f023 0304 	bic.w	r3, r3, #4
 800c478:	6713      	str	r3, [r2, #112]	; 0x70
 800c47a:	e01c      	b.n	800c4b6 <HAL_RCC_OscConfig+0x376>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	2b05      	cmp	r3, #5
 800c482:	d10c      	bne.n	800c49e <HAL_RCC_OscConfig+0x35e>
 800c484:	4b61      	ldr	r3, [pc, #388]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c488:	4a60      	ldr	r2, [pc, #384]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c48a:	f043 0304 	orr.w	r3, r3, #4
 800c48e:	6713      	str	r3, [r2, #112]	; 0x70
 800c490:	4b5e      	ldr	r3, [pc, #376]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c494:	4a5d      	ldr	r2, [pc, #372]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c496:	f043 0301 	orr.w	r3, r3, #1
 800c49a:	6713      	str	r3, [r2, #112]	; 0x70
 800c49c:	e00b      	b.n	800c4b6 <HAL_RCC_OscConfig+0x376>
 800c49e:	4b5b      	ldr	r3, [pc, #364]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4a2:	4a5a      	ldr	r2, [pc, #360]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c4a4:	f023 0301 	bic.w	r3, r3, #1
 800c4a8:	6713      	str	r3, [r2, #112]	; 0x70
 800c4aa:	4b58      	ldr	r3, [pc, #352]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ae:	4a57      	ldr	r2, [pc, #348]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c4b0:	f023 0304 	bic.w	r3, r3, #4
 800c4b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	689b      	ldr	r3, [r3, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d015      	beq.n	800c4ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4be:	f7fd f993 	bl	80097e8 <HAL_GetTick>
 800c4c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4c4:	e00a      	b.n	800c4dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c4c6:	f7fd f98f 	bl	80097e8 <HAL_GetTick>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	1ad3      	subs	r3, r2, r3
 800c4d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d901      	bls.n	800c4dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	e0ce      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4dc:	4b4b      	ldr	r3, [pc, #300]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c4de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4e0:	f003 0302 	and.w	r3, r3, #2
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d0ee      	beq.n	800c4c6 <HAL_RCC_OscConfig+0x386>
 800c4e8:	e014      	b.n	800c514 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4ea:	f7fd f97d 	bl	80097e8 <HAL_GetTick>
 800c4ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c4f0:	e00a      	b.n	800c508 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c4f2:	f7fd f979 	bl	80097e8 <HAL_GetTick>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c500:	4293      	cmp	r3, r2
 800c502:	d901      	bls.n	800c508 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c504:	2303      	movs	r3, #3
 800c506:	e0b8      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c508:	4b40      	ldr	r3, [pc, #256]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c50c:	f003 0302 	and.w	r3, r3, #2
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1ee      	bne.n	800c4f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c514:	7dfb      	ldrb	r3, [r7, #23]
 800c516:	2b01      	cmp	r3, #1
 800c518:	d105      	bne.n	800c526 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c51a:	4b3c      	ldr	r3, [pc, #240]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c51e:	4a3b      	ldr	r2, [pc, #236]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c524:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 80a4 	beq.w	800c678 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c530:	4b36      	ldr	r3, [pc, #216]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	f003 030c 	and.w	r3, r3, #12
 800c538:	2b08      	cmp	r3, #8
 800c53a:	d06b      	beq.n	800c614 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	699b      	ldr	r3, [r3, #24]
 800c540:	2b02      	cmp	r3, #2
 800c542:	d149      	bne.n	800c5d8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c544:	4b31      	ldr	r3, [pc, #196]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a30      	ldr	r2, [pc, #192]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c54a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c54e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c550:	f7fd f94a 	bl	80097e8 <HAL_GetTick>
 800c554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c556:	e008      	b.n	800c56a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c558:	f7fd f946 	bl	80097e8 <HAL_GetTick>
 800c55c:	4602      	mov	r2, r0
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	2b02      	cmp	r3, #2
 800c564:	d901      	bls.n	800c56a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c566:	2303      	movs	r3, #3
 800c568:	e087      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c56a:	4b28      	ldr	r3, [pc, #160]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1f0      	bne.n	800c558 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	69da      	ldr	r2, [r3, #28]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a1b      	ldr	r3, [r3, #32]
 800c57e:	431a      	orrs	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c584:	019b      	lsls	r3, r3, #6
 800c586:	431a      	orrs	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58c:	085b      	lsrs	r3, r3, #1
 800c58e:	3b01      	subs	r3, #1
 800c590:	041b      	lsls	r3, r3, #16
 800c592:	431a      	orrs	r2, r3
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c598:	061b      	lsls	r3, r3, #24
 800c59a:	4313      	orrs	r3, r2
 800c59c:	4a1b      	ldr	r2, [pc, #108]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c59e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5a2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c5a4:	4b19      	ldr	r3, [pc, #100]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a18      	ldr	r2, [pc, #96]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c5aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c5ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5b0:	f7fd f91a 	bl	80097e8 <HAL_GetTick>
 800c5b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c5b6:	e008      	b.n	800c5ca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5b8:	f7fd f916 	bl	80097e8 <HAL_GetTick>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d901      	bls.n	800c5ca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	e057      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c5ca:	4b10      	ldr	r3, [pc, #64]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d0f0      	beq.n	800c5b8 <HAL_RCC_OscConfig+0x478>
 800c5d6:	e04f      	b.n	800c678 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c5d8:	4b0c      	ldr	r3, [pc, #48]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a0b      	ldr	r2, [pc, #44]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c5de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c5e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5e4:	f7fd f900 	bl	80097e8 <HAL_GetTick>
 800c5e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5ea:	e008      	b.n	800c5fe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5ec:	f7fd f8fc 	bl	80097e8 <HAL_GetTick>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	1ad3      	subs	r3, r2, r3
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	d901      	bls.n	800c5fe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800c5fa:	2303      	movs	r3, #3
 800c5fc:	e03d      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5fe:	4b03      	ldr	r3, [pc, #12]	; (800c60c <HAL_RCC_OscConfig+0x4cc>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1f0      	bne.n	800c5ec <HAL_RCC_OscConfig+0x4ac>
 800c60a:	e035      	b.n	800c678 <HAL_RCC_OscConfig+0x538>
 800c60c:	40023800 	.word	0x40023800
 800c610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c614:	4b1b      	ldr	r3, [pc, #108]	; (800c684 <HAL_RCC_OscConfig+0x544>)
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	699b      	ldr	r3, [r3, #24]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d028      	beq.n	800c674 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d121      	bne.n	800c674 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d11a      	bne.n	800c674 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c644:	4013      	ands	r3, r2
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c64a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d111      	bne.n	800c674 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c65a:	085b      	lsrs	r3, r3, #1
 800c65c:	3b01      	subs	r3, #1
 800c65e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c660:	429a      	cmp	r2, r3
 800c662:	d107      	bne.n	800c674 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c670:	429a      	cmp	r2, r3
 800c672:	d001      	beq.n	800c678 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800c674:	2301      	movs	r3, #1
 800c676:	e000      	b.n	800c67a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3718      	adds	r7, #24
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	40023800 	.word	0x40023800

0800c688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c692:	2300      	movs	r3, #0
 800c694:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d101      	bne.n	800c6a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c69c:	2301      	movs	r3, #1
 800c69e:	e0d0      	b.n	800c842 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c6a0:	4b6a      	ldr	r3, [pc, #424]	; (800c84c <HAL_RCC_ClockConfig+0x1c4>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 030f 	and.w	r3, r3, #15
 800c6a8:	683a      	ldr	r2, [r7, #0]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d910      	bls.n	800c6d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6ae:	4b67      	ldr	r3, [pc, #412]	; (800c84c <HAL_RCC_ClockConfig+0x1c4>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f023 020f 	bic.w	r2, r3, #15
 800c6b6:	4965      	ldr	r1, [pc, #404]	; (800c84c <HAL_RCC_ClockConfig+0x1c4>)
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6be:	4b63      	ldr	r3, [pc, #396]	; (800c84c <HAL_RCC_ClockConfig+0x1c4>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f003 030f 	and.w	r3, r3, #15
 800c6c6:	683a      	ldr	r2, [r7, #0]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d001      	beq.n	800c6d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	e0b8      	b.n	800c842 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f003 0302 	and.w	r3, r3, #2
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d020      	beq.n	800c71e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 0304 	and.w	r3, r3, #4
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d005      	beq.n	800c6f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c6e8:	4b59      	ldr	r3, [pc, #356]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	4a58      	ldr	r2, [pc, #352]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c6ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c6f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 0308 	and.w	r3, r3, #8
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d005      	beq.n	800c70c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c700:	4b53      	ldr	r3, [pc, #332]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	4a52      	ldr	r2, [pc, #328]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c706:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c70a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c70c:	4b50      	ldr	r3, [pc, #320]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	494d      	ldr	r1, [pc, #308]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c71a:	4313      	orrs	r3, r2
 800c71c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f003 0301 	and.w	r3, r3, #1
 800c726:	2b00      	cmp	r3, #0
 800c728:	d040      	beq.n	800c7ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d107      	bne.n	800c742 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c732:	4b47      	ldr	r3, [pc, #284]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d115      	bne.n	800c76a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c73e:	2301      	movs	r3, #1
 800c740:	e07f      	b.n	800c842 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	2b02      	cmp	r3, #2
 800c748:	d107      	bne.n	800c75a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c74a:	4b41      	ldr	r3, [pc, #260]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d109      	bne.n	800c76a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c756:	2301      	movs	r3, #1
 800c758:	e073      	b.n	800c842 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c75a:	4b3d      	ldr	r3, [pc, #244]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f003 0302 	and.w	r3, r3, #2
 800c762:	2b00      	cmp	r3, #0
 800c764:	d101      	bne.n	800c76a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	e06b      	b.n	800c842 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c76a:	4b39      	ldr	r3, [pc, #228]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	f023 0203 	bic.w	r2, r3, #3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	4936      	ldr	r1, [pc, #216]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c778:	4313      	orrs	r3, r2
 800c77a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c77c:	f7fd f834 	bl	80097e8 <HAL_GetTick>
 800c780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c782:	e00a      	b.n	800c79a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c784:	f7fd f830 	bl	80097e8 <HAL_GetTick>
 800c788:	4602      	mov	r2, r0
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	1ad3      	subs	r3, r2, r3
 800c78e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c792:	4293      	cmp	r3, r2
 800c794:	d901      	bls.n	800c79a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c796:	2303      	movs	r3, #3
 800c798:	e053      	b.n	800c842 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c79a:	4b2d      	ldr	r3, [pc, #180]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	f003 020c 	and.w	r2, r3, #12
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d1eb      	bne.n	800c784 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c7ac:	4b27      	ldr	r3, [pc, #156]	; (800c84c <HAL_RCC_ClockConfig+0x1c4>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 030f 	and.w	r3, r3, #15
 800c7b4:	683a      	ldr	r2, [r7, #0]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d210      	bcs.n	800c7dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7ba:	4b24      	ldr	r3, [pc, #144]	; (800c84c <HAL_RCC_ClockConfig+0x1c4>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f023 020f 	bic.w	r2, r3, #15
 800c7c2:	4922      	ldr	r1, [pc, #136]	; (800c84c <HAL_RCC_ClockConfig+0x1c4>)
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c7ca:	4b20      	ldr	r3, [pc, #128]	; (800c84c <HAL_RCC_ClockConfig+0x1c4>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f003 030f 	and.w	r3, r3, #15
 800c7d2:	683a      	ldr	r2, [r7, #0]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d001      	beq.n	800c7dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e032      	b.n	800c842 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 0304 	and.w	r3, r3, #4
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d008      	beq.n	800c7fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c7e8:	4b19      	ldr	r3, [pc, #100]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	4916      	ldr	r1, [pc, #88]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f003 0308 	and.w	r3, r3, #8
 800c802:	2b00      	cmp	r3, #0
 800c804:	d009      	beq.n	800c81a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c806:	4b12      	ldr	r3, [pc, #72]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	691b      	ldr	r3, [r3, #16]
 800c812:	00db      	lsls	r3, r3, #3
 800c814:	490e      	ldr	r1, [pc, #56]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c816:	4313      	orrs	r3, r2
 800c818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c81a:	f000 f821 	bl	800c860 <HAL_RCC_GetSysClockFreq>
 800c81e:	4602      	mov	r2, r0
 800c820:	4b0b      	ldr	r3, [pc, #44]	; (800c850 <HAL_RCC_ClockConfig+0x1c8>)
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	091b      	lsrs	r3, r3, #4
 800c826:	f003 030f 	and.w	r3, r3, #15
 800c82a:	490a      	ldr	r1, [pc, #40]	; (800c854 <HAL_RCC_ClockConfig+0x1cc>)
 800c82c:	5ccb      	ldrb	r3, [r1, r3]
 800c82e:	fa22 f303 	lsr.w	r3, r2, r3
 800c832:	4a09      	ldr	r2, [pc, #36]	; (800c858 <HAL_RCC_ClockConfig+0x1d0>)
 800c834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c836:	4b09      	ldr	r3, [pc, #36]	; (800c85c <HAL_RCC_ClockConfig+0x1d4>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fc fc9a 	bl	8009174 <HAL_InitTick>

  return HAL_OK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	40023c00 	.word	0x40023c00
 800c850:	40023800 	.word	0x40023800
 800c854:	08027260 	.word	0x08027260
 800c858:	20000004 	.word	0x20000004
 800c85c:	20000008 	.word	0x20000008

0800c860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c864:	b090      	sub	sp, #64	; 0x40
 800c866:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c868:	2300      	movs	r3, #0
 800c86a:	637b      	str	r3, [r7, #52]	; 0x34
 800c86c:	2300      	movs	r3, #0
 800c86e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c870:	2300      	movs	r3, #0
 800c872:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c878:	4b59      	ldr	r3, [pc, #356]	; (800c9e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c87a:	689b      	ldr	r3, [r3, #8]
 800c87c:	f003 030c 	and.w	r3, r3, #12
 800c880:	2b08      	cmp	r3, #8
 800c882:	d00d      	beq.n	800c8a0 <HAL_RCC_GetSysClockFreq+0x40>
 800c884:	2b08      	cmp	r3, #8
 800c886:	f200 80a1 	bhi.w	800c9cc <HAL_RCC_GetSysClockFreq+0x16c>
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d002      	beq.n	800c894 <HAL_RCC_GetSysClockFreq+0x34>
 800c88e:	2b04      	cmp	r3, #4
 800c890:	d003      	beq.n	800c89a <HAL_RCC_GetSysClockFreq+0x3a>
 800c892:	e09b      	b.n	800c9cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c894:	4b53      	ldr	r3, [pc, #332]	; (800c9e4 <HAL_RCC_GetSysClockFreq+0x184>)
 800c896:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c898:	e09b      	b.n	800c9d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c89a:	4b53      	ldr	r3, [pc, #332]	; (800c9e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800c89c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c89e:	e098      	b.n	800c9d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c8a0:	4b4f      	ldr	r3, [pc, #316]	; (800c9e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c8aa:	4b4d      	ldr	r3, [pc, #308]	; (800c9e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d028      	beq.n	800c908 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c8b6:	4b4a      	ldr	r3, [pc, #296]	; (800c9e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	099b      	lsrs	r3, r3, #6
 800c8bc:	2200      	movs	r2, #0
 800c8be:	623b      	str	r3, [r7, #32]
 800c8c0:	627a      	str	r2, [r7, #36]	; 0x24
 800c8c2:	6a3b      	ldr	r3, [r7, #32]
 800c8c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	4b47      	ldr	r3, [pc, #284]	; (800c9e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800c8cc:	fb03 f201 	mul.w	r2, r3, r1
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	fb00 f303 	mul.w	r3, r0, r3
 800c8d6:	4413      	add	r3, r2
 800c8d8:	4a43      	ldr	r2, [pc, #268]	; (800c9e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800c8da:	fba0 1202 	umull	r1, r2, r0, r2
 800c8de:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8e0:	460a      	mov	r2, r1
 800c8e2:	62ba      	str	r2, [r7, #40]	; 0x28
 800c8e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8e6:	4413      	add	r3, r2
 800c8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	61bb      	str	r3, [r7, #24]
 800c8f0:	61fa      	str	r2, [r7, #28]
 800c8f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c8f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c8fa:	f7f4 f995 	bl	8000c28 <__aeabi_uldivmod>
 800c8fe:	4602      	mov	r2, r0
 800c900:	460b      	mov	r3, r1
 800c902:	4613      	mov	r3, r2
 800c904:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c906:	e053      	b.n	800c9b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c908:	4b35      	ldr	r3, [pc, #212]	; (800c9e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	099b      	lsrs	r3, r3, #6
 800c90e:	2200      	movs	r2, #0
 800c910:	613b      	str	r3, [r7, #16]
 800c912:	617a      	str	r2, [r7, #20]
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c91a:	f04f 0b00 	mov.w	fp, #0
 800c91e:	4652      	mov	r2, sl
 800c920:	465b      	mov	r3, fp
 800c922:	f04f 0000 	mov.w	r0, #0
 800c926:	f04f 0100 	mov.w	r1, #0
 800c92a:	0159      	lsls	r1, r3, #5
 800c92c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c930:	0150      	lsls	r0, r2, #5
 800c932:	4602      	mov	r2, r0
 800c934:	460b      	mov	r3, r1
 800c936:	ebb2 080a 	subs.w	r8, r2, sl
 800c93a:	eb63 090b 	sbc.w	r9, r3, fp
 800c93e:	f04f 0200 	mov.w	r2, #0
 800c942:	f04f 0300 	mov.w	r3, #0
 800c946:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c94a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c94e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c952:	ebb2 0408 	subs.w	r4, r2, r8
 800c956:	eb63 0509 	sbc.w	r5, r3, r9
 800c95a:	f04f 0200 	mov.w	r2, #0
 800c95e:	f04f 0300 	mov.w	r3, #0
 800c962:	00eb      	lsls	r3, r5, #3
 800c964:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c968:	00e2      	lsls	r2, r4, #3
 800c96a:	4614      	mov	r4, r2
 800c96c:	461d      	mov	r5, r3
 800c96e:	eb14 030a 	adds.w	r3, r4, sl
 800c972:	603b      	str	r3, [r7, #0]
 800c974:	eb45 030b 	adc.w	r3, r5, fp
 800c978:	607b      	str	r3, [r7, #4]
 800c97a:	f04f 0200 	mov.w	r2, #0
 800c97e:	f04f 0300 	mov.w	r3, #0
 800c982:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c986:	4629      	mov	r1, r5
 800c988:	028b      	lsls	r3, r1, #10
 800c98a:	4621      	mov	r1, r4
 800c98c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c990:	4621      	mov	r1, r4
 800c992:	028a      	lsls	r2, r1, #10
 800c994:	4610      	mov	r0, r2
 800c996:	4619      	mov	r1, r3
 800c998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c99a:	2200      	movs	r2, #0
 800c99c:	60bb      	str	r3, [r7, #8]
 800c99e:	60fa      	str	r2, [r7, #12]
 800c9a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c9a4:	f7f4 f940 	bl	8000c28 <__aeabi_uldivmod>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	4613      	mov	r3, r2
 800c9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c9b0:	4b0b      	ldr	r3, [pc, #44]	; (800c9e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	0c1b      	lsrs	r3, r3, #16
 800c9b6:	f003 0303 	and.w	r3, r3, #3
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	005b      	lsls	r3, r3, #1
 800c9be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800c9c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c9ca:	e002      	b.n	800c9d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c9cc:	4b05      	ldr	r3, [pc, #20]	; (800c9e4 <HAL_RCC_GetSysClockFreq+0x184>)
 800c9ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c9d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3740      	adds	r7, #64	; 0x40
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9de:	bf00      	nop
 800c9e0:	40023800 	.word	0x40023800
 800c9e4:	00f42400 	.word	0x00f42400
 800c9e8:	017d7840 	.word	0x017d7840

0800c9ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c9f0:	4b03      	ldr	r3, [pc, #12]	; (800ca00 <HAL_RCC_GetHCLKFreq+0x14>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	20000004 	.word	0x20000004

0800ca04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ca08:	f7ff fff0 	bl	800c9ec <HAL_RCC_GetHCLKFreq>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	4b05      	ldr	r3, [pc, #20]	; (800ca24 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	0a9b      	lsrs	r3, r3, #10
 800ca14:	f003 0307 	and.w	r3, r3, #7
 800ca18:	4903      	ldr	r1, [pc, #12]	; (800ca28 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ca1a:	5ccb      	ldrb	r3, [r1, r3]
 800ca1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	40023800 	.word	0x40023800
 800ca28:	08027270 	.word	0x08027270

0800ca2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ca30:	f7ff ffdc 	bl	800c9ec <HAL_RCC_GetHCLKFreq>
 800ca34:	4602      	mov	r2, r0
 800ca36:	4b05      	ldr	r3, [pc, #20]	; (800ca4c <HAL_RCC_GetPCLK2Freq+0x20>)
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	0b5b      	lsrs	r3, r3, #13
 800ca3c:	f003 0307 	and.w	r3, r3, #7
 800ca40:	4903      	ldr	r1, [pc, #12]	; (800ca50 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ca42:	5ccb      	ldrb	r3, [r1, r3]
 800ca44:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	40023800 	.word	0x40023800
 800ca50:	08027270 	.word	0x08027270

0800ca54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	220f      	movs	r2, #15
 800ca62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ca64:	4b12      	ldr	r3, [pc, #72]	; (800cab0 <HAL_RCC_GetClockConfig+0x5c>)
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	f003 0203 	and.w	r2, r3, #3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ca70:	4b0f      	ldr	r3, [pc, #60]	; (800cab0 <HAL_RCC_GetClockConfig+0x5c>)
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ca7c:	4b0c      	ldr	r3, [pc, #48]	; (800cab0 <HAL_RCC_GetClockConfig+0x5c>)
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ca88:	4b09      	ldr	r3, [pc, #36]	; (800cab0 <HAL_RCC_GetClockConfig+0x5c>)
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	08db      	lsrs	r3, r3, #3
 800ca8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ca96:	4b07      	ldr	r3, [pc, #28]	; (800cab4 <HAL_RCC_GetClockConfig+0x60>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f003 020f 	and.w	r2, r3, #15
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	601a      	str	r2, [r3, #0]
}
 800caa2:	bf00      	nop
 800caa4:	370c      	adds	r7, #12
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	40023800 	.word	0x40023800
 800cab4:	40023c00 	.word	0x40023c00

0800cab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b088      	sub	sp, #32
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cac0:	2300      	movs	r3, #0
 800cac2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800cac4:	2300      	movs	r3, #0
 800cac6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800cac8:	2300      	movs	r3, #0
 800caca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800cacc:	2300      	movs	r3, #0
 800cace:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800cad0:	2300      	movs	r3, #0
 800cad2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f003 0301 	and.w	r3, r3, #1
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d012      	beq.n	800cb06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cae0:	4b69      	ldr	r3, [pc, #420]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	4a68      	ldr	r2, [pc, #416]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cae6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800caea:	6093      	str	r3, [r2, #8]
 800caec:	4b66      	ldr	r3, [pc, #408]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800caee:	689a      	ldr	r2, [r3, #8]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caf4:	4964      	ldr	r1, [pc, #400]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800caf6:	4313      	orrs	r3, r2
 800caf8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d101      	bne.n	800cb06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cb02:	2301      	movs	r3, #1
 800cb04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d017      	beq.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cb12:	4b5d      	ldr	r3, [pc, #372]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb20:	4959      	ldr	r1, [pc, #356]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb22:	4313      	orrs	r3, r2
 800cb24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb30:	d101      	bne.n	800cb36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cb32:	2301      	movs	r3, #1
 800cb34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d101      	bne.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d017      	beq.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cb4e:	4b4e      	ldr	r3, [pc, #312]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5c:	494a      	ldr	r1, [pc, #296]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb6c:	d101      	bne.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d001      	beq.n	800cb8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f003 0320 	and.w	r3, r3, #32
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f000 808b 	beq.w	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cb9c:	4b3a      	ldr	r3, [pc, #232]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba0:	4a39      	ldr	r2, [pc, #228]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cba6:	6413      	str	r3, [r2, #64]	; 0x40
 800cba8:	4b37      	ldr	r3, [pc, #220]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbb0:	60bb      	str	r3, [r7, #8]
 800cbb2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cbb4:	4b35      	ldr	r3, [pc, #212]	; (800cc8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a34      	ldr	r2, [pc, #208]	; (800cc8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cbba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbc0:	f7fc fe12 	bl	80097e8 <HAL_GetTick>
 800cbc4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cbc6:	e008      	b.n	800cbda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cbc8:	f7fc fe0e 	bl	80097e8 <HAL_GetTick>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	1ad3      	subs	r3, r2, r3
 800cbd2:	2b64      	cmp	r3, #100	; 0x64
 800cbd4:	d901      	bls.n	800cbda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800cbd6:	2303      	movs	r3, #3
 800cbd8:	e357      	b.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cbda:	4b2c      	ldr	r3, [pc, #176]	; (800cc8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d0f0      	beq.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cbe6:	4b28      	ldr	r3, [pc, #160]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d035      	beq.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbfe:	693a      	ldr	r2, [r7, #16]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d02e      	beq.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cc04:	4b20      	ldr	r3, [pc, #128]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cc0e:	4b1e      	ldr	r3, [pc, #120]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc12:	4a1d      	ldr	r2, [pc, #116]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cc1a:	4b1b      	ldr	r3, [pc, #108]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc1e:	4a1a      	ldr	r2, [pc, #104]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800cc26:	4a18      	ldr	r2, [pc, #96]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cc2c:	4b16      	ldr	r3, [pc, #88]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc30:	f003 0301 	and.w	r3, r3, #1
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d114      	bne.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc38:	f7fc fdd6 	bl	80097e8 <HAL_GetTick>
 800cc3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc3e:	e00a      	b.n	800cc56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cc40:	f7fc fdd2 	bl	80097e8 <HAL_GetTick>
 800cc44:	4602      	mov	r2, r0
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	1ad3      	subs	r3, r2, r3
 800cc4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d901      	bls.n	800cc56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800cc52:	2303      	movs	r3, #3
 800cc54:	e319      	b.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc56:	4b0c      	ldr	r3, [pc, #48]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc5a:	f003 0302 	and.w	r3, r3, #2
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d0ee      	beq.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc6e:	d111      	bne.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800cc70:	4b05      	ldr	r3, [pc, #20]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cc7c:	4b04      	ldr	r3, [pc, #16]	; (800cc90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800cc7e:	400b      	ands	r3, r1
 800cc80:	4901      	ldr	r1, [pc, #4]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc82:	4313      	orrs	r3, r2
 800cc84:	608b      	str	r3, [r1, #8]
 800cc86:	e00b      	b.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800cc88:	40023800 	.word	0x40023800
 800cc8c:	40007000 	.word	0x40007000
 800cc90:	0ffffcff 	.word	0x0ffffcff
 800cc94:	4baa      	ldr	r3, [pc, #680]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	4aa9      	ldr	r2, [pc, #676]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cc9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cc9e:	6093      	str	r3, [r2, #8]
 800cca0:	4ba7      	ldr	r3, [pc, #668]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cca2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ccac:	49a4      	ldr	r1, [pc, #656]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f003 0310 	and.w	r3, r3, #16
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d010      	beq.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ccbe:	4ba0      	ldr	r3, [pc, #640]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ccc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccc4:	4a9e      	ldr	r2, [pc, #632]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ccc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ccca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ccce:	4b9c      	ldr	r3, [pc, #624]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ccd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd8:	4999      	ldr	r1, [pc, #612]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00a      	beq.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ccec:	4b94      	ldr	r3, [pc, #592]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ccee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccfa:	4991      	ldr	r1, [pc, #580]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00a      	beq.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cd0e:	4b8c      	ldr	r3, [pc, #560]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd1c:	4988      	ldr	r1, [pc, #544]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d00a      	beq.n	800cd46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cd30:	4b83      	ldr	r3, [pc, #524]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd3e:	4980      	ldr	r1, [pc, #512]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd40:	4313      	orrs	r3, r2
 800cd42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00a      	beq.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cd52:	4b7b      	ldr	r3, [pc, #492]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd60:	4977      	ldr	r1, [pc, #476]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd62:	4313      	orrs	r3, r2
 800cd64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d00a      	beq.n	800cd8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cd74:	4b72      	ldr	r3, [pc, #456]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd7a:	f023 0203 	bic.w	r2, r3, #3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd82:	496f      	ldr	r1, [pc, #444]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd84:	4313      	orrs	r3, r2
 800cd86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d00a      	beq.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cd96:	4b6a      	ldr	r3, [pc, #424]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd9c:	f023 020c 	bic.w	r2, r3, #12
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cda4:	4966      	ldr	r1, [pc, #408]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cda6:	4313      	orrs	r3, r2
 800cda8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00a      	beq.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cdb8:	4b61      	ldr	r3, [pc, #388]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cdba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdc6:	495e      	ldr	r1, [pc, #376]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00a      	beq.n	800cdf0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cdda:	4b59      	ldr	r3, [pc, #356]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cde0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cde8:	4955      	ldr	r1, [pc, #340]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cdea:	4313      	orrs	r3, r2
 800cdec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00a      	beq.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cdfc:	4b50      	ldr	r3, [pc, #320]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cdfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce0a:	494d      	ldr	r1, [pc, #308]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00a      	beq.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ce1e:	4b48      	ldr	r3, [pc, #288]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce2c:	4944      	ldr	r1, [pc, #272]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00a      	beq.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ce40:	4b3f      	ldr	r3, [pc, #252]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce4e:	493c      	ldr	r1, [pc, #240]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce50:	4313      	orrs	r3, r2
 800ce52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00a      	beq.n	800ce78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ce62:	4b37      	ldr	r3, [pc, #220]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce70:	4933      	ldr	r1, [pc, #204]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce72:	4313      	orrs	r3, r2
 800ce74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d00a      	beq.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ce84:	4b2e      	ldr	r3, [pc, #184]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce92:	492b      	ldr	r1, [pc, #172]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce94:	4313      	orrs	r3, r2
 800ce96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d011      	beq.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800cea6:	4b26      	ldr	r3, [pc, #152]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceb4:	4922      	ldr	r1, [pc, #136]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cec4:	d101      	bne.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800cec6:	2301      	movs	r3, #1
 800cec8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f003 0308 	and.w	r3, r3, #8
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d001      	beq.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800ced6:	2301      	movs	r3, #1
 800ced8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d00a      	beq.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cee6:	4b16      	ldr	r3, [pc, #88]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cef4:	4912      	ldr	r1, [pc, #72]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cef6:	4313      	orrs	r3, r2
 800cef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00b      	beq.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800cf08:	4b0d      	ldr	r3, [pc, #52]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf18:	4909      	ldr	r1, [pc, #36]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d006      	beq.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f000 80d9 	beq.w	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800cf34:	4b02      	ldr	r3, [pc, #8]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a01      	ldr	r2, [pc, #4]	; (800cf40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cf3e:	e001      	b.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800cf40:	40023800 	.word	0x40023800
 800cf44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf46:	f7fc fc4f 	bl	80097e8 <HAL_GetTick>
 800cf4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cf4c:	e008      	b.n	800cf60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800cf4e:	f7fc fc4b 	bl	80097e8 <HAL_GetTick>
 800cf52:	4602      	mov	r2, r0
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	2b64      	cmp	r3, #100	; 0x64
 800cf5a:	d901      	bls.n	800cf60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	e194      	b.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cf60:	4b6c      	ldr	r3, [pc, #432]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1f0      	bne.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f003 0301 	and.w	r3, r3, #1
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d021      	beq.n	800cfbc <HAL_RCCEx_PeriphCLKConfig+0x504>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d11d      	bne.n	800cfbc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800cf80:	4b64      	ldr	r3, [pc, #400]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cf82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf86:	0c1b      	lsrs	r3, r3, #16
 800cf88:	f003 0303 	and.w	r3, r3, #3
 800cf8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cf8e:	4b61      	ldr	r3, [pc, #388]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cf90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf94:	0e1b      	lsrs	r3, r3, #24
 800cf96:	f003 030f 	and.w	r3, r3, #15
 800cf9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	019a      	lsls	r2, r3, #6
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	041b      	lsls	r3, r3, #16
 800cfa6:	431a      	orrs	r2, r3
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	061b      	lsls	r3, r3, #24
 800cfac:	431a      	orrs	r2, r3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	071b      	lsls	r3, r3, #28
 800cfb4:	4957      	ldr	r1, [pc, #348]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d004      	beq.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfd0:	d00a      	beq.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d02e      	beq.n	800d03c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cfe6:	d129      	bne.n	800d03c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800cfe8:	4b4a      	ldr	r3, [pc, #296]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cfea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfee:	0c1b      	lsrs	r3, r3, #16
 800cff0:	f003 0303 	and.w	r3, r3, #3
 800cff4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cff6:	4b47      	ldr	r3, [pc, #284]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cffc:	0f1b      	lsrs	r3, r3, #28
 800cffe:	f003 0307 	and.w	r3, r3, #7
 800d002:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	019a      	lsls	r2, r3, #6
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	041b      	lsls	r3, r3, #16
 800d00e:	431a      	orrs	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	061b      	lsls	r3, r3, #24
 800d016:	431a      	orrs	r2, r3
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	071b      	lsls	r3, r3, #28
 800d01c:	493d      	ldr	r1, [pc, #244]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d01e:	4313      	orrs	r3, r2
 800d020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d024:	4b3b      	ldr	r3, [pc, #236]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d02a:	f023 021f 	bic.w	r2, r3, #31
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d032:	3b01      	subs	r3, #1
 800d034:	4937      	ldr	r1, [pc, #220]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d036:	4313      	orrs	r3, r2
 800d038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d044:	2b00      	cmp	r3, #0
 800d046:	d01d      	beq.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d048:	4b32      	ldr	r3, [pc, #200]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d04a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d04e:	0e1b      	lsrs	r3, r3, #24
 800d050:	f003 030f 	and.w	r3, r3, #15
 800d054:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d056:	4b2f      	ldr	r3, [pc, #188]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d05c:	0f1b      	lsrs	r3, r3, #28
 800d05e:	f003 0307 	and.w	r3, r3, #7
 800d062:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	019a      	lsls	r2, r3, #6
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	691b      	ldr	r3, [r3, #16]
 800d06e:	041b      	lsls	r3, r3, #16
 800d070:	431a      	orrs	r2, r3
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	061b      	lsls	r3, r3, #24
 800d076:	431a      	orrs	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	071b      	lsls	r3, r3, #28
 800d07c:	4925      	ldr	r1, [pc, #148]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d07e:	4313      	orrs	r3, r2
 800d080:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d011      	beq.n	800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	019a      	lsls	r2, r3, #6
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	691b      	ldr	r3, [r3, #16]
 800d09a:	041b      	lsls	r3, r3, #16
 800d09c:	431a      	orrs	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	68db      	ldr	r3, [r3, #12]
 800d0a2:	061b      	lsls	r3, r3, #24
 800d0a4:	431a      	orrs	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	071b      	lsls	r3, r3, #28
 800d0ac:	4919      	ldr	r1, [pc, #100]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d0b4:	4b17      	ldr	r3, [pc, #92]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a16      	ldr	r2, [pc, #88]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d0ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d0be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0c0:	f7fc fb92 	bl	80097e8 <HAL_GetTick>
 800d0c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d0c6:	e008      	b.n	800d0da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d0c8:	f7fc fb8e 	bl	80097e8 <HAL_GetTick>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	1ad3      	subs	r3, r2, r3
 800d0d2:	2b64      	cmp	r3, #100	; 0x64
 800d0d4:	d901      	bls.n	800d0da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d0d6:	2303      	movs	r3, #3
 800d0d8:	e0d7      	b.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d0da:	4b0e      	ldr	r3, [pc, #56]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d0f0      	beq.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	f040 80cd 	bne.w	800d288 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d0ee:	4b09      	ldr	r3, [pc, #36]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a08      	ldr	r2, [pc, #32]	; (800d114 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d0f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0fa:	f7fc fb75 	bl	80097e8 <HAL_GetTick>
 800d0fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d100:	e00a      	b.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d102:	f7fc fb71 	bl	80097e8 <HAL_GetTick>
 800d106:	4602      	mov	r2, r0
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	2b64      	cmp	r3, #100	; 0x64
 800d10e:	d903      	bls.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d110:	2303      	movs	r3, #3
 800d112:	e0ba      	b.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d114:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d118:	4b5e      	ldr	r3, [pc, #376]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d124:	d0ed      	beq.n	800d102 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d003      	beq.n	800d13a <HAL_RCCEx_PeriphCLKConfig+0x682>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d136:	2b00      	cmp	r3, #0
 800d138:	d009      	beq.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d142:	2b00      	cmp	r3, #0
 800d144:	d02e      	beq.n	800d1a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d12a      	bne.n	800d1a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d14e:	4b51      	ldr	r3, [pc, #324]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d154:	0c1b      	lsrs	r3, r3, #16
 800d156:	f003 0303 	and.w	r3, r3, #3
 800d15a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d15c:	4b4d      	ldr	r3, [pc, #308]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d162:	0f1b      	lsrs	r3, r3, #28
 800d164:	f003 0307 	and.w	r3, r3, #7
 800d168:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	695b      	ldr	r3, [r3, #20]
 800d16e:	019a      	lsls	r2, r3, #6
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	041b      	lsls	r3, r3, #16
 800d174:	431a      	orrs	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	699b      	ldr	r3, [r3, #24]
 800d17a:	061b      	lsls	r3, r3, #24
 800d17c:	431a      	orrs	r2, r3
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	071b      	lsls	r3, r3, #28
 800d182:	4944      	ldr	r1, [pc, #272]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d184:	4313      	orrs	r3, r2
 800d186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d18a:	4b42      	ldr	r3, [pc, #264]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d18c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d190:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d198:	3b01      	subs	r3, #1
 800d19a:	021b      	lsls	r3, r3, #8
 800d19c:	493d      	ldr	r1, [pc, #244]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d022      	beq.n	800d1f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1b8:	d11d      	bne.n	800d1f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d1ba:	4b36      	ldr	r3, [pc, #216]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1c0:	0e1b      	lsrs	r3, r3, #24
 800d1c2:	f003 030f 	and.w	r3, r3, #15
 800d1c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d1c8:	4b32      	ldr	r3, [pc, #200]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1ce:	0f1b      	lsrs	r3, r3, #28
 800d1d0:	f003 0307 	and.w	r3, r3, #7
 800d1d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	695b      	ldr	r3, [r3, #20]
 800d1da:	019a      	lsls	r2, r3, #6
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6a1b      	ldr	r3, [r3, #32]
 800d1e0:	041b      	lsls	r3, r3, #16
 800d1e2:	431a      	orrs	r2, r3
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	061b      	lsls	r3, r3, #24
 800d1e8:	431a      	orrs	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	071b      	lsls	r3, r3, #28
 800d1ee:	4929      	ldr	r1, [pc, #164]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f003 0308 	and.w	r3, r3, #8
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d028      	beq.n	800d254 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d202:	4b24      	ldr	r3, [pc, #144]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d208:	0e1b      	lsrs	r3, r3, #24
 800d20a:	f003 030f 	and.w	r3, r3, #15
 800d20e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d210:	4b20      	ldr	r3, [pc, #128]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d216:	0c1b      	lsrs	r3, r3, #16
 800d218:	f003 0303 	and.w	r3, r3, #3
 800d21c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	695b      	ldr	r3, [r3, #20]
 800d222:	019a      	lsls	r2, r3, #6
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	041b      	lsls	r3, r3, #16
 800d228:	431a      	orrs	r2, r3
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	061b      	lsls	r3, r3, #24
 800d22e:	431a      	orrs	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	69db      	ldr	r3, [r3, #28]
 800d234:	071b      	lsls	r3, r3, #28
 800d236:	4917      	ldr	r1, [pc, #92]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d238:	4313      	orrs	r3, r2
 800d23a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d23e:	4b15      	ldr	r3, [pc, #84]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24c:	4911      	ldr	r1, [pc, #68]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d24e:	4313      	orrs	r3, r2
 800d250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d254:	4b0f      	ldr	r3, [pc, #60]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a0e      	ldr	r2, [pc, #56]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d25a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d25e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d260:	f7fc fac2 	bl	80097e8 <HAL_GetTick>
 800d264:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d266:	e008      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d268:	f7fc fabe 	bl	80097e8 <HAL_GetTick>
 800d26c:	4602      	mov	r2, r0
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	1ad3      	subs	r3, r2, r3
 800d272:	2b64      	cmp	r3, #100	; 0x64
 800d274:	d901      	bls.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d276:	2303      	movs	r3, #3
 800d278:	e007      	b.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d27a:	4b06      	ldr	r3, [pc, #24]	; (800d294 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d286:	d1ef      	bne.n	800d268 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800d288:	2300      	movs	r3, #0
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3720      	adds	r7, #32
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	40023800 	.word	0x40023800

0800d298 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	60f8      	str	r0, [r7, #12]
 800d2a0:	60b9      	str	r1, [r7, #8]
 800d2a2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d101      	bne.n	800d2ae <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e038      	b.n	800d320 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d106      	bne.n	800d2c8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f7fb ff4c 	bl	8009160 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	3308      	adds	r3, #8
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	4610      	mov	r0, r2
 800d2d4:	f002 f846 	bl	800f364 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6818      	ldr	r0, [r3, #0]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	68b9      	ldr	r1, [r7, #8]
 800d2e4:	f002 f8ce 	bl	800f484 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6858      	ldr	r0, [r3, #4]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	689a      	ldr	r2, [r3, #8]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f4:	6879      	ldr	r1, [r7, #4]
 800d2f6:	f002 f915 	bl	800f524 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	6892      	ldr	r2, [r2, #8]
 800d302:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	68fa      	ldr	r2, [r7, #12]
 800d30c:	6892      	ldr	r2, [r2, #8]
 800d30e:	f041 0101 	orr.w	r1, r1, #1
 800d312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2201      	movs	r2, #1
 800d31a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3710      	adds	r7, #16
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d101      	bne.n	800d33a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d336:	2301      	movs	r3, #1
 800d338:	e049      	b.n	800d3ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d340:	b2db      	uxtb	r3, r3
 800d342:	2b00      	cmp	r3, #0
 800d344:	d106      	bne.n	800d354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7fb fcbc 	bl	8008ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2202      	movs	r2, #2
 800d358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	3304      	adds	r3, #4
 800d364:	4619      	mov	r1, r3
 800d366:	4610      	mov	r0, r2
 800d368:	f000 f9f6 	bl	800d758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2201      	movs	r2, #1
 800d370:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2201      	movs	r2, #1
 800d388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2201      	movs	r2, #1
 800d398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d3cc:	2300      	movs	r3, #0
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3708      	adds	r7, #8
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
	...

0800d3d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b085      	sub	sp, #20
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d001      	beq.n	800d3f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	e054      	b.n	800d49a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2202      	movs	r2, #2
 800d3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	68da      	ldr	r2, [r3, #12]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f042 0201 	orr.w	r2, r2, #1
 800d406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a26      	ldr	r2, [pc, #152]	; (800d4a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d022      	beq.n	800d458 <HAL_TIM_Base_Start_IT+0x80>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d41a:	d01d      	beq.n	800d458 <HAL_TIM_Base_Start_IT+0x80>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a22      	ldr	r2, [pc, #136]	; (800d4ac <HAL_TIM_Base_Start_IT+0xd4>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d018      	beq.n	800d458 <HAL_TIM_Base_Start_IT+0x80>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a21      	ldr	r2, [pc, #132]	; (800d4b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d013      	beq.n	800d458 <HAL_TIM_Base_Start_IT+0x80>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a1f      	ldr	r2, [pc, #124]	; (800d4b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d00e      	beq.n	800d458 <HAL_TIM_Base_Start_IT+0x80>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4a1e      	ldr	r2, [pc, #120]	; (800d4b8 <HAL_TIM_Base_Start_IT+0xe0>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d009      	beq.n	800d458 <HAL_TIM_Base_Start_IT+0x80>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a1c      	ldr	r2, [pc, #112]	; (800d4bc <HAL_TIM_Base_Start_IT+0xe4>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d004      	beq.n	800d458 <HAL_TIM_Base_Start_IT+0x80>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a1b      	ldr	r2, [pc, #108]	; (800d4c0 <HAL_TIM_Base_Start_IT+0xe8>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d115      	bne.n	800d484 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	689a      	ldr	r2, [r3, #8]
 800d45e:	4b19      	ldr	r3, [pc, #100]	; (800d4c4 <HAL_TIM_Base_Start_IT+0xec>)
 800d460:	4013      	ands	r3, r2
 800d462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2b06      	cmp	r3, #6
 800d468:	d015      	beq.n	800d496 <HAL_TIM_Base_Start_IT+0xbe>
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d470:	d011      	beq.n	800d496 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f042 0201 	orr.w	r2, r2, #1
 800d480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d482:	e008      	b.n	800d496 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	681a      	ldr	r2, [r3, #0]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f042 0201 	orr.w	r2, r2, #1
 800d492:	601a      	str	r2, [r3, #0]
 800d494:	e000      	b.n	800d498 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d496:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d498:	2300      	movs	r3, #0
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3714      	adds	r7, #20
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	40010000 	.word	0x40010000
 800d4ac:	40000400 	.word	0x40000400
 800d4b0:	40000800 	.word	0x40000800
 800d4b4:	40000c00 	.word	0x40000c00
 800d4b8:	40010400 	.word	0x40010400
 800d4bc:	40014000 	.word	0x40014000
 800d4c0:	40001800 	.word	0x40001800
 800d4c4:	00010007 	.word	0x00010007

0800d4c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	691b      	ldr	r3, [r3, #16]
 800d4d6:	f003 0302 	and.w	r3, r3, #2
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	d122      	bne.n	800d524 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	f003 0302 	and.w	r3, r3, #2
 800d4e8:	2b02      	cmp	r3, #2
 800d4ea:	d11b      	bne.n	800d524 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f06f 0202 	mvn.w	r2, #2
 800d4f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	699b      	ldr	r3, [r3, #24]
 800d502:	f003 0303 	and.w	r3, r3, #3
 800d506:	2b00      	cmp	r3, #0
 800d508:	d003      	beq.n	800d512 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 f905 	bl	800d71a <HAL_TIM_IC_CaptureCallback>
 800d510:	e005      	b.n	800d51e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f8f7 	bl	800d706 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 f908 	bl	800d72e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2200      	movs	r2, #0
 800d522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	691b      	ldr	r3, [r3, #16]
 800d52a:	f003 0304 	and.w	r3, r3, #4
 800d52e:	2b04      	cmp	r3, #4
 800d530:	d122      	bne.n	800d578 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	f003 0304 	and.w	r3, r3, #4
 800d53c:	2b04      	cmp	r3, #4
 800d53e:	d11b      	bne.n	800d578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f06f 0204 	mvn.w	r2, #4
 800d548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2202      	movs	r2, #2
 800d54e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	699b      	ldr	r3, [r3, #24]
 800d556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d003      	beq.n	800d566 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 f8db 	bl	800d71a <HAL_TIM_IC_CaptureCallback>
 800d564:	e005      	b.n	800d572 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 f8cd 	bl	800d706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 f8de 	bl	800d72e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	691b      	ldr	r3, [r3, #16]
 800d57e:	f003 0308 	and.w	r3, r3, #8
 800d582:	2b08      	cmp	r3, #8
 800d584:	d122      	bne.n	800d5cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	f003 0308 	and.w	r3, r3, #8
 800d590:	2b08      	cmp	r3, #8
 800d592:	d11b      	bne.n	800d5cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f06f 0208 	mvn.w	r2, #8
 800d59c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2204      	movs	r2, #4
 800d5a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	69db      	ldr	r3, [r3, #28]
 800d5aa:	f003 0303 	and.w	r3, r3, #3
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d003      	beq.n	800d5ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 f8b1 	bl	800d71a <HAL_TIM_IC_CaptureCallback>
 800d5b8:	e005      	b.n	800d5c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 f8a3 	bl	800d706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 f8b4 	bl	800d72e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	691b      	ldr	r3, [r3, #16]
 800d5d2:	f003 0310 	and.w	r3, r3, #16
 800d5d6:	2b10      	cmp	r3, #16
 800d5d8:	d122      	bne.n	800d620 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	68db      	ldr	r3, [r3, #12]
 800d5e0:	f003 0310 	and.w	r3, r3, #16
 800d5e4:	2b10      	cmp	r3, #16
 800d5e6:	d11b      	bne.n	800d620 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f06f 0210 	mvn.w	r2, #16
 800d5f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2208      	movs	r2, #8
 800d5f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	69db      	ldr	r3, [r3, #28]
 800d5fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d602:	2b00      	cmp	r3, #0
 800d604:	d003      	beq.n	800d60e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 f887 	bl	800d71a <HAL_TIM_IC_CaptureCallback>
 800d60c:	e005      	b.n	800d61a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 f879 	bl	800d706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 f88a 	bl	800d72e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	f003 0301 	and.w	r3, r3, #1
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d10e      	bne.n	800d64c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	f003 0301 	and.w	r3, r3, #1
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d107      	bne.n	800d64c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f06f 0201 	mvn.w	r2, #1
 800d644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f7f4 fc56 	bl	8001ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	691b      	ldr	r3, [r3, #16]
 800d652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d656:	2b80      	cmp	r3, #128	; 0x80
 800d658:	d10e      	bne.n	800d678 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d664:	2b80      	cmp	r3, #128	; 0x80
 800d666:	d107      	bne.n	800d678 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 f9a8 	bl	800d9c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	691b      	ldr	r3, [r3, #16]
 800d67e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d686:	d10e      	bne.n	800d6a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d692:	2b80      	cmp	r3, #128	; 0x80
 800d694:	d107      	bne.n	800d6a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d69e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 f99b 	bl	800d9dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	691b      	ldr	r3, [r3, #16]
 800d6ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6b0:	2b40      	cmp	r3, #64	; 0x40
 800d6b2:	d10e      	bne.n	800d6d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6be:	2b40      	cmp	r3, #64	; 0x40
 800d6c0:	d107      	bne.n	800d6d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f000 f838 	bl	800d742 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	691b      	ldr	r3, [r3, #16]
 800d6d8:	f003 0320 	and.w	r3, r3, #32
 800d6dc:	2b20      	cmp	r3, #32
 800d6de:	d10e      	bne.n	800d6fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	f003 0320 	and.w	r3, r3, #32
 800d6ea:	2b20      	cmp	r3, #32
 800d6ec:	d107      	bne.n	800d6fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f06f 0220 	mvn.w	r2, #32
 800d6f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 f95b 	bl	800d9b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d6fe:	bf00      	nop
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d706:	b480      	push	{r7}
 800d708:	b083      	sub	sp, #12
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d70e:	bf00      	nop
 800d710:	370c      	adds	r7, #12
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr

0800d71a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d71a:	b480      	push	{r7}
 800d71c:	b083      	sub	sp, #12
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d722:	bf00      	nop
 800d724:	370c      	adds	r7, #12
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr

0800d72e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d72e:	b480      	push	{r7}
 800d730:	b083      	sub	sp, #12
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d736:	bf00      	nop
 800d738:	370c      	adds	r7, #12
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d742:	b480      	push	{r7}
 800d744:	b083      	sub	sp, #12
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d74a:	bf00      	nop
 800d74c:	370c      	adds	r7, #12
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
	...

0800d758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d758:	b480      	push	{r7}
 800d75a:	b085      	sub	sp, #20
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4a40      	ldr	r2, [pc, #256]	; (800d86c <TIM_Base_SetConfig+0x114>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d013      	beq.n	800d798 <TIM_Base_SetConfig+0x40>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d776:	d00f      	beq.n	800d798 <TIM_Base_SetConfig+0x40>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	4a3d      	ldr	r2, [pc, #244]	; (800d870 <TIM_Base_SetConfig+0x118>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d00b      	beq.n	800d798 <TIM_Base_SetConfig+0x40>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	4a3c      	ldr	r2, [pc, #240]	; (800d874 <TIM_Base_SetConfig+0x11c>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d007      	beq.n	800d798 <TIM_Base_SetConfig+0x40>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	4a3b      	ldr	r2, [pc, #236]	; (800d878 <TIM_Base_SetConfig+0x120>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d003      	beq.n	800d798 <TIM_Base_SetConfig+0x40>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	4a3a      	ldr	r2, [pc, #232]	; (800d87c <TIM_Base_SetConfig+0x124>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d108      	bne.n	800d7aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d79e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	68fa      	ldr	r2, [r7, #12]
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	4a2f      	ldr	r2, [pc, #188]	; (800d86c <TIM_Base_SetConfig+0x114>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d02b      	beq.n	800d80a <TIM_Base_SetConfig+0xb2>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7b8:	d027      	beq.n	800d80a <TIM_Base_SetConfig+0xb2>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	4a2c      	ldr	r2, [pc, #176]	; (800d870 <TIM_Base_SetConfig+0x118>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d023      	beq.n	800d80a <TIM_Base_SetConfig+0xb2>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	4a2b      	ldr	r2, [pc, #172]	; (800d874 <TIM_Base_SetConfig+0x11c>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d01f      	beq.n	800d80a <TIM_Base_SetConfig+0xb2>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	4a2a      	ldr	r2, [pc, #168]	; (800d878 <TIM_Base_SetConfig+0x120>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d01b      	beq.n	800d80a <TIM_Base_SetConfig+0xb2>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	4a29      	ldr	r2, [pc, #164]	; (800d87c <TIM_Base_SetConfig+0x124>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d017      	beq.n	800d80a <TIM_Base_SetConfig+0xb2>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	4a28      	ldr	r2, [pc, #160]	; (800d880 <TIM_Base_SetConfig+0x128>)
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d013      	beq.n	800d80a <TIM_Base_SetConfig+0xb2>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	4a27      	ldr	r2, [pc, #156]	; (800d884 <TIM_Base_SetConfig+0x12c>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d00f      	beq.n	800d80a <TIM_Base_SetConfig+0xb2>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	4a26      	ldr	r2, [pc, #152]	; (800d888 <TIM_Base_SetConfig+0x130>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d00b      	beq.n	800d80a <TIM_Base_SetConfig+0xb2>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4a25      	ldr	r2, [pc, #148]	; (800d88c <TIM_Base_SetConfig+0x134>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d007      	beq.n	800d80a <TIM_Base_SetConfig+0xb2>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4a24      	ldr	r2, [pc, #144]	; (800d890 <TIM_Base_SetConfig+0x138>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d003      	beq.n	800d80a <TIM_Base_SetConfig+0xb2>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	4a23      	ldr	r2, [pc, #140]	; (800d894 <TIM_Base_SetConfig+0x13c>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d108      	bne.n	800d81c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	68fa      	ldr	r2, [r7, #12]
 800d818:	4313      	orrs	r3, r2
 800d81a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	695b      	ldr	r3, [r3, #20]
 800d826:	4313      	orrs	r3, r2
 800d828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	689a      	ldr	r2, [r3, #8]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	4a0a      	ldr	r2, [pc, #40]	; (800d86c <TIM_Base_SetConfig+0x114>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d003      	beq.n	800d850 <TIM_Base_SetConfig+0xf8>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	4a0c      	ldr	r2, [pc, #48]	; (800d87c <TIM_Base_SetConfig+0x124>)
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d103      	bne.n	800d858 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	691a      	ldr	r2, [r3, #16]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2201      	movs	r2, #1
 800d85c:	615a      	str	r2, [r3, #20]
}
 800d85e:	bf00      	nop
 800d860:	3714      	adds	r7, #20
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop
 800d86c:	40010000 	.word	0x40010000
 800d870:	40000400 	.word	0x40000400
 800d874:	40000800 	.word	0x40000800
 800d878:	40000c00 	.word	0x40000c00
 800d87c:	40010400 	.word	0x40010400
 800d880:	40014000 	.word	0x40014000
 800d884:	40014400 	.word	0x40014400
 800d888:	40014800 	.word	0x40014800
 800d88c:	40001800 	.word	0x40001800
 800d890:	40001c00 	.word	0x40001c00
 800d894:	40002000 	.word	0x40002000

0800d898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d898:	b480      	push	{r7}
 800d89a:	b085      	sub	sp, #20
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d101      	bne.n	800d8b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d8ac:	2302      	movs	r3, #2
 800d8ae:	e06d      	b.n	800d98c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2202      	movs	r2, #2
 800d8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a30      	ldr	r2, [pc, #192]	; (800d998 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d004      	beq.n	800d8e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a2f      	ldr	r2, [pc, #188]	; (800d99c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d108      	bne.n	800d8f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d8ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	4313      	orrs	r3, r2
 800d906:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a20      	ldr	r2, [pc, #128]	; (800d998 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d022      	beq.n	800d960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d922:	d01d      	beq.n	800d960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4a1d      	ldr	r2, [pc, #116]	; (800d9a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d018      	beq.n	800d960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a1c      	ldr	r2, [pc, #112]	; (800d9a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d013      	beq.n	800d960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a1a      	ldr	r2, [pc, #104]	; (800d9a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d00e      	beq.n	800d960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a15      	ldr	r2, [pc, #84]	; (800d99c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d009      	beq.n	800d960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a16      	ldr	r2, [pc, #88]	; (800d9ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d004      	beq.n	800d960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a15      	ldr	r2, [pc, #84]	; (800d9b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d10c      	bne.n	800d97a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d966:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	689b      	ldr	r3, [r3, #8]
 800d96c:	68ba      	ldr	r2, [r7, #8]
 800d96e:	4313      	orrs	r3, r2
 800d970:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	68ba      	ldr	r2, [r7, #8]
 800d978:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2201      	movs	r2, #1
 800d97e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3714      	adds	r7, #20
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr
 800d998:	40010000 	.word	0x40010000
 800d99c:	40010400 	.word	0x40010400
 800d9a0:	40000400 	.word	0x40000400
 800d9a4:	40000800 	.word	0x40000800
 800d9a8:	40000c00 	.word	0x40000c00
 800d9ac:	40014000 	.word	0x40014000
 800d9b0:	40001800 	.word	0x40001800

0800d9b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d9bc:	bf00      	nop
 800d9be:	370c      	adds	r7, #12
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr

0800d9c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d9d0:	bf00      	nop
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d9e4:	bf00      	nop
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d101      	bne.n	800da02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d9fe:	2301      	movs	r3, #1
 800da00:	e040      	b.n	800da84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da06:	2b00      	cmp	r3, #0
 800da08:	d106      	bne.n	800da18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2200      	movs	r2, #0
 800da0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f7fb f980 	bl	8008d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2224      	movs	r2, #36	; 0x24
 800da1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f022 0201 	bic.w	r2, r2, #1
 800da2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 fd08 	bl	800e444 <UART_SetConfig>
 800da34:	4603      	mov	r3, r0
 800da36:	2b01      	cmp	r3, #1
 800da38:	d101      	bne.n	800da3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800da3a:	2301      	movs	r3, #1
 800da3c:	e022      	b.n	800da84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da42:	2b00      	cmp	r3, #0
 800da44:	d002      	beq.n	800da4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 ff60 	bl	800e90c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	685a      	ldr	r2, [r3, #4]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800da5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	689a      	ldr	r2, [r3, #8]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800da6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f042 0201 	orr.w	r2, r2, #1
 800da7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 ffe7 	bl	800ea50 <UART_CheckIdleState>
 800da82:	4603      	mov	r3, r0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3708      	adds	r7, #8
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b08a      	sub	sp, #40	; 0x28
 800da90:	af02      	add	r7, sp, #8
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	603b      	str	r3, [r7, #0]
 800da98:	4613      	mov	r3, r2
 800da9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daa0:	2b20      	cmp	r3, #32
 800daa2:	d171      	bne.n	800db88 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d002      	beq.n	800dab0 <HAL_UART_Transmit+0x24>
 800daaa:	88fb      	ldrh	r3, [r7, #6]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d101      	bne.n	800dab4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800dab0:	2301      	movs	r3, #1
 800dab2:	e06a      	b.n	800db8a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2200      	movs	r2, #0
 800dab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2221      	movs	r2, #33	; 0x21
 800dac0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dac2:	f7fb fe91 	bl	80097e8 <HAL_GetTick>
 800dac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	88fa      	ldrh	r2, [r7, #6]
 800dacc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	88fa      	ldrh	r2, [r7, #6]
 800dad4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	689b      	ldr	r3, [r3, #8]
 800dadc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dae0:	d108      	bne.n	800daf4 <HAL_UART_Transmit+0x68>
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	691b      	ldr	r3, [r3, #16]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d104      	bne.n	800daf4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800daea:	2300      	movs	r3, #0
 800daec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	61bb      	str	r3, [r7, #24]
 800daf2:	e003      	b.n	800dafc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800daf8:	2300      	movs	r3, #0
 800dafa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dafc:	e02c      	b.n	800db58 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	9300      	str	r3, [sp, #0]
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	2200      	movs	r2, #0
 800db06:	2180      	movs	r1, #128	; 0x80
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f000 ffd8 	bl	800eabe <UART_WaitOnFlagUntilTimeout>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800db14:	2303      	movs	r3, #3
 800db16:	e038      	b.n	800db8a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d10b      	bne.n	800db36 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	881b      	ldrh	r3, [r3, #0]
 800db22:	461a      	mov	r2, r3
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	3302      	adds	r3, #2
 800db32:	61bb      	str	r3, [r7, #24]
 800db34:	e007      	b.n	800db46 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	781a      	ldrb	r2, [r3, #0]
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800db40:	69fb      	ldr	r3, [r7, #28]
 800db42:	3301      	adds	r3, #1
 800db44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	3b01      	subs	r3, #1
 800db50:	b29a      	uxth	r2, r3
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800db5e:	b29b      	uxth	r3, r3
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1cc      	bne.n	800dafe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	2200      	movs	r2, #0
 800db6c:	2140      	movs	r1, #64	; 0x40
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f000 ffa5 	bl	800eabe <UART_WaitOnFlagUntilTimeout>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d001      	beq.n	800db7e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800db7a:	2303      	movs	r3, #3
 800db7c:	e005      	b.n	800db8a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2220      	movs	r2, #32
 800db82:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800db84:	2300      	movs	r3, #0
 800db86:	e000      	b.n	800db8a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800db88:	2302      	movs	r3, #2
  }
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3720      	adds	r7, #32
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b08a      	sub	sp, #40	; 0x28
 800db96:	af02      	add	r7, sp, #8
 800db98:	60f8      	str	r0, [r7, #12]
 800db9a:	60b9      	str	r1, [r7, #8]
 800db9c:	603b      	str	r3, [r7, #0]
 800db9e:	4613      	mov	r3, r2
 800dba0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dba8:	2b20      	cmp	r3, #32
 800dbaa:	f040 80b1 	bne.w	800dd10 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d002      	beq.n	800dbba <HAL_UART_Receive+0x28>
 800dbb4:	88fb      	ldrh	r3, [r7, #6]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d101      	bne.n	800dbbe <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e0a9      	b.n	800dd12 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2222      	movs	r2, #34	; 0x22
 800dbca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dbd4:	f7fb fe08 	bl	80097e8 <HAL_GetTick>
 800dbd8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	88fa      	ldrh	r2, [r7, #6]
 800dbde:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	88fa      	ldrh	r2, [r7, #6]
 800dbe6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbf2:	d10e      	bne.n	800dc12 <HAL_UART_Receive+0x80>
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	691b      	ldr	r3, [r3, #16]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d105      	bne.n	800dc08 <HAL_UART_Receive+0x76>
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dc02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dc06:	e02d      	b.n	800dc64 <HAL_UART_Receive+0xd2>
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	22ff      	movs	r2, #255	; 0xff
 800dc0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dc10:	e028      	b.n	800dc64 <HAL_UART_Receive+0xd2>
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d10d      	bne.n	800dc36 <HAL_UART_Receive+0xa4>
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	691b      	ldr	r3, [r3, #16]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d104      	bne.n	800dc2c <HAL_UART_Receive+0x9a>
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	22ff      	movs	r2, #255	; 0xff
 800dc26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dc2a:	e01b      	b.n	800dc64 <HAL_UART_Receive+0xd2>
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	227f      	movs	r2, #127	; 0x7f
 800dc30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dc34:	e016      	b.n	800dc64 <HAL_UART_Receive+0xd2>
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	689b      	ldr	r3, [r3, #8]
 800dc3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dc3e:	d10d      	bne.n	800dc5c <HAL_UART_Receive+0xca>
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	691b      	ldr	r3, [r3, #16]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d104      	bne.n	800dc52 <HAL_UART_Receive+0xc0>
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	227f      	movs	r2, #127	; 0x7f
 800dc4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dc50:	e008      	b.n	800dc64 <HAL_UART_Receive+0xd2>
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	223f      	movs	r2, #63	; 0x3f
 800dc56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dc5a:	e003      	b.n	800dc64 <HAL_UART_Receive+0xd2>
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc6a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc74:	d108      	bne.n	800dc88 <HAL_UART_Receive+0xf6>
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	691b      	ldr	r3, [r3, #16]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d104      	bne.n	800dc88 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	61bb      	str	r3, [r7, #24]
 800dc86:	e003      	b.n	800dc90 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800dc90:	e032      	b.n	800dcf8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	9300      	str	r3, [sp, #0]
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	2120      	movs	r1, #32
 800dc9c:	68f8      	ldr	r0, [r7, #12]
 800dc9e:	f000 ff0e 	bl	800eabe <UART_WaitOnFlagUntilTimeout>
 800dca2:	4603      	mov	r3, r0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d001      	beq.n	800dcac <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800dca8:	2303      	movs	r3, #3
 800dcaa:	e032      	b.n	800dd12 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d10c      	bne.n	800dccc <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	8a7b      	ldrh	r3, [r7, #18]
 800dcbc:	4013      	ands	r3, r2
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	3302      	adds	r3, #2
 800dcc8:	61bb      	str	r3, [r7, #24]
 800dcca:	e00c      	b.n	800dce6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd2:	b2da      	uxtb	r2, r3
 800dcd4:	8a7b      	ldrh	r3, [r7, #18]
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	4013      	ands	r3, r2
 800dcda:	b2da      	uxtb	r2, r3
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	3301      	adds	r3, #1
 800dce4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d1c6      	bne.n	800dc92 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2220      	movs	r2, #32
 800dd08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	e000      	b.n	800dd12 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800dd10:	2302      	movs	r3, #2
  }
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3720      	adds	r7, #32
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
	...

0800dd1c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b08b      	sub	sp, #44	; 0x2c
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	4613      	mov	r3, r2
 800dd28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd2e:	2b20      	cmp	r3, #32
 800dd30:	d147      	bne.n	800ddc2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d002      	beq.n	800dd3e <HAL_UART_Transmit_IT+0x22>
 800dd38:	88fb      	ldrh	r3, [r7, #6]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d101      	bne.n	800dd42 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	e040      	b.n	800ddc4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	88fa      	ldrh	r2, [r7, #6]
 800dd4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	88fa      	ldrh	r2, [r7, #6]
 800dd54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2200      	movs	r2, #0
 800dd62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2221      	movs	r2, #33	; 0x21
 800dd6a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd74:	d107      	bne.n	800dd86 <HAL_UART_Transmit_IT+0x6a>
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	691b      	ldr	r3, [r3, #16]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d103      	bne.n	800dd86 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	4a13      	ldr	r2, [pc, #76]	; (800ddd0 <HAL_UART_Transmit_IT+0xb4>)
 800dd82:	66da      	str	r2, [r3, #108]	; 0x6c
 800dd84:	e002      	b.n	800dd8c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	4a12      	ldr	r2, [pc, #72]	; (800ddd4 <HAL_UART_Transmit_IT+0xb8>)
 800dd8a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	e853 3f00 	ldrex	r3, [r3]
 800dd98:	613b      	str	r3, [r7, #16]
   return(result);
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dda0:	627b      	str	r3, [r7, #36]	; 0x24
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	461a      	mov	r2, r3
 800dda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddaa:	623b      	str	r3, [r7, #32]
 800ddac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddae:	69f9      	ldr	r1, [r7, #28]
 800ddb0:	6a3a      	ldr	r2, [r7, #32]
 800ddb2:	e841 2300 	strex	r3, r2, [r1]
 800ddb6:	61bb      	str	r3, [r7, #24]
   return(result);
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d1e6      	bne.n	800dd8c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	e000      	b.n	800ddc4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800ddc2:	2302      	movs	r3, #2
  }
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	372c      	adds	r7, #44	; 0x2c
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr
 800ddd0:	0800ef83 	.word	0x0800ef83
 800ddd4:	0800eecd 	.word	0x0800eecd

0800ddd8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b08a      	sub	sp, #40	; 0x28
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	4613      	mov	r3, r2
 800dde4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddec:	2b20      	cmp	r3, #32
 800ddee:	d132      	bne.n	800de56 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d002      	beq.n	800ddfc <HAL_UART_Receive_IT+0x24>
 800ddf6:	88fb      	ldrh	r3, [r7, #6]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d101      	bne.n	800de00 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e02b      	b.n	800de58 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2200      	movs	r2, #0
 800de04:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de10:	2b00      	cmp	r3, #0
 800de12:	d018      	beq.n	800de46 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	e853 3f00 	ldrex	r3, [r3]
 800de20:	613b      	str	r3, [r7, #16]
   return(result);
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800de28:	627b      	str	r3, [r7, #36]	; 0x24
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	461a      	mov	r2, r3
 800de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de32:	623b      	str	r3, [r7, #32]
 800de34:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de36:	69f9      	ldr	r1, [r7, #28]
 800de38:	6a3a      	ldr	r2, [r7, #32]
 800de3a:	e841 2300 	strex	r3, r2, [r1]
 800de3e:	61bb      	str	r3, [r7, #24]
   return(result);
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1e6      	bne.n	800de14 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800de46:	88fb      	ldrh	r3, [r7, #6]
 800de48:	461a      	mov	r2, r3
 800de4a:	68b9      	ldr	r1, [r7, #8]
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f000 fefd 	bl	800ec4c <UART_Start_Receive_IT>
 800de52:	4603      	mov	r3, r0
 800de54:	e000      	b.n	800de58 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800de56:	2302      	movs	r3, #2
  }
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3728      	adds	r7, #40	; 0x28
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b0ba      	sub	sp, #232	; 0xe8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	69db      	ldr	r3, [r3, #28]
 800de6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	689b      	ldr	r3, [r3, #8]
 800de82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800de86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800de8a:	f640 030f 	movw	r3, #2063	; 0x80f
 800de8e:	4013      	ands	r3, r2
 800de90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800de94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d115      	bne.n	800dec8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800de9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dea0:	f003 0320 	and.w	r3, r3, #32
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d00f      	beq.n	800dec8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800deac:	f003 0320 	and.w	r3, r3, #32
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d009      	beq.n	800dec8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800deb8:	2b00      	cmp	r3, #0
 800deba:	f000 8297 	beq.w	800e3ec <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	4798      	blx	r3
      }
      return;
 800dec6:	e291      	b.n	800e3ec <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800decc:	2b00      	cmp	r3, #0
 800dece:	f000 8117 	beq.w	800e100 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ded2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ded6:	f003 0301 	and.w	r3, r3, #1
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d106      	bne.n	800deec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800dede:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dee2:	4b85      	ldr	r3, [pc, #532]	; (800e0f8 <HAL_UART_IRQHandler+0x298>)
 800dee4:	4013      	ands	r3, r2
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	f000 810a 	beq.w	800e100 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800deec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800def0:	f003 0301 	and.w	r3, r3, #1
 800def4:	2b00      	cmp	r3, #0
 800def6:	d011      	beq.n	800df1c <HAL_UART_IRQHandler+0xbc>
 800def8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800defc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df00:	2b00      	cmp	r3, #0
 800df02:	d00b      	beq.n	800df1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2201      	movs	r2, #1
 800df0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df12:	f043 0201 	orr.w	r2, r3, #1
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df20:	f003 0302 	and.w	r3, r3, #2
 800df24:	2b00      	cmp	r3, #0
 800df26:	d011      	beq.n	800df4c <HAL_UART_IRQHandler+0xec>
 800df28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df2c:	f003 0301 	and.w	r3, r3, #1
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00b      	beq.n	800df4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	2202      	movs	r2, #2
 800df3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df42:	f043 0204 	orr.w	r2, r3, #4
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df50:	f003 0304 	and.w	r3, r3, #4
 800df54:	2b00      	cmp	r3, #0
 800df56:	d011      	beq.n	800df7c <HAL_UART_IRQHandler+0x11c>
 800df58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df5c:	f003 0301 	and.w	r3, r3, #1
 800df60:	2b00      	cmp	r3, #0
 800df62:	d00b      	beq.n	800df7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2204      	movs	r2, #4
 800df6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df72:	f043 0202 	orr.w	r2, r3, #2
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800df7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df80:	f003 0308 	and.w	r3, r3, #8
 800df84:	2b00      	cmp	r3, #0
 800df86:	d017      	beq.n	800dfb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800df88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df8c:	f003 0320 	and.w	r3, r3, #32
 800df90:	2b00      	cmp	r3, #0
 800df92:	d105      	bne.n	800dfa0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800df94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d00b      	beq.n	800dfb8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2208      	movs	r2, #8
 800dfa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfae:	f043 0208 	orr.w	r2, r3, #8
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dfb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d012      	beq.n	800dfea <HAL_UART_IRQHandler+0x18a>
 800dfc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00c      	beq.n	800dfea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dfd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfe0:	f043 0220 	orr.w	r2, r3, #32
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f000 81fd 	beq.w	800e3f0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800dff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dffa:	f003 0320 	and.w	r3, r3, #32
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00d      	beq.n	800e01e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e006:	f003 0320 	and.w	r3, r3, #32
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d007      	beq.n	800e01e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e012:	2b00      	cmp	r3, #0
 800e014:	d003      	beq.n	800e01e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e024:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	689b      	ldr	r3, [r3, #8]
 800e02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e032:	2b40      	cmp	r3, #64	; 0x40
 800e034:	d005      	beq.n	800e042 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e03a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d04f      	beq.n	800e0e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 fec8 	bl	800edd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e052:	2b40      	cmp	r3, #64	; 0x40
 800e054:	d141      	bne.n	800e0da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	3308      	adds	r3, #8
 800e05c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e060:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e064:	e853 3f00 	ldrex	r3, [r3]
 800e068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e06c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	3308      	adds	r3, #8
 800e07e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e082:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e08a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e08e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e092:	e841 2300 	strex	r3, r2, [r1]
 800e096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e09a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d1d9      	bne.n	800e056 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d013      	beq.n	800e0d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0ae:	4a13      	ldr	r2, [pc, #76]	; (800e0fc <HAL_UART_IRQHandler+0x29c>)
 800e0b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fc fbc4 	bl	800a844 <HAL_DMA_Abort_IT>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d017      	beq.n	800e0f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800e0cc:	4610      	mov	r0, r2
 800e0ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0d0:	e00f      	b.n	800e0f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 f9a0 	bl	800e418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0d8:	e00b      	b.n	800e0f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 f99c 	bl	800e418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0e0:	e007      	b.n	800e0f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f998 	bl	800e418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800e0f0:	e17e      	b.n	800e3f0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0f2:	bf00      	nop
    return;
 800e0f4:	e17c      	b.n	800e3f0 <HAL_UART_IRQHandler+0x590>
 800e0f6:	bf00      	nop
 800e0f8:	04000120 	.word	0x04000120
 800e0fc:	0800eea1 	.word	0x0800eea1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e104:	2b01      	cmp	r3, #1
 800e106:	f040 814c 	bne.w	800e3a2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e10e:	f003 0310 	and.w	r3, r3, #16
 800e112:	2b00      	cmp	r3, #0
 800e114:	f000 8145 	beq.w	800e3a2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e11c:	f003 0310 	and.w	r3, r3, #16
 800e120:	2b00      	cmp	r3, #0
 800e122:	f000 813e 	beq.w	800e3a2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	2210      	movs	r2, #16
 800e12c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	689b      	ldr	r3, [r3, #8]
 800e134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e138:	2b40      	cmp	r3, #64	; 0x40
 800e13a:	f040 80b6 	bne.w	800e2aa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e14a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e14e:	2b00      	cmp	r3, #0
 800e150:	f000 8150 	beq.w	800e3f4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e15a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e15e:	429a      	cmp	r2, r3
 800e160:	f080 8148 	bcs.w	800e3f4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e16a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e172:	69db      	ldr	r3, [r3, #28]
 800e174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e178:	f000 8086 	beq.w	800e288 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e184:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e188:	e853 3f00 	ldrex	r3, [r3]
 800e18c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e190:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e198:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e1a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e1aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e1b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e1b6:	e841 2300 	strex	r3, r2, [r1]
 800e1ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e1be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d1da      	bne.n	800e17c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	3308      	adds	r3, #8
 800e1cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1d0:	e853 3f00 	ldrex	r3, [r3]
 800e1d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e1d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e1d8:	f023 0301 	bic.w	r3, r3, #1
 800e1dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	3308      	adds	r3, #8
 800e1e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e1ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e1ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e1f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e1f6:	e841 2300 	strex	r3, r2, [r1]
 800e1fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e1fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d1e1      	bne.n	800e1c6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	3308      	adds	r3, #8
 800e208:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e20a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e20c:	e853 3f00 	ldrex	r3, [r3]
 800e210:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	3308      	adds	r3, #8
 800e222:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e226:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e228:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e22a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e22c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e22e:	e841 2300 	strex	r3, r2, [r1]
 800e232:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e236:	2b00      	cmp	r3, #0
 800e238:	d1e3      	bne.n	800e202 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2220      	movs	r2, #32
 800e23e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2200      	movs	r2, #0
 800e246:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e24e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e250:	e853 3f00 	ldrex	r3, [r3]
 800e254:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e258:	f023 0310 	bic.w	r3, r3, #16
 800e25c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	461a      	mov	r2, r3
 800e266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e26a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e26c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e270:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e272:	e841 2300 	strex	r3, r2, [r1]
 800e276:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1e4      	bne.n	800e248 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e282:	4618      	mov	r0, r3
 800e284:	f7fc fa6e 	bl	800a764 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2202      	movs	r2, #2
 800e28c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 f8c2 	bl	800e42c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e2a8:	e0a4      	b.n	800e3f4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	1ad3      	subs	r3, r2, r3
 800e2ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	f000 8096 	beq.w	800e3f8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800e2cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	f000 8091 	beq.w	800e3f8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2de:	e853 3f00 	ldrex	r3, [r3]
 800e2e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e2ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e2f8:	647b      	str	r3, [r7, #68]	; 0x44
 800e2fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e2fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e300:	e841 2300 	strex	r3, r2, [r1]
 800e304:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d1e4      	bne.n	800e2d6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	3308      	adds	r3, #8
 800e312:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e316:	e853 3f00 	ldrex	r3, [r3]
 800e31a:	623b      	str	r3, [r7, #32]
   return(result);
 800e31c:	6a3b      	ldr	r3, [r7, #32]
 800e31e:	f023 0301 	bic.w	r3, r3, #1
 800e322:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	3308      	adds	r3, #8
 800e32c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e330:	633a      	str	r2, [r7, #48]	; 0x30
 800e332:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e338:	e841 2300 	strex	r3, r2, [r1]
 800e33c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e340:	2b00      	cmp	r3, #0
 800e342:	d1e3      	bne.n	800e30c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2220      	movs	r2, #32
 800e348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2200      	movs	r2, #0
 800e350:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	e853 3f00 	ldrex	r3, [r3]
 800e364:	60fb      	str	r3, [r7, #12]
   return(result);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f023 0310 	bic.w	r3, r3, #16
 800e36c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	461a      	mov	r2, r3
 800e376:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e37a:	61fb      	str	r3, [r7, #28]
 800e37c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37e:	69b9      	ldr	r1, [r7, #24]
 800e380:	69fa      	ldr	r2, [r7, #28]
 800e382:	e841 2300 	strex	r3, r2, [r1]
 800e386:	617b      	str	r3, [r7, #20]
   return(result);
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1e4      	bne.n	800e358 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2202      	movs	r2, #2
 800e392:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e394:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e398:	4619      	mov	r1, r3
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 f846 	bl	800e42c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e3a0:	e02a      	b.n	800e3f8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e3a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00e      	beq.n	800e3cc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e3ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d008      	beq.n	800e3cc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d01c      	beq.n	800e3fc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	4798      	blx	r3
    }
    return;
 800e3ca:	e017      	b.n	800e3fc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d012      	beq.n	800e3fe <HAL_UART_IRQHandler+0x59e>
 800e3d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00c      	beq.n	800e3fe <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 fe2c 	bl	800f042 <UART_EndTransmit_IT>
    return;
 800e3ea:	e008      	b.n	800e3fe <HAL_UART_IRQHandler+0x59e>
      return;
 800e3ec:	bf00      	nop
 800e3ee:	e006      	b.n	800e3fe <HAL_UART_IRQHandler+0x59e>
    return;
 800e3f0:	bf00      	nop
 800e3f2:	e004      	b.n	800e3fe <HAL_UART_IRQHandler+0x59e>
      return;
 800e3f4:	bf00      	nop
 800e3f6:	e002      	b.n	800e3fe <HAL_UART_IRQHandler+0x59e>
      return;
 800e3f8:	bf00      	nop
 800e3fa:	e000      	b.n	800e3fe <HAL_UART_IRQHandler+0x59e>
    return;
 800e3fc:	bf00      	nop
  }

}
 800e3fe:	37e8      	adds	r7, #232	; 0xe8
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e40c:	bf00      	nop
 800e40e:	370c      	adds	r7, #12
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr

0800e418 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e418:	b480      	push	{r7}
 800e41a:	b083      	sub	sp, #12
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e420:	bf00      	nop
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	460b      	mov	r3, r1
 800e436:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e438:	bf00      	nop
 800e43a:	370c      	adds	r7, #12
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b088      	sub	sp, #32
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e44c:	2300      	movs	r3, #0
 800e44e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	689a      	ldr	r2, [r3, #8]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	691b      	ldr	r3, [r3, #16]
 800e458:	431a      	orrs	r2, r3
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	695b      	ldr	r3, [r3, #20]
 800e45e:	431a      	orrs	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	69db      	ldr	r3, [r3, #28]
 800e464:	4313      	orrs	r3, r2
 800e466:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	4ba6      	ldr	r3, [pc, #664]	; (800e708 <UART_SetConfig+0x2c4>)
 800e470:	4013      	ands	r3, r2
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	6812      	ldr	r2, [r2, #0]
 800e476:	6979      	ldr	r1, [r7, #20]
 800e478:	430b      	orrs	r3, r1
 800e47a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	68da      	ldr	r2, [r3, #12]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	430a      	orrs	r2, r1
 800e490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	699b      	ldr	r3, [r3, #24]
 800e496:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6a1b      	ldr	r3, [r3, #32]
 800e49c:	697a      	ldr	r2, [r7, #20]
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	689b      	ldr	r3, [r3, #8]
 800e4a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	697a      	ldr	r2, [r7, #20]
 800e4b2:	430a      	orrs	r2, r1
 800e4b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a94      	ldr	r2, [pc, #592]	; (800e70c <UART_SetConfig+0x2c8>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d120      	bne.n	800e502 <UART_SetConfig+0xbe>
 800e4c0:	4b93      	ldr	r3, [pc, #588]	; (800e710 <UART_SetConfig+0x2cc>)
 800e4c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4c6:	f003 0303 	and.w	r3, r3, #3
 800e4ca:	2b03      	cmp	r3, #3
 800e4cc:	d816      	bhi.n	800e4fc <UART_SetConfig+0xb8>
 800e4ce:	a201      	add	r2, pc, #4	; (adr r2, 800e4d4 <UART_SetConfig+0x90>)
 800e4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d4:	0800e4e5 	.word	0x0800e4e5
 800e4d8:	0800e4f1 	.word	0x0800e4f1
 800e4dc:	0800e4eb 	.word	0x0800e4eb
 800e4e0:	0800e4f7 	.word	0x0800e4f7
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	77fb      	strb	r3, [r7, #31]
 800e4e8:	e150      	b.n	800e78c <UART_SetConfig+0x348>
 800e4ea:	2302      	movs	r3, #2
 800e4ec:	77fb      	strb	r3, [r7, #31]
 800e4ee:	e14d      	b.n	800e78c <UART_SetConfig+0x348>
 800e4f0:	2304      	movs	r3, #4
 800e4f2:	77fb      	strb	r3, [r7, #31]
 800e4f4:	e14a      	b.n	800e78c <UART_SetConfig+0x348>
 800e4f6:	2308      	movs	r3, #8
 800e4f8:	77fb      	strb	r3, [r7, #31]
 800e4fa:	e147      	b.n	800e78c <UART_SetConfig+0x348>
 800e4fc:	2310      	movs	r3, #16
 800e4fe:	77fb      	strb	r3, [r7, #31]
 800e500:	e144      	b.n	800e78c <UART_SetConfig+0x348>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4a83      	ldr	r2, [pc, #524]	; (800e714 <UART_SetConfig+0x2d0>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d132      	bne.n	800e572 <UART_SetConfig+0x12e>
 800e50c:	4b80      	ldr	r3, [pc, #512]	; (800e710 <UART_SetConfig+0x2cc>)
 800e50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e512:	f003 030c 	and.w	r3, r3, #12
 800e516:	2b0c      	cmp	r3, #12
 800e518:	d828      	bhi.n	800e56c <UART_SetConfig+0x128>
 800e51a:	a201      	add	r2, pc, #4	; (adr r2, 800e520 <UART_SetConfig+0xdc>)
 800e51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e520:	0800e555 	.word	0x0800e555
 800e524:	0800e56d 	.word	0x0800e56d
 800e528:	0800e56d 	.word	0x0800e56d
 800e52c:	0800e56d 	.word	0x0800e56d
 800e530:	0800e561 	.word	0x0800e561
 800e534:	0800e56d 	.word	0x0800e56d
 800e538:	0800e56d 	.word	0x0800e56d
 800e53c:	0800e56d 	.word	0x0800e56d
 800e540:	0800e55b 	.word	0x0800e55b
 800e544:	0800e56d 	.word	0x0800e56d
 800e548:	0800e56d 	.word	0x0800e56d
 800e54c:	0800e56d 	.word	0x0800e56d
 800e550:	0800e567 	.word	0x0800e567
 800e554:	2300      	movs	r3, #0
 800e556:	77fb      	strb	r3, [r7, #31]
 800e558:	e118      	b.n	800e78c <UART_SetConfig+0x348>
 800e55a:	2302      	movs	r3, #2
 800e55c:	77fb      	strb	r3, [r7, #31]
 800e55e:	e115      	b.n	800e78c <UART_SetConfig+0x348>
 800e560:	2304      	movs	r3, #4
 800e562:	77fb      	strb	r3, [r7, #31]
 800e564:	e112      	b.n	800e78c <UART_SetConfig+0x348>
 800e566:	2308      	movs	r3, #8
 800e568:	77fb      	strb	r3, [r7, #31]
 800e56a:	e10f      	b.n	800e78c <UART_SetConfig+0x348>
 800e56c:	2310      	movs	r3, #16
 800e56e:	77fb      	strb	r3, [r7, #31]
 800e570:	e10c      	b.n	800e78c <UART_SetConfig+0x348>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4a68      	ldr	r2, [pc, #416]	; (800e718 <UART_SetConfig+0x2d4>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d120      	bne.n	800e5be <UART_SetConfig+0x17a>
 800e57c:	4b64      	ldr	r3, [pc, #400]	; (800e710 <UART_SetConfig+0x2cc>)
 800e57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e582:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e586:	2b30      	cmp	r3, #48	; 0x30
 800e588:	d013      	beq.n	800e5b2 <UART_SetConfig+0x16e>
 800e58a:	2b30      	cmp	r3, #48	; 0x30
 800e58c:	d814      	bhi.n	800e5b8 <UART_SetConfig+0x174>
 800e58e:	2b20      	cmp	r3, #32
 800e590:	d009      	beq.n	800e5a6 <UART_SetConfig+0x162>
 800e592:	2b20      	cmp	r3, #32
 800e594:	d810      	bhi.n	800e5b8 <UART_SetConfig+0x174>
 800e596:	2b00      	cmp	r3, #0
 800e598:	d002      	beq.n	800e5a0 <UART_SetConfig+0x15c>
 800e59a:	2b10      	cmp	r3, #16
 800e59c:	d006      	beq.n	800e5ac <UART_SetConfig+0x168>
 800e59e:	e00b      	b.n	800e5b8 <UART_SetConfig+0x174>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	77fb      	strb	r3, [r7, #31]
 800e5a4:	e0f2      	b.n	800e78c <UART_SetConfig+0x348>
 800e5a6:	2302      	movs	r3, #2
 800e5a8:	77fb      	strb	r3, [r7, #31]
 800e5aa:	e0ef      	b.n	800e78c <UART_SetConfig+0x348>
 800e5ac:	2304      	movs	r3, #4
 800e5ae:	77fb      	strb	r3, [r7, #31]
 800e5b0:	e0ec      	b.n	800e78c <UART_SetConfig+0x348>
 800e5b2:	2308      	movs	r3, #8
 800e5b4:	77fb      	strb	r3, [r7, #31]
 800e5b6:	e0e9      	b.n	800e78c <UART_SetConfig+0x348>
 800e5b8:	2310      	movs	r3, #16
 800e5ba:	77fb      	strb	r3, [r7, #31]
 800e5bc:	e0e6      	b.n	800e78c <UART_SetConfig+0x348>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	4a56      	ldr	r2, [pc, #344]	; (800e71c <UART_SetConfig+0x2d8>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d120      	bne.n	800e60a <UART_SetConfig+0x1c6>
 800e5c8:	4b51      	ldr	r3, [pc, #324]	; (800e710 <UART_SetConfig+0x2cc>)
 800e5ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e5d2:	2bc0      	cmp	r3, #192	; 0xc0
 800e5d4:	d013      	beq.n	800e5fe <UART_SetConfig+0x1ba>
 800e5d6:	2bc0      	cmp	r3, #192	; 0xc0
 800e5d8:	d814      	bhi.n	800e604 <UART_SetConfig+0x1c0>
 800e5da:	2b80      	cmp	r3, #128	; 0x80
 800e5dc:	d009      	beq.n	800e5f2 <UART_SetConfig+0x1ae>
 800e5de:	2b80      	cmp	r3, #128	; 0x80
 800e5e0:	d810      	bhi.n	800e604 <UART_SetConfig+0x1c0>
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d002      	beq.n	800e5ec <UART_SetConfig+0x1a8>
 800e5e6:	2b40      	cmp	r3, #64	; 0x40
 800e5e8:	d006      	beq.n	800e5f8 <UART_SetConfig+0x1b4>
 800e5ea:	e00b      	b.n	800e604 <UART_SetConfig+0x1c0>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	77fb      	strb	r3, [r7, #31]
 800e5f0:	e0cc      	b.n	800e78c <UART_SetConfig+0x348>
 800e5f2:	2302      	movs	r3, #2
 800e5f4:	77fb      	strb	r3, [r7, #31]
 800e5f6:	e0c9      	b.n	800e78c <UART_SetConfig+0x348>
 800e5f8:	2304      	movs	r3, #4
 800e5fa:	77fb      	strb	r3, [r7, #31]
 800e5fc:	e0c6      	b.n	800e78c <UART_SetConfig+0x348>
 800e5fe:	2308      	movs	r3, #8
 800e600:	77fb      	strb	r3, [r7, #31]
 800e602:	e0c3      	b.n	800e78c <UART_SetConfig+0x348>
 800e604:	2310      	movs	r3, #16
 800e606:	77fb      	strb	r3, [r7, #31]
 800e608:	e0c0      	b.n	800e78c <UART_SetConfig+0x348>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4a44      	ldr	r2, [pc, #272]	; (800e720 <UART_SetConfig+0x2dc>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d125      	bne.n	800e660 <UART_SetConfig+0x21c>
 800e614:	4b3e      	ldr	r3, [pc, #248]	; (800e710 <UART_SetConfig+0x2cc>)
 800e616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e61a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e61e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e622:	d017      	beq.n	800e654 <UART_SetConfig+0x210>
 800e624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e628:	d817      	bhi.n	800e65a <UART_SetConfig+0x216>
 800e62a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e62e:	d00b      	beq.n	800e648 <UART_SetConfig+0x204>
 800e630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e634:	d811      	bhi.n	800e65a <UART_SetConfig+0x216>
 800e636:	2b00      	cmp	r3, #0
 800e638:	d003      	beq.n	800e642 <UART_SetConfig+0x1fe>
 800e63a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e63e:	d006      	beq.n	800e64e <UART_SetConfig+0x20a>
 800e640:	e00b      	b.n	800e65a <UART_SetConfig+0x216>
 800e642:	2300      	movs	r3, #0
 800e644:	77fb      	strb	r3, [r7, #31]
 800e646:	e0a1      	b.n	800e78c <UART_SetConfig+0x348>
 800e648:	2302      	movs	r3, #2
 800e64a:	77fb      	strb	r3, [r7, #31]
 800e64c:	e09e      	b.n	800e78c <UART_SetConfig+0x348>
 800e64e:	2304      	movs	r3, #4
 800e650:	77fb      	strb	r3, [r7, #31]
 800e652:	e09b      	b.n	800e78c <UART_SetConfig+0x348>
 800e654:	2308      	movs	r3, #8
 800e656:	77fb      	strb	r3, [r7, #31]
 800e658:	e098      	b.n	800e78c <UART_SetConfig+0x348>
 800e65a:	2310      	movs	r3, #16
 800e65c:	77fb      	strb	r3, [r7, #31]
 800e65e:	e095      	b.n	800e78c <UART_SetConfig+0x348>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4a2f      	ldr	r2, [pc, #188]	; (800e724 <UART_SetConfig+0x2e0>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d125      	bne.n	800e6b6 <UART_SetConfig+0x272>
 800e66a:	4b29      	ldr	r3, [pc, #164]	; (800e710 <UART_SetConfig+0x2cc>)
 800e66c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e670:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e674:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e678:	d017      	beq.n	800e6aa <UART_SetConfig+0x266>
 800e67a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e67e:	d817      	bhi.n	800e6b0 <UART_SetConfig+0x26c>
 800e680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e684:	d00b      	beq.n	800e69e <UART_SetConfig+0x25a>
 800e686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e68a:	d811      	bhi.n	800e6b0 <UART_SetConfig+0x26c>
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d003      	beq.n	800e698 <UART_SetConfig+0x254>
 800e690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e694:	d006      	beq.n	800e6a4 <UART_SetConfig+0x260>
 800e696:	e00b      	b.n	800e6b0 <UART_SetConfig+0x26c>
 800e698:	2301      	movs	r3, #1
 800e69a:	77fb      	strb	r3, [r7, #31]
 800e69c:	e076      	b.n	800e78c <UART_SetConfig+0x348>
 800e69e:	2302      	movs	r3, #2
 800e6a0:	77fb      	strb	r3, [r7, #31]
 800e6a2:	e073      	b.n	800e78c <UART_SetConfig+0x348>
 800e6a4:	2304      	movs	r3, #4
 800e6a6:	77fb      	strb	r3, [r7, #31]
 800e6a8:	e070      	b.n	800e78c <UART_SetConfig+0x348>
 800e6aa:	2308      	movs	r3, #8
 800e6ac:	77fb      	strb	r3, [r7, #31]
 800e6ae:	e06d      	b.n	800e78c <UART_SetConfig+0x348>
 800e6b0:	2310      	movs	r3, #16
 800e6b2:	77fb      	strb	r3, [r7, #31]
 800e6b4:	e06a      	b.n	800e78c <UART_SetConfig+0x348>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4a1b      	ldr	r2, [pc, #108]	; (800e728 <UART_SetConfig+0x2e4>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d138      	bne.n	800e732 <UART_SetConfig+0x2ee>
 800e6c0:	4b13      	ldr	r3, [pc, #76]	; (800e710 <UART_SetConfig+0x2cc>)
 800e6c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e6ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e6ce:	d017      	beq.n	800e700 <UART_SetConfig+0x2bc>
 800e6d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e6d4:	d82a      	bhi.n	800e72c <UART_SetConfig+0x2e8>
 800e6d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e6da:	d00b      	beq.n	800e6f4 <UART_SetConfig+0x2b0>
 800e6dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e6e0:	d824      	bhi.n	800e72c <UART_SetConfig+0x2e8>
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d003      	beq.n	800e6ee <UART_SetConfig+0x2aa>
 800e6e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6ea:	d006      	beq.n	800e6fa <UART_SetConfig+0x2b6>
 800e6ec:	e01e      	b.n	800e72c <UART_SetConfig+0x2e8>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	77fb      	strb	r3, [r7, #31]
 800e6f2:	e04b      	b.n	800e78c <UART_SetConfig+0x348>
 800e6f4:	2302      	movs	r3, #2
 800e6f6:	77fb      	strb	r3, [r7, #31]
 800e6f8:	e048      	b.n	800e78c <UART_SetConfig+0x348>
 800e6fa:	2304      	movs	r3, #4
 800e6fc:	77fb      	strb	r3, [r7, #31]
 800e6fe:	e045      	b.n	800e78c <UART_SetConfig+0x348>
 800e700:	2308      	movs	r3, #8
 800e702:	77fb      	strb	r3, [r7, #31]
 800e704:	e042      	b.n	800e78c <UART_SetConfig+0x348>
 800e706:	bf00      	nop
 800e708:	efff69f3 	.word	0xefff69f3
 800e70c:	40011000 	.word	0x40011000
 800e710:	40023800 	.word	0x40023800
 800e714:	40004400 	.word	0x40004400
 800e718:	40004800 	.word	0x40004800
 800e71c:	40004c00 	.word	0x40004c00
 800e720:	40005000 	.word	0x40005000
 800e724:	40011400 	.word	0x40011400
 800e728:	40007800 	.word	0x40007800
 800e72c:	2310      	movs	r3, #16
 800e72e:	77fb      	strb	r3, [r7, #31]
 800e730:	e02c      	b.n	800e78c <UART_SetConfig+0x348>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4a72      	ldr	r2, [pc, #456]	; (800e900 <UART_SetConfig+0x4bc>)
 800e738:	4293      	cmp	r3, r2
 800e73a:	d125      	bne.n	800e788 <UART_SetConfig+0x344>
 800e73c:	4b71      	ldr	r3, [pc, #452]	; (800e904 <UART_SetConfig+0x4c0>)
 800e73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e742:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e746:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e74a:	d017      	beq.n	800e77c <UART_SetConfig+0x338>
 800e74c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e750:	d817      	bhi.n	800e782 <UART_SetConfig+0x33e>
 800e752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e756:	d00b      	beq.n	800e770 <UART_SetConfig+0x32c>
 800e758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e75c:	d811      	bhi.n	800e782 <UART_SetConfig+0x33e>
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d003      	beq.n	800e76a <UART_SetConfig+0x326>
 800e762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e766:	d006      	beq.n	800e776 <UART_SetConfig+0x332>
 800e768:	e00b      	b.n	800e782 <UART_SetConfig+0x33e>
 800e76a:	2300      	movs	r3, #0
 800e76c:	77fb      	strb	r3, [r7, #31]
 800e76e:	e00d      	b.n	800e78c <UART_SetConfig+0x348>
 800e770:	2302      	movs	r3, #2
 800e772:	77fb      	strb	r3, [r7, #31]
 800e774:	e00a      	b.n	800e78c <UART_SetConfig+0x348>
 800e776:	2304      	movs	r3, #4
 800e778:	77fb      	strb	r3, [r7, #31]
 800e77a:	e007      	b.n	800e78c <UART_SetConfig+0x348>
 800e77c:	2308      	movs	r3, #8
 800e77e:	77fb      	strb	r3, [r7, #31]
 800e780:	e004      	b.n	800e78c <UART_SetConfig+0x348>
 800e782:	2310      	movs	r3, #16
 800e784:	77fb      	strb	r3, [r7, #31]
 800e786:	e001      	b.n	800e78c <UART_SetConfig+0x348>
 800e788:	2310      	movs	r3, #16
 800e78a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	69db      	ldr	r3, [r3, #28]
 800e790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e794:	d15b      	bne.n	800e84e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e796:	7ffb      	ldrb	r3, [r7, #31]
 800e798:	2b08      	cmp	r3, #8
 800e79a:	d828      	bhi.n	800e7ee <UART_SetConfig+0x3aa>
 800e79c:	a201      	add	r2, pc, #4	; (adr r2, 800e7a4 <UART_SetConfig+0x360>)
 800e79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a2:	bf00      	nop
 800e7a4:	0800e7c9 	.word	0x0800e7c9
 800e7a8:	0800e7d1 	.word	0x0800e7d1
 800e7ac:	0800e7d9 	.word	0x0800e7d9
 800e7b0:	0800e7ef 	.word	0x0800e7ef
 800e7b4:	0800e7df 	.word	0x0800e7df
 800e7b8:	0800e7ef 	.word	0x0800e7ef
 800e7bc:	0800e7ef 	.word	0x0800e7ef
 800e7c0:	0800e7ef 	.word	0x0800e7ef
 800e7c4:	0800e7e7 	.word	0x0800e7e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7c8:	f7fe f91c 	bl	800ca04 <HAL_RCC_GetPCLK1Freq>
 800e7cc:	61b8      	str	r0, [r7, #24]
        break;
 800e7ce:	e013      	b.n	800e7f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e7d0:	f7fe f92c 	bl	800ca2c <HAL_RCC_GetPCLK2Freq>
 800e7d4:	61b8      	str	r0, [r7, #24]
        break;
 800e7d6:	e00f      	b.n	800e7f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e7d8:	4b4b      	ldr	r3, [pc, #300]	; (800e908 <UART_SetConfig+0x4c4>)
 800e7da:	61bb      	str	r3, [r7, #24]
        break;
 800e7dc:	e00c      	b.n	800e7f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e7de:	f7fe f83f 	bl	800c860 <HAL_RCC_GetSysClockFreq>
 800e7e2:	61b8      	str	r0, [r7, #24]
        break;
 800e7e4:	e008      	b.n	800e7f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e7e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7ea:	61bb      	str	r3, [r7, #24]
        break;
 800e7ec:	e004      	b.n	800e7f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	77bb      	strb	r3, [r7, #30]
        break;
 800e7f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d074      	beq.n	800e8e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e7fe:	69bb      	ldr	r3, [r7, #24]
 800e800:	005a      	lsls	r2, r3, #1
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	085b      	lsrs	r3, r3, #1
 800e808:	441a      	add	r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e812:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	2b0f      	cmp	r3, #15
 800e818:	d916      	bls.n	800e848 <UART_SetConfig+0x404>
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e820:	d212      	bcs.n	800e848 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	b29b      	uxth	r3, r3
 800e826:	f023 030f 	bic.w	r3, r3, #15
 800e82a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	085b      	lsrs	r3, r3, #1
 800e830:	b29b      	uxth	r3, r3
 800e832:	f003 0307 	and.w	r3, r3, #7
 800e836:	b29a      	uxth	r2, r3
 800e838:	89fb      	ldrh	r3, [r7, #14]
 800e83a:	4313      	orrs	r3, r2
 800e83c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	89fa      	ldrh	r2, [r7, #14]
 800e844:	60da      	str	r2, [r3, #12]
 800e846:	e04f      	b.n	800e8e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e848:	2301      	movs	r3, #1
 800e84a:	77bb      	strb	r3, [r7, #30]
 800e84c:	e04c      	b.n	800e8e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e84e:	7ffb      	ldrb	r3, [r7, #31]
 800e850:	2b08      	cmp	r3, #8
 800e852:	d828      	bhi.n	800e8a6 <UART_SetConfig+0x462>
 800e854:	a201      	add	r2, pc, #4	; (adr r2, 800e85c <UART_SetConfig+0x418>)
 800e856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e85a:	bf00      	nop
 800e85c:	0800e881 	.word	0x0800e881
 800e860:	0800e889 	.word	0x0800e889
 800e864:	0800e891 	.word	0x0800e891
 800e868:	0800e8a7 	.word	0x0800e8a7
 800e86c:	0800e897 	.word	0x0800e897
 800e870:	0800e8a7 	.word	0x0800e8a7
 800e874:	0800e8a7 	.word	0x0800e8a7
 800e878:	0800e8a7 	.word	0x0800e8a7
 800e87c:	0800e89f 	.word	0x0800e89f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e880:	f7fe f8c0 	bl	800ca04 <HAL_RCC_GetPCLK1Freq>
 800e884:	61b8      	str	r0, [r7, #24]
        break;
 800e886:	e013      	b.n	800e8b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e888:	f7fe f8d0 	bl	800ca2c <HAL_RCC_GetPCLK2Freq>
 800e88c:	61b8      	str	r0, [r7, #24]
        break;
 800e88e:	e00f      	b.n	800e8b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e890:	4b1d      	ldr	r3, [pc, #116]	; (800e908 <UART_SetConfig+0x4c4>)
 800e892:	61bb      	str	r3, [r7, #24]
        break;
 800e894:	e00c      	b.n	800e8b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e896:	f7fd ffe3 	bl	800c860 <HAL_RCC_GetSysClockFreq>
 800e89a:	61b8      	str	r0, [r7, #24]
        break;
 800e89c:	e008      	b.n	800e8b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e89e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8a2:	61bb      	str	r3, [r7, #24]
        break;
 800e8a4:	e004      	b.n	800e8b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	77bb      	strb	r3, [r7, #30]
        break;
 800e8ae:	bf00      	nop
    }

    if (pclk != 0U)
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d018      	beq.n	800e8e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	085a      	lsrs	r2, r3, #1
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	441a      	add	r2, r3
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	2b0f      	cmp	r3, #15
 800e8ce:	d909      	bls.n	800e8e4 <UART_SetConfig+0x4a0>
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8d6:	d205      	bcs.n	800e8e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	b29a      	uxth	r2, r3
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	60da      	str	r2, [r3, #12]
 800e8e2:	e001      	b.n	800e8e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e8f4:	7fbb      	ldrb	r3, [r7, #30]
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3720      	adds	r7, #32
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	40007c00 	.word	0x40007c00
 800e904:	40023800 	.word	0x40023800
 800e908:	00f42400 	.word	0x00f42400

0800e90c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b083      	sub	sp, #12
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e918:	f003 0301 	and.w	r3, r3, #1
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00a      	beq.n	800e936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	430a      	orrs	r2, r1
 800e934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e93a:	f003 0302 	and.w	r3, r3, #2
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d00a      	beq.n	800e958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	430a      	orrs	r2, r1
 800e956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e95c:	f003 0304 	and.w	r3, r3, #4
 800e960:	2b00      	cmp	r3, #0
 800e962:	d00a      	beq.n	800e97a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	430a      	orrs	r2, r1
 800e978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e97e:	f003 0308 	and.w	r3, r3, #8
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00a      	beq.n	800e99c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	430a      	orrs	r2, r1
 800e99a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a0:	f003 0310 	and.w	r3, r3, #16
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d00a      	beq.n	800e9be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	689b      	ldr	r3, [r3, #8]
 800e9ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	430a      	orrs	r2, r1
 800e9bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c2:	f003 0320 	and.w	r3, r3, #32
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00a      	beq.n	800e9e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	689b      	ldr	r3, [r3, #8]
 800e9d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	430a      	orrs	r2, r1
 800e9de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d01a      	beq.n	800ea22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	430a      	orrs	r2, r1
 800ea00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea0a:	d10a      	bne.n	800ea22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	430a      	orrs	r2, r1
 800ea20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d00a      	beq.n	800ea44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	430a      	orrs	r2, r1
 800ea42:	605a      	str	r2, [r3, #4]
  }
}
 800ea44:	bf00      	nop
 800ea46:	370c      	adds	r7, #12
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr

0800ea50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b086      	sub	sp, #24
 800ea54:	af02      	add	r7, sp, #8
 800ea56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ea60:	f7fa fec2 	bl	80097e8 <HAL_GetTick>
 800ea64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f003 0308 	and.w	r3, r3, #8
 800ea70:	2b08      	cmp	r3, #8
 800ea72:	d10e      	bne.n	800ea92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ea78:	9300      	str	r3, [sp, #0]
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f81b 	bl	800eabe <UART_WaitOnFlagUntilTimeout>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d001      	beq.n	800ea92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea8e:	2303      	movs	r3, #3
 800ea90:	e011      	b.n	800eab6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2220      	movs	r2, #32
 800ea96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2220      	movs	r2, #32
 800ea9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2200      	movs	r2, #0
 800eab0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800eab4:	2300      	movs	r3, #0
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3710      	adds	r7, #16
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b09c      	sub	sp, #112	; 0x70
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	60f8      	str	r0, [r7, #12]
 800eac6:	60b9      	str	r1, [r7, #8]
 800eac8:	603b      	str	r3, [r7, #0]
 800eaca:	4613      	mov	r3, r2
 800eacc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eace:	e0a7      	b.n	800ec20 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ead0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ead2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ead6:	f000 80a3 	beq.w	800ec20 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eada:	f7fa fe85 	bl	80097e8 <HAL_GetTick>
 800eade:	4602      	mov	r2, r0
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	1ad3      	subs	r3, r2, r3
 800eae4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d302      	bcc.n	800eaf0 <UART_WaitOnFlagUntilTimeout+0x32>
 800eaea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d13f      	bne.n	800eb70 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaf8:	e853 3f00 	ldrex	r3, [r3]
 800eafc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eb04:	667b      	str	r3, [r7, #100]	; 0x64
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb10:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eb14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eb16:	e841 2300 	strex	r3, r2, [r1]
 800eb1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800eb1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d1e6      	bne.n	800eaf0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	3308      	adds	r3, #8
 800eb28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb2c:	e853 3f00 	ldrex	r3, [r3]
 800eb30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb34:	f023 0301 	bic.w	r3, r3, #1
 800eb38:	663b      	str	r3, [r7, #96]	; 0x60
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	3308      	adds	r3, #8
 800eb40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb42:	64ba      	str	r2, [r7, #72]	; 0x48
 800eb44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb4a:	e841 2300 	strex	r3, r2, [r1]
 800eb4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eb50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1e5      	bne.n	800eb22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2220      	movs	r2, #32
 800eb5a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2220      	movs	r2, #32
 800eb60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800eb6c:	2303      	movs	r3, #3
 800eb6e:	e068      	b.n	800ec42 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f003 0304 	and.w	r3, r3, #4
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d050      	beq.n	800ec20 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	69db      	ldr	r3, [r3, #28]
 800eb84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb8c:	d148      	bne.n	800ec20 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb96:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba0:	e853 3f00 	ldrex	r3, [r3]
 800eba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ebac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebb6:	637b      	str	r3, [r7, #52]	; 0x34
 800ebb8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ebbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebbe:	e841 2300 	strex	r3, r2, [r1]
 800ebc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ebc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d1e6      	bne.n	800eb98 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	3308      	adds	r3, #8
 800ebd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	e853 3f00 	ldrex	r3, [r3]
 800ebd8:	613b      	str	r3, [r7, #16]
   return(result);
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	f023 0301 	bic.w	r3, r3, #1
 800ebe0:	66bb      	str	r3, [r7, #104]	; 0x68
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	3308      	adds	r3, #8
 800ebe8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ebea:	623a      	str	r2, [r7, #32]
 800ebec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebee:	69f9      	ldr	r1, [r7, #28]
 800ebf0:	6a3a      	ldr	r2, [r7, #32]
 800ebf2:	e841 2300 	strex	r3, r2, [r1]
 800ebf6:	61bb      	str	r3, [r7, #24]
   return(result);
 800ebf8:	69bb      	ldr	r3, [r7, #24]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d1e5      	bne.n	800ebca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2220      	movs	r2, #32
 800ec02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2220      	movs	r2, #32
 800ec08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2220      	movs	r2, #32
 800ec10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2200      	movs	r2, #0
 800ec18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ec1c:	2303      	movs	r3, #3
 800ec1e:	e010      	b.n	800ec42 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	69da      	ldr	r2, [r3, #28]
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	4013      	ands	r3, r2
 800ec2a:	68ba      	ldr	r2, [r7, #8]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	bf0c      	ite	eq
 800ec30:	2301      	moveq	r3, #1
 800ec32:	2300      	movne	r3, #0
 800ec34:	b2db      	uxtb	r3, r3
 800ec36:	461a      	mov	r2, r3
 800ec38:	79fb      	ldrb	r3, [r7, #7]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	f43f af48 	beq.w	800ead0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ec40:	2300      	movs	r3, #0
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3770      	adds	r7, #112	; 0x70
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
	...

0800ec4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b097      	sub	sp, #92	; 0x5c
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	4613      	mov	r3, r2
 800ec58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	68ba      	ldr	r2, [r7, #8]
 800ec5e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	88fa      	ldrh	r2, [r7, #6]
 800ec64:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	88fa      	ldrh	r2, [r7, #6]
 800ec6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2200      	movs	r2, #0
 800ec74:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	689b      	ldr	r3, [r3, #8]
 800ec7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec7e:	d10e      	bne.n	800ec9e <UART_Start_Receive_IT+0x52>
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	691b      	ldr	r3, [r3, #16]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d105      	bne.n	800ec94 <UART_Start_Receive_IT+0x48>
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ec8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ec92:	e02d      	b.n	800ecf0 <UART_Start_Receive_IT+0xa4>
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	22ff      	movs	r2, #255	; 0xff
 800ec98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ec9c:	e028      	b.n	800ecf0 <UART_Start_Receive_IT+0xa4>
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	689b      	ldr	r3, [r3, #8]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d10d      	bne.n	800ecc2 <UART_Start_Receive_IT+0x76>
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	691b      	ldr	r3, [r3, #16]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d104      	bne.n	800ecb8 <UART_Start_Receive_IT+0x6c>
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	22ff      	movs	r2, #255	; 0xff
 800ecb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ecb6:	e01b      	b.n	800ecf0 <UART_Start_Receive_IT+0xa4>
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	227f      	movs	r2, #127	; 0x7f
 800ecbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ecc0:	e016      	b.n	800ecf0 <UART_Start_Receive_IT+0xa4>
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	689b      	ldr	r3, [r3, #8]
 800ecc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ecca:	d10d      	bne.n	800ece8 <UART_Start_Receive_IT+0x9c>
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	691b      	ldr	r3, [r3, #16]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d104      	bne.n	800ecde <UART_Start_Receive_IT+0x92>
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	227f      	movs	r2, #127	; 0x7f
 800ecd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ecdc:	e008      	b.n	800ecf0 <UART_Start_Receive_IT+0xa4>
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	223f      	movs	r2, #63	; 0x3f
 800ece2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ece6:	e003      	b.n	800ecf0 <UART_Start_Receive_IT+0xa4>
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2200      	movs	r2, #0
 800ecec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2222      	movs	r2, #34	; 0x22
 800ecfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	3308      	adds	r3, #8
 800ed06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed0a:	e853 3f00 	ldrex	r3, [r3]
 800ed0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ed10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed12:	f043 0301 	orr.w	r3, r3, #1
 800ed16:	657b      	str	r3, [r7, #84]	; 0x54
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	3308      	adds	r3, #8
 800ed1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed20:	64ba      	str	r2, [r7, #72]	; 0x48
 800ed22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed28:	e841 2300 	strex	r3, r2, [r1]
 800ed2c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ed2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d1e5      	bne.n	800ed00 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed3c:	d107      	bne.n	800ed4e <UART_Start_Receive_IT+0x102>
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	691b      	ldr	r3, [r3, #16]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d103      	bne.n	800ed4e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	4a21      	ldr	r2, [pc, #132]	; (800edd0 <UART_Start_Receive_IT+0x184>)
 800ed4a:	669a      	str	r2, [r3, #104]	; 0x68
 800ed4c:	e002      	b.n	800ed54 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	4a20      	ldr	r2, [pc, #128]	; (800edd4 <UART_Start_Receive_IT+0x188>)
 800ed52:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d019      	beq.n	800ed90 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed64:	e853 3f00 	ldrex	r3, [r3]
 800ed68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ed70:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	461a      	mov	r2, r3
 800ed78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ed7c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed82:	e841 2300 	strex	r3, r2, [r1]
 800ed86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ed88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d1e6      	bne.n	800ed5c <UART_Start_Receive_IT+0x110>
 800ed8e:	e018      	b.n	800edc2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	e853 3f00 	ldrex	r3, [r3]
 800ed9c:	613b      	str	r3, [r7, #16]
   return(result);
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	f043 0320 	orr.w	r3, r3, #32
 800eda4:	653b      	str	r3, [r7, #80]	; 0x50
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	461a      	mov	r2, r3
 800edac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edae:	623b      	str	r3, [r7, #32]
 800edb0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb2:	69f9      	ldr	r1, [r7, #28]
 800edb4:	6a3a      	ldr	r2, [r7, #32]
 800edb6:	e841 2300 	strex	r3, r2, [r1]
 800edba:	61bb      	str	r3, [r7, #24]
   return(result);
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1e6      	bne.n	800ed90 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800edc2:	2300      	movs	r3, #0
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	375c      	adds	r7, #92	; 0x5c
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr
 800edd0:	0800f1fd 	.word	0x0800f1fd
 800edd4:	0800f097 	.word	0x0800f097

0800edd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800edd8:	b480      	push	{r7}
 800edda:	b095      	sub	sp, #84	; 0x54
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ede6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ede8:	e853 3f00 	ldrex	r3, [r3]
 800edec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800edee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800edf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	461a      	mov	r2, r3
 800edfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edfe:	643b      	str	r3, [r7, #64]	; 0x40
 800ee00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee06:	e841 2300 	strex	r3, r2, [r1]
 800ee0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d1e6      	bne.n	800ede0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	3308      	adds	r3, #8
 800ee18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee1a:	6a3b      	ldr	r3, [r7, #32]
 800ee1c:	e853 3f00 	ldrex	r3, [r3]
 800ee20:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	f023 0301 	bic.w	r3, r3, #1
 800ee28:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	3308      	adds	r3, #8
 800ee30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee32:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ee34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee3a:	e841 2300 	strex	r3, r2, [r1]
 800ee3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d1e5      	bne.n	800ee12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee4a:	2b01      	cmp	r3, #1
 800ee4c:	d118      	bne.n	800ee80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	e853 3f00 	ldrex	r3, [r3]
 800ee5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	f023 0310 	bic.w	r3, r3, #16
 800ee62:	647b      	str	r3, [r7, #68]	; 0x44
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	461a      	mov	r2, r3
 800ee6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee6c:	61bb      	str	r3, [r7, #24]
 800ee6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee70:	6979      	ldr	r1, [r7, #20]
 800ee72:	69ba      	ldr	r2, [r7, #24]
 800ee74:	e841 2300 	strex	r3, r2, [r1]
 800ee78:	613b      	str	r3, [r7, #16]
   return(result);
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d1e6      	bne.n	800ee4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2220      	movs	r2, #32
 800ee84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2200      	movs	r2, #0
 800ee92:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ee94:	bf00      	nop
 800ee96:	3754      	adds	r7, #84	; 0x54
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr

0800eea0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eebe:	68f8      	ldr	r0, [r7, #12]
 800eec0:	f7ff faaa 	bl	800e418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eec4:	bf00      	nop
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eecc:	b480      	push	{r7}
 800eece:	b08f      	sub	sp, #60	; 0x3c
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eed8:	2b21      	cmp	r3, #33	; 0x21
 800eeda:	d14c      	bne.n	800ef76 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800eee2:	b29b      	uxth	r3, r3
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d132      	bne.n	800ef4e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeee:	6a3b      	ldr	r3, [r7, #32]
 800eef0:	e853 3f00 	ldrex	r3, [r3]
 800eef4:	61fb      	str	r3, [r7, #28]
   return(result);
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eefc:	637b      	str	r3, [r7, #52]	; 0x34
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	461a      	mov	r2, r3
 800ef04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef08:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef0e:	e841 2300 	strex	r3, r2, [r1]
 800ef12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d1e6      	bne.n	800eee8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	e853 3f00 	ldrex	r3, [r3]
 800ef26:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef2e:	633b      	str	r3, [r7, #48]	; 0x30
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	461a      	mov	r2, r3
 800ef36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef38:	61bb      	str	r3, [r7, #24]
 800ef3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef3c:	6979      	ldr	r1, [r7, #20]
 800ef3e:	69ba      	ldr	r2, [r7, #24]
 800ef40:	e841 2300 	strex	r3, r2, [r1]
 800ef44:	613b      	str	r3, [r7, #16]
   return(result);
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d1e6      	bne.n	800ef1a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ef4c:	e013      	b.n	800ef76 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef52:	781a      	ldrb	r2, [r3, #0]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef5e:	1c5a      	adds	r2, r3, #1
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	3b01      	subs	r3, #1
 800ef6e:	b29a      	uxth	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800ef76:	bf00      	nop
 800ef78:	373c      	adds	r7, #60	; 0x3c
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr

0800ef82 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ef82:	b480      	push	{r7}
 800ef84:	b091      	sub	sp, #68	; 0x44
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef8e:	2b21      	cmp	r3, #33	; 0x21
 800ef90:	d151      	bne.n	800f036 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d132      	bne.n	800f004 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa6:	e853 3f00 	ldrex	r3, [r3]
 800efaa:	623b      	str	r3, [r7, #32]
   return(result);
 800efac:	6a3b      	ldr	r3, [r7, #32]
 800efae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800efb2:	63bb      	str	r3, [r7, #56]	; 0x38
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	461a      	mov	r2, r3
 800efba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efbc:	633b      	str	r3, [r7, #48]	; 0x30
 800efbe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800efc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efc4:	e841 2300 	strex	r3, r2, [r1]
 800efc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800efca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d1e6      	bne.n	800ef9e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	e853 3f00 	ldrex	r3, [r3]
 800efdc:	60fb      	str	r3, [r7, #12]
   return(result);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efe4:	637b      	str	r3, [r7, #52]	; 0x34
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	461a      	mov	r2, r3
 800efec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efee:	61fb      	str	r3, [r7, #28]
 800eff0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff2:	69b9      	ldr	r1, [r7, #24]
 800eff4:	69fa      	ldr	r2, [r7, #28]
 800eff6:	e841 2300 	strex	r3, r2, [r1]
 800effa:	617b      	str	r3, [r7, #20]
   return(result);
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d1e6      	bne.n	800efd0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800f002:	e018      	b.n	800f036 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f008:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f00c:	881b      	ldrh	r3, [r3, #0]
 800f00e:	461a      	mov	r2, r3
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f018:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f01e:	1c9a      	adds	r2, r3, #2
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	3b01      	subs	r3, #1
 800f02e:	b29a      	uxth	r2, r3
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800f036:	bf00      	nop
 800f038:	3744      	adds	r7, #68	; 0x44
 800f03a:	46bd      	mov	sp, r7
 800f03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f040:	4770      	bx	lr

0800f042 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f042:	b580      	push	{r7, lr}
 800f044:	b088      	sub	sp, #32
 800f046:	af00      	add	r7, sp, #0
 800f048:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	e853 3f00 	ldrex	r3, [r3]
 800f056:	60bb      	str	r3, [r7, #8]
   return(result);
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f05e:	61fb      	str	r3, [r7, #28]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	461a      	mov	r2, r3
 800f066:	69fb      	ldr	r3, [r7, #28]
 800f068:	61bb      	str	r3, [r7, #24]
 800f06a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f06c:	6979      	ldr	r1, [r7, #20]
 800f06e:	69ba      	ldr	r2, [r7, #24]
 800f070:	e841 2300 	strex	r3, r2, [r1]
 800f074:	613b      	str	r3, [r7, #16]
   return(result);
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d1e6      	bne.n	800f04a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2220      	movs	r2, #32
 800f080:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2200      	movs	r2, #0
 800f086:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f7ff f9bb 	bl	800e404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f08e:	bf00      	nop
 800f090:	3720      	adds	r7, #32
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}

0800f096 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f096:	b580      	push	{r7, lr}
 800f098:	b096      	sub	sp, #88	; 0x58
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f0a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0ae:	2b22      	cmp	r3, #34	; 0x22
 800f0b0:	f040 8098 	bne.w	800f1e4 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f0be:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f0c2:	b2d9      	uxtb	r1, r3
 800f0c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f0c8:	b2da      	uxtb	r2, r3
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0ce:	400a      	ands	r2, r1
 800f0d0:	b2d2      	uxtb	r2, r2
 800f0d2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0d8:	1c5a      	adds	r2, r3, #1
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	3b01      	subs	r3, #1
 800f0e8:	b29a      	uxth	r2, r3
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d17b      	bne.n	800f1f4 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f104:	e853 3f00 	ldrex	r3, [r3]
 800f108:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f10c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f110:	653b      	str	r3, [r7, #80]	; 0x50
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	461a      	mov	r2, r3
 800f118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f11a:	647b      	str	r3, [r7, #68]	; 0x44
 800f11c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f11e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f120:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f122:	e841 2300 	strex	r3, r2, [r1]
 800f126:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d1e6      	bne.n	800f0fc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	3308      	adds	r3, #8
 800f134:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f138:	e853 3f00 	ldrex	r3, [r3]
 800f13c:	623b      	str	r3, [r7, #32]
   return(result);
 800f13e:	6a3b      	ldr	r3, [r7, #32]
 800f140:	f023 0301 	bic.w	r3, r3, #1
 800f144:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	3308      	adds	r3, #8
 800f14c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f14e:	633a      	str	r2, [r7, #48]	; 0x30
 800f150:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f156:	e841 2300 	strex	r3, r2, [r1]
 800f15a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d1e5      	bne.n	800f12e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2220      	movs	r2, #32
 800f166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2200      	movs	r2, #0
 800f16e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2200      	movs	r2, #0
 800f174:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	d12e      	bne.n	800f1dc <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2200      	movs	r2, #0
 800f182:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	e853 3f00 	ldrex	r3, [r3]
 800f190:	60fb      	str	r3, [r7, #12]
   return(result);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f023 0310 	bic.w	r3, r3, #16
 800f198:	64bb      	str	r3, [r7, #72]	; 0x48
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	461a      	mov	r2, r3
 800f1a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1a2:	61fb      	str	r3, [r7, #28]
 800f1a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a6:	69b9      	ldr	r1, [r7, #24]
 800f1a8:	69fa      	ldr	r2, [r7, #28]
 800f1aa:	e841 2300 	strex	r3, r2, [r1]
 800f1ae:	617b      	str	r3, [r7, #20]
   return(result);
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1e6      	bne.n	800f184 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	69db      	ldr	r3, [r3, #28]
 800f1bc:	f003 0310 	and.w	r3, r3, #16
 800f1c0:	2b10      	cmp	r3, #16
 800f1c2:	d103      	bne.n	800f1cc <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	2210      	movs	r2, #16
 800f1ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7ff f929 	bl	800e42c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f1da:	e00b      	b.n	800f1f4 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f7f1 fedf 	bl	8000fa0 <HAL_UART_RxCpltCallback>
}
 800f1e2:	e007      	b.n	800f1f4 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	699a      	ldr	r2, [r3, #24]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f042 0208 	orr.w	r2, r2, #8
 800f1f2:	619a      	str	r2, [r3, #24]
}
 800f1f4:	bf00      	nop
 800f1f6:	3758      	adds	r7, #88	; 0x58
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b096      	sub	sp, #88	; 0x58
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f20a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f214:	2b22      	cmp	r3, #34	; 0x22
 800f216:	f040 8098 	bne.w	800f34a <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f220:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f228:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f22a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f22e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f232:	4013      	ands	r3, r2
 800f234:	b29a      	uxth	r2, r3
 800f236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f238:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f23e:	1c9a      	adds	r2, r3, #2
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	3b01      	subs	r3, #1
 800f24e:	b29a      	uxth	r2, r3
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d17b      	bne.n	800f35a <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f26a:	e853 3f00 	ldrex	r3, [r3]
 800f26e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f272:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f276:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	461a      	mov	r2, r3
 800f27e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f280:	643b      	str	r3, [r7, #64]	; 0x40
 800f282:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f284:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f286:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f288:	e841 2300 	strex	r3, r2, [r1]
 800f28c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f290:	2b00      	cmp	r3, #0
 800f292:	d1e6      	bne.n	800f262 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	3308      	adds	r3, #8
 800f29a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f29c:	6a3b      	ldr	r3, [r7, #32]
 800f29e:	e853 3f00 	ldrex	r3, [r3]
 800f2a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	f023 0301 	bic.w	r3, r3, #1
 800f2aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	3308      	adds	r3, #8
 800f2b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f2b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2bc:	e841 2300 	strex	r3, r2, [r1]
 800f2c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d1e5      	bne.n	800f294 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2220      	movs	r2, #32
 800f2cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d12e      	bne.n	800f342 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	e853 3f00 	ldrex	r3, [r3]
 800f2f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	f023 0310 	bic.w	r3, r3, #16
 800f2fe:	647b      	str	r3, [r7, #68]	; 0x44
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	461a      	mov	r2, r3
 800f306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f308:	61bb      	str	r3, [r7, #24]
 800f30a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f30c:	6979      	ldr	r1, [r7, #20]
 800f30e:	69ba      	ldr	r2, [r7, #24]
 800f310:	e841 2300 	strex	r3, r2, [r1]
 800f314:	613b      	str	r3, [r7, #16]
   return(result);
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d1e6      	bne.n	800f2ea <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	69db      	ldr	r3, [r3, #28]
 800f322:	f003 0310 	and.w	r3, r3, #16
 800f326:	2b10      	cmp	r3, #16
 800f328:	d103      	bne.n	800f332 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2210      	movs	r2, #16
 800f330:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7ff f876 	bl	800e42c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f340:	e00b      	b.n	800f35a <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f7f1 fe2c 	bl	8000fa0 <HAL_UART_RxCpltCallback>
}
 800f348:	e007      	b.n	800f35a <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	699a      	ldr	r2, [r3, #24]
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f042 0208 	orr.w	r2, r2, #8
 800f358:	619a      	str	r2, [r3, #24]
}
 800f35a:	bf00      	nop
 800f35c:	3758      	adds	r7, #88	; 0x58
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
	...

0800f364 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800f364:	b480      	push	{r7}
 800f366:	b087      	sub	sp, #28
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	681a      	ldr	r2, [r3, #0]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f378:	683a      	ldr	r2, [r7, #0]
 800f37a:	6812      	ldr	r2, [r2, #0]
 800f37c:	f023 0101 	bic.w	r1, r3, #1
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	689b      	ldr	r3, [r3, #8]
 800f38a:	2b08      	cmp	r3, #8
 800f38c:	d102      	bne.n	800f394 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800f38e:	2340      	movs	r3, #64	; 0x40
 800f390:	617b      	str	r3, [r7, #20]
 800f392:	e001      	b.n	800f398 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800f394:	2300      	movs	r3, #0
 800f396:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800f3a4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800f3aa:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800f3b0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800f3b6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800f3bc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800f3c2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800f3c8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800f3ce:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800f3d4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800f3da:	4313      	orrs	r3, r2
 800f3dc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3e2:	693a      	ldr	r2, [r7, #16]
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ec:	693a      	ldr	r2, [r7, #16]
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3f6:	693a      	ldr	r2, [r7, #16]
 800f3f8:	4313      	orrs	r3, r2
 800f3fa:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 800f3fc:	4b20      	ldr	r3, [pc, #128]	; (800f480 <FMC_NORSRAM_Init+0x11c>)
 800f3fe:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f406:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f40e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800f416:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	681a      	ldr	r2, [r3, #0]
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	43db      	mvns	r3, r3
 800f426:	ea02 0103 	and.w	r1, r2, r3
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	4319      	orrs	r1, r3
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f43c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f440:	d10c      	bne.n	800f45c <FMC_NORSRAM_Init+0xf8>
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d008      	beq.n	800f45c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f456:	431a      	orrs	r2, r3
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d006      	beq.n	800f472 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f46c:	431a      	orrs	r2, r3
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f472:	2300      	movs	r3, #0
}
 800f474:	4618      	mov	r0, r3
 800f476:	371c      	adds	r7, #28
 800f478:	46bd      	mov	sp, r7
 800f47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47e:	4770      	bx	lr
 800f480:	0008fb7f 	.word	0x0008fb7f

0800f484 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f484:	b480      	push	{r7}
 800f486:	b087      	sub	sp, #28
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	1c5a      	adds	r2, r3, #1
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f49a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	681a      	ldr	r2, [r3, #0]
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	011b      	lsls	r3, r3, #4
 800f4a8:	431a      	orrs	r2, r3
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	689b      	ldr	r3, [r3, #8]
 800f4ae:	021b      	lsls	r3, r3, #8
 800f4b0:	431a      	orrs	r2, r3
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	68db      	ldr	r3, [r3, #12]
 800f4b6:	041b      	lsls	r3, r3, #16
 800f4b8:	431a      	orrs	r2, r3
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	691b      	ldr	r3, [r3, #16]
 800f4be:	3b01      	subs	r3, #1
 800f4c0:	051b      	lsls	r3, r3, #20
 800f4c2:	431a      	orrs	r2, r3
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	695b      	ldr	r3, [r3, #20]
 800f4c8:	3b02      	subs	r3, #2
 800f4ca:	061b      	lsls	r3, r3, #24
 800f4cc:	431a      	orrs	r2, r3
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	699b      	ldr	r3, [r3, #24]
 800f4d2:	4313      	orrs	r3, r2
 800f4d4:	687a      	ldr	r2, [r7, #4]
 800f4d6:	3201      	adds	r2, #1
 800f4d8:	4319      	orrs	r1, r3
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f4e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4ec:	d113      	bne.n	800f516 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f4f6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	691b      	ldr	r3, [r3, #16]
 800f4fc:	3b01      	subs	r3, #1
 800f4fe:	051b      	lsls	r3, r3, #20
 800f500:	697a      	ldr	r2, [r7, #20]
 800f502:	4313      	orrs	r3, r2
 800f504:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	431a      	orrs	r2, r3
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f516:	2300      	movs	r3, #0
}
 800f518:	4618      	mov	r0, r3
 800f51a:	371c      	adds	r7, #28
 800f51c:	46bd      	mov	sp, r7
 800f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f522:	4770      	bx	lr

0800f524 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800f524:	b480      	push	{r7}
 800f526:	b085      	sub	sp, #20
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	60b9      	str	r1, [r7, #8]
 800f52e:	607a      	str	r2, [r7, #4]
 800f530:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f538:	d11d      	bne.n	800f576 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f542:	4b13      	ldr	r3, [pc, #76]	; (800f590 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800f544:	4013      	ands	r3, r2
 800f546:	68ba      	ldr	r2, [r7, #8]
 800f548:	6811      	ldr	r1, [r2, #0]
 800f54a:	68ba      	ldr	r2, [r7, #8]
 800f54c:	6852      	ldr	r2, [r2, #4]
 800f54e:	0112      	lsls	r2, r2, #4
 800f550:	4311      	orrs	r1, r2
 800f552:	68ba      	ldr	r2, [r7, #8]
 800f554:	6892      	ldr	r2, [r2, #8]
 800f556:	0212      	lsls	r2, r2, #8
 800f558:	4311      	orrs	r1, r2
 800f55a:	68ba      	ldr	r2, [r7, #8]
 800f55c:	6992      	ldr	r2, [r2, #24]
 800f55e:	4311      	orrs	r1, r2
 800f560:	68ba      	ldr	r2, [r7, #8]
 800f562:	68d2      	ldr	r2, [r2, #12]
 800f564:	0412      	lsls	r2, r2, #16
 800f566:	430a      	orrs	r2, r1
 800f568:	ea43 0102 	orr.w	r1, r3, r2
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	687a      	ldr	r2, [r7, #4]
 800f570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f574:	e005      	b.n	800f582 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	687a      	ldr	r2, [r7, #4]
 800f57a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f57e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800f582:	2300      	movs	r3, #0
}
 800f584:	4618      	mov	r0, r3
 800f586:	3714      	adds	r7, #20
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr
 800f590:	cff00000 	.word	0xcff00000

0800f594 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f594:	b5b0      	push	{r4, r5, r7, lr}
 800f596:	b08c      	sub	sp, #48	; 0x30
 800f598:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800f59a:	4b96      	ldr	r3, [pc, #600]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f59c:	22c0      	movs	r2, #192	; 0xc0
 800f59e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800f5a0:	4b94      	ldr	r3, [pc, #592]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f5a2:	22a8      	movs	r2, #168	; 0xa8
 800f5a4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800f5a6:	4b93      	ldr	r3, [pc, #588]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 30;
 800f5ac:	4b91      	ldr	r3, [pc, #580]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f5ae:	221e      	movs	r2, #30
 800f5b0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800f5b2:	4b91      	ldr	r3, [pc, #580]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f5b4:	22ff      	movs	r2, #255	; 0xff
 800f5b6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800f5b8:	4b8f      	ldr	r3, [pc, #572]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f5ba:	22ff      	movs	r2, #255	; 0xff
 800f5bc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800f5be:	4b8e      	ldr	r3, [pc, #568]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f5c0:	22ff      	movs	r2, #255	; 0xff
 800f5c2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800f5c4:	4b8c      	ldr	r3, [pc, #560]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800f5ca:	4b8c      	ldr	r3, [pc, #560]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f5cc:	22c0      	movs	r2, #192	; 0xc0
 800f5ce:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800f5d0:	4b8a      	ldr	r3, [pc, #552]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f5d2:	22a8      	movs	r2, #168	; 0xa8
 800f5d4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800f5d6:	4b89      	ldr	r3, [pc, #548]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f5d8:	2201      	movs	r2, #1
 800f5da:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800f5dc:	4b87      	ldr	r3, [pc, #540]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f5de:	2201      	movs	r2, #1
 800f5e0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	2000      	movs	r0, #0
 800f5e6:	f006 fa6f 	bl	8015ac8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800f5ea:	4b82      	ldr	r3, [pc, #520]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	061a      	lsls	r2, r3, #24
 800f5f0:	4b80      	ldr	r3, [pc, #512]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f5f2:	785b      	ldrb	r3, [r3, #1]
 800f5f4:	041b      	lsls	r3, r3, #16
 800f5f6:	431a      	orrs	r2, r3
 800f5f8:	4b7e      	ldr	r3, [pc, #504]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f5fa:	789b      	ldrb	r3, [r3, #2]
 800f5fc:	021b      	lsls	r3, r3, #8
 800f5fe:	4313      	orrs	r3, r2
 800f600:	4a7c      	ldr	r2, [pc, #496]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f602:	78d2      	ldrb	r2, [r2, #3]
 800f604:	4313      	orrs	r3, r2
 800f606:	061a      	lsls	r2, r3, #24
 800f608:	4b7a      	ldr	r3, [pc, #488]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	0619      	lsls	r1, r3, #24
 800f60e:	4b79      	ldr	r3, [pc, #484]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f610:	785b      	ldrb	r3, [r3, #1]
 800f612:	041b      	lsls	r3, r3, #16
 800f614:	4319      	orrs	r1, r3
 800f616:	4b77      	ldr	r3, [pc, #476]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f618:	789b      	ldrb	r3, [r3, #2]
 800f61a:	021b      	lsls	r3, r3, #8
 800f61c:	430b      	orrs	r3, r1
 800f61e:	4975      	ldr	r1, [pc, #468]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f620:	78c9      	ldrb	r1, [r1, #3]
 800f622:	430b      	orrs	r3, r1
 800f624:	021b      	lsls	r3, r3, #8
 800f626:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f62a:	431a      	orrs	r2, r3
 800f62c:	4b71      	ldr	r3, [pc, #452]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	0619      	lsls	r1, r3, #24
 800f632:	4b70      	ldr	r3, [pc, #448]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f634:	785b      	ldrb	r3, [r3, #1]
 800f636:	041b      	lsls	r3, r3, #16
 800f638:	4319      	orrs	r1, r3
 800f63a:	4b6e      	ldr	r3, [pc, #440]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f63c:	789b      	ldrb	r3, [r3, #2]
 800f63e:	021b      	lsls	r3, r3, #8
 800f640:	430b      	orrs	r3, r1
 800f642:	496c      	ldr	r1, [pc, #432]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f644:	78c9      	ldrb	r1, [r1, #3]
 800f646:	430b      	orrs	r3, r1
 800f648:	0a1b      	lsrs	r3, r3, #8
 800f64a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f64e:	431a      	orrs	r2, r3
 800f650:	4b68      	ldr	r3, [pc, #416]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	0619      	lsls	r1, r3, #24
 800f656:	4b67      	ldr	r3, [pc, #412]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f658:	785b      	ldrb	r3, [r3, #1]
 800f65a:	041b      	lsls	r3, r3, #16
 800f65c:	4319      	orrs	r1, r3
 800f65e:	4b65      	ldr	r3, [pc, #404]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f660:	789b      	ldrb	r3, [r3, #2]
 800f662:	021b      	lsls	r3, r3, #8
 800f664:	430b      	orrs	r3, r1
 800f666:	4963      	ldr	r1, [pc, #396]	; (800f7f4 <MX_LWIP_Init+0x260>)
 800f668:	78c9      	ldrb	r1, [r1, #3]
 800f66a:	430b      	orrs	r3, r1
 800f66c:	0e1b      	lsrs	r3, r3, #24
 800f66e:	4313      	orrs	r3, r2
 800f670:	4a63      	ldr	r2, [pc, #396]	; (800f800 <MX_LWIP_Init+0x26c>)
 800f672:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800f674:	4b60      	ldr	r3, [pc, #384]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	061a      	lsls	r2, r3, #24
 800f67a:	4b5f      	ldr	r3, [pc, #380]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f67c:	785b      	ldrb	r3, [r3, #1]
 800f67e:	041b      	lsls	r3, r3, #16
 800f680:	431a      	orrs	r2, r3
 800f682:	4b5d      	ldr	r3, [pc, #372]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f684:	789b      	ldrb	r3, [r3, #2]
 800f686:	021b      	lsls	r3, r3, #8
 800f688:	4313      	orrs	r3, r2
 800f68a:	4a5b      	ldr	r2, [pc, #364]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f68c:	78d2      	ldrb	r2, [r2, #3]
 800f68e:	4313      	orrs	r3, r2
 800f690:	061a      	lsls	r2, r3, #24
 800f692:	4b59      	ldr	r3, [pc, #356]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	0619      	lsls	r1, r3, #24
 800f698:	4b57      	ldr	r3, [pc, #348]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f69a:	785b      	ldrb	r3, [r3, #1]
 800f69c:	041b      	lsls	r3, r3, #16
 800f69e:	4319      	orrs	r1, r3
 800f6a0:	4b55      	ldr	r3, [pc, #340]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f6a2:	789b      	ldrb	r3, [r3, #2]
 800f6a4:	021b      	lsls	r3, r3, #8
 800f6a6:	430b      	orrs	r3, r1
 800f6a8:	4953      	ldr	r1, [pc, #332]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f6aa:	78c9      	ldrb	r1, [r1, #3]
 800f6ac:	430b      	orrs	r3, r1
 800f6ae:	021b      	lsls	r3, r3, #8
 800f6b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f6b4:	431a      	orrs	r2, r3
 800f6b6:	4b50      	ldr	r3, [pc, #320]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	0619      	lsls	r1, r3, #24
 800f6bc:	4b4e      	ldr	r3, [pc, #312]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f6be:	785b      	ldrb	r3, [r3, #1]
 800f6c0:	041b      	lsls	r3, r3, #16
 800f6c2:	4319      	orrs	r1, r3
 800f6c4:	4b4c      	ldr	r3, [pc, #304]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f6c6:	789b      	ldrb	r3, [r3, #2]
 800f6c8:	021b      	lsls	r3, r3, #8
 800f6ca:	430b      	orrs	r3, r1
 800f6cc:	494a      	ldr	r1, [pc, #296]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f6ce:	78c9      	ldrb	r1, [r1, #3]
 800f6d0:	430b      	orrs	r3, r1
 800f6d2:	0a1b      	lsrs	r3, r3, #8
 800f6d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f6d8:	431a      	orrs	r2, r3
 800f6da:	4b47      	ldr	r3, [pc, #284]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	0619      	lsls	r1, r3, #24
 800f6e0:	4b45      	ldr	r3, [pc, #276]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f6e2:	785b      	ldrb	r3, [r3, #1]
 800f6e4:	041b      	lsls	r3, r3, #16
 800f6e6:	4319      	orrs	r1, r3
 800f6e8:	4b43      	ldr	r3, [pc, #268]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f6ea:	789b      	ldrb	r3, [r3, #2]
 800f6ec:	021b      	lsls	r3, r3, #8
 800f6ee:	430b      	orrs	r3, r1
 800f6f0:	4941      	ldr	r1, [pc, #260]	; (800f7f8 <MX_LWIP_Init+0x264>)
 800f6f2:	78c9      	ldrb	r1, [r1, #3]
 800f6f4:	430b      	orrs	r3, r1
 800f6f6:	0e1b      	lsrs	r3, r3, #24
 800f6f8:	4313      	orrs	r3, r2
 800f6fa:	4a42      	ldr	r2, [pc, #264]	; (800f804 <MX_LWIP_Init+0x270>)
 800f6fc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800f6fe:	4b3f      	ldr	r3, [pc, #252]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	061a      	lsls	r2, r3, #24
 800f704:	4b3d      	ldr	r3, [pc, #244]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f706:	785b      	ldrb	r3, [r3, #1]
 800f708:	041b      	lsls	r3, r3, #16
 800f70a:	431a      	orrs	r2, r3
 800f70c:	4b3b      	ldr	r3, [pc, #236]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f70e:	789b      	ldrb	r3, [r3, #2]
 800f710:	021b      	lsls	r3, r3, #8
 800f712:	4313      	orrs	r3, r2
 800f714:	4a39      	ldr	r2, [pc, #228]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f716:	78d2      	ldrb	r2, [r2, #3]
 800f718:	4313      	orrs	r3, r2
 800f71a:	061a      	lsls	r2, r3, #24
 800f71c:	4b37      	ldr	r3, [pc, #220]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	0619      	lsls	r1, r3, #24
 800f722:	4b36      	ldr	r3, [pc, #216]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f724:	785b      	ldrb	r3, [r3, #1]
 800f726:	041b      	lsls	r3, r3, #16
 800f728:	4319      	orrs	r1, r3
 800f72a:	4b34      	ldr	r3, [pc, #208]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f72c:	789b      	ldrb	r3, [r3, #2]
 800f72e:	021b      	lsls	r3, r3, #8
 800f730:	430b      	orrs	r3, r1
 800f732:	4932      	ldr	r1, [pc, #200]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f734:	78c9      	ldrb	r1, [r1, #3]
 800f736:	430b      	orrs	r3, r1
 800f738:	021b      	lsls	r3, r3, #8
 800f73a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f73e:	431a      	orrs	r2, r3
 800f740:	4b2e      	ldr	r3, [pc, #184]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	0619      	lsls	r1, r3, #24
 800f746:	4b2d      	ldr	r3, [pc, #180]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f748:	785b      	ldrb	r3, [r3, #1]
 800f74a:	041b      	lsls	r3, r3, #16
 800f74c:	4319      	orrs	r1, r3
 800f74e:	4b2b      	ldr	r3, [pc, #172]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f750:	789b      	ldrb	r3, [r3, #2]
 800f752:	021b      	lsls	r3, r3, #8
 800f754:	430b      	orrs	r3, r1
 800f756:	4929      	ldr	r1, [pc, #164]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f758:	78c9      	ldrb	r1, [r1, #3]
 800f75a:	430b      	orrs	r3, r1
 800f75c:	0a1b      	lsrs	r3, r3, #8
 800f75e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f762:	431a      	orrs	r2, r3
 800f764:	4b25      	ldr	r3, [pc, #148]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	0619      	lsls	r1, r3, #24
 800f76a:	4b24      	ldr	r3, [pc, #144]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f76c:	785b      	ldrb	r3, [r3, #1]
 800f76e:	041b      	lsls	r3, r3, #16
 800f770:	4319      	orrs	r1, r3
 800f772:	4b22      	ldr	r3, [pc, #136]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f774:	789b      	ldrb	r3, [r3, #2]
 800f776:	021b      	lsls	r3, r3, #8
 800f778:	430b      	orrs	r3, r1
 800f77a:	4920      	ldr	r1, [pc, #128]	; (800f7fc <MX_LWIP_Init+0x268>)
 800f77c:	78c9      	ldrb	r1, [r1, #3]
 800f77e:	430b      	orrs	r3, r1
 800f780:	0e1b      	lsrs	r3, r3, #24
 800f782:	4313      	orrs	r3, r2
 800f784:	4a20      	ldr	r2, [pc, #128]	; (800f808 <MX_LWIP_Init+0x274>)
 800f786:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800f788:	4b20      	ldr	r3, [pc, #128]	; (800f80c <MX_LWIP_Init+0x278>)
 800f78a:	9302      	str	r3, [sp, #8]
 800f78c:	4b20      	ldr	r3, [pc, #128]	; (800f810 <MX_LWIP_Init+0x27c>)
 800f78e:	9301      	str	r3, [sp, #4]
 800f790:	2300      	movs	r3, #0
 800f792:	9300      	str	r3, [sp, #0]
 800f794:	4b1c      	ldr	r3, [pc, #112]	; (800f808 <MX_LWIP_Init+0x274>)
 800f796:	4a1b      	ldr	r2, [pc, #108]	; (800f804 <MX_LWIP_Init+0x270>)
 800f798:	4919      	ldr	r1, [pc, #100]	; (800f800 <MX_LWIP_Init+0x26c>)
 800f79a:	481e      	ldr	r0, [pc, #120]	; (800f814 <MX_LWIP_Init+0x280>)
 800f79c:	f006 ff5e 	bl	801665c <netif_add>

  /* Registers the default network intcerface */
  netif_set_default(&gnetif);
 800f7a0:	481c      	ldr	r0, [pc, #112]	; (800f814 <MX_LWIP_Init+0x280>)
 800f7a2:	f007 f90d 	bl	80169c0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800f7a6:	4b1b      	ldr	r3, [pc, #108]	; (800f814 <MX_LWIP_Init+0x280>)
 800f7a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f7ac:	089b      	lsrs	r3, r3, #2
 800f7ae:	f003 0301 	and.w	r3, r3, #1
 800f7b2:	b2db      	uxtb	r3, r3
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d003      	beq.n	800f7c0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800f7b8:	4816      	ldr	r0, [pc, #88]	; (800f814 <MX_LWIP_Init+0x280>)
 800f7ba:	f007 f911 	bl	80169e0 <netif_set_up>
 800f7be:	e002      	b.n	800f7c6 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800f7c0:	4814      	ldr	r0, [pc, #80]	; (800f814 <MX_LWIP_Init+0x280>)
 800f7c2:	f007 f979 	bl	8016ab8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800f7c6:	4914      	ldr	r1, [pc, #80]	; (800f818 <MX_LWIP_Init+0x284>)
 800f7c8:	4812      	ldr	r0, [pc, #72]	; (800f814 <MX_LWIP_Init+0x280>)
 800f7ca:	f007 fa0b 	bl	8016be4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800f7ce:	4b13      	ldr	r3, [pc, #76]	; (800f81c <MX_LWIP_Init+0x288>)
 800f7d0:	1d3c      	adds	r4, r7, #4
 800f7d2:	461d      	mov	r5, r3
 800f7d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f7dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800f7e0:	1d3b      	adds	r3, r7, #4
 800f7e2:	490c      	ldr	r1, [pc, #48]	; (800f814 <MX_LWIP_Init+0x280>)
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f000 fd45 	bl	8010274 <osThreadCreate>

/* USER CODE BEGIN 3 */
/*Create the Ethernet link Handler Thread*/

/* USER CODE END 3 */
}
 800f7ea:	bf00      	nop
 800f7ec:	3720      	adds	r7, #32
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bdb0      	pop	{r4, r5, r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	20001a74 	.word	0x20001a74
 800f7f8:	20001a78 	.word	0x20001a78
 800f7fc:	20001a7c 	.word	0x20001a7c
 800f800:	20001a68 	.word	0x20001a68
 800f804:	20001a6c 	.word	0x20001a6c
 800f808:	20001a70 	.word	0x20001a70
 800f80c:	080159d9 	.word	0x080159d9
 800f810:	0800fd19 	.word	0x0800fd19
 800f814:	20001a34 	.word	0x20001a34
 800f818:	0800f821 	.word	0x0800f821
 800f81c:	08023ca4 	.word	0x08023ca4

0800f820 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800f828:	bf00      	nop
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800f834:	b480      	push	{r7}
 800f836:	b087      	sub	sp, #28
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800f846:	2320      	movs	r3, #32
 800f848:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f84a:	f3bf 8f4f 	dsb	sy
}
 800f84e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800f850:	e00b      	b.n	800f86a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800f852:	4a0d      	ldr	r2, [pc, #52]	; (800f888 <SCB_InvalidateDCache_by_Addr+0x54>)
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	693a      	ldr	r2, [r7, #16]
 800f85e:	4413      	add	r3, r2
 800f860:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800f862:	697a      	ldr	r2, [r7, #20]
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	1ad3      	subs	r3, r2, r3
 800f868:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	dcf0      	bgt.n	800f852 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800f870:	f3bf 8f4f 	dsb	sy
}
 800f874:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f876:	f3bf 8f6f 	isb	sy
}
 800f87a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800f87c:	bf00      	nop
 800f87e:	371c      	adds	r7, #28
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr
 800f888:	e000ed00 	.word	0xe000ed00

0800f88c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800f894:	4b04      	ldr	r3, [pc, #16]	; (800f8a8 <HAL_ETH_RxCpltCallback+0x1c>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	4618      	mov	r0, r3
 800f89a:	f000 fe67 	bl	801056c <osSemaphoreRelease>
}
 800f89e:	bf00      	nop
 800f8a0:	3708      	adds	r7, #8
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}
 800f8a6:	bf00      	nop
 800f8a8:	2000640c 	.word	0x2000640c

0800f8ac <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800f8b4:	4b04      	ldr	r3, [pc, #16]	; (800f8c8 <HAL_ETH_TxCpltCallback+0x1c>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f000 fe57 	bl	801056c <osSemaphoreRelease>
}
 800f8be:	bf00      	nop
 800f8c0:	3708      	adds	r7, #8
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	20006410 	.word	0x20006410

0800f8cc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7fb fdf5 	bl	800b4c4 <HAL_ETH_GetDMAError>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8e0:	2b80      	cmp	r3, #128	; 0x80
 800f8e2:	d104      	bne.n	800f8ee <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800f8e4:	4b04      	ldr	r3, [pc, #16]	; (800f8f8 <HAL_ETH_ErrorCallback+0x2c>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f000 fe3f 	bl	801056c <osSemaphoreRelease>
  }
}
 800f8ee:	bf00      	nop
 800f8f0:	3708      	adds	r7, #8
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop
 800f8f8:	2000640c 	.word	0x2000640c

0800f8fc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f8fc:	b5b0      	push	{r4, r5, r7, lr}
 800f8fe:	b0a8      	sub	sp, #160	; 0xa0
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800f904:	2300      	movs	r3, #0
 800f906:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800f90a:	2300      	movs	r3, #0
 800f90c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800f910:	2300      	movs	r3, #0
 800f912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800f916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f91a:	2264      	movs	r2, #100	; 0x64
 800f91c:	2100      	movs	r1, #0
 800f91e:	4618      	mov	r0, r3
 800f920:	f012 fe5e 	bl	80225e0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f924:	4b85      	ldr	r3, [pc, #532]	; (800fb3c <low_level_init+0x240>)
 800f926:	4a86      	ldr	r2, [pc, #536]	; (800fb40 <low_level_init+0x244>)
 800f928:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800f92a:	2300      	movs	r3, #0
 800f92c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800f930:	2380      	movs	r3, #128	; 0x80
 800f932:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800f936:	23e1      	movs	r3, #225	; 0xe1
 800f938:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 800f93c:	2300      	movs	r3, #0
 800f93e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800f942:	2300      	movs	r3, #0
 800f944:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 800f948:	2300      	movs	r3, #0
 800f94a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800f94e:	4a7b      	ldr	r2, [pc, #492]	; (800fb3c <low_level_init+0x240>)
 800f950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f954:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800f956:	4b79      	ldr	r3, [pc, #484]	; (800fb3c <low_level_init+0x240>)
 800f958:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800f95c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800f95e:	4b77      	ldr	r3, [pc, #476]	; (800fb3c <low_level_init+0x240>)
 800f960:	4a78      	ldr	r2, [pc, #480]	; (800fb44 <low_level_init+0x248>)
 800f962:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800f964:	4b75      	ldr	r3, [pc, #468]	; (800fb3c <low_level_init+0x240>)
 800f966:	4a78      	ldr	r2, [pc, #480]	; (800fb48 <low_level_init+0x24c>)
 800f968:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800f96a:	4b74      	ldr	r3, [pc, #464]	; (800fb3c <low_level_init+0x240>)
 800f96c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f970:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f972:	4872      	ldr	r0, [pc, #456]	; (800fb3c <low_level_init+0x240>)
 800f974:	f7fa ff88 	bl	800a888 <HAL_ETH_Init>
 800f978:	4603      	mov	r3, r0
 800f97a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800f97e:	2238      	movs	r2, #56	; 0x38
 800f980:	2100      	movs	r1, #0
 800f982:	4872      	ldr	r0, [pc, #456]	; (800fb4c <low_level_init+0x250>)
 800f984:	f012 fe2c 	bl	80225e0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800f988:	4b70      	ldr	r3, [pc, #448]	; (800fb4c <low_level_init+0x250>)
 800f98a:	2221      	movs	r2, #33	; 0x21
 800f98c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800f98e:	4b6f      	ldr	r3, [pc, #444]	; (800fb4c <low_level_init+0x250>)
 800f990:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800f994:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800f996:	4b6d      	ldr	r3, [pc, #436]	; (800fb4c <low_level_init+0x250>)
 800f998:	2200      	movs	r2, #0
 800f99a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800f99c:	486c      	ldr	r0, [pc, #432]	; (800fb50 <low_level_init+0x254>)
 800f99e:	f006 fd17 	bl	80163d0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2206      	movs	r2, #6
 800f9a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f9aa:	4b64      	ldr	r3, [pc, #400]	; (800fb3c <low_level_init+0x240>)
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	781a      	ldrb	r2, [r3, #0]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f9b6:	4b61      	ldr	r3, [pc, #388]	; (800fb3c <low_level_init+0x240>)
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	785a      	ldrb	r2, [r3, #1]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f9c2:	4b5e      	ldr	r3, [pc, #376]	; (800fb3c <low_level_init+0x240>)
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	789a      	ldrb	r2, [r3, #2]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f9ce:	4b5b      	ldr	r3, [pc, #364]	; (800fb3c <low_level_init+0x240>)
 800f9d0:	685b      	ldr	r3, [r3, #4]
 800f9d2:	78da      	ldrb	r2, [r3, #3]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f9da:	4b58      	ldr	r3, [pc, #352]	; (800fb3c <low_level_init+0x240>)
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	791a      	ldrb	r2, [r3, #4]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f9e6:	4b55      	ldr	r3, [pc, #340]	; (800fb3c <low_level_init+0x240>)
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	795a      	ldrb	r2, [r3, #5]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f9f8:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa00:	f043 030a 	orr.w	r3, r3, #10
 800fa04:	b2da      	uxtb	r2, r3
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800fa0c:	2203      	movs	r2, #3
 800fa0e:	2100      	movs	r1, #0
 800fa10:	2001      	movs	r0, #1
 800fa12:	f001 f89b 	bl	8010b4c <xQueueGenericCreate>
 800fa16:	4603      	mov	r3, r0
 800fa18:	4a4e      	ldr	r2, [pc, #312]	; (800fb54 <low_level_init+0x258>)
 800fa1a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800fa1c:	2203      	movs	r2, #3
 800fa1e:	2100      	movs	r1, #0
 800fa20:	2001      	movs	r0, #1
 800fa22:	f001 f893 	bl	8010b4c <xQueueGenericCreate>
 800fa26:	4603      	mov	r3, r0
 800fa28:	4a4b      	ldr	r2, [pc, #300]	; (800fb58 <low_level_init+0x25c>)
 800fa2a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800fa2c:	4b4b      	ldr	r3, [pc, #300]	; (800fb5c <low_level_init+0x260>)
 800fa2e:	f107 0408 	add.w	r4, r7, #8
 800fa32:	461d      	mov	r5, r3
 800fa34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fa3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800fa40:	f107 0308 	add.w	r3, r7, #8
 800fa44:	6879      	ldr	r1, [r7, #4]
 800fa46:	4618      	mov	r0, r3
 800fa48:	f000 fc14 	bl	8010274 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800fa4c:	4944      	ldr	r1, [pc, #272]	; (800fb60 <low_level_init+0x264>)
 800fa4e:	4845      	ldr	r0, [pc, #276]	; (800fb64 <low_level_init+0x268>)
 800fa50:	f7f9 fd47 	bl	80094e2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800fa54:	4843      	ldr	r0, [pc, #268]	; (800fb64 <low_level_init+0x268>)
 800fa56:	f7f9 fd76 	bl	8009546 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800fa5a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d165      	bne.n	800fb2e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800fa62:	4840      	ldr	r0, [pc, #256]	; (800fb64 <low_level_init+0x268>)
 800fa64:	f7f9 fe17 	bl	8009696 <LAN8742_GetLinkState>
 800fa68:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800fa6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	dc06      	bgt.n	800fa82 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f007 f885 	bl	8016b84 <netif_set_link_down>
      netif_set_down(netif);
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f007 f81c 	bl	8016ab8 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800fa80:	e057      	b.n	800fb32 <low_level_init+0x236>
      switch (PHYLinkState)
 800fa82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fa86:	3b02      	subs	r3, #2
 800fa88:	2b03      	cmp	r3, #3
 800fa8a:	d82b      	bhi.n	800fae4 <low_level_init+0x1e8>
 800fa8c:	a201      	add	r2, pc, #4	; (adr r2, 800fa94 <low_level_init+0x198>)
 800fa8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa92:	bf00      	nop
 800fa94:	0800faa5 	.word	0x0800faa5
 800fa98:	0800fab7 	.word	0x0800fab7
 800fa9c:	0800fac7 	.word	0x0800fac7
 800faa0:	0800fad7 	.word	0x0800fad7
        duplex = ETH_FULLDUPLEX_MODE;
 800faa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800faa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800faac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fab0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800fab4:	e01f      	b.n	800faf6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800fab6:	2300      	movs	r3, #0
 800fab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800fabc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800fac4:	e017      	b.n	800faf6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800fac6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800faca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800face:	2300      	movs	r3, #0
 800fad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800fad4:	e00f      	b.n	800faf6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800fad6:	2300      	movs	r3, #0
 800fad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800fadc:	2300      	movs	r3, #0
 800fade:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800fae2:	e008      	b.n	800faf6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800fae4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800faec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800faf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800faf4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800faf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fafa:	4619      	mov	r1, r3
 800fafc:	480f      	ldr	r0, [pc, #60]	; (800fb3c <low_level_init+0x240>)
 800fafe:	f7fb fb87 	bl	800b210 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800fb02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fb06:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 800fb08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fb0c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800fb0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb12:	4619      	mov	r1, r3
 800fb14:	4809      	ldr	r0, [pc, #36]	; (800fb3c <low_level_init+0x240>)
 800fb16:	f7fb fc65 	bl	800b3e4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800fb1a:	4808      	ldr	r0, [pc, #32]	; (800fb3c <low_level_init+0x240>)
 800fb1c:	f7fa ff90 	bl	800aa40 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f006 ff5d 	bl	80169e0 <netif_set_up>
    netif_set_link_up(netif);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f006 fff8 	bl	8016b1c <netif_set_link_up>
}
 800fb2c:	e001      	b.n	800fb32 <low_level_init+0x236>
    Error_Handler();
 800fb2e:	f7f2 f9f5 	bl	8001f1c <Error_Handler>
}
 800fb32:	bf00      	nop
 800fb34:	37a0      	adds	r7, #160	; 0xa0
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bdb0      	pop	{r4, r5, r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	20006414 	.word	0x20006414
 800fb40:	40028000 	.word	0x40028000
 800fb44:	20000140 	.word	0x20000140
 800fb48:	200000a0 	.word	0x200000a0
 800fb4c:	200064c4 	.word	0x200064c4
 800fb50:	08027278 	.word	0x08027278
 800fb54:	2000640c 	.word	0x2000640c
 800fb58:	20006410 	.word	0x20006410
 800fb5c:	08023cc8 	.word	0x08023cc8
 800fb60:	20000010 	.word	0x20000010
 800fb64:	200064fc 	.word	0x200064fc

0800fb68 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b092      	sub	sp, #72	; 0x48
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800fb72:	2300      	movs	r3, #0
 800fb74:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800fb76:	2300      	movs	r3, #0
 800fb78:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800fb80:	f107 030c 	add.w	r3, r7, #12
 800fb84:	2230      	movs	r2, #48	; 0x30
 800fb86:	2100      	movs	r1, #0
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f012 fd29 	bl	80225e0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800fb8e:	f107 030c 	add.w	r3, r7, #12
 800fb92:	2230      	movs	r2, #48	; 0x30
 800fb94:	2100      	movs	r1, #0
 800fb96:	4618      	mov	r0, r3
 800fb98:	f012 fd22 	bl	80225e0 <memset>

  for(q = p; q != NULL; q = q->next)
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	643b      	str	r3, [r7, #64]	; 0x40
 800fba0:	e045      	b.n	800fc2e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800fba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fba4:	2b03      	cmp	r3, #3
 800fba6:	d902      	bls.n	800fbae <low_level_output+0x46>
      return ERR_IF;
 800fba8:	f06f 030b 	mvn.w	r3, #11
 800fbac:	e065      	b.n	800fc7a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800fbae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbb0:	6859      	ldr	r1, [r3, #4]
 800fbb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbb4:	4613      	mov	r3, r2
 800fbb6:	005b      	lsls	r3, r3, #1
 800fbb8:	4413      	add	r3, r2
 800fbba:	009b      	lsls	r3, r3, #2
 800fbbc:	3348      	adds	r3, #72	; 0x48
 800fbbe:	443b      	add	r3, r7
 800fbc0:	3b3c      	subs	r3, #60	; 0x3c
 800fbc2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800fbc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbc6:	895b      	ldrh	r3, [r3, #10]
 800fbc8:	4619      	mov	r1, r3
 800fbca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbcc:	4613      	mov	r3, r2
 800fbce:	005b      	lsls	r3, r3, #1
 800fbd0:	4413      	add	r3, r2
 800fbd2:	009b      	lsls	r3, r3, #2
 800fbd4:	3348      	adds	r3, #72	; 0x48
 800fbd6:	443b      	add	r3, r7
 800fbd8:	3b38      	subs	r3, #56	; 0x38
 800fbda:	6019      	str	r1, [r3, #0]

    if(i>0)
 800fbdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d011      	beq.n	800fc06 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800fbe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbe4:	1e5a      	subs	r2, r3, #1
 800fbe6:	f107 000c 	add.w	r0, r7, #12
 800fbea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbec:	460b      	mov	r3, r1
 800fbee:	005b      	lsls	r3, r3, #1
 800fbf0:	440b      	add	r3, r1
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	18c1      	adds	r1, r0, r3
 800fbf6:	4613      	mov	r3, r2
 800fbf8:	005b      	lsls	r3, r3, #1
 800fbfa:	4413      	add	r3, r2
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	3348      	adds	r3, #72	; 0x48
 800fc00:	443b      	add	r3, r7
 800fc02:	3b34      	subs	r3, #52	; 0x34
 800fc04:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800fc06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d109      	bne.n	800fc22 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800fc0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc10:	4613      	mov	r3, r2
 800fc12:	005b      	lsls	r3, r3, #1
 800fc14:	4413      	add	r3, r2
 800fc16:	009b      	lsls	r3, r3, #2
 800fc18:	3348      	adds	r3, #72	; 0x48
 800fc1a:	443b      	add	r3, r7
 800fc1c:	3b34      	subs	r3, #52	; 0x34
 800fc1e:	2200      	movs	r2, #0
 800fc20:	601a      	str	r2, [r3, #0]
    }

    i++;
 800fc22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc24:	3301      	adds	r3, #1
 800fc26:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800fc28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	643b      	str	r3, [r7, #64]	; 0x40
 800fc2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d1b6      	bne.n	800fba2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	891b      	ldrh	r3, [r3, #8]
 800fc38:	461a      	mov	r2, r3
 800fc3a:	4b12      	ldr	r3, [pc, #72]	; (800fc84 <low_level_output+0x11c>)
 800fc3c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800fc3e:	4a11      	ldr	r2, [pc, #68]	; (800fc84 <low_level_output+0x11c>)
 800fc40:	f107 030c 	add.w	r3, r7, #12
 800fc44:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800fc46:	4a0f      	ldr	r2, [pc, #60]	; (800fc84 <low_level_output+0x11c>)
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800fc4c:	6838      	ldr	r0, [r7, #0]
 800fc4e:	f007 fc1d 	bl	801748c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800fc52:	490c      	ldr	r1, [pc, #48]	; (800fc84 <low_level_output+0x11c>)
 800fc54:	480c      	ldr	r0, [pc, #48]	; (800fc88 <low_level_output+0x120>)
 800fc56:	f7fa ff81 	bl	800ab5c <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800fc5a:	bf00      	nop
 800fc5c:	4b0b      	ldr	r3, [pc, #44]	; (800fc8c <low_level_output+0x124>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800fc64:	4618      	mov	r0, r3
 800fc66:	f000 fc33 	bl	80104d0 <osSemaphoreWait>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d1f5      	bne.n	800fc5c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800fc70:	4805      	ldr	r0, [pc, #20]	; (800fc88 <low_level_output+0x120>)
 800fc72:	f7fb f907 	bl	800ae84 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800fc76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3748      	adds	r7, #72	; 0x48
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop
 800fc84:	200064c4 	.word	0x200064c4
 800fc88:	20006414 	.word	0x20006414
 800fc8c:	20006410 	.word	0x20006410

0800fc90 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800fc9c:	4b07      	ldr	r3, [pc, #28]	; (800fcbc <low_level_input+0x2c>)
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d105      	bne.n	800fcb0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800fca4:	f107 030c 	add.w	r3, r7, #12
 800fca8:	4619      	mov	r1, r3
 800fcaa:	4805      	ldr	r0, [pc, #20]	; (800fcc0 <low_level_input+0x30>)
 800fcac:	f7fa ffb2 	bl	800ac14 <HAL_ETH_ReadData>
  }

  return p;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3710      	adds	r7, #16
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	20006408 	.word	0x20006408
 800fcc0:	20006414 	.word	0x20006414

0800fcc4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800fccc:	2300      	movs	r3, #0
 800fcce:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800fcd4:	4b0f      	ldr	r3, [pc, #60]	; (800fd14 <ethernetif_input+0x50>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f000 fbf7 	bl	80104d0 <osSemaphoreWait>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d1f5      	bne.n	800fcd4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800fce8:	68b8      	ldr	r0, [r7, #8]
 800fcea:	f7ff ffd1 	bl	800fc90 <low_level_input>
 800fcee:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d00a      	beq.n	800fd0c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	691b      	ldr	r3, [r3, #16]
 800fcfa:	68b9      	ldr	r1, [r7, #8]
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	4798      	blx	r3
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d002      	beq.n	800fd0c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800fd06:	68f8      	ldr	r0, [r7, #12]
 800fd08:	f007 fb1a 	bl	8017340 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d1ea      	bne.n	800fce8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800fd12:	e7df      	b.n	800fcd4 <ethernetif_input+0x10>
 800fd14:	2000640c 	.word	0x2000640c

0800fd18 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d106      	bne.n	800fd34 <ethernetif_init+0x1c>
 800fd26:	4b0e      	ldr	r3, [pc, #56]	; (800fd60 <ethernetif_init+0x48>)
 800fd28:	f240 12f3 	movw	r2, #499	; 0x1f3
 800fd2c:	490d      	ldr	r1, [pc, #52]	; (800fd64 <ethernetif_init+0x4c>)
 800fd2e:	480e      	ldr	r0, [pc, #56]	; (800fd68 <ethernetif_init+0x50>)
 800fd30:	f012 fd3e 	bl	80227b0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2273      	movs	r2, #115	; 0x73
 800fd38:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2274      	movs	r2, #116	; 0x74
 800fd40:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	4a09      	ldr	r2, [pc, #36]	; (800fd6c <ethernetif_init+0x54>)
 800fd48:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	4a08      	ldr	r2, [pc, #32]	; (800fd70 <ethernetif_init+0x58>)
 800fd4e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f7ff fdd3 	bl	800f8fc <low_level_init>

  return ERR_OK;
 800fd56:	2300      	movs	r3, #0
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3708      	adds	r7, #8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	08023ce4 	.word	0x08023ce4
 800fd64:	08023d00 	.word	0x08023d00
 800fd68:	08023d10 	.word	0x08023d10
 800fd6c:	0801f20d 	.word	0x0801f20d
 800fd70:	0800fb69 	.word	0x0800fb69

0800fd74 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800fd80:	68f9      	ldr	r1, [r7, #12]
 800fd82:	4809      	ldr	r0, [pc, #36]	; (800fda8 <pbuf_free_custom+0x34>)
 800fd84:	f006 fc14 	bl	80165b0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800fd88:	4b08      	ldr	r3, [pc, #32]	; (800fdac <pbuf_free_custom+0x38>)
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d107      	bne.n	800fda0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800fd90:	4b06      	ldr	r3, [pc, #24]	; (800fdac <pbuf_free_custom+0x38>)
 800fd92:	2200      	movs	r2, #0
 800fd94:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800fd96:	4b06      	ldr	r3, [pc, #24]	; (800fdb0 <pbuf_free_custom+0x3c>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f000 fbe6 	bl	801056c <osSemaphoreRelease>
  }
}
 800fda0:	bf00      	nop
 800fda2:	3710      	adds	r7, #16
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	08027278 	.word	0x08027278
 800fdac:	20006408 	.word	0x20006408
 800fdb0:	2000640c 	.word	0x2000640c

0800fdb4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800fdb8:	f7f9 fd16 	bl	80097e8 <HAL_GetTick>
 800fdbc:	4603      	mov	r3, r0
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	bd80      	pop	{r7, pc}
	...

0800fdc4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b08e      	sub	sp, #56	; 0x38
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fdcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	601a      	str	r2, [r3, #0]
 800fdd4:	605a      	str	r2, [r3, #4]
 800fdd6:	609a      	str	r2, [r3, #8]
 800fdd8:	60da      	str	r2, [r3, #12]
 800fdda:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	4a52      	ldr	r2, [pc, #328]	; (800ff2c <HAL_ETH_MspInit+0x168>)
 800fde2:	4293      	cmp	r3, r2
 800fde4:	f040 809e 	bne.w	800ff24 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800fde8:	4b51      	ldr	r3, [pc, #324]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdec:	4a50      	ldr	r2, [pc, #320]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fdee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fdf2:	6313      	str	r3, [r2, #48]	; 0x30
 800fdf4:	4b4e      	ldr	r3, [pc, #312]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fdfc:	623b      	str	r3, [r7, #32]
 800fdfe:	6a3b      	ldr	r3, [r7, #32]
 800fe00:	4b4b      	ldr	r3, [pc, #300]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe04:	4a4a      	ldr	r2, [pc, #296]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fe0a:	6313      	str	r3, [r2, #48]	; 0x30
 800fe0c:	4b48      	ldr	r3, [pc, #288]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fe14:	61fb      	str	r3, [r7, #28]
 800fe16:	69fb      	ldr	r3, [r7, #28]
 800fe18:	4b45      	ldr	r3, [pc, #276]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe1c:	4a44      	ldr	r2, [pc, #272]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fe22:	6313      	str	r3, [r2, #48]	; 0x30
 800fe24:	4b42      	ldr	r3, [pc, #264]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe2c:	61bb      	str	r3, [r7, #24]
 800fe2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fe30:	4b3f      	ldr	r3, [pc, #252]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe34:	4a3e      	ldr	r2, [pc, #248]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe36:	f043 0304 	orr.w	r3, r3, #4
 800fe3a:	6313      	str	r3, [r2, #48]	; 0x30
 800fe3c:	4b3c      	ldr	r3, [pc, #240]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe40:	f003 0304 	and.w	r3, r3, #4
 800fe44:	617b      	str	r3, [r7, #20]
 800fe46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe48:	4b39      	ldr	r3, [pc, #228]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe4c:	4a38      	ldr	r2, [pc, #224]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe4e:	f043 0301 	orr.w	r3, r3, #1
 800fe52:	6313      	str	r3, [r2, #48]	; 0x30
 800fe54:	4b36      	ldr	r3, [pc, #216]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe58:	f003 0301 	and.w	r3, r3, #1
 800fe5c:	613b      	str	r3, [r7, #16]
 800fe5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fe60:	4b33      	ldr	r3, [pc, #204]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe64:	4a32      	ldr	r2, [pc, #200]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe66:	f043 0302 	orr.w	r3, r3, #2
 800fe6a:	6313      	str	r3, [r2, #48]	; 0x30
 800fe6c:	4b30      	ldr	r3, [pc, #192]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe70:	f003 0302 	and.w	r3, r3, #2
 800fe74:	60fb      	str	r3, [r7, #12]
 800fe76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800fe78:	4b2d      	ldr	r3, [pc, #180]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe7c:	4a2c      	ldr	r2, [pc, #176]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe82:	6313      	str	r3, [r2, #48]	; 0x30
 800fe84:	4b2a      	ldr	r3, [pc, #168]	; (800ff30 <HAL_ETH_MspInit+0x16c>)
 800fe86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe8c:	60bb      	str	r3, [r7, #8]
 800fe8e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800fe90:	2332      	movs	r3, #50	; 0x32
 800fe92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe94:	2302      	movs	r3, #2
 800fe96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe9c:	2303      	movs	r3, #3
 800fe9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fea0:	230b      	movs	r3, #11
 800fea2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fea8:	4619      	mov	r1, r3
 800feaa:	4822      	ldr	r0, [pc, #136]	; (800ff34 <HAL_ETH_MspInit+0x170>)
 800feac:	f7fb ff1a 	bl	800bce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800feb0:	2386      	movs	r3, #134	; 0x86
 800feb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800feb4:	2302      	movs	r3, #2
 800feb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800feb8:	2300      	movs	r3, #0
 800feba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800febc:	2303      	movs	r3, #3
 800febe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fec0:	230b      	movs	r3, #11
 800fec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fec8:	4619      	mov	r1, r3
 800feca:	481b      	ldr	r0, [pc, #108]	; (800ff38 <HAL_ETH_MspInit+0x174>)
 800fecc:	f7fb ff0a 	bl	800bce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800fed0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800fed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fed6:	2302      	movs	r3, #2
 800fed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800feda:	2300      	movs	r3, #0
 800fedc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fede:	2303      	movs	r3, #3
 800fee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fee2:	230b      	movs	r3, #11
 800fee4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800feea:	4619      	mov	r1, r3
 800feec:	4813      	ldr	r0, [pc, #76]	; (800ff3c <HAL_ETH_MspInit+0x178>)
 800feee:	f7fb fef9 	bl	800bce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800fef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fef8:	2302      	movs	r3, #2
 800fefa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fefc:	2300      	movs	r3, #0
 800fefe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ff00:	2303      	movs	r3, #3
 800ff02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ff04:	230b      	movs	r3, #11
 800ff06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ff08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	480c      	ldr	r0, [pc, #48]	; (800ff40 <HAL_ETH_MspInit+0x17c>)
 800ff10:	f7fb fee8 	bl	800bce4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800ff14:	2200      	movs	r2, #0
 800ff16:	2105      	movs	r1, #5
 800ff18:	203d      	movs	r0, #61	; 0x3d
 800ff1a:	f7fa fbeb 	bl	800a6f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800ff1e:	203d      	movs	r0, #61	; 0x3d
 800ff20:	f7fa fc04 	bl	800a72c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ff24:	bf00      	nop
 800ff26:	3738      	adds	r7, #56	; 0x38
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	40028000 	.word	0x40028000
 800ff30:	40023800 	.word	0x40023800
 800ff34:	40020800 	.word	0x40020800
 800ff38:	40020000 	.word	0x40020000
 800ff3c:	40020400 	.word	0x40020400
 800ff40:	40021800 	.word	0x40021800

0800ff44 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ff48:	4802      	ldr	r0, [pc, #8]	; (800ff54 <ETH_PHY_IO_Init+0x10>)
 800ff4a:	f7fb fa65 	bl	800b418 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800ff4e:	2300      	movs	r3, #0
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	20006414 	.word	0x20006414

0800ff58 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	af00      	add	r7, sp, #0
  return 0;
 800ff5c:	2300      	movs	r3, #0
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr

0800ff68 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	60f8      	str	r0, [r7, #12]
 800ff70:	60b9      	str	r1, [r7, #8]
 800ff72:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	68ba      	ldr	r2, [r7, #8]
 800ff78:	68f9      	ldr	r1, [r7, #12]
 800ff7a:	4807      	ldr	r0, [pc, #28]	; (800ff98 <ETH_PHY_IO_ReadReg+0x30>)
 800ff7c:	f7fb f8b4 	bl	800b0e8 <HAL_ETH_ReadPHYRegister>
 800ff80:	4603      	mov	r3, r0
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d002      	beq.n	800ff8c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800ff86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff8a:	e000      	b.n	800ff8e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800ff8c:	2300      	movs	r3, #0
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3710      	adds	r7, #16
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}
 800ff96:	bf00      	nop
 800ff98:	20006414 	.word	0x20006414

0800ff9c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	60f8      	str	r0, [r7, #12]
 800ffa4:	60b9      	str	r1, [r7, #8]
 800ffa6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	68ba      	ldr	r2, [r7, #8]
 800ffac:	68f9      	ldr	r1, [r7, #12]
 800ffae:	4807      	ldr	r0, [pc, #28]	; (800ffcc <ETH_PHY_IO_WriteReg+0x30>)
 800ffb0:	f7fb f8e5 	bl	800b17e <HAL_ETH_WritePHYRegister>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d002      	beq.n	800ffc0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ffba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ffbe:	e000      	b.n	800ffc2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800ffc0:	2300      	movs	r3, #0
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3710      	adds	r7, #16
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	20006414 	.word	0x20006414

0800ffd0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ffd4:	f7f9 fc08 	bl	80097e8 <HAL_GetTick>
 800ffd8:	4603      	mov	r3, r0
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	bd80      	pop	{r7, pc}
	...

0800ffe0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b0a0      	sub	sp, #128	; 0x80
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800ffe8:	f107 0308 	add.w	r3, r7, #8
 800ffec:	2264      	movs	r2, #100	; 0x64
 800ffee:	2100      	movs	r1, #0
 800fff0:	4618      	mov	r0, r3
 800fff2:	f012 faf5 	bl	80225e0 <memset>
  int32_t PHYLinkState = 0;
 800fff6:	2300      	movs	r3, #0
 800fff8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800fffa:	2300      	movs	r3, #0
 800fffc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fffe:	2300      	movs	r3, #0
 8010000:	67bb      	str	r3, [r7, #120]	; 0x78
 8010002:	2300      	movs	r3, #0
 8010004:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 801000a:	4839      	ldr	r0, [pc, #228]	; (80100f0 <ethernet_link_thread+0x110>)
 801000c:	f7f9 fb43 	bl	8009696 <LAN8742_GetLinkState>
 8010010:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8010012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010014:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010018:	089b      	lsrs	r3, r3, #2
 801001a:	f003 0301 	and.w	r3, r3, #1
 801001e:	b2db      	uxtb	r3, r3
 8010020:	2b00      	cmp	r3, #0
 8010022:	d009      	beq.n	8010038 <ethernet_link_thread+0x58>
 8010024:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010026:	2b01      	cmp	r3, #1
 8010028:	dc06      	bgt.n	8010038 <ethernet_link_thread+0x58>
  {
	//Due to no restart_IT point
	///////////////////////
    //HAL_ETH_Stop_IT(&heth);
    //////////////////////
    netif_set_down(netif);
 801002a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801002c:	f006 fd44 	bl	8016ab8 <netif_set_down>
    netif_set_link_down(netif);
 8010030:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010032:	f006 fda7 	bl	8016b84 <netif_set_link_down>
 8010036:	e056      	b.n	80100e6 <ethernet_link_thread+0x106>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8010038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801003a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801003e:	f003 0304 	and.w	r3, r3, #4
 8010042:	2b00      	cmp	r3, #0
 8010044:	d14f      	bne.n	80100e6 <ethernet_link_thread+0x106>
 8010046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010048:	2b01      	cmp	r3, #1
 801004a:	dd4c      	ble.n	80100e6 <ethernet_link_thread+0x106>
  {
    switch (PHYLinkState)
 801004c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801004e:	3b02      	subs	r3, #2
 8010050:	2b03      	cmp	r3, #3
 8010052:	d82b      	bhi.n	80100ac <ethernet_link_thread+0xcc>
 8010054:	a201      	add	r2, pc, #4	; (adr r2, 801005c <ethernet_link_thread+0x7c>)
 8010056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801005a:	bf00      	nop
 801005c:	0801006d 	.word	0x0801006d
 8010060:	0801007f 	.word	0x0801007f
 8010064:	0801008f 	.word	0x0801008f
 8010068:	0801009f 	.word	0x0801009f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 801006c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010070:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8010072:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010076:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8010078:	2301      	movs	r3, #1
 801007a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801007c:	e017      	b.n	80100ae <ethernet_link_thread+0xce>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 801007e:	2300      	movs	r3, #0
 8010080:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8010082:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010086:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8010088:	2301      	movs	r3, #1
 801008a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801008c:	e00f      	b.n	80100ae <ethernet_link_thread+0xce>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 801008e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010092:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8010094:	2300      	movs	r3, #0
 8010096:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8010098:	2301      	movs	r3, #1
 801009a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801009c:	e007      	b.n	80100ae <ethernet_link_thread+0xce>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 801009e:	2300      	movs	r3, #0
 80100a0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80100a2:	2300      	movs	r3, #0
 80100a4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80100a6:	2301      	movs	r3, #1
 80100a8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80100aa:	e000      	b.n	80100ae <ethernet_link_thread+0xce>
    default:
      break;
 80100ac:	bf00      	nop
    }

    if(linkchanged)
 80100ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d018      	beq.n	80100e6 <ethernet_link_thread+0x106>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80100b4:	f107 0308 	add.w	r3, r7, #8
 80100b8:	4619      	mov	r1, r3
 80100ba:	480e      	ldr	r0, [pc, #56]	; (80100f4 <ethernet_link_thread+0x114>)
 80100bc:	f7fb f8a8 	bl	800b210 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80100c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80100c2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80100c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100c6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80100c8:	f107 0308 	add.w	r3, r7, #8
 80100cc:	4619      	mov	r1, r3
 80100ce:	4809      	ldr	r0, [pc, #36]	; (80100f4 <ethernet_link_thread+0x114>)
 80100d0:	f7fb f988 	bl	800b3e4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80100d4:	4807      	ldr	r0, [pc, #28]	; (80100f4 <ethernet_link_thread+0x114>)
 80100d6:	f7fa fc53 	bl	800a980 <HAL_ETH_Start>
      netif_set_up(netif);
 80100da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80100dc:	f006 fc80 	bl	80169e0 <netif_set_up>
      netif_set_link_up(netif);
 80100e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80100e2:	f006 fd1b 	bl	8016b1c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(1000);
 80100e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80100ea:	f000 f90f 	bl	801030c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80100ee:	e78c      	b.n	801000a <ethernet_link_thread+0x2a>
 80100f0:	200064fc 	.word	0x200064fc
 80100f4:	20006414 	.word	0x20006414

080100f8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b086      	sub	sp, #24
 80100fc:	af02      	add	r7, sp, #8
 80100fe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8010100:	4812      	ldr	r0, [pc, #72]	; (801014c <HAL_ETH_RxAllocateCallback+0x54>)
 8010102:	f006 f9e1 	bl	80164c8 <memp_malloc_pool>
 8010106:	60f8      	str	r0, [r7, #12]
  if (p)
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d014      	beq.n	8010138 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	f103 0220 	add.w	r2, r3, #32
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	4a0d      	ldr	r2, [pc, #52]	; (8010150 <HAL_ETH_RxAllocateCallback+0x58>)
 801011c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8010126:	9201      	str	r2, [sp, #4]
 8010128:	9300      	str	r3, [sp, #0]
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2241      	movs	r2, #65	; 0x41
 801012e:	2100      	movs	r1, #0
 8010130:	2000      	movs	r0, #0
 8010132:	f006 ff4b 	bl	8016fcc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8010136:	e005      	b.n	8010144 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8010138:	4b06      	ldr	r3, [pc, #24]	; (8010154 <HAL_ETH_RxAllocateCallback+0x5c>)
 801013a:	2201      	movs	r2, #1
 801013c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2200      	movs	r2, #0
 8010142:	601a      	str	r2, [r3, #0]
}
 8010144:	bf00      	nop
 8010146:	3710      	adds	r7, #16
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}
 801014c:	08027278 	.word	0x08027278
 8010150:	0800fd75 	.word	0x0800fd75
 8010154:	20006408 	.word	0x20006408

08010158 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b088      	sub	sp, #32
 801015c:	af00      	add	r7, sp, #0
 801015e:	60f8      	str	r0, [r7, #12]
 8010160:	60b9      	str	r1, [r7, #8]
 8010162:	607a      	str	r2, [r7, #4]
 8010164:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801016e:	2300      	movs	r3, #0
 8010170:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	3b20      	subs	r3, #32
 8010176:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8010178:	69fb      	ldr	r3, [r7, #28]
 801017a:	2200      	movs	r2, #0
 801017c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 801017e:	69fb      	ldr	r3, [r7, #28]
 8010180:	2200      	movs	r2, #0
 8010182:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8010184:	69fb      	ldr	r3, [r7, #28]
 8010186:	887a      	ldrh	r2, [r7, #2]
 8010188:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 801018a:	69bb      	ldr	r3, [r7, #24]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d103      	bne.n	801019a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	69fa      	ldr	r2, [r7, #28]
 8010196:	601a      	str	r2, [r3, #0]
 8010198:	e003      	b.n	80101a2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	69fa      	ldr	r2, [r7, #28]
 80101a0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	69fa      	ldr	r2, [r7, #28]
 80101a6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80101a8:	69bb      	ldr	r3, [r7, #24]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	61fb      	str	r3, [r7, #28]
 80101ae:	e009      	b.n	80101c4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	891a      	ldrh	r2, [r3, #8]
 80101b4:	887b      	ldrh	r3, [r7, #2]
 80101b6:	4413      	add	r3, r2
 80101b8:	b29a      	uxth	r2, r3
 80101ba:	69fb      	ldr	r3, [r7, #28]
 80101bc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	61fb      	str	r3, [r7, #28]
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d1f2      	bne.n	80101b0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80101ca:	887b      	ldrh	r3, [r7, #2]
 80101cc:	4619      	mov	r1, r3
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f7ff fb30 	bl	800f834 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80101d4:	bf00      	nop
 80101d6:	3720      	adds	r7, #32
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f007 f8ab 	bl	8017340 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80101ea:	bf00      	nop
 80101ec:	3708      	adds	r7, #8
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}

080101f2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80101f2:	b480      	push	{r7}
 80101f4:	b085      	sub	sp, #20
 80101f6:	af00      	add	r7, sp, #0
 80101f8:	4603      	mov	r3, r0
 80101fa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80101fc:	2300      	movs	r3, #0
 80101fe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010204:	2b84      	cmp	r3, #132	; 0x84
 8010206:	d005      	beq.n	8010214 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010208:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	4413      	add	r3, r2
 8010210:	3303      	adds	r3, #3
 8010212:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010214:	68fb      	ldr	r3, [r7, #12]
}
 8010216:	4618      	mov	r0, r3
 8010218:	3714      	adds	r7, #20
 801021a:	46bd      	mov	sp, r7
 801021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010220:	4770      	bx	lr

08010222 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010222:	b480      	push	{r7}
 8010224:	b083      	sub	sp, #12
 8010226:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010228:	f3ef 8305 	mrs	r3, IPSR
 801022c:	607b      	str	r3, [r7, #4]
  return(result);
 801022e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010230:	2b00      	cmp	r3, #0
 8010232:	bf14      	ite	ne
 8010234:	2301      	movne	r3, #1
 8010236:	2300      	moveq	r3, #0
 8010238:	b2db      	uxtb	r3, r3
}
 801023a:	4618      	mov	r0, r3
 801023c:	370c      	adds	r7, #12
 801023e:	46bd      	mov	sp, r7
 8010240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010244:	4770      	bx	lr

08010246 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010246:	b580      	push	{r7, lr}
 8010248:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801024a:	f001 fe9f 	bl	8011f8c <vTaskStartScheduler>
  
  return osOK;
 801024e:	2300      	movs	r3, #0
}
 8010250:	4618      	mov	r0, r3
 8010252:	bd80      	pop	{r7, pc}

08010254 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010258:	f7ff ffe3 	bl	8010222 <inHandlerMode>
 801025c:	4603      	mov	r3, r0
 801025e:	2b00      	cmp	r3, #0
 8010260:	d003      	beq.n	801026a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8010262:	f001 ffbd 	bl	80121e0 <xTaskGetTickCountFromISR>
 8010266:	4603      	mov	r3, r0
 8010268:	e002      	b.n	8010270 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801026a:	f001 ffa9 	bl	80121c0 <xTaskGetTickCount>
 801026e:	4603      	mov	r3, r0
  }
}
 8010270:	4618      	mov	r0, r3
 8010272:	bd80      	pop	{r7, pc}

08010274 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010276:	b089      	sub	sp, #36	; 0x24
 8010278:	af04      	add	r7, sp, #16
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	695b      	ldr	r3, [r3, #20]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d020      	beq.n	80102c8 <osThreadCreate+0x54>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	699b      	ldr	r3, [r3, #24]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d01c      	beq.n	80102c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	685c      	ldr	r4, [r3, #4]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681d      	ldr	r5, [r3, #0]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	691e      	ldr	r6, [r3, #16]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7ff ffa6 	bl	80101f2 <makeFreeRtosPriority>
 80102a6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	695b      	ldr	r3, [r3, #20]
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80102b0:	9202      	str	r2, [sp, #8]
 80102b2:	9301      	str	r3, [sp, #4]
 80102b4:	9100      	str	r1, [sp, #0]
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	4632      	mov	r2, r6
 80102ba:	4629      	mov	r1, r5
 80102bc:	4620      	mov	r0, r4
 80102be:	f001 fb67 	bl	8011990 <xTaskCreateStatic>
 80102c2:	4603      	mov	r3, r0
 80102c4:	60fb      	str	r3, [r7, #12]
 80102c6:	e01c      	b.n	8010302 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	685c      	ldr	r4, [r3, #4]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80102d4:	b29e      	uxth	r6, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80102dc:	4618      	mov	r0, r3
 80102de:	f7ff ff88 	bl	80101f2 <makeFreeRtosPriority>
 80102e2:	4602      	mov	r2, r0
 80102e4:	f107 030c 	add.w	r3, r7, #12
 80102e8:	9301      	str	r3, [sp, #4]
 80102ea:	9200      	str	r2, [sp, #0]
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	4632      	mov	r2, r6
 80102f0:	4629      	mov	r1, r5
 80102f2:	4620      	mov	r0, r4
 80102f4:	f001 fbaf 	bl	8011a56 <xTaskCreate>
 80102f8:	4603      	mov	r3, r0
 80102fa:	2b01      	cmp	r3, #1
 80102fc:	d001      	beq.n	8010302 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80102fe:	2300      	movs	r3, #0
 8010300:	e000      	b.n	8010304 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010302:	68fb      	ldr	r3, [r7, #12]
}
 8010304:	4618      	mov	r0, r3
 8010306:	3714      	adds	r7, #20
 8010308:	46bd      	mov	sp, r7
 801030a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801030c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b084      	sub	sp, #16
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d001      	beq.n	8010322 <osDelay+0x16>
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	e000      	b.n	8010324 <osDelay+0x18>
 8010322:	2301      	movs	r3, #1
 8010324:	4618      	mov	r0, r3
 8010326:	f001 fdfb 	bl	8011f20 <vTaskDelay>
  
  return osOK;
 801032a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801032c:	4618      	mov	r0, r3
 801032e:	3710      	adds	r7, #16
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b082      	sub	sp, #8
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d007      	beq.n	8010354 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	4619      	mov	r1, r3
 801034a:	2001      	movs	r0, #1
 801034c:	f000 fc91 	bl	8010c72 <xQueueCreateMutexStatic>
 8010350:	4603      	mov	r3, r0
 8010352:	e003      	b.n	801035c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8010354:	2001      	movs	r0, #1
 8010356:	f000 fc74 	bl	8010c42 <xQueueCreateMutex>
 801035a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 801035c:	4618      	mov	r0, r3
 801035e:	3708      	adds	r7, #8
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b084      	sub	sp, #16
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801036e:	2300      	movs	r3, #0
 8010370:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d101      	bne.n	801037c <osMutexWait+0x18>
    return osErrorParameter;
 8010378:	2380      	movs	r3, #128	; 0x80
 801037a:	e03a      	b.n	80103f2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 801037c:	2300      	movs	r3, #0
 801037e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010386:	d103      	bne.n	8010390 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8010388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801038c:	60fb      	str	r3, [r7, #12]
 801038e:	e009      	b.n	80103a4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d006      	beq.n	80103a4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d101      	bne.n	80103a4 <osMutexWait+0x40>
      ticks = 1;
 80103a0:	2301      	movs	r3, #1
 80103a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80103a4:	f7ff ff3d 	bl	8010222 <inHandlerMode>
 80103a8:	4603      	mov	r3, r0
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d017      	beq.n	80103de <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80103ae:	f107 0308 	add.w	r3, r7, #8
 80103b2:	461a      	mov	r2, r3
 80103b4:	2100      	movs	r1, #0
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f001 f8ac 	bl	8011514 <xQueueReceiveFromISR>
 80103bc:	4603      	mov	r3, r0
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d001      	beq.n	80103c6 <osMutexWait+0x62>
      return osErrorOS;
 80103c2:	23ff      	movs	r3, #255	; 0xff
 80103c4:	e015      	b.n	80103f2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d011      	beq.n	80103f0 <osMutexWait+0x8c>
 80103cc:	4b0b      	ldr	r3, [pc, #44]	; (80103fc <osMutexWait+0x98>)
 80103ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103d2:	601a      	str	r2, [r3, #0]
 80103d4:	f3bf 8f4f 	dsb	sy
 80103d8:	f3bf 8f6f 	isb	sy
 80103dc:	e008      	b.n	80103f0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80103de:	68f9      	ldr	r1, [r7, #12]
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f000 ff83 	bl	80112ec <xQueueSemaphoreTake>
 80103e6:	4603      	mov	r3, r0
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d001      	beq.n	80103f0 <osMutexWait+0x8c>
    return osErrorOS;
 80103ec:	23ff      	movs	r3, #255	; 0xff
 80103ee:	e000      	b.n	80103f2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80103f0:	2300      	movs	r3, #0
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3710      	adds	r7, #16
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
 80103fa:	bf00      	nop
 80103fc:	e000ed04 	.word	0xe000ed04

08010400 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010408:	2300      	movs	r3, #0
 801040a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801040c:	2300      	movs	r3, #0
 801040e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8010410:	f7ff ff07 	bl	8010222 <inHandlerMode>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d016      	beq.n	8010448 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801041a:	f107 0308 	add.w	r3, r7, #8
 801041e:	4619      	mov	r1, r3
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f000 fde7 	bl	8010ff4 <xQueueGiveFromISR>
 8010426:	4603      	mov	r3, r0
 8010428:	2b01      	cmp	r3, #1
 801042a:	d001      	beq.n	8010430 <osMutexRelease+0x30>
      return osErrorOS;
 801042c:	23ff      	movs	r3, #255	; 0xff
 801042e:	e017      	b.n	8010460 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d013      	beq.n	801045e <osMutexRelease+0x5e>
 8010436:	4b0c      	ldr	r3, [pc, #48]	; (8010468 <osMutexRelease+0x68>)
 8010438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801043c:	601a      	str	r2, [r3, #0]
 801043e:	f3bf 8f4f 	dsb	sy
 8010442:	f3bf 8f6f 	isb	sy
 8010446:	e00a      	b.n	801045e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8010448:	2300      	movs	r3, #0
 801044a:	2200      	movs	r2, #0
 801044c:	2100      	movs	r1, #0
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f000 fc2a 	bl	8010ca8 <xQueueGenericSend>
 8010454:	4603      	mov	r3, r0
 8010456:	2b01      	cmp	r3, #1
 8010458:	d001      	beq.n	801045e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 801045a:	23ff      	movs	r3, #255	; 0xff
 801045c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 801045e:	68fb      	ldr	r3, [r7, #12]
}
 8010460:	4618      	mov	r0, r3
 8010462:	3710      	adds	r7, #16
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	e000ed04 	.word	0xe000ed04

0801046c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801046c:	b580      	push	{r7, lr}
 801046e:	b086      	sub	sp, #24
 8010470:	af02      	add	r7, sp, #8
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d00f      	beq.n	801049e <osSemaphoreCreate+0x32>
    if (count == 1) {
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	2b01      	cmp	r3, #1
 8010482:	d10a      	bne.n	801049a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	2203      	movs	r2, #3
 801048a:	9200      	str	r2, [sp, #0]
 801048c:	2200      	movs	r2, #0
 801048e:	2100      	movs	r1, #0
 8010490:	2001      	movs	r0, #1
 8010492:	f000 fad9 	bl	8010a48 <xQueueGenericCreateStatic>
 8010496:	4603      	mov	r3, r0
 8010498:	e016      	b.n	80104c8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801049a:	2300      	movs	r3, #0
 801049c:	e014      	b.n	80104c8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	2b01      	cmp	r3, #1
 80104a2:	d110      	bne.n	80104c6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80104a4:	2203      	movs	r2, #3
 80104a6:	2100      	movs	r1, #0
 80104a8:	2001      	movs	r0, #1
 80104aa:	f000 fb4f 	bl	8010b4c <xQueueGenericCreate>
 80104ae:	60f8      	str	r0, [r7, #12]
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d005      	beq.n	80104c2 <osSemaphoreCreate+0x56>
 80104b6:	2300      	movs	r3, #0
 80104b8:	2200      	movs	r2, #0
 80104ba:	2100      	movs	r1, #0
 80104bc:	68f8      	ldr	r0, [r7, #12]
 80104be:	f000 fbf3 	bl	8010ca8 <xQueueGenericSend>
      return sema;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	e000      	b.n	80104c8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80104c6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3710      	adds	r7, #16
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80104da:	2300      	movs	r3, #0
 80104dc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d101      	bne.n	80104e8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80104e4:	2380      	movs	r3, #128	; 0x80
 80104e6:	e03a      	b.n	801055e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80104e8:	2300      	movs	r3, #0
 80104ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104f2:	d103      	bne.n	80104fc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80104f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104f8:	60fb      	str	r3, [r7, #12]
 80104fa:	e009      	b.n	8010510 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d006      	beq.n	8010510 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d101      	bne.n	8010510 <osSemaphoreWait+0x40>
      ticks = 1;
 801050c:	2301      	movs	r3, #1
 801050e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010510:	f7ff fe87 	bl	8010222 <inHandlerMode>
 8010514:	4603      	mov	r3, r0
 8010516:	2b00      	cmp	r3, #0
 8010518:	d017      	beq.n	801054a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801051a:	f107 0308 	add.w	r3, r7, #8
 801051e:	461a      	mov	r2, r3
 8010520:	2100      	movs	r1, #0
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f000 fff6 	bl	8011514 <xQueueReceiveFromISR>
 8010528:	4603      	mov	r3, r0
 801052a:	2b01      	cmp	r3, #1
 801052c:	d001      	beq.n	8010532 <osSemaphoreWait+0x62>
      return osErrorOS;
 801052e:	23ff      	movs	r3, #255	; 0xff
 8010530:	e015      	b.n	801055e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d011      	beq.n	801055c <osSemaphoreWait+0x8c>
 8010538:	4b0b      	ldr	r3, [pc, #44]	; (8010568 <osSemaphoreWait+0x98>)
 801053a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801053e:	601a      	str	r2, [r3, #0]
 8010540:	f3bf 8f4f 	dsb	sy
 8010544:	f3bf 8f6f 	isb	sy
 8010548:	e008      	b.n	801055c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801054a:	68f9      	ldr	r1, [r7, #12]
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f000 fecd 	bl	80112ec <xQueueSemaphoreTake>
 8010552:	4603      	mov	r3, r0
 8010554:	2b01      	cmp	r3, #1
 8010556:	d001      	beq.n	801055c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8010558:	23ff      	movs	r3, #255	; 0xff
 801055a:	e000      	b.n	801055e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 801055c:	2300      	movs	r3, #0
}
 801055e:	4618      	mov	r0, r3
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	e000ed04 	.word	0xe000ed04

0801056c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b084      	sub	sp, #16
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010574:	2300      	movs	r3, #0
 8010576:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010578:	2300      	movs	r3, #0
 801057a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801057c:	f7ff fe51 	bl	8010222 <inHandlerMode>
 8010580:	4603      	mov	r3, r0
 8010582:	2b00      	cmp	r3, #0
 8010584:	d016      	beq.n	80105b4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010586:	f107 0308 	add.w	r3, r7, #8
 801058a:	4619      	mov	r1, r3
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f000 fd31 	bl	8010ff4 <xQueueGiveFromISR>
 8010592:	4603      	mov	r3, r0
 8010594:	2b01      	cmp	r3, #1
 8010596:	d001      	beq.n	801059c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8010598:	23ff      	movs	r3, #255	; 0xff
 801059a:	e017      	b.n	80105cc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d013      	beq.n	80105ca <osSemaphoreRelease+0x5e>
 80105a2:	4b0c      	ldr	r3, [pc, #48]	; (80105d4 <osSemaphoreRelease+0x68>)
 80105a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105a8:	601a      	str	r2, [r3, #0]
 80105aa:	f3bf 8f4f 	dsb	sy
 80105ae:	f3bf 8f6f 	isb	sy
 80105b2:	e00a      	b.n	80105ca <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80105b4:	2300      	movs	r3, #0
 80105b6:	2200      	movs	r2, #0
 80105b8:	2100      	movs	r1, #0
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 fb74 	bl	8010ca8 <xQueueGenericSend>
 80105c0:	4603      	mov	r3, r0
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d001      	beq.n	80105ca <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80105c6:	23ff      	movs	r3, #255	; 0xff
 80105c8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80105ca:	68fb      	ldr	r3, [r7, #12]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3710      	adds	r7, #16
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}
 80105d4:	e000ed04 	.word	0xe000ed04

080105d8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b082      	sub	sp, #8
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80105e0:	f7ff fe1f 	bl	8010222 <inHandlerMode>
 80105e4:	4603      	mov	r3, r0
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d001      	beq.n	80105ee <osSemaphoreDelete+0x16>
    return osErrorISR;
 80105ea:	2382      	movs	r3, #130	; 0x82
 80105ec:	e003      	b.n	80105f6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f001 f856 	bl	80116a0 <vQueueDelete>

  return osOK; 
 80105f4:	2300      	movs	r3, #0
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3708      	adds	r7, #8
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}

080105fe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80105fe:	b590      	push	{r4, r7, lr}
 8010600:	b085      	sub	sp, #20
 8010602:	af02      	add	r7, sp, #8
 8010604:	6078      	str	r0, [r7, #4]
 8010606:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	689b      	ldr	r3, [r3, #8]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d011      	beq.n	8010634 <osMessageCreate+0x36>
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d00d      	beq.n	8010634 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6818      	ldr	r0, [r3, #0]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6859      	ldr	r1, [r3, #4]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	689a      	ldr	r2, [r3, #8]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	2400      	movs	r4, #0
 801062a:	9400      	str	r4, [sp, #0]
 801062c:	f000 fa0c 	bl	8010a48 <xQueueGenericCreateStatic>
 8010630:	4603      	mov	r3, r0
 8010632:	e008      	b.n	8010646 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6818      	ldr	r0, [r3, #0]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	2200      	movs	r2, #0
 801063e:	4619      	mov	r1, r3
 8010640:	f000 fa84 	bl	8010b4c <xQueueGenericCreate>
 8010644:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8010646:	4618      	mov	r0, r3
 8010648:	370c      	adds	r7, #12
 801064a:	46bd      	mov	sp, r7
 801064c:	bd90      	pop	{r4, r7, pc}
	...

08010650 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b086      	sub	sp, #24
 8010654:	af00      	add	r7, sp, #0
 8010656:	60f8      	str	r0, [r7, #12]
 8010658:	60b9      	str	r1, [r7, #8]
 801065a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801065c:	2300      	movs	r3, #0
 801065e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d101      	bne.n	801066e <osMessagePut+0x1e>
    ticks = 1;
 801066a:	2301      	movs	r3, #1
 801066c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801066e:	f7ff fdd8 	bl	8010222 <inHandlerMode>
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d018      	beq.n	80106aa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010678:	f107 0210 	add.w	r2, r7, #16
 801067c:	f107 0108 	add.w	r1, r7, #8
 8010680:	2300      	movs	r3, #0
 8010682:	68f8      	ldr	r0, [r7, #12]
 8010684:	f000 fc16 	bl	8010eb4 <xQueueGenericSendFromISR>
 8010688:	4603      	mov	r3, r0
 801068a:	2b01      	cmp	r3, #1
 801068c:	d001      	beq.n	8010692 <osMessagePut+0x42>
      return osErrorOS;
 801068e:	23ff      	movs	r3, #255	; 0xff
 8010690:	e018      	b.n	80106c4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d014      	beq.n	80106c2 <osMessagePut+0x72>
 8010698:	4b0c      	ldr	r3, [pc, #48]	; (80106cc <osMessagePut+0x7c>)
 801069a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801069e:	601a      	str	r2, [r3, #0]
 80106a0:	f3bf 8f4f 	dsb	sy
 80106a4:	f3bf 8f6f 	isb	sy
 80106a8:	e00b      	b.n	80106c2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80106aa:	f107 0108 	add.w	r1, r7, #8
 80106ae:	2300      	movs	r3, #0
 80106b0:	697a      	ldr	r2, [r7, #20]
 80106b2:	68f8      	ldr	r0, [r7, #12]
 80106b4:	f000 faf8 	bl	8010ca8 <xQueueGenericSend>
 80106b8:	4603      	mov	r3, r0
 80106ba:	2b01      	cmp	r3, #1
 80106bc:	d001      	beq.n	80106c2 <osMessagePut+0x72>
      return osErrorOS;
 80106be:	23ff      	movs	r3, #255	; 0xff
 80106c0:	e000      	b.n	80106c4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80106c2:	2300      	movs	r3, #0
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3718      	adds	r7, #24
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	e000ed04 	.word	0xe000ed04

080106d0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80106d0:	b590      	push	{r4, r7, lr}
 80106d2:	b08b      	sub	sp, #44	; 0x2c
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	60f8      	str	r0, [r7, #12]
 80106d8:	60b9      	str	r1, [r7, #8]
 80106da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80106e0:	2300      	movs	r3, #0
 80106e2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d10a      	bne.n	8010700 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80106ea:	2380      	movs	r3, #128	; 0x80
 80106ec:	617b      	str	r3, [r7, #20]
    return event;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	461c      	mov	r4, r3
 80106f2:	f107 0314 	add.w	r3, r7, #20
 80106f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80106fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80106fe:	e054      	b.n	80107aa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010700:	2300      	movs	r3, #0
 8010702:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010704:	2300      	movs	r3, #0
 8010706:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801070e:	d103      	bne.n	8010718 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010714:	627b      	str	r3, [r7, #36]	; 0x24
 8010716:	e009      	b.n	801072c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d006      	beq.n	801072c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8010722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010724:	2b00      	cmp	r3, #0
 8010726:	d101      	bne.n	801072c <osMessageGet+0x5c>
      ticks = 1;
 8010728:	2301      	movs	r3, #1
 801072a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 801072c:	f7ff fd79 	bl	8010222 <inHandlerMode>
 8010730:	4603      	mov	r3, r0
 8010732:	2b00      	cmp	r3, #0
 8010734:	d01c      	beq.n	8010770 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010736:	f107 0220 	add.w	r2, r7, #32
 801073a:	f107 0314 	add.w	r3, r7, #20
 801073e:	3304      	adds	r3, #4
 8010740:	4619      	mov	r1, r3
 8010742:	68b8      	ldr	r0, [r7, #8]
 8010744:	f000 fee6 	bl	8011514 <xQueueReceiveFromISR>
 8010748:	4603      	mov	r3, r0
 801074a:	2b01      	cmp	r3, #1
 801074c:	d102      	bne.n	8010754 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801074e:	2310      	movs	r3, #16
 8010750:	617b      	str	r3, [r7, #20]
 8010752:	e001      	b.n	8010758 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010754:	2300      	movs	r3, #0
 8010756:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010758:	6a3b      	ldr	r3, [r7, #32]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d01d      	beq.n	801079a <osMessageGet+0xca>
 801075e:	4b15      	ldr	r3, [pc, #84]	; (80107b4 <osMessageGet+0xe4>)
 8010760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010764:	601a      	str	r2, [r3, #0]
 8010766:	f3bf 8f4f 	dsb	sy
 801076a:	f3bf 8f6f 	isb	sy
 801076e:	e014      	b.n	801079a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010770:	f107 0314 	add.w	r3, r7, #20
 8010774:	3304      	adds	r3, #4
 8010776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010778:	4619      	mov	r1, r3
 801077a:	68b8      	ldr	r0, [r7, #8]
 801077c:	f000 fcd0 	bl	8011120 <xQueueReceive>
 8010780:	4603      	mov	r3, r0
 8010782:	2b01      	cmp	r3, #1
 8010784:	d102      	bne.n	801078c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010786:	2310      	movs	r3, #16
 8010788:	617b      	str	r3, [r7, #20]
 801078a:	e006      	b.n	801079a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078e:	2b00      	cmp	r3, #0
 8010790:	d101      	bne.n	8010796 <osMessageGet+0xc6>
 8010792:	2300      	movs	r3, #0
 8010794:	e000      	b.n	8010798 <osMessageGet+0xc8>
 8010796:	2340      	movs	r3, #64	; 0x40
 8010798:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	461c      	mov	r4, r3
 801079e:	f107 0314 	add.w	r3, r7, #20
 80107a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80107a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80107aa:	68f8      	ldr	r0, [r7, #12]
 80107ac:	372c      	adds	r7, #44	; 0x2c
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd90      	pop	{r4, r7, pc}
 80107b2:	bf00      	nop
 80107b4:	e000ed04 	.word	0xe000ed04

080107b8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b082      	sub	sp, #8
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80107c0:	f7ff fd2f 	bl	8010222 <inHandlerMode>
 80107c4:	4603      	mov	r3, r0
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d004      	beq.n	80107d4 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f000 ff48 	bl	8011660 <uxQueueMessagesWaitingFromISR>
 80107d0:	4603      	mov	r3, r0
 80107d2:	e003      	b.n	80107dc <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 ff23 	bl	8011620 <uxQueueMessagesWaiting>
 80107da:	4603      	mov	r3, r0
  }
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3708      	adds	r7, #8
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}

080107e4 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b082      	sub	sp, #8
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80107ec:	f7ff fd19 	bl	8010222 <inHandlerMode>
 80107f0:	4603      	mov	r3, r0
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d001      	beq.n	80107fa <osMessageDelete+0x16>
    return osErrorISR;
 80107f6:	2382      	movs	r3, #130	; 0x82
 80107f8:	e003      	b.n	8010802 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f000 ff50 	bl	80116a0 <vQueueDelete>

  return osOK; 
 8010800:	2300      	movs	r3, #0
}
 8010802:	4618      	mov	r0, r3
 8010804:	3708      	adds	r7, #8
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}

0801080a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801080a:	b480      	push	{r7}
 801080c:	b083      	sub	sp, #12
 801080e:	af00      	add	r7, sp, #0
 8010810:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f103 0208 	add.w	r2, r3, #8
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010822:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f103 0208 	add.w	r2, r3, #8
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f103 0208 	add.w	r2, r3, #8
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2200      	movs	r2, #0
 801083c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801083e:	bf00      	nop
 8010840:	370c      	adds	r7, #12
 8010842:	46bd      	mov	sp, r7
 8010844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010848:	4770      	bx	lr

0801084a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801084a:	b480      	push	{r7}
 801084c:	b083      	sub	sp, #12
 801084e:	af00      	add	r7, sp, #0
 8010850:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2200      	movs	r2, #0
 8010856:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010858:	bf00      	nop
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr

08010864 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010864:	b480      	push	{r7}
 8010866:	b085      	sub	sp, #20
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	689a      	ldr	r2, [r3, #8]
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	689b      	ldr	r3, [r3, #8]
 8010886:	683a      	ldr	r2, [r7, #0]
 8010888:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	683a      	ldr	r2, [r7, #0]
 801088e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	687a      	ldr	r2, [r7, #4]
 8010894:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	1c5a      	adds	r2, r3, #1
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	601a      	str	r2, [r3, #0]
}
 80108a0:	bf00      	nop
 80108a2:	3714      	adds	r7, #20
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr

080108ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80108ac:	b480      	push	{r7}
 80108ae:	b085      	sub	sp, #20
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108c2:	d103      	bne.n	80108cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	691b      	ldr	r3, [r3, #16]
 80108c8:	60fb      	str	r3, [r7, #12]
 80108ca:	e00c      	b.n	80108e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	3308      	adds	r3, #8
 80108d0:	60fb      	str	r3, [r7, #12]
 80108d2:	e002      	b.n	80108da <vListInsert+0x2e>
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	60fb      	str	r3, [r7, #12]
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	685b      	ldr	r3, [r3, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	68ba      	ldr	r2, [r7, #8]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d2f6      	bcs.n	80108d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	685a      	ldr	r2, [r3, #4]
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	683a      	ldr	r2, [r7, #0]
 80108f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	68fa      	ldr	r2, [r7, #12]
 80108fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	683a      	ldr	r2, [r7, #0]
 8010900:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	687a      	ldr	r2, [r7, #4]
 8010906:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	1c5a      	adds	r2, r3, #1
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	601a      	str	r2, [r3, #0]
}
 8010912:	bf00      	nop
 8010914:	3714      	adds	r7, #20
 8010916:	46bd      	mov	sp, r7
 8010918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091c:	4770      	bx	lr

0801091e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801091e:	b480      	push	{r7}
 8010920:	b085      	sub	sp, #20
 8010922:	af00      	add	r7, sp, #0
 8010924:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	691b      	ldr	r3, [r3, #16]
 801092a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	687a      	ldr	r2, [r7, #4]
 8010932:	6892      	ldr	r2, [r2, #8]
 8010934:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	689b      	ldr	r3, [r3, #8]
 801093a:	687a      	ldr	r2, [r7, #4]
 801093c:	6852      	ldr	r2, [r2, #4]
 801093e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	429a      	cmp	r2, r3
 8010948:	d103      	bne.n	8010952 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	689a      	ldr	r2, [r3, #8]
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2200      	movs	r2, #0
 8010956:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	1e5a      	subs	r2, r3, #1
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	681b      	ldr	r3, [r3, #0]
}
 8010966:	4618      	mov	r0, r3
 8010968:	3714      	adds	r7, #20
 801096a:	46bd      	mov	sp, r7
 801096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010970:	4770      	bx	lr
	...

08010974 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d10c      	bne.n	80109a2 <xQueueGenericReset+0x2e>
	__asm volatile
 8010988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801098c:	b672      	cpsid	i
 801098e:	f383 8811 	msr	BASEPRI, r3
 8010992:	f3bf 8f6f 	isb	sy
 8010996:	f3bf 8f4f 	dsb	sy
 801099a:	b662      	cpsie	i
 801099c:	60bb      	str	r3, [r7, #8]
}
 801099e:	bf00      	nop
 80109a0:	e7fe      	b.n	80109a0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80109a2:	f002 fa8b 	bl	8012ebc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109ae:	68f9      	ldr	r1, [r7, #12]
 80109b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80109b2:	fb01 f303 	mul.w	r3, r1, r3
 80109b6:	441a      	add	r2, r3
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	2200      	movs	r2, #0
 80109c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	681a      	ldr	r2, [r3, #0]
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109d2:	3b01      	subs	r3, #1
 80109d4:	68f9      	ldr	r1, [r7, #12]
 80109d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80109d8:	fb01 f303 	mul.w	r3, r1, r3
 80109dc:	441a      	add	r2, r3
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	22ff      	movs	r2, #255	; 0xff
 80109e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	22ff      	movs	r2, #255	; 0xff
 80109ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d114      	bne.n	8010a22 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	691b      	ldr	r3, [r3, #16]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d01a      	beq.n	8010a36 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	3310      	adds	r3, #16
 8010a04:	4618      	mov	r0, r3
 8010a06:	f001 fd41 	bl	801248c <xTaskRemoveFromEventList>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d012      	beq.n	8010a36 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010a10:	4b0c      	ldr	r3, [pc, #48]	; (8010a44 <xQueueGenericReset+0xd0>)
 8010a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a16:	601a      	str	r2, [r3, #0]
 8010a18:	f3bf 8f4f 	dsb	sy
 8010a1c:	f3bf 8f6f 	isb	sy
 8010a20:	e009      	b.n	8010a36 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	3310      	adds	r3, #16
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7ff feef 	bl	801080a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	3324      	adds	r3, #36	; 0x24
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7ff feea 	bl	801080a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010a36:	f002 fa75 	bl	8012f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010a3a:	2301      	movs	r3, #1
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3710      	adds	r7, #16
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}
 8010a44:	e000ed04 	.word	0xe000ed04

08010a48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b08e      	sub	sp, #56	; 0x38
 8010a4c:	af02      	add	r7, sp, #8
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	607a      	str	r2, [r7, #4]
 8010a54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d10c      	bne.n	8010a76 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8010a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a60:	b672      	cpsid	i
 8010a62:	f383 8811 	msr	BASEPRI, r3
 8010a66:	f3bf 8f6f 	isb	sy
 8010a6a:	f3bf 8f4f 	dsb	sy
 8010a6e:	b662      	cpsie	i
 8010a70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010a72:	bf00      	nop
 8010a74:	e7fe      	b.n	8010a74 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d10c      	bne.n	8010a96 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8010a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a80:	b672      	cpsid	i
 8010a82:	f383 8811 	msr	BASEPRI, r3
 8010a86:	f3bf 8f6f 	isb	sy
 8010a8a:	f3bf 8f4f 	dsb	sy
 8010a8e:	b662      	cpsie	i
 8010a90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010a92:	bf00      	nop
 8010a94:	e7fe      	b.n	8010a94 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d002      	beq.n	8010aa2 <xQueueGenericCreateStatic+0x5a>
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d001      	beq.n	8010aa6 <xQueueGenericCreateStatic+0x5e>
 8010aa2:	2301      	movs	r3, #1
 8010aa4:	e000      	b.n	8010aa8 <xQueueGenericCreateStatic+0x60>
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d10c      	bne.n	8010ac6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8010aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab0:	b672      	cpsid	i
 8010ab2:	f383 8811 	msr	BASEPRI, r3
 8010ab6:	f3bf 8f6f 	isb	sy
 8010aba:	f3bf 8f4f 	dsb	sy
 8010abe:	b662      	cpsie	i
 8010ac0:	623b      	str	r3, [r7, #32]
}
 8010ac2:	bf00      	nop
 8010ac4:	e7fe      	b.n	8010ac4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d102      	bne.n	8010ad2 <xQueueGenericCreateStatic+0x8a>
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d101      	bne.n	8010ad6 <xQueueGenericCreateStatic+0x8e>
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e000      	b.n	8010ad8 <xQueueGenericCreateStatic+0x90>
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d10c      	bne.n	8010af6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8010adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae0:	b672      	cpsid	i
 8010ae2:	f383 8811 	msr	BASEPRI, r3
 8010ae6:	f3bf 8f6f 	isb	sy
 8010aea:	f3bf 8f4f 	dsb	sy
 8010aee:	b662      	cpsie	i
 8010af0:	61fb      	str	r3, [r7, #28]
}
 8010af2:	bf00      	nop
 8010af4:	e7fe      	b.n	8010af4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010af6:	2348      	movs	r3, #72	; 0x48
 8010af8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	2b48      	cmp	r3, #72	; 0x48
 8010afe:	d00c      	beq.n	8010b1a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8010b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b04:	b672      	cpsid	i
 8010b06:	f383 8811 	msr	BASEPRI, r3
 8010b0a:	f3bf 8f6f 	isb	sy
 8010b0e:	f3bf 8f4f 	dsb	sy
 8010b12:	b662      	cpsie	i
 8010b14:	61bb      	str	r3, [r7, #24]
}
 8010b16:	bf00      	nop
 8010b18:	e7fe      	b.n	8010b18 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010b1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d00d      	beq.n	8010b42 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b28:	2201      	movs	r2, #1
 8010b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010b2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b34:	9300      	str	r3, [sp, #0]
 8010b36:	4613      	mov	r3, r2
 8010b38:	687a      	ldr	r2, [r7, #4]
 8010b3a:	68b9      	ldr	r1, [r7, #8]
 8010b3c:	68f8      	ldr	r0, [r7, #12]
 8010b3e:	f000 f847 	bl	8010bd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3730      	adds	r7, #48	; 0x30
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b08a      	sub	sp, #40	; 0x28
 8010b50:	af02      	add	r7, sp, #8
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	4613      	mov	r3, r2
 8010b58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d10c      	bne.n	8010b7a <xQueueGenericCreate+0x2e>
	__asm volatile
 8010b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b64:	b672      	cpsid	i
 8010b66:	f383 8811 	msr	BASEPRI, r3
 8010b6a:	f3bf 8f6f 	isb	sy
 8010b6e:	f3bf 8f4f 	dsb	sy
 8010b72:	b662      	cpsie	i
 8010b74:	613b      	str	r3, [r7, #16]
}
 8010b76:	bf00      	nop
 8010b78:	e7fe      	b.n	8010b78 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d102      	bne.n	8010b86 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010b80:	2300      	movs	r3, #0
 8010b82:	61fb      	str	r3, [r7, #28]
 8010b84:	e004      	b.n	8010b90 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	68ba      	ldr	r2, [r7, #8]
 8010b8a:	fb02 f303 	mul.w	r3, r2, r3
 8010b8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010b90:	69fb      	ldr	r3, [r7, #28]
 8010b92:	3348      	adds	r3, #72	; 0x48
 8010b94:	4618      	mov	r0, r3
 8010b96:	f7f0 fc7a 	bl	800148e <pvPortMalloc>
 8010b9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010b9c:	69bb      	ldr	r3, [r7, #24]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d011      	beq.n	8010bc6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	3348      	adds	r3, #72	; 0x48
 8010baa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010bac:	69bb      	ldr	r3, [r7, #24]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010bb4:	79fa      	ldrb	r2, [r7, #7]
 8010bb6:	69bb      	ldr	r3, [r7, #24]
 8010bb8:	9300      	str	r3, [sp, #0]
 8010bba:	4613      	mov	r3, r2
 8010bbc:	697a      	ldr	r2, [r7, #20]
 8010bbe:	68b9      	ldr	r1, [r7, #8]
 8010bc0:	68f8      	ldr	r0, [r7, #12]
 8010bc2:	f000 f805 	bl	8010bd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010bc6:	69bb      	ldr	r3, [r7, #24]
	}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3720      	adds	r7, #32
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}

08010bd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b084      	sub	sp, #16
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	60f8      	str	r0, [r7, #12]
 8010bd8:	60b9      	str	r1, [r7, #8]
 8010bda:	607a      	str	r2, [r7, #4]
 8010bdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d103      	bne.n	8010bec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010be4:	69bb      	ldr	r3, [r7, #24]
 8010be6:	69ba      	ldr	r2, [r7, #24]
 8010be8:	601a      	str	r2, [r3, #0]
 8010bea:	e002      	b.n	8010bf2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010bec:	69bb      	ldr	r3, [r7, #24]
 8010bee:	687a      	ldr	r2, [r7, #4]
 8010bf0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010bf2:	69bb      	ldr	r3, [r7, #24]
 8010bf4:	68fa      	ldr	r2, [r7, #12]
 8010bf6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010bf8:	69bb      	ldr	r3, [r7, #24]
 8010bfa:	68ba      	ldr	r2, [r7, #8]
 8010bfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010bfe:	2101      	movs	r1, #1
 8010c00:	69b8      	ldr	r0, [r7, #24]
 8010c02:	f7ff feb7 	bl	8010974 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010c06:	bf00      	nop
 8010c08:	3710      	adds	r7, #16
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}

08010c0e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010c0e:	b580      	push	{r7, lr}
 8010c10:	b082      	sub	sp, #8
 8010c12:	af00      	add	r7, sp, #0
 8010c14:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d00e      	beq.n	8010c3a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2200      	movs	r2, #0
 8010c26:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010c2e:	2300      	movs	r3, #0
 8010c30:	2200      	movs	r2, #0
 8010c32:	2100      	movs	r1, #0
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f000 f837 	bl	8010ca8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010c3a:	bf00      	nop
 8010c3c:	3708      	adds	r7, #8
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}

08010c42 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010c42:	b580      	push	{r7, lr}
 8010c44:	b086      	sub	sp, #24
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	4603      	mov	r3, r0
 8010c4a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	617b      	str	r3, [r7, #20]
 8010c50:	2300      	movs	r3, #0
 8010c52:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010c54:	79fb      	ldrb	r3, [r7, #7]
 8010c56:	461a      	mov	r2, r3
 8010c58:	6939      	ldr	r1, [r7, #16]
 8010c5a:	6978      	ldr	r0, [r7, #20]
 8010c5c:	f7ff ff76 	bl	8010b4c <xQueueGenericCreate>
 8010c60:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f7ff ffd3 	bl	8010c0e <prvInitialiseMutex>

		return xNewQueue;
 8010c68:	68fb      	ldr	r3, [r7, #12]
	}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3718      	adds	r7, #24
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}

08010c72 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010c72:	b580      	push	{r7, lr}
 8010c74:	b088      	sub	sp, #32
 8010c76:	af02      	add	r7, sp, #8
 8010c78:	4603      	mov	r3, r0
 8010c7a:	6039      	str	r1, [r7, #0]
 8010c7c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010c7e:	2301      	movs	r3, #1
 8010c80:	617b      	str	r3, [r7, #20]
 8010c82:	2300      	movs	r3, #0
 8010c84:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010c86:	79fb      	ldrb	r3, [r7, #7]
 8010c88:	9300      	str	r3, [sp, #0]
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	6939      	ldr	r1, [r7, #16]
 8010c90:	6978      	ldr	r0, [r7, #20]
 8010c92:	f7ff fed9 	bl	8010a48 <xQueueGenericCreateStatic>
 8010c96:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010c98:	68f8      	ldr	r0, [r7, #12]
 8010c9a:	f7ff ffb8 	bl	8010c0e <prvInitialiseMutex>

		return xNewQueue;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
	}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3718      	adds	r7, #24
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b08e      	sub	sp, #56	; 0x38
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	60f8      	str	r0, [r7, #12]
 8010cb0:	60b9      	str	r1, [r7, #8]
 8010cb2:	607a      	str	r2, [r7, #4]
 8010cb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d10c      	bne.n	8010cde <xQueueGenericSend+0x36>
	__asm volatile
 8010cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc8:	b672      	cpsid	i
 8010cca:	f383 8811 	msr	BASEPRI, r3
 8010cce:	f3bf 8f6f 	isb	sy
 8010cd2:	f3bf 8f4f 	dsb	sy
 8010cd6:	b662      	cpsie	i
 8010cd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010cda:	bf00      	nop
 8010cdc:	e7fe      	b.n	8010cdc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d103      	bne.n	8010cec <xQueueGenericSend+0x44>
 8010ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d101      	bne.n	8010cf0 <xQueueGenericSend+0x48>
 8010cec:	2301      	movs	r3, #1
 8010cee:	e000      	b.n	8010cf2 <xQueueGenericSend+0x4a>
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d10c      	bne.n	8010d10 <xQueueGenericSend+0x68>
	__asm volatile
 8010cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cfa:	b672      	cpsid	i
 8010cfc:	f383 8811 	msr	BASEPRI, r3
 8010d00:	f3bf 8f6f 	isb	sy
 8010d04:	f3bf 8f4f 	dsb	sy
 8010d08:	b662      	cpsie	i
 8010d0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010d0c:	bf00      	nop
 8010d0e:	e7fe      	b.n	8010d0e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	2b02      	cmp	r3, #2
 8010d14:	d103      	bne.n	8010d1e <xQueueGenericSend+0x76>
 8010d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d1a:	2b01      	cmp	r3, #1
 8010d1c:	d101      	bne.n	8010d22 <xQueueGenericSend+0x7a>
 8010d1e:	2301      	movs	r3, #1
 8010d20:	e000      	b.n	8010d24 <xQueueGenericSend+0x7c>
 8010d22:	2300      	movs	r3, #0
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d10c      	bne.n	8010d42 <xQueueGenericSend+0x9a>
	__asm volatile
 8010d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d2c:	b672      	cpsid	i
 8010d2e:	f383 8811 	msr	BASEPRI, r3
 8010d32:	f3bf 8f6f 	isb	sy
 8010d36:	f3bf 8f4f 	dsb	sy
 8010d3a:	b662      	cpsie	i
 8010d3c:	623b      	str	r3, [r7, #32]
}
 8010d3e:	bf00      	nop
 8010d40:	e7fe      	b.n	8010d40 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d42:	f001 fd6b 	bl	801281c <xTaskGetSchedulerState>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d102      	bne.n	8010d52 <xQueueGenericSend+0xaa>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d101      	bne.n	8010d56 <xQueueGenericSend+0xae>
 8010d52:	2301      	movs	r3, #1
 8010d54:	e000      	b.n	8010d58 <xQueueGenericSend+0xb0>
 8010d56:	2300      	movs	r3, #0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d10c      	bne.n	8010d76 <xQueueGenericSend+0xce>
	__asm volatile
 8010d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d60:	b672      	cpsid	i
 8010d62:	f383 8811 	msr	BASEPRI, r3
 8010d66:	f3bf 8f6f 	isb	sy
 8010d6a:	f3bf 8f4f 	dsb	sy
 8010d6e:	b662      	cpsie	i
 8010d70:	61fb      	str	r3, [r7, #28]
}
 8010d72:	bf00      	nop
 8010d74:	e7fe      	b.n	8010d74 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d76:	f002 f8a1 	bl	8012ebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d302      	bcc.n	8010d8c <xQueueGenericSend+0xe4>
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	2b02      	cmp	r3, #2
 8010d8a:	d129      	bne.n	8010de0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010d8c:	683a      	ldr	r2, [r7, #0]
 8010d8e:	68b9      	ldr	r1, [r7, #8]
 8010d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d92:	f000 fcc2 	bl	801171a <prvCopyDataToQueue>
 8010d96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d010      	beq.n	8010dc2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da2:	3324      	adds	r3, #36	; 0x24
 8010da4:	4618      	mov	r0, r3
 8010da6:	f001 fb71 	bl	801248c <xTaskRemoveFromEventList>
 8010daa:	4603      	mov	r3, r0
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d013      	beq.n	8010dd8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010db0:	4b3f      	ldr	r3, [pc, #252]	; (8010eb0 <xQueueGenericSend+0x208>)
 8010db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010db6:	601a      	str	r2, [r3, #0]
 8010db8:	f3bf 8f4f 	dsb	sy
 8010dbc:	f3bf 8f6f 	isb	sy
 8010dc0:	e00a      	b.n	8010dd8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d007      	beq.n	8010dd8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010dc8:	4b39      	ldr	r3, [pc, #228]	; (8010eb0 <xQueueGenericSend+0x208>)
 8010dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dce:	601a      	str	r2, [r3, #0]
 8010dd0:	f3bf 8f4f 	dsb	sy
 8010dd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010dd8:	f002 f8a4 	bl	8012f24 <vPortExitCritical>
				return pdPASS;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	e063      	b.n	8010ea8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d103      	bne.n	8010dee <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010de6:	f002 f89d 	bl	8012f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010dea:	2300      	movs	r3, #0
 8010dec:	e05c      	b.n	8010ea8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d106      	bne.n	8010e02 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010df4:	f107 0314 	add.w	r3, r7, #20
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f001 fbab 	bl	8012554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010e02:	f002 f88f 	bl	8012f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e06:	f001 f92f 	bl	8012068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e0a:	f002 f857 	bl	8012ebc <vPortEnterCritical>
 8010e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e14:	b25b      	sxtb	r3, r3
 8010e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e1a:	d103      	bne.n	8010e24 <xQueueGenericSend+0x17c>
 8010e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e1e:	2200      	movs	r2, #0
 8010e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e2a:	b25b      	sxtb	r3, r3
 8010e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e30:	d103      	bne.n	8010e3a <xQueueGenericSend+0x192>
 8010e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e34:	2200      	movs	r2, #0
 8010e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e3a:	f002 f873 	bl	8012f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e3e:	1d3a      	adds	r2, r7, #4
 8010e40:	f107 0314 	add.w	r3, r7, #20
 8010e44:	4611      	mov	r1, r2
 8010e46:	4618      	mov	r0, r3
 8010e48:	f001 fb9a 	bl	8012580 <xTaskCheckForTimeOut>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d124      	bne.n	8010e9c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e54:	f000 fd59 	bl	801190a <prvIsQueueFull>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d018      	beq.n	8010e90 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e60:	3310      	adds	r3, #16
 8010e62:	687a      	ldr	r2, [r7, #4]
 8010e64:	4611      	mov	r1, r2
 8010e66:	4618      	mov	r0, r3
 8010e68:	f001 faea 	bl	8012440 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e6e:	f000 fce4 	bl	801183a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010e72:	f001 f907 	bl	8012084 <xTaskResumeAll>
 8010e76:	4603      	mov	r3, r0
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	f47f af7c 	bne.w	8010d76 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8010e7e:	4b0c      	ldr	r3, [pc, #48]	; (8010eb0 <xQueueGenericSend+0x208>)
 8010e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e84:	601a      	str	r2, [r3, #0]
 8010e86:	f3bf 8f4f 	dsb	sy
 8010e8a:	f3bf 8f6f 	isb	sy
 8010e8e:	e772      	b.n	8010d76 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e92:	f000 fcd2 	bl	801183a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e96:	f001 f8f5 	bl	8012084 <xTaskResumeAll>
 8010e9a:	e76c      	b.n	8010d76 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e9e:	f000 fccc 	bl	801183a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ea2:	f001 f8ef 	bl	8012084 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010ea6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3738      	adds	r7, #56	; 0x38
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}
 8010eb0:	e000ed04 	.word	0xe000ed04

08010eb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b08e      	sub	sp, #56	; 0x38
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	60f8      	str	r0, [r7, #12]
 8010ebc:	60b9      	str	r1, [r7, #8]
 8010ebe:	607a      	str	r2, [r7, #4]
 8010ec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d10c      	bne.n	8010ee6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8010ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed0:	b672      	cpsid	i
 8010ed2:	f383 8811 	msr	BASEPRI, r3
 8010ed6:	f3bf 8f6f 	isb	sy
 8010eda:	f3bf 8f4f 	dsb	sy
 8010ede:	b662      	cpsie	i
 8010ee0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010ee2:	bf00      	nop
 8010ee4:	e7fe      	b.n	8010ee4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d103      	bne.n	8010ef4 <xQueueGenericSendFromISR+0x40>
 8010eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d101      	bne.n	8010ef8 <xQueueGenericSendFromISR+0x44>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	e000      	b.n	8010efa <xQueueGenericSendFromISR+0x46>
 8010ef8:	2300      	movs	r3, #0
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d10c      	bne.n	8010f18 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8010efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f02:	b672      	cpsid	i
 8010f04:	f383 8811 	msr	BASEPRI, r3
 8010f08:	f3bf 8f6f 	isb	sy
 8010f0c:	f3bf 8f4f 	dsb	sy
 8010f10:	b662      	cpsie	i
 8010f12:	623b      	str	r3, [r7, #32]
}
 8010f14:	bf00      	nop
 8010f16:	e7fe      	b.n	8010f16 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	2b02      	cmp	r3, #2
 8010f1c:	d103      	bne.n	8010f26 <xQueueGenericSendFromISR+0x72>
 8010f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f22:	2b01      	cmp	r3, #1
 8010f24:	d101      	bne.n	8010f2a <xQueueGenericSendFromISR+0x76>
 8010f26:	2301      	movs	r3, #1
 8010f28:	e000      	b.n	8010f2c <xQueueGenericSendFromISR+0x78>
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d10c      	bne.n	8010f4a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8010f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f34:	b672      	cpsid	i
 8010f36:	f383 8811 	msr	BASEPRI, r3
 8010f3a:	f3bf 8f6f 	isb	sy
 8010f3e:	f3bf 8f4f 	dsb	sy
 8010f42:	b662      	cpsie	i
 8010f44:	61fb      	str	r3, [r7, #28]
}
 8010f46:	bf00      	nop
 8010f48:	e7fe      	b.n	8010f48 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f4a:	f002 f89f 	bl	801308c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010f4e:	f3ef 8211 	mrs	r2, BASEPRI
 8010f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f56:	b672      	cpsid	i
 8010f58:	f383 8811 	msr	BASEPRI, r3
 8010f5c:	f3bf 8f6f 	isb	sy
 8010f60:	f3bf 8f4f 	dsb	sy
 8010f64:	b662      	cpsie	i
 8010f66:	61ba      	str	r2, [r7, #24]
 8010f68:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010f6a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d302      	bcc.n	8010f80 <xQueueGenericSendFromISR+0xcc>
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	2b02      	cmp	r3, #2
 8010f7e:	d12c      	bne.n	8010fda <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010f8a:	683a      	ldr	r2, [r7, #0]
 8010f8c:	68b9      	ldr	r1, [r7, #8]
 8010f8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f90:	f000 fbc3 	bl	801171a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010f94:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f9c:	d112      	bne.n	8010fc4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d016      	beq.n	8010fd4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa8:	3324      	adds	r3, #36	; 0x24
 8010faa:	4618      	mov	r0, r3
 8010fac:	f001 fa6e 	bl	801248c <xTaskRemoveFromEventList>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d00e      	beq.n	8010fd4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d00b      	beq.n	8010fd4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2201      	movs	r2, #1
 8010fc0:	601a      	str	r2, [r3, #0]
 8010fc2:	e007      	b.n	8010fd4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010fc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010fc8:	3301      	adds	r3, #1
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	b25a      	sxtb	r2, r3
 8010fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010fd8:	e001      	b.n	8010fde <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8010fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010fe8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3738      	adds	r7, #56	; 0x38
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}

08010ff4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b08e      	sub	sp, #56	; 0x38
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011004:	2b00      	cmp	r3, #0
 8011006:	d10c      	bne.n	8011022 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8011008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801100c:	b672      	cpsid	i
 801100e:	f383 8811 	msr	BASEPRI, r3
 8011012:	f3bf 8f6f 	isb	sy
 8011016:	f3bf 8f4f 	dsb	sy
 801101a:	b662      	cpsie	i
 801101c:	623b      	str	r3, [r7, #32]
}
 801101e:	bf00      	nop
 8011020:	e7fe      	b.n	8011020 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011026:	2b00      	cmp	r3, #0
 8011028:	d00c      	beq.n	8011044 <xQueueGiveFromISR+0x50>
	__asm volatile
 801102a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801102e:	b672      	cpsid	i
 8011030:	f383 8811 	msr	BASEPRI, r3
 8011034:	f3bf 8f6f 	isb	sy
 8011038:	f3bf 8f4f 	dsb	sy
 801103c:	b662      	cpsie	i
 801103e:	61fb      	str	r3, [r7, #28]
}
 8011040:	bf00      	nop
 8011042:	e7fe      	b.n	8011042 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d103      	bne.n	8011054 <xQueueGiveFromISR+0x60>
 801104c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104e:	689b      	ldr	r3, [r3, #8]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d101      	bne.n	8011058 <xQueueGiveFromISR+0x64>
 8011054:	2301      	movs	r3, #1
 8011056:	e000      	b.n	801105a <xQueueGiveFromISR+0x66>
 8011058:	2300      	movs	r3, #0
 801105a:	2b00      	cmp	r3, #0
 801105c:	d10c      	bne.n	8011078 <xQueueGiveFromISR+0x84>
	__asm volatile
 801105e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011062:	b672      	cpsid	i
 8011064:	f383 8811 	msr	BASEPRI, r3
 8011068:	f3bf 8f6f 	isb	sy
 801106c:	f3bf 8f4f 	dsb	sy
 8011070:	b662      	cpsie	i
 8011072:	61bb      	str	r3, [r7, #24]
}
 8011074:	bf00      	nop
 8011076:	e7fe      	b.n	8011076 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011078:	f002 f808 	bl	801308c <vPortValidateInterruptPriority>
	__asm volatile
 801107c:	f3ef 8211 	mrs	r2, BASEPRI
 8011080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011084:	b672      	cpsid	i
 8011086:	f383 8811 	msr	BASEPRI, r3
 801108a:	f3bf 8f6f 	isb	sy
 801108e:	f3bf 8f4f 	dsb	sy
 8011092:	b662      	cpsie	i
 8011094:	617a      	str	r2, [r7, #20]
 8011096:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011098:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801109a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801109c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110a0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80110a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d22b      	bcs.n	8011104 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80110ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80110b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80110b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b8:	1c5a      	adds	r2, r3, #1
 80110ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110bc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80110be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80110c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110c6:	d112      	bne.n	80110ee <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80110c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d016      	beq.n	80110fe <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d2:	3324      	adds	r3, #36	; 0x24
 80110d4:	4618      	mov	r0, r3
 80110d6:	f001 f9d9 	bl	801248c <xTaskRemoveFromEventList>
 80110da:	4603      	mov	r3, r0
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d00e      	beq.n	80110fe <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d00b      	beq.n	80110fe <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	2201      	movs	r2, #1
 80110ea:	601a      	str	r2, [r3, #0]
 80110ec:	e007      	b.n	80110fe <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80110ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110f2:	3301      	adds	r3, #1
 80110f4:	b2db      	uxtb	r3, r3
 80110f6:	b25a      	sxtb	r2, r3
 80110f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80110fe:	2301      	movs	r3, #1
 8011100:	637b      	str	r3, [r7, #52]	; 0x34
 8011102:	e001      	b.n	8011108 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011104:	2300      	movs	r3, #0
 8011106:	637b      	str	r3, [r7, #52]	; 0x34
 8011108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	f383 8811 	msr	BASEPRI, r3
}
 8011112:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011116:	4618      	mov	r0, r3
 8011118:	3738      	adds	r7, #56	; 0x38
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
	...

08011120 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b08c      	sub	sp, #48	; 0x30
 8011124:	af00      	add	r7, sp, #0
 8011126:	60f8      	str	r0, [r7, #12]
 8011128:	60b9      	str	r1, [r7, #8]
 801112a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801112c:	2300      	movs	r3, #0
 801112e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011136:	2b00      	cmp	r3, #0
 8011138:	d10c      	bne.n	8011154 <xQueueReceive+0x34>
	__asm volatile
 801113a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801113e:	b672      	cpsid	i
 8011140:	f383 8811 	msr	BASEPRI, r3
 8011144:	f3bf 8f6f 	isb	sy
 8011148:	f3bf 8f4f 	dsb	sy
 801114c:	b662      	cpsie	i
 801114e:	623b      	str	r3, [r7, #32]
}
 8011150:	bf00      	nop
 8011152:	e7fe      	b.n	8011152 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d103      	bne.n	8011162 <xQueueReceive+0x42>
 801115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801115e:	2b00      	cmp	r3, #0
 8011160:	d101      	bne.n	8011166 <xQueueReceive+0x46>
 8011162:	2301      	movs	r3, #1
 8011164:	e000      	b.n	8011168 <xQueueReceive+0x48>
 8011166:	2300      	movs	r3, #0
 8011168:	2b00      	cmp	r3, #0
 801116a:	d10c      	bne.n	8011186 <xQueueReceive+0x66>
	__asm volatile
 801116c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011170:	b672      	cpsid	i
 8011172:	f383 8811 	msr	BASEPRI, r3
 8011176:	f3bf 8f6f 	isb	sy
 801117a:	f3bf 8f4f 	dsb	sy
 801117e:	b662      	cpsie	i
 8011180:	61fb      	str	r3, [r7, #28]
}
 8011182:	bf00      	nop
 8011184:	e7fe      	b.n	8011184 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011186:	f001 fb49 	bl	801281c <xTaskGetSchedulerState>
 801118a:	4603      	mov	r3, r0
 801118c:	2b00      	cmp	r3, #0
 801118e:	d102      	bne.n	8011196 <xQueueReceive+0x76>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d101      	bne.n	801119a <xQueueReceive+0x7a>
 8011196:	2301      	movs	r3, #1
 8011198:	e000      	b.n	801119c <xQueueReceive+0x7c>
 801119a:	2300      	movs	r3, #0
 801119c:	2b00      	cmp	r3, #0
 801119e:	d10c      	bne.n	80111ba <xQueueReceive+0x9a>
	__asm volatile
 80111a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a4:	b672      	cpsid	i
 80111a6:	f383 8811 	msr	BASEPRI, r3
 80111aa:	f3bf 8f6f 	isb	sy
 80111ae:	f3bf 8f4f 	dsb	sy
 80111b2:	b662      	cpsie	i
 80111b4:	61bb      	str	r3, [r7, #24]
}
 80111b6:	bf00      	nop
 80111b8:	e7fe      	b.n	80111b8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80111ba:	f001 fe7f 	bl	8012ebc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80111be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80111c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d01f      	beq.n	801120a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80111ca:	68b9      	ldr	r1, [r7, #8]
 80111cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80111ce:	f000 fb0e 	bl	80117ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80111d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d4:	1e5a      	subs	r2, r3, #1
 80111d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111dc:	691b      	ldr	r3, [r3, #16]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d00f      	beq.n	8011202 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e4:	3310      	adds	r3, #16
 80111e6:	4618      	mov	r0, r3
 80111e8:	f001 f950 	bl	801248c <xTaskRemoveFromEventList>
 80111ec:	4603      	mov	r3, r0
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d007      	beq.n	8011202 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80111f2:	4b3d      	ldr	r3, [pc, #244]	; (80112e8 <xQueueReceive+0x1c8>)
 80111f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111f8:	601a      	str	r2, [r3, #0]
 80111fa:	f3bf 8f4f 	dsb	sy
 80111fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011202:	f001 fe8f 	bl	8012f24 <vPortExitCritical>
				return pdPASS;
 8011206:	2301      	movs	r3, #1
 8011208:	e069      	b.n	80112de <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d103      	bne.n	8011218 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011210:	f001 fe88 	bl	8012f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011214:	2300      	movs	r3, #0
 8011216:	e062      	b.n	80112de <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121a:	2b00      	cmp	r3, #0
 801121c:	d106      	bne.n	801122c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801121e:	f107 0310 	add.w	r3, r7, #16
 8011222:	4618      	mov	r0, r3
 8011224:	f001 f996 	bl	8012554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011228:	2301      	movs	r3, #1
 801122a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801122c:	f001 fe7a 	bl	8012f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011230:	f000 ff1a 	bl	8012068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011234:	f001 fe42 	bl	8012ebc <vPortEnterCritical>
 8011238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801123e:	b25b      	sxtb	r3, r3
 8011240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011244:	d103      	bne.n	801124e <xQueueReceive+0x12e>
 8011246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011248:	2200      	movs	r2, #0
 801124a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011254:	b25b      	sxtb	r3, r3
 8011256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801125a:	d103      	bne.n	8011264 <xQueueReceive+0x144>
 801125c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801125e:	2200      	movs	r2, #0
 8011260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011264:	f001 fe5e 	bl	8012f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011268:	1d3a      	adds	r2, r7, #4
 801126a:	f107 0310 	add.w	r3, r7, #16
 801126e:	4611      	mov	r1, r2
 8011270:	4618      	mov	r0, r3
 8011272:	f001 f985 	bl	8012580 <xTaskCheckForTimeOut>
 8011276:	4603      	mov	r3, r0
 8011278:	2b00      	cmp	r3, #0
 801127a:	d123      	bne.n	80112c4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801127c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801127e:	f000 fb2e 	bl	80118de <prvIsQueueEmpty>
 8011282:	4603      	mov	r3, r0
 8011284:	2b00      	cmp	r3, #0
 8011286:	d017      	beq.n	80112b8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128a:	3324      	adds	r3, #36	; 0x24
 801128c:	687a      	ldr	r2, [r7, #4]
 801128e:	4611      	mov	r1, r2
 8011290:	4618      	mov	r0, r3
 8011292:	f001 f8d5 	bl	8012440 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011298:	f000 facf 	bl	801183a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801129c:	f000 fef2 	bl	8012084 <xTaskResumeAll>
 80112a0:	4603      	mov	r3, r0
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d189      	bne.n	80111ba <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80112a6:	4b10      	ldr	r3, [pc, #64]	; (80112e8 <xQueueReceive+0x1c8>)
 80112a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112ac:	601a      	str	r2, [r3, #0]
 80112ae:	f3bf 8f4f 	dsb	sy
 80112b2:	f3bf 8f6f 	isb	sy
 80112b6:	e780      	b.n	80111ba <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80112b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112ba:	f000 fabe 	bl	801183a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80112be:	f000 fee1 	bl	8012084 <xTaskResumeAll>
 80112c2:	e77a      	b.n	80111ba <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80112c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112c6:	f000 fab8 	bl	801183a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80112ca:	f000 fedb 	bl	8012084 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80112ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112d0:	f000 fb05 	bl	80118de <prvIsQueueEmpty>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	f43f af6f 	beq.w	80111ba <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80112dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3730      	adds	r7, #48	; 0x30
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
 80112e6:	bf00      	nop
 80112e8:	e000ed04 	.word	0xe000ed04

080112ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b08e      	sub	sp, #56	; 0x38
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80112f6:	2300      	movs	r3, #0
 80112f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80112fe:	2300      	movs	r3, #0
 8011300:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011304:	2b00      	cmp	r3, #0
 8011306:	d10c      	bne.n	8011322 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8011308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801130c:	b672      	cpsid	i
 801130e:	f383 8811 	msr	BASEPRI, r3
 8011312:	f3bf 8f6f 	isb	sy
 8011316:	f3bf 8f4f 	dsb	sy
 801131a:	b662      	cpsie	i
 801131c:	623b      	str	r3, [r7, #32]
}
 801131e:	bf00      	nop
 8011320:	e7fe      	b.n	8011320 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011326:	2b00      	cmp	r3, #0
 8011328:	d00c      	beq.n	8011344 <xQueueSemaphoreTake+0x58>
	__asm volatile
 801132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132e:	b672      	cpsid	i
 8011330:	f383 8811 	msr	BASEPRI, r3
 8011334:	f3bf 8f6f 	isb	sy
 8011338:	f3bf 8f4f 	dsb	sy
 801133c:	b662      	cpsie	i
 801133e:	61fb      	str	r3, [r7, #28]
}
 8011340:	bf00      	nop
 8011342:	e7fe      	b.n	8011342 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011344:	f001 fa6a 	bl	801281c <xTaskGetSchedulerState>
 8011348:	4603      	mov	r3, r0
 801134a:	2b00      	cmp	r3, #0
 801134c:	d102      	bne.n	8011354 <xQueueSemaphoreTake+0x68>
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d101      	bne.n	8011358 <xQueueSemaphoreTake+0x6c>
 8011354:	2301      	movs	r3, #1
 8011356:	e000      	b.n	801135a <xQueueSemaphoreTake+0x6e>
 8011358:	2300      	movs	r3, #0
 801135a:	2b00      	cmp	r3, #0
 801135c:	d10c      	bne.n	8011378 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 801135e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011362:	b672      	cpsid	i
 8011364:	f383 8811 	msr	BASEPRI, r3
 8011368:	f3bf 8f6f 	isb	sy
 801136c:	f3bf 8f4f 	dsb	sy
 8011370:	b662      	cpsie	i
 8011372:	61bb      	str	r3, [r7, #24]
}
 8011374:	bf00      	nop
 8011376:	e7fe      	b.n	8011376 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011378:	f001 fda0 	bl	8012ebc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011380:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011384:	2b00      	cmp	r3, #0
 8011386:	d024      	beq.n	80113d2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801138a:	1e5a      	subs	r2, r3, #1
 801138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801138e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d104      	bne.n	80113a2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011398:	f001 fc06 	bl	8012ba8 <pvTaskIncrementMutexHeldCount>
 801139c:	4602      	mov	r2, r0
 801139e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80113a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a4:	691b      	ldr	r3, [r3, #16]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00f      	beq.n	80113ca <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80113aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ac:	3310      	adds	r3, #16
 80113ae:	4618      	mov	r0, r3
 80113b0:	f001 f86c 	bl	801248c <xTaskRemoveFromEventList>
 80113b4:	4603      	mov	r3, r0
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d007      	beq.n	80113ca <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80113ba:	4b55      	ldr	r3, [pc, #340]	; (8011510 <xQueueSemaphoreTake+0x224>)
 80113bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113c0:	601a      	str	r2, [r3, #0]
 80113c2:	f3bf 8f4f 	dsb	sy
 80113c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80113ca:	f001 fdab 	bl	8012f24 <vPortExitCritical>
				return pdPASS;
 80113ce:	2301      	movs	r3, #1
 80113d0:	e099      	b.n	8011506 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d113      	bne.n	8011400 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80113d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d00c      	beq.n	80113f8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80113de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e2:	b672      	cpsid	i
 80113e4:	f383 8811 	msr	BASEPRI, r3
 80113e8:	f3bf 8f6f 	isb	sy
 80113ec:	f3bf 8f4f 	dsb	sy
 80113f0:	b662      	cpsie	i
 80113f2:	617b      	str	r3, [r7, #20]
}
 80113f4:	bf00      	nop
 80113f6:	e7fe      	b.n	80113f6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80113f8:	f001 fd94 	bl	8012f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80113fc:	2300      	movs	r3, #0
 80113fe:	e082      	b.n	8011506 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011402:	2b00      	cmp	r3, #0
 8011404:	d106      	bne.n	8011414 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011406:	f107 030c 	add.w	r3, r7, #12
 801140a:	4618      	mov	r0, r3
 801140c:	f001 f8a2 	bl	8012554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011410:	2301      	movs	r3, #1
 8011412:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011414:	f001 fd86 	bl	8012f24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011418:	f000 fe26 	bl	8012068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801141c:	f001 fd4e 	bl	8012ebc <vPortEnterCritical>
 8011420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011426:	b25b      	sxtb	r3, r3
 8011428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801142c:	d103      	bne.n	8011436 <xQueueSemaphoreTake+0x14a>
 801142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011430:	2200      	movs	r2, #0
 8011432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801143c:	b25b      	sxtb	r3, r3
 801143e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011442:	d103      	bne.n	801144c <xQueueSemaphoreTake+0x160>
 8011444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011446:	2200      	movs	r2, #0
 8011448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801144c:	f001 fd6a 	bl	8012f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011450:	463a      	mov	r2, r7
 8011452:	f107 030c 	add.w	r3, r7, #12
 8011456:	4611      	mov	r1, r2
 8011458:	4618      	mov	r0, r3
 801145a:	f001 f891 	bl	8012580 <xTaskCheckForTimeOut>
 801145e:	4603      	mov	r3, r0
 8011460:	2b00      	cmp	r3, #0
 8011462:	d132      	bne.n	80114ca <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011464:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011466:	f000 fa3a 	bl	80118de <prvIsQueueEmpty>
 801146a:	4603      	mov	r3, r0
 801146c:	2b00      	cmp	r3, #0
 801146e:	d026      	beq.n	80114be <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d109      	bne.n	801148c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8011478:	f001 fd20 	bl	8012ebc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801147c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801147e:	689b      	ldr	r3, [r3, #8]
 8011480:	4618      	mov	r0, r3
 8011482:	f001 f9e9 	bl	8012858 <xTaskPriorityInherit>
 8011486:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011488:	f001 fd4c 	bl	8012f24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801148c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148e:	3324      	adds	r3, #36	; 0x24
 8011490:	683a      	ldr	r2, [r7, #0]
 8011492:	4611      	mov	r1, r2
 8011494:	4618      	mov	r0, r3
 8011496:	f000 ffd3 	bl	8012440 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801149a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801149c:	f000 f9cd 	bl	801183a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80114a0:	f000 fdf0 	bl	8012084 <xTaskResumeAll>
 80114a4:	4603      	mov	r3, r0
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	f47f af66 	bne.w	8011378 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80114ac:	4b18      	ldr	r3, [pc, #96]	; (8011510 <xQueueSemaphoreTake+0x224>)
 80114ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114b2:	601a      	str	r2, [r3, #0]
 80114b4:	f3bf 8f4f 	dsb	sy
 80114b8:	f3bf 8f6f 	isb	sy
 80114bc:	e75c      	b.n	8011378 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80114be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114c0:	f000 f9bb 	bl	801183a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80114c4:	f000 fdde 	bl	8012084 <xTaskResumeAll>
 80114c8:	e756      	b.n	8011378 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80114ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114cc:	f000 f9b5 	bl	801183a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80114d0:	f000 fdd8 	bl	8012084 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80114d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114d6:	f000 fa02 	bl	80118de <prvIsQueueEmpty>
 80114da:	4603      	mov	r3, r0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	f43f af4b 	beq.w	8011378 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80114e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d00d      	beq.n	8011504 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80114e8:	f001 fce8 	bl	8012ebc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80114ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114ee:	f000 f8fc 	bl	80116ea <prvGetDisinheritPriorityAfterTimeout>
 80114f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80114f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f6:	689b      	ldr	r3, [r3, #8]
 80114f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114fa:	4618      	mov	r0, r3
 80114fc:	f001 fab6 	bl	8012a6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011500:	f001 fd10 	bl	8012f24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011504:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011506:	4618      	mov	r0, r3
 8011508:	3738      	adds	r7, #56	; 0x38
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
 801150e:	bf00      	nop
 8011510:	e000ed04 	.word	0xe000ed04

08011514 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b08e      	sub	sp, #56	; 0x38
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011526:	2b00      	cmp	r3, #0
 8011528:	d10c      	bne.n	8011544 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801152a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801152e:	b672      	cpsid	i
 8011530:	f383 8811 	msr	BASEPRI, r3
 8011534:	f3bf 8f6f 	isb	sy
 8011538:	f3bf 8f4f 	dsb	sy
 801153c:	b662      	cpsie	i
 801153e:	623b      	str	r3, [r7, #32]
}
 8011540:	bf00      	nop
 8011542:	e7fe      	b.n	8011542 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d103      	bne.n	8011552 <xQueueReceiveFromISR+0x3e>
 801154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801154e:	2b00      	cmp	r3, #0
 8011550:	d101      	bne.n	8011556 <xQueueReceiveFromISR+0x42>
 8011552:	2301      	movs	r3, #1
 8011554:	e000      	b.n	8011558 <xQueueReceiveFromISR+0x44>
 8011556:	2300      	movs	r3, #0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d10c      	bne.n	8011576 <xQueueReceiveFromISR+0x62>
	__asm volatile
 801155c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011560:	b672      	cpsid	i
 8011562:	f383 8811 	msr	BASEPRI, r3
 8011566:	f3bf 8f6f 	isb	sy
 801156a:	f3bf 8f4f 	dsb	sy
 801156e:	b662      	cpsie	i
 8011570:	61fb      	str	r3, [r7, #28]
}
 8011572:	bf00      	nop
 8011574:	e7fe      	b.n	8011574 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011576:	f001 fd89 	bl	801308c <vPortValidateInterruptPriority>
	__asm volatile
 801157a:	f3ef 8211 	mrs	r2, BASEPRI
 801157e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011582:	b672      	cpsid	i
 8011584:	f383 8811 	msr	BASEPRI, r3
 8011588:	f3bf 8f6f 	isb	sy
 801158c:	f3bf 8f4f 	dsb	sy
 8011590:	b662      	cpsie	i
 8011592:	61ba      	str	r2, [r7, #24]
 8011594:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011596:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011598:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801159a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801159e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80115a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d02f      	beq.n	8011606 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80115a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80115b0:	68b9      	ldr	r1, [r7, #8]
 80115b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115b4:	f000 f91b 	bl	80117ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80115b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ba:	1e5a      	subs	r2, r3, #1
 80115bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80115c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80115c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115c8:	d112      	bne.n	80115f0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80115ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115cc:	691b      	ldr	r3, [r3, #16]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d016      	beq.n	8011600 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80115d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d4:	3310      	adds	r3, #16
 80115d6:	4618      	mov	r0, r3
 80115d8:	f000 ff58 	bl	801248c <xTaskRemoveFromEventList>
 80115dc:	4603      	mov	r3, r0
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d00e      	beq.n	8011600 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d00b      	beq.n	8011600 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2201      	movs	r2, #1
 80115ec:	601a      	str	r2, [r3, #0]
 80115ee:	e007      	b.n	8011600 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80115f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115f4:	3301      	adds	r3, #1
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	b25a      	sxtb	r2, r3
 80115fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011600:	2301      	movs	r3, #1
 8011602:	637b      	str	r3, [r7, #52]	; 0x34
 8011604:	e001      	b.n	801160a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8011606:	2300      	movs	r3, #0
 8011608:	637b      	str	r3, [r7, #52]	; 0x34
 801160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801160c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	f383 8811 	msr	BASEPRI, r3
}
 8011614:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011618:	4618      	mov	r0, r3
 801161a:	3738      	adds	r7, #56	; 0x38
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b084      	sub	sp, #16
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d10c      	bne.n	8011648 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 801162e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011632:	b672      	cpsid	i
 8011634:	f383 8811 	msr	BASEPRI, r3
 8011638:	f3bf 8f6f 	isb	sy
 801163c:	f3bf 8f4f 	dsb	sy
 8011640:	b662      	cpsie	i
 8011642:	60bb      	str	r3, [r7, #8]
}
 8011644:	bf00      	nop
 8011646:	e7fe      	b.n	8011646 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8011648:	f001 fc38 	bl	8012ebc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011650:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8011652:	f001 fc67 	bl	8012f24 <vPortExitCritical>

	return uxReturn;
 8011656:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8011658:	4618      	mov	r0, r3
 801165a:	3710      	adds	r7, #16
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}

08011660 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8011660:	b480      	push	{r7}
 8011662:	b087      	sub	sp, #28
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d10c      	bne.n	801168c <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8011672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011676:	b672      	cpsid	i
 8011678:	f383 8811 	msr	BASEPRI, r3
 801167c:	f3bf 8f6f 	isb	sy
 8011680:	f3bf 8f4f 	dsb	sy
 8011684:	b662      	cpsie	i
 8011686:	60fb      	str	r3, [r7, #12]
}
 8011688:	bf00      	nop
 801168a:	e7fe      	b.n	801168a <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011690:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8011692:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8011694:	4618      	mov	r0, r3
 8011696:	371c      	adds	r7, #28
 8011698:	46bd      	mov	sp, r7
 801169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169e:	4770      	bx	lr

080116a0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b084      	sub	sp, #16
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d10c      	bne.n	80116cc <vQueueDelete+0x2c>
	__asm volatile
 80116b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b6:	b672      	cpsid	i
 80116b8:	f383 8811 	msr	BASEPRI, r3
 80116bc:	f3bf 8f6f 	isb	sy
 80116c0:	f3bf 8f4f 	dsb	sy
 80116c4:	b662      	cpsie	i
 80116c6:	60bb      	str	r3, [r7, #8]
}
 80116c8:	bf00      	nop
 80116ca:	e7fe      	b.n	80116ca <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80116cc:	68f8      	ldr	r0, [r7, #12]
 80116ce:	f000 f935 	bl	801193c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d102      	bne.n	80116e2 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80116dc:	68f8      	ldr	r0, [r7, #12]
 80116de:	f7ef fee4 	bl	80014aa <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80116e2:	bf00      	nop
 80116e4:	3710      	adds	r7, #16
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}

080116ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80116ea:	b480      	push	{r7}
 80116ec:	b085      	sub	sp, #20
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d006      	beq.n	8011708 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f1c3 0307 	rsb	r3, r3, #7
 8011704:	60fb      	str	r3, [r7, #12]
 8011706:	e001      	b.n	801170c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011708:	2300      	movs	r3, #0
 801170a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801170c:	68fb      	ldr	r3, [r7, #12]
	}
 801170e:	4618      	mov	r0, r3
 8011710:	3714      	adds	r7, #20
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr

0801171a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801171a:	b580      	push	{r7, lr}
 801171c:	b086      	sub	sp, #24
 801171e:	af00      	add	r7, sp, #0
 8011720:	60f8      	str	r0, [r7, #12]
 8011722:	60b9      	str	r1, [r7, #8]
 8011724:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011726:	2300      	movs	r3, #0
 8011728:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801172e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011734:	2b00      	cmp	r3, #0
 8011736:	d10d      	bne.n	8011754 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d14d      	bne.n	80117dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	689b      	ldr	r3, [r3, #8]
 8011744:	4618      	mov	r0, r3
 8011746:	f001 f907 	bl	8012958 <xTaskPriorityDisinherit>
 801174a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2200      	movs	r2, #0
 8011750:	609a      	str	r2, [r3, #8]
 8011752:	e043      	b.n	80117dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d119      	bne.n	801178e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	6858      	ldr	r0, [r3, #4]
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011762:	461a      	mov	r2, r3
 8011764:	68b9      	ldr	r1, [r7, #8]
 8011766:	f010 ff13 	bl	8022590 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	685a      	ldr	r2, [r3, #4]
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011772:	441a      	add	r2, r3
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	685a      	ldr	r2, [r3, #4]
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	689b      	ldr	r3, [r3, #8]
 8011780:	429a      	cmp	r2, r3
 8011782:	d32b      	bcc.n	80117dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	681a      	ldr	r2, [r3, #0]
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	605a      	str	r2, [r3, #4]
 801178c:	e026      	b.n	80117dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	68d8      	ldr	r0, [r3, #12]
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011796:	461a      	mov	r2, r3
 8011798:	68b9      	ldr	r1, [r7, #8]
 801179a:	f010 fef9 	bl	8022590 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	68da      	ldr	r2, [r3, #12]
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117a6:	425b      	negs	r3, r3
 80117a8:	441a      	add	r2, r3
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	68da      	ldr	r2, [r3, #12]
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d207      	bcs.n	80117ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	689a      	ldr	r2, [r3, #8]
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117c2:	425b      	negs	r3, r3
 80117c4:	441a      	add	r2, r3
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2b02      	cmp	r3, #2
 80117ce:	d105      	bne.n	80117dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d002      	beq.n	80117dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	3b01      	subs	r3, #1
 80117da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	1c5a      	adds	r2, r3, #1
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80117e4:	697b      	ldr	r3, [r7, #20]
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3718      	adds	r7, #24
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}

080117ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80117ee:	b580      	push	{r7, lr}
 80117f0:	b082      	sub	sp, #8
 80117f2:	af00      	add	r7, sp, #0
 80117f4:	6078      	str	r0, [r7, #4]
 80117f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d018      	beq.n	8011832 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	68da      	ldr	r2, [r3, #12]
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011808:	441a      	add	r2, r3
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	68da      	ldr	r2, [r3, #12]
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	689b      	ldr	r3, [r3, #8]
 8011816:	429a      	cmp	r2, r3
 8011818:	d303      	bcc.n	8011822 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681a      	ldr	r2, [r3, #0]
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	68d9      	ldr	r1, [r3, #12]
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801182a:	461a      	mov	r2, r3
 801182c:	6838      	ldr	r0, [r7, #0]
 801182e:	f010 feaf 	bl	8022590 <memcpy>
	}
}
 8011832:	bf00      	nop
 8011834:	3708      	adds	r7, #8
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}

0801183a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801183a:	b580      	push	{r7, lr}
 801183c:	b084      	sub	sp, #16
 801183e:	af00      	add	r7, sp, #0
 8011840:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011842:	f001 fb3b 	bl	8012ebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801184c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801184e:	e011      	b.n	8011874 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011854:	2b00      	cmp	r3, #0
 8011856:	d012      	beq.n	801187e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	3324      	adds	r3, #36	; 0x24
 801185c:	4618      	mov	r0, r3
 801185e:	f000 fe15 	bl	801248c <xTaskRemoveFromEventList>
 8011862:	4603      	mov	r3, r0
 8011864:	2b00      	cmp	r3, #0
 8011866:	d001      	beq.n	801186c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011868:	f000 fef0 	bl	801264c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801186c:	7bfb      	ldrb	r3, [r7, #15]
 801186e:	3b01      	subs	r3, #1
 8011870:	b2db      	uxtb	r3, r3
 8011872:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011878:	2b00      	cmp	r3, #0
 801187a:	dce9      	bgt.n	8011850 <prvUnlockQueue+0x16>
 801187c:	e000      	b.n	8011880 <prvUnlockQueue+0x46>
					break;
 801187e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	22ff      	movs	r2, #255	; 0xff
 8011884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011888:	f001 fb4c 	bl	8012f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801188c:	f001 fb16 	bl	8012ebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011896:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011898:	e011      	b.n	80118be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	691b      	ldr	r3, [r3, #16]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d012      	beq.n	80118c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	3310      	adds	r3, #16
 80118a6:	4618      	mov	r0, r3
 80118a8:	f000 fdf0 	bl	801248c <xTaskRemoveFromEventList>
 80118ac:	4603      	mov	r3, r0
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d001      	beq.n	80118b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80118b2:	f000 fecb 	bl	801264c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80118b6:	7bbb      	ldrb	r3, [r7, #14]
 80118b8:	3b01      	subs	r3, #1
 80118ba:	b2db      	uxtb	r3, r3
 80118bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80118be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	dce9      	bgt.n	801189a <prvUnlockQueue+0x60>
 80118c6:	e000      	b.n	80118ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80118c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	22ff      	movs	r2, #255	; 0xff
 80118ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80118d2:	f001 fb27 	bl	8012f24 <vPortExitCritical>
}
 80118d6:	bf00      	nop
 80118d8:	3710      	adds	r7, #16
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}

080118de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80118de:	b580      	push	{r7, lr}
 80118e0:	b084      	sub	sp, #16
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80118e6:	f001 fae9 	bl	8012ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d102      	bne.n	80118f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80118f2:	2301      	movs	r3, #1
 80118f4:	60fb      	str	r3, [r7, #12]
 80118f6:	e001      	b.n	80118fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80118f8:	2300      	movs	r3, #0
 80118fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80118fc:	f001 fb12 	bl	8012f24 <vPortExitCritical>

	return xReturn;
 8011900:	68fb      	ldr	r3, [r7, #12]
}
 8011902:	4618      	mov	r0, r3
 8011904:	3710      	adds	r7, #16
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}

0801190a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801190a:	b580      	push	{r7, lr}
 801190c:	b084      	sub	sp, #16
 801190e:	af00      	add	r7, sp, #0
 8011910:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011912:	f001 fad3 	bl	8012ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801191e:	429a      	cmp	r2, r3
 8011920:	d102      	bne.n	8011928 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011922:	2301      	movs	r3, #1
 8011924:	60fb      	str	r3, [r7, #12]
 8011926:	e001      	b.n	801192c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011928:	2300      	movs	r3, #0
 801192a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801192c:	f001 fafa 	bl	8012f24 <vPortExitCritical>

	return xReturn;
 8011930:	68fb      	ldr	r3, [r7, #12]
}
 8011932:	4618      	mov	r0, r3
 8011934:	3710      	adds	r7, #16
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
	...

0801193c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801193c:	b480      	push	{r7}
 801193e:	b085      	sub	sp, #20
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011944:	2300      	movs	r3, #0
 8011946:	60fb      	str	r3, [r7, #12]
 8011948:	e016      	b.n	8011978 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801194a:	4a10      	ldr	r2, [pc, #64]	; (801198c <vQueueUnregisterQueue+0x50>)
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	00db      	lsls	r3, r3, #3
 8011950:	4413      	add	r3, r2
 8011952:	685b      	ldr	r3, [r3, #4]
 8011954:	687a      	ldr	r2, [r7, #4]
 8011956:	429a      	cmp	r2, r3
 8011958:	d10b      	bne.n	8011972 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801195a:	4a0c      	ldr	r2, [pc, #48]	; (801198c <vQueueUnregisterQueue+0x50>)
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2100      	movs	r1, #0
 8011960:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011964:	4a09      	ldr	r2, [pc, #36]	; (801198c <vQueueUnregisterQueue+0x50>)
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	00db      	lsls	r3, r3, #3
 801196a:	4413      	add	r3, r2
 801196c:	2200      	movs	r2, #0
 801196e:	605a      	str	r2, [r3, #4]
				break;
 8011970:	e006      	b.n	8011980 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	3301      	adds	r3, #1
 8011976:	60fb      	str	r3, [r7, #12]
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	2b07      	cmp	r3, #7
 801197c:	d9e5      	bls.n	801194a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801197e:	bf00      	nop
 8011980:	bf00      	nop
 8011982:	3714      	adds	r7, #20
 8011984:	46bd      	mov	sp, r7
 8011986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198a:	4770      	bx	lr
 801198c:	2000651c 	.word	0x2000651c

08011990 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011990:	b580      	push	{r7, lr}
 8011992:	b08e      	sub	sp, #56	; 0x38
 8011994:	af04      	add	r7, sp, #16
 8011996:	60f8      	str	r0, [r7, #12]
 8011998:	60b9      	str	r1, [r7, #8]
 801199a:	607a      	str	r2, [r7, #4]
 801199c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801199e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d10c      	bne.n	80119be <xTaskCreateStatic+0x2e>
	__asm volatile
 80119a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a8:	b672      	cpsid	i
 80119aa:	f383 8811 	msr	BASEPRI, r3
 80119ae:	f3bf 8f6f 	isb	sy
 80119b2:	f3bf 8f4f 	dsb	sy
 80119b6:	b662      	cpsie	i
 80119b8:	623b      	str	r3, [r7, #32]
}
 80119ba:	bf00      	nop
 80119bc:	e7fe      	b.n	80119bc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80119be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d10c      	bne.n	80119de <xTaskCreateStatic+0x4e>
	__asm volatile
 80119c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c8:	b672      	cpsid	i
 80119ca:	f383 8811 	msr	BASEPRI, r3
 80119ce:	f3bf 8f6f 	isb	sy
 80119d2:	f3bf 8f4f 	dsb	sy
 80119d6:	b662      	cpsie	i
 80119d8:	61fb      	str	r3, [r7, #28]
}
 80119da:	bf00      	nop
 80119dc:	e7fe      	b.n	80119dc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80119de:	23b4      	movs	r3, #180	; 0xb4
 80119e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	2bb4      	cmp	r3, #180	; 0xb4
 80119e6:	d00c      	beq.n	8011a02 <xTaskCreateStatic+0x72>
	__asm volatile
 80119e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ec:	b672      	cpsid	i
 80119ee:	f383 8811 	msr	BASEPRI, r3
 80119f2:	f3bf 8f6f 	isb	sy
 80119f6:	f3bf 8f4f 	dsb	sy
 80119fa:	b662      	cpsie	i
 80119fc:	61bb      	str	r3, [r7, #24]
}
 80119fe:	bf00      	nop
 8011a00:	e7fe      	b.n	8011a00 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011a02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d01e      	beq.n	8011a48 <xTaskCreateStatic+0xb8>
 8011a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d01b      	beq.n	8011a48 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a1c:	2202      	movs	r2, #2
 8011a1e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011a22:	2300      	movs	r3, #0
 8011a24:	9303      	str	r3, [sp, #12]
 8011a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a28:	9302      	str	r3, [sp, #8]
 8011a2a:	f107 0314 	add.w	r3, r7, #20
 8011a2e:	9301      	str	r3, [sp, #4]
 8011a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a32:	9300      	str	r3, [sp, #0]
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	68b9      	ldr	r1, [r7, #8]
 8011a3a:	68f8      	ldr	r0, [r7, #12]
 8011a3c:	f000 f850 	bl	8011ae0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a42:	f000 f8ed 	bl	8011c20 <prvAddNewTaskToReadyList>
 8011a46:	e001      	b.n	8011a4c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011a4c:	697b      	ldr	r3, [r7, #20]
	}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3728      	adds	r7, #40	; 0x28
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}

08011a56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011a56:	b580      	push	{r7, lr}
 8011a58:	b08c      	sub	sp, #48	; 0x30
 8011a5a:	af04      	add	r7, sp, #16
 8011a5c:	60f8      	str	r0, [r7, #12]
 8011a5e:	60b9      	str	r1, [r7, #8]
 8011a60:	603b      	str	r3, [r7, #0]
 8011a62:	4613      	mov	r3, r2
 8011a64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011a66:	88fb      	ldrh	r3, [r7, #6]
 8011a68:	009b      	lsls	r3, r3, #2
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7ef fd0f 	bl	800148e <pvPortMalloc>
 8011a70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d00e      	beq.n	8011a96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011a78:	20b4      	movs	r0, #180	; 0xb4
 8011a7a:	f7ef fd08 	bl	800148e <pvPortMalloc>
 8011a7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011a80:	69fb      	ldr	r3, [r7, #28]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d003      	beq.n	8011a8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011a86:	69fb      	ldr	r3, [r7, #28]
 8011a88:	697a      	ldr	r2, [r7, #20]
 8011a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8011a8c:	e005      	b.n	8011a9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011a8e:	6978      	ldr	r0, [r7, #20]
 8011a90:	f7ef fd0b 	bl	80014aa <vPortFree>
 8011a94:	e001      	b.n	8011a9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011a96:	2300      	movs	r3, #0
 8011a98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d017      	beq.n	8011ad0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011aa8:	88fa      	ldrh	r2, [r7, #6]
 8011aaa:	2300      	movs	r3, #0
 8011aac:	9303      	str	r3, [sp, #12]
 8011aae:	69fb      	ldr	r3, [r7, #28]
 8011ab0:	9302      	str	r3, [sp, #8]
 8011ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab4:	9301      	str	r3, [sp, #4]
 8011ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab8:	9300      	str	r3, [sp, #0]
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	68b9      	ldr	r1, [r7, #8]
 8011abe:	68f8      	ldr	r0, [r7, #12]
 8011ac0:	f000 f80e 	bl	8011ae0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011ac4:	69f8      	ldr	r0, [r7, #28]
 8011ac6:	f000 f8ab 	bl	8011c20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011aca:	2301      	movs	r3, #1
 8011acc:	61bb      	str	r3, [r7, #24]
 8011ace:	e002      	b.n	8011ad6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ad4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011ad6:	69bb      	ldr	r3, [r7, #24]
	}
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3720      	adds	r7, #32
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd80      	pop	{r7, pc}

08011ae0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b088      	sub	sp, #32
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	60f8      	str	r0, [r7, #12]
 8011ae8:	60b9      	str	r1, [r7, #8]
 8011aea:	607a      	str	r2, [r7, #4]
 8011aec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011af2:	6879      	ldr	r1, [r7, #4]
 8011af4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011af8:	440b      	add	r3, r1
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	4413      	add	r3, r2
 8011afe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	f023 0307 	bic.w	r3, r3, #7
 8011b06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011b08:	69bb      	ldr	r3, [r7, #24]
 8011b0a:	f003 0307 	and.w	r3, r3, #7
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d00c      	beq.n	8011b2c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8011b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b16:	b672      	cpsid	i
 8011b18:	f383 8811 	msr	BASEPRI, r3
 8011b1c:	f3bf 8f6f 	isb	sy
 8011b20:	f3bf 8f4f 	dsb	sy
 8011b24:	b662      	cpsie	i
 8011b26:	617b      	str	r3, [r7, #20]
}
 8011b28:	bf00      	nop
 8011b2a:	e7fe      	b.n	8011b2a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d01f      	beq.n	8011b72 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011b32:	2300      	movs	r3, #0
 8011b34:	61fb      	str	r3, [r7, #28]
 8011b36:	e012      	b.n	8011b5e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011b38:	68ba      	ldr	r2, [r7, #8]
 8011b3a:	69fb      	ldr	r3, [r7, #28]
 8011b3c:	4413      	add	r3, r2
 8011b3e:	7819      	ldrb	r1, [r3, #0]
 8011b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b42:	69fb      	ldr	r3, [r7, #28]
 8011b44:	4413      	add	r3, r2
 8011b46:	3334      	adds	r3, #52	; 0x34
 8011b48:	460a      	mov	r2, r1
 8011b4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011b4c:	68ba      	ldr	r2, [r7, #8]
 8011b4e:	69fb      	ldr	r3, [r7, #28]
 8011b50:	4413      	add	r3, r2
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d006      	beq.n	8011b66 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011b58:	69fb      	ldr	r3, [r7, #28]
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	61fb      	str	r3, [r7, #28]
 8011b5e:	69fb      	ldr	r3, [r7, #28]
 8011b60:	2b0f      	cmp	r3, #15
 8011b62:	d9e9      	bls.n	8011b38 <prvInitialiseNewTask+0x58>
 8011b64:	e000      	b.n	8011b68 <prvInitialiseNewTask+0x88>
			{
				break;
 8011b66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011b70:	e003      	b.n	8011b7a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b74:	2200      	movs	r2, #0
 8011b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b7c:	2b06      	cmp	r3, #6
 8011b7e:	d901      	bls.n	8011b84 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011b80:	2306      	movs	r3, #6
 8011b82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b8e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b92:	2200      	movs	r2, #0
 8011b94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b98:	3304      	adds	r3, #4
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f7fe fe55 	bl	801084a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba2:	3318      	adds	r3, #24
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f7fe fe50 	bl	801084a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb2:	f1c3 0207 	rsb	r2, r3, #7
 8011bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bca:	2200      	movs	r2, #0
 8011bcc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd2:	334c      	adds	r3, #76	; 0x4c
 8011bd4:	2260      	movs	r2, #96	; 0x60
 8011bd6:	2100      	movs	r1, #0
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f010 fd01 	bl	80225e0 <memset>
 8011bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be0:	4a0c      	ldr	r2, [pc, #48]	; (8011c14 <prvInitialiseNewTask+0x134>)
 8011be2:	651a      	str	r2, [r3, #80]	; 0x50
 8011be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be6:	4a0c      	ldr	r2, [pc, #48]	; (8011c18 <prvInitialiseNewTask+0x138>)
 8011be8:	655a      	str	r2, [r3, #84]	; 0x54
 8011bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bec:	4a0b      	ldr	r2, [pc, #44]	; (8011c1c <prvInitialiseNewTask+0x13c>)
 8011bee:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011bf0:	683a      	ldr	r2, [r7, #0]
 8011bf2:	68f9      	ldr	r1, [r7, #12]
 8011bf4:	69b8      	ldr	r0, [r7, #24]
 8011bf6:	f001 f851 	bl	8012c9c <pxPortInitialiseStack>
 8011bfa:	4602      	mov	r2, r0
 8011bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bfe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d002      	beq.n	8011c0c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011c0c:	bf00      	nop
 8011c0e:	3720      	adds	r7, #32
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}
 8011c14:	08027478 	.word	0x08027478
 8011c18:	08027498 	.word	0x08027498
 8011c1c:	08027458 	.word	0x08027458

08011c20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011c28:	f001 f948 	bl	8012ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011c2c:	4b2a      	ldr	r3, [pc, #168]	; (8011cd8 <prvAddNewTaskToReadyList+0xb8>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	3301      	adds	r3, #1
 8011c32:	4a29      	ldr	r2, [pc, #164]	; (8011cd8 <prvAddNewTaskToReadyList+0xb8>)
 8011c34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011c36:	4b29      	ldr	r3, [pc, #164]	; (8011cdc <prvAddNewTaskToReadyList+0xbc>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d109      	bne.n	8011c52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011c3e:	4a27      	ldr	r2, [pc, #156]	; (8011cdc <prvAddNewTaskToReadyList+0xbc>)
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011c44:	4b24      	ldr	r3, [pc, #144]	; (8011cd8 <prvAddNewTaskToReadyList+0xb8>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	d110      	bne.n	8011c6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011c4c:	f000 fd22 	bl	8012694 <prvInitialiseTaskLists>
 8011c50:	e00d      	b.n	8011c6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011c52:	4b23      	ldr	r3, [pc, #140]	; (8011ce0 <prvAddNewTaskToReadyList+0xc0>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d109      	bne.n	8011c6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011c5a:	4b20      	ldr	r3, [pc, #128]	; (8011cdc <prvAddNewTaskToReadyList+0xbc>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d802      	bhi.n	8011c6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011c68:	4a1c      	ldr	r2, [pc, #112]	; (8011cdc <prvAddNewTaskToReadyList+0xbc>)
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011c6e:	4b1d      	ldr	r3, [pc, #116]	; (8011ce4 <prvAddNewTaskToReadyList+0xc4>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	3301      	adds	r3, #1
 8011c74:	4a1b      	ldr	r2, [pc, #108]	; (8011ce4 <prvAddNewTaskToReadyList+0xc4>)
 8011c76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c7c:	2201      	movs	r2, #1
 8011c7e:	409a      	lsls	r2, r3
 8011c80:	4b19      	ldr	r3, [pc, #100]	; (8011ce8 <prvAddNewTaskToReadyList+0xc8>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	4313      	orrs	r3, r2
 8011c86:	4a18      	ldr	r2, [pc, #96]	; (8011ce8 <prvAddNewTaskToReadyList+0xc8>)
 8011c88:	6013      	str	r3, [r2, #0]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c8e:	4613      	mov	r3, r2
 8011c90:	009b      	lsls	r3, r3, #2
 8011c92:	4413      	add	r3, r2
 8011c94:	009b      	lsls	r3, r3, #2
 8011c96:	4a15      	ldr	r2, [pc, #84]	; (8011cec <prvAddNewTaskToReadyList+0xcc>)
 8011c98:	441a      	add	r2, r3
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	3304      	adds	r3, #4
 8011c9e:	4619      	mov	r1, r3
 8011ca0:	4610      	mov	r0, r2
 8011ca2:	f7fe fddf 	bl	8010864 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011ca6:	f001 f93d 	bl	8012f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011caa:	4b0d      	ldr	r3, [pc, #52]	; (8011ce0 <prvAddNewTaskToReadyList+0xc0>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d00e      	beq.n	8011cd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011cb2:	4b0a      	ldr	r3, [pc, #40]	; (8011cdc <prvAddNewTaskToReadyList+0xbc>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d207      	bcs.n	8011cd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011cc0:	4b0b      	ldr	r3, [pc, #44]	; (8011cf0 <prvAddNewTaskToReadyList+0xd0>)
 8011cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cc6:	601a      	str	r2, [r3, #0]
 8011cc8:	f3bf 8f4f 	dsb	sy
 8011ccc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011cd0:	bf00      	nop
 8011cd2:	3708      	adds	r7, #8
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}
 8011cd8:	2000665c 	.word	0x2000665c
 8011cdc:	2000655c 	.word	0x2000655c
 8011ce0:	20006668 	.word	0x20006668
 8011ce4:	20006678 	.word	0x20006678
 8011ce8:	20006664 	.word	0x20006664
 8011cec:	20006560 	.word	0x20006560
 8011cf0:	e000ed04 	.word	0xe000ed04

08011cf4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b084      	sub	sp, #16
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011cfc:	f001 f8de 	bl	8012ebc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d102      	bne.n	8011d0c <vTaskDelete+0x18>
 8011d06:	4b3a      	ldr	r3, [pc, #232]	; (8011df0 <vTaskDelete+0xfc>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	e000      	b.n	8011d0e <vTaskDelete+0x1a>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	3304      	adds	r3, #4
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7fe fe02 	bl	801091e <uxListRemove>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d115      	bne.n	8011d4c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d24:	4933      	ldr	r1, [pc, #204]	; (8011df4 <vTaskDelete+0x100>)
 8011d26:	4613      	mov	r3, r2
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	4413      	add	r3, r2
 8011d2c:	009b      	lsls	r3, r3, #2
 8011d2e:	440b      	add	r3, r1
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d10a      	bne.n	8011d4c <vTaskDelete+0x58>
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d3a:	2201      	movs	r2, #1
 8011d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8011d40:	43da      	mvns	r2, r3
 8011d42:	4b2d      	ldr	r3, [pc, #180]	; (8011df8 <vTaskDelete+0x104>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	4013      	ands	r3, r2
 8011d48:	4a2b      	ldr	r2, [pc, #172]	; (8011df8 <vTaskDelete+0x104>)
 8011d4a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d004      	beq.n	8011d5e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	3318      	adds	r3, #24
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7fe fde0 	bl	801091e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8011d5e:	4b27      	ldr	r3, [pc, #156]	; (8011dfc <vTaskDelete+0x108>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	3301      	adds	r3, #1
 8011d64:	4a25      	ldr	r2, [pc, #148]	; (8011dfc <vTaskDelete+0x108>)
 8011d66:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8011d68:	4b21      	ldr	r3, [pc, #132]	; (8011df0 <vTaskDelete+0xfc>)
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	68fa      	ldr	r2, [r7, #12]
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d10b      	bne.n	8011d8a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	3304      	adds	r3, #4
 8011d76:	4619      	mov	r1, r3
 8011d78:	4821      	ldr	r0, [pc, #132]	; (8011e00 <vTaskDelete+0x10c>)
 8011d7a:	f7fe fd73 	bl	8010864 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8011d7e:	4b21      	ldr	r3, [pc, #132]	; (8011e04 <vTaskDelete+0x110>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	3301      	adds	r3, #1
 8011d84:	4a1f      	ldr	r2, [pc, #124]	; (8011e04 <vTaskDelete+0x110>)
 8011d86:	6013      	str	r3, [r2, #0]
 8011d88:	e009      	b.n	8011d9e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8011d8a:	4b1f      	ldr	r3, [pc, #124]	; (8011e08 <vTaskDelete+0x114>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	3b01      	subs	r3, #1
 8011d90:	4a1d      	ldr	r2, [pc, #116]	; (8011e08 <vTaskDelete+0x114>)
 8011d92:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8011d94:	68f8      	ldr	r0, [r7, #12]
 8011d96:	f000 fceb 	bl	8012770 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8011d9a:	f000 fd1f 	bl	80127dc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8011d9e:	f001 f8c1 	bl	8012f24 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8011da2:	4b1a      	ldr	r3, [pc, #104]	; (8011e0c <vTaskDelete+0x118>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d01d      	beq.n	8011de6 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 8011daa:	4b11      	ldr	r3, [pc, #68]	; (8011df0 <vTaskDelete+0xfc>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	68fa      	ldr	r2, [r7, #12]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d118      	bne.n	8011de6 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8011db4:	4b16      	ldr	r3, [pc, #88]	; (8011e10 <vTaskDelete+0x11c>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d00c      	beq.n	8011dd6 <vTaskDelete+0xe2>
	__asm volatile
 8011dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc0:	b672      	cpsid	i
 8011dc2:	f383 8811 	msr	BASEPRI, r3
 8011dc6:	f3bf 8f6f 	isb	sy
 8011dca:	f3bf 8f4f 	dsb	sy
 8011dce:	b662      	cpsie	i
 8011dd0:	60bb      	str	r3, [r7, #8]
}
 8011dd2:	bf00      	nop
 8011dd4:	e7fe      	b.n	8011dd4 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8011dd6:	4b0f      	ldr	r3, [pc, #60]	; (8011e14 <vTaskDelete+0x120>)
 8011dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ddc:	601a      	str	r2, [r3, #0]
 8011dde:	f3bf 8f4f 	dsb	sy
 8011de2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011de6:	bf00      	nop
 8011de8:	3710      	adds	r7, #16
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
 8011dee:	bf00      	nop
 8011df0:	2000655c 	.word	0x2000655c
 8011df4:	20006560 	.word	0x20006560
 8011df8:	20006664 	.word	0x20006664
 8011dfc:	20006678 	.word	0x20006678
 8011e00:	20006630 	.word	0x20006630
 8011e04:	20006644 	.word	0x20006644
 8011e08:	2000665c 	.word	0x2000665c
 8011e0c:	20006668 	.word	0x20006668
 8011e10:	20006684 	.word	0x20006684
 8011e14:	e000ed04 	.word	0xe000ed04

08011e18 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b08a      	sub	sp, #40	; 0x28
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8011e22:	2300      	movs	r3, #0
 8011e24:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d10c      	bne.n	8011e46 <vTaskDelayUntil+0x2e>
	__asm volatile
 8011e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e30:	b672      	cpsid	i
 8011e32:	f383 8811 	msr	BASEPRI, r3
 8011e36:	f3bf 8f6f 	isb	sy
 8011e3a:	f3bf 8f4f 	dsb	sy
 8011e3e:	b662      	cpsie	i
 8011e40:	617b      	str	r3, [r7, #20]
}
 8011e42:	bf00      	nop
 8011e44:	e7fe      	b.n	8011e44 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d10c      	bne.n	8011e66 <vTaskDelayUntil+0x4e>
	__asm volatile
 8011e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e50:	b672      	cpsid	i
 8011e52:	f383 8811 	msr	BASEPRI, r3
 8011e56:	f3bf 8f6f 	isb	sy
 8011e5a:	f3bf 8f4f 	dsb	sy
 8011e5e:	b662      	cpsie	i
 8011e60:	613b      	str	r3, [r7, #16]
}
 8011e62:	bf00      	nop
 8011e64:	e7fe      	b.n	8011e64 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 8011e66:	4b2b      	ldr	r3, [pc, #172]	; (8011f14 <vTaskDelayUntil+0xfc>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d00c      	beq.n	8011e88 <vTaskDelayUntil+0x70>
	__asm volatile
 8011e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e72:	b672      	cpsid	i
 8011e74:	f383 8811 	msr	BASEPRI, r3
 8011e78:	f3bf 8f6f 	isb	sy
 8011e7c:	f3bf 8f4f 	dsb	sy
 8011e80:	b662      	cpsie	i
 8011e82:	60fb      	str	r3, [r7, #12]
}
 8011e84:	bf00      	nop
 8011e86:	e7fe      	b.n	8011e86 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 8011e88:	f000 f8ee 	bl	8012068 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8011e8c:	4b22      	ldr	r3, [pc, #136]	; (8011f18 <vTaskDelayUntil+0x100>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	683a      	ldr	r2, [r7, #0]
 8011e98:	4413      	add	r3, r2
 8011e9a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	6a3a      	ldr	r2, [r7, #32]
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	d20b      	bcs.n	8011ebe <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	69fa      	ldr	r2, [r7, #28]
 8011eac:	429a      	cmp	r2, r3
 8011eae:	d211      	bcs.n	8011ed4 <vTaskDelayUntil+0xbc>
 8011eb0:	69fa      	ldr	r2, [r7, #28]
 8011eb2:	6a3b      	ldr	r3, [r7, #32]
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d90d      	bls.n	8011ed4 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8011eb8:	2301      	movs	r3, #1
 8011eba:	627b      	str	r3, [r7, #36]	; 0x24
 8011ebc:	e00a      	b.n	8011ed4 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	69fa      	ldr	r2, [r7, #28]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d303      	bcc.n	8011ed0 <vTaskDelayUntil+0xb8>
 8011ec8:	69fa      	ldr	r2, [r7, #28]
 8011eca:	6a3b      	ldr	r3, [r7, #32]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d901      	bls.n	8011ed4 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	69fa      	ldr	r2, [r7, #28]
 8011ed8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8011eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d006      	beq.n	8011eee <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8011ee0:	69fa      	ldr	r2, [r7, #28]
 8011ee2:	6a3b      	ldr	r3, [r7, #32]
 8011ee4:	1ad3      	subs	r3, r2, r3
 8011ee6:	2100      	movs	r1, #0
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f000 fe71 	bl	8012bd0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8011eee:	f000 f8c9 	bl	8012084 <xTaskResumeAll>
 8011ef2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011ef4:	69bb      	ldr	r3, [r7, #24]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d107      	bne.n	8011f0a <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 8011efa:	4b08      	ldr	r3, [pc, #32]	; (8011f1c <vTaskDelayUntil+0x104>)
 8011efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f00:	601a      	str	r2, [r3, #0]
 8011f02:	f3bf 8f4f 	dsb	sy
 8011f06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011f0a:	bf00      	nop
 8011f0c:	3728      	adds	r7, #40	; 0x28
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	20006684 	.word	0x20006684
 8011f18:	20006660 	.word	0x20006660
 8011f1c:	e000ed04 	.word	0xe000ed04

08011f20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b084      	sub	sp, #16
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d019      	beq.n	8011f66 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011f32:	4b14      	ldr	r3, [pc, #80]	; (8011f84 <vTaskDelay+0x64>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d00c      	beq.n	8011f54 <vTaskDelay+0x34>
	__asm volatile
 8011f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f3e:	b672      	cpsid	i
 8011f40:	f383 8811 	msr	BASEPRI, r3
 8011f44:	f3bf 8f6f 	isb	sy
 8011f48:	f3bf 8f4f 	dsb	sy
 8011f4c:	b662      	cpsie	i
 8011f4e:	60bb      	str	r3, [r7, #8]
}
 8011f50:	bf00      	nop
 8011f52:	e7fe      	b.n	8011f52 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8011f54:	f000 f888 	bl	8012068 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011f58:	2100      	movs	r1, #0
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f000 fe38 	bl	8012bd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011f60:	f000 f890 	bl	8012084 <xTaskResumeAll>
 8011f64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d107      	bne.n	8011f7c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8011f6c:	4b06      	ldr	r3, [pc, #24]	; (8011f88 <vTaskDelay+0x68>)
 8011f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f72:	601a      	str	r2, [r3, #0]
 8011f74:	f3bf 8f4f 	dsb	sy
 8011f78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011f7c:	bf00      	nop
 8011f7e:	3710      	adds	r7, #16
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	20006684 	.word	0x20006684
 8011f88:	e000ed04 	.word	0xe000ed04

08011f8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b08a      	sub	sp, #40	; 0x28
 8011f90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011f92:	2300      	movs	r3, #0
 8011f94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011f96:	2300      	movs	r3, #0
 8011f98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011f9a:	463a      	mov	r2, r7
 8011f9c:	1d39      	adds	r1, r7, #4
 8011f9e:	f107 0308 	add.w	r3, r7, #8
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7f6 fc6e 	bl	8008884 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011fa8:	6839      	ldr	r1, [r7, #0]
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	68ba      	ldr	r2, [r7, #8]
 8011fae:	9202      	str	r2, [sp, #8]
 8011fb0:	9301      	str	r3, [sp, #4]
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	9300      	str	r3, [sp, #0]
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	460a      	mov	r2, r1
 8011fba:	4923      	ldr	r1, [pc, #140]	; (8012048 <vTaskStartScheduler+0xbc>)
 8011fbc:	4823      	ldr	r0, [pc, #140]	; (801204c <vTaskStartScheduler+0xc0>)
 8011fbe:	f7ff fce7 	bl	8011990 <xTaskCreateStatic>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	4a22      	ldr	r2, [pc, #136]	; (8012050 <vTaskStartScheduler+0xc4>)
 8011fc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011fc8:	4b21      	ldr	r3, [pc, #132]	; (8012050 <vTaskStartScheduler+0xc4>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d002      	beq.n	8011fd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	617b      	str	r3, [r7, #20]
 8011fd4:	e001      	b.n	8011fda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011fda:	697b      	ldr	r3, [r7, #20]
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d11d      	bne.n	801201c <vTaskStartScheduler+0x90>
	__asm volatile
 8011fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe4:	b672      	cpsid	i
 8011fe6:	f383 8811 	msr	BASEPRI, r3
 8011fea:	f3bf 8f6f 	isb	sy
 8011fee:	f3bf 8f4f 	dsb	sy
 8011ff2:	b662      	cpsie	i
 8011ff4:	613b      	str	r3, [r7, #16]
}
 8011ff6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011ff8:	4b16      	ldr	r3, [pc, #88]	; (8012054 <vTaskStartScheduler+0xc8>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	334c      	adds	r3, #76	; 0x4c
 8011ffe:	4a16      	ldr	r2, [pc, #88]	; (8012058 <vTaskStartScheduler+0xcc>)
 8012000:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012002:	4b16      	ldr	r3, [pc, #88]	; (801205c <vTaskStartScheduler+0xd0>)
 8012004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012008:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801200a:	4b15      	ldr	r3, [pc, #84]	; (8012060 <vTaskStartScheduler+0xd4>)
 801200c:	2201      	movs	r2, #1
 801200e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012010:	4b14      	ldr	r3, [pc, #80]	; (8012064 <vTaskStartScheduler+0xd8>)
 8012012:	2200      	movs	r2, #0
 8012014:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012016:	f000 fed3 	bl	8012dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801201a:	e010      	b.n	801203e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012022:	d10c      	bne.n	801203e <vTaskStartScheduler+0xb2>
	__asm volatile
 8012024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012028:	b672      	cpsid	i
 801202a:	f383 8811 	msr	BASEPRI, r3
 801202e:	f3bf 8f6f 	isb	sy
 8012032:	f3bf 8f4f 	dsb	sy
 8012036:	b662      	cpsie	i
 8012038:	60fb      	str	r3, [r7, #12]
}
 801203a:	bf00      	nop
 801203c:	e7fe      	b.n	801203c <vTaskStartScheduler+0xb0>
}
 801203e:	bf00      	nop
 8012040:	3718      	adds	r7, #24
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	bf00      	nop
 8012048:	08023d38 	.word	0x08023d38
 801204c:	08012665 	.word	0x08012665
 8012050:	20006680 	.word	0x20006680
 8012054:	2000655c 	.word	0x2000655c
 8012058:	20000038 	.word	0x20000038
 801205c:	2000667c 	.word	0x2000667c
 8012060:	20006668 	.word	0x20006668
 8012064:	20006660 	.word	0x20006660

08012068 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012068:	b480      	push	{r7}
 801206a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801206c:	4b04      	ldr	r3, [pc, #16]	; (8012080 <vTaskSuspendAll+0x18>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	3301      	adds	r3, #1
 8012072:	4a03      	ldr	r2, [pc, #12]	; (8012080 <vTaskSuspendAll+0x18>)
 8012074:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012076:	bf00      	nop
 8012078:	46bd      	mov	sp, r7
 801207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207e:	4770      	bx	lr
 8012080:	20006684 	.word	0x20006684

08012084 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b084      	sub	sp, #16
 8012088:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801208a:	2300      	movs	r3, #0
 801208c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801208e:	2300      	movs	r3, #0
 8012090:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012092:	4b42      	ldr	r3, [pc, #264]	; (801219c <xTaskResumeAll+0x118>)
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d10c      	bne.n	80120b4 <xTaskResumeAll+0x30>
	__asm volatile
 801209a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801209e:	b672      	cpsid	i
 80120a0:	f383 8811 	msr	BASEPRI, r3
 80120a4:	f3bf 8f6f 	isb	sy
 80120a8:	f3bf 8f4f 	dsb	sy
 80120ac:	b662      	cpsie	i
 80120ae:	603b      	str	r3, [r7, #0]
}
 80120b0:	bf00      	nop
 80120b2:	e7fe      	b.n	80120b2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80120b4:	f000 ff02 	bl	8012ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80120b8:	4b38      	ldr	r3, [pc, #224]	; (801219c <xTaskResumeAll+0x118>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	3b01      	subs	r3, #1
 80120be:	4a37      	ldr	r2, [pc, #220]	; (801219c <xTaskResumeAll+0x118>)
 80120c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80120c2:	4b36      	ldr	r3, [pc, #216]	; (801219c <xTaskResumeAll+0x118>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d161      	bne.n	801218e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80120ca:	4b35      	ldr	r3, [pc, #212]	; (80121a0 <xTaskResumeAll+0x11c>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d05d      	beq.n	801218e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80120d2:	e02e      	b.n	8012132 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120d4:	4b33      	ldr	r3, [pc, #204]	; (80121a4 <xTaskResumeAll+0x120>)
 80120d6:	68db      	ldr	r3, [r3, #12]
 80120d8:	68db      	ldr	r3, [r3, #12]
 80120da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	3318      	adds	r3, #24
 80120e0:	4618      	mov	r0, r3
 80120e2:	f7fe fc1c 	bl	801091e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	3304      	adds	r3, #4
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7fe fc17 	bl	801091e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120f4:	2201      	movs	r2, #1
 80120f6:	409a      	lsls	r2, r3
 80120f8:	4b2b      	ldr	r3, [pc, #172]	; (80121a8 <xTaskResumeAll+0x124>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	4313      	orrs	r3, r2
 80120fe:	4a2a      	ldr	r2, [pc, #168]	; (80121a8 <xTaskResumeAll+0x124>)
 8012100:	6013      	str	r3, [r2, #0]
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012106:	4613      	mov	r3, r2
 8012108:	009b      	lsls	r3, r3, #2
 801210a:	4413      	add	r3, r2
 801210c:	009b      	lsls	r3, r3, #2
 801210e:	4a27      	ldr	r2, [pc, #156]	; (80121ac <xTaskResumeAll+0x128>)
 8012110:	441a      	add	r2, r3
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	3304      	adds	r3, #4
 8012116:	4619      	mov	r1, r3
 8012118:	4610      	mov	r0, r2
 801211a:	f7fe fba3 	bl	8010864 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012122:	4b23      	ldr	r3, [pc, #140]	; (80121b0 <xTaskResumeAll+0x12c>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012128:	429a      	cmp	r2, r3
 801212a:	d302      	bcc.n	8012132 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801212c:	4b21      	ldr	r3, [pc, #132]	; (80121b4 <xTaskResumeAll+0x130>)
 801212e:	2201      	movs	r2, #1
 8012130:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012132:	4b1c      	ldr	r3, [pc, #112]	; (80121a4 <xTaskResumeAll+0x120>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d1cc      	bne.n	80120d4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d001      	beq.n	8012144 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012140:	f000 fb4c 	bl	80127dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012144:	4b1c      	ldr	r3, [pc, #112]	; (80121b8 <xTaskResumeAll+0x134>)
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d010      	beq.n	8012172 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012150:	f000 f858 	bl	8012204 <xTaskIncrementTick>
 8012154:	4603      	mov	r3, r0
 8012156:	2b00      	cmp	r3, #0
 8012158:	d002      	beq.n	8012160 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801215a:	4b16      	ldr	r3, [pc, #88]	; (80121b4 <xTaskResumeAll+0x130>)
 801215c:	2201      	movs	r2, #1
 801215e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	3b01      	subs	r3, #1
 8012164:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d1f1      	bne.n	8012150 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 801216c:	4b12      	ldr	r3, [pc, #72]	; (80121b8 <xTaskResumeAll+0x134>)
 801216e:	2200      	movs	r2, #0
 8012170:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012172:	4b10      	ldr	r3, [pc, #64]	; (80121b4 <xTaskResumeAll+0x130>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d009      	beq.n	801218e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801217a:	2301      	movs	r3, #1
 801217c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801217e:	4b0f      	ldr	r3, [pc, #60]	; (80121bc <xTaskResumeAll+0x138>)
 8012180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012184:	601a      	str	r2, [r3, #0]
 8012186:	f3bf 8f4f 	dsb	sy
 801218a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801218e:	f000 fec9 	bl	8012f24 <vPortExitCritical>

	return xAlreadyYielded;
 8012192:	68bb      	ldr	r3, [r7, #8]
}
 8012194:	4618      	mov	r0, r3
 8012196:	3710      	adds	r7, #16
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}
 801219c:	20006684 	.word	0x20006684
 80121a0:	2000665c 	.word	0x2000665c
 80121a4:	2000661c 	.word	0x2000661c
 80121a8:	20006664 	.word	0x20006664
 80121ac:	20006560 	.word	0x20006560
 80121b0:	2000655c 	.word	0x2000655c
 80121b4:	20006670 	.word	0x20006670
 80121b8:	2000666c 	.word	0x2000666c
 80121bc:	e000ed04 	.word	0xe000ed04

080121c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80121c0:	b480      	push	{r7}
 80121c2:	b083      	sub	sp, #12
 80121c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80121c6:	4b05      	ldr	r3, [pc, #20]	; (80121dc <xTaskGetTickCount+0x1c>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80121cc:	687b      	ldr	r3, [r7, #4]
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	370c      	adds	r7, #12
 80121d2:	46bd      	mov	sp, r7
 80121d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d8:	4770      	bx	lr
 80121da:	bf00      	nop
 80121dc:	20006660 	.word	0x20006660

080121e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b082      	sub	sp, #8
 80121e4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80121e6:	f000 ff51 	bl	801308c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80121ea:	2300      	movs	r3, #0
 80121ec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80121ee:	4b04      	ldr	r3, [pc, #16]	; (8012200 <xTaskGetTickCountFromISR+0x20>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80121f4:	683b      	ldr	r3, [r7, #0]
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3708      	adds	r7, #8
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop
 8012200:	20006660 	.word	0x20006660

08012204 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b086      	sub	sp, #24
 8012208:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801220a:	2300      	movs	r3, #0
 801220c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801220e:	4b4f      	ldr	r3, [pc, #316]	; (801234c <xTaskIncrementTick+0x148>)
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	2b00      	cmp	r3, #0
 8012214:	f040 808a 	bne.w	801232c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012218:	4b4d      	ldr	r3, [pc, #308]	; (8012350 <xTaskIncrementTick+0x14c>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	3301      	adds	r3, #1
 801221e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012220:	4a4b      	ldr	r2, [pc, #300]	; (8012350 <xTaskIncrementTick+0x14c>)
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d122      	bne.n	8012272 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 801222c:	4b49      	ldr	r3, [pc, #292]	; (8012354 <xTaskIncrementTick+0x150>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d00c      	beq.n	8012250 <xTaskIncrementTick+0x4c>
	__asm volatile
 8012236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801223a:	b672      	cpsid	i
 801223c:	f383 8811 	msr	BASEPRI, r3
 8012240:	f3bf 8f6f 	isb	sy
 8012244:	f3bf 8f4f 	dsb	sy
 8012248:	b662      	cpsie	i
 801224a:	603b      	str	r3, [r7, #0]
}
 801224c:	bf00      	nop
 801224e:	e7fe      	b.n	801224e <xTaskIncrementTick+0x4a>
 8012250:	4b40      	ldr	r3, [pc, #256]	; (8012354 <xTaskIncrementTick+0x150>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	60fb      	str	r3, [r7, #12]
 8012256:	4b40      	ldr	r3, [pc, #256]	; (8012358 <xTaskIncrementTick+0x154>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	4a3e      	ldr	r2, [pc, #248]	; (8012354 <xTaskIncrementTick+0x150>)
 801225c:	6013      	str	r3, [r2, #0]
 801225e:	4a3e      	ldr	r2, [pc, #248]	; (8012358 <xTaskIncrementTick+0x154>)
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	6013      	str	r3, [r2, #0]
 8012264:	4b3d      	ldr	r3, [pc, #244]	; (801235c <xTaskIncrementTick+0x158>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	3301      	adds	r3, #1
 801226a:	4a3c      	ldr	r2, [pc, #240]	; (801235c <xTaskIncrementTick+0x158>)
 801226c:	6013      	str	r3, [r2, #0]
 801226e:	f000 fab5 	bl	80127dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012272:	4b3b      	ldr	r3, [pc, #236]	; (8012360 <xTaskIncrementTick+0x15c>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	693a      	ldr	r2, [r7, #16]
 8012278:	429a      	cmp	r2, r3
 801227a:	d348      	bcc.n	801230e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801227c:	4b35      	ldr	r3, [pc, #212]	; (8012354 <xTaskIncrementTick+0x150>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d104      	bne.n	8012290 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012286:	4b36      	ldr	r3, [pc, #216]	; (8012360 <xTaskIncrementTick+0x15c>)
 8012288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801228c:	601a      	str	r2, [r3, #0]
					break;
 801228e:	e03e      	b.n	801230e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012290:	4b30      	ldr	r3, [pc, #192]	; (8012354 <xTaskIncrementTick+0x150>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	68db      	ldr	r3, [r3, #12]
 8012296:	68db      	ldr	r3, [r3, #12]
 8012298:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80122a0:	693a      	ldr	r2, [r7, #16]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	429a      	cmp	r2, r3
 80122a6:	d203      	bcs.n	80122b0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80122a8:	4a2d      	ldr	r2, [pc, #180]	; (8012360 <xTaskIncrementTick+0x15c>)
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80122ae:	e02e      	b.n	801230e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	3304      	adds	r3, #4
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7fe fb32 	bl	801091e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d004      	beq.n	80122cc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	3318      	adds	r3, #24
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7fe fb29 	bl	801091e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122d0:	2201      	movs	r2, #1
 80122d2:	409a      	lsls	r2, r3
 80122d4:	4b23      	ldr	r3, [pc, #140]	; (8012364 <xTaskIncrementTick+0x160>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	4313      	orrs	r3, r2
 80122da:	4a22      	ldr	r2, [pc, #136]	; (8012364 <xTaskIncrementTick+0x160>)
 80122dc:	6013      	str	r3, [r2, #0]
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122e2:	4613      	mov	r3, r2
 80122e4:	009b      	lsls	r3, r3, #2
 80122e6:	4413      	add	r3, r2
 80122e8:	009b      	lsls	r3, r3, #2
 80122ea:	4a1f      	ldr	r2, [pc, #124]	; (8012368 <xTaskIncrementTick+0x164>)
 80122ec:	441a      	add	r2, r3
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	3304      	adds	r3, #4
 80122f2:	4619      	mov	r1, r3
 80122f4:	4610      	mov	r0, r2
 80122f6:	f7fe fab5 	bl	8010864 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122fe:	4b1b      	ldr	r3, [pc, #108]	; (801236c <xTaskIncrementTick+0x168>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012304:	429a      	cmp	r2, r3
 8012306:	d3b9      	bcc.n	801227c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8012308:	2301      	movs	r3, #1
 801230a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801230c:	e7b6      	b.n	801227c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801230e:	4b17      	ldr	r3, [pc, #92]	; (801236c <xTaskIncrementTick+0x168>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012314:	4914      	ldr	r1, [pc, #80]	; (8012368 <xTaskIncrementTick+0x164>)
 8012316:	4613      	mov	r3, r2
 8012318:	009b      	lsls	r3, r3, #2
 801231a:	4413      	add	r3, r2
 801231c:	009b      	lsls	r3, r3, #2
 801231e:	440b      	add	r3, r1
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	2b01      	cmp	r3, #1
 8012324:	d907      	bls.n	8012336 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8012326:	2301      	movs	r3, #1
 8012328:	617b      	str	r3, [r7, #20]
 801232a:	e004      	b.n	8012336 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801232c:	4b10      	ldr	r3, [pc, #64]	; (8012370 <xTaskIncrementTick+0x16c>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	3301      	adds	r3, #1
 8012332:	4a0f      	ldr	r2, [pc, #60]	; (8012370 <xTaskIncrementTick+0x16c>)
 8012334:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012336:	4b0f      	ldr	r3, [pc, #60]	; (8012374 <xTaskIncrementTick+0x170>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d001      	beq.n	8012342 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801233e:	2301      	movs	r3, #1
 8012340:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012342:	697b      	ldr	r3, [r7, #20]
}
 8012344:	4618      	mov	r0, r3
 8012346:	3718      	adds	r7, #24
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}
 801234c:	20006684 	.word	0x20006684
 8012350:	20006660 	.word	0x20006660
 8012354:	20006614 	.word	0x20006614
 8012358:	20006618 	.word	0x20006618
 801235c:	20006674 	.word	0x20006674
 8012360:	2000667c 	.word	0x2000667c
 8012364:	20006664 	.word	0x20006664
 8012368:	20006560 	.word	0x20006560
 801236c:	2000655c 	.word	0x2000655c
 8012370:	2000666c 	.word	0x2000666c
 8012374:	20006670 	.word	0x20006670

08012378 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012378:	b480      	push	{r7}
 801237a:	b087      	sub	sp, #28
 801237c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801237e:	4b2a      	ldr	r3, [pc, #168]	; (8012428 <vTaskSwitchContext+0xb0>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d003      	beq.n	801238e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012386:	4b29      	ldr	r3, [pc, #164]	; (801242c <vTaskSwitchContext+0xb4>)
 8012388:	2201      	movs	r2, #1
 801238a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801238c:	e046      	b.n	801241c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801238e:	4b27      	ldr	r3, [pc, #156]	; (801242c <vTaskSwitchContext+0xb4>)
 8012390:	2200      	movs	r2, #0
 8012392:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012394:	4b26      	ldr	r3, [pc, #152]	; (8012430 <vTaskSwitchContext+0xb8>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	fab3 f383 	clz	r3, r3
 80123a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80123a2:	7afb      	ldrb	r3, [r7, #11]
 80123a4:	f1c3 031f 	rsb	r3, r3, #31
 80123a8:	617b      	str	r3, [r7, #20]
 80123aa:	4922      	ldr	r1, [pc, #136]	; (8012434 <vTaskSwitchContext+0xbc>)
 80123ac:	697a      	ldr	r2, [r7, #20]
 80123ae:	4613      	mov	r3, r2
 80123b0:	009b      	lsls	r3, r3, #2
 80123b2:	4413      	add	r3, r2
 80123b4:	009b      	lsls	r3, r3, #2
 80123b6:	440b      	add	r3, r1
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d10c      	bne.n	80123d8 <vTaskSwitchContext+0x60>
	__asm volatile
 80123be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c2:	b672      	cpsid	i
 80123c4:	f383 8811 	msr	BASEPRI, r3
 80123c8:	f3bf 8f6f 	isb	sy
 80123cc:	f3bf 8f4f 	dsb	sy
 80123d0:	b662      	cpsie	i
 80123d2:	607b      	str	r3, [r7, #4]
}
 80123d4:	bf00      	nop
 80123d6:	e7fe      	b.n	80123d6 <vTaskSwitchContext+0x5e>
 80123d8:	697a      	ldr	r2, [r7, #20]
 80123da:	4613      	mov	r3, r2
 80123dc:	009b      	lsls	r3, r3, #2
 80123de:	4413      	add	r3, r2
 80123e0:	009b      	lsls	r3, r3, #2
 80123e2:	4a14      	ldr	r2, [pc, #80]	; (8012434 <vTaskSwitchContext+0xbc>)
 80123e4:	4413      	add	r3, r2
 80123e6:	613b      	str	r3, [r7, #16]
 80123e8:	693b      	ldr	r3, [r7, #16]
 80123ea:	685b      	ldr	r3, [r3, #4]
 80123ec:	685a      	ldr	r2, [r3, #4]
 80123ee:	693b      	ldr	r3, [r7, #16]
 80123f0:	605a      	str	r2, [r3, #4]
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	685a      	ldr	r2, [r3, #4]
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	3308      	adds	r3, #8
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d104      	bne.n	8012408 <vTaskSwitchContext+0x90>
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	685b      	ldr	r3, [r3, #4]
 8012402:	685a      	ldr	r2, [r3, #4]
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	605a      	str	r2, [r3, #4]
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	685b      	ldr	r3, [r3, #4]
 801240c:	68db      	ldr	r3, [r3, #12]
 801240e:	4a0a      	ldr	r2, [pc, #40]	; (8012438 <vTaskSwitchContext+0xc0>)
 8012410:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012412:	4b09      	ldr	r3, [pc, #36]	; (8012438 <vTaskSwitchContext+0xc0>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	334c      	adds	r3, #76	; 0x4c
 8012418:	4a08      	ldr	r2, [pc, #32]	; (801243c <vTaskSwitchContext+0xc4>)
 801241a:	6013      	str	r3, [r2, #0]
}
 801241c:	bf00      	nop
 801241e:	371c      	adds	r7, #28
 8012420:	46bd      	mov	sp, r7
 8012422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012426:	4770      	bx	lr
 8012428:	20006684 	.word	0x20006684
 801242c:	20006670 	.word	0x20006670
 8012430:	20006664 	.word	0x20006664
 8012434:	20006560 	.word	0x20006560
 8012438:	2000655c 	.word	0x2000655c
 801243c:	20000038 	.word	0x20000038

08012440 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b084      	sub	sp, #16
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d10c      	bne.n	801246a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8012450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012454:	b672      	cpsid	i
 8012456:	f383 8811 	msr	BASEPRI, r3
 801245a:	f3bf 8f6f 	isb	sy
 801245e:	f3bf 8f4f 	dsb	sy
 8012462:	b662      	cpsie	i
 8012464:	60fb      	str	r3, [r7, #12]
}
 8012466:	bf00      	nop
 8012468:	e7fe      	b.n	8012468 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801246a:	4b07      	ldr	r3, [pc, #28]	; (8012488 <vTaskPlaceOnEventList+0x48>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	3318      	adds	r3, #24
 8012470:	4619      	mov	r1, r3
 8012472:	6878      	ldr	r0, [r7, #4]
 8012474:	f7fe fa1a 	bl	80108ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012478:	2101      	movs	r1, #1
 801247a:	6838      	ldr	r0, [r7, #0]
 801247c:	f000 fba8 	bl	8012bd0 <prvAddCurrentTaskToDelayedList>
}
 8012480:	bf00      	nop
 8012482:	3710      	adds	r7, #16
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}
 8012488:	2000655c 	.word	0x2000655c

0801248c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b086      	sub	sp, #24
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	68db      	ldr	r3, [r3, #12]
 8012498:	68db      	ldr	r3, [r3, #12]
 801249a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801249c:	693b      	ldr	r3, [r7, #16]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d10c      	bne.n	80124bc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80124a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124a6:	b672      	cpsid	i
 80124a8:	f383 8811 	msr	BASEPRI, r3
 80124ac:	f3bf 8f6f 	isb	sy
 80124b0:	f3bf 8f4f 	dsb	sy
 80124b4:	b662      	cpsie	i
 80124b6:	60fb      	str	r3, [r7, #12]
}
 80124b8:	bf00      	nop
 80124ba:	e7fe      	b.n	80124ba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80124bc:	693b      	ldr	r3, [r7, #16]
 80124be:	3318      	adds	r3, #24
 80124c0:	4618      	mov	r0, r3
 80124c2:	f7fe fa2c 	bl	801091e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80124c6:	4b1d      	ldr	r3, [pc, #116]	; (801253c <xTaskRemoveFromEventList+0xb0>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d11c      	bne.n	8012508 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	3304      	adds	r3, #4
 80124d2:	4618      	mov	r0, r3
 80124d4:	f7fe fa23 	bl	801091e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124dc:	2201      	movs	r2, #1
 80124de:	409a      	lsls	r2, r3
 80124e0:	4b17      	ldr	r3, [pc, #92]	; (8012540 <xTaskRemoveFromEventList+0xb4>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	4313      	orrs	r3, r2
 80124e6:	4a16      	ldr	r2, [pc, #88]	; (8012540 <xTaskRemoveFromEventList+0xb4>)
 80124e8:	6013      	str	r3, [r2, #0]
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ee:	4613      	mov	r3, r2
 80124f0:	009b      	lsls	r3, r3, #2
 80124f2:	4413      	add	r3, r2
 80124f4:	009b      	lsls	r3, r3, #2
 80124f6:	4a13      	ldr	r2, [pc, #76]	; (8012544 <xTaskRemoveFromEventList+0xb8>)
 80124f8:	441a      	add	r2, r3
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	3304      	adds	r3, #4
 80124fe:	4619      	mov	r1, r3
 8012500:	4610      	mov	r0, r2
 8012502:	f7fe f9af 	bl	8010864 <vListInsertEnd>
 8012506:	e005      	b.n	8012514 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	3318      	adds	r3, #24
 801250c:	4619      	mov	r1, r3
 801250e:	480e      	ldr	r0, [pc, #56]	; (8012548 <xTaskRemoveFromEventList+0xbc>)
 8012510:	f7fe f9a8 	bl	8010864 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012518:	4b0c      	ldr	r3, [pc, #48]	; (801254c <xTaskRemoveFromEventList+0xc0>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801251e:	429a      	cmp	r2, r3
 8012520:	d905      	bls.n	801252e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012522:	2301      	movs	r3, #1
 8012524:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012526:	4b0a      	ldr	r3, [pc, #40]	; (8012550 <xTaskRemoveFromEventList+0xc4>)
 8012528:	2201      	movs	r2, #1
 801252a:	601a      	str	r2, [r3, #0]
 801252c:	e001      	b.n	8012532 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801252e:	2300      	movs	r3, #0
 8012530:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012532:	697b      	ldr	r3, [r7, #20]
}
 8012534:	4618      	mov	r0, r3
 8012536:	3718      	adds	r7, #24
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}
 801253c:	20006684 	.word	0x20006684
 8012540:	20006664 	.word	0x20006664
 8012544:	20006560 	.word	0x20006560
 8012548:	2000661c 	.word	0x2000661c
 801254c:	2000655c 	.word	0x2000655c
 8012550:	20006670 	.word	0x20006670

08012554 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012554:	b480      	push	{r7}
 8012556:	b083      	sub	sp, #12
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801255c:	4b06      	ldr	r3, [pc, #24]	; (8012578 <vTaskInternalSetTimeOutState+0x24>)
 801255e:	681a      	ldr	r2, [r3, #0]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012564:	4b05      	ldr	r3, [pc, #20]	; (801257c <vTaskInternalSetTimeOutState+0x28>)
 8012566:	681a      	ldr	r2, [r3, #0]
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	605a      	str	r2, [r3, #4]
}
 801256c:	bf00      	nop
 801256e:	370c      	adds	r7, #12
 8012570:	46bd      	mov	sp, r7
 8012572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012576:	4770      	bx	lr
 8012578:	20006674 	.word	0x20006674
 801257c:	20006660 	.word	0x20006660

08012580 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b088      	sub	sp, #32
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
 8012588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d10c      	bne.n	80125aa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8012590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012594:	b672      	cpsid	i
 8012596:	f383 8811 	msr	BASEPRI, r3
 801259a:	f3bf 8f6f 	isb	sy
 801259e:	f3bf 8f4f 	dsb	sy
 80125a2:	b662      	cpsie	i
 80125a4:	613b      	str	r3, [r7, #16]
}
 80125a6:	bf00      	nop
 80125a8:	e7fe      	b.n	80125a8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d10c      	bne.n	80125ca <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80125b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b4:	b672      	cpsid	i
 80125b6:	f383 8811 	msr	BASEPRI, r3
 80125ba:	f3bf 8f6f 	isb	sy
 80125be:	f3bf 8f4f 	dsb	sy
 80125c2:	b662      	cpsie	i
 80125c4:	60fb      	str	r3, [r7, #12]
}
 80125c6:	bf00      	nop
 80125c8:	e7fe      	b.n	80125c8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80125ca:	f000 fc77 	bl	8012ebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80125ce:	4b1d      	ldr	r3, [pc, #116]	; (8012644 <xTaskCheckForTimeOut+0xc4>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	685b      	ldr	r3, [r3, #4]
 80125d8:	69ba      	ldr	r2, [r7, #24]
 80125da:	1ad3      	subs	r3, r2, r3
 80125dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80125e6:	d102      	bne.n	80125ee <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80125e8:	2300      	movs	r3, #0
 80125ea:	61fb      	str	r3, [r7, #28]
 80125ec:	e023      	b.n	8012636 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681a      	ldr	r2, [r3, #0]
 80125f2:	4b15      	ldr	r3, [pc, #84]	; (8012648 <xTaskCheckForTimeOut+0xc8>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d007      	beq.n	801260a <xTaskCheckForTimeOut+0x8a>
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	69ba      	ldr	r2, [r7, #24]
 8012600:	429a      	cmp	r2, r3
 8012602:	d302      	bcc.n	801260a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012604:	2301      	movs	r3, #1
 8012606:	61fb      	str	r3, [r7, #28]
 8012608:	e015      	b.n	8012636 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	697a      	ldr	r2, [r7, #20]
 8012610:	429a      	cmp	r2, r3
 8012612:	d20b      	bcs.n	801262c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	681a      	ldr	r2, [r3, #0]
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	1ad2      	subs	r2, r2, r3
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f7ff ff97 	bl	8012554 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012626:	2300      	movs	r3, #0
 8012628:	61fb      	str	r3, [r7, #28]
 801262a:	e004      	b.n	8012636 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	2200      	movs	r2, #0
 8012630:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012632:	2301      	movs	r3, #1
 8012634:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012636:	f000 fc75 	bl	8012f24 <vPortExitCritical>

	return xReturn;
 801263a:	69fb      	ldr	r3, [r7, #28]
}
 801263c:	4618      	mov	r0, r3
 801263e:	3720      	adds	r7, #32
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	20006660 	.word	0x20006660
 8012648:	20006674 	.word	0x20006674

0801264c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801264c:	b480      	push	{r7}
 801264e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012650:	4b03      	ldr	r3, [pc, #12]	; (8012660 <vTaskMissedYield+0x14>)
 8012652:	2201      	movs	r2, #1
 8012654:	601a      	str	r2, [r3, #0]
}
 8012656:	bf00      	nop
 8012658:	46bd      	mov	sp, r7
 801265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265e:	4770      	bx	lr
 8012660:	20006670 	.word	0x20006670

08012664 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801266c:	f000 f852 	bl	8012714 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012670:	4b06      	ldr	r3, [pc, #24]	; (801268c <prvIdleTask+0x28>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	2b01      	cmp	r3, #1
 8012676:	d9f9      	bls.n	801266c <prvIdleTask+0x8>
			{
				taskYIELD();
 8012678:	4b05      	ldr	r3, [pc, #20]	; (8012690 <prvIdleTask+0x2c>)
 801267a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801267e:	601a      	str	r2, [r3, #0]
 8012680:	f3bf 8f4f 	dsb	sy
 8012684:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012688:	e7f0      	b.n	801266c <prvIdleTask+0x8>
 801268a:	bf00      	nop
 801268c:	20006560 	.word	0x20006560
 8012690:	e000ed04 	.word	0xe000ed04

08012694 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801269a:	2300      	movs	r3, #0
 801269c:	607b      	str	r3, [r7, #4]
 801269e:	e00c      	b.n	80126ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80126a0:	687a      	ldr	r2, [r7, #4]
 80126a2:	4613      	mov	r3, r2
 80126a4:	009b      	lsls	r3, r3, #2
 80126a6:	4413      	add	r3, r2
 80126a8:	009b      	lsls	r3, r3, #2
 80126aa:	4a12      	ldr	r2, [pc, #72]	; (80126f4 <prvInitialiseTaskLists+0x60>)
 80126ac:	4413      	add	r3, r2
 80126ae:	4618      	mov	r0, r3
 80126b0:	f7fe f8ab 	bl	801080a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	3301      	adds	r3, #1
 80126b8:	607b      	str	r3, [r7, #4]
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2b06      	cmp	r3, #6
 80126be:	d9ef      	bls.n	80126a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80126c0:	480d      	ldr	r0, [pc, #52]	; (80126f8 <prvInitialiseTaskLists+0x64>)
 80126c2:	f7fe f8a2 	bl	801080a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80126c6:	480d      	ldr	r0, [pc, #52]	; (80126fc <prvInitialiseTaskLists+0x68>)
 80126c8:	f7fe f89f 	bl	801080a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80126cc:	480c      	ldr	r0, [pc, #48]	; (8012700 <prvInitialiseTaskLists+0x6c>)
 80126ce:	f7fe f89c 	bl	801080a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80126d2:	480c      	ldr	r0, [pc, #48]	; (8012704 <prvInitialiseTaskLists+0x70>)
 80126d4:	f7fe f899 	bl	801080a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80126d8:	480b      	ldr	r0, [pc, #44]	; (8012708 <prvInitialiseTaskLists+0x74>)
 80126da:	f7fe f896 	bl	801080a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80126de:	4b0b      	ldr	r3, [pc, #44]	; (801270c <prvInitialiseTaskLists+0x78>)
 80126e0:	4a05      	ldr	r2, [pc, #20]	; (80126f8 <prvInitialiseTaskLists+0x64>)
 80126e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80126e4:	4b0a      	ldr	r3, [pc, #40]	; (8012710 <prvInitialiseTaskLists+0x7c>)
 80126e6:	4a05      	ldr	r2, [pc, #20]	; (80126fc <prvInitialiseTaskLists+0x68>)
 80126e8:	601a      	str	r2, [r3, #0]
}
 80126ea:	bf00      	nop
 80126ec:	3708      	adds	r7, #8
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}
 80126f2:	bf00      	nop
 80126f4:	20006560 	.word	0x20006560
 80126f8:	200065ec 	.word	0x200065ec
 80126fc:	20006600 	.word	0x20006600
 8012700:	2000661c 	.word	0x2000661c
 8012704:	20006630 	.word	0x20006630
 8012708:	20006648 	.word	0x20006648
 801270c:	20006614 	.word	0x20006614
 8012710:	20006618 	.word	0x20006618

08012714 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b082      	sub	sp, #8
 8012718:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801271a:	e019      	b.n	8012750 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801271c:	f000 fbce 	bl	8012ebc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012720:	4b10      	ldr	r3, [pc, #64]	; (8012764 <prvCheckTasksWaitingTermination+0x50>)
 8012722:	68db      	ldr	r3, [r3, #12]
 8012724:	68db      	ldr	r3, [r3, #12]
 8012726:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	3304      	adds	r3, #4
 801272c:	4618      	mov	r0, r3
 801272e:	f7fe f8f6 	bl	801091e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012732:	4b0d      	ldr	r3, [pc, #52]	; (8012768 <prvCheckTasksWaitingTermination+0x54>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	3b01      	subs	r3, #1
 8012738:	4a0b      	ldr	r2, [pc, #44]	; (8012768 <prvCheckTasksWaitingTermination+0x54>)
 801273a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801273c:	4b0b      	ldr	r3, [pc, #44]	; (801276c <prvCheckTasksWaitingTermination+0x58>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	3b01      	subs	r3, #1
 8012742:	4a0a      	ldr	r2, [pc, #40]	; (801276c <prvCheckTasksWaitingTermination+0x58>)
 8012744:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012746:	f000 fbed 	bl	8012f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 f810 	bl	8012770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012750:	4b06      	ldr	r3, [pc, #24]	; (801276c <prvCheckTasksWaitingTermination+0x58>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d1e1      	bne.n	801271c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012758:	bf00      	nop
 801275a:	bf00      	nop
 801275c:	3708      	adds	r7, #8
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
 8012762:	bf00      	nop
 8012764:	20006630 	.word	0x20006630
 8012768:	2000665c 	.word	0x2000665c
 801276c:	20006644 	.word	0x20006644

08012770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012770:	b580      	push	{r7, lr}
 8012772:	b084      	sub	sp, #16
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	334c      	adds	r3, #76	; 0x4c
 801277c:	4618      	mov	r0, r3
 801277e:	f010 f87b 	bl	8022878 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8012788:	2b00      	cmp	r3, #0
 801278a:	d108      	bne.n	801279e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012790:	4618      	mov	r0, r3
 8012792:	f7ee fe8a 	bl	80014aa <vPortFree>
				vPortFree( pxTCB );
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f7ee fe87 	bl	80014aa <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801279c:	e01a      	b.n	80127d4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d103      	bne.n	80127b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f7ee fe7e 	bl	80014aa <vPortFree>
	}
 80127ae:	e011      	b.n	80127d4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80127b6:	2b02      	cmp	r3, #2
 80127b8:	d00c      	beq.n	80127d4 <prvDeleteTCB+0x64>
	__asm volatile
 80127ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127be:	b672      	cpsid	i
 80127c0:	f383 8811 	msr	BASEPRI, r3
 80127c4:	f3bf 8f6f 	isb	sy
 80127c8:	f3bf 8f4f 	dsb	sy
 80127cc:	b662      	cpsie	i
 80127ce:	60fb      	str	r3, [r7, #12]
}
 80127d0:	bf00      	nop
 80127d2:	e7fe      	b.n	80127d2 <prvDeleteTCB+0x62>
	}
 80127d4:	bf00      	nop
 80127d6:	3710      	adds	r7, #16
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}

080127dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80127dc:	b480      	push	{r7}
 80127de:	b083      	sub	sp, #12
 80127e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80127e2:	4b0c      	ldr	r3, [pc, #48]	; (8012814 <prvResetNextTaskUnblockTime+0x38>)
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d104      	bne.n	80127f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80127ec:	4b0a      	ldr	r3, [pc, #40]	; (8012818 <prvResetNextTaskUnblockTime+0x3c>)
 80127ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80127f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80127f4:	e008      	b.n	8012808 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127f6:	4b07      	ldr	r3, [pc, #28]	; (8012814 <prvResetNextTaskUnblockTime+0x38>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	68db      	ldr	r3, [r3, #12]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	685b      	ldr	r3, [r3, #4]
 8012804:	4a04      	ldr	r2, [pc, #16]	; (8012818 <prvResetNextTaskUnblockTime+0x3c>)
 8012806:	6013      	str	r3, [r2, #0]
}
 8012808:	bf00      	nop
 801280a:	370c      	adds	r7, #12
 801280c:	46bd      	mov	sp, r7
 801280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012812:	4770      	bx	lr
 8012814:	20006614 	.word	0x20006614
 8012818:	2000667c 	.word	0x2000667c

0801281c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801281c:	b480      	push	{r7}
 801281e:	b083      	sub	sp, #12
 8012820:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012822:	4b0b      	ldr	r3, [pc, #44]	; (8012850 <xTaskGetSchedulerState+0x34>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d102      	bne.n	8012830 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801282a:	2301      	movs	r3, #1
 801282c:	607b      	str	r3, [r7, #4]
 801282e:	e008      	b.n	8012842 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012830:	4b08      	ldr	r3, [pc, #32]	; (8012854 <xTaskGetSchedulerState+0x38>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d102      	bne.n	801283e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012838:	2302      	movs	r3, #2
 801283a:	607b      	str	r3, [r7, #4]
 801283c:	e001      	b.n	8012842 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801283e:	2300      	movs	r3, #0
 8012840:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012842:	687b      	ldr	r3, [r7, #4]
	}
 8012844:	4618      	mov	r0, r3
 8012846:	370c      	adds	r7, #12
 8012848:	46bd      	mov	sp, r7
 801284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284e:	4770      	bx	lr
 8012850:	20006668 	.word	0x20006668
 8012854:	20006684 	.word	0x20006684

08012858 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012864:	2300      	movs	r3, #0
 8012866:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d069      	beq.n	8012942 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012872:	4b36      	ldr	r3, [pc, #216]	; (801294c <xTaskPriorityInherit+0xf4>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012878:	429a      	cmp	r2, r3
 801287a:	d259      	bcs.n	8012930 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	699b      	ldr	r3, [r3, #24]
 8012880:	2b00      	cmp	r3, #0
 8012882:	db06      	blt.n	8012892 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012884:	4b31      	ldr	r3, [pc, #196]	; (801294c <xTaskPriorityInherit+0xf4>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801288a:	f1c3 0207 	rsb	r2, r3, #7
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	6959      	ldr	r1, [r3, #20]
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801289a:	4613      	mov	r3, r2
 801289c:	009b      	lsls	r3, r3, #2
 801289e:	4413      	add	r3, r2
 80128a0:	009b      	lsls	r3, r3, #2
 80128a2:	4a2b      	ldr	r2, [pc, #172]	; (8012950 <xTaskPriorityInherit+0xf8>)
 80128a4:	4413      	add	r3, r2
 80128a6:	4299      	cmp	r1, r3
 80128a8:	d13a      	bne.n	8012920 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80128aa:	68bb      	ldr	r3, [r7, #8]
 80128ac:	3304      	adds	r3, #4
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7fe f835 	bl	801091e <uxListRemove>
 80128b4:	4603      	mov	r3, r0
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d115      	bne.n	80128e6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128be:	4924      	ldr	r1, [pc, #144]	; (8012950 <xTaskPriorityInherit+0xf8>)
 80128c0:	4613      	mov	r3, r2
 80128c2:	009b      	lsls	r3, r3, #2
 80128c4:	4413      	add	r3, r2
 80128c6:	009b      	lsls	r3, r3, #2
 80128c8:	440b      	add	r3, r1
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d10a      	bne.n	80128e6 <xTaskPriorityInherit+0x8e>
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128d4:	2201      	movs	r2, #1
 80128d6:	fa02 f303 	lsl.w	r3, r2, r3
 80128da:	43da      	mvns	r2, r3
 80128dc:	4b1d      	ldr	r3, [pc, #116]	; (8012954 <xTaskPriorityInherit+0xfc>)
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	4013      	ands	r3, r2
 80128e2:	4a1c      	ldr	r2, [pc, #112]	; (8012954 <xTaskPriorityInherit+0xfc>)
 80128e4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80128e6:	4b19      	ldr	r3, [pc, #100]	; (801294c <xTaskPriorityInherit+0xf4>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128f4:	2201      	movs	r2, #1
 80128f6:	409a      	lsls	r2, r3
 80128f8:	4b16      	ldr	r3, [pc, #88]	; (8012954 <xTaskPriorityInherit+0xfc>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	4313      	orrs	r3, r2
 80128fe:	4a15      	ldr	r2, [pc, #84]	; (8012954 <xTaskPriorityInherit+0xfc>)
 8012900:	6013      	str	r3, [r2, #0]
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012906:	4613      	mov	r3, r2
 8012908:	009b      	lsls	r3, r3, #2
 801290a:	4413      	add	r3, r2
 801290c:	009b      	lsls	r3, r3, #2
 801290e:	4a10      	ldr	r2, [pc, #64]	; (8012950 <xTaskPriorityInherit+0xf8>)
 8012910:	441a      	add	r2, r3
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	3304      	adds	r3, #4
 8012916:	4619      	mov	r1, r3
 8012918:	4610      	mov	r0, r2
 801291a:	f7fd ffa3 	bl	8010864 <vListInsertEnd>
 801291e:	e004      	b.n	801292a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012920:	4b0a      	ldr	r3, [pc, #40]	; (801294c <xTaskPriorityInherit+0xf4>)
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801292a:	2301      	movs	r3, #1
 801292c:	60fb      	str	r3, [r7, #12]
 801292e:	e008      	b.n	8012942 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012934:	4b05      	ldr	r3, [pc, #20]	; (801294c <xTaskPriorityInherit+0xf4>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801293a:	429a      	cmp	r2, r3
 801293c:	d201      	bcs.n	8012942 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801293e:	2301      	movs	r3, #1
 8012940:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012942:	68fb      	ldr	r3, [r7, #12]
	}
 8012944:	4618      	mov	r0, r3
 8012946:	3710      	adds	r7, #16
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}
 801294c:	2000655c 	.word	0x2000655c
 8012950:	20006560 	.word	0x20006560
 8012954:	20006664 	.word	0x20006664

08012958 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012958:	b580      	push	{r7, lr}
 801295a:	b086      	sub	sp, #24
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012964:	2300      	movs	r3, #0
 8012966:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d072      	beq.n	8012a54 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801296e:	4b3c      	ldr	r3, [pc, #240]	; (8012a60 <xTaskPriorityDisinherit+0x108>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	693a      	ldr	r2, [r7, #16]
 8012974:	429a      	cmp	r2, r3
 8012976:	d00c      	beq.n	8012992 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8012978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801297c:	b672      	cpsid	i
 801297e:	f383 8811 	msr	BASEPRI, r3
 8012982:	f3bf 8f6f 	isb	sy
 8012986:	f3bf 8f4f 	dsb	sy
 801298a:	b662      	cpsie	i
 801298c:	60fb      	str	r3, [r7, #12]
}
 801298e:	bf00      	nop
 8012990:	e7fe      	b.n	8012990 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012996:	2b00      	cmp	r3, #0
 8012998:	d10c      	bne.n	80129b4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801299a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801299e:	b672      	cpsid	i
 80129a0:	f383 8811 	msr	BASEPRI, r3
 80129a4:	f3bf 8f6f 	isb	sy
 80129a8:	f3bf 8f4f 	dsb	sy
 80129ac:	b662      	cpsie	i
 80129ae:	60bb      	str	r3, [r7, #8]
}
 80129b0:	bf00      	nop
 80129b2:	e7fe      	b.n	80129b2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80129b4:	693b      	ldr	r3, [r7, #16]
 80129b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129b8:	1e5a      	subs	r2, r3, #1
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d044      	beq.n	8012a54 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d140      	bne.n	8012a54 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	3304      	adds	r3, #4
 80129d6:	4618      	mov	r0, r3
 80129d8:	f7fd ffa1 	bl	801091e <uxListRemove>
 80129dc:	4603      	mov	r3, r0
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d115      	bne.n	8012a0e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80129e2:	693b      	ldr	r3, [r7, #16]
 80129e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129e6:	491f      	ldr	r1, [pc, #124]	; (8012a64 <xTaskPriorityDisinherit+0x10c>)
 80129e8:	4613      	mov	r3, r2
 80129ea:	009b      	lsls	r3, r3, #2
 80129ec:	4413      	add	r3, r2
 80129ee:	009b      	lsls	r3, r3, #2
 80129f0:	440b      	add	r3, r1
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d10a      	bne.n	8012a0e <xTaskPriorityDisinherit+0xb6>
 80129f8:	693b      	ldr	r3, [r7, #16]
 80129fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129fc:	2201      	movs	r2, #1
 80129fe:	fa02 f303 	lsl.w	r3, r2, r3
 8012a02:	43da      	mvns	r2, r3
 8012a04:	4b18      	ldr	r3, [pc, #96]	; (8012a68 <xTaskPriorityDisinherit+0x110>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	4013      	ands	r3, r2
 8012a0a:	4a17      	ldr	r2, [pc, #92]	; (8012a68 <xTaskPriorityDisinherit+0x110>)
 8012a0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a1a:	f1c3 0207 	rsb	r2, r3, #7
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a26:	2201      	movs	r2, #1
 8012a28:	409a      	lsls	r2, r3
 8012a2a:	4b0f      	ldr	r3, [pc, #60]	; (8012a68 <xTaskPriorityDisinherit+0x110>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	4313      	orrs	r3, r2
 8012a30:	4a0d      	ldr	r2, [pc, #52]	; (8012a68 <xTaskPriorityDisinherit+0x110>)
 8012a32:	6013      	str	r3, [r2, #0]
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a38:	4613      	mov	r3, r2
 8012a3a:	009b      	lsls	r3, r3, #2
 8012a3c:	4413      	add	r3, r2
 8012a3e:	009b      	lsls	r3, r3, #2
 8012a40:	4a08      	ldr	r2, [pc, #32]	; (8012a64 <xTaskPriorityDisinherit+0x10c>)
 8012a42:	441a      	add	r2, r3
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	3304      	adds	r3, #4
 8012a48:	4619      	mov	r1, r3
 8012a4a:	4610      	mov	r0, r2
 8012a4c:	f7fd ff0a 	bl	8010864 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012a50:	2301      	movs	r3, #1
 8012a52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012a54:	697b      	ldr	r3, [r7, #20]
	}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3718      	adds	r7, #24
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	2000655c 	.word	0x2000655c
 8012a64:	20006560 	.word	0x20006560
 8012a68:	20006664 	.word	0x20006664

08012a6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b088      	sub	sp, #32
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	f000 8087 	beq.w	8012b94 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012a86:	69bb      	ldr	r3, [r7, #24]
 8012a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d10c      	bne.n	8012aa8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8012a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a92:	b672      	cpsid	i
 8012a94:	f383 8811 	msr	BASEPRI, r3
 8012a98:	f3bf 8f6f 	isb	sy
 8012a9c:	f3bf 8f4f 	dsb	sy
 8012aa0:	b662      	cpsie	i
 8012aa2:	60fb      	str	r3, [r7, #12]
}
 8012aa4:	bf00      	nop
 8012aa6:	e7fe      	b.n	8012aa6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012aa8:	69bb      	ldr	r3, [r7, #24]
 8012aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aac:	683a      	ldr	r2, [r7, #0]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d902      	bls.n	8012ab8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	61fb      	str	r3, [r7, #28]
 8012ab6:	e002      	b.n	8012abe <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012ab8:	69bb      	ldr	r3, [r7, #24]
 8012aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012abc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012abe:	69bb      	ldr	r3, [r7, #24]
 8012ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ac2:	69fa      	ldr	r2, [r7, #28]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d065      	beq.n	8012b94 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012ac8:	69bb      	ldr	r3, [r7, #24]
 8012aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012acc:	697a      	ldr	r2, [r7, #20]
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	d160      	bne.n	8012b94 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012ad2:	4b32      	ldr	r3, [pc, #200]	; (8012b9c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	69ba      	ldr	r2, [r7, #24]
 8012ad8:	429a      	cmp	r2, r3
 8012ada:	d10c      	bne.n	8012af6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8012adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae0:	b672      	cpsid	i
 8012ae2:	f383 8811 	msr	BASEPRI, r3
 8012ae6:	f3bf 8f6f 	isb	sy
 8012aea:	f3bf 8f4f 	dsb	sy
 8012aee:	b662      	cpsie	i
 8012af0:	60bb      	str	r3, [r7, #8]
}
 8012af2:	bf00      	nop
 8012af4:	e7fe      	b.n	8012af4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012af6:	69bb      	ldr	r3, [r7, #24]
 8012af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012afa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012afc:	69bb      	ldr	r3, [r7, #24]
 8012afe:	69fa      	ldr	r2, [r7, #28]
 8012b00:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012b02:	69bb      	ldr	r3, [r7, #24]
 8012b04:	699b      	ldr	r3, [r3, #24]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	db04      	blt.n	8012b14 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b0a:	69fb      	ldr	r3, [r7, #28]
 8012b0c:	f1c3 0207 	rsb	r2, r3, #7
 8012b10:	69bb      	ldr	r3, [r7, #24]
 8012b12:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012b14:	69bb      	ldr	r3, [r7, #24]
 8012b16:	6959      	ldr	r1, [r3, #20]
 8012b18:	693a      	ldr	r2, [r7, #16]
 8012b1a:	4613      	mov	r3, r2
 8012b1c:	009b      	lsls	r3, r3, #2
 8012b1e:	4413      	add	r3, r2
 8012b20:	009b      	lsls	r3, r3, #2
 8012b22:	4a1f      	ldr	r2, [pc, #124]	; (8012ba0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012b24:	4413      	add	r3, r2
 8012b26:	4299      	cmp	r1, r3
 8012b28:	d134      	bne.n	8012b94 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b2a:	69bb      	ldr	r3, [r7, #24]
 8012b2c:	3304      	adds	r3, #4
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7fd fef5 	bl	801091e <uxListRemove>
 8012b34:	4603      	mov	r3, r0
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d115      	bne.n	8012b66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012b3a:	69bb      	ldr	r3, [r7, #24]
 8012b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b3e:	4918      	ldr	r1, [pc, #96]	; (8012ba0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012b40:	4613      	mov	r3, r2
 8012b42:	009b      	lsls	r3, r3, #2
 8012b44:	4413      	add	r3, r2
 8012b46:	009b      	lsls	r3, r3, #2
 8012b48:	440b      	add	r3, r1
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d10a      	bne.n	8012b66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8012b50:	69bb      	ldr	r3, [r7, #24]
 8012b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b54:	2201      	movs	r2, #1
 8012b56:	fa02 f303 	lsl.w	r3, r2, r3
 8012b5a:	43da      	mvns	r2, r3
 8012b5c:	4b11      	ldr	r3, [pc, #68]	; (8012ba4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	4013      	ands	r3, r2
 8012b62:	4a10      	ldr	r2, [pc, #64]	; (8012ba4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012b64:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012b66:	69bb      	ldr	r3, [r7, #24]
 8012b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b6a:	2201      	movs	r2, #1
 8012b6c:	409a      	lsls	r2, r3
 8012b6e:	4b0d      	ldr	r3, [pc, #52]	; (8012ba4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	4313      	orrs	r3, r2
 8012b74:	4a0b      	ldr	r2, [pc, #44]	; (8012ba4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012b76:	6013      	str	r3, [r2, #0]
 8012b78:	69bb      	ldr	r3, [r7, #24]
 8012b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b7c:	4613      	mov	r3, r2
 8012b7e:	009b      	lsls	r3, r3, #2
 8012b80:	4413      	add	r3, r2
 8012b82:	009b      	lsls	r3, r3, #2
 8012b84:	4a06      	ldr	r2, [pc, #24]	; (8012ba0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012b86:	441a      	add	r2, r3
 8012b88:	69bb      	ldr	r3, [r7, #24]
 8012b8a:	3304      	adds	r3, #4
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	4610      	mov	r0, r2
 8012b90:	f7fd fe68 	bl	8010864 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012b94:	bf00      	nop
 8012b96:	3720      	adds	r7, #32
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}
 8012b9c:	2000655c 	.word	0x2000655c
 8012ba0:	20006560 	.word	0x20006560
 8012ba4:	20006664 	.word	0x20006664

08012ba8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012ba8:	b480      	push	{r7}
 8012baa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012bac:	4b07      	ldr	r3, [pc, #28]	; (8012bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d004      	beq.n	8012bbe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012bb4:	4b05      	ldr	r3, [pc, #20]	; (8012bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012bba:	3201      	adds	r2, #1
 8012bbc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012bbe:	4b03      	ldr	r3, [pc, #12]	; (8012bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
	}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bca:	4770      	bx	lr
 8012bcc:	2000655c 	.word	0x2000655c

08012bd0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b084      	sub	sp, #16
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
 8012bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012bda:	4b29      	ldr	r3, [pc, #164]	; (8012c80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012be0:	4b28      	ldr	r3, [pc, #160]	; (8012c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	3304      	adds	r3, #4
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7fd fe99 	bl	801091e <uxListRemove>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d10b      	bne.n	8012c0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012bf2:	4b24      	ldr	r3, [pc, #144]	; (8012c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8012bfe:	43da      	mvns	r2, r3
 8012c00:	4b21      	ldr	r3, [pc, #132]	; (8012c88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	4013      	ands	r3, r2
 8012c06:	4a20      	ldr	r2, [pc, #128]	; (8012c88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012c08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c10:	d10a      	bne.n	8012c28 <prvAddCurrentTaskToDelayedList+0x58>
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d007      	beq.n	8012c28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c18:	4b1a      	ldr	r3, [pc, #104]	; (8012c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	3304      	adds	r3, #4
 8012c1e:	4619      	mov	r1, r3
 8012c20:	481a      	ldr	r0, [pc, #104]	; (8012c8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8012c22:	f7fd fe1f 	bl	8010864 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012c26:	e026      	b.n	8012c76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012c28:	68fa      	ldr	r2, [r7, #12]
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	4413      	add	r3, r2
 8012c2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012c30:	4b14      	ldr	r3, [pc, #80]	; (8012c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	68ba      	ldr	r2, [r7, #8]
 8012c36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012c38:	68ba      	ldr	r2, [r7, #8]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	429a      	cmp	r2, r3
 8012c3e:	d209      	bcs.n	8012c54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c40:	4b13      	ldr	r3, [pc, #76]	; (8012c90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012c42:	681a      	ldr	r2, [r3, #0]
 8012c44:	4b0f      	ldr	r3, [pc, #60]	; (8012c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	3304      	adds	r3, #4
 8012c4a:	4619      	mov	r1, r3
 8012c4c:	4610      	mov	r0, r2
 8012c4e:	f7fd fe2d 	bl	80108ac <vListInsert>
}
 8012c52:	e010      	b.n	8012c76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c54:	4b0f      	ldr	r3, [pc, #60]	; (8012c94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012c56:	681a      	ldr	r2, [r3, #0]
 8012c58:	4b0a      	ldr	r3, [pc, #40]	; (8012c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	3304      	adds	r3, #4
 8012c5e:	4619      	mov	r1, r3
 8012c60:	4610      	mov	r0, r2
 8012c62:	f7fd fe23 	bl	80108ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012c66:	4b0c      	ldr	r3, [pc, #48]	; (8012c98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	68ba      	ldr	r2, [r7, #8]
 8012c6c:	429a      	cmp	r2, r3
 8012c6e:	d202      	bcs.n	8012c76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012c70:	4a09      	ldr	r2, [pc, #36]	; (8012c98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	6013      	str	r3, [r2, #0]
}
 8012c76:	bf00      	nop
 8012c78:	3710      	adds	r7, #16
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bd80      	pop	{r7, pc}
 8012c7e:	bf00      	nop
 8012c80:	20006660 	.word	0x20006660
 8012c84:	2000655c 	.word	0x2000655c
 8012c88:	20006664 	.word	0x20006664
 8012c8c:	20006648 	.word	0x20006648
 8012c90:	20006618 	.word	0x20006618
 8012c94:	20006614 	.word	0x20006614
 8012c98:	2000667c 	.word	0x2000667c

08012c9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012c9c:	b480      	push	{r7}
 8012c9e:	b085      	sub	sp, #20
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	60f8      	str	r0, [r7, #12]
 8012ca4:	60b9      	str	r1, [r7, #8]
 8012ca6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	3b04      	subs	r3, #4
 8012cac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	3b04      	subs	r3, #4
 8012cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012cbc:	68bb      	ldr	r3, [r7, #8]
 8012cbe:	f023 0201 	bic.w	r2, r3, #1
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	3b04      	subs	r3, #4
 8012cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012ccc:	4a0c      	ldr	r2, [pc, #48]	; (8012d00 <pxPortInitialiseStack+0x64>)
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	3b14      	subs	r3, #20
 8012cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012cd8:	687a      	ldr	r2, [r7, #4]
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	3b04      	subs	r3, #4
 8012ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	f06f 0202 	mvn.w	r2, #2
 8012cea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	3b20      	subs	r3, #32
 8012cf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3714      	adds	r7, #20
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfe:	4770      	bx	lr
 8012d00:	08012d05 	.word	0x08012d05

08012d04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012d04:	b480      	push	{r7}
 8012d06:	b085      	sub	sp, #20
 8012d08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012d0e:	4b14      	ldr	r3, [pc, #80]	; (8012d60 <prvTaskExitError+0x5c>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d16:	d00c      	beq.n	8012d32 <prvTaskExitError+0x2e>
	__asm volatile
 8012d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d1c:	b672      	cpsid	i
 8012d1e:	f383 8811 	msr	BASEPRI, r3
 8012d22:	f3bf 8f6f 	isb	sy
 8012d26:	f3bf 8f4f 	dsb	sy
 8012d2a:	b662      	cpsie	i
 8012d2c:	60fb      	str	r3, [r7, #12]
}
 8012d2e:	bf00      	nop
 8012d30:	e7fe      	b.n	8012d30 <prvTaskExitError+0x2c>
	__asm volatile
 8012d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d36:	b672      	cpsid	i
 8012d38:	f383 8811 	msr	BASEPRI, r3
 8012d3c:	f3bf 8f6f 	isb	sy
 8012d40:	f3bf 8f4f 	dsb	sy
 8012d44:	b662      	cpsie	i
 8012d46:	60bb      	str	r3, [r7, #8]
}
 8012d48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012d4a:	bf00      	nop
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d0fc      	beq.n	8012d4c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012d52:	bf00      	nop
 8012d54:	bf00      	nop
 8012d56:	3714      	adds	r7, #20
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5e:	4770      	bx	lr
 8012d60:	20000024 	.word	0x20000024
	...

08012d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012d70:	4b07      	ldr	r3, [pc, #28]	; (8012d90 <pxCurrentTCBConst2>)
 8012d72:	6819      	ldr	r1, [r3, #0]
 8012d74:	6808      	ldr	r0, [r1, #0]
 8012d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d7a:	f380 8809 	msr	PSP, r0
 8012d7e:	f3bf 8f6f 	isb	sy
 8012d82:	f04f 0000 	mov.w	r0, #0
 8012d86:	f380 8811 	msr	BASEPRI, r0
 8012d8a:	4770      	bx	lr
 8012d8c:	f3af 8000 	nop.w

08012d90 <pxCurrentTCBConst2>:
 8012d90:	2000655c 	.word	0x2000655c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012d94:	bf00      	nop
 8012d96:	bf00      	nop

08012d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012d98:	4808      	ldr	r0, [pc, #32]	; (8012dbc <prvPortStartFirstTask+0x24>)
 8012d9a:	6800      	ldr	r0, [r0, #0]
 8012d9c:	6800      	ldr	r0, [r0, #0]
 8012d9e:	f380 8808 	msr	MSP, r0
 8012da2:	f04f 0000 	mov.w	r0, #0
 8012da6:	f380 8814 	msr	CONTROL, r0
 8012daa:	b662      	cpsie	i
 8012dac:	b661      	cpsie	f
 8012dae:	f3bf 8f4f 	dsb	sy
 8012db2:	f3bf 8f6f 	isb	sy
 8012db6:	df00      	svc	0
 8012db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012dba:	bf00      	nop
 8012dbc:	e000ed08 	.word	0xe000ed08

08012dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b084      	sub	sp, #16
 8012dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012dc6:	4b37      	ldr	r3, [pc, #220]	; (8012ea4 <xPortStartScheduler+0xe4>)
 8012dc8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	781b      	ldrb	r3, [r3, #0]
 8012dce:	b2db      	uxtb	r3, r3
 8012dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	22ff      	movs	r2, #255	; 0xff
 8012dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	b2db      	uxtb	r3, r3
 8012dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012de0:	78fb      	ldrb	r3, [r7, #3]
 8012de2:	b2db      	uxtb	r3, r3
 8012de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012de8:	b2da      	uxtb	r2, r3
 8012dea:	4b2f      	ldr	r3, [pc, #188]	; (8012ea8 <xPortStartScheduler+0xe8>)
 8012dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012dee:	4b2f      	ldr	r3, [pc, #188]	; (8012eac <xPortStartScheduler+0xec>)
 8012df0:	2207      	movs	r2, #7
 8012df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012df4:	e009      	b.n	8012e0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012df6:	4b2d      	ldr	r3, [pc, #180]	; (8012eac <xPortStartScheduler+0xec>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	3b01      	subs	r3, #1
 8012dfc:	4a2b      	ldr	r2, [pc, #172]	; (8012eac <xPortStartScheduler+0xec>)
 8012dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012e00:	78fb      	ldrb	r3, [r7, #3]
 8012e02:	b2db      	uxtb	r3, r3
 8012e04:	005b      	lsls	r3, r3, #1
 8012e06:	b2db      	uxtb	r3, r3
 8012e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012e0a:	78fb      	ldrb	r3, [r7, #3]
 8012e0c:	b2db      	uxtb	r3, r3
 8012e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e12:	2b80      	cmp	r3, #128	; 0x80
 8012e14:	d0ef      	beq.n	8012df6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012e16:	4b25      	ldr	r3, [pc, #148]	; (8012eac <xPortStartScheduler+0xec>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	f1c3 0307 	rsb	r3, r3, #7
 8012e1e:	2b04      	cmp	r3, #4
 8012e20:	d00c      	beq.n	8012e3c <xPortStartScheduler+0x7c>
	__asm volatile
 8012e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e26:	b672      	cpsid	i
 8012e28:	f383 8811 	msr	BASEPRI, r3
 8012e2c:	f3bf 8f6f 	isb	sy
 8012e30:	f3bf 8f4f 	dsb	sy
 8012e34:	b662      	cpsie	i
 8012e36:	60bb      	str	r3, [r7, #8]
}
 8012e38:	bf00      	nop
 8012e3a:	e7fe      	b.n	8012e3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012e3c:	4b1b      	ldr	r3, [pc, #108]	; (8012eac <xPortStartScheduler+0xec>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	021b      	lsls	r3, r3, #8
 8012e42:	4a1a      	ldr	r2, [pc, #104]	; (8012eac <xPortStartScheduler+0xec>)
 8012e44:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012e46:	4b19      	ldr	r3, [pc, #100]	; (8012eac <xPortStartScheduler+0xec>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012e4e:	4a17      	ldr	r2, [pc, #92]	; (8012eac <xPortStartScheduler+0xec>)
 8012e50:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	b2da      	uxtb	r2, r3
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012e5a:	4b15      	ldr	r3, [pc, #84]	; (8012eb0 <xPortStartScheduler+0xf0>)
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	4a14      	ldr	r2, [pc, #80]	; (8012eb0 <xPortStartScheduler+0xf0>)
 8012e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012e64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012e66:	4b12      	ldr	r3, [pc, #72]	; (8012eb0 <xPortStartScheduler+0xf0>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	4a11      	ldr	r2, [pc, #68]	; (8012eb0 <xPortStartScheduler+0xf0>)
 8012e6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012e70:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012e72:	f000 f8dd 	bl	8013030 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012e76:	4b0f      	ldr	r3, [pc, #60]	; (8012eb4 <xPortStartScheduler+0xf4>)
 8012e78:	2200      	movs	r2, #0
 8012e7a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012e7c:	f000 f8fc 	bl	8013078 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012e80:	4b0d      	ldr	r3, [pc, #52]	; (8012eb8 <xPortStartScheduler+0xf8>)
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	4a0c      	ldr	r2, [pc, #48]	; (8012eb8 <xPortStartScheduler+0xf8>)
 8012e86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012e8a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012e8c:	f7ff ff84 	bl	8012d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012e90:	f7ff fa72 	bl	8012378 <vTaskSwitchContext>
	prvTaskExitError();
 8012e94:	f7ff ff36 	bl	8012d04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012e98:	2300      	movs	r3, #0
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3710      	adds	r7, #16
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	e000e400 	.word	0xe000e400
 8012ea8:	20006688 	.word	0x20006688
 8012eac:	2000668c 	.word	0x2000668c
 8012eb0:	e000ed20 	.word	0xe000ed20
 8012eb4:	20000024 	.word	0x20000024
 8012eb8:	e000ef34 	.word	0xe000ef34

08012ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012ebc:	b480      	push	{r7}
 8012ebe:	b083      	sub	sp, #12
 8012ec0:	af00      	add	r7, sp, #0
	__asm volatile
 8012ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec6:	b672      	cpsid	i
 8012ec8:	f383 8811 	msr	BASEPRI, r3
 8012ecc:	f3bf 8f6f 	isb	sy
 8012ed0:	f3bf 8f4f 	dsb	sy
 8012ed4:	b662      	cpsie	i
 8012ed6:	607b      	str	r3, [r7, #4]
}
 8012ed8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012eda:	4b10      	ldr	r3, [pc, #64]	; (8012f1c <vPortEnterCritical+0x60>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	3301      	adds	r3, #1
 8012ee0:	4a0e      	ldr	r2, [pc, #56]	; (8012f1c <vPortEnterCritical+0x60>)
 8012ee2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012ee4:	4b0d      	ldr	r3, [pc, #52]	; (8012f1c <vPortEnterCritical+0x60>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	2b01      	cmp	r3, #1
 8012eea:	d111      	bne.n	8012f10 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012eec:	4b0c      	ldr	r3, [pc, #48]	; (8012f20 <vPortEnterCritical+0x64>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	b2db      	uxtb	r3, r3
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d00c      	beq.n	8012f10 <vPortEnterCritical+0x54>
	__asm volatile
 8012ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012efa:	b672      	cpsid	i
 8012efc:	f383 8811 	msr	BASEPRI, r3
 8012f00:	f3bf 8f6f 	isb	sy
 8012f04:	f3bf 8f4f 	dsb	sy
 8012f08:	b662      	cpsie	i
 8012f0a:	603b      	str	r3, [r7, #0]
}
 8012f0c:	bf00      	nop
 8012f0e:	e7fe      	b.n	8012f0e <vPortEnterCritical+0x52>
	}
}
 8012f10:	bf00      	nop
 8012f12:	370c      	adds	r7, #12
 8012f14:	46bd      	mov	sp, r7
 8012f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1a:	4770      	bx	lr
 8012f1c:	20000024 	.word	0x20000024
 8012f20:	e000ed04 	.word	0xe000ed04

08012f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012f24:	b480      	push	{r7}
 8012f26:	b083      	sub	sp, #12
 8012f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012f2a:	4b13      	ldr	r3, [pc, #76]	; (8012f78 <vPortExitCritical+0x54>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d10c      	bne.n	8012f4c <vPortExitCritical+0x28>
	__asm volatile
 8012f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f36:	b672      	cpsid	i
 8012f38:	f383 8811 	msr	BASEPRI, r3
 8012f3c:	f3bf 8f6f 	isb	sy
 8012f40:	f3bf 8f4f 	dsb	sy
 8012f44:	b662      	cpsie	i
 8012f46:	607b      	str	r3, [r7, #4]
}
 8012f48:	bf00      	nop
 8012f4a:	e7fe      	b.n	8012f4a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012f4c:	4b0a      	ldr	r3, [pc, #40]	; (8012f78 <vPortExitCritical+0x54>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	3b01      	subs	r3, #1
 8012f52:	4a09      	ldr	r2, [pc, #36]	; (8012f78 <vPortExitCritical+0x54>)
 8012f54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012f56:	4b08      	ldr	r3, [pc, #32]	; (8012f78 <vPortExitCritical+0x54>)
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d105      	bne.n	8012f6a <vPortExitCritical+0x46>
 8012f5e:	2300      	movs	r3, #0
 8012f60:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	f383 8811 	msr	BASEPRI, r3
}
 8012f68:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012f6a:	bf00      	nop
 8012f6c:	370c      	adds	r7, #12
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f74:	4770      	bx	lr
 8012f76:	bf00      	nop
 8012f78:	20000024 	.word	0x20000024
 8012f7c:	00000000 	.word	0x00000000

08012f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012f80:	f3ef 8009 	mrs	r0, PSP
 8012f84:	f3bf 8f6f 	isb	sy
 8012f88:	4b15      	ldr	r3, [pc, #84]	; (8012fe0 <pxCurrentTCBConst>)
 8012f8a:	681a      	ldr	r2, [r3, #0]
 8012f8c:	f01e 0f10 	tst.w	lr, #16
 8012f90:	bf08      	it	eq
 8012f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f9a:	6010      	str	r0, [r2, #0]
 8012f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012fa4:	b672      	cpsid	i
 8012fa6:	f380 8811 	msr	BASEPRI, r0
 8012faa:	f3bf 8f4f 	dsb	sy
 8012fae:	f3bf 8f6f 	isb	sy
 8012fb2:	b662      	cpsie	i
 8012fb4:	f7ff f9e0 	bl	8012378 <vTaskSwitchContext>
 8012fb8:	f04f 0000 	mov.w	r0, #0
 8012fbc:	f380 8811 	msr	BASEPRI, r0
 8012fc0:	bc09      	pop	{r0, r3}
 8012fc2:	6819      	ldr	r1, [r3, #0]
 8012fc4:	6808      	ldr	r0, [r1, #0]
 8012fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fca:	f01e 0f10 	tst.w	lr, #16
 8012fce:	bf08      	it	eq
 8012fd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012fd4:	f380 8809 	msr	PSP, r0
 8012fd8:	f3bf 8f6f 	isb	sy
 8012fdc:	4770      	bx	lr
 8012fde:	bf00      	nop

08012fe0 <pxCurrentTCBConst>:
 8012fe0:	2000655c 	.word	0x2000655c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012fe4:	bf00      	nop
 8012fe6:	bf00      	nop

08012fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0
	__asm volatile
 8012fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff2:	b672      	cpsid	i
 8012ff4:	f383 8811 	msr	BASEPRI, r3
 8012ff8:	f3bf 8f6f 	isb	sy
 8012ffc:	f3bf 8f4f 	dsb	sy
 8013000:	b662      	cpsie	i
 8013002:	607b      	str	r3, [r7, #4]
}
 8013004:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013006:	f7ff f8fd 	bl	8012204 <xTaskIncrementTick>
 801300a:	4603      	mov	r3, r0
 801300c:	2b00      	cmp	r3, #0
 801300e:	d003      	beq.n	8013018 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013010:	4b06      	ldr	r3, [pc, #24]	; (801302c <SysTick_Handler+0x44>)
 8013012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013016:	601a      	str	r2, [r3, #0]
 8013018:	2300      	movs	r3, #0
 801301a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	f383 8811 	msr	BASEPRI, r3
}
 8013022:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013024:	bf00      	nop
 8013026:	3708      	adds	r7, #8
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}
 801302c:	e000ed04 	.word	0xe000ed04

08013030 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013030:	b480      	push	{r7}
 8013032:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013034:	4b0b      	ldr	r3, [pc, #44]	; (8013064 <vPortSetupTimerInterrupt+0x34>)
 8013036:	2200      	movs	r2, #0
 8013038:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801303a:	4b0b      	ldr	r3, [pc, #44]	; (8013068 <vPortSetupTimerInterrupt+0x38>)
 801303c:	2200      	movs	r2, #0
 801303e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013040:	4b0a      	ldr	r3, [pc, #40]	; (801306c <vPortSetupTimerInterrupt+0x3c>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	4a0a      	ldr	r2, [pc, #40]	; (8013070 <vPortSetupTimerInterrupt+0x40>)
 8013046:	fba2 2303 	umull	r2, r3, r2, r3
 801304a:	099b      	lsrs	r3, r3, #6
 801304c:	4a09      	ldr	r2, [pc, #36]	; (8013074 <vPortSetupTimerInterrupt+0x44>)
 801304e:	3b01      	subs	r3, #1
 8013050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013052:	4b04      	ldr	r3, [pc, #16]	; (8013064 <vPortSetupTimerInterrupt+0x34>)
 8013054:	2207      	movs	r2, #7
 8013056:	601a      	str	r2, [r3, #0]
}
 8013058:	bf00      	nop
 801305a:	46bd      	mov	sp, r7
 801305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013060:	4770      	bx	lr
 8013062:	bf00      	nop
 8013064:	e000e010 	.word	0xe000e010
 8013068:	e000e018 	.word	0xe000e018
 801306c:	20000004 	.word	0x20000004
 8013070:	10624dd3 	.word	0x10624dd3
 8013074:	e000e014 	.word	0xe000e014

08013078 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013078:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013088 <vPortEnableVFP+0x10>
 801307c:	6801      	ldr	r1, [r0, #0]
 801307e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013082:	6001      	str	r1, [r0, #0]
 8013084:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013086:	bf00      	nop
 8013088:	e000ed88 	.word	0xe000ed88

0801308c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801308c:	b480      	push	{r7}
 801308e:	b085      	sub	sp, #20
 8013090:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013092:	f3ef 8305 	mrs	r3, IPSR
 8013096:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	2b0f      	cmp	r3, #15
 801309c:	d916      	bls.n	80130cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801309e:	4a19      	ldr	r2, [pc, #100]	; (8013104 <vPortValidateInterruptPriority+0x78>)
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	4413      	add	r3, r2
 80130a4:	781b      	ldrb	r3, [r3, #0]
 80130a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80130a8:	4b17      	ldr	r3, [pc, #92]	; (8013108 <vPortValidateInterruptPriority+0x7c>)
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	7afa      	ldrb	r2, [r7, #11]
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d20c      	bcs.n	80130cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80130b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130b6:	b672      	cpsid	i
 80130b8:	f383 8811 	msr	BASEPRI, r3
 80130bc:	f3bf 8f6f 	isb	sy
 80130c0:	f3bf 8f4f 	dsb	sy
 80130c4:	b662      	cpsie	i
 80130c6:	607b      	str	r3, [r7, #4]
}
 80130c8:	bf00      	nop
 80130ca:	e7fe      	b.n	80130ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80130cc:	4b0f      	ldr	r3, [pc, #60]	; (801310c <vPortValidateInterruptPriority+0x80>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80130d4:	4b0e      	ldr	r3, [pc, #56]	; (8013110 <vPortValidateInterruptPriority+0x84>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	429a      	cmp	r2, r3
 80130da:	d90c      	bls.n	80130f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80130dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e0:	b672      	cpsid	i
 80130e2:	f383 8811 	msr	BASEPRI, r3
 80130e6:	f3bf 8f6f 	isb	sy
 80130ea:	f3bf 8f4f 	dsb	sy
 80130ee:	b662      	cpsie	i
 80130f0:	603b      	str	r3, [r7, #0]
}
 80130f2:	bf00      	nop
 80130f4:	e7fe      	b.n	80130f4 <vPortValidateInterruptPriority+0x68>
	}
 80130f6:	bf00      	nop
 80130f8:	3714      	adds	r7, #20
 80130fa:	46bd      	mov	sp, r7
 80130fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013100:	4770      	bx	lr
 8013102:	bf00      	nop
 8013104:	e000e3f0 	.word	0xe000e3f0
 8013108:	20006688 	.word	0x20006688
 801310c:	e000ed0c 	.word	0xe000ed0c
 8013110:	2000668c 	.word	0x2000668c

08013114 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b084      	sub	sp, #16
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	330c      	adds	r3, #12
 8013124:	461a      	mov	r2, r3
 8013126:	6839      	ldr	r1, [r7, #0]
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f002 fcb7 	bl	8015a9c <tcpip_send_msg_wait_sem>
 801312e:	4603      	mov	r3, r0
 8013130:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8013132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d103      	bne.n	8013142 <netconn_apimsg+0x2e>
    return apimsg->err;
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013140:	e001      	b.n	8013146 <netconn_apimsg+0x32>
  }
  return err;
 8013142:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013146:	4618      	mov	r0, r3
 8013148:	3710      	adds	r7, #16
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}
	...

08013150 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b08c      	sub	sp, #48	; 0x30
 8013154:	af00      	add	r7, sp, #0
 8013156:	4603      	mov	r3, r0
 8013158:	603a      	str	r2, [r7, #0]
 801315a:	71fb      	strb	r3, [r7, #7]
 801315c:	460b      	mov	r3, r1
 801315e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8013160:	79fb      	ldrb	r3, [r7, #7]
 8013162:	6839      	ldr	r1, [r7, #0]
 8013164:	4618      	mov	r0, r3
 8013166:	f001 f989 	bl	801447c <netconn_alloc>
 801316a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 801316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801316e:	2b00      	cmp	r3, #0
 8013170:	d054      	beq.n	801321c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8013172:	79bb      	ldrb	r3, [r7, #6]
 8013174:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8013176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013178:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801317a:	f107 0308 	add.w	r3, r7, #8
 801317e:	4619      	mov	r1, r3
 8013180:	4829      	ldr	r0, [pc, #164]	; (8013228 <netconn_new_with_proto_and_callback+0xd8>)
 8013182:	f7ff ffc7 	bl	8013114 <netconn_apimsg>
 8013186:	4603      	mov	r3, r0
 8013188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 801318c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013190:	2b00      	cmp	r3, #0
 8013192:	d043      	beq.n	801321c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8013194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013196:	685b      	ldr	r3, [r3, #4]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d005      	beq.n	80131a8 <netconn_new_with_proto_and_callback+0x58>
 801319c:	4b23      	ldr	r3, [pc, #140]	; (801322c <netconn_new_with_proto_and_callback+0xdc>)
 801319e:	22a3      	movs	r2, #163	; 0xa3
 80131a0:	4923      	ldr	r1, [pc, #140]	; (8013230 <netconn_new_with_proto_and_callback+0xe0>)
 80131a2:	4824      	ldr	r0, [pc, #144]	; (8013234 <netconn_new_with_proto_and_callback+0xe4>)
 80131a4:	f00f fb04 	bl	80227b0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80131a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131aa:	3310      	adds	r3, #16
 80131ac:	4618      	mov	r0, r3
 80131ae:	f00d ff50 	bl	8021052 <sys_mbox_valid>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d105      	bne.n	80131c4 <netconn_new_with_proto_and_callback+0x74>
 80131b8:	4b1c      	ldr	r3, [pc, #112]	; (801322c <netconn_new_with_proto_and_callback+0xdc>)
 80131ba:	22a4      	movs	r2, #164	; 0xa4
 80131bc:	491e      	ldr	r1, [pc, #120]	; (8013238 <netconn_new_with_proto_and_callback+0xe8>)
 80131be:	481d      	ldr	r0, [pc, #116]	; (8013234 <netconn_new_with_proto_and_callback+0xe4>)
 80131c0:	f00f faf6 	bl	80227b0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80131c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c6:	3314      	adds	r3, #20
 80131c8:	4618      	mov	r0, r3
 80131ca:	f00d ff42 	bl	8021052 <sys_mbox_valid>
 80131ce:	4603      	mov	r3, r0
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d005      	beq.n	80131e0 <netconn_new_with_proto_and_callback+0x90>
 80131d4:	4b15      	ldr	r3, [pc, #84]	; (801322c <netconn_new_with_proto_and_callback+0xdc>)
 80131d6:	22a6      	movs	r2, #166	; 0xa6
 80131d8:	4918      	ldr	r1, [pc, #96]	; (801323c <netconn_new_with_proto_and_callback+0xec>)
 80131da:	4816      	ldr	r0, [pc, #88]	; (8013234 <netconn_new_with_proto_and_callback+0xe4>)
 80131dc:	f00f fae8 	bl	80227b0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80131e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e2:	330c      	adds	r3, #12
 80131e4:	4618      	mov	r0, r3
 80131e6:	f00d ffc5 	bl	8021174 <sys_sem_valid>
 80131ea:	4603      	mov	r3, r0
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d105      	bne.n	80131fc <netconn_new_with_proto_and_callback+0xac>
 80131f0:	4b0e      	ldr	r3, [pc, #56]	; (801322c <netconn_new_with_proto_and_callback+0xdc>)
 80131f2:	22a9      	movs	r2, #169	; 0xa9
 80131f4:	4912      	ldr	r1, [pc, #72]	; (8013240 <netconn_new_with_proto_and_callback+0xf0>)
 80131f6:	480f      	ldr	r0, [pc, #60]	; (8013234 <netconn_new_with_proto_and_callback+0xe4>)
 80131f8:	f00f fada 	bl	80227b0 <iprintf>
      sys_sem_free(&conn->op_completed);
 80131fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fe:	330c      	adds	r3, #12
 8013200:	4618      	mov	r0, r3
 8013202:	f00d ffaa 	bl	802115a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8013206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013208:	3310      	adds	r3, #16
 801320a:	4618      	mov	r0, r3
 801320c:	f00d fe9a 	bl	8020f44 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8013210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013212:	2007      	movs	r0, #7
 8013214:	f003 f9f0 	bl	80165f8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8013218:	2300      	movs	r3, #0
 801321a:	e000      	b.n	801321e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 801321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801321e:	4618      	mov	r0, r3
 8013220:	3730      	adds	r7, #48	; 0x30
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
 8013226:	bf00      	nop
 8013228:	08014451 	.word	0x08014451
 801322c:	08023d40 	.word	0x08023d40
 8013230:	08023d74 	.word	0x08023d74
 8013234:	08023d98 	.word	0x08023d98
 8013238:	08023dc0 	.word	0x08023dc0
 801323c:	08023dd8 	.word	0x08023dd8
 8013240:	08023dfc 	.word	0x08023dfc

08013244 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b08c      	sub	sp, #48	; 0x30
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d101      	bne.n	8013256 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8013252:	2300      	movs	r3, #0
 8013254:	e014      	b.n	8013280 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801325a:	2329      	movs	r3, #41	; 0x29
 801325c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 801325e:	f107 030c 	add.w	r3, r7, #12
 8013262:	4619      	mov	r1, r3
 8013264:	4808      	ldr	r0, [pc, #32]	; (8013288 <netconn_prepare_delete+0x44>)
 8013266:	f7ff ff55 	bl	8013114 <netconn_apimsg>
 801326a:	4603      	mov	r3, r0
 801326c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8013270:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8013274:	2b00      	cmp	r3, #0
 8013276:	d002      	beq.n	801327e <netconn_prepare_delete+0x3a>
    return err;
 8013278:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801327c:	e000      	b.n	8013280 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 801327e:	2300      	movs	r3, #0
}
 8013280:	4618      	mov	r0, r3
 8013282:	3730      	adds	r7, #48	; 0x30
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}
 8013288:	080149bd 	.word	0x080149bd

0801328c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b084      	sub	sp, #16
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d101      	bne.n	801329e <netconn_delete+0x12>
    return ERR_OK;
 801329a:	2300      	movs	r3, #0
 801329c:	e00d      	b.n	80132ba <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 801329e:	6878      	ldr	r0, [r7, #4]
 80132a0:	f7ff ffd0 	bl	8013244 <netconn_prepare_delete>
 80132a4:	4603      	mov	r3, r0
 80132a6:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80132a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d102      	bne.n	80132b6 <netconn_delete+0x2a>
    netconn_free(conn);
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	f001 f951 	bl	8014558 <netconn_free>
  }
  return err;
 80132b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	3710      	adds	r7, #16
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}
	...

080132c4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b08e      	sub	sp, #56	; 0x38
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	4613      	mov	r3, r2
 80132d0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d109      	bne.n	80132ec <netconn_bind+0x28>
 80132d8:	4b11      	ldr	r3, [pc, #68]	; (8013320 <netconn_bind+0x5c>)
 80132da:	f44f 729c 	mov.w	r2, #312	; 0x138
 80132de:	4911      	ldr	r1, [pc, #68]	; (8013324 <netconn_bind+0x60>)
 80132e0:	4811      	ldr	r0, [pc, #68]	; (8013328 <netconn_bind+0x64>)
 80132e2:	f00f fa65 	bl	80227b0 <iprintf>
 80132e6:	f06f 030f 	mvn.w	r3, #15
 80132ea:	e015      	b.n	8013318 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d101      	bne.n	80132f6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80132f2:	4b0e      	ldr	r3, [pc, #56]	; (801332c <netconn_bind+0x68>)
 80132f4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80132fe:	88fb      	ldrh	r3, [r7, #6]
 8013300:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8013302:	f107 0314 	add.w	r3, r7, #20
 8013306:	4619      	mov	r1, r3
 8013308:	4809      	ldr	r0, [pc, #36]	; (8013330 <netconn_bind+0x6c>)
 801330a:	f7ff ff03 	bl	8013114 <netconn_apimsg>
 801330e:	4603      	mov	r3, r0
 8013310:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8013314:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8013318:	4618      	mov	r0, r3
 801331a:	3738      	adds	r7, #56	; 0x38
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}
 8013320:	08023d40 	.word	0x08023d40
 8013324:	08023e78 	.word	0x08023e78
 8013328:	08023d98 	.word	0x08023d98
 801332c:	08027398 	.word	0x08027398
 8013330:	08014b85 	.word	0x08014b85

08013334 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b08e      	sub	sp, #56	; 0x38
 8013338:	af00      	add	r7, sp, #0
 801333a:	60f8      	str	r0, [r7, #12]
 801333c:	60b9      	str	r1, [r7, #8]
 801333e:	4613      	mov	r3, r2
 8013340:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d109      	bne.n	801335c <netconn_connect+0x28>
 8013348:	4b11      	ldr	r3, [pc, #68]	; (8013390 <netconn_connect+0x5c>)
 801334a:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 801334e:	4911      	ldr	r1, [pc, #68]	; (8013394 <netconn_connect+0x60>)
 8013350:	4811      	ldr	r0, [pc, #68]	; (8013398 <netconn_connect+0x64>)
 8013352:	f00f fa2d 	bl	80227b0 <iprintf>
 8013356:	f06f 030f 	mvn.w	r3, #15
 801335a:	e015      	b.n	8013388 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d101      	bne.n	8013366 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8013362:	4b0e      	ldr	r3, [pc, #56]	; (801339c <netconn_connect+0x68>)
 8013364:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 801336e:	88fb      	ldrh	r3, [r7, #6]
 8013370:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8013372:	f107 0314 	add.w	r3, r7, #20
 8013376:	4619      	mov	r1, r3
 8013378:	4809      	ldr	r0, [pc, #36]	; (80133a0 <netconn_connect+0x6c>)
 801337a:	f7ff fecb 	bl	8013114 <netconn_apimsg>
 801337e:	4603      	mov	r3, r0
 8013380:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8013384:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8013388:	4618      	mov	r0, r3
 801338a:	3738      	adds	r7, #56	; 0x38
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}
 8013390:	08023d40 	.word	0x08023d40
 8013394:	08023eb4 	.word	0x08023eb4
 8013398:	08023d98 	.word	0x08023d98
 801339c:	08027398 	.word	0x08027398
 80133a0:	08014d19 	.word	0x08014d19

080133a4 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b08c      	sub	sp, #48	; 0x30
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	460b      	mov	r3, r1
 80133ae:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d109      	bne.n	80133ca <netconn_listen_with_backlog+0x26>
 80133b6:	4b0d      	ldr	r3, [pc, #52]	; (80133ec <netconn_listen_with_backlog+0x48>)
 80133b8:	f240 12bb 	movw	r2, #443	; 0x1bb
 80133bc:	490c      	ldr	r1, [pc, #48]	; (80133f0 <netconn_listen_with_backlog+0x4c>)
 80133be:	480d      	ldr	r0, [pc, #52]	; (80133f4 <netconn_listen_with_backlog+0x50>)
 80133c0:	f00f f9f6 	bl	80227b0 <iprintf>
 80133c4:	f06f 030f 	mvn.w	r3, #15
 80133c8:	e00c      	b.n	80133e4 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80133ce:	f107 030c 	add.w	r3, r7, #12
 80133d2:	4619      	mov	r1, r3
 80133d4:	4808      	ldr	r0, [pc, #32]	; (80133f8 <netconn_listen_with_backlog+0x54>)
 80133d6:	f7ff fe9d 	bl	8013114 <netconn_apimsg>
 80133da:	4603      	mov	r3, r0
 80133dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80133e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	3730      	adds	r7, #48	; 0x30
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}
 80133ec:	08023d40 	.word	0x08023d40
 80133f0:	08023ef8 	.word	0x08023ef8
 80133f4:	08023d98 	.word	0x08023d98
 80133f8:	08014e95 	.word	0x08014e95

080133fc <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b086      	sub	sp, #24
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d109      	bne.n	8013420 <netconn_accept+0x24>
 801340c:	4b3d      	ldr	r3, [pc, #244]	; (8013504 <netconn_accept+0x108>)
 801340e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8013412:	493d      	ldr	r1, [pc, #244]	; (8013508 <netconn_accept+0x10c>)
 8013414:	483d      	ldr	r0, [pc, #244]	; (801350c <netconn_accept+0x110>)
 8013416:	f00f f9cb 	bl	80227b0 <iprintf>
 801341a:	f06f 030f 	mvn.w	r3, #15
 801341e:	e06c      	b.n	80134fa <netconn_accept+0xfe>
  *new_conn = NULL;
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	2200      	movs	r2, #0
 8013424:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d109      	bne.n	8013440 <netconn_accept+0x44>
 801342c:	4b35      	ldr	r3, [pc, #212]	; (8013504 <netconn_accept+0x108>)
 801342e:	f240 12e3 	movw	r2, #483	; 0x1e3
 8013432:	4937      	ldr	r1, [pc, #220]	; (8013510 <netconn_accept+0x114>)
 8013434:	4835      	ldr	r0, [pc, #212]	; (801350c <netconn_accept+0x110>)
 8013436:	f00f f9bb 	bl	80227b0 <iprintf>
 801343a:	f06f 030f 	mvn.w	r3, #15
 801343e:	e05c      	b.n	80134fa <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f000 fb9a 	bl	8013b7a <netconn_err>
 8013446:	4603      	mov	r3, r0
 8013448:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 801344a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d002      	beq.n	8013458 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8013452:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013456:	e050      	b.n	80134fa <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	3314      	adds	r3, #20
 801345c:	4618      	mov	r0, r3
 801345e:	f00d fdf8 	bl	8021052 <sys_mbox_valid>
 8013462:	4603      	mov	r3, r0
 8013464:	2b00      	cmp	r3, #0
 8013466:	d005      	beq.n	8013474 <netconn_accept+0x78>
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	7f1b      	ldrb	r3, [r3, #28]
 801346c:	f003 0301 	and.w	r3, r3, #1
 8013470:	2b00      	cmp	r3, #0
 8013472:	d002      	beq.n	801347a <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8013474:	f06f 030e 	mvn.w	r3, #14
 8013478:	e03f      	b.n	80134fa <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	7f1b      	ldrb	r3, [r3, #28]
 801347e:	f003 0302 	and.w	r3, r3, #2
 8013482:	2b00      	cmp	r3, #0
 8013484:	d00e      	beq.n	80134a4 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	3314      	adds	r3, #20
 801348a:	f107 020c 	add.w	r2, r7, #12
 801348e:	4611      	mov	r1, r2
 8013490:	4618      	mov	r0, r3
 8013492:	f00d fdc2 	bl	802101a <sys_arch_mbox_tryfetch>
 8013496:	4603      	mov	r3, r0
 8013498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801349c:	d10a      	bne.n	80134b4 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 801349e:	f06f 0306 	mvn.w	r3, #6
 80134a2:	e02a      	b.n	80134fa <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	3314      	adds	r3, #20
 80134a8:	f107 010c 	add.w	r1, r7, #12
 80134ac:	2200      	movs	r2, #0
 80134ae:	4618      	mov	r0, r3
 80134b0:	f00d fd74 	bl	8020f9c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d005      	beq.n	80134c8 <netconn_accept+0xcc>
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134c0:	2200      	movs	r2, #0
 80134c2:	2101      	movs	r1, #1
 80134c4:	6878      	ldr	r0, [r7, #4]
 80134c6:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	f107 0213 	add.w	r2, r7, #19
 80134ce:	4611      	mov	r1, r2
 80134d0:	4618      	mov	r0, r3
 80134d2:	f000 fba3 	bl	8013c1c <lwip_netconn_is_err_msg>
 80134d6:	4603      	mov	r3, r0
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d002      	beq.n	80134e2 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80134dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80134e0:	e00b      	b.n	80134fa <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d102      	bne.n	80134ee <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80134e8:	f06f 030e 	mvn.w	r3, #14
 80134ec:	e005      	b.n	80134fa <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	697a      	ldr	r2, [r7, #20]
 80134f6:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80134f8:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80134fa:	4618      	mov	r0, r3
 80134fc:	3718      	adds	r7, #24
 80134fe:	46bd      	mov	sp, r7
 8013500:	bd80      	pop	{r7, pc}
 8013502:	bf00      	nop
 8013504:	08023d40 	.word	0x08023d40
 8013508:	08023f18 	.word	0x08023f18
 801350c:	08023d98 	.word	0x08023d98
 8013510:	08023f38 	.word	0x08023f38

08013514 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b088      	sub	sp, #32
 8013518:	af00      	add	r7, sp, #0
 801351a:	60f8      	str	r0, [r7, #12]
 801351c:	60b9      	str	r1, [r7, #8]
 801351e:	4613      	mov	r3, r2
 8013520:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8013522:	2300      	movs	r3, #0
 8013524:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d109      	bne.n	8013540 <netconn_recv_data+0x2c>
 801352c:	4b58      	ldr	r3, [pc, #352]	; (8013690 <netconn_recv_data+0x17c>)
 801352e:	f44f 7212 	mov.w	r2, #584	; 0x248
 8013532:	4958      	ldr	r1, [pc, #352]	; (8013694 <netconn_recv_data+0x180>)
 8013534:	4858      	ldr	r0, [pc, #352]	; (8013698 <netconn_recv_data+0x184>)
 8013536:	f00f f93b 	bl	80227b0 <iprintf>
 801353a:	f06f 030f 	mvn.w	r3, #15
 801353e:	e0a2      	b.n	8013686 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8013540:	68bb      	ldr	r3, [r7, #8]
 8013542:	2200      	movs	r2, #0
 8013544:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d109      	bne.n	8013560 <netconn_recv_data+0x4c>
 801354c:	4b50      	ldr	r3, [pc, #320]	; (8013690 <netconn_recv_data+0x17c>)
 801354e:	f240 224a 	movw	r2, #586	; 0x24a
 8013552:	4952      	ldr	r1, [pc, #328]	; (801369c <netconn_recv_data+0x188>)
 8013554:	4850      	ldr	r0, [pc, #320]	; (8013698 <netconn_recv_data+0x184>)
 8013556:	f00f f92b 	bl	80227b0 <iprintf>
 801355a:	f06f 030f 	mvn.w	r3, #15
 801355e:	e092      	b.n	8013686 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	3310      	adds	r3, #16
 8013564:	4618      	mov	r0, r3
 8013566:	f00d fd74 	bl	8021052 <sys_mbox_valid>
 801356a:	4603      	mov	r3, r0
 801356c:	2b00      	cmp	r3, #0
 801356e:	d10e      	bne.n	801358e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8013570:	68f8      	ldr	r0, [r7, #12]
 8013572:	f000 fb02 	bl	8013b7a <netconn_err>
 8013576:	4603      	mov	r3, r0
 8013578:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 801357a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d002      	beq.n	8013588 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8013582:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8013586:	e07e      	b.n	8013686 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8013588:	f06f 030a 	mvn.w	r3, #10
 801358c:	e07b      	b.n	8013686 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	7f1b      	ldrb	r3, [r3, #28]
 8013592:	f003 0302 	and.w	r3, r3, #2
 8013596:	2b00      	cmp	r3, #0
 8013598:	d10f      	bne.n	80135ba <netconn_recv_data+0xa6>
 801359a:	79fb      	ldrb	r3, [r7, #7]
 801359c:	f003 0304 	and.w	r3, r3, #4
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d10a      	bne.n	80135ba <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	7f1b      	ldrb	r3, [r3, #28]
 80135a8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d104      	bne.n	80135ba <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d023      	beq.n	8013602 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	3310      	adds	r3, #16
 80135be:	f107 0218 	add.w	r2, r7, #24
 80135c2:	4611      	mov	r1, r2
 80135c4:	4618      	mov	r0, r3
 80135c6:	f00d fd28 	bl	802101a <sys_arch_mbox_tryfetch>
 80135ca:	4603      	mov	r3, r0
 80135cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80135d0:	d11f      	bne.n	8013612 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80135d2:	68f8      	ldr	r0, [r7, #12]
 80135d4:	f000 fad1 	bl	8013b7a <netconn_err>
 80135d8:	4603      	mov	r3, r0
 80135da:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80135dc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d002      	beq.n	80135ea <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80135e4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80135e8:	e04d      	b.n	8013686 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	7f1b      	ldrb	r3, [r3, #28]
 80135ee:	f003 0301 	and.w	r3, r3, #1
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d002      	beq.n	80135fc <netconn_recv_data+0xe8>
        return ERR_CONN;
 80135f6:	f06f 030a 	mvn.w	r3, #10
 80135fa:	e044      	b.n	8013686 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80135fc:	f06f 0306 	mvn.w	r3, #6
 8013600:	e041      	b.n	8013686 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	3310      	adds	r3, #16
 8013606:	f107 0118 	add.w	r1, r7, #24
 801360a:	2200      	movs	r2, #0
 801360c:	4618      	mov	r0, r3
 801360e:	f00d fcc5 	bl	8020f9c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	781b      	ldrb	r3, [r3, #0]
 8013616:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801361a:	2b10      	cmp	r3, #16
 801361c:	d117      	bne.n	801364e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801361e:	69bb      	ldr	r3, [r7, #24]
 8013620:	f107 0217 	add.w	r2, r7, #23
 8013624:	4611      	mov	r1, r2
 8013626:	4618      	mov	r0, r3
 8013628:	f000 faf8 	bl	8013c1c <lwip_netconn_is_err_msg>
 801362c:	4603      	mov	r3, r0
 801362e:	2b00      	cmp	r3, #0
 8013630:	d009      	beq.n	8013646 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8013632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013636:	f113 0f0f 	cmn.w	r3, #15
 801363a:	d101      	bne.n	8013640 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 801363c:	2300      	movs	r3, #0
 801363e:	e022      	b.n	8013686 <netconn_recv_data+0x172>
      }
      return err;
 8013640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013644:	e01f      	b.n	8013686 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8013646:	69bb      	ldr	r3, [r7, #24]
 8013648:	891b      	ldrh	r3, [r3, #8]
 801364a:	83fb      	strh	r3, [r7, #30]
 801364c:	e00d      	b.n	801366a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801364e:	69bb      	ldr	r3, [r7, #24]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d106      	bne.n	8013662 <netconn_recv_data+0x14e>
 8013654:	4b0e      	ldr	r3, [pc, #56]	; (8013690 <netconn_recv_data+0x17c>)
 8013656:	f240 2291 	movw	r2, #657	; 0x291
 801365a:	4911      	ldr	r1, [pc, #68]	; (80136a0 <netconn_recv_data+0x18c>)
 801365c:	480e      	ldr	r0, [pc, #56]	; (8013698 <netconn_recv_data+0x184>)
 801365e:	f00f f8a7 	bl	80227b0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8013662:	69bb      	ldr	r3, [r7, #24]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	891b      	ldrh	r3, [r3, #8]
 8013668:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801366e:	2b00      	cmp	r3, #0
 8013670:	d005      	beq.n	801367e <netconn_recv_data+0x16a>
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013676:	8bfa      	ldrh	r2, [r7, #30]
 8013678:	2101      	movs	r1, #1
 801367a:	68f8      	ldr	r0, [r7, #12]
 801367c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801367e:	69ba      	ldr	r2, [r7, #24]
 8013680:	68bb      	ldr	r3, [r7, #8]
 8013682:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8013684:	2300      	movs	r3, #0
}
 8013686:	4618      	mov	r0, r3
 8013688:	3720      	adds	r7, #32
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}
 801368e:	bf00      	nop
 8013690:	08023d40 	.word	0x08023d40
 8013694:	08023f58 	.word	0x08023f58
 8013698:	08023d98 	.word	0x08023d98
 801369c:	08023f78 	.word	0x08023f78
 80136a0:	08023f94 	.word	0x08023f94

080136a4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b084      	sub	sp, #16
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	60f8      	str	r0, [r7, #12]
 80136ac:	60b9      	str	r1, [r7, #8]
 80136ae:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d005      	beq.n	80136c2 <netconn_tcp_recvd_msg+0x1e>
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	781b      	ldrb	r3, [r3, #0]
 80136ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80136be:	2b10      	cmp	r3, #16
 80136c0:	d009      	beq.n	80136d6 <netconn_tcp_recvd_msg+0x32>
 80136c2:	4b0c      	ldr	r3, [pc, #48]	; (80136f4 <netconn_tcp_recvd_msg+0x50>)
 80136c4:	f240 22a7 	movw	r2, #679	; 0x2a7
 80136c8:	490b      	ldr	r1, [pc, #44]	; (80136f8 <netconn_tcp_recvd_msg+0x54>)
 80136ca:	480c      	ldr	r0, [pc, #48]	; (80136fc <netconn_tcp_recvd_msg+0x58>)
 80136cc:	f00f f870 	bl	80227b0 <iprintf>
 80136d0:	f06f 030f 	mvn.w	r3, #15
 80136d4:	e00a      	b.n	80136ec <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	68fa      	ldr	r2, [r7, #12]
 80136da:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	68ba      	ldr	r2, [r7, #8]
 80136e0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80136e2:	6879      	ldr	r1, [r7, #4]
 80136e4:	4806      	ldr	r0, [pc, #24]	; (8013700 <netconn_tcp_recvd_msg+0x5c>)
 80136e6:	f7ff fd15 	bl	8013114 <netconn_apimsg>
 80136ea:	4603      	mov	r3, r0
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	3710      	adds	r7, #16
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}
 80136f4:	08023d40 	.word	0x08023d40
 80136f8:	08023fa0 	.word	0x08023fa0
 80136fc:	08023d98 	.word	0x08023d98
 8013700:	0801505f 	.word	0x0801505f

08013704 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b090      	sub	sp, #64	; 0x40
 8013708:	af00      	add	r7, sp, #0
 801370a:	60f8      	str	r0, [r7, #12]
 801370c:	60b9      	str	r1, [r7, #8]
 801370e:	4613      	mov	r3, r2
 8013710:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	3310      	adds	r3, #16
 8013716:	4618      	mov	r0, r3
 8013718:	f00d fc9b 	bl	8021052 <sys_mbox_valid>
 801371c:	4603      	mov	r3, r0
 801371e:	2b00      	cmp	r3, #0
 8013720:	d102      	bne.n	8013728 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8013722:	f06f 030a 	mvn.w	r3, #10
 8013726:	e06d      	b.n	8013804 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	7f1b      	ldrb	r3, [r3, #28]
 801372c:	b25b      	sxtb	r3, r3
 801372e:	2b00      	cmp	r3, #0
 8013730:	da07      	bge.n	8013742 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	7f1b      	ldrb	r3, [r3, #28]
 8013736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801373a:	b2da      	uxtb	r2, r3
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8013740:	e039      	b.n	80137b6 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8013742:	79fb      	ldrb	r3, [r7, #7]
 8013744:	461a      	mov	r2, r3
 8013746:	68b9      	ldr	r1, [r7, #8]
 8013748:	68f8      	ldr	r0, [r7, #12]
 801374a:	f7ff fee3 	bl	8013514 <netconn_recv_data>
 801374e:	4603      	mov	r3, r0
 8013750:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8013754:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013758:	2b00      	cmp	r3, #0
 801375a:	d002      	beq.n	8013762 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 801375c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013760:	e050      	b.n	8013804 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8013762:	68bb      	ldr	r3, [r7, #8]
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8013768:	79fb      	ldrb	r3, [r7, #7]
 801376a:	f003 0308 	and.w	r3, r3, #8
 801376e:	2b00      	cmp	r3, #0
 8013770:	d10e      	bne.n	8013790 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8013772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013774:	2b00      	cmp	r3, #0
 8013776:	d002      	beq.n	801377e <netconn_recv_data_tcp+0x7a>
 8013778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801377a:	891b      	ldrh	r3, [r3, #8]
 801377c:	e000      	b.n	8013780 <netconn_recv_data_tcp+0x7c>
 801377e:	2301      	movs	r3, #1
 8013780:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8013782:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013784:	f107 0214 	add.w	r2, r7, #20
 8013788:	4619      	mov	r1, r3
 801378a:	68f8      	ldr	r0, [r7, #12]
 801378c:	f7ff ff8a 	bl	80136a4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8013790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013792:	2b00      	cmp	r3, #0
 8013794:	d134      	bne.n	8013800 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8013796:	79fb      	ldrb	r3, [r7, #7]
 8013798:	f003 0310 	and.w	r3, r3, #16
 801379c:	2b00      	cmp	r3, #0
 801379e:	d009      	beq.n	80137b4 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	7f1b      	ldrb	r3, [r3, #28]
 80137a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80137a8:	b2da      	uxtb	r2, r3
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80137ae:	f06f 0306 	mvn.w	r3, #6
 80137b2:	e027      	b.n	8013804 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80137b4:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d005      	beq.n	80137ca <netconn_recv_data_tcp+0xc6>
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137c2:	2200      	movs	r2, #0
 80137c4:	2101      	movs	r1, #1
 80137c6:	68f8      	ldr	r0, [r7, #12]
 80137c8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	685b      	ldr	r3, [r3, #4]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d10f      	bne.n	80137f2 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80137d2:	68f8      	ldr	r0, [r7, #12]
 80137d4:	f000 f9d1 	bl	8013b7a <netconn_err>
 80137d8:	4603      	mov	r3, r0
 80137da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80137de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d002      	beq.n	80137ec <netconn_recv_data_tcp+0xe8>
          return err;
 80137e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80137ea:	e00b      	b.n	8013804 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80137ec:	f06f 030d 	mvn.w	r3, #13
 80137f0:	e008      	b.n	8013804 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80137f2:	2101      	movs	r1, #1
 80137f4:	68f8      	ldr	r0, [r7, #12]
 80137f6:	f000 f983 	bl	8013b00 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80137fa:	f06f 030e 	mvn.w	r3, #14
 80137fe:	e001      	b.n	8013804 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8013800:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8013804:	4618      	mov	r0, r3
 8013806:	3740      	adds	r7, #64	; 0x40
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}

0801380c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b086      	sub	sp, #24
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
 8013814:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8013816:	2300      	movs	r3, #0
 8013818:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d109      	bne.n	8013834 <netconn_recv+0x28>
 8013820:	4b32      	ldr	r3, [pc, #200]	; (80138ec <netconn_recv+0xe0>)
 8013822:	f240 3263 	movw	r2, #867	; 0x363
 8013826:	4932      	ldr	r1, [pc, #200]	; (80138f0 <netconn_recv+0xe4>)
 8013828:	4832      	ldr	r0, [pc, #200]	; (80138f4 <netconn_recv+0xe8>)
 801382a:	f00e ffc1 	bl	80227b0 <iprintf>
 801382e:	f06f 030f 	mvn.w	r3, #15
 8013832:	e056      	b.n	80138e2 <netconn_recv+0xd6>
  *new_buf = NULL;
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	2200      	movs	r2, #0
 8013838:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d109      	bne.n	8013854 <netconn_recv+0x48>
 8013840:	4b2a      	ldr	r3, [pc, #168]	; (80138ec <netconn_recv+0xe0>)
 8013842:	f240 3265 	movw	r2, #869	; 0x365
 8013846:	492c      	ldr	r1, [pc, #176]	; (80138f8 <netconn_recv+0xec>)
 8013848:	482a      	ldr	r0, [pc, #168]	; (80138f4 <netconn_recv+0xe8>)
 801384a:	f00e ffb1 	bl	80227b0 <iprintf>
 801384e:	f06f 030f 	mvn.w	r3, #15
 8013852:	e046      	b.n	80138e2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	781b      	ldrb	r3, [r3, #0]
 8013858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801385c:	2b10      	cmp	r3, #16
 801385e:	d13a      	bne.n	80138d6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8013860:	2300      	movs	r3, #0
 8013862:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8013864:	2006      	movs	r0, #6
 8013866:	f002 fe51 	bl	801650c <memp_malloc>
 801386a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 801386c:	697b      	ldr	r3, [r7, #20]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d102      	bne.n	8013878 <netconn_recv+0x6c>
      return ERR_MEM;
 8013872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013876:	e034      	b.n	80138e2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8013878:	f107 030c 	add.w	r3, r7, #12
 801387c:	2200      	movs	r2, #0
 801387e:	4619      	mov	r1, r3
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f7ff ff3f 	bl	8013704 <netconn_recv_data_tcp>
 8013886:	4603      	mov	r3, r0
 8013888:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801388a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d006      	beq.n	80138a0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8013892:	6979      	ldr	r1, [r7, #20]
 8013894:	2006      	movs	r0, #6
 8013896:	f002 feaf 	bl	80165f8 <memp_free>
      return err;
 801389a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801389e:	e020      	b.n	80138e2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d106      	bne.n	80138b4 <netconn_recv+0xa8>
 80138a6:	4b11      	ldr	r3, [pc, #68]	; (80138ec <netconn_recv+0xe0>)
 80138a8:	f240 3279 	movw	r2, #889	; 0x379
 80138ac:	4913      	ldr	r1, [pc, #76]	; (80138fc <netconn_recv+0xf0>)
 80138ae:	4811      	ldr	r0, [pc, #68]	; (80138f4 <netconn_recv+0xe8>)
 80138b0:	f00e ff7e 	bl	80227b0 <iprintf>

    buf->p = p;
 80138b4:	68fa      	ldr	r2, [r7, #12]
 80138b6:	697b      	ldr	r3, [r7, #20]
 80138b8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80138ba:	68fa      	ldr	r2, [r7, #12]
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	2200      	movs	r2, #0
 80138c4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80138c6:	697b      	ldr	r3, [r7, #20]
 80138c8:	2200      	movs	r2, #0
 80138ca:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	697a      	ldr	r2, [r7, #20]
 80138d0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80138d2:	2300      	movs	r3, #0
 80138d4:	e005      	b.n	80138e2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80138d6:	2200      	movs	r2, #0
 80138d8:	6839      	ldr	r1, [r7, #0]
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f7ff fe1a 	bl	8013514 <netconn_recv_data>
 80138e0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80138e2:	4618      	mov	r0, r3
 80138e4:	3718      	adds	r7, #24
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}
 80138ea:	bf00      	nop
 80138ec:	08023d40 	.word	0x08023d40
 80138f0:	08023f58 	.word	0x08023f58
 80138f4:	08023d98 	.word	0x08023d98
 80138f8:	08023f78 	.word	0x08023f78
 80138fc:	08023ff0 	.word	0x08023ff0

08013900 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b08c      	sub	sp, #48	; 0x30
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d109      	bne.n	8013924 <netconn_send+0x24>
 8013910:	4b0e      	ldr	r3, [pc, #56]	; (801394c <netconn_send+0x4c>)
 8013912:	f240 32b2 	movw	r2, #946	; 0x3b2
 8013916:	490e      	ldr	r1, [pc, #56]	; (8013950 <netconn_send+0x50>)
 8013918:	480e      	ldr	r0, [pc, #56]	; (8013954 <netconn_send+0x54>)
 801391a:	f00e ff49 	bl	80227b0 <iprintf>
 801391e:	f06f 030f 	mvn.w	r3, #15
 8013922:	e00e      	b.n	8013942 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 801392c:	f107 030c 	add.w	r3, r7, #12
 8013930:	4619      	mov	r1, r3
 8013932:	4809      	ldr	r0, [pc, #36]	; (8013958 <netconn_send+0x58>)
 8013934:	f7ff fbee 	bl	8013114 <netconn_apimsg>
 8013938:	4603      	mov	r3, r0
 801393a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 801393e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8013942:	4618      	mov	r0, r3
 8013944:	3730      	adds	r7, #48	; 0x30
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}
 801394a:	bf00      	nop
 801394c:	08023d40 	.word	0x08023d40
 8013950:	08023ffc 	.word	0x08023ffc
 8013954:	08023d98 	.word	0x08023d98
 8013958:	08014fc5 	.word	0x08014fc5

0801395c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b088      	sub	sp, #32
 8013960:	af02      	add	r7, sp, #8
 8013962:	60f8      	str	r0, [r7, #12]
 8013964:	60b9      	str	r1, [r7, #8]
 8013966:	607a      	str	r2, [r7, #4]
 8013968:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8013972:	78fa      	ldrb	r2, [r7, #3]
 8013974:	f107 0110 	add.w	r1, r7, #16
 8013978:	6a3b      	ldr	r3, [r7, #32]
 801397a:	9300      	str	r3, [sp, #0]
 801397c:	4613      	mov	r3, r2
 801397e:	2201      	movs	r2, #1
 8013980:	68f8      	ldr	r0, [r7, #12]
 8013982:	f000 f805 	bl	8013990 <netconn_write_vectors_partly>
 8013986:	4603      	mov	r3, r0
}
 8013988:	4618      	mov	r0, r3
 801398a:	3718      	adds	r7, #24
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}

08013990 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b092      	sub	sp, #72	; 0x48
 8013994:	af00      	add	r7, sp, #0
 8013996:	60f8      	str	r0, [r7, #12]
 8013998:	60b9      	str	r1, [r7, #8]
 801399a:	4611      	mov	r1, r2
 801399c:	461a      	mov	r2, r3
 801399e:	460b      	mov	r3, r1
 80139a0:	80fb      	strh	r3, [r7, #6]
 80139a2:	4613      	mov	r3, r2
 80139a4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d109      	bne.n	80139c0 <netconn_write_vectors_partly+0x30>
 80139ac:	4b4e      	ldr	r3, [pc, #312]	; (8013ae8 <netconn_write_vectors_partly+0x158>)
 80139ae:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80139b2:	494e      	ldr	r1, [pc, #312]	; (8013aec <netconn_write_vectors_partly+0x15c>)
 80139b4:	484e      	ldr	r0, [pc, #312]	; (8013af0 <netconn_write_vectors_partly+0x160>)
 80139b6:	f00e fefb 	bl	80227b0 <iprintf>
 80139ba:	f06f 030f 	mvn.w	r3, #15
 80139be:	e08e      	b.n	8013ade <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	781b      	ldrb	r3, [r3, #0]
 80139c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80139c8:	2b10      	cmp	r3, #16
 80139ca:	d009      	beq.n	80139e0 <netconn_write_vectors_partly+0x50>
 80139cc:	4b46      	ldr	r3, [pc, #280]	; (8013ae8 <netconn_write_vectors_partly+0x158>)
 80139ce:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80139d2:	4948      	ldr	r1, [pc, #288]	; (8013af4 <netconn_write_vectors_partly+0x164>)
 80139d4:	4846      	ldr	r0, [pc, #280]	; (8013af0 <netconn_write_vectors_partly+0x160>)
 80139d6:	f00e feeb 	bl	80227b0 <iprintf>
 80139da:	f06f 0305 	mvn.w	r3, #5
 80139de:	e07e      	b.n	8013ade <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	7f1b      	ldrb	r3, [r3, #28]
 80139e4:	f003 0302 	and.w	r3, r3, #2
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d104      	bne.n	80139f6 <netconn_write_vectors_partly+0x66>
 80139ec:	797b      	ldrb	r3, [r7, #5]
 80139ee:	f003 0304 	and.w	r3, r3, #4
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d001      	beq.n	80139fa <netconn_write_vectors_partly+0x6a>
 80139f6:	2301      	movs	r3, #1
 80139f8:	e000      	b.n	80139fc <netconn_write_vectors_partly+0x6c>
 80139fa:	2300      	movs	r3, #0
 80139fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8013a00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d005      	beq.n	8013a14 <netconn_write_vectors_partly+0x84>
 8013a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d102      	bne.n	8013a14 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8013a0e:	f06f 0305 	mvn.w	r3, #5
 8013a12:	e064      	b.n	8013ade <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8013a14:	2300      	movs	r3, #0
 8013a16:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8013a18:	2300      	movs	r3, #0
 8013a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8013a1c:	e015      	b.n	8013a4a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8013a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a20:	00db      	lsls	r3, r3, #3
 8013a22:	68ba      	ldr	r2, [r7, #8]
 8013a24:	4413      	add	r3, r2
 8013a26:	685b      	ldr	r3, [r3, #4]
 8013a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a2a:	4413      	add	r3, r2
 8013a2c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8013a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a30:	00db      	lsls	r3, r3, #3
 8013a32:	68ba      	ldr	r2, [r7, #8]
 8013a34:	4413      	add	r3, r2
 8013a36:	685b      	ldr	r3, [r3, #4]
 8013a38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	d202      	bcs.n	8013a44 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8013a3e:	f06f 0305 	mvn.w	r3, #5
 8013a42:	e04c      	b.n	8013ade <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8013a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a46:	3301      	adds	r3, #1
 8013a48:	643b      	str	r3, [r7, #64]	; 0x40
 8013a4a:	88fb      	ldrh	r3, [r7, #6]
 8013a4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	dbe5      	blt.n	8013a1e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8013a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d101      	bne.n	8013a5c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8013a58:	2300      	movs	r3, #0
 8013a5a:	e040      	b.n	8013ade <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8013a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	da0a      	bge.n	8013a78 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8013a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d102      	bne.n	8013a6e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8013a68:	f06f 0305 	mvn.w	r3, #5
 8013a6c:	e037      	b.n	8013ade <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8013a6e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013a72:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8013a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a76:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8013a80:	88fb      	ldrh	r3, [r7, #6]
 8013a82:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8013a84:	2300      	movs	r3, #0
 8013a86:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8013a88:	797b      	ldrb	r3, [r7, #5]
 8013a8a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8013a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a90:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8013a92:	2300      	movs	r3, #0
 8013a94:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8013a96:	f107 0314 	add.w	r3, r7, #20
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	4816      	ldr	r0, [pc, #88]	; (8013af8 <netconn_write_vectors_partly+0x168>)
 8013a9e:	f7ff fb39 	bl	8013114 <netconn_apimsg>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8013aa8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d114      	bne.n	8013ada <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8013ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d002      	beq.n	8013abc <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8013ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aba:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8013abc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d10a      	bne.n	8013ada <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8013ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d006      	beq.n	8013ada <netconn_write_vectors_partly+0x14a>
 8013acc:	4b06      	ldr	r3, [pc, #24]	; (8013ae8 <netconn_write_vectors_partly+0x158>)
 8013ace:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013ad2:	490a      	ldr	r1, [pc, #40]	; (8013afc <netconn_write_vectors_partly+0x16c>)
 8013ad4:	4806      	ldr	r0, [pc, #24]	; (8013af0 <netconn_write_vectors_partly+0x160>)
 8013ad6:	f00e fe6b 	bl	80227b0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8013ada:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	3748      	adds	r7, #72	; 0x48
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}
 8013ae6:	bf00      	nop
 8013ae8:	08023d40 	.word	0x08023d40
 8013aec:	08024018 	.word	0x08024018
 8013af0:	08023d98 	.word	0x08023d98
 8013af4:	08024034 	.word	0x08024034
 8013af8:	08015461 	.word	0x08015461
 8013afc:	08024058 	.word	0x08024058

08013b00 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b08c      	sub	sp, #48	; 0x30
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
 8013b08:	460b      	mov	r3, r1
 8013b0a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d109      	bne.n	8013b26 <netconn_close_shutdown+0x26>
 8013b12:	4b0f      	ldr	r3, [pc, #60]	; (8013b50 <netconn_close_shutdown+0x50>)
 8013b14:	f240 4247 	movw	r2, #1095	; 0x447
 8013b18:	490e      	ldr	r1, [pc, #56]	; (8013b54 <netconn_close_shutdown+0x54>)
 8013b1a:	480f      	ldr	r0, [pc, #60]	; (8013b58 <netconn_close_shutdown+0x58>)
 8013b1c:	f00e fe48 	bl	80227b0 <iprintf>
 8013b20:	f06f 030f 	mvn.w	r3, #15
 8013b24:	e010      	b.n	8013b48 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8013b2a:	78fb      	ldrb	r3, [r7, #3]
 8013b2c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8013b2e:	2329      	movs	r3, #41	; 0x29
 8013b30:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8013b32:	f107 030c 	add.w	r3, r7, #12
 8013b36:	4619      	mov	r1, r3
 8013b38:	4808      	ldr	r0, [pc, #32]	; (8013b5c <netconn_close_shutdown+0x5c>)
 8013b3a:	f7ff faeb 	bl	8013114 <netconn_apimsg>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8013b44:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3730      	adds	r7, #48	; 0x30
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	08023d40 	.word	0x08023d40
 8013b54:	0802407c 	.word	0x0802407c
 8013b58:	08023d98 	.word	0x08023d98
 8013b5c:	08015579 	.word	0x08015579

08013b60 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b082      	sub	sp, #8
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8013b68:	2103      	movs	r1, #3
 8013b6a:	6878      	ldr	r0, [r7, #4]
 8013b6c:	f7ff ffc8 	bl	8013b00 <netconn_close_shutdown>
 8013b70:	4603      	mov	r3, r0
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	3708      	adds	r7, #8
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}

08013b7a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8013b7a:	b580      	push	{r7, lr}
 8013b7c:	b084      	sub	sp, #16
 8013b7e:	af00      	add	r7, sp, #0
 8013b80:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d101      	bne.n	8013b8c <netconn_err+0x12>
    return ERR_OK;
 8013b88:	2300      	movs	r3, #0
 8013b8a:	e00d      	b.n	8013ba8 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8013b8c:	f00d fb7c 	bl	8021288 <sys_arch_protect>
 8013b90:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	7a1b      	ldrb	r3, [r3, #8]
 8013b96:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8013b9e:	68f8      	ldr	r0, [r7, #12]
 8013ba0:	f00d fb80 	bl	80212a4 <sys_arch_unprotect>
  return err;
 8013ba4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3710      	adds	r7, #16
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}

08013bb0 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b082      	sub	sp, #8
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8013bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bbe:	f113 0f0d 	cmn.w	r3, #13
 8013bc2:	d009      	beq.n	8013bd8 <lwip_netconn_err_to_msg+0x28>
 8013bc4:	f113 0f0d 	cmn.w	r3, #13
 8013bc8:	dc0c      	bgt.n	8013be4 <lwip_netconn_err_to_msg+0x34>
 8013bca:	f113 0f0f 	cmn.w	r3, #15
 8013bce:	d007      	beq.n	8013be0 <lwip_netconn_err_to_msg+0x30>
 8013bd0:	f113 0f0e 	cmn.w	r3, #14
 8013bd4:	d002      	beq.n	8013bdc <lwip_netconn_err_to_msg+0x2c>
 8013bd6:	e005      	b.n	8013be4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8013bd8:	4b0a      	ldr	r3, [pc, #40]	; (8013c04 <lwip_netconn_err_to_msg+0x54>)
 8013bda:	e00e      	b.n	8013bfa <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8013bdc:	4b0a      	ldr	r3, [pc, #40]	; (8013c08 <lwip_netconn_err_to_msg+0x58>)
 8013bde:	e00c      	b.n	8013bfa <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8013be0:	4b0a      	ldr	r3, [pc, #40]	; (8013c0c <lwip_netconn_err_to_msg+0x5c>)
 8013be2:	e00a      	b.n	8013bfa <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8013be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d005      	beq.n	8013bf8 <lwip_netconn_err_to_msg+0x48>
 8013bec:	4b08      	ldr	r3, [pc, #32]	; (8013c10 <lwip_netconn_err_to_msg+0x60>)
 8013bee:	227d      	movs	r2, #125	; 0x7d
 8013bf0:	4908      	ldr	r1, [pc, #32]	; (8013c14 <lwip_netconn_err_to_msg+0x64>)
 8013bf2:	4809      	ldr	r0, [pc, #36]	; (8013c18 <lwip_netconn_err_to_msg+0x68>)
 8013bf4:	f00e fddc 	bl	80227b0 <iprintf>
      return NULL;
 8013bf8:	2300      	movs	r3, #0
  }
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3708      	adds	r7, #8
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
 8013c02:	bf00      	nop
 8013c04:	08027284 	.word	0x08027284
 8013c08:	08027285 	.word	0x08027285
 8013c0c:	08027286 	.word	0x08027286
 8013c10:	08024098 	.word	0x08024098
 8013c14:	080240cc 	.word	0x080240cc
 8013c18:	080240dc 	.word	0x080240dc

08013c1c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d105      	bne.n	8013c38 <lwip_netconn_is_err_msg+0x1c>
 8013c2c:	4b12      	ldr	r3, [pc, #72]	; (8013c78 <lwip_netconn_is_err_msg+0x5c>)
 8013c2e:	2285      	movs	r2, #133	; 0x85
 8013c30:	4912      	ldr	r1, [pc, #72]	; (8013c7c <lwip_netconn_is_err_msg+0x60>)
 8013c32:	4813      	ldr	r0, [pc, #76]	; (8013c80 <lwip_netconn_is_err_msg+0x64>)
 8013c34:	f00e fdbc 	bl	80227b0 <iprintf>

  if (msg == &netconn_aborted) {
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	4a12      	ldr	r2, [pc, #72]	; (8013c84 <lwip_netconn_is_err_msg+0x68>)
 8013c3c:	4293      	cmp	r3, r2
 8013c3e:	d104      	bne.n	8013c4a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	22f3      	movs	r2, #243	; 0xf3
 8013c44:	701a      	strb	r2, [r3, #0]
    return 1;
 8013c46:	2301      	movs	r3, #1
 8013c48:	e012      	b.n	8013c70 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	4a0e      	ldr	r2, [pc, #56]	; (8013c88 <lwip_netconn_is_err_msg+0x6c>)
 8013c4e:	4293      	cmp	r3, r2
 8013c50:	d104      	bne.n	8013c5c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	22f2      	movs	r2, #242	; 0xf2
 8013c56:	701a      	strb	r2, [r3, #0]
    return 1;
 8013c58:	2301      	movs	r3, #1
 8013c5a:	e009      	b.n	8013c70 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	4a0b      	ldr	r2, [pc, #44]	; (8013c8c <lwip_netconn_is_err_msg+0x70>)
 8013c60:	4293      	cmp	r3, r2
 8013c62:	d104      	bne.n	8013c6e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	22f1      	movs	r2, #241	; 0xf1
 8013c68:	701a      	strb	r2, [r3, #0]
    return 1;
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	e000      	b.n	8013c70 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8013c6e:	2300      	movs	r3, #0
}
 8013c70:	4618      	mov	r0, r3
 8013c72:	3708      	adds	r7, #8
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}
 8013c78:	08024098 	.word	0x08024098
 8013c7c:	08024104 	.word	0x08024104
 8013c80:	080240dc 	.word	0x080240dc
 8013c84:	08027284 	.word	0x08027284
 8013c88:	08027285 	.word	0x08027285
 8013c8c:	08027286 	.word	0x08027286

08013c90 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b088      	sub	sp, #32
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	60f8      	str	r0, [r7, #12]
 8013c98:	60b9      	str	r1, [r7, #8]
 8013c9a:	607a      	str	r2, [r7, #4]
 8013c9c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8013c9e:	68bb      	ldr	r3, [r7, #8]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d105      	bne.n	8013cb0 <recv_udp+0x20>
 8013ca4:	4b34      	ldr	r3, [pc, #208]	; (8013d78 <recv_udp+0xe8>)
 8013ca6:	22e5      	movs	r2, #229	; 0xe5
 8013ca8:	4934      	ldr	r1, [pc, #208]	; (8013d7c <recv_udp+0xec>)
 8013caa:	4835      	ldr	r0, [pc, #212]	; (8013d80 <recv_udp+0xf0>)
 8013cac:	f00e fd80 	bl	80227b0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d105      	bne.n	8013cc2 <recv_udp+0x32>
 8013cb6:	4b30      	ldr	r3, [pc, #192]	; (8013d78 <recv_udp+0xe8>)
 8013cb8:	22e6      	movs	r2, #230	; 0xe6
 8013cba:	4932      	ldr	r1, [pc, #200]	; (8013d84 <recv_udp+0xf4>)
 8013cbc:	4830      	ldr	r0, [pc, #192]	; (8013d80 <recv_udp+0xf0>)
 8013cbe:	f00e fd77 	bl	80227b0 <iprintf>
  conn = (struct netconn *)arg;
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8013cc6:	69fb      	ldr	r3, [r7, #28]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d103      	bne.n	8013cd4 <recv_udp+0x44>
    pbuf_free(p);
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f003 fb37 	bl	8017340 <pbuf_free>
    return;
 8013cd2:	e04d      	b.n	8013d70 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8013cd4:	69fb      	ldr	r3, [r7, #28]
 8013cd6:	685b      	ldr	r3, [r3, #4]
 8013cd8:	68ba      	ldr	r2, [r7, #8]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d005      	beq.n	8013cea <recv_udp+0x5a>
 8013cde:	4b26      	ldr	r3, [pc, #152]	; (8013d78 <recv_udp+0xe8>)
 8013ce0:	22ee      	movs	r2, #238	; 0xee
 8013ce2:	4929      	ldr	r1, [pc, #164]	; (8013d88 <recv_udp+0xf8>)
 8013ce4:	4826      	ldr	r0, [pc, #152]	; (8013d80 <recv_udp+0xf0>)
 8013ce6:	f00e fd63 	bl	80227b0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8013cea:	69fb      	ldr	r3, [r7, #28]
 8013cec:	3310      	adds	r3, #16
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f00d f9af 	bl	8021052 <sys_mbox_valid>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d103      	bne.n	8013d02 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f003 fb20 	bl	8017340 <pbuf_free>
    return;
 8013d00:	e036      	b.n	8013d70 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8013d02:	2006      	movs	r0, #6
 8013d04:	f002 fc02 	bl	801650c <memp_malloc>
 8013d08:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8013d0a:	69bb      	ldr	r3, [r7, #24]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d103      	bne.n	8013d18 <recv_udp+0x88>
    pbuf_free(p);
 8013d10:	6878      	ldr	r0, [r7, #4]
 8013d12:	f003 fb15 	bl	8017340 <pbuf_free>
    return;
 8013d16:	e02b      	b.n	8013d70 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8013d18:	69bb      	ldr	r3, [r7, #24]
 8013d1a:	687a      	ldr	r2, [r7, #4]
 8013d1c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8013d1e:	69bb      	ldr	r3, [r7, #24]
 8013d20:	687a      	ldr	r2, [r7, #4]
 8013d22:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d002      	beq.n	8013d30 <recv_udp+0xa0>
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	e000      	b.n	8013d32 <recv_udp+0xa2>
 8013d30:	2300      	movs	r3, #0
 8013d32:	69ba      	ldr	r2, [r7, #24]
 8013d34:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8013d36:	69bb      	ldr	r3, [r7, #24]
 8013d38:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013d3a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	891b      	ldrh	r3, [r3, #8]
 8013d40:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8013d42:	69fb      	ldr	r3, [r7, #28]
 8013d44:	3310      	adds	r3, #16
 8013d46:	69b9      	ldr	r1, [r7, #24]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f00d f90d 	bl	8020f68 <sys_mbox_trypost>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d003      	beq.n	8013d5c <recv_udp+0xcc>
    netbuf_delete(buf);
 8013d54:	69b8      	ldr	r0, [r7, #24]
 8013d56:	f001 fcaf 	bl	80156b8 <netbuf_delete>
    return;
 8013d5a:	e009      	b.n	8013d70 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8013d5c:	69fb      	ldr	r3, [r7, #28]
 8013d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d005      	beq.n	8013d70 <recv_udp+0xe0>
 8013d64:	69fb      	ldr	r3, [r7, #28]
 8013d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d68:	8afa      	ldrh	r2, [r7, #22]
 8013d6a:	2100      	movs	r1, #0
 8013d6c:	69f8      	ldr	r0, [r7, #28]
 8013d6e:	4798      	blx	r3
  }
}
 8013d70:	3720      	adds	r7, #32
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	08024098 	.word	0x08024098
 8013d7c:	08024110 	.word	0x08024110
 8013d80:	080240dc 	.word	0x080240dc
 8013d84:	08024134 	.word	0x08024134
 8013d88:	08024154 	.word	0x08024154

08013d8c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b088      	sub	sp, #32
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	60f8      	str	r0, [r7, #12]
 8013d94:	60b9      	str	r1, [r7, #8]
 8013d96:	607a      	str	r2, [r7, #4]
 8013d98:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d106      	bne.n	8013dae <recv_tcp+0x22>
 8013da0:	4b36      	ldr	r3, [pc, #216]	; (8013e7c <recv_tcp+0xf0>)
 8013da2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013da6:	4936      	ldr	r1, [pc, #216]	; (8013e80 <recv_tcp+0xf4>)
 8013da8:	4836      	ldr	r0, [pc, #216]	; (8013e84 <recv_tcp+0xf8>)
 8013daa:	f00e fd01 	bl	80227b0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d106      	bne.n	8013dc2 <recv_tcp+0x36>
 8013db4:	4b31      	ldr	r3, [pc, #196]	; (8013e7c <recv_tcp+0xf0>)
 8013db6:	f240 122d 	movw	r2, #301	; 0x12d
 8013dba:	4933      	ldr	r1, [pc, #204]	; (8013e88 <recv_tcp+0xfc>)
 8013dbc:	4831      	ldr	r0, [pc, #196]	; (8013e84 <recv_tcp+0xf8>)
 8013dbe:	f00e fcf7 	bl	80227b0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8013dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d006      	beq.n	8013dd8 <recv_tcp+0x4c>
 8013dca:	4b2c      	ldr	r3, [pc, #176]	; (8013e7c <recv_tcp+0xf0>)
 8013dcc:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8013dd0:	492e      	ldr	r1, [pc, #184]	; (8013e8c <recv_tcp+0x100>)
 8013dd2:	482c      	ldr	r0, [pc, #176]	; (8013e84 <recv_tcp+0xf8>)
 8013dd4:	f00e fcec 	bl	80227b0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d102      	bne.n	8013de8 <recv_tcp+0x5c>
    return ERR_VAL;
 8013de2:	f06f 0305 	mvn.w	r3, #5
 8013de6:	e045      	b.n	8013e74 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8013de8:	697b      	ldr	r3, [r7, #20]
 8013dea:	685b      	ldr	r3, [r3, #4]
 8013dec:	68ba      	ldr	r2, [r7, #8]
 8013dee:	429a      	cmp	r2, r3
 8013df0:	d006      	beq.n	8013e00 <recv_tcp+0x74>
 8013df2:	4b22      	ldr	r3, [pc, #136]	; (8013e7c <recv_tcp+0xf0>)
 8013df4:	f240 1235 	movw	r2, #309	; 0x135
 8013df8:	4925      	ldr	r1, [pc, #148]	; (8013e90 <recv_tcp+0x104>)
 8013dfa:	4822      	ldr	r0, [pc, #136]	; (8013e84 <recv_tcp+0xf8>)
 8013dfc:	f00e fcd8 	bl	80227b0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	3310      	adds	r3, #16
 8013e04:	4618      	mov	r0, r3
 8013e06:	f00d f924 	bl	8021052 <sys_mbox_valid>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d10d      	bne.n	8013e2c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d008      	beq.n	8013e28 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	891b      	ldrh	r3, [r3, #8]
 8013e1a:	4619      	mov	r1, r3
 8013e1c:	68b8      	ldr	r0, [r7, #8]
 8013e1e:	f004 fa57 	bl	80182d0 <tcp_recved>
      pbuf_free(p);
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f003 fa8c 	bl	8017340 <pbuf_free>
    }
    return ERR_OK;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	e023      	b.n	8013e74 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d005      	beq.n	8013e3e <recv_tcp+0xb2>
    msg = p;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	891b      	ldrh	r3, [r3, #8]
 8013e3a:	83fb      	strh	r3, [r7, #30]
 8013e3c:	e003      	b.n	8013e46 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8013e3e:	4b15      	ldr	r3, [pc, #84]	; (8013e94 <recv_tcp+0x108>)
 8013e40:	61bb      	str	r3, [r7, #24]
    len = 0;
 8013e42:	2300      	movs	r3, #0
 8013e44:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8013e46:	697b      	ldr	r3, [r7, #20]
 8013e48:	3310      	adds	r3, #16
 8013e4a:	69b9      	ldr	r1, [r7, #24]
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f00d f88b 	bl	8020f68 <sys_mbox_trypost>
 8013e52:	4603      	mov	r3, r0
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d002      	beq.n	8013e5e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8013e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e5c:	e00a      	b.n	8013e74 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8013e5e:	697b      	ldr	r3, [r7, #20]
 8013e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d005      	beq.n	8013e72 <recv_tcp+0xe6>
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e6a:	8bfa      	ldrh	r2, [r7, #30]
 8013e6c:	2100      	movs	r1, #0
 8013e6e:	6978      	ldr	r0, [r7, #20]
 8013e70:	4798      	blx	r3
  }

  return ERR_OK;
 8013e72:	2300      	movs	r3, #0
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3720      	adds	r7, #32
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}
 8013e7c:	08024098 	.word	0x08024098
 8013e80:	08024174 	.word	0x08024174
 8013e84:	080240dc 	.word	0x080240dc
 8013e88:	08024198 	.word	0x08024198
 8013e8c:	080241b8 	.word	0x080241b8
 8013e90:	080241d0 	.word	0x080241d0
 8013e94:	08027286 	.word	0x08027286

08013e98 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b084      	sub	sp, #16
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
 8013ea0:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d106      	bne.n	8013eba <poll_tcp+0x22>
 8013eac:	4b29      	ldr	r3, [pc, #164]	; (8013f54 <poll_tcp+0xbc>)
 8013eae:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8013eb2:	4929      	ldr	r1, [pc, #164]	; (8013f58 <poll_tcp+0xc0>)
 8013eb4:	4829      	ldr	r0, [pc, #164]	; (8013f5c <poll_tcp+0xc4>)
 8013eb6:	f00e fc7b 	bl	80227b0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	785b      	ldrb	r3, [r3, #1]
 8013ebe:	2b01      	cmp	r3, #1
 8013ec0:	d104      	bne.n	8013ecc <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8013ec2:	2101      	movs	r1, #1
 8013ec4:	68f8      	ldr	r0, [r7, #12]
 8013ec6:	f001 f8ff 	bl	80150c8 <lwip_netconn_do_writemore>
 8013eca:	e016      	b.n	8013efa <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	785b      	ldrb	r3, [r3, #1]
 8013ed0:	2b04      	cmp	r3, #4
 8013ed2:	d112      	bne.n	8013efa <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	6a1b      	ldr	r3, [r3, #32]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d00a      	beq.n	8013ef2 <poll_tcp+0x5a>
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	6a1b      	ldr	r3, [r3, #32]
 8013ee0:	7a5b      	ldrb	r3, [r3, #9]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d005      	beq.n	8013ef2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	6a1b      	ldr	r3, [r3, #32]
 8013eea:	7a5a      	ldrb	r2, [r3, #9]
 8013eec:	3a01      	subs	r2, #1
 8013eee:	b2d2      	uxtb	r2, r2
 8013ef0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8013ef2:	2101      	movs	r1, #1
 8013ef4:	68f8      	ldr	r0, [r7, #12]
 8013ef6:	f000 fbf7 	bl	80146e8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	7f1b      	ldrb	r3, [r3, #28]
 8013efe:	f003 0310 	and.w	r3, r3, #16
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d021      	beq.n	8013f4a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	685b      	ldr	r3, [r3, #4]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d01d      	beq.n	8013f4a <poll_tcp+0xb2>
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013f16:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8013f1a:	d316      	bcc.n	8013f4a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	685b      	ldr	r3, [r3, #4]
 8013f20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013f24:	2b04      	cmp	r3, #4
 8013f26:	d810      	bhi.n	8013f4a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	7f1b      	ldrb	r3, [r3, #28]
 8013f2c:	f023 0310 	bic.w	r3, r3, #16
 8013f30:	b2da      	uxtb	r2, r3
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d005      	beq.n	8013f4a <poll_tcp+0xb2>
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f42:	2200      	movs	r2, #0
 8013f44:	2102      	movs	r1, #2
 8013f46:	68f8      	ldr	r0, [r7, #12]
 8013f48:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8013f4a:	2300      	movs	r3, #0
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3710      	adds	r7, #16
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}
 8013f54:	08024098 	.word	0x08024098
 8013f58:	080241f0 	.word	0x080241f0
 8013f5c:	080240dc 	.word	0x080240dc

08013f60 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b086      	sub	sp, #24
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	60f8      	str	r0, [r7, #12]
 8013f68:	60b9      	str	r1, [r7, #8]
 8013f6a:	4613      	mov	r3, r2
 8013f6c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d106      	bne.n	8013f86 <sent_tcp+0x26>
 8013f78:	4b20      	ldr	r3, [pc, #128]	; (8013ffc <sent_tcp+0x9c>)
 8013f7a:	f240 1293 	movw	r2, #403	; 0x193
 8013f7e:	4920      	ldr	r1, [pc, #128]	; (8014000 <sent_tcp+0xa0>)
 8013f80:	4820      	ldr	r0, [pc, #128]	; (8014004 <sent_tcp+0xa4>)
 8013f82:	f00e fc15 	bl	80227b0 <iprintf>

  if (conn) {
 8013f86:	697b      	ldr	r3, [r7, #20]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d032      	beq.n	8013ff2 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8013f8c:	697b      	ldr	r3, [r7, #20]
 8013f8e:	785b      	ldrb	r3, [r3, #1]
 8013f90:	2b01      	cmp	r3, #1
 8013f92:	d104      	bne.n	8013f9e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8013f94:	2101      	movs	r1, #1
 8013f96:	6978      	ldr	r0, [r7, #20]
 8013f98:	f001 f896 	bl	80150c8 <lwip_netconn_do_writemore>
 8013f9c:	e007      	b.n	8013fae <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	785b      	ldrb	r3, [r3, #1]
 8013fa2:	2b04      	cmp	r3, #4
 8013fa4:	d103      	bne.n	8013fae <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8013fa6:	2101      	movs	r1, #1
 8013fa8:	6978      	ldr	r0, [r7, #20]
 8013faa:	f000 fb9d 	bl	80146e8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d01d      	beq.n	8013ff2 <sent_tcp+0x92>
 8013fb6:	697b      	ldr	r3, [r7, #20]
 8013fb8:	685b      	ldr	r3, [r3, #4]
 8013fba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013fbe:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8013fc2:	d316      	bcc.n	8013ff2 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8013fc4:	697b      	ldr	r3, [r7, #20]
 8013fc6:	685b      	ldr	r3, [r3, #4]
 8013fc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013fcc:	2b04      	cmp	r3, #4
 8013fce:	d810      	bhi.n	8013ff2 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	7f1b      	ldrb	r3, [r3, #28]
 8013fd4:	f023 0310 	bic.w	r3, r3, #16
 8013fd8:	b2da      	uxtb	r2, r3
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8013fde:	697b      	ldr	r3, [r7, #20]
 8013fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d005      	beq.n	8013ff2 <sent_tcp+0x92>
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fea:	88fa      	ldrh	r2, [r7, #6]
 8013fec:	2102      	movs	r1, #2
 8013fee:	6978      	ldr	r0, [r7, #20]
 8013ff0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8013ff2:	2300      	movs	r3, #0
}
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3718      	adds	r7, #24
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}
 8013ffc:	08024098 	.word	0x08024098
 8014000:	080241f0 	.word	0x080241f0
 8014004:	080240dc 	.word	0x080240dc

08014008 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b088      	sub	sp, #32
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	460b      	mov	r3, r1
 8014012:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8014018:	69fb      	ldr	r3, [r7, #28]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d106      	bne.n	801402c <err_tcp+0x24>
 801401e:	4b5f      	ldr	r3, [pc, #380]	; (801419c <err_tcp+0x194>)
 8014020:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014024:	495e      	ldr	r1, [pc, #376]	; (80141a0 <err_tcp+0x198>)
 8014026:	485f      	ldr	r0, [pc, #380]	; (80141a4 <err_tcp+0x19c>)
 8014028:	f00e fbc2 	bl	80227b0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 801402c:	f00d f92c 	bl	8021288 <sys_arch_protect>
 8014030:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8014032:	69fb      	ldr	r3, [r7, #28]
 8014034:	2200      	movs	r2, #0
 8014036:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8014038:	69fb      	ldr	r3, [r7, #28]
 801403a:	78fa      	ldrb	r2, [r7, #3]
 801403c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 801403e:	69fb      	ldr	r3, [r7, #28]
 8014040:	7f1b      	ldrb	r3, [r3, #28]
 8014042:	f043 0301 	orr.w	r3, r3, #1
 8014046:	b2da      	uxtb	r2, r3
 8014048:	69fb      	ldr	r3, [r7, #28]
 801404a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 801404c:	69fb      	ldr	r3, [r7, #28]
 801404e:	785b      	ldrb	r3, [r3, #1]
 8014050:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8014052:	69fb      	ldr	r3, [r7, #28]
 8014054:	2200      	movs	r2, #0
 8014056:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8014058:	69b8      	ldr	r0, [r7, #24]
 801405a:	f00d f923 	bl	80212a4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801405e:	69fb      	ldr	r3, [r7, #28]
 8014060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014062:	2b00      	cmp	r3, #0
 8014064:	d005      	beq.n	8014072 <err_tcp+0x6a>
 8014066:	69fb      	ldr	r3, [r7, #28]
 8014068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801406a:	2200      	movs	r2, #0
 801406c:	2104      	movs	r1, #4
 801406e:	69f8      	ldr	r0, [r7, #28]
 8014070:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8014072:	69fb      	ldr	r3, [r7, #28]
 8014074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014076:	2b00      	cmp	r3, #0
 8014078:	d005      	beq.n	8014086 <err_tcp+0x7e>
 801407a:	69fb      	ldr	r3, [r7, #28]
 801407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801407e:	2200      	movs	r2, #0
 8014080:	2100      	movs	r1, #0
 8014082:	69f8      	ldr	r0, [r7, #28]
 8014084:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8014086:	69fb      	ldr	r3, [r7, #28]
 8014088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801408a:	2b00      	cmp	r3, #0
 801408c:	d005      	beq.n	801409a <err_tcp+0x92>
 801408e:	69fb      	ldr	r3, [r7, #28]
 8014090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014092:	2200      	movs	r2, #0
 8014094:	2102      	movs	r1, #2
 8014096:	69f8      	ldr	r0, [r7, #28]
 8014098:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 801409a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801409e:	4618      	mov	r0, r3
 80140a0:	f7ff fd86 	bl	8013bb0 <lwip_netconn_err_to_msg>
 80140a4:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80140a6:	69fb      	ldr	r3, [r7, #28]
 80140a8:	3310      	adds	r3, #16
 80140aa:	4618      	mov	r0, r3
 80140ac:	f00c ffd1 	bl	8021052 <sys_mbox_valid>
 80140b0:	4603      	mov	r3, r0
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d005      	beq.n	80140c2 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80140b6:	69fb      	ldr	r3, [r7, #28]
 80140b8:	3310      	adds	r3, #16
 80140ba:	6939      	ldr	r1, [r7, #16]
 80140bc:	4618      	mov	r0, r3
 80140be:	f00c ff53 	bl	8020f68 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80140c2:	69fb      	ldr	r3, [r7, #28]
 80140c4:	3314      	adds	r3, #20
 80140c6:	4618      	mov	r0, r3
 80140c8:	f00c ffc3 	bl	8021052 <sys_mbox_valid>
 80140cc:	4603      	mov	r3, r0
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d005      	beq.n	80140de <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80140d2:	69fb      	ldr	r3, [r7, #28]
 80140d4:	3314      	adds	r3, #20
 80140d6:	6939      	ldr	r1, [r7, #16]
 80140d8:	4618      	mov	r0, r3
 80140da:	f00c ff45 	bl	8020f68 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80140de:	7dfb      	ldrb	r3, [r7, #23]
 80140e0:	2b01      	cmp	r3, #1
 80140e2:	d005      	beq.n	80140f0 <err_tcp+0xe8>
 80140e4:	7dfb      	ldrb	r3, [r7, #23]
 80140e6:	2b04      	cmp	r3, #4
 80140e8:	d002      	beq.n	80140f0 <err_tcp+0xe8>
 80140ea:	7dfb      	ldrb	r3, [r7, #23]
 80140ec:	2b03      	cmp	r3, #3
 80140ee:	d143      	bne.n	8014178 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80140f0:	69fb      	ldr	r3, [r7, #28]
 80140f2:	7f1b      	ldrb	r3, [r3, #28]
 80140f4:	f003 0304 	and.w	r3, r3, #4
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	bf14      	ite	ne
 80140fc:	2301      	movne	r3, #1
 80140fe:	2300      	moveq	r3, #0
 8014100:	b2db      	uxtb	r3, r3
 8014102:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8014104:	69fb      	ldr	r3, [r7, #28]
 8014106:	7f1b      	ldrb	r3, [r3, #28]
 8014108:	f023 0304 	bic.w	r3, r3, #4
 801410c:	b2da      	uxtb	r2, r3
 801410e:	69fb      	ldr	r3, [r7, #28]
 8014110:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d13b      	bne.n	8014190 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8014118:	69fb      	ldr	r3, [r7, #28]
 801411a:	6a1b      	ldr	r3, [r3, #32]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d106      	bne.n	801412e <err_tcp+0x126>
 8014120:	4b1e      	ldr	r3, [pc, #120]	; (801419c <err_tcp+0x194>)
 8014122:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014126:	4920      	ldr	r1, [pc, #128]	; (80141a8 <err_tcp+0x1a0>)
 8014128:	481e      	ldr	r0, [pc, #120]	; (80141a4 <err_tcp+0x19c>)
 801412a:	f00e fb41 	bl	80227b0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 801412e:	7dfb      	ldrb	r3, [r7, #23]
 8014130:	2b04      	cmp	r3, #4
 8014132:	d104      	bne.n	801413e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8014134:	69fb      	ldr	r3, [r7, #28]
 8014136:	6a1b      	ldr	r3, [r3, #32]
 8014138:	2200      	movs	r2, #0
 801413a:	711a      	strb	r2, [r3, #4]
 801413c:	e003      	b.n	8014146 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 801413e:	69fb      	ldr	r3, [r7, #28]
 8014140:	6a1b      	ldr	r3, [r3, #32]
 8014142:	78fa      	ldrb	r2, [r7, #3]
 8014144:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8014146:	69fb      	ldr	r3, [r7, #28]
 8014148:	6a1b      	ldr	r3, [r3, #32]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	330c      	adds	r3, #12
 801414e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8014150:	68b8      	ldr	r0, [r7, #8]
 8014152:	f00d f80f 	bl	8021174 <sys_sem_valid>
 8014156:	4603      	mov	r3, r0
 8014158:	2b00      	cmp	r3, #0
 801415a:	d106      	bne.n	801416a <err_tcp+0x162>
 801415c:	4b0f      	ldr	r3, [pc, #60]	; (801419c <err_tcp+0x194>)
 801415e:	f240 12ef 	movw	r2, #495	; 0x1ef
 8014162:	4912      	ldr	r1, [pc, #72]	; (80141ac <err_tcp+0x1a4>)
 8014164:	480f      	ldr	r0, [pc, #60]	; (80141a4 <err_tcp+0x19c>)
 8014166:	f00e fb23 	bl	80227b0 <iprintf>
      conn->current_msg = NULL;
 801416a:	69fb      	ldr	r3, [r7, #28]
 801416c:	2200      	movs	r2, #0
 801416e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8014170:	68b8      	ldr	r0, [r7, #8]
 8014172:	f00c ffe5 	bl	8021140 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8014176:	e00b      	b.n	8014190 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8014178:	69fb      	ldr	r3, [r7, #28]
 801417a:	6a1b      	ldr	r3, [r3, #32]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d008      	beq.n	8014192 <err_tcp+0x18a>
 8014180:	4b06      	ldr	r3, [pc, #24]	; (801419c <err_tcp+0x194>)
 8014182:	f240 12f7 	movw	r2, #503	; 0x1f7
 8014186:	490a      	ldr	r1, [pc, #40]	; (80141b0 <err_tcp+0x1a8>)
 8014188:	4806      	ldr	r0, [pc, #24]	; (80141a4 <err_tcp+0x19c>)
 801418a:	f00e fb11 	bl	80227b0 <iprintf>
  }
}
 801418e:	e000      	b.n	8014192 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8014190:	bf00      	nop
}
 8014192:	bf00      	nop
 8014194:	3720      	adds	r7, #32
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}
 801419a:	bf00      	nop
 801419c:	08024098 	.word	0x08024098
 80141a0:	080241f0 	.word	0x080241f0
 80141a4:	080240dc 	.word	0x080240dc
 80141a8:	08024200 	.word	0x08024200
 80141ac:	0802421c 	.word	0x0802421c
 80141b0:	08024238 	.word	0x08024238

080141b4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b084      	sub	sp, #16
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	685b      	ldr	r3, [r3, #4]
 80141c0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80141c2:	6879      	ldr	r1, [r7, #4]
 80141c4:	68f8      	ldr	r0, [r7, #12]
 80141c6:	f005 f861 	bl	801928c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80141ca:	490a      	ldr	r1, [pc, #40]	; (80141f4 <setup_tcp+0x40>)
 80141cc:	68f8      	ldr	r0, [r7, #12]
 80141ce:	f005 f86f 	bl	80192b0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80141d2:	4909      	ldr	r1, [pc, #36]	; (80141f8 <setup_tcp+0x44>)
 80141d4:	68f8      	ldr	r0, [r7, #12]
 80141d6:	f005 f88d 	bl	80192f4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80141da:	2202      	movs	r2, #2
 80141dc:	4907      	ldr	r1, [pc, #28]	; (80141fc <setup_tcp+0x48>)
 80141de:	68f8      	ldr	r0, [r7, #12]
 80141e0:	f005 f8e4 	bl	80193ac <tcp_poll>
  tcp_err(pcb, err_tcp);
 80141e4:	4906      	ldr	r1, [pc, #24]	; (8014200 <setup_tcp+0x4c>)
 80141e6:	68f8      	ldr	r0, [r7, #12]
 80141e8:	f005 f8a6 	bl	8019338 <tcp_err>
}
 80141ec:	bf00      	nop
 80141ee:	3710      	adds	r7, #16
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd80      	pop	{r7, pc}
 80141f4:	08013d8d 	.word	0x08013d8d
 80141f8:	08013f61 	.word	0x08013f61
 80141fc:	08013e99 	.word	0x08013e99
 8014200:	08014009 	.word	0x08014009

08014204 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8014204:	b590      	push	{r4, r7, lr}
 8014206:	b089      	sub	sp, #36	; 0x24
 8014208:	af00      	add	r7, sp, #0
 801420a:	60f8      	str	r0, [r7, #12]
 801420c:	60b9      	str	r1, [r7, #8]
 801420e:	4613      	mov	r3, r2
 8014210:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8014216:	69fb      	ldr	r3, [r7, #28]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d102      	bne.n	8014222 <accept_function+0x1e>
    return ERR_VAL;
 801421c:	f06f 0305 	mvn.w	r3, #5
 8014220:	e0a1      	b.n	8014366 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8014222:	69fb      	ldr	r3, [r7, #28]
 8014224:	3314      	adds	r3, #20
 8014226:	4618      	mov	r0, r3
 8014228:	f00c ff13 	bl	8021052 <sys_mbox_valid>
 801422c:	4603      	mov	r3, r0
 801422e:	2b00      	cmp	r3, #0
 8014230:	d102      	bne.n	8014238 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8014232:	f06f 0305 	mvn.w	r3, #5
 8014236:	e096      	b.n	8014366 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d11b      	bne.n	8014276 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 801423e:	69fb      	ldr	r3, [r7, #28]
 8014240:	f103 0414 	add.w	r4, r3, #20
 8014244:	f06f 000c 	mvn.w	r0, #12
 8014248:	f7ff fcb2 	bl	8013bb0 <lwip_netconn_err_to_msg>
 801424c:	4603      	mov	r3, r0
 801424e:	4619      	mov	r1, r3
 8014250:	4620      	mov	r0, r4
 8014252:	f00c fe89 	bl	8020f68 <sys_mbox_trypost>
 8014256:	4603      	mov	r3, r0
 8014258:	2b00      	cmp	r3, #0
 801425a:	d109      	bne.n	8014270 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801425c:	69fb      	ldr	r3, [r7, #28]
 801425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014260:	2b00      	cmp	r3, #0
 8014262:	d005      	beq.n	8014270 <accept_function+0x6c>
 8014264:	69fb      	ldr	r3, [r7, #28]
 8014266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014268:	2200      	movs	r2, #0
 801426a:	2100      	movs	r1, #0
 801426c:	69f8      	ldr	r0, [r7, #28]
 801426e:	4798      	blx	r3
    }
    return ERR_VAL;
 8014270:	f06f 0305 	mvn.w	r3, #5
 8014274:	e077      	b.n	8014366 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8014276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d006      	beq.n	801428c <accept_function+0x88>
 801427e:	4b3c      	ldr	r3, [pc, #240]	; (8014370 <accept_function+0x16c>)
 8014280:	f240 222a 	movw	r2, #554	; 0x22a
 8014284:	493b      	ldr	r1, [pc, #236]	; (8014374 <accept_function+0x170>)
 8014286:	483c      	ldr	r0, [pc, #240]	; (8014378 <accept_function+0x174>)
 8014288:	f00e fa92 	bl	80227b0 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 801428c:	69fb      	ldr	r3, [r7, #28]
 801428e:	781a      	ldrb	r2, [r3, #0]
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014294:	4619      	mov	r1, r3
 8014296:	4610      	mov	r0, r2
 8014298:	f000 f8f0 	bl	801447c <netconn_alloc>
 801429c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 801429e:	69bb      	ldr	r3, [r7, #24]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d11b      	bne.n	80142dc <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80142a4:	69fb      	ldr	r3, [r7, #28]
 80142a6:	f103 0414 	add.w	r4, r3, #20
 80142aa:	f06f 000c 	mvn.w	r0, #12
 80142ae:	f7ff fc7f 	bl	8013bb0 <lwip_netconn_err_to_msg>
 80142b2:	4603      	mov	r3, r0
 80142b4:	4619      	mov	r1, r3
 80142b6:	4620      	mov	r0, r4
 80142b8:	f00c fe56 	bl	8020f68 <sys_mbox_trypost>
 80142bc:	4603      	mov	r3, r0
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d109      	bne.n	80142d6 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80142c2:	69fb      	ldr	r3, [r7, #28]
 80142c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d005      	beq.n	80142d6 <accept_function+0xd2>
 80142ca:	69fb      	ldr	r3, [r7, #28]
 80142cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142ce:	2200      	movs	r2, #0
 80142d0:	2100      	movs	r1, #0
 80142d2:	69f8      	ldr	r0, [r7, #28]
 80142d4:	4798      	blx	r3
    }
    return ERR_MEM;
 80142d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142da:	e044      	b.n	8014366 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80142dc:	69bb      	ldr	r3, [r7, #24]
 80142de:	68ba      	ldr	r2, [r7, #8]
 80142e0:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80142e2:	69b8      	ldr	r0, [r7, #24]
 80142e4:	f7ff ff66 	bl	80141b4 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80142e8:	69fb      	ldr	r3, [r7, #28]
 80142ea:	3314      	adds	r3, #20
 80142ec:	69b9      	ldr	r1, [r7, #24]
 80142ee:	4618      	mov	r0, r3
 80142f0:	f00c fe3a 	bl	8020f68 <sys_mbox_trypost>
 80142f4:	4603      	mov	r3, r0
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d02a      	beq.n	8014350 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80142fa:	69bb      	ldr	r3, [r7, #24]
 80142fc:	685b      	ldr	r3, [r3, #4]
 80142fe:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8014300:	2100      	movs	r1, #0
 8014302:	6978      	ldr	r0, [r7, #20]
 8014304:	f004 ffc2 	bl	801928c <tcp_arg>
    tcp_recv(pcb, NULL);
 8014308:	2100      	movs	r1, #0
 801430a:	6978      	ldr	r0, [r7, #20]
 801430c:	f004 ffd0 	bl	80192b0 <tcp_recv>
    tcp_sent(pcb, NULL);
 8014310:	2100      	movs	r1, #0
 8014312:	6978      	ldr	r0, [r7, #20]
 8014314:	f004 ffee 	bl	80192f4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8014318:	2200      	movs	r2, #0
 801431a:	2100      	movs	r1, #0
 801431c:	6978      	ldr	r0, [r7, #20]
 801431e:	f005 f845 	bl	80193ac <tcp_poll>
    tcp_err(pcb, NULL);
 8014322:	2100      	movs	r1, #0
 8014324:	6978      	ldr	r0, [r7, #20]
 8014326:	f005 f807 	bl	8019338 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 801432a:	69bb      	ldr	r3, [r7, #24]
 801432c:	2200      	movs	r2, #0
 801432e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8014330:	69bb      	ldr	r3, [r7, #24]
 8014332:	3310      	adds	r3, #16
 8014334:	4618      	mov	r0, r3
 8014336:	f00c fe05 	bl	8020f44 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 801433a:	69bb      	ldr	r3, [r7, #24]
 801433c:	3310      	adds	r3, #16
 801433e:	4618      	mov	r0, r3
 8014340:	f00c fe98 	bl	8021074 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8014344:	69b8      	ldr	r0, [r7, #24]
 8014346:	f000 f907 	bl	8014558 <netconn_free>
    return ERR_MEM;
 801434a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801434e:	e00a      	b.n	8014366 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8014350:	69fb      	ldr	r3, [r7, #28]
 8014352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014354:	2b00      	cmp	r3, #0
 8014356:	d005      	beq.n	8014364 <accept_function+0x160>
 8014358:	69fb      	ldr	r3, [r7, #28]
 801435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801435c:	2200      	movs	r2, #0
 801435e:	2100      	movs	r1, #0
 8014360:	69f8      	ldr	r0, [r7, #28]
 8014362:	4798      	blx	r3
  }

  return ERR_OK;
 8014364:	2300      	movs	r3, #0
}
 8014366:	4618      	mov	r0, r3
 8014368:	3724      	adds	r7, #36	; 0x24
 801436a:	46bd      	mov	sp, r7
 801436c:	bd90      	pop	{r4, r7, pc}
 801436e:	bf00      	nop
 8014370:	08024098 	.word	0x08024098
 8014374:	08024254 	.word	0x08024254
 8014378:	080240dc 	.word	0x080240dc

0801437c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 801437c:	b590      	push	{r4, r7, lr}
 801437e:	b085      	sub	sp, #20
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8014384:	2300      	movs	r3, #0
 8014386:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	685b      	ldr	r3, [r3, #4]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d006      	beq.n	80143a0 <pcb_new+0x24>
 8014392:	4b2b      	ldr	r3, [pc, #172]	; (8014440 <pcb_new+0xc4>)
 8014394:	f240 2265 	movw	r2, #613	; 0x265
 8014398:	492a      	ldr	r1, [pc, #168]	; (8014444 <pcb_new+0xc8>)
 801439a:	482b      	ldr	r0, [pc, #172]	; (8014448 <pcb_new+0xcc>)
 801439c:	f00e fa08 	bl	80227b0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80143aa:	2b10      	cmp	r3, #16
 80143ac:	d022      	beq.n	80143f4 <pcb_new+0x78>
 80143ae:	2b20      	cmp	r3, #32
 80143b0:	d133      	bne.n	801441a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	681c      	ldr	r4, [r3, #0]
 80143b6:	7bfb      	ldrb	r3, [r7, #15]
 80143b8:	4618      	mov	r0, r3
 80143ba:	f00a fa9e 	bl	801e8fa <udp_new_ip_type>
 80143be:	4603      	mov	r3, r0
 80143c0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	685b      	ldr	r3, [r3, #4]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d02a      	beq.n	8014422 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	2b22      	cmp	r3, #34	; 0x22
 80143d4:	d104      	bne.n	80143e0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	685b      	ldr	r3, [r3, #4]
 80143dc:	2201      	movs	r2, #1
 80143de:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	6858      	ldr	r0, [r3, #4]
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	461a      	mov	r2, r3
 80143ec:	4917      	ldr	r1, [pc, #92]	; (801444c <pcb_new+0xd0>)
 80143ee:	f00a fa0b 	bl	801e808 <udp_recv>
      }
      break;
 80143f2:	e016      	b.n	8014422 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681c      	ldr	r4, [r3, #0]
 80143f8:	7bfb      	ldrb	r3, [r7, #15]
 80143fa:	4618      	mov	r0, r3
 80143fc:	f004 ff38 	bl	8019270 <tcp_new_ip_type>
 8014400:	4603      	mov	r3, r0
 8014402:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d00b      	beq.n	8014426 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	4618      	mov	r0, r3
 8014414:	f7ff fece 	bl	80141b4 <setup_tcp>
      }
      break;
 8014418:	e005      	b.n	8014426 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	22fa      	movs	r2, #250	; 0xfa
 801441e:	711a      	strb	r2, [r3, #4]
      return;
 8014420:	e00a      	b.n	8014438 <pcb_new+0xbc>
      break;
 8014422:	bf00      	nop
 8014424:	e000      	b.n	8014428 <pcb_new+0xac>
      break;
 8014426:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	685b      	ldr	r3, [r3, #4]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d102      	bne.n	8014438 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	22ff      	movs	r2, #255	; 0xff
 8014436:	711a      	strb	r2, [r3, #4]
  }
}
 8014438:	3714      	adds	r7, #20
 801443a:	46bd      	mov	sp, r7
 801443c:	bd90      	pop	{r4, r7, pc}
 801443e:	bf00      	nop
 8014440:	08024098 	.word	0x08024098
 8014444:	0802427c 	.word	0x0802427c
 8014448:	080240dc 	.word	0x080240dc
 801444c:	08013c91 	.word	0x08013c91

08014450 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b084      	sub	sp, #16
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	2200      	movs	r2, #0
 8014460:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	685b      	ldr	r3, [r3, #4]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d102      	bne.n	8014472 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 801446c:	68f8      	ldr	r0, [r7, #12]
 801446e:	f7ff ff85 	bl	801437c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8014472:	bf00      	nop
 8014474:	3710      	adds	r7, #16
 8014476:	46bd      	mov	sp, r7
 8014478:	bd80      	pop	{r7, pc}
	...

0801447c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b086      	sub	sp, #24
 8014480:	af00      	add	r7, sp, #0
 8014482:	4603      	mov	r3, r0
 8014484:	6039      	str	r1, [r7, #0]
 8014486:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8014488:	2300      	movs	r3, #0
 801448a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 801448c:	2007      	movs	r0, #7
 801448e:	f002 f83d 	bl	801650c <memp_malloc>
 8014492:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d101      	bne.n	801449e <netconn_alloc+0x22>
    return NULL;
 801449a:	2300      	movs	r3, #0
 801449c:	e052      	b.n	8014544 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	2200      	movs	r2, #0
 80144a2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	79fa      	ldrb	r2, [r7, #7]
 80144a8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	2200      	movs	r2, #0
 80144ae:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80144b0:	79fb      	ldrb	r3, [r7, #7]
 80144b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80144b6:	2b10      	cmp	r3, #16
 80144b8:	d004      	beq.n	80144c4 <netconn_alloc+0x48>
 80144ba:	2b20      	cmp	r3, #32
 80144bc:	d105      	bne.n	80144ca <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80144be:	2306      	movs	r3, #6
 80144c0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80144c2:	e00a      	b.n	80144da <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80144c4:	2306      	movs	r3, #6
 80144c6:	617b      	str	r3, [r7, #20]
      break;
 80144c8:	e007      	b.n	80144da <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80144ca:	4b20      	ldr	r3, [pc, #128]	; (801454c <netconn_alloc+0xd0>)
 80144cc:	f240 22e5 	movw	r2, #741	; 0x2e5
 80144d0:	491f      	ldr	r1, [pc, #124]	; (8014550 <netconn_alloc+0xd4>)
 80144d2:	4820      	ldr	r0, [pc, #128]	; (8014554 <netconn_alloc+0xd8>)
 80144d4:	f00e f96c 	bl	80227b0 <iprintf>
      goto free_and_return;
 80144d8:	e02f      	b.n	801453a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	3310      	adds	r3, #16
 80144de:	6979      	ldr	r1, [r7, #20]
 80144e0:	4618      	mov	r0, r3
 80144e2:	f00c fd0d 	bl	8020f00 <sys_mbox_new>
 80144e6:	4603      	mov	r3, r0
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d125      	bne.n	8014538 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	330c      	adds	r3, #12
 80144f0:	2100      	movs	r1, #0
 80144f2:	4618      	mov	r0, r3
 80144f4:	f00c fdcb 	bl	802108e <sys_sem_new>
 80144f8:	4603      	mov	r3, r0
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d005      	beq.n	801450a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	3310      	adds	r3, #16
 8014502:	4618      	mov	r0, r3
 8014504:	f00c fd1e 	bl	8020f44 <sys_mbox_free>
    goto free_and_return;
 8014508:	e017      	b.n	801453a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	3314      	adds	r3, #20
 801450e:	4618      	mov	r0, r3
 8014510:	f00c fdb0 	bl	8021074 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	2200      	movs	r2, #0
 8014518:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014520:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	683a      	ldr	r2, [r7, #0]
 8014526:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	2200      	movs	r2, #0
 801452c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	7cfa      	ldrb	r2, [r7, #19]
 8014532:	771a      	strb	r2, [r3, #28]
  return conn;
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	e005      	b.n	8014544 <netconn_alloc+0xc8>
    goto free_and_return;
 8014538:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801453a:	68f9      	ldr	r1, [r7, #12]
 801453c:	2007      	movs	r0, #7
 801453e:	f002 f85b 	bl	80165f8 <memp_free>
  return NULL;
 8014542:	2300      	movs	r3, #0
}
 8014544:	4618      	mov	r0, r3
 8014546:	3718      	adds	r7, #24
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}
 801454c:	08024098 	.word	0x08024098
 8014550:	0802429c 	.word	0x0802429c
 8014554:	080240dc 	.word	0x080240dc

08014558 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b082      	sub	sp, #8
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	685b      	ldr	r3, [r3, #4]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d006      	beq.n	8014576 <netconn_free+0x1e>
 8014568:	4b1b      	ldr	r3, [pc, #108]	; (80145d8 <netconn_free+0x80>)
 801456a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801456e:	491b      	ldr	r1, [pc, #108]	; (80145dc <netconn_free+0x84>)
 8014570:	481b      	ldr	r0, [pc, #108]	; (80145e0 <netconn_free+0x88>)
 8014572:	f00e f91d 	bl	80227b0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	3310      	adds	r3, #16
 801457a:	4618      	mov	r0, r3
 801457c:	f00c fd69 	bl	8021052 <sys_mbox_valid>
 8014580:	4603      	mov	r3, r0
 8014582:	2b00      	cmp	r3, #0
 8014584:	d006      	beq.n	8014594 <netconn_free+0x3c>
 8014586:	4b14      	ldr	r3, [pc, #80]	; (80145d8 <netconn_free+0x80>)
 8014588:	f240 3223 	movw	r2, #803	; 0x323
 801458c:	4915      	ldr	r1, [pc, #84]	; (80145e4 <netconn_free+0x8c>)
 801458e:	4814      	ldr	r0, [pc, #80]	; (80145e0 <netconn_free+0x88>)
 8014590:	f00e f90e 	bl	80227b0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	3314      	adds	r3, #20
 8014598:	4618      	mov	r0, r3
 801459a:	f00c fd5a 	bl	8021052 <sys_mbox_valid>
 801459e:	4603      	mov	r3, r0
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d006      	beq.n	80145b2 <netconn_free+0x5a>
 80145a4:	4b0c      	ldr	r3, [pc, #48]	; (80145d8 <netconn_free+0x80>)
 80145a6:	f240 3226 	movw	r2, #806	; 0x326
 80145aa:	490f      	ldr	r1, [pc, #60]	; (80145e8 <netconn_free+0x90>)
 80145ac:	480c      	ldr	r0, [pc, #48]	; (80145e0 <netconn_free+0x88>)
 80145ae:	f00e f8ff 	bl	80227b0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	330c      	adds	r3, #12
 80145b6:	4618      	mov	r0, r3
 80145b8:	f00c fdcf 	bl	802115a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	330c      	adds	r3, #12
 80145c0:	4618      	mov	r0, r3
 80145c2:	f00c fde8 	bl	8021196 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80145c6:	6879      	ldr	r1, [r7, #4]
 80145c8:	2007      	movs	r0, #7
 80145ca:	f002 f815 	bl	80165f8 <memp_free>
}
 80145ce:	bf00      	nop
 80145d0:	3708      	adds	r7, #8
 80145d2:	46bd      	mov	sp, r7
 80145d4:	bd80      	pop	{r7, pc}
 80145d6:	bf00      	nop
 80145d8:	08024098 	.word	0x08024098
 80145dc:	080242c4 	.word	0x080242c4
 80145e0:	080240dc 	.word	0x080240dc
 80145e4:	080242f4 	.word	0x080242f4
 80145e8:	08024330 	.word	0x08024330

080145ec <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b086      	sub	sp, #24
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	3310      	adds	r3, #16
 80145f8:	4618      	mov	r0, r3
 80145fa:	f00c fd2a 	bl	8021052 <sys_mbox_valid>
 80145fe:	4603      	mov	r3, r0
 8014600:	2b00      	cmp	r3, #0
 8014602:	d02f      	beq.n	8014664 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8014604:	e018      	b.n	8014638 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	781b      	ldrb	r3, [r3, #0]
 801460a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801460e:	2b10      	cmp	r3, #16
 8014610:	d10e      	bne.n	8014630 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	f107 020f 	add.w	r2, r7, #15
 8014618:	4611      	mov	r1, r2
 801461a:	4618      	mov	r0, r3
 801461c:	f7ff fafe 	bl	8013c1c <lwip_netconn_is_err_msg>
 8014620:	4603      	mov	r3, r0
 8014622:	2b00      	cmp	r3, #0
 8014624:	d108      	bne.n	8014638 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8014626:	693b      	ldr	r3, [r7, #16]
 8014628:	4618      	mov	r0, r3
 801462a:	f002 fe89 	bl	8017340 <pbuf_free>
 801462e:	e003      	b.n	8014638 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	4618      	mov	r0, r3
 8014634:	f001 f840 	bl	80156b8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	3310      	adds	r3, #16
 801463c:	f107 0210 	add.w	r2, r7, #16
 8014640:	4611      	mov	r1, r2
 8014642:	4618      	mov	r0, r3
 8014644:	f00c fce9 	bl	802101a <sys_arch_mbox_tryfetch>
 8014648:	4603      	mov	r3, r0
 801464a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801464e:	d1da      	bne.n	8014606 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	3310      	adds	r3, #16
 8014654:	4618      	mov	r0, r3
 8014656:	f00c fc75 	bl	8020f44 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	3310      	adds	r3, #16
 801465e:	4618      	mov	r0, r3
 8014660:	f00c fd08 	bl	8021074 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	3314      	adds	r3, #20
 8014668:	4618      	mov	r0, r3
 801466a:	f00c fcf2 	bl	8021052 <sys_mbox_valid>
 801466e:	4603      	mov	r3, r0
 8014670:	2b00      	cmp	r3, #0
 8014672:	d034      	beq.n	80146de <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8014674:	e01d      	b.n	80146b2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8014676:	693b      	ldr	r3, [r7, #16]
 8014678:	f107 020e 	add.w	r2, r7, #14
 801467c:	4611      	mov	r1, r2
 801467e:	4618      	mov	r0, r3
 8014680:	f7ff facc 	bl	8013c1c <lwip_netconn_is_err_msg>
 8014684:	4603      	mov	r3, r0
 8014686:	2b00      	cmp	r3, #0
 8014688:	d113      	bne.n	80146b2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 801468a:	693b      	ldr	r3, [r7, #16]
 801468c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 801468e:	6978      	ldr	r0, [r7, #20]
 8014690:	f7ff ffac 	bl	80145ec <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8014694:	697b      	ldr	r3, [r7, #20]
 8014696:	685b      	ldr	r3, [r3, #4]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d007      	beq.n	80146ac <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	685b      	ldr	r3, [r3, #4]
 80146a0:	4618      	mov	r0, r3
 80146a2:	f003 fc4d 	bl	8017f40 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	2200      	movs	r2, #0
 80146aa:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80146ac:	6978      	ldr	r0, [r7, #20]
 80146ae:	f7ff ff53 	bl	8014558 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	3314      	adds	r3, #20
 80146b6:	f107 0210 	add.w	r2, r7, #16
 80146ba:	4611      	mov	r1, r2
 80146bc:	4618      	mov	r0, r3
 80146be:	f00c fcac 	bl	802101a <sys_arch_mbox_tryfetch>
 80146c2:	4603      	mov	r3, r0
 80146c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80146c8:	d1d5      	bne.n	8014676 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	3314      	adds	r3, #20
 80146ce:	4618      	mov	r0, r3
 80146d0:	f00c fc38 	bl	8020f44 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	3314      	adds	r3, #20
 80146d8:	4618      	mov	r0, r3
 80146da:	f00c fccb 	bl	8021074 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80146de:	bf00      	nop
 80146e0:	3718      	adds	r7, #24
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
	...

080146e8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b086      	sub	sp, #24
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	460b      	mov	r3, r1
 80146f2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80146f4:	2300      	movs	r3, #0
 80146f6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d106      	bne.n	801470c <lwip_netconn_do_close_internal+0x24>
 80146fe:	4b87      	ldr	r3, [pc, #540]	; (801491c <lwip_netconn_do_close_internal+0x234>)
 8014700:	f240 32a2 	movw	r2, #930	; 0x3a2
 8014704:	4986      	ldr	r1, [pc, #536]	; (8014920 <lwip_netconn_do_close_internal+0x238>)
 8014706:	4887      	ldr	r0, [pc, #540]	; (8014924 <lwip_netconn_do_close_internal+0x23c>)
 8014708:	f00e f852 	bl	80227b0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	781b      	ldrb	r3, [r3, #0]
 8014710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014714:	2b10      	cmp	r3, #16
 8014716:	d006      	beq.n	8014726 <lwip_netconn_do_close_internal+0x3e>
 8014718:	4b80      	ldr	r3, [pc, #512]	; (801491c <lwip_netconn_do_close_internal+0x234>)
 801471a:	f240 32a3 	movw	r2, #931	; 0x3a3
 801471e:	4982      	ldr	r1, [pc, #520]	; (8014928 <lwip_netconn_do_close_internal+0x240>)
 8014720:	4880      	ldr	r0, [pc, #512]	; (8014924 <lwip_netconn_do_close_internal+0x23c>)
 8014722:	f00e f845 	bl	80227b0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	785b      	ldrb	r3, [r3, #1]
 801472a:	2b04      	cmp	r3, #4
 801472c:	d006      	beq.n	801473c <lwip_netconn_do_close_internal+0x54>
 801472e:	4b7b      	ldr	r3, [pc, #492]	; (801491c <lwip_netconn_do_close_internal+0x234>)
 8014730:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8014734:	497d      	ldr	r1, [pc, #500]	; (801492c <lwip_netconn_do_close_internal+0x244>)
 8014736:	487b      	ldr	r0, [pc, #492]	; (8014924 <lwip_netconn_do_close_internal+0x23c>)
 8014738:	f00e f83a 	bl	80227b0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	685b      	ldr	r3, [r3, #4]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d106      	bne.n	8014752 <lwip_netconn_do_close_internal+0x6a>
 8014744:	4b75      	ldr	r3, [pc, #468]	; (801491c <lwip_netconn_do_close_internal+0x234>)
 8014746:	f240 32a5 	movw	r2, #933	; 0x3a5
 801474a:	4979      	ldr	r1, [pc, #484]	; (8014930 <lwip_netconn_do_close_internal+0x248>)
 801474c:	4875      	ldr	r0, [pc, #468]	; (8014924 <lwip_netconn_do_close_internal+0x23c>)
 801474e:	f00e f82f 	bl	80227b0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	6a1b      	ldr	r3, [r3, #32]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d106      	bne.n	8014768 <lwip_netconn_do_close_internal+0x80>
 801475a:	4b70      	ldr	r3, [pc, #448]	; (801491c <lwip_netconn_do_close_internal+0x234>)
 801475c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8014760:	4974      	ldr	r1, [pc, #464]	; (8014934 <lwip_netconn_do_close_internal+0x24c>)
 8014762:	4870      	ldr	r0, [pc, #448]	; (8014924 <lwip_netconn_do_close_internal+0x23c>)
 8014764:	f00e f824 	bl	80227b0 <iprintf>

  tpcb = conn->pcb.tcp;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	685b      	ldr	r3, [r3, #4]
 801476c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	6a1b      	ldr	r3, [r3, #32]
 8014772:	7a1b      	ldrb	r3, [r3, #8]
 8014774:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8014776:	7bfb      	ldrb	r3, [r7, #15]
 8014778:	f003 0301 	and.w	r3, r3, #1
 801477c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 801477e:	7bfb      	ldrb	r3, [r7, #15]
 8014780:	f003 0302 	and.w	r3, r3, #2
 8014784:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8014786:	7bfb      	ldrb	r3, [r7, #15]
 8014788:	2b03      	cmp	r3, #3
 801478a:	d102      	bne.n	8014792 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 801478c:	2301      	movs	r3, #1
 801478e:	75bb      	strb	r3, [r7, #22]
 8014790:	e01f      	b.n	80147d2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8014792:	7bbb      	ldrb	r3, [r7, #14]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d00e      	beq.n	80147b6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8014798:	693b      	ldr	r3, [r7, #16]
 801479a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 801479c:	2b05      	cmp	r3, #5
 801479e:	d007      	beq.n	80147b0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80147a4:	2b06      	cmp	r3, #6
 80147a6:	d003      	beq.n	80147b0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80147a8:	693b      	ldr	r3, [r7, #16]
 80147aa:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80147ac:	2b08      	cmp	r3, #8
 80147ae:	d102      	bne.n	80147b6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80147b0:	2301      	movs	r3, #1
 80147b2:	75bb      	strb	r3, [r7, #22]
 80147b4:	e00d      	b.n	80147d2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80147b6:	7b7b      	ldrb	r3, [r7, #13]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d008      	beq.n	80147ce <lwip_netconn_do_close_internal+0xe6>
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	8b5b      	ldrh	r3, [r3, #26]
 80147c0:	f003 0310 	and.w	r3, r3, #16
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d002      	beq.n	80147ce <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80147c8:	2301      	movs	r3, #1
 80147ca:	75bb      	strb	r3, [r7, #22]
 80147cc:	e001      	b.n	80147d2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80147ce:	2300      	movs	r3, #0
 80147d0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80147d2:	7dbb      	ldrb	r3, [r7, #22]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d003      	beq.n	80147e0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80147d8:	2100      	movs	r1, #0
 80147da:	6938      	ldr	r0, [r7, #16]
 80147dc:	f004 fd56 	bl	801928c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80147e0:	693b      	ldr	r3, [r7, #16]
 80147e2:	7d1b      	ldrb	r3, [r3, #20]
 80147e4:	2b01      	cmp	r3, #1
 80147e6:	d104      	bne.n	80147f2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80147e8:	2100      	movs	r1, #0
 80147ea:	6938      	ldr	r0, [r7, #16]
 80147ec:	f004 fdc6 	bl	801937c <tcp_accept>
 80147f0:	e01d      	b.n	801482e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80147f2:	7bbb      	ldrb	r3, [r7, #14]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d007      	beq.n	8014808 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80147f8:	2100      	movs	r1, #0
 80147fa:	6938      	ldr	r0, [r7, #16]
 80147fc:	f004 fd58 	bl	80192b0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8014800:	2100      	movs	r1, #0
 8014802:	6938      	ldr	r0, [r7, #16]
 8014804:	f004 fdba 	bl	801937c <tcp_accept>
    }
    if (shut_tx) {
 8014808:	7b7b      	ldrb	r3, [r7, #13]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d003      	beq.n	8014816 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801480e:	2100      	movs	r1, #0
 8014810:	6938      	ldr	r0, [r7, #16]
 8014812:	f004 fd6f 	bl	80192f4 <tcp_sent>
    }
    if (shut_close) {
 8014816:	7dbb      	ldrb	r3, [r7, #22]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d008      	beq.n	801482e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 801481c:	2200      	movs	r2, #0
 801481e:	2100      	movs	r1, #0
 8014820:	6938      	ldr	r0, [r7, #16]
 8014822:	f004 fdc3 	bl	80193ac <tcp_poll>
      tcp_err(tpcb, NULL);
 8014826:	2100      	movs	r1, #0
 8014828:	6938      	ldr	r0, [r7, #16]
 801482a:	f004 fd85 	bl	8019338 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 801482e:	7dbb      	ldrb	r3, [r7, #22]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d005      	beq.n	8014840 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8014834:	6938      	ldr	r0, [r7, #16]
 8014836:	f003 fa3d 	bl	8017cb4 <tcp_close>
 801483a:	4603      	mov	r3, r0
 801483c:	75fb      	strb	r3, [r7, #23]
 801483e:	e007      	b.n	8014850 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8014840:	7bbb      	ldrb	r3, [r7, #14]
 8014842:	7b7a      	ldrb	r2, [r7, #13]
 8014844:	4619      	mov	r1, r3
 8014846:	6938      	ldr	r0, [r7, #16]
 8014848:	f003 fa60 	bl	8017d0c <tcp_shutdown>
 801484c:	4603      	mov	r3, r0
 801484e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8014850:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d102      	bne.n	801485e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8014858:	2301      	movs	r3, #1
 801485a:	757b      	strb	r3, [r7, #21]
 801485c:	e016      	b.n	801488c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 801485e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014866:	d10f      	bne.n	8014888 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	6a1b      	ldr	r3, [r3, #32]
 801486c:	7a5b      	ldrb	r3, [r3, #9]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d10c      	bne.n	801488c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8014872:	2301      	movs	r3, #1
 8014874:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8014876:	7dbb      	ldrb	r3, [r7, #22]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d007      	beq.n	801488c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 801487c:	6938      	ldr	r0, [r7, #16]
 801487e:	f003 fb5f 	bl	8017f40 <tcp_abort>
          err = ERR_OK;
 8014882:	2300      	movs	r3, #0
 8014884:	75fb      	strb	r3, [r7, #23]
 8014886:	e001      	b.n	801488c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8014888:	2301      	movs	r3, #1
 801488a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 801488c:	7d7b      	ldrb	r3, [r7, #21]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d052      	beq.n	8014938 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	6a1b      	ldr	r3, [r3, #32]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	330c      	adds	r3, #12
 801489a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	6a1b      	ldr	r3, [r3, #32]
 80148a0:	7dfa      	ldrb	r2, [r7, #23]
 80148a2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2200      	movs	r2, #0
 80148a8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	2200      	movs	r2, #0
 80148ae:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80148b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d129      	bne.n	801490c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80148b8:	7dbb      	ldrb	r3, [r7, #22]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d00c      	beq.n	80148d8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	2200      	movs	r2, #0
 80148c2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d005      	beq.n	80148d8 <lwip_netconn_do_close_internal+0x1f0>
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148d0:	2200      	movs	r2, #0
 80148d2:	2104      	movs	r1, #4
 80148d4:	6878      	ldr	r0, [r7, #4]
 80148d6:	4798      	blx	r3
      }
      if (shut_rx) {
 80148d8:	7bbb      	ldrb	r3, [r7, #14]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d009      	beq.n	80148f2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d005      	beq.n	80148f2 <lwip_netconn_do_close_internal+0x20a>
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ea:	2200      	movs	r2, #0
 80148ec:	2100      	movs	r1, #0
 80148ee:	6878      	ldr	r0, [r7, #4]
 80148f0:	4798      	blx	r3
      }
      if (shut_tx) {
 80148f2:	7b7b      	ldrb	r3, [r7, #13]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d009      	beq.n	801490c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d005      	beq.n	801490c <lwip_netconn_do_close_internal+0x224>
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014904:	2200      	movs	r2, #0
 8014906:	2102      	movs	r1, #2
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801490c:	78fb      	ldrb	r3, [r7, #3]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d002      	beq.n	8014918 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8014912:	68b8      	ldr	r0, [r7, #8]
 8014914:	f00c fc14 	bl	8021140 <sys_sem_signal>
    }
    return ERR_OK;
 8014918:	2300      	movs	r3, #0
 801491a:	e03c      	b.n	8014996 <lwip_netconn_do_close_internal+0x2ae>
 801491c:	08024098 	.word	0x08024098
 8014920:	0802436c 	.word	0x0802436c
 8014924:	080240dc 	.word	0x080240dc
 8014928:	0802437c 	.word	0x0802437c
 801492c:	0802439c 	.word	0x0802439c
 8014930:	080243c0 	.word	0x080243c0
 8014934:	08024200 	.word	0x08024200
  }
  if (!close_finished) {
 8014938:	7d7b      	ldrb	r3, [r7, #21]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d11e      	bne.n	801497c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	7d1b      	ldrb	r3, [r3, #20]
 8014942:	2b01      	cmp	r3, #1
 8014944:	d106      	bne.n	8014954 <lwip_netconn_do_close_internal+0x26c>
 8014946:	4b16      	ldr	r3, [pc, #88]	; (80149a0 <lwip_netconn_do_close_internal+0x2b8>)
 8014948:	f240 4241 	movw	r2, #1089	; 0x441
 801494c:	4915      	ldr	r1, [pc, #84]	; (80149a4 <lwip_netconn_do_close_internal+0x2bc>)
 801494e:	4816      	ldr	r0, [pc, #88]	; (80149a8 <lwip_netconn_do_close_internal+0x2c0>)
 8014950:	f00d ff2e 	bl	80227b0 <iprintf>
    if (shut_tx) {
 8014954:	7b7b      	ldrb	r3, [r7, #13]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d003      	beq.n	8014962 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801495a:	4914      	ldr	r1, [pc, #80]	; (80149ac <lwip_netconn_do_close_internal+0x2c4>)
 801495c:	6938      	ldr	r0, [r7, #16]
 801495e:	f004 fcc9 	bl	80192f4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8014962:	2201      	movs	r2, #1
 8014964:	4912      	ldr	r1, [pc, #72]	; (80149b0 <lwip_netconn_do_close_internal+0x2c8>)
 8014966:	6938      	ldr	r0, [r7, #16]
 8014968:	f004 fd20 	bl	80193ac <tcp_poll>
    tcp_err(tpcb, err_tcp);
 801496c:	4911      	ldr	r1, [pc, #68]	; (80149b4 <lwip_netconn_do_close_internal+0x2cc>)
 801496e:	6938      	ldr	r0, [r7, #16]
 8014970:	f004 fce2 	bl	8019338 <tcp_err>
    tcp_arg(tpcb, conn);
 8014974:	6879      	ldr	r1, [r7, #4]
 8014976:	6938      	ldr	r0, [r7, #16]
 8014978:	f004 fc88 	bl	801928c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 801497c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d106      	bne.n	8014992 <lwip_netconn_do_close_internal+0x2aa>
 8014984:	4b06      	ldr	r3, [pc, #24]	; (80149a0 <lwip_netconn_do_close_internal+0x2b8>)
 8014986:	f240 424d 	movw	r2, #1101	; 0x44d
 801498a:	490b      	ldr	r1, [pc, #44]	; (80149b8 <lwip_netconn_do_close_internal+0x2d0>)
 801498c:	4806      	ldr	r0, [pc, #24]	; (80149a8 <lwip_netconn_do_close_internal+0x2c0>)
 801498e:	f00d ff0f 	bl	80227b0 <iprintf>
  return err;
 8014992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014996:	4618      	mov	r0, r3
 8014998:	3718      	adds	r7, #24
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}
 801499e:	bf00      	nop
 80149a0:	08024098 	.word	0x08024098
 80149a4:	080243d4 	.word	0x080243d4
 80149a8:	080240dc 	.word	0x080240dc
 80149ac:	08013f61 	.word	0x08013f61
 80149b0:	08013e99 	.word	0x08013e99
 80149b4:	08014009 	.word	0x08014009
 80149b8:	080243f8 	.word	0x080243f8

080149bc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b084      	sub	sp, #16
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	785b      	ldrb	r3, [r3, #1]
 80149ce:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80149d0:	7afb      	ldrb	r3, [r7, #11]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d00d      	beq.n	80149f2 <lwip_netconn_do_delconn+0x36>
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	781b      	ldrb	r3, [r3, #0]
 80149dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80149e0:	2b10      	cmp	r3, #16
 80149e2:	d006      	beq.n	80149f2 <lwip_netconn_do_delconn+0x36>
 80149e4:	4b60      	ldr	r3, [pc, #384]	; (8014b68 <lwip_netconn_do_delconn+0x1ac>)
 80149e6:	f240 425e 	movw	r2, #1118	; 0x45e
 80149ea:	4960      	ldr	r1, [pc, #384]	; (8014b6c <lwip_netconn_do_delconn+0x1b0>)
 80149ec:	4860      	ldr	r0, [pc, #384]	; (8014b70 <lwip_netconn_do_delconn+0x1b4>)
 80149ee:	f00d fedf 	bl	80227b0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80149f2:	7afb      	ldrb	r3, [r7, #11]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d005      	beq.n	8014a04 <lwip_netconn_do_delconn+0x48>
 80149f8:	7afb      	ldrb	r3, [r7, #11]
 80149fa:	2b02      	cmp	r3, #2
 80149fc:	d002      	beq.n	8014a04 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80149fe:	7afb      	ldrb	r3, [r7, #11]
 8014a00:	2b03      	cmp	r3, #3
 8014a02:	d109      	bne.n	8014a18 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8014a04:	7afb      	ldrb	r3, [r7, #11]
 8014a06:	2b03      	cmp	r3, #3
 8014a08:	d10a      	bne.n	8014a20 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	7f1b      	ldrb	r3, [r3, #28]
 8014a10:	f003 0304 	and.w	r3, r3, #4
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d103      	bne.n	8014a20 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	22fb      	movs	r2, #251	; 0xfb
 8014a1c:	711a      	strb	r2, [r3, #4]
 8014a1e:	e097      	b.n	8014b50 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8014a20:	7afb      	ldrb	r3, [r7, #11]
 8014a22:	2b03      	cmp	r3, #3
 8014a24:	d10d      	bne.n	8014a42 <lwip_netconn_do_delconn+0x86>
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	7f1b      	ldrb	r3, [r3, #28]
 8014a2c:	f003 0304 	and.w	r3, r3, #4
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d106      	bne.n	8014a42 <lwip_netconn_do_delconn+0x86>
 8014a34:	4b4c      	ldr	r3, [pc, #304]	; (8014b68 <lwip_netconn_do_delconn+0x1ac>)
 8014a36:	f240 427a 	movw	r2, #1146	; 0x47a
 8014a3a:	494e      	ldr	r1, [pc, #312]	; (8014b74 <lwip_netconn_do_delconn+0x1b8>)
 8014a3c:	484c      	ldr	r0, [pc, #304]	; (8014b70 <lwip_netconn_do_delconn+0x1b4>)
 8014a3e:	f00d feb7 	bl	80227b0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	2200      	movs	r2, #0
 8014a46:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7ff fdcd 	bl	80145ec <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	685b      	ldr	r3, [r3, #4]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d05f      	beq.n	8014b1c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a66:	2b10      	cmp	r3, #16
 8014a68:	d00d      	beq.n	8014a86 <lwip_netconn_do_delconn+0xca>
 8014a6a:	2b20      	cmp	r3, #32
 8014a6c:	d151      	bne.n	8014b12 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	685b      	ldr	r3, [r3, #4]
 8014a74:	2200      	movs	r2, #0
 8014a76:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	685b      	ldr	r3, [r3, #4]
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f009 fee2 	bl	801e848 <udp_remove>
          break;
 8014a84:	e046      	b.n	8014b14 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	6a1b      	ldr	r3, [r3, #32]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d006      	beq.n	8014a9e <lwip_netconn_do_delconn+0xe2>
 8014a90:	4b35      	ldr	r3, [pc, #212]	; (8014b68 <lwip_netconn_do_delconn+0x1ac>)
 8014a92:	f240 4294 	movw	r2, #1172	; 0x494
 8014a96:	4938      	ldr	r1, [pc, #224]	; (8014b78 <lwip_netconn_do_delconn+0x1bc>)
 8014a98:	4835      	ldr	r0, [pc, #212]	; (8014b70 <lwip_netconn_do_delconn+0x1b4>)
 8014a9a:	f00d fe89 	bl	80227b0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	2204      	movs	r2, #4
 8014aa4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2203      	movs	r2, #3
 8014aaa:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	68fa      	ldr	r2, [r7, #12]
 8014ab2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	2100      	movs	r1, #0
 8014aba:	4618      	mov	r0, r3
 8014abc:	f7ff fe14 	bl	80146e8 <lwip_netconn_do_close_internal>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d04b      	beq.n	8014b5e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	785b      	ldrb	r3, [r3, #1]
 8014acc:	2b04      	cmp	r3, #4
 8014ace:	d006      	beq.n	8014ade <lwip_netconn_do_delconn+0x122>
 8014ad0:	4b25      	ldr	r3, [pc, #148]	; (8014b68 <lwip_netconn_do_delconn+0x1ac>)
 8014ad2:	f240 429a 	movw	r2, #1178	; 0x49a
 8014ad6:	4929      	ldr	r1, [pc, #164]	; (8014b7c <lwip_netconn_do_delconn+0x1c0>)
 8014ad8:	4825      	ldr	r0, [pc, #148]	; (8014b70 <lwip_netconn_do_delconn+0x1b4>)
 8014ada:	f00d fe69 	bl	80227b0 <iprintf>
            UNLOCK_TCPIP_CORE();
 8014ade:	4828      	ldr	r0, [pc, #160]	; (8014b80 <lwip_netconn_do_delconn+0x1c4>)
 8014ae0:	f00c fb9f 	bl	8021222 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	330c      	adds	r3, #12
 8014aea:	2100      	movs	r1, #0
 8014aec:	4618      	mov	r0, r3
 8014aee:	f00c faf6 	bl	80210de <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8014af2:	4823      	ldr	r0, [pc, #140]	; (8014b80 <lwip_netconn_do_delconn+0x1c4>)
 8014af4:	f00c fb86 	bl	8021204 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	785b      	ldrb	r3, [r3, #1]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d02d      	beq.n	8014b5e <lwip_netconn_do_delconn+0x1a2>
 8014b02:	4b19      	ldr	r3, [pc, #100]	; (8014b68 <lwip_netconn_do_delconn+0x1ac>)
 8014b04:	f240 429e 	movw	r2, #1182	; 0x49e
 8014b08:	491c      	ldr	r1, [pc, #112]	; (8014b7c <lwip_netconn_do_delconn+0x1c0>)
 8014b0a:	4819      	ldr	r0, [pc, #100]	; (8014b70 <lwip_netconn_do_delconn+0x1b4>)
 8014b0c:	f00d fe50 	bl	80227b0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8014b10:	e025      	b.n	8014b5e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8014b12:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d007      	beq.n	8014b36 <lwip_netconn_do_delconn+0x17a>
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b2c:	68fa      	ldr	r2, [r7, #12]
 8014b2e:	6810      	ldr	r0, [r2, #0]
 8014b30:	2200      	movs	r2, #0
 8014b32:	2100      	movs	r1, #0
 8014b34:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d007      	beq.n	8014b50 <lwip_netconn_do_delconn+0x194>
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b46:	68fa      	ldr	r2, [r7, #12]
 8014b48:	6810      	ldr	r0, [r2, #0]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	2102      	movs	r1, #2
 8014b4e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	330c      	adds	r3, #12
 8014b56:	4618      	mov	r0, r3
 8014b58:	f00c fb0c 	bl	8021174 <sys_sem_valid>
 8014b5c:	e000      	b.n	8014b60 <lwip_netconn_do_delconn+0x1a4>
          return;
 8014b5e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8014b60:	3710      	adds	r7, #16
 8014b62:	46bd      	mov	sp, r7
 8014b64:	bd80      	pop	{r7, pc}
 8014b66:	bf00      	nop
 8014b68:	08024098 	.word	0x08024098
 8014b6c:	08024408 	.word	0x08024408
 8014b70:	080240dc 	.word	0x080240dc
 8014b74:	0802441c 	.word	0x0802441c
 8014b78:	0802443c 	.word	0x0802443c
 8014b7c:	08024458 	.word	0x08024458
 8014b80:	2000669c 	.word	0x2000669c

08014b84 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b084      	sub	sp, #16
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	685b      	ldr	r3, [r3, #4]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d025      	beq.n	8014be6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	781b      	ldrb	r3, [r3, #0]
 8014ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014ba4:	2b10      	cmp	r3, #16
 8014ba6:	d00e      	beq.n	8014bc6 <lwip_netconn_do_bind+0x42>
 8014ba8:	2b20      	cmp	r3, #32
 8014baa:	d119      	bne.n	8014be0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	6858      	ldr	r0, [r3, #4]
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	6899      	ldr	r1, [r3, #8]
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	899b      	ldrh	r3, [r3, #12]
 8014bba:	461a      	mov	r2, r3
 8014bbc:	f009 fd2e 	bl	801e61c <udp_bind>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	73fb      	strb	r3, [r7, #15]
        break;
 8014bc4:	e011      	b.n	8014bea <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8014bc6:	68bb      	ldr	r3, [r7, #8]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	6858      	ldr	r0, [r3, #4]
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	6899      	ldr	r1, [r3, #8]
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	899b      	ldrh	r3, [r3, #12]
 8014bd4:	461a      	mov	r2, r3
 8014bd6:	f003 f9bf 	bl	8017f58 <tcp_bind>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	73fb      	strb	r3, [r7, #15]
        break;
 8014bde:	e004      	b.n	8014bea <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8014be0:	23fa      	movs	r3, #250	; 0xfa
 8014be2:	73fb      	strb	r3, [r7, #15]
        break;
 8014be4:	e001      	b.n	8014bea <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8014be6:	23fa      	movs	r3, #250	; 0xfa
 8014be8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8014bea:	68bb      	ldr	r3, [r7, #8]
 8014bec:	7bfa      	ldrb	r2, [r7, #15]
 8014bee:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8014bf0:	bf00      	nop
 8014bf2:	3710      	adds	r7, #16
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}

08014bf8 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b088      	sub	sp, #32
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	60f8      	str	r0, [r7, #12]
 8014c00:	60b9      	str	r1, [r7, #8]
 8014c02:	4613      	mov	r3, r2
 8014c04:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8014c06:	2300      	movs	r3, #0
 8014c08:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8014c0e:	69bb      	ldr	r3, [r7, #24]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d102      	bne.n	8014c1a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8014c14:	f06f 0305 	mvn.w	r3, #5
 8014c18:	e070      	b.n	8014cfc <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8014c1a:	69bb      	ldr	r3, [r7, #24]
 8014c1c:	785b      	ldrb	r3, [r3, #1]
 8014c1e:	2b03      	cmp	r3, #3
 8014c20:	d006      	beq.n	8014c30 <lwip_netconn_do_connected+0x38>
 8014c22:	4b38      	ldr	r3, [pc, #224]	; (8014d04 <lwip_netconn_do_connected+0x10c>)
 8014c24:	f240 5223 	movw	r2, #1315	; 0x523
 8014c28:	4937      	ldr	r1, [pc, #220]	; (8014d08 <lwip_netconn_do_connected+0x110>)
 8014c2a:	4838      	ldr	r0, [pc, #224]	; (8014d0c <lwip_netconn_do_connected+0x114>)
 8014c2c:	f00d fdc0 	bl	80227b0 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8014c30:	69bb      	ldr	r3, [r7, #24]
 8014c32:	6a1b      	ldr	r3, [r3, #32]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d10c      	bne.n	8014c52 <lwip_netconn_do_connected+0x5a>
 8014c38:	69bb      	ldr	r3, [r7, #24]
 8014c3a:	7f1b      	ldrb	r3, [r3, #28]
 8014c3c:	f003 0304 	and.w	r3, r3, #4
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d106      	bne.n	8014c52 <lwip_netconn_do_connected+0x5a>
 8014c44:	4b2f      	ldr	r3, [pc, #188]	; (8014d04 <lwip_netconn_do_connected+0x10c>)
 8014c46:	f240 5224 	movw	r2, #1316	; 0x524
 8014c4a:	4931      	ldr	r1, [pc, #196]	; (8014d10 <lwip_netconn_do_connected+0x118>)
 8014c4c:	482f      	ldr	r0, [pc, #188]	; (8014d0c <lwip_netconn_do_connected+0x114>)
 8014c4e:	f00d fdaf 	bl	80227b0 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8014c52:	69bb      	ldr	r3, [r7, #24]
 8014c54:	6a1b      	ldr	r3, [r3, #32]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d008      	beq.n	8014c6c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8014c5a:	69bb      	ldr	r3, [r7, #24]
 8014c5c:	6a1b      	ldr	r3, [r3, #32]
 8014c5e:	79fa      	ldrb	r2, [r7, #7]
 8014c60:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8014c62:	69bb      	ldr	r3, [r7, #24]
 8014c64:	6a1b      	ldr	r3, [r3, #32]
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	330c      	adds	r3, #12
 8014c6a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8014c6c:	69bb      	ldr	r3, [r7, #24]
 8014c6e:	781b      	ldrb	r3, [r3, #0]
 8014c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c74:	2b10      	cmp	r3, #16
 8014c76:	d106      	bne.n	8014c86 <lwip_netconn_do_connected+0x8e>
 8014c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d102      	bne.n	8014c86 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8014c80:	69b8      	ldr	r0, [r7, #24]
 8014c82:	f7ff fa97 	bl	80141b4 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8014c86:	69bb      	ldr	r3, [r7, #24]
 8014c88:	7f1b      	ldrb	r3, [r3, #28]
 8014c8a:	f003 0304 	and.w	r3, r3, #4
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	bf0c      	ite	eq
 8014c92:	2301      	moveq	r3, #1
 8014c94:	2300      	movne	r3, #0
 8014c96:	b2db      	uxtb	r3, r3
 8014c98:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8014c9a:	69bb      	ldr	r3, [r7, #24]
 8014c9c:	7f1b      	ldrb	r3, [r3, #28]
 8014c9e:	f023 0304 	bic.w	r3, r3, #4
 8014ca2:	b2da      	uxtb	r2, r3
 8014ca4:	69bb      	ldr	r3, [r7, #24]
 8014ca6:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8014ca8:	697b      	ldr	r3, [r7, #20]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d002      	beq.n	8014cb4 <lwip_netconn_do_connected+0xbc>
 8014cae:	69fb      	ldr	r3, [r7, #28]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d10c      	bne.n	8014cce <lwip_netconn_do_connected+0xd6>
 8014cb4:	697b      	ldr	r3, [r7, #20]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d102      	bne.n	8014cc0 <lwip_netconn_do_connected+0xc8>
 8014cba:	69fb      	ldr	r3, [r7, #28]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d006      	beq.n	8014cce <lwip_netconn_do_connected+0xd6>
 8014cc0:	4b10      	ldr	r3, [pc, #64]	; (8014d04 <lwip_netconn_do_connected+0x10c>)
 8014cc2:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8014cc6:	4913      	ldr	r1, [pc, #76]	; (8014d14 <lwip_netconn_do_connected+0x11c>)
 8014cc8:	4810      	ldr	r0, [pc, #64]	; (8014d0c <lwip_netconn_do_connected+0x114>)
 8014cca:	f00d fd71 	bl	80227b0 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8014cce:	69bb      	ldr	r3, [r7, #24]
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8014cd4:	69bb      	ldr	r3, [r7, #24]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8014cda:	69bb      	ldr	r3, [r7, #24]
 8014cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d005      	beq.n	8014cee <lwip_netconn_do_connected+0xf6>
 8014ce2:	69bb      	ldr	r3, [r7, #24]
 8014ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	2102      	movs	r1, #2
 8014cea:	69b8      	ldr	r0, [r7, #24]
 8014cec:	4798      	blx	r3

  if (was_blocking) {
 8014cee:	697b      	ldr	r3, [r7, #20]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d002      	beq.n	8014cfa <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8014cf4:	69f8      	ldr	r0, [r7, #28]
 8014cf6:	f00c fa23 	bl	8021140 <sys_sem_signal>
  }
  return ERR_OK;
 8014cfa:	2300      	movs	r3, #0
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3720      	adds	r7, #32
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}
 8014d04:	08024098 	.word	0x08024098
 8014d08:	08024460 	.word	0x08024460
 8014d0c:	080240dc 	.word	0x080240dc
 8014d10:	08024480 	.word	0x08024480
 8014d14:	080244c0 	.word	0x080244c0

08014d18 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b086      	sub	sp, #24
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8014d24:	693b      	ldr	r3, [r7, #16]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	685b      	ldr	r3, [r3, #4]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d102      	bne.n	8014d34 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8014d2e:	23f1      	movs	r3, #241	; 0xf1
 8014d30:	75fb      	strb	r3, [r7, #23]
 8014d32:	e09b      	b.n	8014e6c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8014d34:	693b      	ldr	r3, [r7, #16]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	781b      	ldrb	r3, [r3, #0]
 8014d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014d3e:	2b10      	cmp	r3, #16
 8014d40:	d00f      	beq.n	8014d62 <lwip_netconn_do_connect+0x4a>
 8014d42:	2b20      	cmp	r3, #32
 8014d44:	f040 8087 	bne.w	8014e56 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8014d48:	693b      	ldr	r3, [r7, #16]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	6858      	ldr	r0, [r3, #4]
 8014d4e:	693b      	ldr	r3, [r7, #16]
 8014d50:	6899      	ldr	r1, [r3, #8]
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	899b      	ldrh	r3, [r3, #12]
 8014d56:	461a      	mov	r2, r3
 8014d58:	f009 fce8 	bl	801e72c <udp_connect>
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	75fb      	strb	r3, [r7, #23]
        break;
 8014d60:	e084      	b.n	8014e6c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	785b      	ldrb	r3, [r3, #1]
 8014d68:	2b03      	cmp	r3, #3
 8014d6a:	d102      	bne.n	8014d72 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8014d6c:	23f7      	movs	r3, #247	; 0xf7
 8014d6e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8014d70:	e07b      	b.n	8014e6a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8014d72:	693b      	ldr	r3, [r7, #16]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	785b      	ldrb	r3, [r3, #1]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d002      	beq.n	8014d82 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8014d7c:	23f6      	movs	r3, #246	; 0xf6
 8014d7e:	75fb      	strb	r3, [r7, #23]
        break;
 8014d80:	e073      	b.n	8014e6a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8014d82:	693b      	ldr	r3, [r7, #16]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	4618      	mov	r0, r3
 8014d88:	f7ff fa14 	bl	80141b4 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8014d8c:	693b      	ldr	r3, [r7, #16]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	6858      	ldr	r0, [r3, #4]
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	6899      	ldr	r1, [r3, #8]
 8014d96:	693b      	ldr	r3, [r7, #16]
 8014d98:	899a      	ldrh	r2, [r3, #12]
 8014d9a:	4b38      	ldr	r3, [pc, #224]	; (8014e7c <lwip_netconn_do_connect+0x164>)
 8014d9c:	f003 fb2e 	bl	80183fc <tcp_connect>
 8014da0:	4603      	mov	r3, r0
 8014da2:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8014da4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d15e      	bne.n	8014e6a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8014dac:	693b      	ldr	r3, [r7, #16]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	7f1b      	ldrb	r3, [r3, #28]
 8014db2:	f003 0302 	and.w	r3, r3, #2
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	bf14      	ite	ne
 8014dba:	2301      	movne	r3, #1
 8014dbc:	2300      	moveq	r3, #0
 8014dbe:	b2db      	uxtb	r3, r3
 8014dc0:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8014dc2:	693b      	ldr	r3, [r7, #16]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	2203      	movs	r2, #3
 8014dc8:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8014dca:	7bfb      	ldrb	r3, [r7, #15]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d009      	beq.n	8014de4 <lwip_netconn_do_connect+0xcc>
 8014dd0:	693b      	ldr	r3, [r7, #16]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	7f1a      	ldrb	r2, [r3, #28]
 8014dd6:	693b      	ldr	r3, [r7, #16]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	f042 0204 	orr.w	r2, r2, #4
 8014dde:	b2d2      	uxtb	r2, r2
 8014de0:	771a      	strb	r2, [r3, #28]
 8014de2:	e008      	b.n	8014df6 <lwip_netconn_do_connect+0xde>
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	7f1a      	ldrb	r2, [r3, #28]
 8014dea:	693b      	ldr	r3, [r7, #16]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	f022 0204 	bic.w	r2, r2, #4
 8014df2:	b2d2      	uxtb	r2, r2
 8014df4:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8014df6:	7bfb      	ldrb	r3, [r7, #15]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d002      	beq.n	8014e02 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8014dfc:	23fb      	movs	r3, #251	; 0xfb
 8014dfe:	75fb      	strb	r3, [r7, #23]
        break;
 8014e00:	e033      	b.n	8014e6a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8014e02:	693b      	ldr	r3, [r7, #16]
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	693a      	ldr	r2, [r7, #16]
 8014e08:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	785b      	ldrb	r3, [r3, #1]
 8014e10:	2b03      	cmp	r3, #3
 8014e12:	d006      	beq.n	8014e22 <lwip_netconn_do_connect+0x10a>
 8014e14:	4b1a      	ldr	r3, [pc, #104]	; (8014e80 <lwip_netconn_do_connect+0x168>)
 8014e16:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8014e1a:	491a      	ldr	r1, [pc, #104]	; (8014e84 <lwip_netconn_do_connect+0x16c>)
 8014e1c:	481a      	ldr	r0, [pc, #104]	; (8014e88 <lwip_netconn_do_connect+0x170>)
 8014e1e:	f00d fcc7 	bl	80227b0 <iprintf>
              UNLOCK_TCPIP_CORE();
 8014e22:	481a      	ldr	r0, [pc, #104]	; (8014e8c <lwip_netconn_do_connect+0x174>)
 8014e24:	f00c f9fd 	bl	8021222 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8014e28:	693b      	ldr	r3, [r7, #16]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	330c      	adds	r3, #12
 8014e2e:	2100      	movs	r1, #0
 8014e30:	4618      	mov	r0, r3
 8014e32:	f00c f954 	bl	80210de <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8014e36:	4815      	ldr	r0, [pc, #84]	; (8014e8c <lwip_netconn_do_connect+0x174>)
 8014e38:	f00c f9e4 	bl	8021204 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8014e3c:	693b      	ldr	r3, [r7, #16]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	785b      	ldrb	r3, [r3, #1]
 8014e42:	2b03      	cmp	r3, #3
 8014e44:	d116      	bne.n	8014e74 <lwip_netconn_do_connect+0x15c>
 8014e46:	4b0e      	ldr	r3, [pc, #56]	; (8014e80 <lwip_netconn_do_connect+0x168>)
 8014e48:	f240 5274 	movw	r2, #1396	; 0x574
 8014e4c:	490d      	ldr	r1, [pc, #52]	; (8014e84 <lwip_netconn_do_connect+0x16c>)
 8014e4e:	480e      	ldr	r0, [pc, #56]	; (8014e88 <lwip_netconn_do_connect+0x170>)
 8014e50:	f00d fcae 	bl	80227b0 <iprintf>
              return;
 8014e54:	e00e      	b.n	8014e74 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8014e56:	4b0a      	ldr	r3, [pc, #40]	; (8014e80 <lwip_netconn_do_connect+0x168>)
 8014e58:	f240 527d 	movw	r2, #1405	; 0x57d
 8014e5c:	490c      	ldr	r1, [pc, #48]	; (8014e90 <lwip_netconn_do_connect+0x178>)
 8014e5e:	480a      	ldr	r0, [pc, #40]	; (8014e88 <lwip_netconn_do_connect+0x170>)
 8014e60:	f00d fca6 	bl	80227b0 <iprintf>
 8014e64:	23fa      	movs	r3, #250	; 0xfa
 8014e66:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8014e68:	e000      	b.n	8014e6c <lwip_netconn_do_connect+0x154>
        break;
 8014e6a:	bf00      	nop
    }
  }
  msg->err = err;
 8014e6c:	693b      	ldr	r3, [r7, #16]
 8014e6e:	7dfa      	ldrb	r2, [r7, #23]
 8014e70:	711a      	strb	r2, [r3, #4]
 8014e72:	e000      	b.n	8014e76 <lwip_netconn_do_connect+0x15e>
              return;
 8014e74:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8014e76:	3718      	adds	r7, #24
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd80      	pop	{r7, pc}
 8014e7c:	08014bf9 	.word	0x08014bf9
 8014e80:	08024098 	.word	0x08024098
 8014e84:	08024458 	.word	0x08024458
 8014e88:	080240dc 	.word	0x080240dc
 8014e8c:	2000669c 	.word	0x2000669c
 8014e90:	080244e0 	.word	0x080244e0

08014e94 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b086      	sub	sp, #24
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8014ea0:	697b      	ldr	r3, [r7, #20]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	685b      	ldr	r3, [r3, #4]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d07f      	beq.n	8014faa <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	781b      	ldrb	r3, [r3, #0]
 8014eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014eb4:	2b10      	cmp	r3, #16
 8014eb6:	d175      	bne.n	8014fa4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	785b      	ldrb	r3, [r3, #1]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d165      	bne.n	8014f8e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8014ec2:	697b      	ldr	r3, [r7, #20]
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	685b      	ldr	r3, [r3, #4]
 8014ec8:	7d1b      	ldrb	r3, [r3, #20]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d002      	beq.n	8014ed4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8014ece:	23fa      	movs	r3, #250	; 0xfa
 8014ed0:	72fb      	strb	r3, [r7, #11]
 8014ed2:	e06c      	b.n	8014fae <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8014ed4:	23ff      	movs	r3, #255	; 0xff
 8014ed6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8014ed8:	697b      	ldr	r3, [r7, #20]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	685b      	ldr	r3, [r3, #4]
 8014ede:	f107 020b 	add.w	r2, r7, #11
 8014ee2:	7cf9      	ldrb	r1, [r7, #19]
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f003 f8ef 	bl	80180c8 <tcp_listen_with_backlog_and_err>
 8014eea:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d05d      	beq.n	8014fae <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8014ef2:	697b      	ldr	r3, [r7, #20]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	3310      	adds	r3, #16
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f00c f8aa 	bl	8021052 <sys_mbox_valid>
 8014efe:	4603      	mov	r3, r0
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d00b      	beq.n	8014f1c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8014f04:	697b      	ldr	r3, [r7, #20]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	3310      	adds	r3, #16
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f00c f81a 	bl	8020f44 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8014f10:	697b      	ldr	r3, [r7, #20]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	3310      	adds	r3, #16
 8014f16:	4618      	mov	r0, r3
 8014f18:	f00c f8ac 	bl	8021074 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	3314      	adds	r3, #20
 8014f26:	4618      	mov	r0, r3
 8014f28:	f00c f893 	bl	8021052 <sys_mbox_valid>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d108      	bne.n	8014f44 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	3314      	adds	r3, #20
 8014f38:	2106      	movs	r1, #6
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f00b ffe0 	bl	8020f00 <sys_mbox_new>
 8014f40:	4603      	mov	r3, r0
 8014f42:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8014f44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d118      	bne.n	8014f7e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8014f4c:	697b      	ldr	r3, [r7, #20]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	2202      	movs	r2, #2
 8014f52:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	68fa      	ldr	r2, [r7, #12]
 8014f5a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	685a      	ldr	r2, [r3, #4]
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	4619      	mov	r1, r3
 8014f68:	4610      	mov	r0, r2
 8014f6a:	f004 f98f 	bl	801928c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8014f6e:	697b      	ldr	r3, [r7, #20]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	685b      	ldr	r3, [r3, #4]
 8014f74:	4912      	ldr	r1, [pc, #72]	; (8014fc0 <lwip_netconn_do_listen+0x12c>)
 8014f76:	4618      	mov	r0, r3
 8014f78:	f004 fa00 	bl	801937c <tcp_accept>
 8014f7c:	e017      	b.n	8014fae <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8014f7e:	68f8      	ldr	r0, [r7, #12]
 8014f80:	f002 fe98 	bl	8017cb4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8014f84:	697b      	ldr	r3, [r7, #20]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	2200      	movs	r2, #0
 8014f8a:	605a      	str	r2, [r3, #4]
 8014f8c:	e00f      	b.n	8014fae <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	785b      	ldrb	r3, [r3, #1]
 8014f94:	2b02      	cmp	r3, #2
 8014f96:	d102      	bne.n	8014f9e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8014f98:	2300      	movs	r3, #0
 8014f9a:	72fb      	strb	r3, [r7, #11]
 8014f9c:	e007      	b.n	8014fae <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8014f9e:	23f5      	movs	r3, #245	; 0xf5
 8014fa0:	72fb      	strb	r3, [r7, #11]
 8014fa2:	e004      	b.n	8014fae <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8014fa4:	23f0      	movs	r3, #240	; 0xf0
 8014fa6:	72fb      	strb	r3, [r7, #11]
 8014fa8:	e001      	b.n	8014fae <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8014faa:	23f5      	movs	r3, #245	; 0xf5
 8014fac:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8014fae:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8014fb6:	bf00      	nop
 8014fb8:	3718      	adds	r7, #24
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	bd80      	pop	{r7, pc}
 8014fbe:	bf00      	nop
 8014fc0:	08014205 	.word	0x08014205

08014fc4 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b084      	sub	sp, #16
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8014fd0:	68bb      	ldr	r3, [r7, #8]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f7fe fdd0 	bl	8013b7a <netconn_err>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8014fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d134      	bne.n	8015050 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d02d      	beq.n	801504c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	781b      	ldrb	r3, [r3, #0]
 8014ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014ffa:	2b20      	cmp	r3, #32
 8014ffc:	d123      	bne.n	8015046 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	689b      	ldr	r3, [r3, #8]
 8015002:	689b      	ldr	r3, [r3, #8]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d10c      	bne.n	8015022 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	685a      	ldr	r2, [r3, #4]
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	689b      	ldr	r3, [r3, #8]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	4619      	mov	r1, r3
 8015016:	4610      	mov	r0, r2
 8015018:	f009 f916 	bl	801e248 <udp_send>
 801501c:	4603      	mov	r3, r0
 801501e:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8015020:	e016      	b.n	8015050 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	6858      	ldr	r0, [r3, #4]
 8015028:	68bb      	ldr	r3, [r7, #8]
 801502a:	689b      	ldr	r3, [r3, #8]
 801502c:	6819      	ldr	r1, [r3, #0]
 801502e:	68bb      	ldr	r3, [r7, #8]
 8015030:	689b      	ldr	r3, [r3, #8]
 8015032:	f103 0208 	add.w	r2, r3, #8
 8015036:	68bb      	ldr	r3, [r7, #8]
 8015038:	689b      	ldr	r3, [r3, #8]
 801503a:	899b      	ldrh	r3, [r3, #12]
 801503c:	f009 f938 	bl	801e2b0 <udp_sendto>
 8015040:	4603      	mov	r3, r0
 8015042:	73fb      	strb	r3, [r7, #15]
          break;
 8015044:	e004      	b.n	8015050 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8015046:	23f5      	movs	r3, #245	; 0xf5
 8015048:	73fb      	strb	r3, [r7, #15]
          break;
 801504a:	e001      	b.n	8015050 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 801504c:	23f5      	movs	r3, #245	; 0xf5
 801504e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8015050:	68bb      	ldr	r3, [r7, #8]
 8015052:	7bfa      	ldrb	r2, [r7, #15]
 8015054:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8015056:	bf00      	nop
 8015058:	3710      	adds	r7, #16
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}

0801505e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 801505e:	b580      	push	{r7, lr}
 8015060:	b086      	sub	sp, #24
 8015062:	af00      	add	r7, sp, #0
 8015064:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	2200      	movs	r2, #0
 801506e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8015070:	693b      	ldr	r3, [r7, #16]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	685b      	ldr	r3, [r3, #4]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d022      	beq.n	80150c0 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801507a:	693b      	ldr	r3, [r7, #16]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	781b      	ldrb	r3, [r3, #0]
 8015080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015084:	2b10      	cmp	r3, #16
 8015086:	d11b      	bne.n	80150c0 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8015088:	693b      	ldr	r3, [r7, #16]
 801508a:	689b      	ldr	r3, [r3, #8]
 801508c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 801508e:	697b      	ldr	r3, [r7, #20]
 8015090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015094:	d202      	bcs.n	801509c <lwip_netconn_do_recv+0x3e>
 8015096:	697b      	ldr	r3, [r7, #20]
 8015098:	b29b      	uxth	r3, r3
 801509a:	e001      	b.n	80150a0 <lwip_netconn_do_recv+0x42>
 801509c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150a0:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	685b      	ldr	r3, [r3, #4]
 80150a8:	89fa      	ldrh	r2, [r7, #14]
 80150aa:	4611      	mov	r1, r2
 80150ac:	4618      	mov	r0, r3
 80150ae:	f003 f90f 	bl	80182d0 <tcp_recved>
        remaining -= recved;
 80150b2:	89fb      	ldrh	r3, [r7, #14]
 80150b4:	697a      	ldr	r2, [r7, #20]
 80150b6:	1ad3      	subs	r3, r2, r3
 80150b8:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80150ba:	697b      	ldr	r3, [r7, #20]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d1e6      	bne.n	801508e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80150c0:	bf00      	nop
 80150c2:	3718      	adds	r7, #24
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}

080150c8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b088      	sub	sp, #32
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
 80150d0:	460b      	mov	r3, r1
 80150d2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80150d4:	2300      	movs	r3, #0
 80150d6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d106      	bne.n	80150ec <lwip_netconn_do_writemore+0x24>
 80150de:	4b96      	ldr	r3, [pc, #600]	; (8015338 <lwip_netconn_do_writemore+0x270>)
 80150e0:	f240 6273 	movw	r2, #1651	; 0x673
 80150e4:	4995      	ldr	r1, [pc, #596]	; (801533c <lwip_netconn_do_writemore+0x274>)
 80150e6:	4896      	ldr	r0, [pc, #600]	; (8015340 <lwip_netconn_do_writemore+0x278>)
 80150e8:	f00d fb62 	bl	80227b0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	785b      	ldrb	r3, [r3, #1]
 80150f0:	2b01      	cmp	r3, #1
 80150f2:	d006      	beq.n	8015102 <lwip_netconn_do_writemore+0x3a>
 80150f4:	4b90      	ldr	r3, [pc, #576]	; (8015338 <lwip_netconn_do_writemore+0x270>)
 80150f6:	f240 6274 	movw	r2, #1652	; 0x674
 80150fa:	4992      	ldr	r1, [pc, #584]	; (8015344 <lwip_netconn_do_writemore+0x27c>)
 80150fc:	4890      	ldr	r0, [pc, #576]	; (8015340 <lwip_netconn_do_writemore+0x278>)
 80150fe:	f00d fb57 	bl	80227b0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	6a1b      	ldr	r3, [r3, #32]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d106      	bne.n	8015118 <lwip_netconn_do_writemore+0x50>
 801510a:	4b8b      	ldr	r3, [pc, #556]	; (8015338 <lwip_netconn_do_writemore+0x270>)
 801510c:	f240 6275 	movw	r2, #1653	; 0x675
 8015110:	498d      	ldr	r1, [pc, #564]	; (8015348 <lwip_netconn_do_writemore+0x280>)
 8015112:	488b      	ldr	r0, [pc, #556]	; (8015340 <lwip_netconn_do_writemore+0x278>)
 8015114:	f00d fb4c 	bl	80227b0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	685b      	ldr	r3, [r3, #4]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d106      	bne.n	801512e <lwip_netconn_do_writemore+0x66>
 8015120:	4b85      	ldr	r3, [pc, #532]	; (8015338 <lwip_netconn_do_writemore+0x270>)
 8015122:	f240 6276 	movw	r2, #1654	; 0x676
 8015126:	4989      	ldr	r1, [pc, #548]	; (801534c <lwip_netconn_do_writemore+0x284>)
 8015128:	4885      	ldr	r0, [pc, #532]	; (8015340 <lwip_netconn_do_writemore+0x278>)
 801512a:	f00d fb41 	bl	80227b0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	6a1b      	ldr	r3, [r3, #32]
 8015132:	699a      	ldr	r2, [r3, #24]
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	6a1b      	ldr	r3, [r3, #32]
 8015138:	695b      	ldr	r3, [r3, #20]
 801513a:	429a      	cmp	r2, r3
 801513c:	d306      	bcc.n	801514c <lwip_netconn_do_writemore+0x84>
 801513e:	4b7e      	ldr	r3, [pc, #504]	; (8015338 <lwip_netconn_do_writemore+0x270>)
 8015140:	f240 6277 	movw	r2, #1655	; 0x677
 8015144:	4982      	ldr	r1, [pc, #520]	; (8015350 <lwip_netconn_do_writemore+0x288>)
 8015146:	487e      	ldr	r0, [pc, #504]	; (8015340 <lwip_netconn_do_writemore+0x278>)
 8015148:	f00d fb32 	bl	80227b0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	6a1b      	ldr	r3, [r3, #32]
 8015150:	899b      	ldrh	r3, [r3, #12]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d106      	bne.n	8015164 <lwip_netconn_do_writemore+0x9c>
 8015156:	4b78      	ldr	r3, [pc, #480]	; (8015338 <lwip_netconn_do_writemore+0x270>)
 8015158:	f240 6279 	movw	r2, #1657	; 0x679
 801515c:	497d      	ldr	r1, [pc, #500]	; (8015354 <lwip_netconn_do_writemore+0x28c>)
 801515e:	4878      	ldr	r0, [pc, #480]	; (8015340 <lwip_netconn_do_writemore+0x278>)
 8015160:	f00d fb26 	bl	80227b0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	6a1b      	ldr	r3, [r3, #32]
 8015168:	7f1b      	ldrb	r3, [r3, #28]
 801516a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	7f1b      	ldrb	r3, [r3, #28]
 8015170:	f003 0302 	and.w	r3, r3, #2
 8015174:	2b00      	cmp	r3, #0
 8015176:	d104      	bne.n	8015182 <lwip_netconn_do_writemore+0xba>
 8015178:	7ebb      	ldrb	r3, [r7, #26]
 801517a:	f003 0304 	and.w	r3, r3, #4
 801517e:	2b00      	cmp	r3, #0
 8015180:	d001      	beq.n	8015186 <lwip_netconn_do_writemore+0xbe>
 8015182:	2301      	movs	r3, #1
 8015184:	e000      	b.n	8015188 <lwip_netconn_do_writemore+0xc0>
 8015186:	2300      	movs	r3, #0
 8015188:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6a1b      	ldr	r3, [r3, #32]
 801518e:	689b      	ldr	r3, [r3, #8]
 8015190:	681a      	ldr	r2, [r3, #0]
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	6a1b      	ldr	r3, [r3, #32]
 8015196:	691b      	ldr	r3, [r3, #16]
 8015198:	4413      	add	r3, r2
 801519a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	6a1b      	ldr	r3, [r3, #32]
 80151a0:	689b      	ldr	r3, [r3, #8]
 80151a2:	685a      	ldr	r2, [r3, #4]
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	6a1b      	ldr	r3, [r3, #32]
 80151a8:	691b      	ldr	r3, [r3, #16]
 80151aa:	1ad3      	subs	r3, r2, r3
 80151ac:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80151ae:	693b      	ldr	r3, [r7, #16]
 80151b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80151b4:	d307      	bcc.n	80151c6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80151b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80151ba:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80151bc:	7ebb      	ldrb	r3, [r7, #26]
 80151be:	f043 0302 	orr.w	r3, r3, #2
 80151c2:	76bb      	strb	r3, [r7, #26]
 80151c4:	e001      	b.n	80151ca <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80151c6:	693b      	ldr	r3, [r7, #16]
 80151c8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	685b      	ldr	r3, [r3, #4]
 80151ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80151d2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80151d4:	89fa      	ldrh	r2, [r7, #14]
 80151d6:	8bbb      	ldrh	r3, [r7, #28]
 80151d8:	429a      	cmp	r2, r3
 80151da:	d216      	bcs.n	801520a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80151dc:	89fb      	ldrh	r3, [r7, #14]
 80151de:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80151e0:	7e3b      	ldrb	r3, [r7, #24]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d00d      	beq.n	8015202 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80151e6:	8bbb      	ldrh	r3, [r7, #28]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d10e      	bne.n	801520a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	6a1b      	ldr	r3, [r3, #32]
 80151f0:	699b      	ldr	r3, [r3, #24]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d102      	bne.n	80151fc <lwip_netconn_do_writemore+0x134>
 80151f6:	f06f 0306 	mvn.w	r3, #6
 80151fa:	e000      	b.n	80151fe <lwip_netconn_do_writemore+0x136>
 80151fc:	2300      	movs	r3, #0
 80151fe:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8015200:	e07d      	b.n	80152fe <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8015202:	7ebb      	ldrb	r3, [r7, #26]
 8015204:	f043 0302 	orr.w	r3, r3, #2
 8015208:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	6a1b      	ldr	r3, [r3, #32]
 801520e:	691a      	ldr	r2, [r3, #16]
 8015210:	8bbb      	ldrh	r3, [r7, #28]
 8015212:	441a      	add	r2, r3
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	6a1b      	ldr	r3, [r3, #32]
 8015218:	689b      	ldr	r3, [r3, #8]
 801521a:	685b      	ldr	r3, [r3, #4]
 801521c:	429a      	cmp	r2, r3
 801521e:	d906      	bls.n	801522e <lwip_netconn_do_writemore+0x166>
 8015220:	4b45      	ldr	r3, [pc, #276]	; (8015338 <lwip_netconn_do_writemore+0x270>)
 8015222:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8015226:	494c      	ldr	r1, [pc, #304]	; (8015358 <lwip_netconn_do_writemore+0x290>)
 8015228:	4845      	ldr	r0, [pc, #276]	; (8015340 <lwip_netconn_do_writemore+0x278>)
 801522a:	f00d fac1 	bl	80227b0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 801522e:	8bbb      	ldrh	r3, [r7, #28]
 8015230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015234:	4293      	cmp	r3, r2
 8015236:	d103      	bne.n	8015240 <lwip_netconn_do_writemore+0x178>
 8015238:	693b      	ldr	r3, [r7, #16]
 801523a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801523e:	d209      	bcs.n	8015254 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8015240:	693b      	ldr	r3, [r7, #16]
 8015242:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8015244:	8bba      	ldrh	r2, [r7, #28]
 8015246:	429a      	cmp	r2, r3
 8015248:	d10b      	bne.n	8015262 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	6a1b      	ldr	r3, [r3, #32]
 801524e:	899b      	ldrh	r3, [r3, #12]
 8015250:	2b01      	cmp	r3, #1
 8015252:	d906      	bls.n	8015262 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8015254:	2301      	movs	r3, #1
 8015256:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8015258:	7ebb      	ldrb	r3, [r7, #26]
 801525a:	f043 0302 	orr.w	r3, r3, #2
 801525e:	76bb      	strb	r3, [r7, #26]
 8015260:	e001      	b.n	8015266 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8015262:	2300      	movs	r3, #0
 8015264:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	6858      	ldr	r0, [r3, #4]
 801526a:	7ebb      	ldrb	r3, [r7, #26]
 801526c:	8bba      	ldrh	r2, [r7, #28]
 801526e:	6979      	ldr	r1, [r7, #20]
 8015270:	f006 ff4e 	bl	801c110 <tcp_write>
 8015274:	4603      	mov	r3, r0
 8015276:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8015278:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d12c      	bne.n	80152da <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6a1b      	ldr	r3, [r3, #32]
 8015284:	6999      	ldr	r1, [r3, #24]
 8015286:	8bba      	ldrh	r2, [r7, #28]
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	6a1b      	ldr	r3, [r3, #32]
 801528c:	440a      	add	r2, r1
 801528e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6a1b      	ldr	r3, [r3, #32]
 8015294:	6919      	ldr	r1, [r3, #16]
 8015296:	8bba      	ldrh	r2, [r7, #28]
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	6a1b      	ldr	r3, [r3, #32]
 801529c:	440a      	add	r2, r1
 801529e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	6a1b      	ldr	r3, [r3, #32]
 80152a4:	691a      	ldr	r2, [r3, #16]
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	6a1b      	ldr	r3, [r3, #32]
 80152aa:	689b      	ldr	r3, [r3, #8]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	429a      	cmp	r2, r3
 80152b0:	d113      	bne.n	80152da <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	6a1b      	ldr	r3, [r3, #32]
 80152b6:	899a      	ldrh	r2, [r3, #12]
 80152b8:	3a01      	subs	r2, #1
 80152ba:	b292      	uxth	r2, r2
 80152bc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	6a1b      	ldr	r3, [r3, #32]
 80152c2:	899b      	ldrh	r3, [r3, #12]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d008      	beq.n	80152da <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	6a1b      	ldr	r3, [r3, #32]
 80152cc:	689a      	ldr	r2, [r3, #8]
 80152ce:	3208      	adds	r2, #8
 80152d0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	6a1b      	ldr	r3, [r3, #32]
 80152d6:	2200      	movs	r2, #0
 80152d8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80152da:	7e7b      	ldrb	r3, [r7, #25]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d004      	beq.n	80152ea <lwip_netconn_do_writemore+0x222>
 80152e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	f43f af50 	beq.w	801518a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80152ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d004      	beq.n	80152fc <lwip_netconn_do_writemore+0x234>
 80152f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80152f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80152fa:	d146      	bne.n	801538a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80152fc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80152fe:	7e3b      	ldrb	r3, [r7, #24]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d02b      	beq.n	801535c <lwip_netconn_do_writemore+0x294>
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	6a1b      	ldr	r3, [r3, #32]
 8015308:	699a      	ldr	r2, [r3, #24]
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	6a1b      	ldr	r3, [r3, #32]
 801530e:	695b      	ldr	r3, [r3, #20]
 8015310:	429a      	cmp	r2, r3
 8015312:	d223      	bcs.n	801535c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015318:	2b00      	cmp	r3, #0
 801531a:	d005      	beq.n	8015328 <lwip_netconn_do_writemore+0x260>
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015320:	2200      	movs	r2, #0
 8015322:	2103      	movs	r1, #3
 8015324:	6878      	ldr	r0, [r7, #4]
 8015326:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	7f1b      	ldrb	r3, [r3, #28]
 801532c:	f043 0310 	orr.w	r3, r3, #16
 8015330:	b2da      	uxtb	r2, r3
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	771a      	strb	r2, [r3, #28]
 8015336:	e028      	b.n	801538a <lwip_netconn_do_writemore+0x2c2>
 8015338:	08024098 	.word	0x08024098
 801533c:	080241f0 	.word	0x080241f0
 8015340:	080240dc 	.word	0x080240dc
 8015344:	080244f8 	.word	0x080244f8
 8015348:	08024200 	.word	0x08024200
 801534c:	08024518 	.word	0x08024518
 8015350:	08024530 	.word	0x08024530
 8015354:	08024570 	.word	0x08024570
 8015358:	08024598 	.word	0x08024598
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	685b      	ldr	r3, [r3, #4]
 8015360:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015364:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8015368:	d305      	bcc.n	8015376 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	685b      	ldr	r3, [r3, #4]
 801536e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8015372:	2b04      	cmp	r3, #4
 8015374:	d909      	bls.n	801538a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801537a:	2b00      	cmp	r3, #0
 801537c:	d005      	beq.n	801538a <lwip_netconn_do_writemore+0x2c2>
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015382:	2200      	movs	r2, #0
 8015384:	2103      	movs	r1, #3
 8015386:	6878      	ldr	r0, [r7, #4]
 8015388:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 801538a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d11d      	bne.n	80153ce <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	6a1b      	ldr	r3, [r3, #32]
 8015396:	699a      	ldr	r2, [r3, #24]
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6a1b      	ldr	r3, [r3, #32]
 801539c:	695b      	ldr	r3, [r3, #20]
 801539e:	429a      	cmp	r2, r3
 80153a0:	d002      	beq.n	80153a8 <lwip_netconn_do_writemore+0x2e0>
 80153a2:	7e3b      	ldrb	r3, [r7, #24]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d001      	beq.n	80153ac <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80153a8:	2301      	movs	r3, #1
 80153aa:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	685b      	ldr	r3, [r3, #4]
 80153b0:	4618      	mov	r0, r3
 80153b2:	f007 fc97 	bl	801cce4 <tcp_output>
 80153b6:	4603      	mov	r3, r0
 80153b8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80153ba:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80153be:	f113 0f04 	cmn.w	r3, #4
 80153c2:	d12c      	bne.n	801541e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80153c4:	7b3b      	ldrb	r3, [r7, #12]
 80153c6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80153c8:	2301      	movs	r3, #1
 80153ca:	76fb      	strb	r3, [r7, #27]
 80153cc:	e027      	b.n	801541e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 80153ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80153d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80153d6:	d120      	bne.n	801541a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	685b      	ldr	r3, [r3, #4]
 80153dc:	4618      	mov	r0, r3
 80153de:	f007 fc81 	bl	801cce4 <tcp_output>
 80153e2:	4603      	mov	r3, r0
 80153e4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80153e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80153ea:	f113 0f04 	cmn.w	r3, #4
 80153ee:	d104      	bne.n	80153fa <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80153f0:	7b7b      	ldrb	r3, [r7, #13]
 80153f2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80153f4:	2301      	movs	r3, #1
 80153f6:	76fb      	strb	r3, [r7, #27]
 80153f8:	e011      	b.n	801541e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80153fa:	7e3b      	ldrb	r3, [r7, #24]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d00e      	beq.n	801541e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	6a1b      	ldr	r3, [r3, #32]
 8015404:	699b      	ldr	r3, [r3, #24]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d102      	bne.n	8015410 <lwip_netconn_do_writemore+0x348>
 801540a:	f06f 0306 	mvn.w	r3, #6
 801540e:	e000      	b.n	8015412 <lwip_netconn_do_writemore+0x34a>
 8015410:	2300      	movs	r3, #0
 8015412:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8015414:	2301      	movs	r3, #1
 8015416:	76fb      	strb	r3, [r7, #27]
 8015418:	e001      	b.n	801541e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 801541a:	2301      	movs	r3, #1
 801541c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801541e:	7efb      	ldrb	r3, [r7, #27]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d015      	beq.n	8015450 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	6a1b      	ldr	r3, [r3, #32]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	330c      	adds	r3, #12
 801542c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	6a1b      	ldr	r3, [r3, #32]
 8015432:	7ffa      	ldrb	r2, [r7, #31]
 8015434:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	2200      	movs	r2, #0
 801543a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	2200      	movs	r2, #0
 8015440:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8015442:	78fb      	ldrb	r3, [r7, #3]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d006      	beq.n	8015456 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8015448:	68b8      	ldr	r0, [r7, #8]
 801544a:	f00b fe79 	bl	8021140 <sys_sem_signal>
 801544e:	e002      	b.n	8015456 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8015450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015454:	e000      	b.n	8015458 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8015456:	2300      	movs	r3, #0
}
 8015458:	4618      	mov	r0, r3
 801545a:	3720      	adds	r7, #32
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}

08015460 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b084      	sub	sp, #16
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 801546c:	68bb      	ldr	r3, [r7, #8]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	4618      	mov	r0, r3
 8015472:	f7fe fb82 	bl	8013b7a <netconn_err>
 8015476:	4603      	mov	r3, r0
 8015478:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801547a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d166      	bne.n	8015550 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	781b      	ldrb	r3, [r3, #0]
 8015488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801548c:	2b10      	cmp	r3, #16
 801548e:	d15d      	bne.n	801554c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8015490:	68bb      	ldr	r3, [r7, #8]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	785b      	ldrb	r3, [r3, #1]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d002      	beq.n	80154a0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 801549a:	23fb      	movs	r3, #251	; 0xfb
 801549c:	73fb      	strb	r3, [r7, #15]
 801549e:	e057      	b.n	8015550 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	685b      	ldr	r3, [r3, #4]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d04d      	beq.n	8015546 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	2201      	movs	r2, #1
 80154b0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80154b2:	68bb      	ldr	r3, [r7, #8]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	6a1b      	ldr	r3, [r3, #32]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d006      	beq.n	80154ca <lwip_netconn_do_write+0x6a>
 80154bc:	4b28      	ldr	r3, [pc, #160]	; (8015560 <lwip_netconn_do_write+0x100>)
 80154be:	f240 7223 	movw	r2, #1827	; 0x723
 80154c2:	4928      	ldr	r1, [pc, #160]	; (8015564 <lwip_netconn_do_write+0x104>)
 80154c4:	4828      	ldr	r0, [pc, #160]	; (8015568 <lwip_netconn_do_write+0x108>)
 80154c6:	f00d f973 	bl	80227b0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80154ca:	68bb      	ldr	r3, [r7, #8]
 80154cc:	695b      	ldr	r3, [r3, #20]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d106      	bne.n	80154e0 <lwip_netconn_do_write+0x80>
 80154d2:	4b23      	ldr	r3, [pc, #140]	; (8015560 <lwip_netconn_do_write+0x100>)
 80154d4:	f240 7224 	movw	r2, #1828	; 0x724
 80154d8:	4924      	ldr	r1, [pc, #144]	; (801556c <lwip_netconn_do_write+0x10c>)
 80154da:	4823      	ldr	r0, [pc, #140]	; (8015568 <lwip_netconn_do_write+0x108>)
 80154dc:	f00d f968 	bl	80227b0 <iprintf>
        msg->conn->current_msg = msg;
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	68ba      	ldr	r2, [r7, #8]
 80154e6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	2100      	movs	r1, #0
 80154ee:	4618      	mov	r0, r3
 80154f0:	f7ff fdea 	bl	80150c8 <lwip_netconn_do_writemore>
 80154f4:	4603      	mov	r3, r0
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d02e      	beq.n	8015558 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	785b      	ldrb	r3, [r3, #1]
 8015500:	2b01      	cmp	r3, #1
 8015502:	d006      	beq.n	8015512 <lwip_netconn_do_write+0xb2>
 8015504:	4b16      	ldr	r3, [pc, #88]	; (8015560 <lwip_netconn_do_write+0x100>)
 8015506:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 801550a:	4919      	ldr	r1, [pc, #100]	; (8015570 <lwip_netconn_do_write+0x110>)
 801550c:	4816      	ldr	r0, [pc, #88]	; (8015568 <lwip_netconn_do_write+0x108>)
 801550e:	f00d f94f 	bl	80227b0 <iprintf>
          UNLOCK_TCPIP_CORE();
 8015512:	4818      	ldr	r0, [pc, #96]	; (8015574 <lwip_netconn_do_write+0x114>)
 8015514:	f00b fe85 	bl	8021222 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015518:	68bb      	ldr	r3, [r7, #8]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	330c      	adds	r3, #12
 801551e:	2100      	movs	r1, #0
 8015520:	4618      	mov	r0, r3
 8015522:	f00b fddc 	bl	80210de <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8015526:	4813      	ldr	r0, [pc, #76]	; (8015574 <lwip_netconn_do_write+0x114>)
 8015528:	f00b fe6c 	bl	8021204 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	785b      	ldrb	r3, [r3, #1]
 8015532:	2b01      	cmp	r3, #1
 8015534:	d110      	bne.n	8015558 <lwip_netconn_do_write+0xf8>
 8015536:	4b0a      	ldr	r3, [pc, #40]	; (8015560 <lwip_netconn_do_write+0x100>)
 8015538:	f240 722c 	movw	r2, #1836	; 0x72c
 801553c:	490c      	ldr	r1, [pc, #48]	; (8015570 <lwip_netconn_do_write+0x110>)
 801553e:	480a      	ldr	r0, [pc, #40]	; (8015568 <lwip_netconn_do_write+0x108>)
 8015540:	f00d f936 	bl	80227b0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8015544:	e008      	b.n	8015558 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8015546:	23f5      	movs	r3, #245	; 0xf5
 8015548:	73fb      	strb	r3, [r7, #15]
 801554a:	e001      	b.n	8015550 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 801554c:	23fa      	movs	r3, #250	; 0xfa
 801554e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8015550:	68bb      	ldr	r3, [r7, #8]
 8015552:	7bfa      	ldrb	r2, [r7, #15]
 8015554:	711a      	strb	r2, [r3, #4]
 8015556:	e000      	b.n	801555a <lwip_netconn_do_write+0xfa>
        return;
 8015558:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 801555a:	3710      	adds	r7, #16
 801555c:	46bd      	mov	sp, r7
 801555e:	bd80      	pop	{r7, pc}
 8015560:	08024098 	.word	0x08024098
 8015564:	0802443c 	.word	0x0802443c
 8015568:	080240dc 	.word	0x080240dc
 801556c:	080245c4 	.word	0x080245c4
 8015570:	08024458 	.word	0x08024458
 8015574:	2000669c 	.word	0x2000669c

08015578 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b084      	sub	sp, #16
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	785b      	ldrb	r3, [r3, #1]
 801558a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	685b      	ldr	r3, [r3, #4]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d069      	beq.n	801566a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	781b      	ldrb	r3, [r3, #0]
 801559c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80155a0:	2b10      	cmp	r3, #16
 80155a2:	d162      	bne.n	801566a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80155a8:	2b03      	cmp	r3, #3
 80155aa:	d002      	beq.n	80155b2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80155ac:	7afb      	ldrb	r3, [r7, #11]
 80155ae:	2b02      	cmp	r3, #2
 80155b0:	d05b      	beq.n	801566a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80155b2:	7afb      	ldrb	r3, [r7, #11]
 80155b4:	2b03      	cmp	r3, #3
 80155b6:	d103      	bne.n	80155c0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	22f5      	movs	r2, #245	; 0xf5
 80155bc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80155be:	e059      	b.n	8015674 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80155c0:	7afb      	ldrb	r3, [r7, #11]
 80155c2:	2b01      	cmp	r3, #1
 80155c4:	d103      	bne.n	80155ce <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	22fb      	movs	r2, #251	; 0xfb
 80155ca:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80155cc:	e052      	b.n	8015674 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	7a1b      	ldrb	r3, [r3, #8]
 80155d2:	f003 0301 	and.w	r3, r3, #1
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d004      	beq.n	80155e4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	4618      	mov	r0, r3
 80155e0:	f7ff f804 	bl	80145ec <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	6a1b      	ldr	r3, [r3, #32]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d006      	beq.n	80155fc <lwip_netconn_do_close+0x84>
 80155ee:	4b23      	ldr	r3, [pc, #140]	; (801567c <lwip_netconn_do_close+0x104>)
 80155f0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80155f4:	4922      	ldr	r1, [pc, #136]	; (8015680 <lwip_netconn_do_close+0x108>)
 80155f6:	4823      	ldr	r0, [pc, #140]	; (8015684 <lwip_netconn_do_close+0x10c>)
 80155f8:	f00d f8da 	bl	80227b0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	2204      	movs	r2, #4
 8015602:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	68fa      	ldr	r2, [r7, #12]
 801560a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	2100      	movs	r1, #0
 8015612:	4618      	mov	r0, r3
 8015614:	f7ff f868 	bl	80146e8 <lwip_netconn_do_close_internal>
 8015618:	4603      	mov	r3, r0
 801561a:	2b00      	cmp	r3, #0
 801561c:	d029      	beq.n	8015672 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	785b      	ldrb	r3, [r3, #1]
 8015624:	2b04      	cmp	r3, #4
 8015626:	d006      	beq.n	8015636 <lwip_netconn_do_close+0xbe>
 8015628:	4b14      	ldr	r3, [pc, #80]	; (801567c <lwip_netconn_do_close+0x104>)
 801562a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 801562e:	4916      	ldr	r1, [pc, #88]	; (8015688 <lwip_netconn_do_close+0x110>)
 8015630:	4814      	ldr	r0, [pc, #80]	; (8015684 <lwip_netconn_do_close+0x10c>)
 8015632:	f00d f8bd 	bl	80227b0 <iprintf>
        UNLOCK_TCPIP_CORE();
 8015636:	4815      	ldr	r0, [pc, #84]	; (801568c <lwip_netconn_do_close+0x114>)
 8015638:	f00b fdf3 	bl	8021222 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	330c      	adds	r3, #12
 8015642:	2100      	movs	r1, #0
 8015644:	4618      	mov	r0, r3
 8015646:	f00b fd4a 	bl	80210de <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801564a:	4810      	ldr	r0, [pc, #64]	; (801568c <lwip_netconn_do_close+0x114>)
 801564c:	f00b fdda 	bl	8021204 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	785b      	ldrb	r3, [r3, #1]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d00b      	beq.n	8015672 <lwip_netconn_do_close+0xfa>
 801565a:	4b08      	ldr	r3, [pc, #32]	; (801567c <lwip_netconn_do_close+0x104>)
 801565c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8015660:	4909      	ldr	r1, [pc, #36]	; (8015688 <lwip_netconn_do_close+0x110>)
 8015662:	4808      	ldr	r0, [pc, #32]	; (8015684 <lwip_netconn_do_close+0x10c>)
 8015664:	f00d f8a4 	bl	80227b0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8015668:	e003      	b.n	8015672 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	22f5      	movs	r2, #245	; 0xf5
 801566e:	711a      	strb	r2, [r3, #4]
 8015670:	e000      	b.n	8015674 <lwip_netconn_do_close+0xfc>
      return;
 8015672:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8015674:	3710      	adds	r7, #16
 8015676:	46bd      	mov	sp, r7
 8015678:	bd80      	pop	{r7, pc}
 801567a:	bf00      	nop
 801567c:	08024098 	.word	0x08024098
 8015680:	0802443c 	.word	0x0802443c
 8015684:	080240dc 	.word	0x080240dc
 8015688:	08024458 	.word	0x08024458
 801568c:	2000669c 	.word	0x2000669c

08015690 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b082      	sub	sp, #8
 8015694:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8015696:	2006      	movs	r0, #6
 8015698:	f000 ff38 	bl	801650c <memp_malloc>
 801569c:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d004      	beq.n	80156ae <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 80156a4:	2210      	movs	r2, #16
 80156a6:	2100      	movs	r1, #0
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	f00c ff99 	bl	80225e0 <memset>
  }
  return buf;
 80156ae:	687b      	ldr	r3, [r7, #4]
}
 80156b0:	4618      	mov	r0, r3
 80156b2:	3708      	adds	r7, #8
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd80      	pop	{r7, pc}

080156b8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b082      	sub	sp, #8
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d013      	beq.n	80156ee <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d00b      	beq.n	80156e6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	4618      	mov	r0, r3
 80156d4:	f001 fe34 	bl	8017340 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2200      	movs	r2, #0
 80156dc:	605a      	str	r2, [r3, #4]
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	685a      	ldr	r2, [r3, #4]
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80156e6:	6879      	ldr	r1, [r7, #4]
 80156e8:	2006      	movs	r0, #6
 80156ea:	f000 ff85 	bl	80165f8 <memp_free>
  }
}
 80156ee:	bf00      	nop
 80156f0:	3708      	adds	r7, #8
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bd80      	pop	{r7, pc}
	...

080156f8 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b084      	sub	sp, #16
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	60f8      	str	r0, [r7, #12]
 8015700:	60b9      	str	r1, [r7, #8]
 8015702:	4613      	mov	r3, r2
 8015704:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d108      	bne.n	801571e <netbuf_ref+0x26>
 801570c:	4b1c      	ldr	r3, [pc, #112]	; (8015780 <netbuf_ref+0x88>)
 801570e:	2299      	movs	r2, #153	; 0x99
 8015710:	491c      	ldr	r1, [pc, #112]	; (8015784 <netbuf_ref+0x8c>)
 8015712:	481d      	ldr	r0, [pc, #116]	; (8015788 <netbuf_ref+0x90>)
 8015714:	f00d f84c 	bl	80227b0 <iprintf>
 8015718:	f06f 030f 	mvn.w	r3, #15
 801571c:	e02b      	b.n	8015776 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d004      	beq.n	8015730 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	4618      	mov	r0, r3
 801572c:	f001 fe08 	bl	8017340 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8015730:	2241      	movs	r2, #65	; 0x41
 8015732:	2100      	movs	r1, #0
 8015734:	2036      	movs	r0, #54	; 0x36
 8015736:	f001 fb1f 	bl	8016d78 <pbuf_alloc>
 801573a:	4602      	mov	r2, r0
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d105      	bne.n	8015754 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	2200      	movs	r2, #0
 801574c:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 801574e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015752:	e010      	b.n	8015776 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	68ba      	ldr	r2, [r7, #8]
 801575a:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	88fa      	ldrh	r2, [r7, #6]
 8015762:	811a      	strh	r2, [r3, #8]
 8015764:	68fa      	ldr	r2, [r7, #12]
 8015766:	6812      	ldr	r2, [r2, #0]
 8015768:	891b      	ldrh	r3, [r3, #8]
 801576a:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	681a      	ldr	r2, [r3, #0]
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8015774:	2300      	movs	r3, #0
}
 8015776:	4618      	mov	r0, r3
 8015778:	3710      	adds	r7, #16
 801577a:	46bd      	mov	sp, r7
 801577c:	bd80      	pop	{r7, pc}
 801577e:	bf00      	nop
 8015780:	080245f0 	.word	0x080245f0
 8015784:	080246a8 	.word	0x080246a8
 8015788:	08024640 	.word	0x08024640

0801578c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b082      	sub	sp, #8
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d108      	bne.n	80157ac <netbuf_next+0x20>
 801579a:	4b11      	ldr	r3, [pc, #68]	; (80157e0 <netbuf_next+0x54>)
 801579c:	22e0      	movs	r2, #224	; 0xe0
 801579e:	4911      	ldr	r1, [pc, #68]	; (80157e4 <netbuf_next+0x58>)
 80157a0:	4811      	ldr	r0, [pc, #68]	; (80157e8 <netbuf_next+0x5c>)
 80157a2:	f00d f805 	bl	80227b0 <iprintf>
 80157a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157aa:	e014      	b.n	80157d6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	685b      	ldr	r3, [r3, #4]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d102      	bne.n	80157bc <netbuf_next+0x30>
    return -1;
 80157b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157ba:	e00c      	b.n	80157d6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	685b      	ldr	r3, [r3, #4]
 80157c0:	681a      	ldr	r2, [r3, #0]
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	685b      	ldr	r3, [r3, #4]
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d101      	bne.n	80157d4 <netbuf_next+0x48>
    return 1;
 80157d0:	2301      	movs	r3, #1
 80157d2:	e000      	b.n	80157d6 <netbuf_next+0x4a>
  }
  return 0;
 80157d4:	2300      	movs	r3, #0
}
 80157d6:	4618      	mov	r0, r3
 80157d8:	3708      	adds	r7, #8
 80157da:	46bd      	mov	sp, r7
 80157dc:	bd80      	pop	{r7, pc}
 80157de:	bf00      	nop
 80157e0:	080245f0 	.word	0x080245f0
 80157e4:	08024750 	.word	0x08024750
 80157e8:	08024640 	.word	0x08024640

080157ec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b084      	sub	sp, #16
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80157f6:	f008 fb2d 	bl	801de54 <sys_timeouts_sleeptime>
 80157fa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015802:	d10b      	bne.n	801581c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8015804:	4813      	ldr	r0, [pc, #76]	; (8015854 <tcpip_timeouts_mbox_fetch+0x68>)
 8015806:	f00b fd0c 	bl	8021222 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801580a:	2200      	movs	r2, #0
 801580c:	6839      	ldr	r1, [r7, #0]
 801580e:	6878      	ldr	r0, [r7, #4]
 8015810:	f00b fbc4 	bl	8020f9c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8015814:	480f      	ldr	r0, [pc, #60]	; (8015854 <tcpip_timeouts_mbox_fetch+0x68>)
 8015816:	f00b fcf5 	bl	8021204 <sys_mutex_lock>
    return;
 801581a:	e018      	b.n	801584e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d102      	bne.n	8015828 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8015822:	f008 fadd 	bl	801dde0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8015826:	e7e6      	b.n	80157f6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8015828:	480a      	ldr	r0, [pc, #40]	; (8015854 <tcpip_timeouts_mbox_fetch+0x68>)
 801582a:	f00b fcfa 	bl	8021222 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801582e:	68fa      	ldr	r2, [r7, #12]
 8015830:	6839      	ldr	r1, [r7, #0]
 8015832:	6878      	ldr	r0, [r7, #4]
 8015834:	f00b fbb2 	bl	8020f9c <sys_arch_mbox_fetch>
 8015838:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801583a:	4806      	ldr	r0, [pc, #24]	; (8015854 <tcpip_timeouts_mbox_fetch+0x68>)
 801583c:	f00b fce2 	bl	8021204 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8015840:	68bb      	ldr	r3, [r7, #8]
 8015842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015846:	d102      	bne.n	801584e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8015848:	f008 faca 	bl	801dde0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801584c:	e7d3      	b.n	80157f6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801584e:	3710      	adds	r7, #16
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}
 8015854:	2000669c 	.word	0x2000669c

08015858 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b084      	sub	sp, #16
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8015860:	4810      	ldr	r0, [pc, #64]	; (80158a4 <tcpip_thread+0x4c>)
 8015862:	f00b fccf 	bl	8021204 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8015866:	4b10      	ldr	r3, [pc, #64]	; (80158a8 <tcpip_thread+0x50>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d005      	beq.n	801587a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801586e:	4b0e      	ldr	r3, [pc, #56]	; (80158a8 <tcpip_thread+0x50>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	4a0e      	ldr	r2, [pc, #56]	; (80158ac <tcpip_thread+0x54>)
 8015874:	6812      	ldr	r2, [r2, #0]
 8015876:	4610      	mov	r0, r2
 8015878:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801587a:	f107 030c 	add.w	r3, r7, #12
 801587e:	4619      	mov	r1, r3
 8015880:	480b      	ldr	r0, [pc, #44]	; (80158b0 <tcpip_thread+0x58>)
 8015882:	f7ff ffb3 	bl	80157ec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d106      	bne.n	801589a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801588c:	4b09      	ldr	r3, [pc, #36]	; (80158b4 <tcpip_thread+0x5c>)
 801588e:	2291      	movs	r2, #145	; 0x91
 8015890:	4909      	ldr	r1, [pc, #36]	; (80158b8 <tcpip_thread+0x60>)
 8015892:	480a      	ldr	r0, [pc, #40]	; (80158bc <tcpip_thread+0x64>)
 8015894:	f00c ff8c 	bl	80227b0 <iprintf>
      continue;
 8015898:	e003      	b.n	80158a2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	4618      	mov	r0, r3
 801589e:	f000 f80f 	bl	80158c0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80158a2:	e7ea      	b.n	801587a <tcpip_thread+0x22>
 80158a4:	2000669c 	.word	0x2000669c
 80158a8:	20006690 	.word	0x20006690
 80158ac:	20006694 	.word	0x20006694
 80158b0:	20006698 	.word	0x20006698
 80158b4:	08024788 	.word	0x08024788
 80158b8:	080247b8 	.word	0x080247b8
 80158bc:	080247d8 	.word	0x080247d8

080158c0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b082      	sub	sp, #8
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	781b      	ldrb	r3, [r3, #0]
 80158cc:	2b02      	cmp	r3, #2
 80158ce:	d026      	beq.n	801591e <tcpip_thread_handle_msg+0x5e>
 80158d0:	2b02      	cmp	r3, #2
 80158d2:	dc2b      	bgt.n	801592c <tcpip_thread_handle_msg+0x6c>
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d002      	beq.n	80158de <tcpip_thread_handle_msg+0x1e>
 80158d8:	2b01      	cmp	r3, #1
 80158da:	d015      	beq.n	8015908 <tcpip_thread_handle_msg+0x48>
 80158dc:	e026      	b.n	801592c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	68db      	ldr	r3, [r3, #12]
 80158e2:	687a      	ldr	r2, [r7, #4]
 80158e4:	6850      	ldr	r0, [r2, #4]
 80158e6:	687a      	ldr	r2, [r7, #4]
 80158e8:	6892      	ldr	r2, [r2, #8]
 80158ea:	4611      	mov	r1, r2
 80158ec:	4798      	blx	r3
 80158ee:	4603      	mov	r3, r0
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d004      	beq.n	80158fe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	685b      	ldr	r3, [r3, #4]
 80158f8:	4618      	mov	r0, r3
 80158fa:	f001 fd21 	bl	8017340 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80158fe:	6879      	ldr	r1, [r7, #4]
 8015900:	2009      	movs	r0, #9
 8015902:	f000 fe79 	bl	80165f8 <memp_free>
      break;
 8015906:	e018      	b.n	801593a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	687a      	ldr	r2, [r7, #4]
 801590e:	6892      	ldr	r2, [r2, #8]
 8015910:	4610      	mov	r0, r2
 8015912:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015914:	6879      	ldr	r1, [r7, #4]
 8015916:	2008      	movs	r0, #8
 8015918:	f000 fe6e 	bl	80165f8 <memp_free>
      break;
 801591c:	e00d      	b.n	801593a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	685b      	ldr	r3, [r3, #4]
 8015922:	687a      	ldr	r2, [r7, #4]
 8015924:	6892      	ldr	r2, [r2, #8]
 8015926:	4610      	mov	r0, r2
 8015928:	4798      	blx	r3
      break;
 801592a:	e006      	b.n	801593a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801592c:	4b05      	ldr	r3, [pc, #20]	; (8015944 <tcpip_thread_handle_msg+0x84>)
 801592e:	22cf      	movs	r2, #207	; 0xcf
 8015930:	4905      	ldr	r1, [pc, #20]	; (8015948 <tcpip_thread_handle_msg+0x88>)
 8015932:	4806      	ldr	r0, [pc, #24]	; (801594c <tcpip_thread_handle_msg+0x8c>)
 8015934:	f00c ff3c 	bl	80227b0 <iprintf>
      break;
 8015938:	bf00      	nop
  }
}
 801593a:	bf00      	nop
 801593c:	3708      	adds	r7, #8
 801593e:	46bd      	mov	sp, r7
 8015940:	bd80      	pop	{r7, pc}
 8015942:	bf00      	nop
 8015944:	08024788 	.word	0x08024788
 8015948:	080247b8 	.word	0x080247b8
 801594c:	080247d8 	.word	0x080247d8

08015950 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b086      	sub	sp, #24
 8015954:	af00      	add	r7, sp, #0
 8015956:	60f8      	str	r0, [r7, #12]
 8015958:	60b9      	str	r1, [r7, #8]
 801595a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801595c:	481a      	ldr	r0, [pc, #104]	; (80159c8 <tcpip_inpkt+0x78>)
 801595e:	f00b fb78 	bl	8021052 <sys_mbox_valid>
 8015962:	4603      	mov	r3, r0
 8015964:	2b00      	cmp	r3, #0
 8015966:	d105      	bne.n	8015974 <tcpip_inpkt+0x24>
 8015968:	4b18      	ldr	r3, [pc, #96]	; (80159cc <tcpip_inpkt+0x7c>)
 801596a:	22fc      	movs	r2, #252	; 0xfc
 801596c:	4918      	ldr	r1, [pc, #96]	; (80159d0 <tcpip_inpkt+0x80>)
 801596e:	4819      	ldr	r0, [pc, #100]	; (80159d4 <tcpip_inpkt+0x84>)
 8015970:	f00c ff1e 	bl	80227b0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8015974:	2009      	movs	r0, #9
 8015976:	f000 fdc9 	bl	801650c <memp_malloc>
 801597a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801597c:	697b      	ldr	r3, [r7, #20]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d102      	bne.n	8015988 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8015982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015986:	e01a      	b.n	80159be <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8015988:	697b      	ldr	r3, [r7, #20]
 801598a:	2200      	movs	r2, #0
 801598c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	68fa      	ldr	r2, [r7, #12]
 8015992:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	68ba      	ldr	r2, [r7, #8]
 8015998:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801599a:	697b      	ldr	r3, [r7, #20]
 801599c:	687a      	ldr	r2, [r7, #4]
 801599e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80159a0:	6979      	ldr	r1, [r7, #20]
 80159a2:	4809      	ldr	r0, [pc, #36]	; (80159c8 <tcpip_inpkt+0x78>)
 80159a4:	f00b fae0 	bl	8020f68 <sys_mbox_trypost>
 80159a8:	4603      	mov	r3, r0
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d006      	beq.n	80159bc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80159ae:	6979      	ldr	r1, [r7, #20]
 80159b0:	2009      	movs	r0, #9
 80159b2:	f000 fe21 	bl	80165f8 <memp_free>
    return ERR_MEM;
 80159b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159ba:	e000      	b.n	80159be <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80159bc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80159be:	4618      	mov	r0, r3
 80159c0:	3718      	adds	r7, #24
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd80      	pop	{r7, pc}
 80159c6:	bf00      	nop
 80159c8:	20006698 	.word	0x20006698
 80159cc:	08024788 	.word	0x08024788
 80159d0:	08024800 	.word	0x08024800
 80159d4:	080247d8 	.word	0x080247d8

080159d8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b082      	sub	sp, #8
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
 80159e0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80159e2:	683b      	ldr	r3, [r7, #0]
 80159e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80159e8:	f003 0318 	and.w	r3, r3, #24
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d006      	beq.n	80159fe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80159f0:	4a08      	ldr	r2, [pc, #32]	; (8015a14 <tcpip_input+0x3c>)
 80159f2:	6839      	ldr	r1, [r7, #0]
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	f7ff ffab 	bl	8015950 <tcpip_inpkt>
 80159fa:	4603      	mov	r3, r0
 80159fc:	e005      	b.n	8015a0a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80159fe:	4a06      	ldr	r2, [pc, #24]	; (8015a18 <tcpip_input+0x40>)
 8015a00:	6839      	ldr	r1, [r7, #0]
 8015a02:	6878      	ldr	r0, [r7, #4]
 8015a04:	f7ff ffa4 	bl	8015950 <tcpip_inpkt>
 8015a08:	4603      	mov	r3, r0
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3708      	adds	r7, #8
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}
 8015a12:	bf00      	nop
 8015a14:	08020d55 	.word	0x08020d55
 8015a18:	0801fc5d 	.word	0x0801fc5d

08015a1c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b084      	sub	sp, #16
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
 8015a24:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015a26:	4819      	ldr	r0, [pc, #100]	; (8015a8c <tcpip_try_callback+0x70>)
 8015a28:	f00b fb13 	bl	8021052 <sys_mbox_valid>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d106      	bne.n	8015a40 <tcpip_try_callback+0x24>
 8015a32:	4b17      	ldr	r3, [pc, #92]	; (8015a90 <tcpip_try_callback+0x74>)
 8015a34:	f240 125d 	movw	r2, #349	; 0x15d
 8015a38:	4916      	ldr	r1, [pc, #88]	; (8015a94 <tcpip_try_callback+0x78>)
 8015a3a:	4817      	ldr	r0, [pc, #92]	; (8015a98 <tcpip_try_callback+0x7c>)
 8015a3c:	f00c feb8 	bl	80227b0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8015a40:	2008      	movs	r0, #8
 8015a42:	f000 fd63 	bl	801650c <memp_malloc>
 8015a46:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d102      	bne.n	8015a54 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8015a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a52:	e017      	b.n	8015a84 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	2201      	movs	r2, #1
 8015a58:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	687a      	ldr	r2, [r7, #4]
 8015a5e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	683a      	ldr	r2, [r7, #0]
 8015a64:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015a66:	68f9      	ldr	r1, [r7, #12]
 8015a68:	4808      	ldr	r0, [pc, #32]	; (8015a8c <tcpip_try_callback+0x70>)
 8015a6a:	f00b fa7d 	bl	8020f68 <sys_mbox_trypost>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d006      	beq.n	8015a82 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8015a74:	68f9      	ldr	r1, [r7, #12]
 8015a76:	2008      	movs	r0, #8
 8015a78:	f000 fdbe 	bl	80165f8 <memp_free>
    return ERR_MEM;
 8015a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a80:	e000      	b.n	8015a84 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8015a82:	2300      	movs	r3, #0
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	3710      	adds	r7, #16
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	20006698 	.word	0x20006698
 8015a90:	08024788 	.word	0x08024788
 8015a94:	08024800 	.word	0x08024800
 8015a98:	080247d8 	.word	0x080247d8

08015a9c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b084      	sub	sp, #16
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	60f8      	str	r0, [r7, #12]
 8015aa4:	60b9      	str	r1, [r7, #8]
 8015aa6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8015aa8:	4806      	ldr	r0, [pc, #24]	; (8015ac4 <tcpip_send_msg_wait_sem+0x28>)
 8015aaa:	f00b fbab 	bl	8021204 <sys_mutex_lock>
  fn(apimsg);
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	68b8      	ldr	r0, [r7, #8]
 8015ab2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8015ab4:	4803      	ldr	r0, [pc, #12]	; (8015ac4 <tcpip_send_msg_wait_sem+0x28>)
 8015ab6:	f00b fbb4 	bl	8021222 <sys_mutex_unlock>
  return ERR_OK;
 8015aba:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8015abc:	4618      	mov	r0, r3
 8015abe:	3710      	adds	r7, #16
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}
 8015ac4:	2000669c 	.word	0x2000669c

08015ac8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b084      	sub	sp, #16
 8015acc:	af02      	add	r7, sp, #8
 8015ace:	6078      	str	r0, [r7, #4]
 8015ad0:	6039      	str	r1, [r7, #0]
  lwip_init();
 8015ad2:	f000 f871 	bl	8015bb8 <lwip_init>

  tcpip_init_done = initfunc;
 8015ad6:	4a17      	ldr	r2, [pc, #92]	; (8015b34 <tcpip_init+0x6c>)
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8015adc:	4a16      	ldr	r2, [pc, #88]	; (8015b38 <tcpip_init+0x70>)
 8015ade:	683b      	ldr	r3, [r7, #0]
 8015ae0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8015ae2:	2106      	movs	r1, #6
 8015ae4:	4815      	ldr	r0, [pc, #84]	; (8015b3c <tcpip_init+0x74>)
 8015ae6:	f00b fa0b 	bl	8020f00 <sys_mbox_new>
 8015aea:	4603      	mov	r3, r0
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d006      	beq.n	8015afe <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8015af0:	4b13      	ldr	r3, [pc, #76]	; (8015b40 <tcpip_init+0x78>)
 8015af2:	f240 2261 	movw	r2, #609	; 0x261
 8015af6:	4913      	ldr	r1, [pc, #76]	; (8015b44 <tcpip_init+0x7c>)
 8015af8:	4813      	ldr	r0, [pc, #76]	; (8015b48 <tcpip_init+0x80>)
 8015afa:	f00c fe59 	bl	80227b0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8015afe:	4813      	ldr	r0, [pc, #76]	; (8015b4c <tcpip_init+0x84>)
 8015b00:	f00b fb64 	bl	80211cc <sys_mutex_new>
 8015b04:	4603      	mov	r3, r0
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d006      	beq.n	8015b18 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8015b0a:	4b0d      	ldr	r3, [pc, #52]	; (8015b40 <tcpip_init+0x78>)
 8015b0c:	f240 2265 	movw	r2, #613	; 0x265
 8015b10:	490f      	ldr	r1, [pc, #60]	; (8015b50 <tcpip_init+0x88>)
 8015b12:	480d      	ldr	r0, [pc, #52]	; (8015b48 <tcpip_init+0x80>)
 8015b14:	f00c fe4c 	bl	80227b0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8015b18:	2300      	movs	r3, #0
 8015b1a:	9300      	str	r3, [sp, #0]
 8015b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b20:	2200      	movs	r2, #0
 8015b22:	490c      	ldr	r1, [pc, #48]	; (8015b54 <tcpip_init+0x8c>)
 8015b24:	480c      	ldr	r0, [pc, #48]	; (8015b58 <tcpip_init+0x90>)
 8015b26:	f00b fb89 	bl	802123c <sys_thread_new>
}
 8015b2a:	bf00      	nop
 8015b2c:	3708      	adds	r7, #8
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd80      	pop	{r7, pc}
 8015b32:	bf00      	nop
 8015b34:	20006690 	.word	0x20006690
 8015b38:	20006694 	.word	0x20006694
 8015b3c:	20006698 	.word	0x20006698
 8015b40:	08024788 	.word	0x08024788
 8015b44:	08024810 	.word	0x08024810
 8015b48:	080247d8 	.word	0x080247d8
 8015b4c:	2000669c 	.word	0x2000669c
 8015b50:	08024834 	.word	0x08024834
 8015b54:	08015859 	.word	0x08015859
 8015b58:	08024858 	.word	0x08024858

08015b5c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8015b5c:	b480      	push	{r7}
 8015b5e:	b083      	sub	sp, #12
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	4603      	mov	r3, r0
 8015b64:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8015b66:	88fb      	ldrh	r3, [r7, #6]
 8015b68:	021b      	lsls	r3, r3, #8
 8015b6a:	b21a      	sxth	r2, r3
 8015b6c:	88fb      	ldrh	r3, [r7, #6]
 8015b6e:	0a1b      	lsrs	r3, r3, #8
 8015b70:	b29b      	uxth	r3, r3
 8015b72:	b21b      	sxth	r3, r3
 8015b74:	4313      	orrs	r3, r2
 8015b76:	b21b      	sxth	r3, r3
 8015b78:	b29b      	uxth	r3, r3
}
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	370c      	adds	r7, #12
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b84:	4770      	bx	lr

08015b86 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8015b86:	b480      	push	{r7}
 8015b88:	b083      	sub	sp, #12
 8015b8a:	af00      	add	r7, sp, #0
 8015b8c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	061a      	lsls	r2, r3, #24
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	021b      	lsls	r3, r3, #8
 8015b96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015b9a:	431a      	orrs	r2, r3
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	0a1b      	lsrs	r3, r3, #8
 8015ba0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015ba4:	431a      	orrs	r2, r3
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	0e1b      	lsrs	r3, r3, #24
 8015baa:	4313      	orrs	r3, r2
}
 8015bac:	4618      	mov	r0, r3
 8015bae:	370c      	adds	r7, #12
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb6:	4770      	bx	lr

08015bb8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b082      	sub	sp, #8
 8015bbc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8015bc2:	f00b faf5 	bl	80211b0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8015bc6:	f000 f8d5 	bl	8015d74 <mem_init>
  memp_init();
 8015bca:	f000 fc31 	bl	8016430 <memp_init>
  pbuf_init();
  netif_init();
 8015bce:	f000 fd3d 	bl	801664c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8015bd2:	f008 f977 	bl	801dec4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8015bd6:	f001 fe5d 	bl	8017894 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8015bda:	f008 f8b9 	bl	801dd50 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8015bde:	bf00      	nop
 8015be0:	3708      	adds	r7, #8
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}
	...

08015be8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8015be8:	b480      	push	{r7}
 8015bea:	b083      	sub	sp, #12
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	4603      	mov	r3, r0
 8015bf0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8015bf2:	4b05      	ldr	r3, [pc, #20]	; (8015c08 <ptr_to_mem+0x20>)
 8015bf4:	681a      	ldr	r2, [r3, #0]
 8015bf6:	88fb      	ldrh	r3, [r7, #6]
 8015bf8:	4413      	add	r3, r2
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	370c      	adds	r7, #12
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c04:	4770      	bx	lr
 8015c06:	bf00      	nop
 8015c08:	20008ecc 	.word	0x20008ecc

08015c0c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8015c0c:	b480      	push	{r7}
 8015c0e:	b083      	sub	sp, #12
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8015c14:	4b05      	ldr	r3, [pc, #20]	; (8015c2c <mem_to_ptr+0x20>)
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	687a      	ldr	r2, [r7, #4]
 8015c1a:	1ad3      	subs	r3, r2, r3
 8015c1c:	b29b      	uxth	r3, r3
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	370c      	adds	r7, #12
 8015c22:	46bd      	mov	sp, r7
 8015c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c28:	4770      	bx	lr
 8015c2a:	bf00      	nop
 8015c2c:	20008ecc 	.word	0x20008ecc

08015c30 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8015c30:	b590      	push	{r4, r7, lr}
 8015c32:	b085      	sub	sp, #20
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015c38:	4b45      	ldr	r3, [pc, #276]	; (8015d50 <plug_holes+0x120>)
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	687a      	ldr	r2, [r7, #4]
 8015c3e:	429a      	cmp	r2, r3
 8015c40:	d206      	bcs.n	8015c50 <plug_holes+0x20>
 8015c42:	4b44      	ldr	r3, [pc, #272]	; (8015d54 <plug_holes+0x124>)
 8015c44:	f240 12df 	movw	r2, #479	; 0x1df
 8015c48:	4943      	ldr	r1, [pc, #268]	; (8015d58 <plug_holes+0x128>)
 8015c4a:	4844      	ldr	r0, [pc, #272]	; (8015d5c <plug_holes+0x12c>)
 8015c4c:	f00c fdb0 	bl	80227b0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8015c50:	4b43      	ldr	r3, [pc, #268]	; (8015d60 <plug_holes+0x130>)
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	687a      	ldr	r2, [r7, #4]
 8015c56:	429a      	cmp	r2, r3
 8015c58:	d306      	bcc.n	8015c68 <plug_holes+0x38>
 8015c5a:	4b3e      	ldr	r3, [pc, #248]	; (8015d54 <plug_holes+0x124>)
 8015c5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015c60:	4940      	ldr	r1, [pc, #256]	; (8015d64 <plug_holes+0x134>)
 8015c62:	483e      	ldr	r0, [pc, #248]	; (8015d5c <plug_holes+0x12c>)
 8015c64:	f00c fda4 	bl	80227b0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	791b      	ldrb	r3, [r3, #4]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d006      	beq.n	8015c7e <plug_holes+0x4e>
 8015c70:	4b38      	ldr	r3, [pc, #224]	; (8015d54 <plug_holes+0x124>)
 8015c72:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015c76:	493c      	ldr	r1, [pc, #240]	; (8015d68 <plug_holes+0x138>)
 8015c78:	4838      	ldr	r0, [pc, #224]	; (8015d5c <plug_holes+0x12c>)
 8015c7a:	f00c fd99 	bl	80227b0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	881b      	ldrh	r3, [r3, #0]
 8015c82:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8015c86:	d906      	bls.n	8015c96 <plug_holes+0x66>
 8015c88:	4b32      	ldr	r3, [pc, #200]	; (8015d54 <plug_holes+0x124>)
 8015c8a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8015c8e:	4937      	ldr	r1, [pc, #220]	; (8015d6c <plug_holes+0x13c>)
 8015c90:	4832      	ldr	r0, [pc, #200]	; (8015d5c <plug_holes+0x12c>)
 8015c92:	f00c fd8d 	bl	80227b0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	881b      	ldrh	r3, [r3, #0]
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f7ff ffa4 	bl	8015be8 <ptr_to_mem>
 8015ca0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8015ca2:	687a      	ldr	r2, [r7, #4]
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	429a      	cmp	r2, r3
 8015ca8:	d024      	beq.n	8015cf4 <plug_holes+0xc4>
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	791b      	ldrb	r3, [r3, #4]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d120      	bne.n	8015cf4 <plug_holes+0xc4>
 8015cb2:	4b2b      	ldr	r3, [pc, #172]	; (8015d60 <plug_holes+0x130>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	68fa      	ldr	r2, [r7, #12]
 8015cb8:	429a      	cmp	r2, r3
 8015cba:	d01b      	beq.n	8015cf4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8015cbc:	4b2c      	ldr	r3, [pc, #176]	; (8015d70 <plug_holes+0x140>)
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	68fa      	ldr	r2, [r7, #12]
 8015cc2:	429a      	cmp	r2, r3
 8015cc4:	d102      	bne.n	8015ccc <plug_holes+0x9c>
      lfree = mem;
 8015cc6:	4a2a      	ldr	r2, [pc, #168]	; (8015d70 <plug_holes+0x140>)
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	881a      	ldrh	r2, [r3, #0]
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	881b      	ldrh	r3, [r3, #0]
 8015cd8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8015cdc:	d00a      	beq.n	8015cf4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	881b      	ldrh	r3, [r3, #0]
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	f7ff ff80 	bl	8015be8 <ptr_to_mem>
 8015ce8:	4604      	mov	r4, r0
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	f7ff ff8e 	bl	8015c0c <mem_to_ptr>
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	885b      	ldrh	r3, [r3, #2]
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	f7ff ff75 	bl	8015be8 <ptr_to_mem>
 8015cfe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8015d00:	68ba      	ldr	r2, [r7, #8]
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d01f      	beq.n	8015d48 <plug_holes+0x118>
 8015d08:	68bb      	ldr	r3, [r7, #8]
 8015d0a:	791b      	ldrb	r3, [r3, #4]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d11b      	bne.n	8015d48 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8015d10:	4b17      	ldr	r3, [pc, #92]	; (8015d70 <plug_holes+0x140>)
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	687a      	ldr	r2, [r7, #4]
 8015d16:	429a      	cmp	r2, r3
 8015d18:	d102      	bne.n	8015d20 <plug_holes+0xf0>
      lfree = pmem;
 8015d1a:	4a15      	ldr	r2, [pc, #84]	; (8015d70 <plug_holes+0x140>)
 8015d1c:	68bb      	ldr	r3, [r7, #8]
 8015d1e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	881a      	ldrh	r2, [r3, #0]
 8015d24:	68bb      	ldr	r3, [r7, #8]
 8015d26:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	881b      	ldrh	r3, [r3, #0]
 8015d2c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8015d30:	d00a      	beq.n	8015d48 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	881b      	ldrh	r3, [r3, #0]
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7ff ff56 	bl	8015be8 <ptr_to_mem>
 8015d3c:	4604      	mov	r4, r0
 8015d3e:	68b8      	ldr	r0, [r7, #8]
 8015d40:	f7ff ff64 	bl	8015c0c <mem_to_ptr>
 8015d44:	4603      	mov	r3, r0
 8015d46:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8015d48:	bf00      	nop
 8015d4a:	3714      	adds	r7, #20
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd90      	pop	{r4, r7, pc}
 8015d50:	20008ecc 	.word	0x20008ecc
 8015d54:	08024868 	.word	0x08024868
 8015d58:	08024898 	.word	0x08024898
 8015d5c:	080248b0 	.word	0x080248b0
 8015d60:	20008ed0 	.word	0x20008ed0
 8015d64:	080248d8 	.word	0x080248d8
 8015d68:	080248f4 	.word	0x080248f4
 8015d6c:	08024910 	.word	0x08024910
 8015d70:	20008ed8 	.word	0x20008ed8

08015d74 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b082      	sub	sp, #8
 8015d78:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015d7a:	4b1f      	ldr	r3, [pc, #124]	; (8015df8 <mem_init+0x84>)
 8015d7c:	3303      	adds	r3, #3
 8015d7e:	f023 0303 	bic.w	r3, r3, #3
 8015d82:	461a      	mov	r2, r3
 8015d84:	4b1d      	ldr	r3, [pc, #116]	; (8015dfc <mem_init+0x88>)
 8015d86:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8015d88:	4b1c      	ldr	r3, [pc, #112]	; (8015dfc <mem_init+0x88>)
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8015d94:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	2200      	movs	r2, #0
 8015d9a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	2200      	movs	r2, #0
 8015da0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8015da2:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8015da6:	f7ff ff1f 	bl	8015be8 <ptr_to_mem>
 8015daa:	4603      	mov	r3, r0
 8015dac:	4a14      	ldr	r2, [pc, #80]	; (8015e00 <mem_init+0x8c>)
 8015dae:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8015db0:	4b13      	ldr	r3, [pc, #76]	; (8015e00 <mem_init+0x8c>)
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	2201      	movs	r2, #1
 8015db6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8015db8:	4b11      	ldr	r3, [pc, #68]	; (8015e00 <mem_init+0x8c>)
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8015dc0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8015dc2:	4b0f      	ldr	r3, [pc, #60]	; (8015e00 <mem_init+0x8c>)
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8015dca:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8015dcc:	4b0b      	ldr	r3, [pc, #44]	; (8015dfc <mem_init+0x88>)
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	4a0c      	ldr	r2, [pc, #48]	; (8015e04 <mem_init+0x90>)
 8015dd2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8015dd4:	480c      	ldr	r0, [pc, #48]	; (8015e08 <mem_init+0x94>)
 8015dd6:	f00b f9f9 	bl	80211cc <sys_mutex_new>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d006      	beq.n	8015dee <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8015de0:	4b0a      	ldr	r3, [pc, #40]	; (8015e0c <mem_init+0x98>)
 8015de2:	f240 221f 	movw	r2, #543	; 0x21f
 8015de6:	490a      	ldr	r1, [pc, #40]	; (8015e10 <mem_init+0x9c>)
 8015de8:	480a      	ldr	r0, [pc, #40]	; (8015e14 <mem_init+0xa0>)
 8015dea:	f00c fce1 	bl	80227b0 <iprintf>
  }
}
 8015dee:	bf00      	nop
 8015df0:	3708      	adds	r7, #8
 8015df2:	46bd      	mov	sp, r7
 8015df4:	bd80      	pop	{r7, pc}
 8015df6:	bf00      	nop
 8015df8:	200066b8 	.word	0x200066b8
 8015dfc:	20008ecc 	.word	0x20008ecc
 8015e00:	20008ed0 	.word	0x20008ed0
 8015e04:	20008ed8 	.word	0x20008ed8
 8015e08:	20008ed4 	.word	0x20008ed4
 8015e0c:	08024868 	.word	0x08024868
 8015e10:	0802493c 	.word	0x0802493c
 8015e14:	080248b0 	.word	0x080248b0

08015e18 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b086      	sub	sp, #24
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8015e20:	6878      	ldr	r0, [r7, #4]
 8015e22:	f7ff fef3 	bl	8015c0c <mem_to_ptr>
 8015e26:	4603      	mov	r3, r0
 8015e28:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	881b      	ldrh	r3, [r3, #0]
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f7ff feda 	bl	8015be8 <ptr_to_mem>
 8015e34:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	885b      	ldrh	r3, [r3, #2]
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f7ff fed4 	bl	8015be8 <ptr_to_mem>
 8015e40:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	881b      	ldrh	r3, [r3, #0]
 8015e46:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8015e4a:	d818      	bhi.n	8015e7e <mem_link_valid+0x66>
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	885b      	ldrh	r3, [r3, #2]
 8015e50:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8015e54:	d813      	bhi.n	8015e7e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8015e5a:	8afa      	ldrh	r2, [r7, #22]
 8015e5c:	429a      	cmp	r2, r3
 8015e5e:	d004      	beq.n	8015e6a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	881b      	ldrh	r3, [r3, #0]
 8015e64:	8afa      	ldrh	r2, [r7, #22]
 8015e66:	429a      	cmp	r2, r3
 8015e68:	d109      	bne.n	8015e7e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015e6a:	4b08      	ldr	r3, [pc, #32]	; (8015e8c <mem_link_valid+0x74>)
 8015e6c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015e6e:	693a      	ldr	r2, [r7, #16]
 8015e70:	429a      	cmp	r2, r3
 8015e72:	d006      	beq.n	8015e82 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015e74:	693b      	ldr	r3, [r7, #16]
 8015e76:	885b      	ldrh	r3, [r3, #2]
 8015e78:	8afa      	ldrh	r2, [r7, #22]
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d001      	beq.n	8015e82 <mem_link_valid+0x6a>
    return 0;
 8015e7e:	2300      	movs	r3, #0
 8015e80:	e000      	b.n	8015e84 <mem_link_valid+0x6c>
  }
  return 1;
 8015e82:	2301      	movs	r3, #1
}
 8015e84:	4618      	mov	r0, r3
 8015e86:	3718      	adds	r7, #24
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}
 8015e8c:	20008ed0 	.word	0x20008ed0

08015e90 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b088      	sub	sp, #32
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d070      	beq.n	8015f80 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	f003 0303 	and.w	r3, r3, #3
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d00d      	beq.n	8015ec4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8015ea8:	4b37      	ldr	r3, [pc, #220]	; (8015f88 <mem_free+0xf8>)
 8015eaa:	f240 2273 	movw	r2, #627	; 0x273
 8015eae:	4937      	ldr	r1, [pc, #220]	; (8015f8c <mem_free+0xfc>)
 8015eb0:	4837      	ldr	r0, [pc, #220]	; (8015f90 <mem_free+0x100>)
 8015eb2:	f00c fc7d 	bl	80227b0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015eb6:	f00b f9e7 	bl	8021288 <sys_arch_protect>
 8015eba:	60f8      	str	r0, [r7, #12]
 8015ebc:	68f8      	ldr	r0, [r7, #12]
 8015ebe:	f00b f9f1 	bl	80212a4 <sys_arch_unprotect>
    return;
 8015ec2:	e05e      	b.n	8015f82 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	3b08      	subs	r3, #8
 8015ec8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8015eca:	4b32      	ldr	r3, [pc, #200]	; (8015f94 <mem_free+0x104>)
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	69fa      	ldr	r2, [r7, #28]
 8015ed0:	429a      	cmp	r2, r3
 8015ed2:	d306      	bcc.n	8015ee2 <mem_free+0x52>
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f103 020c 	add.w	r2, r3, #12
 8015eda:	4b2f      	ldr	r3, [pc, #188]	; (8015f98 <mem_free+0x108>)
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	429a      	cmp	r2, r3
 8015ee0:	d90d      	bls.n	8015efe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8015ee2:	4b29      	ldr	r3, [pc, #164]	; (8015f88 <mem_free+0xf8>)
 8015ee4:	f240 227f 	movw	r2, #639	; 0x27f
 8015ee8:	492c      	ldr	r1, [pc, #176]	; (8015f9c <mem_free+0x10c>)
 8015eea:	4829      	ldr	r0, [pc, #164]	; (8015f90 <mem_free+0x100>)
 8015eec:	f00c fc60 	bl	80227b0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015ef0:	f00b f9ca 	bl	8021288 <sys_arch_protect>
 8015ef4:	6138      	str	r0, [r7, #16]
 8015ef6:	6938      	ldr	r0, [r7, #16]
 8015ef8:	f00b f9d4 	bl	80212a4 <sys_arch_unprotect>
    return;
 8015efc:	e041      	b.n	8015f82 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8015efe:	4828      	ldr	r0, [pc, #160]	; (8015fa0 <mem_free+0x110>)
 8015f00:	f00b f980 	bl	8021204 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8015f04:	69fb      	ldr	r3, [r7, #28]
 8015f06:	791b      	ldrb	r3, [r3, #4]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d110      	bne.n	8015f2e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8015f0c:	4b1e      	ldr	r3, [pc, #120]	; (8015f88 <mem_free+0xf8>)
 8015f0e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8015f12:	4924      	ldr	r1, [pc, #144]	; (8015fa4 <mem_free+0x114>)
 8015f14:	481e      	ldr	r0, [pc, #120]	; (8015f90 <mem_free+0x100>)
 8015f16:	f00c fc4b 	bl	80227b0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8015f1a:	4821      	ldr	r0, [pc, #132]	; (8015fa0 <mem_free+0x110>)
 8015f1c:	f00b f981 	bl	8021222 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015f20:	f00b f9b2 	bl	8021288 <sys_arch_protect>
 8015f24:	6178      	str	r0, [r7, #20]
 8015f26:	6978      	ldr	r0, [r7, #20]
 8015f28:	f00b f9bc 	bl	80212a4 <sys_arch_unprotect>
    return;
 8015f2c:	e029      	b.n	8015f82 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8015f2e:	69f8      	ldr	r0, [r7, #28]
 8015f30:	f7ff ff72 	bl	8015e18 <mem_link_valid>
 8015f34:	4603      	mov	r3, r0
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d110      	bne.n	8015f5c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8015f3a:	4b13      	ldr	r3, [pc, #76]	; (8015f88 <mem_free+0xf8>)
 8015f3c:	f240 2295 	movw	r2, #661	; 0x295
 8015f40:	4919      	ldr	r1, [pc, #100]	; (8015fa8 <mem_free+0x118>)
 8015f42:	4813      	ldr	r0, [pc, #76]	; (8015f90 <mem_free+0x100>)
 8015f44:	f00c fc34 	bl	80227b0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8015f48:	4815      	ldr	r0, [pc, #84]	; (8015fa0 <mem_free+0x110>)
 8015f4a:	f00b f96a 	bl	8021222 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015f4e:	f00b f99b 	bl	8021288 <sys_arch_protect>
 8015f52:	61b8      	str	r0, [r7, #24]
 8015f54:	69b8      	ldr	r0, [r7, #24]
 8015f56:	f00b f9a5 	bl	80212a4 <sys_arch_unprotect>
    return;
 8015f5a:	e012      	b.n	8015f82 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8015f5c:	69fb      	ldr	r3, [r7, #28]
 8015f5e:	2200      	movs	r2, #0
 8015f60:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8015f62:	4b12      	ldr	r3, [pc, #72]	; (8015fac <mem_free+0x11c>)
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	69fa      	ldr	r2, [r7, #28]
 8015f68:	429a      	cmp	r2, r3
 8015f6a:	d202      	bcs.n	8015f72 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8015f6c:	4a0f      	ldr	r2, [pc, #60]	; (8015fac <mem_free+0x11c>)
 8015f6e:	69fb      	ldr	r3, [r7, #28]
 8015f70:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8015f72:	69f8      	ldr	r0, [r7, #28]
 8015f74:	f7ff fe5c 	bl	8015c30 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8015f78:	4809      	ldr	r0, [pc, #36]	; (8015fa0 <mem_free+0x110>)
 8015f7a:	f00b f952 	bl	8021222 <sys_mutex_unlock>
 8015f7e:	e000      	b.n	8015f82 <mem_free+0xf2>
    return;
 8015f80:	bf00      	nop
}
 8015f82:	3720      	adds	r7, #32
 8015f84:	46bd      	mov	sp, r7
 8015f86:	bd80      	pop	{r7, pc}
 8015f88:	08024868 	.word	0x08024868
 8015f8c:	08024958 	.word	0x08024958
 8015f90:	080248b0 	.word	0x080248b0
 8015f94:	20008ecc 	.word	0x20008ecc
 8015f98:	20008ed0 	.word	0x20008ed0
 8015f9c:	0802497c 	.word	0x0802497c
 8015fa0:	20008ed4 	.word	0x20008ed4
 8015fa4:	08024998 	.word	0x08024998
 8015fa8:	080249c0 	.word	0x080249c0
 8015fac:	20008ed8 	.word	0x20008ed8

08015fb0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b088      	sub	sp, #32
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
 8015fb8:	460b      	mov	r3, r1
 8015fba:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8015fbc:	887b      	ldrh	r3, [r7, #2]
 8015fbe:	3303      	adds	r3, #3
 8015fc0:	b29b      	uxth	r3, r3
 8015fc2:	f023 0303 	bic.w	r3, r3, #3
 8015fc6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8015fc8:	8bfb      	ldrh	r3, [r7, #30]
 8015fca:	2b0b      	cmp	r3, #11
 8015fcc:	d801      	bhi.n	8015fd2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8015fce:	230c      	movs	r3, #12
 8015fd0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8015fd2:	8bfb      	ldrh	r3, [r7, #30]
 8015fd4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8015fd8:	d803      	bhi.n	8015fe2 <mem_trim+0x32>
 8015fda:	8bfa      	ldrh	r2, [r7, #30]
 8015fdc:	887b      	ldrh	r3, [r7, #2]
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	d201      	bcs.n	8015fe6 <mem_trim+0x36>
    return NULL;
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	e0d8      	b.n	8016198 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8015fe6:	4b6e      	ldr	r3, [pc, #440]	; (80161a0 <mem_trim+0x1f0>)
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	687a      	ldr	r2, [r7, #4]
 8015fec:	429a      	cmp	r2, r3
 8015fee:	d304      	bcc.n	8015ffa <mem_trim+0x4a>
 8015ff0:	4b6c      	ldr	r3, [pc, #432]	; (80161a4 <mem_trim+0x1f4>)
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	687a      	ldr	r2, [r7, #4]
 8015ff6:	429a      	cmp	r2, r3
 8015ff8:	d306      	bcc.n	8016008 <mem_trim+0x58>
 8015ffa:	4b6b      	ldr	r3, [pc, #428]	; (80161a8 <mem_trim+0x1f8>)
 8015ffc:	f240 22d1 	movw	r2, #721	; 0x2d1
 8016000:	496a      	ldr	r1, [pc, #424]	; (80161ac <mem_trim+0x1fc>)
 8016002:	486b      	ldr	r0, [pc, #428]	; (80161b0 <mem_trim+0x200>)
 8016004:	f00c fbd4 	bl	80227b0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8016008:	4b65      	ldr	r3, [pc, #404]	; (80161a0 <mem_trim+0x1f0>)
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	687a      	ldr	r2, [r7, #4]
 801600e:	429a      	cmp	r2, r3
 8016010:	d304      	bcc.n	801601c <mem_trim+0x6c>
 8016012:	4b64      	ldr	r3, [pc, #400]	; (80161a4 <mem_trim+0x1f4>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	687a      	ldr	r2, [r7, #4]
 8016018:	429a      	cmp	r2, r3
 801601a:	d307      	bcc.n	801602c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801601c:	f00b f934 	bl	8021288 <sys_arch_protect>
 8016020:	60b8      	str	r0, [r7, #8]
 8016022:	68b8      	ldr	r0, [r7, #8]
 8016024:	f00b f93e 	bl	80212a4 <sys_arch_unprotect>
    return rmem;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	e0b5      	b.n	8016198 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	3b08      	subs	r3, #8
 8016030:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8016032:	69b8      	ldr	r0, [r7, #24]
 8016034:	f7ff fdea 	bl	8015c0c <mem_to_ptr>
 8016038:	4603      	mov	r3, r0
 801603a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801603c:	69bb      	ldr	r3, [r7, #24]
 801603e:	881a      	ldrh	r2, [r3, #0]
 8016040:	8afb      	ldrh	r3, [r7, #22]
 8016042:	1ad3      	subs	r3, r2, r3
 8016044:	b29b      	uxth	r3, r3
 8016046:	3b08      	subs	r3, #8
 8016048:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801604a:	8bfa      	ldrh	r2, [r7, #30]
 801604c:	8abb      	ldrh	r3, [r7, #20]
 801604e:	429a      	cmp	r2, r3
 8016050:	d906      	bls.n	8016060 <mem_trim+0xb0>
 8016052:	4b55      	ldr	r3, [pc, #340]	; (80161a8 <mem_trim+0x1f8>)
 8016054:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8016058:	4956      	ldr	r1, [pc, #344]	; (80161b4 <mem_trim+0x204>)
 801605a:	4855      	ldr	r0, [pc, #340]	; (80161b0 <mem_trim+0x200>)
 801605c:	f00c fba8 	bl	80227b0 <iprintf>
  if (newsize > size) {
 8016060:	8bfa      	ldrh	r2, [r7, #30]
 8016062:	8abb      	ldrh	r3, [r7, #20]
 8016064:	429a      	cmp	r2, r3
 8016066:	d901      	bls.n	801606c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8016068:	2300      	movs	r3, #0
 801606a:	e095      	b.n	8016198 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801606c:	8bfa      	ldrh	r2, [r7, #30]
 801606e:	8abb      	ldrh	r3, [r7, #20]
 8016070:	429a      	cmp	r2, r3
 8016072:	d101      	bne.n	8016078 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	e08f      	b.n	8016198 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8016078:	484f      	ldr	r0, [pc, #316]	; (80161b8 <mem_trim+0x208>)
 801607a:	f00b f8c3 	bl	8021204 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801607e:	69bb      	ldr	r3, [r7, #24]
 8016080:	881b      	ldrh	r3, [r3, #0]
 8016082:	4618      	mov	r0, r3
 8016084:	f7ff fdb0 	bl	8015be8 <ptr_to_mem>
 8016088:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801608a:	693b      	ldr	r3, [r7, #16]
 801608c:	791b      	ldrb	r3, [r3, #4]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d13f      	bne.n	8016112 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8016092:	69bb      	ldr	r3, [r7, #24]
 8016094:	881b      	ldrh	r3, [r3, #0]
 8016096:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801609a:	d106      	bne.n	80160aa <mem_trim+0xfa>
 801609c:	4b42      	ldr	r3, [pc, #264]	; (80161a8 <mem_trim+0x1f8>)
 801609e:	f240 22f5 	movw	r2, #757	; 0x2f5
 80160a2:	4946      	ldr	r1, [pc, #280]	; (80161bc <mem_trim+0x20c>)
 80160a4:	4842      	ldr	r0, [pc, #264]	; (80161b0 <mem_trim+0x200>)
 80160a6:	f00c fb83 	bl	80227b0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80160aa:	693b      	ldr	r3, [r7, #16]
 80160ac:	881b      	ldrh	r3, [r3, #0]
 80160ae:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80160b0:	8afa      	ldrh	r2, [r7, #22]
 80160b2:	8bfb      	ldrh	r3, [r7, #30]
 80160b4:	4413      	add	r3, r2
 80160b6:	b29b      	uxth	r3, r3
 80160b8:	3308      	adds	r3, #8
 80160ba:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80160bc:	4b40      	ldr	r3, [pc, #256]	; (80161c0 <mem_trim+0x210>)
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	693a      	ldr	r2, [r7, #16]
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d106      	bne.n	80160d4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80160c6:	89fb      	ldrh	r3, [r7, #14]
 80160c8:	4618      	mov	r0, r3
 80160ca:	f7ff fd8d 	bl	8015be8 <ptr_to_mem>
 80160ce:	4603      	mov	r3, r0
 80160d0:	4a3b      	ldr	r2, [pc, #236]	; (80161c0 <mem_trim+0x210>)
 80160d2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80160d4:	89fb      	ldrh	r3, [r7, #14]
 80160d6:	4618      	mov	r0, r3
 80160d8:	f7ff fd86 	bl	8015be8 <ptr_to_mem>
 80160dc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80160de:	693b      	ldr	r3, [r7, #16]
 80160e0:	2200      	movs	r2, #0
 80160e2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80160e4:	693b      	ldr	r3, [r7, #16]
 80160e6:	89ba      	ldrh	r2, [r7, #12]
 80160e8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80160ea:	693b      	ldr	r3, [r7, #16]
 80160ec:	8afa      	ldrh	r2, [r7, #22]
 80160ee:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80160f0:	69bb      	ldr	r3, [r7, #24]
 80160f2:	89fa      	ldrh	r2, [r7, #14]
 80160f4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80160f6:	693b      	ldr	r3, [r7, #16]
 80160f8:	881b      	ldrh	r3, [r3, #0]
 80160fa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80160fe:	d047      	beq.n	8016190 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8016100:	693b      	ldr	r3, [r7, #16]
 8016102:	881b      	ldrh	r3, [r3, #0]
 8016104:	4618      	mov	r0, r3
 8016106:	f7ff fd6f 	bl	8015be8 <ptr_to_mem>
 801610a:	4602      	mov	r2, r0
 801610c:	89fb      	ldrh	r3, [r7, #14]
 801610e:	8053      	strh	r3, [r2, #2]
 8016110:	e03e      	b.n	8016190 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8016112:	8bfb      	ldrh	r3, [r7, #30]
 8016114:	f103 0214 	add.w	r2, r3, #20
 8016118:	8abb      	ldrh	r3, [r7, #20]
 801611a:	429a      	cmp	r2, r3
 801611c:	d838      	bhi.n	8016190 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801611e:	8afa      	ldrh	r2, [r7, #22]
 8016120:	8bfb      	ldrh	r3, [r7, #30]
 8016122:	4413      	add	r3, r2
 8016124:	b29b      	uxth	r3, r3
 8016126:	3308      	adds	r3, #8
 8016128:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801612a:	69bb      	ldr	r3, [r7, #24]
 801612c:	881b      	ldrh	r3, [r3, #0]
 801612e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8016132:	d106      	bne.n	8016142 <mem_trim+0x192>
 8016134:	4b1c      	ldr	r3, [pc, #112]	; (80161a8 <mem_trim+0x1f8>)
 8016136:	f240 3216 	movw	r2, #790	; 0x316
 801613a:	4920      	ldr	r1, [pc, #128]	; (80161bc <mem_trim+0x20c>)
 801613c:	481c      	ldr	r0, [pc, #112]	; (80161b0 <mem_trim+0x200>)
 801613e:	f00c fb37 	bl	80227b0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8016142:	89fb      	ldrh	r3, [r7, #14]
 8016144:	4618      	mov	r0, r3
 8016146:	f7ff fd4f 	bl	8015be8 <ptr_to_mem>
 801614a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801614c:	4b1c      	ldr	r3, [pc, #112]	; (80161c0 <mem_trim+0x210>)
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	693a      	ldr	r2, [r7, #16]
 8016152:	429a      	cmp	r2, r3
 8016154:	d202      	bcs.n	801615c <mem_trim+0x1ac>
      lfree = mem2;
 8016156:	4a1a      	ldr	r2, [pc, #104]	; (80161c0 <mem_trim+0x210>)
 8016158:	693b      	ldr	r3, [r7, #16]
 801615a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801615c:	693b      	ldr	r3, [r7, #16]
 801615e:	2200      	movs	r2, #0
 8016160:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8016162:	69bb      	ldr	r3, [r7, #24]
 8016164:	881a      	ldrh	r2, [r3, #0]
 8016166:	693b      	ldr	r3, [r7, #16]
 8016168:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801616a:	693b      	ldr	r3, [r7, #16]
 801616c:	8afa      	ldrh	r2, [r7, #22]
 801616e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8016170:	69bb      	ldr	r3, [r7, #24]
 8016172:	89fa      	ldrh	r2, [r7, #14]
 8016174:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	881b      	ldrh	r3, [r3, #0]
 801617a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801617e:	d007      	beq.n	8016190 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	881b      	ldrh	r3, [r3, #0]
 8016184:	4618      	mov	r0, r3
 8016186:	f7ff fd2f 	bl	8015be8 <ptr_to_mem>
 801618a:	4602      	mov	r2, r0
 801618c:	89fb      	ldrh	r3, [r7, #14]
 801618e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8016190:	4809      	ldr	r0, [pc, #36]	; (80161b8 <mem_trim+0x208>)
 8016192:	f00b f846 	bl	8021222 <sys_mutex_unlock>
  return rmem;
 8016196:	687b      	ldr	r3, [r7, #4]
}
 8016198:	4618      	mov	r0, r3
 801619a:	3720      	adds	r7, #32
 801619c:	46bd      	mov	sp, r7
 801619e:	bd80      	pop	{r7, pc}
 80161a0:	20008ecc 	.word	0x20008ecc
 80161a4:	20008ed0 	.word	0x20008ed0
 80161a8:	08024868 	.word	0x08024868
 80161ac:	080249f4 	.word	0x080249f4
 80161b0:	080248b0 	.word	0x080248b0
 80161b4:	08024a0c 	.word	0x08024a0c
 80161b8:	20008ed4 	.word	0x20008ed4
 80161bc:	08024a2c 	.word	0x08024a2c
 80161c0:	20008ed8 	.word	0x20008ed8

080161c4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b088      	sub	sp, #32
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	4603      	mov	r3, r0
 80161cc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80161ce:	88fb      	ldrh	r3, [r7, #6]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d101      	bne.n	80161d8 <mem_malloc+0x14>
    return NULL;
 80161d4:	2300      	movs	r3, #0
 80161d6:	e0e2      	b.n	801639e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80161d8:	88fb      	ldrh	r3, [r7, #6]
 80161da:	3303      	adds	r3, #3
 80161dc:	b29b      	uxth	r3, r3
 80161de:	f023 0303 	bic.w	r3, r3, #3
 80161e2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80161e4:	8bbb      	ldrh	r3, [r7, #28]
 80161e6:	2b0b      	cmp	r3, #11
 80161e8:	d801      	bhi.n	80161ee <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80161ea:	230c      	movs	r3, #12
 80161ec:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80161ee:	8bbb      	ldrh	r3, [r7, #28]
 80161f0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80161f4:	d803      	bhi.n	80161fe <mem_malloc+0x3a>
 80161f6:	8bba      	ldrh	r2, [r7, #28]
 80161f8:	88fb      	ldrh	r3, [r7, #6]
 80161fa:	429a      	cmp	r2, r3
 80161fc:	d201      	bcs.n	8016202 <mem_malloc+0x3e>
    return NULL;
 80161fe:	2300      	movs	r3, #0
 8016200:	e0cd      	b.n	801639e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8016202:	4869      	ldr	r0, [pc, #420]	; (80163a8 <mem_malloc+0x1e4>)
 8016204:	f00a fffe 	bl	8021204 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016208:	4b68      	ldr	r3, [pc, #416]	; (80163ac <mem_malloc+0x1e8>)
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	4618      	mov	r0, r3
 801620e:	f7ff fcfd 	bl	8015c0c <mem_to_ptr>
 8016212:	4603      	mov	r3, r0
 8016214:	83fb      	strh	r3, [r7, #30]
 8016216:	e0b7      	b.n	8016388 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8016218:	8bfb      	ldrh	r3, [r7, #30]
 801621a:	4618      	mov	r0, r3
 801621c:	f7ff fce4 	bl	8015be8 <ptr_to_mem>
 8016220:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8016222:	697b      	ldr	r3, [r7, #20]
 8016224:	791b      	ldrb	r3, [r3, #4]
 8016226:	2b00      	cmp	r3, #0
 8016228:	f040 80a7 	bne.w	801637a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801622c:	697b      	ldr	r3, [r7, #20]
 801622e:	881b      	ldrh	r3, [r3, #0]
 8016230:	461a      	mov	r2, r3
 8016232:	8bfb      	ldrh	r3, [r7, #30]
 8016234:	1ad3      	subs	r3, r2, r3
 8016236:	f1a3 0208 	sub.w	r2, r3, #8
 801623a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801623c:	429a      	cmp	r2, r3
 801623e:	f0c0 809c 	bcc.w	801637a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8016242:	697b      	ldr	r3, [r7, #20]
 8016244:	881b      	ldrh	r3, [r3, #0]
 8016246:	461a      	mov	r2, r3
 8016248:	8bfb      	ldrh	r3, [r7, #30]
 801624a:	1ad3      	subs	r3, r2, r3
 801624c:	f1a3 0208 	sub.w	r2, r3, #8
 8016250:	8bbb      	ldrh	r3, [r7, #28]
 8016252:	3314      	adds	r3, #20
 8016254:	429a      	cmp	r2, r3
 8016256:	d333      	bcc.n	80162c0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8016258:	8bfa      	ldrh	r2, [r7, #30]
 801625a:	8bbb      	ldrh	r3, [r7, #28]
 801625c:	4413      	add	r3, r2
 801625e:	b29b      	uxth	r3, r3
 8016260:	3308      	adds	r3, #8
 8016262:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8016264:	8a7b      	ldrh	r3, [r7, #18]
 8016266:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801626a:	d106      	bne.n	801627a <mem_malloc+0xb6>
 801626c:	4b50      	ldr	r3, [pc, #320]	; (80163b0 <mem_malloc+0x1ec>)
 801626e:	f240 3287 	movw	r2, #903	; 0x387
 8016272:	4950      	ldr	r1, [pc, #320]	; (80163b4 <mem_malloc+0x1f0>)
 8016274:	4850      	ldr	r0, [pc, #320]	; (80163b8 <mem_malloc+0x1f4>)
 8016276:	f00c fa9b 	bl	80227b0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801627a:	8a7b      	ldrh	r3, [r7, #18]
 801627c:	4618      	mov	r0, r3
 801627e:	f7ff fcb3 	bl	8015be8 <ptr_to_mem>
 8016282:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	2200      	movs	r2, #0
 8016288:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801628a:	697b      	ldr	r3, [r7, #20]
 801628c:	881a      	ldrh	r2, [r3, #0]
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	8bfa      	ldrh	r2, [r7, #30]
 8016296:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8016298:	697b      	ldr	r3, [r7, #20]
 801629a:	8a7a      	ldrh	r2, [r7, #18]
 801629c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801629e:	697b      	ldr	r3, [r7, #20]
 80162a0:	2201      	movs	r2, #1
 80162a2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	881b      	ldrh	r3, [r3, #0]
 80162a8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80162ac:	d00b      	beq.n	80162c6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	881b      	ldrh	r3, [r3, #0]
 80162b2:	4618      	mov	r0, r3
 80162b4:	f7ff fc98 	bl	8015be8 <ptr_to_mem>
 80162b8:	4602      	mov	r2, r0
 80162ba:	8a7b      	ldrh	r3, [r7, #18]
 80162bc:	8053      	strh	r3, [r2, #2]
 80162be:	e002      	b.n	80162c6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80162c0:	697b      	ldr	r3, [r7, #20]
 80162c2:	2201      	movs	r2, #1
 80162c4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80162c6:	4b39      	ldr	r3, [pc, #228]	; (80163ac <mem_malloc+0x1e8>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	697a      	ldr	r2, [r7, #20]
 80162cc:	429a      	cmp	r2, r3
 80162ce:	d127      	bne.n	8016320 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80162d0:	4b36      	ldr	r3, [pc, #216]	; (80163ac <mem_malloc+0x1e8>)
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80162d6:	e005      	b.n	80162e4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80162d8:	69bb      	ldr	r3, [r7, #24]
 80162da:	881b      	ldrh	r3, [r3, #0]
 80162dc:	4618      	mov	r0, r3
 80162de:	f7ff fc83 	bl	8015be8 <ptr_to_mem>
 80162e2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80162e4:	69bb      	ldr	r3, [r7, #24]
 80162e6:	791b      	ldrb	r3, [r3, #4]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d004      	beq.n	80162f6 <mem_malloc+0x132>
 80162ec:	4b33      	ldr	r3, [pc, #204]	; (80163bc <mem_malloc+0x1f8>)
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	69ba      	ldr	r2, [r7, #24]
 80162f2:	429a      	cmp	r2, r3
 80162f4:	d1f0      	bne.n	80162d8 <mem_malloc+0x114>
          }
          lfree = cur;
 80162f6:	4a2d      	ldr	r2, [pc, #180]	; (80163ac <mem_malloc+0x1e8>)
 80162f8:	69bb      	ldr	r3, [r7, #24]
 80162fa:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80162fc:	4b2b      	ldr	r3, [pc, #172]	; (80163ac <mem_malloc+0x1e8>)
 80162fe:	681a      	ldr	r2, [r3, #0]
 8016300:	4b2e      	ldr	r3, [pc, #184]	; (80163bc <mem_malloc+0x1f8>)
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	429a      	cmp	r2, r3
 8016306:	d00b      	beq.n	8016320 <mem_malloc+0x15c>
 8016308:	4b28      	ldr	r3, [pc, #160]	; (80163ac <mem_malloc+0x1e8>)
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	791b      	ldrb	r3, [r3, #4]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d006      	beq.n	8016320 <mem_malloc+0x15c>
 8016312:	4b27      	ldr	r3, [pc, #156]	; (80163b0 <mem_malloc+0x1ec>)
 8016314:	f240 32b5 	movw	r2, #949	; 0x3b5
 8016318:	4929      	ldr	r1, [pc, #164]	; (80163c0 <mem_malloc+0x1fc>)
 801631a:	4827      	ldr	r0, [pc, #156]	; (80163b8 <mem_malloc+0x1f4>)
 801631c:	f00c fa48 	bl	80227b0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8016320:	4821      	ldr	r0, [pc, #132]	; (80163a8 <mem_malloc+0x1e4>)
 8016322:	f00a ff7e 	bl	8021222 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8016326:	8bba      	ldrh	r2, [r7, #28]
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	4413      	add	r3, r2
 801632c:	3308      	adds	r3, #8
 801632e:	4a23      	ldr	r2, [pc, #140]	; (80163bc <mem_malloc+0x1f8>)
 8016330:	6812      	ldr	r2, [r2, #0]
 8016332:	4293      	cmp	r3, r2
 8016334:	d906      	bls.n	8016344 <mem_malloc+0x180>
 8016336:	4b1e      	ldr	r3, [pc, #120]	; (80163b0 <mem_malloc+0x1ec>)
 8016338:	f240 32b9 	movw	r2, #953	; 0x3b9
 801633c:	4921      	ldr	r1, [pc, #132]	; (80163c4 <mem_malloc+0x200>)
 801633e:	481e      	ldr	r0, [pc, #120]	; (80163b8 <mem_malloc+0x1f4>)
 8016340:	f00c fa36 	bl	80227b0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8016344:	697b      	ldr	r3, [r7, #20]
 8016346:	f003 0303 	and.w	r3, r3, #3
 801634a:	2b00      	cmp	r3, #0
 801634c:	d006      	beq.n	801635c <mem_malloc+0x198>
 801634e:	4b18      	ldr	r3, [pc, #96]	; (80163b0 <mem_malloc+0x1ec>)
 8016350:	f240 32bb 	movw	r2, #955	; 0x3bb
 8016354:	491c      	ldr	r1, [pc, #112]	; (80163c8 <mem_malloc+0x204>)
 8016356:	4818      	ldr	r0, [pc, #96]	; (80163b8 <mem_malloc+0x1f4>)
 8016358:	f00c fa2a 	bl	80227b0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801635c:	697b      	ldr	r3, [r7, #20]
 801635e:	f003 0303 	and.w	r3, r3, #3
 8016362:	2b00      	cmp	r3, #0
 8016364:	d006      	beq.n	8016374 <mem_malloc+0x1b0>
 8016366:	4b12      	ldr	r3, [pc, #72]	; (80163b0 <mem_malloc+0x1ec>)
 8016368:	f240 32bd 	movw	r2, #957	; 0x3bd
 801636c:	4917      	ldr	r1, [pc, #92]	; (80163cc <mem_malloc+0x208>)
 801636e:	4812      	ldr	r0, [pc, #72]	; (80163b8 <mem_malloc+0x1f4>)
 8016370:	f00c fa1e 	bl	80227b0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8016374:	697b      	ldr	r3, [r7, #20]
 8016376:	3308      	adds	r3, #8
 8016378:	e011      	b.n	801639e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801637a:	8bfb      	ldrh	r3, [r7, #30]
 801637c:	4618      	mov	r0, r3
 801637e:	f7ff fc33 	bl	8015be8 <ptr_to_mem>
 8016382:	4603      	mov	r3, r0
 8016384:	881b      	ldrh	r3, [r3, #0]
 8016386:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016388:	8bfa      	ldrh	r2, [r7, #30]
 801638a:	8bbb      	ldrh	r3, [r7, #28]
 801638c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8016390:	429a      	cmp	r2, r3
 8016392:	f4ff af41 	bcc.w	8016218 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8016396:	4804      	ldr	r0, [pc, #16]	; (80163a8 <mem_malloc+0x1e4>)
 8016398:	f00a ff43 	bl	8021222 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801639c:	2300      	movs	r3, #0
}
 801639e:	4618      	mov	r0, r3
 80163a0:	3720      	adds	r7, #32
 80163a2:	46bd      	mov	sp, r7
 80163a4:	bd80      	pop	{r7, pc}
 80163a6:	bf00      	nop
 80163a8:	20008ed4 	.word	0x20008ed4
 80163ac:	20008ed8 	.word	0x20008ed8
 80163b0:	08024868 	.word	0x08024868
 80163b4:	08024a2c 	.word	0x08024a2c
 80163b8:	080248b0 	.word	0x080248b0
 80163bc:	20008ed0 	.word	0x20008ed0
 80163c0:	08024a40 	.word	0x08024a40
 80163c4:	08024a5c 	.word	0x08024a5c
 80163c8:	08024a8c 	.word	0x08024a8c
 80163cc:	08024abc 	.word	0x08024abc

080163d0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80163d0:	b480      	push	{r7}
 80163d2:	b085      	sub	sp, #20
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	689b      	ldr	r3, [r3, #8]
 80163dc:	2200      	movs	r2, #0
 80163de:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	3303      	adds	r3, #3
 80163e6:	f023 0303 	bic.w	r3, r3, #3
 80163ea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80163ec:	2300      	movs	r3, #0
 80163ee:	60fb      	str	r3, [r7, #12]
 80163f0:	e011      	b.n	8016416 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	689b      	ldr	r3, [r3, #8]
 80163f6:	681a      	ldr	r2, [r3, #0]
 80163f8:	68bb      	ldr	r3, [r7, #8]
 80163fa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	689b      	ldr	r3, [r3, #8]
 8016400:	68ba      	ldr	r2, [r7, #8]
 8016402:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	881b      	ldrh	r3, [r3, #0]
 8016408:	461a      	mov	r2, r3
 801640a:	68bb      	ldr	r3, [r7, #8]
 801640c:	4413      	add	r3, r2
 801640e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	3301      	adds	r3, #1
 8016414:	60fb      	str	r3, [r7, #12]
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	885b      	ldrh	r3, [r3, #2]
 801641a:	461a      	mov	r2, r3
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	4293      	cmp	r3, r2
 8016420:	dbe7      	blt.n	80163f2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8016422:	bf00      	nop
 8016424:	bf00      	nop
 8016426:	3714      	adds	r7, #20
 8016428:	46bd      	mov	sp, r7
 801642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642e:	4770      	bx	lr

08016430 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b082      	sub	sp, #8
 8016434:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8016436:	2300      	movs	r3, #0
 8016438:	80fb      	strh	r3, [r7, #6]
 801643a:	e009      	b.n	8016450 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801643c:	88fb      	ldrh	r3, [r7, #6]
 801643e:	4a08      	ldr	r2, [pc, #32]	; (8016460 <memp_init+0x30>)
 8016440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016444:	4618      	mov	r0, r3
 8016446:	f7ff ffc3 	bl	80163d0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801644a:	88fb      	ldrh	r3, [r7, #6]
 801644c:	3301      	adds	r3, #1
 801644e:	80fb      	strh	r3, [r7, #6]
 8016450:	88fb      	ldrh	r3, [r7, #6]
 8016452:	2b0c      	cmp	r3, #12
 8016454:	d9f2      	bls.n	801643c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8016456:	bf00      	nop
 8016458:	bf00      	nop
 801645a:	3708      	adds	r7, #8
 801645c:	46bd      	mov	sp, r7
 801645e:	bd80      	pop	{r7, pc}
 8016460:	08027324 	.word	0x08027324

08016464 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b084      	sub	sp, #16
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801646c:	f00a ff0c 	bl	8021288 <sys_arch_protect>
 8016470:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	689b      	ldr	r3, [r3, #8]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801647a:	68bb      	ldr	r3, [r7, #8]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d015      	beq.n	80164ac <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	689b      	ldr	r3, [r3, #8]
 8016484:	68ba      	ldr	r2, [r7, #8]
 8016486:	6812      	ldr	r2, [r2, #0]
 8016488:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801648a:	68bb      	ldr	r3, [r7, #8]
 801648c:	f003 0303 	and.w	r3, r3, #3
 8016490:	2b00      	cmp	r3, #0
 8016492:	d006      	beq.n	80164a2 <do_memp_malloc_pool+0x3e>
 8016494:	4b09      	ldr	r3, [pc, #36]	; (80164bc <do_memp_malloc_pool+0x58>)
 8016496:	f44f 728c 	mov.w	r2, #280	; 0x118
 801649a:	4909      	ldr	r1, [pc, #36]	; (80164c0 <do_memp_malloc_pool+0x5c>)
 801649c:	4809      	ldr	r0, [pc, #36]	; (80164c4 <do_memp_malloc_pool+0x60>)
 801649e:	f00c f987 	bl	80227b0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80164a2:	68f8      	ldr	r0, [r7, #12]
 80164a4:	f00a fefe 	bl	80212a4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80164a8:	68bb      	ldr	r3, [r7, #8]
 80164aa:	e003      	b.n	80164b4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80164ac:	68f8      	ldr	r0, [r7, #12]
 80164ae:	f00a fef9 	bl	80212a4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80164b2:	2300      	movs	r3, #0
}
 80164b4:	4618      	mov	r0, r3
 80164b6:	3710      	adds	r7, #16
 80164b8:	46bd      	mov	sp, r7
 80164ba:	bd80      	pop	{r7, pc}
 80164bc:	08024ae0 	.word	0x08024ae0
 80164c0:	08024b10 	.word	0x08024b10
 80164c4:	08024b34 	.word	0x08024b34

080164c8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b082      	sub	sp, #8
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d106      	bne.n	80164e4 <memp_malloc_pool+0x1c>
 80164d6:	4b0a      	ldr	r3, [pc, #40]	; (8016500 <memp_malloc_pool+0x38>)
 80164d8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80164dc:	4909      	ldr	r1, [pc, #36]	; (8016504 <memp_malloc_pool+0x3c>)
 80164de:	480a      	ldr	r0, [pc, #40]	; (8016508 <memp_malloc_pool+0x40>)
 80164e0:	f00c f966 	bl	80227b0 <iprintf>
  if (desc == NULL) {
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d101      	bne.n	80164ee <memp_malloc_pool+0x26>
    return NULL;
 80164ea:	2300      	movs	r3, #0
 80164ec:	e003      	b.n	80164f6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80164ee:	6878      	ldr	r0, [r7, #4]
 80164f0:	f7ff ffb8 	bl	8016464 <do_memp_malloc_pool>
 80164f4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	3708      	adds	r7, #8
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	bf00      	nop
 8016500:	08024ae0 	.word	0x08024ae0
 8016504:	08024b5c 	.word	0x08024b5c
 8016508:	08024b34 	.word	0x08024b34

0801650c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b084      	sub	sp, #16
 8016510:	af00      	add	r7, sp, #0
 8016512:	4603      	mov	r3, r0
 8016514:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016516:	79fb      	ldrb	r3, [r7, #7]
 8016518:	2b0c      	cmp	r3, #12
 801651a:	d908      	bls.n	801652e <memp_malloc+0x22>
 801651c:	4b0a      	ldr	r3, [pc, #40]	; (8016548 <memp_malloc+0x3c>)
 801651e:	f240 1257 	movw	r2, #343	; 0x157
 8016522:	490a      	ldr	r1, [pc, #40]	; (801654c <memp_malloc+0x40>)
 8016524:	480a      	ldr	r0, [pc, #40]	; (8016550 <memp_malloc+0x44>)
 8016526:	f00c f943 	bl	80227b0 <iprintf>
 801652a:	2300      	movs	r3, #0
 801652c:	e008      	b.n	8016540 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801652e:	79fb      	ldrb	r3, [r7, #7]
 8016530:	4a08      	ldr	r2, [pc, #32]	; (8016554 <memp_malloc+0x48>)
 8016532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016536:	4618      	mov	r0, r3
 8016538:	f7ff ff94 	bl	8016464 <do_memp_malloc_pool>
 801653c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801653e:	68fb      	ldr	r3, [r7, #12]
}
 8016540:	4618      	mov	r0, r3
 8016542:	3710      	adds	r7, #16
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}
 8016548:	08024ae0 	.word	0x08024ae0
 801654c:	08024b70 	.word	0x08024b70
 8016550:	08024b34 	.word	0x08024b34
 8016554:	08027324 	.word	0x08027324

08016558 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b084      	sub	sp, #16
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
 8016560:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	f003 0303 	and.w	r3, r3, #3
 8016568:	2b00      	cmp	r3, #0
 801656a:	d006      	beq.n	801657a <do_memp_free_pool+0x22>
 801656c:	4b0d      	ldr	r3, [pc, #52]	; (80165a4 <do_memp_free_pool+0x4c>)
 801656e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8016572:	490d      	ldr	r1, [pc, #52]	; (80165a8 <do_memp_free_pool+0x50>)
 8016574:	480d      	ldr	r0, [pc, #52]	; (80165ac <do_memp_free_pool+0x54>)
 8016576:	f00c f91b 	bl	80227b0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801657a:	683b      	ldr	r3, [r7, #0]
 801657c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801657e:	f00a fe83 	bl	8021288 <sys_arch_protect>
 8016582:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	689b      	ldr	r3, [r3, #8]
 8016588:	681a      	ldr	r2, [r3, #0]
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	689b      	ldr	r3, [r3, #8]
 8016592:	68fa      	ldr	r2, [r7, #12]
 8016594:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8016596:	68b8      	ldr	r0, [r7, #8]
 8016598:	f00a fe84 	bl	80212a4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801659c:	bf00      	nop
 801659e:	3710      	adds	r7, #16
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}
 80165a4:	08024ae0 	.word	0x08024ae0
 80165a8:	08024b90 	.word	0x08024b90
 80165ac:	08024b34 	.word	0x08024b34

080165b0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b082      	sub	sp, #8
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
 80165b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d106      	bne.n	80165ce <memp_free_pool+0x1e>
 80165c0:	4b0a      	ldr	r3, [pc, #40]	; (80165ec <memp_free_pool+0x3c>)
 80165c2:	f240 1295 	movw	r2, #405	; 0x195
 80165c6:	490a      	ldr	r1, [pc, #40]	; (80165f0 <memp_free_pool+0x40>)
 80165c8:	480a      	ldr	r0, [pc, #40]	; (80165f4 <memp_free_pool+0x44>)
 80165ca:	f00c f8f1 	bl	80227b0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d007      	beq.n	80165e4 <memp_free_pool+0x34>
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d004      	beq.n	80165e4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80165da:	6839      	ldr	r1, [r7, #0]
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f7ff ffbb 	bl	8016558 <do_memp_free_pool>
 80165e2:	e000      	b.n	80165e6 <memp_free_pool+0x36>
    return;
 80165e4:	bf00      	nop
}
 80165e6:	3708      	adds	r7, #8
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}
 80165ec:	08024ae0 	.word	0x08024ae0
 80165f0:	08024b5c 	.word	0x08024b5c
 80165f4:	08024b34 	.word	0x08024b34

080165f8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b082      	sub	sp, #8
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	4603      	mov	r3, r0
 8016600:	6039      	str	r1, [r7, #0]
 8016602:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8016604:	79fb      	ldrb	r3, [r7, #7]
 8016606:	2b0c      	cmp	r3, #12
 8016608:	d907      	bls.n	801661a <memp_free+0x22>
 801660a:	4b0c      	ldr	r3, [pc, #48]	; (801663c <memp_free+0x44>)
 801660c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8016610:	490b      	ldr	r1, [pc, #44]	; (8016640 <memp_free+0x48>)
 8016612:	480c      	ldr	r0, [pc, #48]	; (8016644 <memp_free+0x4c>)
 8016614:	f00c f8cc 	bl	80227b0 <iprintf>
 8016618:	e00c      	b.n	8016634 <memp_free+0x3c>

  if (mem == NULL) {
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d008      	beq.n	8016632 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8016620:	79fb      	ldrb	r3, [r7, #7]
 8016622:	4a09      	ldr	r2, [pc, #36]	; (8016648 <memp_free+0x50>)
 8016624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016628:	6839      	ldr	r1, [r7, #0]
 801662a:	4618      	mov	r0, r3
 801662c:	f7ff ff94 	bl	8016558 <do_memp_free_pool>
 8016630:	e000      	b.n	8016634 <memp_free+0x3c>
    return;
 8016632:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8016634:	3708      	adds	r7, #8
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}
 801663a:	bf00      	nop
 801663c:	08024ae0 	.word	0x08024ae0
 8016640:	08024bb0 	.word	0x08024bb0
 8016644:	08024b34 	.word	0x08024b34
 8016648:	08027324 	.word	0x08027324

0801664c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801664c:	b480      	push	{r7}
 801664e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8016650:	bf00      	nop
 8016652:	46bd      	mov	sp, r7
 8016654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016658:	4770      	bx	lr
	...

0801665c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b086      	sub	sp, #24
 8016660:	af00      	add	r7, sp, #0
 8016662:	60f8      	str	r0, [r7, #12]
 8016664:	60b9      	str	r1, [r7, #8]
 8016666:	607a      	str	r2, [r7, #4]
 8016668:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d108      	bne.n	8016682 <netif_add+0x26>
 8016670:	4b57      	ldr	r3, [pc, #348]	; (80167d0 <netif_add+0x174>)
 8016672:	f240 1227 	movw	r2, #295	; 0x127
 8016676:	4957      	ldr	r1, [pc, #348]	; (80167d4 <netif_add+0x178>)
 8016678:	4857      	ldr	r0, [pc, #348]	; (80167d8 <netif_add+0x17c>)
 801667a:	f00c f899 	bl	80227b0 <iprintf>
 801667e:	2300      	movs	r3, #0
 8016680:	e0a2      	b.n	80167c8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8016682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016684:	2b00      	cmp	r3, #0
 8016686:	d108      	bne.n	801669a <netif_add+0x3e>
 8016688:	4b51      	ldr	r3, [pc, #324]	; (80167d0 <netif_add+0x174>)
 801668a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801668e:	4953      	ldr	r1, [pc, #332]	; (80167dc <netif_add+0x180>)
 8016690:	4851      	ldr	r0, [pc, #324]	; (80167d8 <netif_add+0x17c>)
 8016692:	f00c f88d 	bl	80227b0 <iprintf>
 8016696:	2300      	movs	r3, #0
 8016698:	e096      	b.n	80167c8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801669a:	68bb      	ldr	r3, [r7, #8]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d101      	bne.n	80166a4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80166a0:	4b4f      	ldr	r3, [pc, #316]	; (80167e0 <netif_add+0x184>)
 80166a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d101      	bne.n	80166ae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80166aa:	4b4d      	ldr	r3, [pc, #308]	; (80167e0 <netif_add+0x184>)
 80166ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80166ae:	683b      	ldr	r3, [r7, #0]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d101      	bne.n	80166b8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80166b4:	4b4a      	ldr	r3, [pc, #296]	; (80167e0 <netif_add+0x184>)
 80166b6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	2200      	movs	r2, #0
 80166bc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	2200      	movs	r2, #0
 80166c2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	2200      	movs	r2, #0
 80166c8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	4a45      	ldr	r2, [pc, #276]	; (80167e4 <netif_add+0x188>)
 80166ce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	2200      	movs	r2, #0
 80166d4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	2200      	movs	r2, #0
 80166da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	2200      	movs	r2, #0
 80166e2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	6a3a      	ldr	r2, [r7, #32]
 80166e8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80166ea:	4b3f      	ldr	r3, [pc, #252]	; (80167e8 <netif_add+0x18c>)
 80166ec:	781a      	ldrb	r2, [r3, #0]
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80166f8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80166fa:	683b      	ldr	r3, [r7, #0]
 80166fc:	687a      	ldr	r2, [r7, #4]
 80166fe:	68b9      	ldr	r1, [r7, #8]
 8016700:	68f8      	ldr	r0, [r7, #12]
 8016702:	f000 f913 	bl	801692c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8016706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016708:	68f8      	ldr	r0, [r7, #12]
 801670a:	4798      	blx	r3
 801670c:	4603      	mov	r3, r0
 801670e:	2b00      	cmp	r3, #0
 8016710:	d001      	beq.n	8016716 <netif_add+0xba>
    return NULL;
 8016712:	2300      	movs	r3, #0
 8016714:	e058      	b.n	80167c8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801671c:	2bff      	cmp	r3, #255	; 0xff
 801671e:	d103      	bne.n	8016728 <netif_add+0xcc>
        netif->num = 0;
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	2200      	movs	r2, #0
 8016724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8016728:	2300      	movs	r3, #0
 801672a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801672c:	4b2f      	ldr	r3, [pc, #188]	; (80167ec <netif_add+0x190>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	617b      	str	r3, [r7, #20]
 8016732:	e02b      	b.n	801678c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8016734:	697a      	ldr	r2, [r7, #20]
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	429a      	cmp	r2, r3
 801673a:	d106      	bne.n	801674a <netif_add+0xee>
 801673c:	4b24      	ldr	r3, [pc, #144]	; (80167d0 <netif_add+0x174>)
 801673e:	f240 128b 	movw	r2, #395	; 0x18b
 8016742:	492b      	ldr	r1, [pc, #172]	; (80167f0 <netif_add+0x194>)
 8016744:	4824      	ldr	r0, [pc, #144]	; (80167d8 <netif_add+0x17c>)
 8016746:	f00c f833 	bl	80227b0 <iprintf>
        num_netifs++;
 801674a:	693b      	ldr	r3, [r7, #16]
 801674c:	3301      	adds	r3, #1
 801674e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8016750:	693b      	ldr	r3, [r7, #16]
 8016752:	2bff      	cmp	r3, #255	; 0xff
 8016754:	dd06      	ble.n	8016764 <netif_add+0x108>
 8016756:	4b1e      	ldr	r3, [pc, #120]	; (80167d0 <netif_add+0x174>)
 8016758:	f240 128d 	movw	r2, #397	; 0x18d
 801675c:	4925      	ldr	r1, [pc, #148]	; (80167f4 <netif_add+0x198>)
 801675e:	481e      	ldr	r0, [pc, #120]	; (80167d8 <netif_add+0x17c>)
 8016760:	f00c f826 	bl	80227b0 <iprintf>
        if (netif2->num == netif->num) {
 8016764:	697b      	ldr	r3, [r7, #20]
 8016766:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016770:	429a      	cmp	r2, r3
 8016772:	d108      	bne.n	8016786 <netif_add+0x12a>
          netif->num++;
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801677a:	3301      	adds	r3, #1
 801677c:	b2da      	uxtb	r2, r3
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8016784:	e005      	b.n	8016792 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8016786:	697b      	ldr	r3, [r7, #20]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	617b      	str	r3, [r7, #20]
 801678c:	697b      	ldr	r3, [r7, #20]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d1d0      	bne.n	8016734 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8016792:	697b      	ldr	r3, [r7, #20]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d1be      	bne.n	8016716 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801679e:	2bfe      	cmp	r3, #254	; 0xfe
 80167a0:	d103      	bne.n	80167aa <netif_add+0x14e>
    netif_num = 0;
 80167a2:	4b11      	ldr	r3, [pc, #68]	; (80167e8 <netif_add+0x18c>)
 80167a4:	2200      	movs	r2, #0
 80167a6:	701a      	strb	r2, [r3, #0]
 80167a8:	e006      	b.n	80167b8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80167b0:	3301      	adds	r3, #1
 80167b2:	b2da      	uxtb	r2, r3
 80167b4:	4b0c      	ldr	r3, [pc, #48]	; (80167e8 <netif_add+0x18c>)
 80167b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80167b8:	4b0c      	ldr	r3, [pc, #48]	; (80167ec <netif_add+0x190>)
 80167ba:	681a      	ldr	r2, [r3, #0]
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80167c0:	4a0a      	ldr	r2, [pc, #40]	; (80167ec <netif_add+0x190>)
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80167c6:	68fb      	ldr	r3, [r7, #12]
}
 80167c8:	4618      	mov	r0, r3
 80167ca:	3718      	adds	r7, #24
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}
 80167d0:	08024bcc 	.word	0x08024bcc
 80167d4:	08024c60 	.word	0x08024c60
 80167d8:	08024c1c 	.word	0x08024c1c
 80167dc:	08024c7c 	.word	0x08024c7c
 80167e0:	08027398 	.word	0x08027398
 80167e4:	08016c07 	.word	0x08016c07
 80167e8:	2000bfb0 	.word	0x2000bfb0
 80167ec:	2000bfa8 	.word	0x2000bfa8
 80167f0:	08024ca0 	.word	0x08024ca0
 80167f4:	08024cb4 	.word	0x08024cb4

080167f8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
 8016800:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8016802:	6839      	ldr	r1, [r7, #0]
 8016804:	6878      	ldr	r0, [r7, #4]
 8016806:	f002 ff77 	bl	80196f8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801680a:	6839      	ldr	r1, [r7, #0]
 801680c:	6878      	ldr	r0, [r7, #4]
 801680e:	f008 f881 	bl	801e914 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8016812:	bf00      	nop
 8016814:	3708      	adds	r7, #8
 8016816:	46bd      	mov	sp, r7
 8016818:	bd80      	pop	{r7, pc}
	...

0801681c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b086      	sub	sp, #24
 8016820:	af00      	add	r7, sp, #0
 8016822:	60f8      	str	r0, [r7, #12]
 8016824:	60b9      	str	r1, [r7, #8]
 8016826:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8016828:	68bb      	ldr	r3, [r7, #8]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d106      	bne.n	801683c <netif_do_set_ipaddr+0x20>
 801682e:	4b1d      	ldr	r3, [pc, #116]	; (80168a4 <netif_do_set_ipaddr+0x88>)
 8016830:	f240 12cb 	movw	r2, #459	; 0x1cb
 8016834:	491c      	ldr	r1, [pc, #112]	; (80168a8 <netif_do_set_ipaddr+0x8c>)
 8016836:	481d      	ldr	r0, [pc, #116]	; (80168ac <netif_do_set_ipaddr+0x90>)
 8016838:	f00b ffba 	bl	80227b0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d106      	bne.n	8016850 <netif_do_set_ipaddr+0x34>
 8016842:	4b18      	ldr	r3, [pc, #96]	; (80168a4 <netif_do_set_ipaddr+0x88>)
 8016844:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8016848:	4917      	ldr	r1, [pc, #92]	; (80168a8 <netif_do_set_ipaddr+0x8c>)
 801684a:	4818      	ldr	r0, [pc, #96]	; (80168ac <netif_do_set_ipaddr+0x90>)
 801684c:	f00b ffb0 	bl	80227b0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8016850:	68bb      	ldr	r3, [r7, #8]
 8016852:	681a      	ldr	r2, [r3, #0]
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	3304      	adds	r3, #4
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	429a      	cmp	r2, r3
 801685c:	d01c      	beq.n	8016898 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	3304      	adds	r3, #4
 8016868:	681a      	ldr	r2, [r3, #0]
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801686e:	f107 0314 	add.w	r3, r7, #20
 8016872:	4619      	mov	r1, r3
 8016874:	6878      	ldr	r0, [r7, #4]
 8016876:	f7ff ffbf 	bl	80167f8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801687a:	68bb      	ldr	r3, [r7, #8]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d002      	beq.n	8016886 <netif_do_set_ipaddr+0x6a>
 8016880:	68bb      	ldr	r3, [r7, #8]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	e000      	b.n	8016888 <netif_do_set_ipaddr+0x6c>
 8016886:	2300      	movs	r3, #0
 8016888:	68fa      	ldr	r2, [r7, #12]
 801688a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801688c:	2101      	movs	r1, #1
 801688e:	68f8      	ldr	r0, [r7, #12]
 8016890:	f000 f8d2 	bl	8016a38 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8016894:	2301      	movs	r3, #1
 8016896:	e000      	b.n	801689a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8016898:	2300      	movs	r3, #0
}
 801689a:	4618      	mov	r0, r3
 801689c:	3718      	adds	r7, #24
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}
 80168a2:	bf00      	nop
 80168a4:	08024bcc 	.word	0x08024bcc
 80168a8:	08024ce4 	.word	0x08024ce4
 80168ac:	08024c1c 	.word	0x08024c1c

080168b0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80168b0:	b480      	push	{r7}
 80168b2:	b085      	sub	sp, #20
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	60f8      	str	r0, [r7, #12]
 80168b8:	60b9      	str	r1, [r7, #8]
 80168ba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80168bc:	68bb      	ldr	r3, [r7, #8]
 80168be:	681a      	ldr	r2, [r3, #0]
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	3308      	adds	r3, #8
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	429a      	cmp	r2, r3
 80168c8:	d00a      	beq.n	80168e0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80168ca:	68bb      	ldr	r3, [r7, #8]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d002      	beq.n	80168d6 <netif_do_set_netmask+0x26>
 80168d0:	68bb      	ldr	r3, [r7, #8]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	e000      	b.n	80168d8 <netif_do_set_netmask+0x28>
 80168d6:	2300      	movs	r3, #0
 80168d8:	68fa      	ldr	r2, [r7, #12]
 80168da:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80168dc:	2301      	movs	r3, #1
 80168de:	e000      	b.n	80168e2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80168e0:	2300      	movs	r3, #0
}
 80168e2:	4618      	mov	r0, r3
 80168e4:	3714      	adds	r7, #20
 80168e6:	46bd      	mov	sp, r7
 80168e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ec:	4770      	bx	lr

080168ee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80168ee:	b480      	push	{r7}
 80168f0:	b085      	sub	sp, #20
 80168f2:	af00      	add	r7, sp, #0
 80168f4:	60f8      	str	r0, [r7, #12]
 80168f6:	60b9      	str	r1, [r7, #8]
 80168f8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80168fa:	68bb      	ldr	r3, [r7, #8]
 80168fc:	681a      	ldr	r2, [r3, #0]
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	330c      	adds	r3, #12
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	429a      	cmp	r2, r3
 8016906:	d00a      	beq.n	801691e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8016908:	68bb      	ldr	r3, [r7, #8]
 801690a:	2b00      	cmp	r3, #0
 801690c:	d002      	beq.n	8016914 <netif_do_set_gw+0x26>
 801690e:	68bb      	ldr	r3, [r7, #8]
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	e000      	b.n	8016916 <netif_do_set_gw+0x28>
 8016914:	2300      	movs	r3, #0
 8016916:	68fa      	ldr	r2, [r7, #12]
 8016918:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801691a:	2301      	movs	r3, #1
 801691c:	e000      	b.n	8016920 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801691e:	2300      	movs	r3, #0
}
 8016920:	4618      	mov	r0, r3
 8016922:	3714      	adds	r7, #20
 8016924:	46bd      	mov	sp, r7
 8016926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692a:	4770      	bx	lr

0801692c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b088      	sub	sp, #32
 8016930:	af00      	add	r7, sp, #0
 8016932:	60f8      	str	r0, [r7, #12]
 8016934:	60b9      	str	r1, [r7, #8]
 8016936:	607a      	str	r2, [r7, #4]
 8016938:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801693a:	2300      	movs	r3, #0
 801693c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801693e:	2300      	movs	r3, #0
 8016940:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016942:	68bb      	ldr	r3, [r7, #8]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d101      	bne.n	801694c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8016948:	4b1c      	ldr	r3, [pc, #112]	; (80169bc <netif_set_addr+0x90>)
 801694a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d101      	bne.n	8016956 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8016952:	4b1a      	ldr	r3, [pc, #104]	; (80169bc <netif_set_addr+0x90>)
 8016954:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8016956:	683b      	ldr	r3, [r7, #0]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d101      	bne.n	8016960 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801695c:	4b17      	ldr	r3, [pc, #92]	; (80169bc <netif_set_addr+0x90>)
 801695e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8016960:	68bb      	ldr	r3, [r7, #8]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d003      	beq.n	801696e <netif_set_addr+0x42>
 8016966:	68bb      	ldr	r3, [r7, #8]
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d101      	bne.n	8016972 <netif_set_addr+0x46>
 801696e:	2301      	movs	r3, #1
 8016970:	e000      	b.n	8016974 <netif_set_addr+0x48>
 8016972:	2300      	movs	r3, #0
 8016974:	617b      	str	r3, [r7, #20]
  if (remove) {
 8016976:	697b      	ldr	r3, [r7, #20]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d006      	beq.n	801698a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801697c:	f107 0310 	add.w	r3, r7, #16
 8016980:	461a      	mov	r2, r3
 8016982:	68b9      	ldr	r1, [r7, #8]
 8016984:	68f8      	ldr	r0, [r7, #12]
 8016986:	f7ff ff49 	bl	801681c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801698a:	69fa      	ldr	r2, [r7, #28]
 801698c:	6879      	ldr	r1, [r7, #4]
 801698e:	68f8      	ldr	r0, [r7, #12]
 8016990:	f7ff ff8e 	bl	80168b0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8016994:	69ba      	ldr	r2, [r7, #24]
 8016996:	6839      	ldr	r1, [r7, #0]
 8016998:	68f8      	ldr	r0, [r7, #12]
 801699a:	f7ff ffa8 	bl	80168ee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801699e:	697b      	ldr	r3, [r7, #20]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d106      	bne.n	80169b2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80169a4:	f107 0310 	add.w	r3, r7, #16
 80169a8:	461a      	mov	r2, r3
 80169aa:	68b9      	ldr	r1, [r7, #8]
 80169ac:	68f8      	ldr	r0, [r7, #12]
 80169ae:	f7ff ff35 	bl	801681c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80169b2:	bf00      	nop
 80169b4:	3720      	adds	r7, #32
 80169b6:	46bd      	mov	sp, r7
 80169b8:	bd80      	pop	{r7, pc}
 80169ba:	bf00      	nop
 80169bc:	08027398 	.word	0x08027398

080169c0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80169c0:	b480      	push	{r7}
 80169c2:	b083      	sub	sp, #12
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80169c8:	4a04      	ldr	r2, [pc, #16]	; (80169dc <netif_set_default+0x1c>)
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80169ce:	bf00      	nop
 80169d0:	370c      	adds	r7, #12
 80169d2:	46bd      	mov	sp, r7
 80169d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d8:	4770      	bx	lr
 80169da:	bf00      	nop
 80169dc:	2000bfac 	.word	0x2000bfac

080169e0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b082      	sub	sp, #8
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d107      	bne.n	80169fe <netif_set_up+0x1e>
 80169ee:	4b0f      	ldr	r3, [pc, #60]	; (8016a2c <netif_set_up+0x4c>)
 80169f0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80169f4:	490e      	ldr	r1, [pc, #56]	; (8016a30 <netif_set_up+0x50>)
 80169f6:	480f      	ldr	r0, [pc, #60]	; (8016a34 <netif_set_up+0x54>)
 80169f8:	f00b feda 	bl	80227b0 <iprintf>
 80169fc:	e013      	b.n	8016a26 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a04:	f003 0301 	and.w	r3, r3, #1
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d10c      	bne.n	8016a26 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a12:	f043 0301 	orr.w	r3, r3, #1
 8016a16:	b2da      	uxtb	r2, r3
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8016a1e:	2103      	movs	r1, #3
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f000 f809 	bl	8016a38 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8016a26:	3708      	adds	r7, #8
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bd80      	pop	{r7, pc}
 8016a2c:	08024bcc 	.word	0x08024bcc
 8016a30:	08024d54 	.word	0x08024d54
 8016a34:	08024c1c 	.word	0x08024c1c

08016a38 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b082      	sub	sp, #8
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
 8016a40:	460b      	mov	r3, r1
 8016a42:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d106      	bne.n	8016a58 <netif_issue_reports+0x20>
 8016a4a:	4b18      	ldr	r3, [pc, #96]	; (8016aac <netif_issue_reports+0x74>)
 8016a4c:	f240 326d 	movw	r2, #877	; 0x36d
 8016a50:	4917      	ldr	r1, [pc, #92]	; (8016ab0 <netif_issue_reports+0x78>)
 8016a52:	4818      	ldr	r0, [pc, #96]	; (8016ab4 <netif_issue_reports+0x7c>)
 8016a54:	f00b feac 	bl	80227b0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a5e:	f003 0304 	and.w	r3, r3, #4
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d01e      	beq.n	8016aa4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a6c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d017      	beq.n	8016aa4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016a74:	78fb      	ldrb	r3, [r7, #3]
 8016a76:	f003 0301 	and.w	r3, r3, #1
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d013      	beq.n	8016aa6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	3304      	adds	r3, #4
 8016a82:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d00e      	beq.n	8016aa6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a8e:	f003 0308 	and.w	r3, r3, #8
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d007      	beq.n	8016aa6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	3304      	adds	r3, #4
 8016a9a:	4619      	mov	r1, r3
 8016a9c:	6878      	ldr	r0, [r7, #4]
 8016a9e:	f008 fea3 	bl	801f7e8 <etharp_request>
 8016aa2:	e000      	b.n	8016aa6 <netif_issue_reports+0x6e>
    return;
 8016aa4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8016aa6:	3708      	adds	r7, #8
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	bd80      	pop	{r7, pc}
 8016aac:	08024bcc 	.word	0x08024bcc
 8016ab0:	08024d70 	.word	0x08024d70
 8016ab4:	08024c1c 	.word	0x08024c1c

08016ab8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b082      	sub	sp, #8
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d107      	bne.n	8016ad6 <netif_set_down+0x1e>
 8016ac6:	4b12      	ldr	r3, [pc, #72]	; (8016b10 <netif_set_down+0x58>)
 8016ac8:	f240 329b 	movw	r2, #923	; 0x39b
 8016acc:	4911      	ldr	r1, [pc, #68]	; (8016b14 <netif_set_down+0x5c>)
 8016ace:	4812      	ldr	r0, [pc, #72]	; (8016b18 <netif_set_down+0x60>)
 8016ad0:	f00b fe6e 	bl	80227b0 <iprintf>
 8016ad4:	e019      	b.n	8016b0a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016adc:	f003 0301 	and.w	r3, r3, #1
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d012      	beq.n	8016b0a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016aea:	f023 0301 	bic.w	r3, r3, #1
 8016aee:	b2da      	uxtb	r2, r3
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016afc:	f003 0308 	and.w	r3, r3, #8
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d002      	beq.n	8016b0a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8016b04:	6878      	ldr	r0, [r7, #4]
 8016b06:	f008 fa2d 	bl	801ef64 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8016b0a:	3708      	adds	r7, #8
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	bd80      	pop	{r7, pc}
 8016b10:	08024bcc 	.word	0x08024bcc
 8016b14:	08024d94 	.word	0x08024d94
 8016b18:	08024c1c 	.word	0x08024c1c

08016b1c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b082      	sub	sp, #8
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d107      	bne.n	8016b3a <netif_set_link_up+0x1e>
 8016b2a:	4b13      	ldr	r3, [pc, #76]	; (8016b78 <netif_set_link_up+0x5c>)
 8016b2c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8016b30:	4912      	ldr	r1, [pc, #72]	; (8016b7c <netif_set_link_up+0x60>)
 8016b32:	4813      	ldr	r0, [pc, #76]	; (8016b80 <netif_set_link_up+0x64>)
 8016b34:	f00b fe3c 	bl	80227b0 <iprintf>
 8016b38:	e01b      	b.n	8016b72 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016b40:	f003 0304 	and.w	r3, r3, #4
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d114      	bne.n	8016b72 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016b4e:	f043 0304 	orr.w	r3, r3, #4
 8016b52:	b2da      	uxtb	r2, r3
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8016b5a:	2103      	movs	r1, #3
 8016b5c:	6878      	ldr	r0, [r7, #4]
 8016b5e:	f7ff ff6b 	bl	8016a38 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	69db      	ldr	r3, [r3, #28]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d003      	beq.n	8016b72 <netif_set_link_up+0x56>
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	69db      	ldr	r3, [r3, #28]
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8016b72:	3708      	adds	r7, #8
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bd80      	pop	{r7, pc}
 8016b78:	08024bcc 	.word	0x08024bcc
 8016b7c:	08024db4 	.word	0x08024db4
 8016b80:	08024c1c 	.word	0x08024c1c

08016b84 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b082      	sub	sp, #8
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d107      	bne.n	8016ba2 <netif_set_link_down+0x1e>
 8016b92:	4b11      	ldr	r3, [pc, #68]	; (8016bd8 <netif_set_link_down+0x54>)
 8016b94:	f240 4206 	movw	r2, #1030	; 0x406
 8016b98:	4910      	ldr	r1, [pc, #64]	; (8016bdc <netif_set_link_down+0x58>)
 8016b9a:	4811      	ldr	r0, [pc, #68]	; (8016be0 <netif_set_link_down+0x5c>)
 8016b9c:	f00b fe08 	bl	80227b0 <iprintf>
 8016ba0:	e017      	b.n	8016bd2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ba8:	f003 0304 	and.w	r3, r3, #4
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d010      	beq.n	8016bd2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016bb6:	f023 0304 	bic.w	r3, r3, #4
 8016bba:	b2da      	uxtb	r2, r3
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	69db      	ldr	r3, [r3, #28]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d003      	beq.n	8016bd2 <netif_set_link_down+0x4e>
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	69db      	ldr	r3, [r3, #28]
 8016bce:	6878      	ldr	r0, [r7, #4]
 8016bd0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8016bd2:	3708      	adds	r7, #8
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}
 8016bd8:	08024bcc 	.word	0x08024bcc
 8016bdc:	08024dd8 	.word	0x08024dd8
 8016be0:	08024c1c 	.word	0x08024c1c

08016be4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8016be4:	b480      	push	{r7}
 8016be6:	b083      	sub	sp, #12
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
 8016bec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d002      	beq.n	8016bfa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	683a      	ldr	r2, [r7, #0]
 8016bf8:	61da      	str	r2, [r3, #28]
  }
}
 8016bfa:	bf00      	nop
 8016bfc:	370c      	adds	r7, #12
 8016bfe:	46bd      	mov	sp, r7
 8016c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c04:	4770      	bx	lr

08016c06 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8016c06:	b480      	push	{r7}
 8016c08:	b085      	sub	sp, #20
 8016c0a:	af00      	add	r7, sp, #0
 8016c0c:	60f8      	str	r0, [r7, #12]
 8016c0e:	60b9      	str	r1, [r7, #8]
 8016c10:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8016c12:	f06f 030b 	mvn.w	r3, #11
}
 8016c16:	4618      	mov	r0, r3
 8016c18:	3714      	adds	r7, #20
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c20:	4770      	bx	lr
	...

08016c24 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8016c24:	b480      	push	{r7}
 8016c26:	b085      	sub	sp, #20
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8016c2e:	79fb      	ldrb	r3, [r7, #7]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d013      	beq.n	8016c5c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8016c34:	4b0d      	ldr	r3, [pc, #52]	; (8016c6c <netif_get_by_index+0x48>)
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	60fb      	str	r3, [r7, #12]
 8016c3a:	e00c      	b.n	8016c56 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c42:	3301      	adds	r3, #1
 8016c44:	b2db      	uxtb	r3, r3
 8016c46:	79fa      	ldrb	r2, [r7, #7]
 8016c48:	429a      	cmp	r2, r3
 8016c4a:	d101      	bne.n	8016c50 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	e006      	b.n	8016c5e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	60fb      	str	r3, [r7, #12]
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d1ef      	bne.n	8016c3c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8016c5c:	2300      	movs	r3, #0
}
 8016c5e:	4618      	mov	r0, r3
 8016c60:	3714      	adds	r7, #20
 8016c62:	46bd      	mov	sp, r7
 8016c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c68:	4770      	bx	lr
 8016c6a:	bf00      	nop
 8016c6c:	2000bfa8 	.word	0x2000bfa8

08016c70 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b082      	sub	sp, #8
 8016c74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8016c76:	f00a fb07 	bl	8021288 <sys_arch_protect>
 8016c7a:	6038      	str	r0, [r7, #0]
 8016c7c:	4b0d      	ldr	r3, [pc, #52]	; (8016cb4 <pbuf_free_ooseq+0x44>)
 8016c7e:	2200      	movs	r2, #0
 8016c80:	701a      	strb	r2, [r3, #0]
 8016c82:	6838      	ldr	r0, [r7, #0]
 8016c84:	f00a fb0e 	bl	80212a4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016c88:	4b0b      	ldr	r3, [pc, #44]	; (8016cb8 <pbuf_free_ooseq+0x48>)
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	607b      	str	r3, [r7, #4]
 8016c8e:	e00a      	b.n	8016ca6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d003      	beq.n	8016ca0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8016c98:	6878      	ldr	r0, [r7, #4]
 8016c9a:	f002 fd6b 	bl	8019774 <tcp_free_ooseq>
      return;
 8016c9e:	e005      	b.n	8016cac <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	68db      	ldr	r3, [r3, #12]
 8016ca4:	607b      	str	r3, [r7, #4]
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d1f1      	bne.n	8016c90 <pbuf_free_ooseq+0x20>
    }
  }
}
 8016cac:	3708      	adds	r7, #8
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}
 8016cb2:	bf00      	nop
 8016cb4:	2000bfb1 	.word	0x2000bfb1
 8016cb8:	2000bfc0 	.word	0x2000bfc0

08016cbc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b082      	sub	sp, #8
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8016cc4:	f7ff ffd4 	bl	8016c70 <pbuf_free_ooseq>
}
 8016cc8:	bf00      	nop
 8016cca:	3708      	adds	r7, #8
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bd80      	pop	{r7, pc}

08016cd0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b082      	sub	sp, #8
 8016cd4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8016cd6:	f00a fad7 	bl	8021288 <sys_arch_protect>
 8016cda:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8016cdc:	4b0f      	ldr	r3, [pc, #60]	; (8016d1c <pbuf_pool_is_empty+0x4c>)
 8016cde:	781b      	ldrb	r3, [r3, #0]
 8016ce0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8016ce2:	4b0e      	ldr	r3, [pc, #56]	; (8016d1c <pbuf_pool_is_empty+0x4c>)
 8016ce4:	2201      	movs	r2, #1
 8016ce6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8016ce8:	6878      	ldr	r0, [r7, #4]
 8016cea:	f00a fadb 	bl	80212a4 <sys_arch_unprotect>

  if (!queued) {
 8016cee:	78fb      	ldrb	r3, [r7, #3]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d10f      	bne.n	8016d14 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8016cf4:	2100      	movs	r1, #0
 8016cf6:	480a      	ldr	r0, [pc, #40]	; (8016d20 <pbuf_pool_is_empty+0x50>)
 8016cf8:	f7fe fe90 	bl	8015a1c <tcpip_try_callback>
 8016cfc:	4603      	mov	r3, r0
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d008      	beq.n	8016d14 <pbuf_pool_is_empty+0x44>
 8016d02:	f00a fac1 	bl	8021288 <sys_arch_protect>
 8016d06:	6078      	str	r0, [r7, #4]
 8016d08:	4b04      	ldr	r3, [pc, #16]	; (8016d1c <pbuf_pool_is_empty+0x4c>)
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	701a      	strb	r2, [r3, #0]
 8016d0e:	6878      	ldr	r0, [r7, #4]
 8016d10:	f00a fac8 	bl	80212a4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8016d14:	bf00      	nop
 8016d16:	3708      	adds	r7, #8
 8016d18:	46bd      	mov	sp, r7
 8016d1a:	bd80      	pop	{r7, pc}
 8016d1c:	2000bfb1 	.word	0x2000bfb1
 8016d20:	08016cbd 	.word	0x08016cbd

08016d24 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8016d24:	b480      	push	{r7}
 8016d26:	b085      	sub	sp, #20
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	60f8      	str	r0, [r7, #12]
 8016d2c:	60b9      	str	r1, [r7, #8]
 8016d2e:	4611      	mov	r1, r2
 8016d30:	461a      	mov	r2, r3
 8016d32:	460b      	mov	r3, r1
 8016d34:	80fb      	strh	r3, [r7, #6]
 8016d36:	4613      	mov	r3, r2
 8016d38:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	68ba      	ldr	r2, [r7, #8]
 8016d44:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	88fa      	ldrh	r2, [r7, #6]
 8016d4a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	88ba      	ldrh	r2, [r7, #4]
 8016d50:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8016d52:	8b3b      	ldrh	r3, [r7, #24]
 8016d54:	b2da      	uxtb	r2, r3
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	7f3a      	ldrb	r2, [r7, #28]
 8016d5e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	2201      	movs	r2, #1
 8016d64:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	2200      	movs	r2, #0
 8016d6a:	73da      	strb	r2, [r3, #15]
}
 8016d6c:	bf00      	nop
 8016d6e:	3714      	adds	r7, #20
 8016d70:	46bd      	mov	sp, r7
 8016d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d76:	4770      	bx	lr

08016d78 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b08c      	sub	sp, #48	; 0x30
 8016d7c:	af02      	add	r7, sp, #8
 8016d7e:	4603      	mov	r3, r0
 8016d80:	71fb      	strb	r3, [r7, #7]
 8016d82:	460b      	mov	r3, r1
 8016d84:	80bb      	strh	r3, [r7, #4]
 8016d86:	4613      	mov	r3, r2
 8016d88:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8016d8a:	79fb      	ldrb	r3, [r7, #7]
 8016d8c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8016d8e:	887b      	ldrh	r3, [r7, #2]
 8016d90:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8016d94:	d07f      	beq.n	8016e96 <pbuf_alloc+0x11e>
 8016d96:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8016d9a:	f300 80c8 	bgt.w	8016f2e <pbuf_alloc+0x1b6>
 8016d9e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8016da2:	d010      	beq.n	8016dc6 <pbuf_alloc+0x4e>
 8016da4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8016da8:	f300 80c1 	bgt.w	8016f2e <pbuf_alloc+0x1b6>
 8016dac:	2b01      	cmp	r3, #1
 8016dae:	d002      	beq.n	8016db6 <pbuf_alloc+0x3e>
 8016db0:	2b41      	cmp	r3, #65	; 0x41
 8016db2:	f040 80bc 	bne.w	8016f2e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8016db6:	887a      	ldrh	r2, [r7, #2]
 8016db8:	88bb      	ldrh	r3, [r7, #4]
 8016dba:	4619      	mov	r1, r3
 8016dbc:	2000      	movs	r0, #0
 8016dbe:	f000 f8d1 	bl	8016f64 <pbuf_alloc_reference>
 8016dc2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8016dc4:	e0bd      	b.n	8016f42 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8016dca:	2300      	movs	r3, #0
 8016dcc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8016dce:	88bb      	ldrh	r3, [r7, #4]
 8016dd0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8016dd2:	200c      	movs	r0, #12
 8016dd4:	f7ff fb9a 	bl	801650c <memp_malloc>
 8016dd8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8016dda:	693b      	ldr	r3, [r7, #16]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d109      	bne.n	8016df4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8016de0:	f7ff ff76 	bl	8016cd0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8016de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d002      	beq.n	8016df0 <pbuf_alloc+0x78>
            pbuf_free(p);
 8016dea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016dec:	f000 faa8 	bl	8017340 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8016df0:	2300      	movs	r3, #0
 8016df2:	e0a7      	b.n	8016f44 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016df4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016df6:	3303      	adds	r3, #3
 8016df8:	b29b      	uxth	r3, r3
 8016dfa:	f023 0303 	bic.w	r3, r3, #3
 8016dfe:	b29b      	uxth	r3, r3
 8016e00:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8016e04:	b29b      	uxth	r3, r3
 8016e06:	8b7a      	ldrh	r2, [r7, #26]
 8016e08:	4293      	cmp	r3, r2
 8016e0a:	bf28      	it	cs
 8016e0c:	4613      	movcs	r3, r2
 8016e0e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8016e10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e12:	3310      	adds	r3, #16
 8016e14:	693a      	ldr	r2, [r7, #16]
 8016e16:	4413      	add	r3, r2
 8016e18:	3303      	adds	r3, #3
 8016e1a:	f023 0303 	bic.w	r3, r3, #3
 8016e1e:	4618      	mov	r0, r3
 8016e20:	89f9      	ldrh	r1, [r7, #14]
 8016e22:	8b7a      	ldrh	r2, [r7, #26]
 8016e24:	2300      	movs	r3, #0
 8016e26:	9301      	str	r3, [sp, #4]
 8016e28:	887b      	ldrh	r3, [r7, #2]
 8016e2a:	9300      	str	r3, [sp, #0]
 8016e2c:	460b      	mov	r3, r1
 8016e2e:	4601      	mov	r1, r0
 8016e30:	6938      	ldr	r0, [r7, #16]
 8016e32:	f7ff ff77 	bl	8016d24 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8016e36:	693b      	ldr	r3, [r7, #16]
 8016e38:	685b      	ldr	r3, [r3, #4]
 8016e3a:	f003 0303 	and.w	r3, r3, #3
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d006      	beq.n	8016e50 <pbuf_alloc+0xd8>
 8016e42:	4b42      	ldr	r3, [pc, #264]	; (8016f4c <pbuf_alloc+0x1d4>)
 8016e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016e48:	4941      	ldr	r1, [pc, #260]	; (8016f50 <pbuf_alloc+0x1d8>)
 8016e4a:	4842      	ldr	r0, [pc, #264]	; (8016f54 <pbuf_alloc+0x1dc>)
 8016e4c:	f00b fcb0 	bl	80227b0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8016e50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e52:	3303      	adds	r3, #3
 8016e54:	f023 0303 	bic.w	r3, r3, #3
 8016e58:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8016e5c:	d106      	bne.n	8016e6c <pbuf_alloc+0xf4>
 8016e5e:	4b3b      	ldr	r3, [pc, #236]	; (8016f4c <pbuf_alloc+0x1d4>)
 8016e60:	f44f 7281 	mov.w	r2, #258	; 0x102
 8016e64:	493c      	ldr	r1, [pc, #240]	; (8016f58 <pbuf_alloc+0x1e0>)
 8016e66:	483b      	ldr	r0, [pc, #236]	; (8016f54 <pbuf_alloc+0x1dc>)
 8016e68:	f00b fca2 	bl	80227b0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8016e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d102      	bne.n	8016e78 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8016e72:	693b      	ldr	r3, [r7, #16]
 8016e74:	627b      	str	r3, [r7, #36]	; 0x24
 8016e76:	e002      	b.n	8016e7e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8016e78:	69fb      	ldr	r3, [r7, #28]
 8016e7a:	693a      	ldr	r2, [r7, #16]
 8016e7c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8016e7e:	693b      	ldr	r3, [r7, #16]
 8016e80:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8016e82:	8b7a      	ldrh	r2, [r7, #26]
 8016e84:	89fb      	ldrh	r3, [r7, #14]
 8016e86:	1ad3      	subs	r3, r2, r3
 8016e88:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8016e8e:	8b7b      	ldrh	r3, [r7, #26]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d19e      	bne.n	8016dd2 <pbuf_alloc+0x5a>
      break;
 8016e94:	e055      	b.n	8016f42 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8016e96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e98:	3303      	adds	r3, #3
 8016e9a:	b29b      	uxth	r3, r3
 8016e9c:	f023 0303 	bic.w	r3, r3, #3
 8016ea0:	b29a      	uxth	r2, r3
 8016ea2:	88bb      	ldrh	r3, [r7, #4]
 8016ea4:	3303      	adds	r3, #3
 8016ea6:	b29b      	uxth	r3, r3
 8016ea8:	f023 0303 	bic.w	r3, r3, #3
 8016eac:	b29b      	uxth	r3, r3
 8016eae:	4413      	add	r3, r2
 8016eb0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8016eb2:	8b3b      	ldrh	r3, [r7, #24]
 8016eb4:	3310      	adds	r3, #16
 8016eb6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016eb8:	8b3a      	ldrh	r2, [r7, #24]
 8016eba:	88bb      	ldrh	r3, [r7, #4]
 8016ebc:	3303      	adds	r3, #3
 8016ebe:	f023 0303 	bic.w	r3, r3, #3
 8016ec2:	429a      	cmp	r2, r3
 8016ec4:	d306      	bcc.n	8016ed4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8016ec6:	8afa      	ldrh	r2, [r7, #22]
 8016ec8:	88bb      	ldrh	r3, [r7, #4]
 8016eca:	3303      	adds	r3, #3
 8016ecc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016ed0:	429a      	cmp	r2, r3
 8016ed2:	d201      	bcs.n	8016ed8 <pbuf_alloc+0x160>
        return NULL;
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	e035      	b.n	8016f44 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8016ed8:	8afb      	ldrh	r3, [r7, #22]
 8016eda:	4618      	mov	r0, r3
 8016edc:	f7ff f972 	bl	80161c4 <mem_malloc>
 8016ee0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8016ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d101      	bne.n	8016eec <pbuf_alloc+0x174>
        return NULL;
 8016ee8:	2300      	movs	r3, #0
 8016eea:	e02b      	b.n	8016f44 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8016eec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016eee:	3310      	adds	r3, #16
 8016ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ef2:	4413      	add	r3, r2
 8016ef4:	3303      	adds	r3, #3
 8016ef6:	f023 0303 	bic.w	r3, r3, #3
 8016efa:	4618      	mov	r0, r3
 8016efc:	88b9      	ldrh	r1, [r7, #4]
 8016efe:	88ba      	ldrh	r2, [r7, #4]
 8016f00:	2300      	movs	r3, #0
 8016f02:	9301      	str	r3, [sp, #4]
 8016f04:	887b      	ldrh	r3, [r7, #2]
 8016f06:	9300      	str	r3, [sp, #0]
 8016f08:	460b      	mov	r3, r1
 8016f0a:	4601      	mov	r1, r0
 8016f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f0e:	f7ff ff09 	bl	8016d24 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8016f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f14:	685b      	ldr	r3, [r3, #4]
 8016f16:	f003 0303 	and.w	r3, r3, #3
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d010      	beq.n	8016f40 <pbuf_alloc+0x1c8>
 8016f1e:	4b0b      	ldr	r3, [pc, #44]	; (8016f4c <pbuf_alloc+0x1d4>)
 8016f20:	f44f 7291 	mov.w	r2, #290	; 0x122
 8016f24:	490d      	ldr	r1, [pc, #52]	; (8016f5c <pbuf_alloc+0x1e4>)
 8016f26:	480b      	ldr	r0, [pc, #44]	; (8016f54 <pbuf_alloc+0x1dc>)
 8016f28:	f00b fc42 	bl	80227b0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8016f2c:	e008      	b.n	8016f40 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8016f2e:	4b07      	ldr	r3, [pc, #28]	; (8016f4c <pbuf_alloc+0x1d4>)
 8016f30:	f240 1227 	movw	r2, #295	; 0x127
 8016f34:	490a      	ldr	r1, [pc, #40]	; (8016f60 <pbuf_alloc+0x1e8>)
 8016f36:	4807      	ldr	r0, [pc, #28]	; (8016f54 <pbuf_alloc+0x1dc>)
 8016f38:	f00b fc3a 	bl	80227b0 <iprintf>
      return NULL;
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	e001      	b.n	8016f44 <pbuf_alloc+0x1cc>
      break;
 8016f40:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8016f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016f44:	4618      	mov	r0, r3
 8016f46:	3728      	adds	r7, #40	; 0x28
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	bd80      	pop	{r7, pc}
 8016f4c:	08024dfc 	.word	0x08024dfc
 8016f50:	08024e2c 	.word	0x08024e2c
 8016f54:	08024e5c 	.word	0x08024e5c
 8016f58:	08024e84 	.word	0x08024e84
 8016f5c:	08024eb8 	.word	0x08024eb8
 8016f60:	08024ee4 	.word	0x08024ee4

08016f64 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b086      	sub	sp, #24
 8016f68:	af02      	add	r7, sp, #8
 8016f6a:	6078      	str	r0, [r7, #4]
 8016f6c:	460b      	mov	r3, r1
 8016f6e:	807b      	strh	r3, [r7, #2]
 8016f70:	4613      	mov	r3, r2
 8016f72:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8016f74:	883b      	ldrh	r3, [r7, #0]
 8016f76:	2b41      	cmp	r3, #65	; 0x41
 8016f78:	d009      	beq.n	8016f8e <pbuf_alloc_reference+0x2a>
 8016f7a:	883b      	ldrh	r3, [r7, #0]
 8016f7c:	2b01      	cmp	r3, #1
 8016f7e:	d006      	beq.n	8016f8e <pbuf_alloc_reference+0x2a>
 8016f80:	4b0f      	ldr	r3, [pc, #60]	; (8016fc0 <pbuf_alloc_reference+0x5c>)
 8016f82:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8016f86:	490f      	ldr	r1, [pc, #60]	; (8016fc4 <pbuf_alloc_reference+0x60>)
 8016f88:	480f      	ldr	r0, [pc, #60]	; (8016fc8 <pbuf_alloc_reference+0x64>)
 8016f8a:	f00b fc11 	bl	80227b0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8016f8e:	200b      	movs	r0, #11
 8016f90:	f7ff fabc 	bl	801650c <memp_malloc>
 8016f94:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d101      	bne.n	8016fa0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	e00b      	b.n	8016fb8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8016fa0:	8879      	ldrh	r1, [r7, #2]
 8016fa2:	887a      	ldrh	r2, [r7, #2]
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	9301      	str	r3, [sp, #4]
 8016fa8:	883b      	ldrh	r3, [r7, #0]
 8016faa:	9300      	str	r3, [sp, #0]
 8016fac:	460b      	mov	r3, r1
 8016fae:	6879      	ldr	r1, [r7, #4]
 8016fb0:	68f8      	ldr	r0, [r7, #12]
 8016fb2:	f7ff feb7 	bl	8016d24 <pbuf_init_alloced_pbuf>
  return p;
 8016fb6:	68fb      	ldr	r3, [r7, #12]
}
 8016fb8:	4618      	mov	r0, r3
 8016fba:	3710      	adds	r7, #16
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	bd80      	pop	{r7, pc}
 8016fc0:	08024dfc 	.word	0x08024dfc
 8016fc4:	08024f00 	.word	0x08024f00
 8016fc8:	08024e5c 	.word	0x08024e5c

08016fcc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b088      	sub	sp, #32
 8016fd0:	af02      	add	r7, sp, #8
 8016fd2:	607b      	str	r3, [r7, #4]
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	73fb      	strb	r3, [r7, #15]
 8016fd8:	460b      	mov	r3, r1
 8016fda:	81bb      	strh	r3, [r7, #12]
 8016fdc:	4613      	mov	r3, r2
 8016fde:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8016fe0:	7bfb      	ldrb	r3, [r7, #15]
 8016fe2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016fe4:	8a7b      	ldrh	r3, [r7, #18]
 8016fe6:	3303      	adds	r3, #3
 8016fe8:	f023 0203 	bic.w	r2, r3, #3
 8016fec:	89bb      	ldrh	r3, [r7, #12]
 8016fee:	441a      	add	r2, r3
 8016ff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016ff2:	429a      	cmp	r2, r3
 8016ff4:	d901      	bls.n	8016ffa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	e018      	b.n	801702c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8016ffa:	6a3b      	ldr	r3, [r7, #32]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d007      	beq.n	8017010 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8017000:	8a7b      	ldrh	r3, [r7, #18]
 8017002:	3303      	adds	r3, #3
 8017004:	f023 0303 	bic.w	r3, r3, #3
 8017008:	6a3a      	ldr	r2, [r7, #32]
 801700a:	4413      	add	r3, r2
 801700c:	617b      	str	r3, [r7, #20]
 801700e:	e001      	b.n	8017014 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8017010:	2300      	movs	r3, #0
 8017012:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8017014:	6878      	ldr	r0, [r7, #4]
 8017016:	89b9      	ldrh	r1, [r7, #12]
 8017018:	89ba      	ldrh	r2, [r7, #12]
 801701a:	2302      	movs	r3, #2
 801701c:	9301      	str	r3, [sp, #4]
 801701e:	897b      	ldrh	r3, [r7, #10]
 8017020:	9300      	str	r3, [sp, #0]
 8017022:	460b      	mov	r3, r1
 8017024:	6979      	ldr	r1, [r7, #20]
 8017026:	f7ff fe7d 	bl	8016d24 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801702a:	687b      	ldr	r3, [r7, #4]
}
 801702c:	4618      	mov	r0, r3
 801702e:	3718      	adds	r7, #24
 8017030:	46bd      	mov	sp, r7
 8017032:	bd80      	pop	{r7, pc}

08017034 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8017034:	b580      	push	{r7, lr}
 8017036:	b084      	sub	sp, #16
 8017038:	af00      	add	r7, sp, #0
 801703a:	6078      	str	r0, [r7, #4]
 801703c:	460b      	mov	r3, r1
 801703e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d106      	bne.n	8017054 <pbuf_realloc+0x20>
 8017046:	4b3a      	ldr	r3, [pc, #232]	; (8017130 <pbuf_realloc+0xfc>)
 8017048:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801704c:	4939      	ldr	r1, [pc, #228]	; (8017134 <pbuf_realloc+0x100>)
 801704e:	483a      	ldr	r0, [pc, #232]	; (8017138 <pbuf_realloc+0x104>)
 8017050:	f00b fbae 	bl	80227b0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	891b      	ldrh	r3, [r3, #8]
 8017058:	887a      	ldrh	r2, [r7, #2]
 801705a:	429a      	cmp	r2, r3
 801705c:	d263      	bcs.n	8017126 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	891a      	ldrh	r2, [r3, #8]
 8017062:	887b      	ldrh	r3, [r7, #2]
 8017064:	1ad3      	subs	r3, r2, r3
 8017066:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8017068:	887b      	ldrh	r3, [r7, #2]
 801706a:	817b      	strh	r3, [r7, #10]
  q = p;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8017070:	e018      	b.n	80170a4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	895b      	ldrh	r3, [r3, #10]
 8017076:	897a      	ldrh	r2, [r7, #10]
 8017078:	1ad3      	subs	r3, r2, r3
 801707a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	891a      	ldrh	r2, [r3, #8]
 8017080:	893b      	ldrh	r3, [r7, #8]
 8017082:	1ad3      	subs	r3, r2, r3
 8017084:	b29a      	uxth	r2, r3
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d106      	bne.n	80170a4 <pbuf_realloc+0x70>
 8017096:	4b26      	ldr	r3, [pc, #152]	; (8017130 <pbuf_realloc+0xfc>)
 8017098:	f240 12af 	movw	r2, #431	; 0x1af
 801709c:	4927      	ldr	r1, [pc, #156]	; (801713c <pbuf_realloc+0x108>)
 801709e:	4826      	ldr	r0, [pc, #152]	; (8017138 <pbuf_realloc+0x104>)
 80170a0:	f00b fb86 	bl	80227b0 <iprintf>
  while (rem_len > q->len) {
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	895b      	ldrh	r3, [r3, #10]
 80170a8:	897a      	ldrh	r2, [r7, #10]
 80170aa:	429a      	cmp	r2, r3
 80170ac:	d8e1      	bhi.n	8017072 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	7b1b      	ldrb	r3, [r3, #12]
 80170b2:	f003 030f 	and.w	r3, r3, #15
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d121      	bne.n	80170fe <pbuf_realloc+0xca>
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	895b      	ldrh	r3, [r3, #10]
 80170be:	897a      	ldrh	r2, [r7, #10]
 80170c0:	429a      	cmp	r2, r3
 80170c2:	d01c      	beq.n	80170fe <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	7b5b      	ldrb	r3, [r3, #13]
 80170c8:	f003 0302 	and.w	r3, r3, #2
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d116      	bne.n	80170fe <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	685a      	ldr	r2, [r3, #4]
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	1ad3      	subs	r3, r2, r3
 80170d8:	b29a      	uxth	r2, r3
 80170da:	897b      	ldrh	r3, [r7, #10]
 80170dc:	4413      	add	r3, r2
 80170de:	b29b      	uxth	r3, r3
 80170e0:	4619      	mov	r1, r3
 80170e2:	68f8      	ldr	r0, [r7, #12]
 80170e4:	f7fe ff64 	bl	8015fb0 <mem_trim>
 80170e8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d106      	bne.n	80170fe <pbuf_realloc+0xca>
 80170f0:	4b0f      	ldr	r3, [pc, #60]	; (8017130 <pbuf_realloc+0xfc>)
 80170f2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80170f6:	4912      	ldr	r1, [pc, #72]	; (8017140 <pbuf_realloc+0x10c>)
 80170f8:	480f      	ldr	r0, [pc, #60]	; (8017138 <pbuf_realloc+0x104>)
 80170fa:	f00b fb59 	bl	80227b0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	897a      	ldrh	r2, [r7, #10]
 8017102:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	895a      	ldrh	r2, [r3, #10]
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d004      	beq.n	801711e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	4618      	mov	r0, r3
 801711a:	f000 f911 	bl	8017340 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	2200      	movs	r2, #0
 8017122:	601a      	str	r2, [r3, #0]
 8017124:	e000      	b.n	8017128 <pbuf_realloc+0xf4>
    return;
 8017126:	bf00      	nop

}
 8017128:	3710      	adds	r7, #16
 801712a:	46bd      	mov	sp, r7
 801712c:	bd80      	pop	{r7, pc}
 801712e:	bf00      	nop
 8017130:	08024dfc 	.word	0x08024dfc
 8017134:	08024f14 	.word	0x08024f14
 8017138:	08024e5c 	.word	0x08024e5c
 801713c:	08024f2c 	.word	0x08024f2c
 8017140:	08024f44 	.word	0x08024f44

08017144 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b086      	sub	sp, #24
 8017148:	af00      	add	r7, sp, #0
 801714a:	60f8      	str	r0, [r7, #12]
 801714c:	60b9      	str	r1, [r7, #8]
 801714e:	4613      	mov	r3, r2
 8017150:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d106      	bne.n	8017166 <pbuf_add_header_impl+0x22>
 8017158:	4b2b      	ldr	r3, [pc, #172]	; (8017208 <pbuf_add_header_impl+0xc4>)
 801715a:	f240 12df 	movw	r2, #479	; 0x1df
 801715e:	492b      	ldr	r1, [pc, #172]	; (801720c <pbuf_add_header_impl+0xc8>)
 8017160:	482b      	ldr	r0, [pc, #172]	; (8017210 <pbuf_add_header_impl+0xcc>)
 8017162:	f00b fb25 	bl	80227b0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d003      	beq.n	8017174 <pbuf_add_header_impl+0x30>
 801716c:	68bb      	ldr	r3, [r7, #8]
 801716e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017172:	d301      	bcc.n	8017178 <pbuf_add_header_impl+0x34>
    return 1;
 8017174:	2301      	movs	r3, #1
 8017176:	e043      	b.n	8017200 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d101      	bne.n	8017182 <pbuf_add_header_impl+0x3e>
    return 0;
 801717e:	2300      	movs	r3, #0
 8017180:	e03e      	b.n	8017200 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8017182:	68bb      	ldr	r3, [r7, #8]
 8017184:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	891a      	ldrh	r2, [r3, #8]
 801718a:	8a7b      	ldrh	r3, [r7, #18]
 801718c:	4413      	add	r3, r2
 801718e:	b29b      	uxth	r3, r3
 8017190:	8a7a      	ldrh	r2, [r7, #18]
 8017192:	429a      	cmp	r2, r3
 8017194:	d901      	bls.n	801719a <pbuf_add_header_impl+0x56>
    return 1;
 8017196:	2301      	movs	r3, #1
 8017198:	e032      	b.n	8017200 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	7b1b      	ldrb	r3, [r3, #12]
 801719e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80171a0:	8a3b      	ldrh	r3, [r7, #16]
 80171a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d00c      	beq.n	80171c4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	685a      	ldr	r2, [r3, #4]
 80171ae:	68bb      	ldr	r3, [r7, #8]
 80171b0:	425b      	negs	r3, r3
 80171b2:	4413      	add	r3, r2
 80171b4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	3310      	adds	r3, #16
 80171ba:	697a      	ldr	r2, [r7, #20]
 80171bc:	429a      	cmp	r2, r3
 80171be:	d20d      	bcs.n	80171dc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80171c0:	2301      	movs	r3, #1
 80171c2:	e01d      	b.n	8017200 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80171c4:	79fb      	ldrb	r3, [r7, #7]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d006      	beq.n	80171d8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	685a      	ldr	r2, [r3, #4]
 80171ce:	68bb      	ldr	r3, [r7, #8]
 80171d0:	425b      	negs	r3, r3
 80171d2:	4413      	add	r3, r2
 80171d4:	617b      	str	r3, [r7, #20]
 80171d6:	e001      	b.n	80171dc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80171d8:	2301      	movs	r3, #1
 80171da:	e011      	b.n	8017200 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	697a      	ldr	r2, [r7, #20]
 80171e0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	895a      	ldrh	r2, [r3, #10]
 80171e6:	8a7b      	ldrh	r3, [r7, #18]
 80171e8:	4413      	add	r3, r2
 80171ea:	b29a      	uxth	r2, r3
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	891a      	ldrh	r2, [r3, #8]
 80171f4:	8a7b      	ldrh	r3, [r7, #18]
 80171f6:	4413      	add	r3, r2
 80171f8:	b29a      	uxth	r2, r3
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	811a      	strh	r2, [r3, #8]


  return 0;
 80171fe:	2300      	movs	r3, #0
}
 8017200:	4618      	mov	r0, r3
 8017202:	3718      	adds	r7, #24
 8017204:	46bd      	mov	sp, r7
 8017206:	bd80      	pop	{r7, pc}
 8017208:	08024dfc 	.word	0x08024dfc
 801720c:	08024f60 	.word	0x08024f60
 8017210:	08024e5c 	.word	0x08024e5c

08017214 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8017214:	b580      	push	{r7, lr}
 8017216:	b082      	sub	sp, #8
 8017218:	af00      	add	r7, sp, #0
 801721a:	6078      	str	r0, [r7, #4]
 801721c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801721e:	2200      	movs	r2, #0
 8017220:	6839      	ldr	r1, [r7, #0]
 8017222:	6878      	ldr	r0, [r7, #4]
 8017224:	f7ff ff8e 	bl	8017144 <pbuf_add_header_impl>
 8017228:	4603      	mov	r3, r0
}
 801722a:	4618      	mov	r0, r3
 801722c:	3708      	adds	r7, #8
 801722e:	46bd      	mov	sp, r7
 8017230:	bd80      	pop	{r7, pc}
	...

08017234 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8017234:	b580      	push	{r7, lr}
 8017236:	b084      	sub	sp, #16
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
 801723c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d106      	bne.n	8017252 <pbuf_remove_header+0x1e>
 8017244:	4b20      	ldr	r3, [pc, #128]	; (80172c8 <pbuf_remove_header+0x94>)
 8017246:	f240 224b 	movw	r2, #587	; 0x24b
 801724a:	4920      	ldr	r1, [pc, #128]	; (80172cc <pbuf_remove_header+0x98>)
 801724c:	4820      	ldr	r0, [pc, #128]	; (80172d0 <pbuf_remove_header+0x9c>)
 801724e:	f00b faaf 	bl	80227b0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d003      	beq.n	8017260 <pbuf_remove_header+0x2c>
 8017258:	683b      	ldr	r3, [r7, #0]
 801725a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801725e:	d301      	bcc.n	8017264 <pbuf_remove_header+0x30>
    return 1;
 8017260:	2301      	movs	r3, #1
 8017262:	e02c      	b.n	80172be <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8017264:	683b      	ldr	r3, [r7, #0]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d101      	bne.n	801726e <pbuf_remove_header+0x3a>
    return 0;
 801726a:	2300      	movs	r3, #0
 801726c:	e027      	b.n	80172be <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801726e:	683b      	ldr	r3, [r7, #0]
 8017270:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	895b      	ldrh	r3, [r3, #10]
 8017276:	89fa      	ldrh	r2, [r7, #14]
 8017278:	429a      	cmp	r2, r3
 801727a:	d908      	bls.n	801728e <pbuf_remove_header+0x5a>
 801727c:	4b12      	ldr	r3, [pc, #72]	; (80172c8 <pbuf_remove_header+0x94>)
 801727e:	f240 2255 	movw	r2, #597	; 0x255
 8017282:	4914      	ldr	r1, [pc, #80]	; (80172d4 <pbuf_remove_header+0xa0>)
 8017284:	4812      	ldr	r0, [pc, #72]	; (80172d0 <pbuf_remove_header+0x9c>)
 8017286:	f00b fa93 	bl	80227b0 <iprintf>
 801728a:	2301      	movs	r3, #1
 801728c:	e017      	b.n	80172be <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	685b      	ldr	r3, [r3, #4]
 8017292:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	685a      	ldr	r2, [r3, #4]
 8017298:	683b      	ldr	r3, [r7, #0]
 801729a:	441a      	add	r2, r3
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	895a      	ldrh	r2, [r3, #10]
 80172a4:	89fb      	ldrh	r3, [r7, #14]
 80172a6:	1ad3      	subs	r3, r2, r3
 80172a8:	b29a      	uxth	r2, r3
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	891a      	ldrh	r2, [r3, #8]
 80172b2:	89fb      	ldrh	r3, [r7, #14]
 80172b4:	1ad3      	subs	r3, r2, r3
 80172b6:	b29a      	uxth	r2, r3
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80172bc:	2300      	movs	r3, #0
}
 80172be:	4618      	mov	r0, r3
 80172c0:	3710      	adds	r7, #16
 80172c2:	46bd      	mov	sp, r7
 80172c4:	bd80      	pop	{r7, pc}
 80172c6:	bf00      	nop
 80172c8:	08024dfc 	.word	0x08024dfc
 80172cc:	08024f60 	.word	0x08024f60
 80172d0:	08024e5c 	.word	0x08024e5c
 80172d4:	08024f6c 	.word	0x08024f6c

080172d8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b082      	sub	sp, #8
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]
 80172e0:	460b      	mov	r3, r1
 80172e2:	807b      	strh	r3, [r7, #2]
 80172e4:	4613      	mov	r3, r2
 80172e6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80172e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	da08      	bge.n	8017302 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80172f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80172f4:	425b      	negs	r3, r3
 80172f6:	4619      	mov	r1, r3
 80172f8:	6878      	ldr	r0, [r7, #4]
 80172fa:	f7ff ff9b 	bl	8017234 <pbuf_remove_header>
 80172fe:	4603      	mov	r3, r0
 8017300:	e007      	b.n	8017312 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8017302:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017306:	787a      	ldrb	r2, [r7, #1]
 8017308:	4619      	mov	r1, r3
 801730a:	6878      	ldr	r0, [r7, #4]
 801730c:	f7ff ff1a 	bl	8017144 <pbuf_add_header_impl>
 8017310:	4603      	mov	r3, r0
  }
}
 8017312:	4618      	mov	r0, r3
 8017314:	3708      	adds	r7, #8
 8017316:	46bd      	mov	sp, r7
 8017318:	bd80      	pop	{r7, pc}

0801731a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801731a:	b580      	push	{r7, lr}
 801731c:	b082      	sub	sp, #8
 801731e:	af00      	add	r7, sp, #0
 8017320:	6078      	str	r0, [r7, #4]
 8017322:	460b      	mov	r3, r1
 8017324:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8017326:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801732a:	2201      	movs	r2, #1
 801732c:	4619      	mov	r1, r3
 801732e:	6878      	ldr	r0, [r7, #4]
 8017330:	f7ff ffd2 	bl	80172d8 <pbuf_header_impl>
 8017334:	4603      	mov	r3, r0
}
 8017336:	4618      	mov	r0, r3
 8017338:	3708      	adds	r7, #8
 801733a:	46bd      	mov	sp, r7
 801733c:	bd80      	pop	{r7, pc}
	...

08017340 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b088      	sub	sp, #32
 8017344:	af00      	add	r7, sp, #0
 8017346:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d10b      	bne.n	8017366 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d106      	bne.n	8017362 <pbuf_free+0x22>
 8017354:	4b3b      	ldr	r3, [pc, #236]	; (8017444 <pbuf_free+0x104>)
 8017356:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801735a:	493b      	ldr	r1, [pc, #236]	; (8017448 <pbuf_free+0x108>)
 801735c:	483b      	ldr	r0, [pc, #236]	; (801744c <pbuf_free+0x10c>)
 801735e:	f00b fa27 	bl	80227b0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8017362:	2300      	movs	r3, #0
 8017364:	e069      	b.n	801743a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8017366:	2300      	movs	r3, #0
 8017368:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801736a:	e062      	b.n	8017432 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801736c:	f009 ff8c 	bl	8021288 <sys_arch_protect>
 8017370:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	7b9b      	ldrb	r3, [r3, #14]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d106      	bne.n	8017388 <pbuf_free+0x48>
 801737a:	4b32      	ldr	r3, [pc, #200]	; (8017444 <pbuf_free+0x104>)
 801737c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8017380:	4933      	ldr	r1, [pc, #204]	; (8017450 <pbuf_free+0x110>)
 8017382:	4832      	ldr	r0, [pc, #200]	; (801744c <pbuf_free+0x10c>)
 8017384:	f00b fa14 	bl	80227b0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	7b9b      	ldrb	r3, [r3, #14]
 801738c:	3b01      	subs	r3, #1
 801738e:	b2da      	uxtb	r2, r3
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	739a      	strb	r2, [r3, #14]
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	7b9b      	ldrb	r3, [r3, #14]
 8017398:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801739a:	69b8      	ldr	r0, [r7, #24]
 801739c:	f009 ff82 	bl	80212a4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80173a0:	7dfb      	ldrb	r3, [r7, #23]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d143      	bne.n	801742e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	7b1b      	ldrb	r3, [r3, #12]
 80173b0:	f003 030f 	and.w	r3, r3, #15
 80173b4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	7b5b      	ldrb	r3, [r3, #13]
 80173ba:	f003 0302 	and.w	r3, r3, #2
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d011      	beq.n	80173e6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80173c6:	68bb      	ldr	r3, [r7, #8]
 80173c8:	691b      	ldr	r3, [r3, #16]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d106      	bne.n	80173dc <pbuf_free+0x9c>
 80173ce:	4b1d      	ldr	r3, [pc, #116]	; (8017444 <pbuf_free+0x104>)
 80173d0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80173d4:	491f      	ldr	r1, [pc, #124]	; (8017454 <pbuf_free+0x114>)
 80173d6:	481d      	ldr	r0, [pc, #116]	; (801744c <pbuf_free+0x10c>)
 80173d8:	f00b f9ea 	bl	80227b0 <iprintf>
        pc->custom_free_function(p);
 80173dc:	68bb      	ldr	r3, [r7, #8]
 80173de:	691b      	ldr	r3, [r3, #16]
 80173e0:	6878      	ldr	r0, [r7, #4]
 80173e2:	4798      	blx	r3
 80173e4:	e01d      	b.n	8017422 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80173e6:	7bfb      	ldrb	r3, [r7, #15]
 80173e8:	2b02      	cmp	r3, #2
 80173ea:	d104      	bne.n	80173f6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80173ec:	6879      	ldr	r1, [r7, #4]
 80173ee:	200c      	movs	r0, #12
 80173f0:	f7ff f902 	bl	80165f8 <memp_free>
 80173f4:	e015      	b.n	8017422 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80173f6:	7bfb      	ldrb	r3, [r7, #15]
 80173f8:	2b01      	cmp	r3, #1
 80173fa:	d104      	bne.n	8017406 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80173fc:	6879      	ldr	r1, [r7, #4]
 80173fe:	200b      	movs	r0, #11
 8017400:	f7ff f8fa 	bl	80165f8 <memp_free>
 8017404:	e00d      	b.n	8017422 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8017406:	7bfb      	ldrb	r3, [r7, #15]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d103      	bne.n	8017414 <pbuf_free+0xd4>
          mem_free(p);
 801740c:	6878      	ldr	r0, [r7, #4]
 801740e:	f7fe fd3f 	bl	8015e90 <mem_free>
 8017412:	e006      	b.n	8017422 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8017414:	4b0b      	ldr	r3, [pc, #44]	; (8017444 <pbuf_free+0x104>)
 8017416:	f240 320f 	movw	r2, #783	; 0x30f
 801741a:	490f      	ldr	r1, [pc, #60]	; (8017458 <pbuf_free+0x118>)
 801741c:	480b      	ldr	r0, [pc, #44]	; (801744c <pbuf_free+0x10c>)
 801741e:	f00b f9c7 	bl	80227b0 <iprintf>
        }
      }
      count++;
 8017422:	7ffb      	ldrb	r3, [r7, #31]
 8017424:	3301      	adds	r3, #1
 8017426:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8017428:	693b      	ldr	r3, [r7, #16]
 801742a:	607b      	str	r3, [r7, #4]
 801742c:	e001      	b.n	8017432 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801742e:	2300      	movs	r3, #0
 8017430:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	2b00      	cmp	r3, #0
 8017436:	d199      	bne.n	801736c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8017438:	7ffb      	ldrb	r3, [r7, #31]
}
 801743a:	4618      	mov	r0, r3
 801743c:	3720      	adds	r7, #32
 801743e:	46bd      	mov	sp, r7
 8017440:	bd80      	pop	{r7, pc}
 8017442:	bf00      	nop
 8017444:	08024dfc 	.word	0x08024dfc
 8017448:	08024f60 	.word	0x08024f60
 801744c:	08024e5c 	.word	0x08024e5c
 8017450:	08024f8c 	.word	0x08024f8c
 8017454:	08024fa4 	.word	0x08024fa4
 8017458:	08024fc8 	.word	0x08024fc8

0801745c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801745c:	b480      	push	{r7}
 801745e:	b085      	sub	sp, #20
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8017464:	2300      	movs	r3, #0
 8017466:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8017468:	e005      	b.n	8017476 <pbuf_clen+0x1a>
    ++len;
 801746a:	89fb      	ldrh	r3, [r7, #14]
 801746c:	3301      	adds	r3, #1
 801746e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d1f6      	bne.n	801746a <pbuf_clen+0xe>
  }
  return len;
 801747c:	89fb      	ldrh	r3, [r7, #14]
}
 801747e:	4618      	mov	r0, r3
 8017480:	3714      	adds	r7, #20
 8017482:	46bd      	mov	sp, r7
 8017484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017488:	4770      	bx	lr
	...

0801748c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b084      	sub	sp, #16
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d016      	beq.n	80174c8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801749a:	f009 fef5 	bl	8021288 <sys_arch_protect>
 801749e:	60f8      	str	r0, [r7, #12]
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	7b9b      	ldrb	r3, [r3, #14]
 80174a4:	3301      	adds	r3, #1
 80174a6:	b2da      	uxtb	r2, r3
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	739a      	strb	r2, [r3, #14]
 80174ac:	68f8      	ldr	r0, [r7, #12]
 80174ae:	f009 fef9 	bl	80212a4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	7b9b      	ldrb	r3, [r3, #14]
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d106      	bne.n	80174c8 <pbuf_ref+0x3c>
 80174ba:	4b05      	ldr	r3, [pc, #20]	; (80174d0 <pbuf_ref+0x44>)
 80174bc:	f240 3242 	movw	r2, #834	; 0x342
 80174c0:	4904      	ldr	r1, [pc, #16]	; (80174d4 <pbuf_ref+0x48>)
 80174c2:	4805      	ldr	r0, [pc, #20]	; (80174d8 <pbuf_ref+0x4c>)
 80174c4:	f00b f974 	bl	80227b0 <iprintf>
  }
}
 80174c8:	bf00      	nop
 80174ca:	3710      	adds	r7, #16
 80174cc:	46bd      	mov	sp, r7
 80174ce:	bd80      	pop	{r7, pc}
 80174d0:	08024dfc 	.word	0x08024dfc
 80174d4:	08024fdc 	.word	0x08024fdc
 80174d8:	08024e5c 	.word	0x08024e5c

080174dc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	b084      	sub	sp, #16
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	6078      	str	r0, [r7, #4]
 80174e4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d002      	beq.n	80174f2 <pbuf_cat+0x16>
 80174ec:	683b      	ldr	r3, [r7, #0]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d107      	bne.n	8017502 <pbuf_cat+0x26>
 80174f2:	4b20      	ldr	r3, [pc, #128]	; (8017574 <pbuf_cat+0x98>)
 80174f4:	f240 3259 	movw	r2, #857	; 0x359
 80174f8:	491f      	ldr	r1, [pc, #124]	; (8017578 <pbuf_cat+0x9c>)
 80174fa:	4820      	ldr	r0, [pc, #128]	; (801757c <pbuf_cat+0xa0>)
 80174fc:	f00b f958 	bl	80227b0 <iprintf>
 8017500:	e034      	b.n	801756c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	60fb      	str	r3, [r7, #12]
 8017506:	e00a      	b.n	801751e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	891a      	ldrh	r2, [r3, #8]
 801750c:	683b      	ldr	r3, [r7, #0]
 801750e:	891b      	ldrh	r3, [r3, #8]
 8017510:	4413      	add	r3, r2
 8017512:	b29a      	uxth	r2, r3
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	60fb      	str	r3, [r7, #12]
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d1f0      	bne.n	8017508 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	891a      	ldrh	r2, [r3, #8]
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	895b      	ldrh	r3, [r3, #10]
 801752e:	429a      	cmp	r2, r3
 8017530:	d006      	beq.n	8017540 <pbuf_cat+0x64>
 8017532:	4b10      	ldr	r3, [pc, #64]	; (8017574 <pbuf_cat+0x98>)
 8017534:	f240 3262 	movw	r2, #866	; 0x362
 8017538:	4911      	ldr	r1, [pc, #68]	; (8017580 <pbuf_cat+0xa4>)
 801753a:	4810      	ldr	r0, [pc, #64]	; (801757c <pbuf_cat+0xa0>)
 801753c:	f00b f938 	bl	80227b0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d006      	beq.n	8017556 <pbuf_cat+0x7a>
 8017548:	4b0a      	ldr	r3, [pc, #40]	; (8017574 <pbuf_cat+0x98>)
 801754a:	f240 3263 	movw	r2, #867	; 0x363
 801754e:	490d      	ldr	r1, [pc, #52]	; (8017584 <pbuf_cat+0xa8>)
 8017550:	480a      	ldr	r0, [pc, #40]	; (801757c <pbuf_cat+0xa0>)
 8017552:	f00b f92d 	bl	80227b0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	891a      	ldrh	r2, [r3, #8]
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	891b      	ldrh	r3, [r3, #8]
 801755e:	4413      	add	r3, r2
 8017560:	b29a      	uxth	r2, r3
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	683a      	ldr	r2, [r7, #0]
 801756a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801756c:	3710      	adds	r7, #16
 801756e:	46bd      	mov	sp, r7
 8017570:	bd80      	pop	{r7, pc}
 8017572:	bf00      	nop
 8017574:	08024dfc 	.word	0x08024dfc
 8017578:	08024ff0 	.word	0x08024ff0
 801757c:	08024e5c 	.word	0x08024e5c
 8017580:	08025028 	.word	0x08025028
 8017584:	08025058 	.word	0x08025058

08017588 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b082      	sub	sp, #8
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
 8017590:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8017592:	6839      	ldr	r1, [r7, #0]
 8017594:	6878      	ldr	r0, [r7, #4]
 8017596:	f7ff ffa1 	bl	80174dc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801759a:	6838      	ldr	r0, [r7, #0]
 801759c:	f7ff ff76 	bl	801748c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80175a0:	bf00      	nop
 80175a2:	3708      	adds	r7, #8
 80175a4:	46bd      	mov	sp, r7
 80175a6:	bd80      	pop	{r7, pc}

080175a8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b086      	sub	sp, #24
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	6078      	str	r0, [r7, #4]
 80175b0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80175b2:	2300      	movs	r3, #0
 80175b4:	617b      	str	r3, [r7, #20]
 80175b6:	2300      	movs	r3, #0
 80175b8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d008      	beq.n	80175d2 <pbuf_copy+0x2a>
 80175c0:	683b      	ldr	r3, [r7, #0]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d005      	beq.n	80175d2 <pbuf_copy+0x2a>
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	891a      	ldrh	r2, [r3, #8]
 80175ca:	683b      	ldr	r3, [r7, #0]
 80175cc:	891b      	ldrh	r3, [r3, #8]
 80175ce:	429a      	cmp	r2, r3
 80175d0:	d209      	bcs.n	80175e6 <pbuf_copy+0x3e>
 80175d2:	4b57      	ldr	r3, [pc, #348]	; (8017730 <pbuf_copy+0x188>)
 80175d4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80175d8:	4956      	ldr	r1, [pc, #344]	; (8017734 <pbuf_copy+0x18c>)
 80175da:	4857      	ldr	r0, [pc, #348]	; (8017738 <pbuf_copy+0x190>)
 80175dc:	f00b f8e8 	bl	80227b0 <iprintf>
 80175e0:	f06f 030f 	mvn.w	r3, #15
 80175e4:	e09f      	b.n	8017726 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	895b      	ldrh	r3, [r3, #10]
 80175ea:	461a      	mov	r2, r3
 80175ec:	697b      	ldr	r3, [r7, #20]
 80175ee:	1ad2      	subs	r2, r2, r3
 80175f0:	683b      	ldr	r3, [r7, #0]
 80175f2:	895b      	ldrh	r3, [r3, #10]
 80175f4:	4619      	mov	r1, r3
 80175f6:	693b      	ldr	r3, [r7, #16]
 80175f8:	1acb      	subs	r3, r1, r3
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d306      	bcc.n	801760c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80175fe:	683b      	ldr	r3, [r7, #0]
 8017600:	895b      	ldrh	r3, [r3, #10]
 8017602:	461a      	mov	r2, r3
 8017604:	693b      	ldr	r3, [r7, #16]
 8017606:	1ad3      	subs	r3, r2, r3
 8017608:	60fb      	str	r3, [r7, #12]
 801760a:	e005      	b.n	8017618 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	895b      	ldrh	r3, [r3, #10]
 8017610:	461a      	mov	r2, r3
 8017612:	697b      	ldr	r3, [r7, #20]
 8017614:	1ad3      	subs	r3, r2, r3
 8017616:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	685a      	ldr	r2, [r3, #4]
 801761c:	697b      	ldr	r3, [r7, #20]
 801761e:	18d0      	adds	r0, r2, r3
 8017620:	683b      	ldr	r3, [r7, #0]
 8017622:	685a      	ldr	r2, [r3, #4]
 8017624:	693b      	ldr	r3, [r7, #16]
 8017626:	4413      	add	r3, r2
 8017628:	68fa      	ldr	r2, [r7, #12]
 801762a:	4619      	mov	r1, r3
 801762c:	f00a ffb0 	bl	8022590 <memcpy>
    offset_to += len;
 8017630:	697a      	ldr	r2, [r7, #20]
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	4413      	add	r3, r2
 8017636:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8017638:	693a      	ldr	r2, [r7, #16]
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	4413      	add	r3, r2
 801763e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	895b      	ldrh	r3, [r3, #10]
 8017644:	461a      	mov	r2, r3
 8017646:	697b      	ldr	r3, [r7, #20]
 8017648:	4293      	cmp	r3, r2
 801764a:	d906      	bls.n	801765a <pbuf_copy+0xb2>
 801764c:	4b38      	ldr	r3, [pc, #224]	; (8017730 <pbuf_copy+0x188>)
 801764e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8017652:	493a      	ldr	r1, [pc, #232]	; (801773c <pbuf_copy+0x194>)
 8017654:	4838      	ldr	r0, [pc, #224]	; (8017738 <pbuf_copy+0x190>)
 8017656:	f00b f8ab 	bl	80227b0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801765a:	683b      	ldr	r3, [r7, #0]
 801765c:	895b      	ldrh	r3, [r3, #10]
 801765e:	461a      	mov	r2, r3
 8017660:	693b      	ldr	r3, [r7, #16]
 8017662:	4293      	cmp	r3, r2
 8017664:	d906      	bls.n	8017674 <pbuf_copy+0xcc>
 8017666:	4b32      	ldr	r3, [pc, #200]	; (8017730 <pbuf_copy+0x188>)
 8017668:	f240 32da 	movw	r2, #986	; 0x3da
 801766c:	4934      	ldr	r1, [pc, #208]	; (8017740 <pbuf_copy+0x198>)
 801766e:	4832      	ldr	r0, [pc, #200]	; (8017738 <pbuf_copy+0x190>)
 8017670:	f00b f89e 	bl	80227b0 <iprintf>
    if (offset_from >= p_from->len) {
 8017674:	683b      	ldr	r3, [r7, #0]
 8017676:	895b      	ldrh	r3, [r3, #10]
 8017678:	461a      	mov	r2, r3
 801767a:	693b      	ldr	r3, [r7, #16]
 801767c:	4293      	cmp	r3, r2
 801767e:	d304      	bcc.n	801768a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8017680:	2300      	movs	r3, #0
 8017682:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8017684:	683b      	ldr	r3, [r7, #0]
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	895b      	ldrh	r3, [r3, #10]
 801768e:	461a      	mov	r2, r3
 8017690:	697b      	ldr	r3, [r7, #20]
 8017692:	4293      	cmp	r3, r2
 8017694:	d114      	bne.n	80176c0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8017696:	2300      	movs	r3, #0
 8017698:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d10c      	bne.n	80176c0 <pbuf_copy+0x118>
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d009      	beq.n	80176c0 <pbuf_copy+0x118>
 80176ac:	4b20      	ldr	r3, [pc, #128]	; (8017730 <pbuf_copy+0x188>)
 80176ae:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80176b2:	4924      	ldr	r1, [pc, #144]	; (8017744 <pbuf_copy+0x19c>)
 80176b4:	4820      	ldr	r0, [pc, #128]	; (8017738 <pbuf_copy+0x190>)
 80176b6:	f00b f87b 	bl	80227b0 <iprintf>
 80176ba:	f06f 030f 	mvn.w	r3, #15
 80176be:	e032      	b.n	8017726 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80176c0:	683b      	ldr	r3, [r7, #0]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d013      	beq.n	80176ee <pbuf_copy+0x146>
 80176c6:	683b      	ldr	r3, [r7, #0]
 80176c8:	895a      	ldrh	r2, [r3, #10]
 80176ca:	683b      	ldr	r3, [r7, #0]
 80176cc:	891b      	ldrh	r3, [r3, #8]
 80176ce:	429a      	cmp	r2, r3
 80176d0:	d10d      	bne.n	80176ee <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d009      	beq.n	80176ee <pbuf_copy+0x146>
 80176da:	4b15      	ldr	r3, [pc, #84]	; (8017730 <pbuf_copy+0x188>)
 80176dc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80176e0:	4919      	ldr	r1, [pc, #100]	; (8017748 <pbuf_copy+0x1a0>)
 80176e2:	4815      	ldr	r0, [pc, #84]	; (8017738 <pbuf_copy+0x190>)
 80176e4:	f00b f864 	bl	80227b0 <iprintf>
 80176e8:	f06f 0305 	mvn.w	r3, #5
 80176ec:	e01b      	b.n	8017726 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d013      	beq.n	801771c <pbuf_copy+0x174>
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	895a      	ldrh	r2, [r3, #10]
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	891b      	ldrh	r3, [r3, #8]
 80176fc:	429a      	cmp	r2, r3
 80176fe:	d10d      	bne.n	801771c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	2b00      	cmp	r3, #0
 8017706:	d009      	beq.n	801771c <pbuf_copy+0x174>
 8017708:	4b09      	ldr	r3, [pc, #36]	; (8017730 <pbuf_copy+0x188>)
 801770a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801770e:	490e      	ldr	r1, [pc, #56]	; (8017748 <pbuf_copy+0x1a0>)
 8017710:	4809      	ldr	r0, [pc, #36]	; (8017738 <pbuf_copy+0x190>)
 8017712:	f00b f84d 	bl	80227b0 <iprintf>
 8017716:	f06f 0305 	mvn.w	r3, #5
 801771a:	e004      	b.n	8017726 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801771c:	683b      	ldr	r3, [r7, #0]
 801771e:	2b00      	cmp	r3, #0
 8017720:	f47f af61 	bne.w	80175e6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8017724:	2300      	movs	r3, #0
}
 8017726:	4618      	mov	r0, r3
 8017728:	3718      	adds	r7, #24
 801772a:	46bd      	mov	sp, r7
 801772c:	bd80      	pop	{r7, pc}
 801772e:	bf00      	nop
 8017730:	08024dfc 	.word	0x08024dfc
 8017734:	080250a4 	.word	0x080250a4
 8017738:	08024e5c 	.word	0x08024e5c
 801773c:	080250d4 	.word	0x080250d4
 8017740:	080250ec 	.word	0x080250ec
 8017744:	08025108 	.word	0x08025108
 8017748:	08025118 	.word	0x08025118

0801774c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801774c:	b580      	push	{r7, lr}
 801774e:	b088      	sub	sp, #32
 8017750:	af00      	add	r7, sp, #0
 8017752:	60f8      	str	r0, [r7, #12]
 8017754:	60b9      	str	r1, [r7, #8]
 8017756:	4611      	mov	r1, r2
 8017758:	461a      	mov	r2, r3
 801775a:	460b      	mov	r3, r1
 801775c:	80fb      	strh	r3, [r7, #6]
 801775e:	4613      	mov	r3, r2
 8017760:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8017762:	2300      	movs	r3, #0
 8017764:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8017766:	2300      	movs	r3, #0
 8017768:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d108      	bne.n	8017782 <pbuf_copy_partial+0x36>
 8017770:	4b2b      	ldr	r3, [pc, #172]	; (8017820 <pbuf_copy_partial+0xd4>)
 8017772:	f240 420a 	movw	r2, #1034	; 0x40a
 8017776:	492b      	ldr	r1, [pc, #172]	; (8017824 <pbuf_copy_partial+0xd8>)
 8017778:	482b      	ldr	r0, [pc, #172]	; (8017828 <pbuf_copy_partial+0xdc>)
 801777a:	f00b f819 	bl	80227b0 <iprintf>
 801777e:	2300      	movs	r3, #0
 8017780:	e04a      	b.n	8017818 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8017782:	68bb      	ldr	r3, [r7, #8]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d108      	bne.n	801779a <pbuf_copy_partial+0x4e>
 8017788:	4b25      	ldr	r3, [pc, #148]	; (8017820 <pbuf_copy_partial+0xd4>)
 801778a:	f240 420b 	movw	r2, #1035	; 0x40b
 801778e:	4927      	ldr	r1, [pc, #156]	; (801782c <pbuf_copy_partial+0xe0>)
 8017790:	4825      	ldr	r0, [pc, #148]	; (8017828 <pbuf_copy_partial+0xdc>)
 8017792:	f00b f80d 	bl	80227b0 <iprintf>
 8017796:	2300      	movs	r3, #0
 8017798:	e03e      	b.n	8017818 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	61fb      	str	r3, [r7, #28]
 801779e:	e034      	b.n	801780a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80177a0:	88bb      	ldrh	r3, [r7, #4]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d00a      	beq.n	80177bc <pbuf_copy_partial+0x70>
 80177a6:	69fb      	ldr	r3, [r7, #28]
 80177a8:	895b      	ldrh	r3, [r3, #10]
 80177aa:	88ba      	ldrh	r2, [r7, #4]
 80177ac:	429a      	cmp	r2, r3
 80177ae:	d305      	bcc.n	80177bc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80177b0:	69fb      	ldr	r3, [r7, #28]
 80177b2:	895b      	ldrh	r3, [r3, #10]
 80177b4:	88ba      	ldrh	r2, [r7, #4]
 80177b6:	1ad3      	subs	r3, r2, r3
 80177b8:	80bb      	strh	r3, [r7, #4]
 80177ba:	e023      	b.n	8017804 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80177bc:	69fb      	ldr	r3, [r7, #28]
 80177be:	895a      	ldrh	r2, [r3, #10]
 80177c0:	88bb      	ldrh	r3, [r7, #4]
 80177c2:	1ad3      	subs	r3, r2, r3
 80177c4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80177c6:	8b3a      	ldrh	r2, [r7, #24]
 80177c8:	88fb      	ldrh	r3, [r7, #6]
 80177ca:	429a      	cmp	r2, r3
 80177cc:	d901      	bls.n	80177d2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80177ce:	88fb      	ldrh	r3, [r7, #6]
 80177d0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80177d2:	8b7b      	ldrh	r3, [r7, #26]
 80177d4:	68ba      	ldr	r2, [r7, #8]
 80177d6:	18d0      	adds	r0, r2, r3
 80177d8:	69fb      	ldr	r3, [r7, #28]
 80177da:	685a      	ldr	r2, [r3, #4]
 80177dc:	88bb      	ldrh	r3, [r7, #4]
 80177de:	4413      	add	r3, r2
 80177e0:	8b3a      	ldrh	r2, [r7, #24]
 80177e2:	4619      	mov	r1, r3
 80177e4:	f00a fed4 	bl	8022590 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80177e8:	8afa      	ldrh	r2, [r7, #22]
 80177ea:	8b3b      	ldrh	r3, [r7, #24]
 80177ec:	4413      	add	r3, r2
 80177ee:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80177f0:	8b7a      	ldrh	r2, [r7, #26]
 80177f2:	8b3b      	ldrh	r3, [r7, #24]
 80177f4:	4413      	add	r3, r2
 80177f6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80177f8:	88fa      	ldrh	r2, [r7, #6]
 80177fa:	8b3b      	ldrh	r3, [r7, #24]
 80177fc:	1ad3      	subs	r3, r2, r3
 80177fe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8017800:	2300      	movs	r3, #0
 8017802:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017804:	69fb      	ldr	r3, [r7, #28]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	61fb      	str	r3, [r7, #28]
 801780a:	88fb      	ldrh	r3, [r7, #6]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d002      	beq.n	8017816 <pbuf_copy_partial+0xca>
 8017810:	69fb      	ldr	r3, [r7, #28]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d1c4      	bne.n	80177a0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8017816:	8afb      	ldrh	r3, [r7, #22]
}
 8017818:	4618      	mov	r0, r3
 801781a:	3720      	adds	r7, #32
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}
 8017820:	08024dfc 	.word	0x08024dfc
 8017824:	08025144 	.word	0x08025144
 8017828:	08024e5c 	.word	0x08024e5c
 801782c:	08025164 	.word	0x08025164

08017830 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b084      	sub	sp, #16
 8017834:	af00      	add	r7, sp, #0
 8017836:	4603      	mov	r3, r0
 8017838:	603a      	str	r2, [r7, #0]
 801783a:	71fb      	strb	r3, [r7, #7]
 801783c:	460b      	mov	r3, r1
 801783e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8017840:	683b      	ldr	r3, [r7, #0]
 8017842:	8919      	ldrh	r1, [r3, #8]
 8017844:	88ba      	ldrh	r2, [r7, #4]
 8017846:	79fb      	ldrb	r3, [r7, #7]
 8017848:	4618      	mov	r0, r3
 801784a:	f7ff fa95 	bl	8016d78 <pbuf_alloc>
 801784e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d101      	bne.n	801785a <pbuf_clone+0x2a>
    return NULL;
 8017856:	2300      	movs	r3, #0
 8017858:	e011      	b.n	801787e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801785a:	6839      	ldr	r1, [r7, #0]
 801785c:	68f8      	ldr	r0, [r7, #12]
 801785e:	f7ff fea3 	bl	80175a8 <pbuf_copy>
 8017862:	4603      	mov	r3, r0
 8017864:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8017866:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d006      	beq.n	801787c <pbuf_clone+0x4c>
 801786e:	4b06      	ldr	r3, [pc, #24]	; (8017888 <pbuf_clone+0x58>)
 8017870:	f240 5224 	movw	r2, #1316	; 0x524
 8017874:	4905      	ldr	r1, [pc, #20]	; (801788c <pbuf_clone+0x5c>)
 8017876:	4806      	ldr	r0, [pc, #24]	; (8017890 <pbuf_clone+0x60>)
 8017878:	f00a ff9a 	bl	80227b0 <iprintf>
  return q;
 801787c:	68fb      	ldr	r3, [r7, #12]
}
 801787e:	4618      	mov	r0, r3
 8017880:	3710      	adds	r7, #16
 8017882:	46bd      	mov	sp, r7
 8017884:	bd80      	pop	{r7, pc}
 8017886:	bf00      	nop
 8017888:	08024dfc 	.word	0x08024dfc
 801788c:	08025270 	.word	0x08025270
 8017890:	08024e5c 	.word	0x08024e5c

08017894 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8017894:	b580      	push	{r7, lr}
 8017896:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017898:	f00a ffa2 	bl	80227e0 <rand>
 801789c:	4603      	mov	r3, r0
 801789e:	b29b      	uxth	r3, r3
 80178a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80178a4:	b29b      	uxth	r3, r3
 80178a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80178aa:	b29a      	uxth	r2, r3
 80178ac:	4b01      	ldr	r3, [pc, #4]	; (80178b4 <tcp_init+0x20>)
 80178ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80178b0:	bf00      	nop
 80178b2:	bd80      	pop	{r7, pc}
 80178b4:	20000028 	.word	0x20000028

080178b8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80178b8:	b580      	push	{r7, lr}
 80178ba:	b082      	sub	sp, #8
 80178bc:	af00      	add	r7, sp, #0
 80178be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	7d1b      	ldrb	r3, [r3, #20]
 80178c4:	2b01      	cmp	r3, #1
 80178c6:	d105      	bne.n	80178d4 <tcp_free+0x1c>
 80178c8:	4b06      	ldr	r3, [pc, #24]	; (80178e4 <tcp_free+0x2c>)
 80178ca:	22d4      	movs	r2, #212	; 0xd4
 80178cc:	4906      	ldr	r1, [pc, #24]	; (80178e8 <tcp_free+0x30>)
 80178ce:	4807      	ldr	r0, [pc, #28]	; (80178ec <tcp_free+0x34>)
 80178d0:	f00a ff6e 	bl	80227b0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80178d4:	6879      	ldr	r1, [r7, #4]
 80178d6:	2001      	movs	r0, #1
 80178d8:	f7fe fe8e 	bl	80165f8 <memp_free>
}
 80178dc:	bf00      	nop
 80178de:	3708      	adds	r7, #8
 80178e0:	46bd      	mov	sp, r7
 80178e2:	bd80      	pop	{r7, pc}
 80178e4:	080252fc 	.word	0x080252fc
 80178e8:	0802532c 	.word	0x0802532c
 80178ec:	08025340 	.word	0x08025340

080178f0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b082      	sub	sp, #8
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	7d1b      	ldrb	r3, [r3, #20]
 80178fc:	2b01      	cmp	r3, #1
 80178fe:	d105      	bne.n	801790c <tcp_free_listen+0x1c>
 8017900:	4b06      	ldr	r3, [pc, #24]	; (801791c <tcp_free_listen+0x2c>)
 8017902:	22df      	movs	r2, #223	; 0xdf
 8017904:	4906      	ldr	r1, [pc, #24]	; (8017920 <tcp_free_listen+0x30>)
 8017906:	4807      	ldr	r0, [pc, #28]	; (8017924 <tcp_free_listen+0x34>)
 8017908:	f00a ff52 	bl	80227b0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801790c:	6879      	ldr	r1, [r7, #4]
 801790e:	2002      	movs	r0, #2
 8017910:	f7fe fe72 	bl	80165f8 <memp_free>
}
 8017914:	bf00      	nop
 8017916:	3708      	adds	r7, #8
 8017918:	46bd      	mov	sp, r7
 801791a:	bd80      	pop	{r7, pc}
 801791c:	080252fc 	.word	0x080252fc
 8017920:	08025368 	.word	0x08025368
 8017924:	08025340 	.word	0x08025340

08017928 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8017928:	b580      	push	{r7, lr}
 801792a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801792c:	f001 f9be 	bl	8018cac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8017930:	4b07      	ldr	r3, [pc, #28]	; (8017950 <tcp_tmr+0x28>)
 8017932:	781b      	ldrb	r3, [r3, #0]
 8017934:	3301      	adds	r3, #1
 8017936:	b2da      	uxtb	r2, r3
 8017938:	4b05      	ldr	r3, [pc, #20]	; (8017950 <tcp_tmr+0x28>)
 801793a:	701a      	strb	r2, [r3, #0]
 801793c:	4b04      	ldr	r3, [pc, #16]	; (8017950 <tcp_tmr+0x28>)
 801793e:	781b      	ldrb	r3, [r3, #0]
 8017940:	f003 0301 	and.w	r3, r3, #1
 8017944:	2b00      	cmp	r3, #0
 8017946:	d001      	beq.n	801794c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8017948:	f000 fe70 	bl	801862c <tcp_slowtmr>
  }
}
 801794c:	bf00      	nop
 801794e:	bd80      	pop	{r7, pc}
 8017950:	2000bfc9 	.word	0x2000bfc9

08017954 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b084      	sub	sp, #16
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801795e:	683b      	ldr	r3, [r7, #0]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d105      	bne.n	8017970 <tcp_remove_listener+0x1c>
 8017964:	4b0d      	ldr	r3, [pc, #52]	; (801799c <tcp_remove_listener+0x48>)
 8017966:	22ff      	movs	r2, #255	; 0xff
 8017968:	490d      	ldr	r1, [pc, #52]	; (80179a0 <tcp_remove_listener+0x4c>)
 801796a:	480e      	ldr	r0, [pc, #56]	; (80179a4 <tcp_remove_listener+0x50>)
 801796c:	f00a ff20 	bl	80227b0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	60fb      	str	r3, [r7, #12]
 8017974:	e00a      	b.n	801798c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801797a:	683a      	ldr	r2, [r7, #0]
 801797c:	429a      	cmp	r2, r3
 801797e:	d102      	bne.n	8017986 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	2200      	movs	r2, #0
 8017984:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	68db      	ldr	r3, [r3, #12]
 801798a:	60fb      	str	r3, [r7, #12]
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	2b00      	cmp	r3, #0
 8017990:	d1f1      	bne.n	8017976 <tcp_remove_listener+0x22>
    }
  }
}
 8017992:	bf00      	nop
 8017994:	bf00      	nop
 8017996:	3710      	adds	r7, #16
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}
 801799c:	080252fc 	.word	0x080252fc
 80179a0:	08025384 	.word	0x08025384
 80179a4:	08025340 	.word	0x08025340

080179a8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b084      	sub	sp, #16
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d106      	bne.n	80179c4 <tcp_listen_closed+0x1c>
 80179b6:	4b14      	ldr	r3, [pc, #80]	; (8017a08 <tcp_listen_closed+0x60>)
 80179b8:	f240 1211 	movw	r2, #273	; 0x111
 80179bc:	4913      	ldr	r1, [pc, #76]	; (8017a0c <tcp_listen_closed+0x64>)
 80179be:	4814      	ldr	r0, [pc, #80]	; (8017a10 <tcp_listen_closed+0x68>)
 80179c0:	f00a fef6 	bl	80227b0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	7d1b      	ldrb	r3, [r3, #20]
 80179c8:	2b01      	cmp	r3, #1
 80179ca:	d006      	beq.n	80179da <tcp_listen_closed+0x32>
 80179cc:	4b0e      	ldr	r3, [pc, #56]	; (8017a08 <tcp_listen_closed+0x60>)
 80179ce:	f44f 7289 	mov.w	r2, #274	; 0x112
 80179d2:	4910      	ldr	r1, [pc, #64]	; (8017a14 <tcp_listen_closed+0x6c>)
 80179d4:	480e      	ldr	r0, [pc, #56]	; (8017a10 <tcp_listen_closed+0x68>)
 80179d6:	f00a feeb 	bl	80227b0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80179da:	2301      	movs	r3, #1
 80179dc:	60fb      	str	r3, [r7, #12]
 80179de:	e00b      	b.n	80179f8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80179e0:	4a0d      	ldr	r2, [pc, #52]	; (8017a18 <tcp_listen_closed+0x70>)
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	6879      	ldr	r1, [r7, #4]
 80179ec:	4618      	mov	r0, r3
 80179ee:	f7ff ffb1 	bl	8017954 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	3301      	adds	r3, #1
 80179f6:	60fb      	str	r3, [r7, #12]
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	2b03      	cmp	r3, #3
 80179fc:	d9f0      	bls.n	80179e0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80179fe:	bf00      	nop
 8017a00:	bf00      	nop
 8017a02:	3710      	adds	r7, #16
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}
 8017a08:	080252fc 	.word	0x080252fc
 8017a0c:	080253ac 	.word	0x080253ac
 8017a10:	08025340 	.word	0x08025340
 8017a14:	080253b8 	.word	0x080253b8
 8017a18:	08027370 	.word	0x08027370

08017a1c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8017a1c:	b5b0      	push	{r4, r5, r7, lr}
 8017a1e:	b088      	sub	sp, #32
 8017a20:	af04      	add	r7, sp, #16
 8017a22:	6078      	str	r0, [r7, #4]
 8017a24:	460b      	mov	r3, r1
 8017a26:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d106      	bne.n	8017a3c <tcp_close_shutdown+0x20>
 8017a2e:	4b63      	ldr	r3, [pc, #396]	; (8017bbc <tcp_close_shutdown+0x1a0>)
 8017a30:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8017a34:	4962      	ldr	r1, [pc, #392]	; (8017bc0 <tcp_close_shutdown+0x1a4>)
 8017a36:	4863      	ldr	r0, [pc, #396]	; (8017bc4 <tcp_close_shutdown+0x1a8>)
 8017a38:	f00a feba 	bl	80227b0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8017a3c:	78fb      	ldrb	r3, [r7, #3]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d066      	beq.n	8017b10 <tcp_close_shutdown+0xf4>
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	7d1b      	ldrb	r3, [r3, #20]
 8017a46:	2b04      	cmp	r3, #4
 8017a48:	d003      	beq.n	8017a52 <tcp_close_shutdown+0x36>
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	7d1b      	ldrb	r3, [r3, #20]
 8017a4e:	2b07      	cmp	r3, #7
 8017a50:	d15e      	bne.n	8017b10 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d104      	bne.n	8017a64 <tcp_close_shutdown+0x48>
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a5e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017a62:	d055      	beq.n	8017b10 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	8b5b      	ldrh	r3, [r3, #26]
 8017a68:	f003 0310 	and.w	r3, r3, #16
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d106      	bne.n	8017a7e <tcp_close_shutdown+0x62>
 8017a70:	4b52      	ldr	r3, [pc, #328]	; (8017bbc <tcp_close_shutdown+0x1a0>)
 8017a72:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8017a76:	4954      	ldr	r1, [pc, #336]	; (8017bc8 <tcp_close_shutdown+0x1ac>)
 8017a78:	4852      	ldr	r0, [pc, #328]	; (8017bc4 <tcp_close_shutdown+0x1a8>)
 8017a7a:	f00a fe99 	bl	80227b0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017a86:	687d      	ldr	r5, [r7, #4]
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	3304      	adds	r3, #4
 8017a8c:	687a      	ldr	r2, [r7, #4]
 8017a8e:	8ad2      	ldrh	r2, [r2, #22]
 8017a90:	6879      	ldr	r1, [r7, #4]
 8017a92:	8b09      	ldrh	r1, [r1, #24]
 8017a94:	9102      	str	r1, [sp, #8]
 8017a96:	9201      	str	r2, [sp, #4]
 8017a98:	9300      	str	r3, [sp, #0]
 8017a9a:	462b      	mov	r3, r5
 8017a9c:	4622      	mov	r2, r4
 8017a9e:	4601      	mov	r1, r0
 8017aa0:	6878      	ldr	r0, [r7, #4]
 8017aa2:	f005 fed3 	bl	801d84c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8017aa6:	6878      	ldr	r0, [r7, #4]
 8017aa8:	f001 fcb0 	bl	801940c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8017aac:	4b47      	ldr	r3, [pc, #284]	; (8017bcc <tcp_close_shutdown+0x1b0>)
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	687a      	ldr	r2, [r7, #4]
 8017ab2:	429a      	cmp	r2, r3
 8017ab4:	d105      	bne.n	8017ac2 <tcp_close_shutdown+0xa6>
 8017ab6:	4b45      	ldr	r3, [pc, #276]	; (8017bcc <tcp_close_shutdown+0x1b0>)
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	68db      	ldr	r3, [r3, #12]
 8017abc:	4a43      	ldr	r2, [pc, #268]	; (8017bcc <tcp_close_shutdown+0x1b0>)
 8017abe:	6013      	str	r3, [r2, #0]
 8017ac0:	e013      	b.n	8017aea <tcp_close_shutdown+0xce>
 8017ac2:	4b42      	ldr	r3, [pc, #264]	; (8017bcc <tcp_close_shutdown+0x1b0>)
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	60fb      	str	r3, [r7, #12]
 8017ac8:	e00c      	b.n	8017ae4 <tcp_close_shutdown+0xc8>
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	68db      	ldr	r3, [r3, #12]
 8017ace:	687a      	ldr	r2, [r7, #4]
 8017ad0:	429a      	cmp	r2, r3
 8017ad2:	d104      	bne.n	8017ade <tcp_close_shutdown+0xc2>
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	68da      	ldr	r2, [r3, #12]
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	60da      	str	r2, [r3, #12]
 8017adc:	e005      	b.n	8017aea <tcp_close_shutdown+0xce>
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	68db      	ldr	r3, [r3, #12]
 8017ae2:	60fb      	str	r3, [r7, #12]
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d1ef      	bne.n	8017aca <tcp_close_shutdown+0xae>
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	2200      	movs	r2, #0
 8017aee:	60da      	str	r2, [r3, #12]
 8017af0:	4b37      	ldr	r3, [pc, #220]	; (8017bd0 <tcp_close_shutdown+0x1b4>)
 8017af2:	2201      	movs	r2, #1
 8017af4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8017af6:	4b37      	ldr	r3, [pc, #220]	; (8017bd4 <tcp_close_shutdown+0x1b8>)
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	687a      	ldr	r2, [r7, #4]
 8017afc:	429a      	cmp	r2, r3
 8017afe:	d102      	bne.n	8017b06 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8017b00:	f004 f948 	bl	801bd94 <tcp_trigger_input_pcb_close>
 8017b04:	e002      	b.n	8017b0c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f7ff fed6 	bl	80178b8 <tcp_free>
      }
      return ERR_OK;
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	e050      	b.n	8017bb2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	7d1b      	ldrb	r3, [r3, #20]
 8017b14:	2b02      	cmp	r3, #2
 8017b16:	d03b      	beq.n	8017b90 <tcp_close_shutdown+0x174>
 8017b18:	2b02      	cmp	r3, #2
 8017b1a:	dc44      	bgt.n	8017ba6 <tcp_close_shutdown+0x18a>
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d002      	beq.n	8017b26 <tcp_close_shutdown+0x10a>
 8017b20:	2b01      	cmp	r3, #1
 8017b22:	d02a      	beq.n	8017b7a <tcp_close_shutdown+0x15e>
 8017b24:	e03f      	b.n	8017ba6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	8adb      	ldrh	r3, [r3, #22]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d021      	beq.n	8017b72 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017b2e:	4b2a      	ldr	r3, [pc, #168]	; (8017bd8 <tcp_close_shutdown+0x1bc>)
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	687a      	ldr	r2, [r7, #4]
 8017b34:	429a      	cmp	r2, r3
 8017b36:	d105      	bne.n	8017b44 <tcp_close_shutdown+0x128>
 8017b38:	4b27      	ldr	r3, [pc, #156]	; (8017bd8 <tcp_close_shutdown+0x1bc>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	68db      	ldr	r3, [r3, #12]
 8017b3e:	4a26      	ldr	r2, [pc, #152]	; (8017bd8 <tcp_close_shutdown+0x1bc>)
 8017b40:	6013      	str	r3, [r2, #0]
 8017b42:	e013      	b.n	8017b6c <tcp_close_shutdown+0x150>
 8017b44:	4b24      	ldr	r3, [pc, #144]	; (8017bd8 <tcp_close_shutdown+0x1bc>)
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	60bb      	str	r3, [r7, #8]
 8017b4a:	e00c      	b.n	8017b66 <tcp_close_shutdown+0x14a>
 8017b4c:	68bb      	ldr	r3, [r7, #8]
 8017b4e:	68db      	ldr	r3, [r3, #12]
 8017b50:	687a      	ldr	r2, [r7, #4]
 8017b52:	429a      	cmp	r2, r3
 8017b54:	d104      	bne.n	8017b60 <tcp_close_shutdown+0x144>
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	68da      	ldr	r2, [r3, #12]
 8017b5a:	68bb      	ldr	r3, [r7, #8]
 8017b5c:	60da      	str	r2, [r3, #12]
 8017b5e:	e005      	b.n	8017b6c <tcp_close_shutdown+0x150>
 8017b60:	68bb      	ldr	r3, [r7, #8]
 8017b62:	68db      	ldr	r3, [r3, #12]
 8017b64:	60bb      	str	r3, [r7, #8]
 8017b66:	68bb      	ldr	r3, [r7, #8]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d1ef      	bne.n	8017b4c <tcp_close_shutdown+0x130>
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	2200      	movs	r2, #0
 8017b70:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8017b72:	6878      	ldr	r0, [r7, #4]
 8017b74:	f7ff fea0 	bl	80178b8 <tcp_free>
      break;
 8017b78:	e01a      	b.n	8017bb0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8017b7a:	6878      	ldr	r0, [r7, #4]
 8017b7c:	f7ff ff14 	bl	80179a8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8017b80:	6879      	ldr	r1, [r7, #4]
 8017b82:	4816      	ldr	r0, [pc, #88]	; (8017bdc <tcp_close_shutdown+0x1c0>)
 8017b84:	f001 fc92 	bl	80194ac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8017b88:	6878      	ldr	r0, [r7, #4]
 8017b8a:	f7ff feb1 	bl	80178f0 <tcp_free_listen>
      break;
 8017b8e:	e00f      	b.n	8017bb0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017b90:	6879      	ldr	r1, [r7, #4]
 8017b92:	480e      	ldr	r0, [pc, #56]	; (8017bcc <tcp_close_shutdown+0x1b0>)
 8017b94:	f001 fc8a 	bl	80194ac <tcp_pcb_remove>
 8017b98:	4b0d      	ldr	r3, [pc, #52]	; (8017bd0 <tcp_close_shutdown+0x1b4>)
 8017b9a:	2201      	movs	r2, #1
 8017b9c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8017b9e:	6878      	ldr	r0, [r7, #4]
 8017ba0:	f7ff fe8a 	bl	80178b8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8017ba4:	e004      	b.n	8017bb0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8017ba6:	6878      	ldr	r0, [r7, #4]
 8017ba8:	f000 f81a 	bl	8017be0 <tcp_close_shutdown_fin>
 8017bac:	4603      	mov	r3, r0
 8017bae:	e000      	b.n	8017bb2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8017bb0:	2300      	movs	r3, #0
}
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	3710      	adds	r7, #16
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8017bba:	bf00      	nop
 8017bbc:	080252fc 	.word	0x080252fc
 8017bc0:	080253d0 	.word	0x080253d0
 8017bc4:	08025340 	.word	0x08025340
 8017bc8:	080253f0 	.word	0x080253f0
 8017bcc:	2000bfc0 	.word	0x2000bfc0
 8017bd0:	2000bfc8 	.word	0x2000bfc8
 8017bd4:	2000c000 	.word	0x2000c000
 8017bd8:	2000bfb8 	.word	0x2000bfb8
 8017bdc:	2000bfbc 	.word	0x2000bfbc

08017be0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b084      	sub	sp, #16
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d106      	bne.n	8017bfc <tcp_close_shutdown_fin+0x1c>
 8017bee:	4b2e      	ldr	r3, [pc, #184]	; (8017ca8 <tcp_close_shutdown_fin+0xc8>)
 8017bf0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8017bf4:	492d      	ldr	r1, [pc, #180]	; (8017cac <tcp_close_shutdown_fin+0xcc>)
 8017bf6:	482e      	ldr	r0, [pc, #184]	; (8017cb0 <tcp_close_shutdown_fin+0xd0>)
 8017bf8:	f00a fdda 	bl	80227b0 <iprintf>

  switch (pcb->state) {
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	7d1b      	ldrb	r3, [r3, #20]
 8017c00:	2b07      	cmp	r3, #7
 8017c02:	d020      	beq.n	8017c46 <tcp_close_shutdown_fin+0x66>
 8017c04:	2b07      	cmp	r3, #7
 8017c06:	dc2b      	bgt.n	8017c60 <tcp_close_shutdown_fin+0x80>
 8017c08:	2b03      	cmp	r3, #3
 8017c0a:	d002      	beq.n	8017c12 <tcp_close_shutdown_fin+0x32>
 8017c0c:	2b04      	cmp	r3, #4
 8017c0e:	d00d      	beq.n	8017c2c <tcp_close_shutdown_fin+0x4c>
 8017c10:	e026      	b.n	8017c60 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8017c12:	6878      	ldr	r0, [r7, #4]
 8017c14:	f004 ff28 	bl	801ca68 <tcp_send_fin>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d11f      	bne.n	8017c64 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	2205      	movs	r2, #5
 8017c28:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017c2a:	e01b      	b.n	8017c64 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8017c2c:	6878      	ldr	r0, [r7, #4]
 8017c2e:	f004 ff1b 	bl	801ca68 <tcp_send_fin>
 8017c32:	4603      	mov	r3, r0
 8017c34:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d114      	bne.n	8017c68 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	2205      	movs	r2, #5
 8017c42:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017c44:	e010      	b.n	8017c68 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8017c46:	6878      	ldr	r0, [r7, #4]
 8017c48:	f004 ff0e 	bl	801ca68 <tcp_send_fin>
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d109      	bne.n	8017c6c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	2209      	movs	r2, #9
 8017c5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017c5e:	e005      	b.n	8017c6c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8017c60:	2300      	movs	r3, #0
 8017c62:	e01c      	b.n	8017c9e <tcp_close_shutdown_fin+0xbe>
      break;
 8017c64:	bf00      	nop
 8017c66:	e002      	b.n	8017c6e <tcp_close_shutdown_fin+0x8e>
      break;
 8017c68:	bf00      	nop
 8017c6a:	e000      	b.n	8017c6e <tcp_close_shutdown_fin+0x8e>
      break;
 8017c6c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8017c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d103      	bne.n	8017c7e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8017c76:	6878      	ldr	r0, [r7, #4]
 8017c78:	f005 f834 	bl	801cce4 <tcp_output>
 8017c7c:	e00d      	b.n	8017c9a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8017c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017c86:	d108      	bne.n	8017c9a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	8b5b      	ldrh	r3, [r3, #26]
 8017c8c:	f043 0308 	orr.w	r3, r3, #8
 8017c90:	b29a      	uxth	r2, r3
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8017c96:	2300      	movs	r3, #0
 8017c98:	e001      	b.n	8017c9e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8017c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	3710      	adds	r7, #16
 8017ca2:	46bd      	mov	sp, r7
 8017ca4:	bd80      	pop	{r7, pc}
 8017ca6:	bf00      	nop
 8017ca8:	080252fc 	.word	0x080252fc
 8017cac:	080253ac 	.word	0x080253ac
 8017cb0:	08025340 	.word	0x08025340

08017cb4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b082      	sub	sp, #8
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d109      	bne.n	8017cd6 <tcp_close+0x22>
 8017cc2:	4b0f      	ldr	r3, [pc, #60]	; (8017d00 <tcp_close+0x4c>)
 8017cc4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8017cc8:	490e      	ldr	r1, [pc, #56]	; (8017d04 <tcp_close+0x50>)
 8017cca:	480f      	ldr	r0, [pc, #60]	; (8017d08 <tcp_close+0x54>)
 8017ccc:	f00a fd70 	bl	80227b0 <iprintf>
 8017cd0:	f06f 030f 	mvn.w	r3, #15
 8017cd4:	e00f      	b.n	8017cf6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	7d1b      	ldrb	r3, [r3, #20]
 8017cda:	2b01      	cmp	r3, #1
 8017cdc:	d006      	beq.n	8017cec <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	8b5b      	ldrh	r3, [r3, #26]
 8017ce2:	f043 0310 	orr.w	r3, r3, #16
 8017ce6:	b29a      	uxth	r2, r3
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8017cec:	2101      	movs	r1, #1
 8017cee:	6878      	ldr	r0, [r7, #4]
 8017cf0:	f7ff fe94 	bl	8017a1c <tcp_close_shutdown>
 8017cf4:	4603      	mov	r3, r0
}
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	3708      	adds	r7, #8
 8017cfa:	46bd      	mov	sp, r7
 8017cfc:	bd80      	pop	{r7, pc}
 8017cfe:	bf00      	nop
 8017d00:	080252fc 	.word	0x080252fc
 8017d04:	0802540c 	.word	0x0802540c
 8017d08:	08025340 	.word	0x08025340

08017d0c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b084      	sub	sp, #16
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	60f8      	str	r0, [r7, #12]
 8017d14:	60b9      	str	r1, [r7, #8]
 8017d16:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d109      	bne.n	8017d32 <tcp_shutdown+0x26>
 8017d1e:	4b26      	ldr	r3, [pc, #152]	; (8017db8 <tcp_shutdown+0xac>)
 8017d20:	f240 2207 	movw	r2, #519	; 0x207
 8017d24:	4925      	ldr	r1, [pc, #148]	; (8017dbc <tcp_shutdown+0xb0>)
 8017d26:	4826      	ldr	r0, [pc, #152]	; (8017dc0 <tcp_shutdown+0xb4>)
 8017d28:	f00a fd42 	bl	80227b0 <iprintf>
 8017d2c:	f06f 030f 	mvn.w	r3, #15
 8017d30:	e03d      	b.n	8017dae <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	7d1b      	ldrb	r3, [r3, #20]
 8017d36:	2b01      	cmp	r3, #1
 8017d38:	d102      	bne.n	8017d40 <tcp_shutdown+0x34>
    return ERR_CONN;
 8017d3a:	f06f 030a 	mvn.w	r3, #10
 8017d3e:	e036      	b.n	8017dae <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8017d40:	68bb      	ldr	r3, [r7, #8]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d01b      	beq.n	8017d7e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	8b5b      	ldrh	r3, [r3, #26]
 8017d4a:	f043 0310 	orr.w	r3, r3, #16
 8017d4e:	b29a      	uxth	r2, r3
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d005      	beq.n	8017d66 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8017d5a:	2101      	movs	r1, #1
 8017d5c:	68f8      	ldr	r0, [r7, #12]
 8017d5e:	f7ff fe5d 	bl	8017a1c <tcp_close_shutdown>
 8017d62:	4603      	mov	r3, r0
 8017d64:	e023      	b.n	8017dae <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d007      	beq.n	8017d7e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017d72:	4618      	mov	r0, r3
 8017d74:	f7ff fae4 	bl	8017340 <pbuf_free>
      pcb->refused_data = NULL;
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d013      	beq.n	8017dac <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	7d1b      	ldrb	r3, [r3, #20]
 8017d88:	2b04      	cmp	r3, #4
 8017d8a:	dc02      	bgt.n	8017d92 <tcp_shutdown+0x86>
 8017d8c:	2b03      	cmp	r3, #3
 8017d8e:	da02      	bge.n	8017d96 <tcp_shutdown+0x8a>
 8017d90:	e009      	b.n	8017da6 <tcp_shutdown+0x9a>
 8017d92:	2b07      	cmp	r3, #7
 8017d94:	d107      	bne.n	8017da6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8017d96:	68bb      	ldr	r3, [r7, #8]
 8017d98:	b2db      	uxtb	r3, r3
 8017d9a:	4619      	mov	r1, r3
 8017d9c:	68f8      	ldr	r0, [r7, #12]
 8017d9e:	f7ff fe3d 	bl	8017a1c <tcp_close_shutdown>
 8017da2:	4603      	mov	r3, r0
 8017da4:	e003      	b.n	8017dae <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8017da6:	f06f 030a 	mvn.w	r3, #10
 8017daa:	e000      	b.n	8017dae <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8017dac:	2300      	movs	r3, #0
}
 8017dae:	4618      	mov	r0, r3
 8017db0:	3710      	adds	r7, #16
 8017db2:	46bd      	mov	sp, r7
 8017db4:	bd80      	pop	{r7, pc}
 8017db6:	bf00      	nop
 8017db8:	080252fc 	.word	0x080252fc
 8017dbc:	08025424 	.word	0x08025424
 8017dc0:	08025340 	.word	0x08025340

08017dc4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b08e      	sub	sp, #56	; 0x38
 8017dc8:	af04      	add	r7, sp, #16
 8017dca:	6078      	str	r0, [r7, #4]
 8017dcc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d107      	bne.n	8017de4 <tcp_abandon+0x20>
 8017dd4:	4b52      	ldr	r3, [pc, #328]	; (8017f20 <tcp_abandon+0x15c>)
 8017dd6:	f240 223d 	movw	r2, #573	; 0x23d
 8017dda:	4952      	ldr	r1, [pc, #328]	; (8017f24 <tcp_abandon+0x160>)
 8017ddc:	4852      	ldr	r0, [pc, #328]	; (8017f28 <tcp_abandon+0x164>)
 8017dde:	f00a fce7 	bl	80227b0 <iprintf>
 8017de2:	e099      	b.n	8017f18 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	7d1b      	ldrb	r3, [r3, #20]
 8017de8:	2b01      	cmp	r3, #1
 8017dea:	d106      	bne.n	8017dfa <tcp_abandon+0x36>
 8017dec:	4b4c      	ldr	r3, [pc, #304]	; (8017f20 <tcp_abandon+0x15c>)
 8017dee:	f44f 7210 	mov.w	r2, #576	; 0x240
 8017df2:	494e      	ldr	r1, [pc, #312]	; (8017f2c <tcp_abandon+0x168>)
 8017df4:	484c      	ldr	r0, [pc, #304]	; (8017f28 <tcp_abandon+0x164>)
 8017df6:	f00a fcdb 	bl	80227b0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	7d1b      	ldrb	r3, [r3, #20]
 8017dfe:	2b0a      	cmp	r3, #10
 8017e00:	d107      	bne.n	8017e12 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8017e02:	6879      	ldr	r1, [r7, #4]
 8017e04:	484a      	ldr	r0, [pc, #296]	; (8017f30 <tcp_abandon+0x16c>)
 8017e06:	f001 fb51 	bl	80194ac <tcp_pcb_remove>
    tcp_free(pcb);
 8017e0a:	6878      	ldr	r0, [r7, #4]
 8017e0c:	f7ff fd54 	bl	80178b8 <tcp_free>
 8017e10:	e082      	b.n	8017f18 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8017e12:	2300      	movs	r3, #0
 8017e14:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8017e16:	2300      	movs	r3, #0
 8017e18:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e1e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e24:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017e2c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	691b      	ldr	r3, [r3, #16]
 8017e32:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	7d1b      	ldrb	r3, [r3, #20]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d126      	bne.n	8017e8a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	8adb      	ldrh	r3, [r3, #22]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d02e      	beq.n	8017ea2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017e44:	4b3b      	ldr	r3, [pc, #236]	; (8017f34 <tcp_abandon+0x170>)
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	687a      	ldr	r2, [r7, #4]
 8017e4a:	429a      	cmp	r2, r3
 8017e4c:	d105      	bne.n	8017e5a <tcp_abandon+0x96>
 8017e4e:	4b39      	ldr	r3, [pc, #228]	; (8017f34 <tcp_abandon+0x170>)
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	68db      	ldr	r3, [r3, #12]
 8017e54:	4a37      	ldr	r2, [pc, #220]	; (8017f34 <tcp_abandon+0x170>)
 8017e56:	6013      	str	r3, [r2, #0]
 8017e58:	e013      	b.n	8017e82 <tcp_abandon+0xbe>
 8017e5a:	4b36      	ldr	r3, [pc, #216]	; (8017f34 <tcp_abandon+0x170>)
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	61fb      	str	r3, [r7, #28]
 8017e60:	e00c      	b.n	8017e7c <tcp_abandon+0xb8>
 8017e62:	69fb      	ldr	r3, [r7, #28]
 8017e64:	68db      	ldr	r3, [r3, #12]
 8017e66:	687a      	ldr	r2, [r7, #4]
 8017e68:	429a      	cmp	r2, r3
 8017e6a:	d104      	bne.n	8017e76 <tcp_abandon+0xb2>
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	68da      	ldr	r2, [r3, #12]
 8017e70:	69fb      	ldr	r3, [r7, #28]
 8017e72:	60da      	str	r2, [r3, #12]
 8017e74:	e005      	b.n	8017e82 <tcp_abandon+0xbe>
 8017e76:	69fb      	ldr	r3, [r7, #28]
 8017e78:	68db      	ldr	r3, [r3, #12]
 8017e7a:	61fb      	str	r3, [r7, #28]
 8017e7c:	69fb      	ldr	r3, [r7, #28]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d1ef      	bne.n	8017e62 <tcp_abandon+0x9e>
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	2200      	movs	r2, #0
 8017e86:	60da      	str	r2, [r3, #12]
 8017e88:	e00b      	b.n	8017ea2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8017e8a:	683b      	ldr	r3, [r7, #0]
 8017e8c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	8adb      	ldrh	r3, [r3, #22]
 8017e92:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017e94:	6879      	ldr	r1, [r7, #4]
 8017e96:	4828      	ldr	r0, [pc, #160]	; (8017f38 <tcp_abandon+0x174>)
 8017e98:	f001 fb08 	bl	80194ac <tcp_pcb_remove>
 8017e9c:	4b27      	ldr	r3, [pc, #156]	; (8017f3c <tcp_abandon+0x178>)
 8017e9e:	2201      	movs	r2, #1
 8017ea0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d004      	beq.n	8017eb4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017eae:	4618      	mov	r0, r3
 8017eb0:	f000 ffdc 	bl	8018e6c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d004      	beq.n	8017ec6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f000 ffd3 	bl	8018e6c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d004      	beq.n	8017ed8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f000 ffca 	bl	8018e6c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8017ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d00e      	beq.n	8017efc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8017ede:	6879      	ldr	r1, [r7, #4]
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	3304      	adds	r3, #4
 8017ee4:	687a      	ldr	r2, [r7, #4]
 8017ee6:	8b12      	ldrh	r2, [r2, #24]
 8017ee8:	9202      	str	r2, [sp, #8]
 8017eea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017eec:	9201      	str	r2, [sp, #4]
 8017eee:	9300      	str	r3, [sp, #0]
 8017ef0:	460b      	mov	r3, r1
 8017ef2:	697a      	ldr	r2, [r7, #20]
 8017ef4:	69b9      	ldr	r1, [r7, #24]
 8017ef6:	6878      	ldr	r0, [r7, #4]
 8017ef8:	f005 fca8 	bl	801d84c <tcp_rst>
    }
    last_state = pcb->state;
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	7d1b      	ldrb	r3, [r3, #20]
 8017f00:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8017f02:	6878      	ldr	r0, [r7, #4]
 8017f04:	f7ff fcd8 	bl	80178b8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8017f08:	693b      	ldr	r3, [r7, #16]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d004      	beq.n	8017f18 <tcp_abandon+0x154>
 8017f0e:	693b      	ldr	r3, [r7, #16]
 8017f10:	f06f 010c 	mvn.w	r1, #12
 8017f14:	68f8      	ldr	r0, [r7, #12]
 8017f16:	4798      	blx	r3
  }
}
 8017f18:	3728      	adds	r7, #40	; 0x28
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bd80      	pop	{r7, pc}
 8017f1e:	bf00      	nop
 8017f20:	080252fc 	.word	0x080252fc
 8017f24:	08025440 	.word	0x08025440
 8017f28:	08025340 	.word	0x08025340
 8017f2c:	0802545c 	.word	0x0802545c
 8017f30:	2000bfc4 	.word	0x2000bfc4
 8017f34:	2000bfb8 	.word	0x2000bfb8
 8017f38:	2000bfc0 	.word	0x2000bfc0
 8017f3c:	2000bfc8 	.word	0x2000bfc8

08017f40 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b082      	sub	sp, #8
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8017f48:	2101      	movs	r1, #1
 8017f4a:	6878      	ldr	r0, [r7, #4]
 8017f4c:	f7ff ff3a 	bl	8017dc4 <tcp_abandon>
}
 8017f50:	bf00      	nop
 8017f52:	3708      	adds	r7, #8
 8017f54:	46bd      	mov	sp, r7
 8017f56:	bd80      	pop	{r7, pc}

08017f58 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017f58:	b580      	push	{r7, lr}
 8017f5a:	b088      	sub	sp, #32
 8017f5c:	af00      	add	r7, sp, #0
 8017f5e:	60f8      	str	r0, [r7, #12]
 8017f60:	60b9      	str	r1, [r7, #8]
 8017f62:	4613      	mov	r3, r2
 8017f64:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8017f66:	2304      	movs	r3, #4
 8017f68:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017f6a:	68bb      	ldr	r3, [r7, #8]
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d101      	bne.n	8017f74 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8017f70:	4b3e      	ldr	r3, [pc, #248]	; (801806c <tcp_bind+0x114>)
 8017f72:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d109      	bne.n	8017f8e <tcp_bind+0x36>
 8017f7a:	4b3d      	ldr	r3, [pc, #244]	; (8018070 <tcp_bind+0x118>)
 8017f7c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8017f80:	493c      	ldr	r1, [pc, #240]	; (8018074 <tcp_bind+0x11c>)
 8017f82:	483d      	ldr	r0, [pc, #244]	; (8018078 <tcp_bind+0x120>)
 8017f84:	f00a fc14 	bl	80227b0 <iprintf>
 8017f88:	f06f 030f 	mvn.w	r3, #15
 8017f8c:	e06a      	b.n	8018064 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	7d1b      	ldrb	r3, [r3, #20]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d009      	beq.n	8017faa <tcp_bind+0x52>
 8017f96:	4b36      	ldr	r3, [pc, #216]	; (8018070 <tcp_bind+0x118>)
 8017f98:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017f9c:	4937      	ldr	r1, [pc, #220]	; (801807c <tcp_bind+0x124>)
 8017f9e:	4836      	ldr	r0, [pc, #216]	; (8018078 <tcp_bind+0x120>)
 8017fa0:	f00a fc06 	bl	80227b0 <iprintf>
 8017fa4:	f06f 0305 	mvn.w	r3, #5
 8017fa8:	e05c      	b.n	8018064 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8017faa:	88fb      	ldrh	r3, [r7, #6]
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d109      	bne.n	8017fc4 <tcp_bind+0x6c>
    port = tcp_new_port();
 8017fb0:	f000 f9de 	bl	8018370 <tcp_new_port>
 8017fb4:	4603      	mov	r3, r0
 8017fb6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017fb8:	88fb      	ldrh	r3, [r7, #6]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d135      	bne.n	801802a <tcp_bind+0xd2>
      return ERR_BUF;
 8017fbe:	f06f 0301 	mvn.w	r3, #1
 8017fc2:	e04f      	b.n	8018064 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	61fb      	str	r3, [r7, #28]
 8017fc8:	e02b      	b.n	8018022 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8017fca:	4a2d      	ldr	r2, [pc, #180]	; (8018080 <tcp_bind+0x128>)
 8017fcc:	69fb      	ldr	r3, [r7, #28]
 8017fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	61bb      	str	r3, [r7, #24]
 8017fd6:	e01e      	b.n	8018016 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8017fd8:	69bb      	ldr	r3, [r7, #24]
 8017fda:	8adb      	ldrh	r3, [r3, #22]
 8017fdc:	88fa      	ldrh	r2, [r7, #6]
 8017fde:	429a      	cmp	r2, r3
 8017fe0:	d116      	bne.n	8018010 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8017fe2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d010      	beq.n	801800a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8017fe8:	69bb      	ldr	r3, [r7, #24]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d00c      	beq.n	801800a <tcp_bind+0xb2>
 8017ff0:	68bb      	ldr	r3, [r7, #8]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d009      	beq.n	801800a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8017ff6:	68bb      	ldr	r3, [r7, #8]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d005      	beq.n	801800a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8017ffe:	69bb      	ldr	r3, [r7, #24]
 8018000:	681a      	ldr	r2, [r3, #0]
 8018002:	68bb      	ldr	r3, [r7, #8]
 8018004:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018006:	429a      	cmp	r2, r3
 8018008:	d102      	bne.n	8018010 <tcp_bind+0xb8>
              return ERR_USE;
 801800a:	f06f 0307 	mvn.w	r3, #7
 801800e:	e029      	b.n	8018064 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018010:	69bb      	ldr	r3, [r7, #24]
 8018012:	68db      	ldr	r3, [r3, #12]
 8018014:	61bb      	str	r3, [r7, #24]
 8018016:	69bb      	ldr	r3, [r7, #24]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d1dd      	bne.n	8017fd8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801801c:	69fb      	ldr	r3, [r7, #28]
 801801e:	3301      	adds	r3, #1
 8018020:	61fb      	str	r3, [r7, #28]
 8018022:	69fa      	ldr	r2, [r7, #28]
 8018024:	697b      	ldr	r3, [r7, #20]
 8018026:	429a      	cmp	r2, r3
 8018028:	dbcf      	blt.n	8017fca <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801802a:	68bb      	ldr	r3, [r7, #8]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d00c      	beq.n	801804a <tcp_bind+0xf2>
 8018030:	68bb      	ldr	r3, [r7, #8]
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d008      	beq.n	801804a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8018038:	68bb      	ldr	r3, [r7, #8]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d002      	beq.n	8018044 <tcp_bind+0xec>
 801803e:	68bb      	ldr	r3, [r7, #8]
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	e000      	b.n	8018046 <tcp_bind+0xee>
 8018044:	2300      	movs	r3, #0
 8018046:	68fa      	ldr	r2, [r7, #12]
 8018048:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	88fa      	ldrh	r2, [r7, #6]
 801804e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8018050:	4b0c      	ldr	r3, [pc, #48]	; (8018084 <tcp_bind+0x12c>)
 8018052:	681a      	ldr	r2, [r3, #0]
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	60da      	str	r2, [r3, #12]
 8018058:	4a0a      	ldr	r2, [pc, #40]	; (8018084 <tcp_bind+0x12c>)
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	6013      	str	r3, [r2, #0]
 801805e:	f005 fdb7 	bl	801dbd0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8018062:	2300      	movs	r3, #0
}
 8018064:	4618      	mov	r0, r3
 8018066:	3720      	adds	r7, #32
 8018068:	46bd      	mov	sp, r7
 801806a:	bd80      	pop	{r7, pc}
 801806c:	08027398 	.word	0x08027398
 8018070:	080252fc 	.word	0x080252fc
 8018074:	08025490 	.word	0x08025490
 8018078:	08025340 	.word	0x08025340
 801807c:	080254a8 	.word	0x080254a8
 8018080:	08027370 	.word	0x08027370
 8018084:	2000bfb8 	.word	0x2000bfb8

08018088 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8018088:	b580      	push	{r7, lr}
 801808a:	b084      	sub	sp, #16
 801808c:	af00      	add	r7, sp, #0
 801808e:	60f8      	str	r0, [r7, #12]
 8018090:	60b9      	str	r1, [r7, #8]
 8018092:	4613      	mov	r3, r2
 8018094:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8018096:	68bb      	ldr	r3, [r7, #8]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d106      	bne.n	80180aa <tcp_accept_null+0x22>
 801809c:	4b07      	ldr	r3, [pc, #28]	; (80180bc <tcp_accept_null+0x34>)
 801809e:	f240 320f 	movw	r2, #783	; 0x30f
 80180a2:	4907      	ldr	r1, [pc, #28]	; (80180c0 <tcp_accept_null+0x38>)
 80180a4:	4807      	ldr	r0, [pc, #28]	; (80180c4 <tcp_accept_null+0x3c>)
 80180a6:	f00a fb83 	bl	80227b0 <iprintf>

  tcp_abort(pcb);
 80180aa:	68b8      	ldr	r0, [r7, #8]
 80180ac:	f7ff ff48 	bl	8017f40 <tcp_abort>

  return ERR_ABRT;
 80180b0:	f06f 030c 	mvn.w	r3, #12
}
 80180b4:	4618      	mov	r0, r3
 80180b6:	3710      	adds	r7, #16
 80180b8:	46bd      	mov	sp, r7
 80180ba:	bd80      	pop	{r7, pc}
 80180bc:	080252fc 	.word	0x080252fc
 80180c0:	080254d0 	.word	0x080254d0
 80180c4:	08025340 	.word	0x08025340

080180c8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b088      	sub	sp, #32
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	60f8      	str	r0, [r7, #12]
 80180d0:	460b      	mov	r3, r1
 80180d2:	607a      	str	r2, [r7, #4]
 80180d4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80180d6:	2300      	movs	r3, #0
 80180d8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d109      	bne.n	80180f4 <tcp_listen_with_backlog_and_err+0x2c>
 80180e0:	4b47      	ldr	r3, [pc, #284]	; (8018200 <tcp_listen_with_backlog_and_err+0x138>)
 80180e2:	f240 3259 	movw	r2, #857	; 0x359
 80180e6:	4947      	ldr	r1, [pc, #284]	; (8018204 <tcp_listen_with_backlog_and_err+0x13c>)
 80180e8:	4847      	ldr	r0, [pc, #284]	; (8018208 <tcp_listen_with_backlog_and_err+0x140>)
 80180ea:	f00a fb61 	bl	80227b0 <iprintf>
 80180ee:	23f0      	movs	r3, #240	; 0xf0
 80180f0:	76fb      	strb	r3, [r7, #27]
 80180f2:	e079      	b.n	80181e8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	7d1b      	ldrb	r3, [r3, #20]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d009      	beq.n	8018110 <tcp_listen_with_backlog_and_err+0x48>
 80180fc:	4b40      	ldr	r3, [pc, #256]	; (8018200 <tcp_listen_with_backlog_and_err+0x138>)
 80180fe:	f240 325a 	movw	r2, #858	; 0x35a
 8018102:	4942      	ldr	r1, [pc, #264]	; (801820c <tcp_listen_with_backlog_and_err+0x144>)
 8018104:	4840      	ldr	r0, [pc, #256]	; (8018208 <tcp_listen_with_backlog_and_err+0x140>)
 8018106:	f00a fb53 	bl	80227b0 <iprintf>
 801810a:	23f1      	movs	r3, #241	; 0xf1
 801810c:	76fb      	strb	r3, [r7, #27]
 801810e:	e06b      	b.n	80181e8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	7d1b      	ldrb	r3, [r3, #20]
 8018114:	2b01      	cmp	r3, #1
 8018116:	d104      	bne.n	8018122 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801811c:	23f7      	movs	r3, #247	; 0xf7
 801811e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8018120:	e062      	b.n	80181e8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8018122:	2002      	movs	r0, #2
 8018124:	f7fe f9f2 	bl	801650c <memp_malloc>
 8018128:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801812a:	69fb      	ldr	r3, [r7, #28]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d102      	bne.n	8018136 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8018130:	23ff      	movs	r3, #255	; 0xff
 8018132:	76fb      	strb	r3, [r7, #27]
    goto done;
 8018134:	e058      	b.n	80181e8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	691a      	ldr	r2, [r3, #16]
 801813a:	69fb      	ldr	r3, [r7, #28]
 801813c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	8ada      	ldrh	r2, [r3, #22]
 8018142:	69fb      	ldr	r3, [r7, #28]
 8018144:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8018146:	69fb      	ldr	r3, [r7, #28]
 8018148:	2201      	movs	r2, #1
 801814a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	7d5a      	ldrb	r2, [r3, #21]
 8018150:	69fb      	ldr	r3, [r7, #28]
 8018152:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	7a5a      	ldrb	r2, [r3, #9]
 8018158:	69fb      	ldr	r3, [r7, #28]
 801815a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801815c:	69fb      	ldr	r3, [r7, #28]
 801815e:	2200      	movs	r2, #0
 8018160:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	7ada      	ldrb	r2, [r3, #11]
 8018166:	69fb      	ldr	r3, [r7, #28]
 8018168:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	7a9a      	ldrb	r2, [r3, #10]
 801816e:	69fb      	ldr	r3, [r7, #28]
 8018170:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	681a      	ldr	r2, [r3, #0]
 8018176:	69fb      	ldr	r3, [r7, #28]
 8018178:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	8adb      	ldrh	r3, [r3, #22]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d021      	beq.n	80181c6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018182:	4b23      	ldr	r3, [pc, #140]	; (8018210 <tcp_listen_with_backlog_and_err+0x148>)
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	68fa      	ldr	r2, [r7, #12]
 8018188:	429a      	cmp	r2, r3
 801818a:	d105      	bne.n	8018198 <tcp_listen_with_backlog_and_err+0xd0>
 801818c:	4b20      	ldr	r3, [pc, #128]	; (8018210 <tcp_listen_with_backlog_and_err+0x148>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	68db      	ldr	r3, [r3, #12]
 8018192:	4a1f      	ldr	r2, [pc, #124]	; (8018210 <tcp_listen_with_backlog_and_err+0x148>)
 8018194:	6013      	str	r3, [r2, #0]
 8018196:	e013      	b.n	80181c0 <tcp_listen_with_backlog_and_err+0xf8>
 8018198:	4b1d      	ldr	r3, [pc, #116]	; (8018210 <tcp_listen_with_backlog_and_err+0x148>)
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	617b      	str	r3, [r7, #20]
 801819e:	e00c      	b.n	80181ba <tcp_listen_with_backlog_and_err+0xf2>
 80181a0:	697b      	ldr	r3, [r7, #20]
 80181a2:	68db      	ldr	r3, [r3, #12]
 80181a4:	68fa      	ldr	r2, [r7, #12]
 80181a6:	429a      	cmp	r2, r3
 80181a8:	d104      	bne.n	80181b4 <tcp_listen_with_backlog_and_err+0xec>
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	68da      	ldr	r2, [r3, #12]
 80181ae:	697b      	ldr	r3, [r7, #20]
 80181b0:	60da      	str	r2, [r3, #12]
 80181b2:	e005      	b.n	80181c0 <tcp_listen_with_backlog_and_err+0xf8>
 80181b4:	697b      	ldr	r3, [r7, #20]
 80181b6:	68db      	ldr	r3, [r3, #12]
 80181b8:	617b      	str	r3, [r7, #20]
 80181ba:	697b      	ldr	r3, [r7, #20]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d1ef      	bne.n	80181a0 <tcp_listen_with_backlog_and_err+0xd8>
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	2200      	movs	r2, #0
 80181c4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80181c6:	68f8      	ldr	r0, [r7, #12]
 80181c8:	f7ff fb76 	bl	80178b8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80181cc:	69fb      	ldr	r3, [r7, #28]
 80181ce:	4a11      	ldr	r2, [pc, #68]	; (8018214 <tcp_listen_with_backlog_and_err+0x14c>)
 80181d0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80181d2:	4b11      	ldr	r3, [pc, #68]	; (8018218 <tcp_listen_with_backlog_and_err+0x150>)
 80181d4:	681a      	ldr	r2, [r3, #0]
 80181d6:	69fb      	ldr	r3, [r7, #28]
 80181d8:	60da      	str	r2, [r3, #12]
 80181da:	4a0f      	ldr	r2, [pc, #60]	; (8018218 <tcp_listen_with_backlog_and_err+0x150>)
 80181dc:	69fb      	ldr	r3, [r7, #28]
 80181de:	6013      	str	r3, [r2, #0]
 80181e0:	f005 fcf6 	bl	801dbd0 <tcp_timer_needed>
  res = ERR_OK;
 80181e4:	2300      	movs	r3, #0
 80181e6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d002      	beq.n	80181f4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	7efa      	ldrb	r2, [r7, #27]
 80181f2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80181f4:	69fb      	ldr	r3, [r7, #28]
}
 80181f6:	4618      	mov	r0, r3
 80181f8:	3720      	adds	r7, #32
 80181fa:	46bd      	mov	sp, r7
 80181fc:	bd80      	pop	{r7, pc}
 80181fe:	bf00      	nop
 8018200:	080252fc 	.word	0x080252fc
 8018204:	080254f0 	.word	0x080254f0
 8018208:	08025340 	.word	0x08025340
 801820c:	08025520 	.word	0x08025520
 8018210:	2000bfb8 	.word	0x2000bfb8
 8018214:	08018089 	.word	0x08018089
 8018218:	2000bfbc 	.word	0x2000bfbc

0801821c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b084      	sub	sp, #16
 8018220:	af00      	add	r7, sp, #0
 8018222:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d106      	bne.n	8018238 <tcp_update_rcv_ann_wnd+0x1c>
 801822a:	4b25      	ldr	r3, [pc, #148]	; (80182c0 <tcp_update_rcv_ann_wnd+0xa4>)
 801822c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8018230:	4924      	ldr	r1, [pc, #144]	; (80182c4 <tcp_update_rcv_ann_wnd+0xa8>)
 8018232:	4825      	ldr	r0, [pc, #148]	; (80182c8 <tcp_update_rcv_ann_wnd+0xac>)
 8018234:	f00a fabc 	bl	80227b0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801823c:	687a      	ldr	r2, [r7, #4]
 801823e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8018240:	4413      	add	r3, r2
 8018242:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018248:	687a      	ldr	r2, [r7, #4]
 801824a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801824c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8018250:	bf28      	it	cs
 8018252:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8018256:	b292      	uxth	r2, r2
 8018258:	4413      	add	r3, r2
 801825a:	68fa      	ldr	r2, [r7, #12]
 801825c:	1ad3      	subs	r3, r2, r3
 801825e:	2b00      	cmp	r3, #0
 8018260:	db08      	blt.n	8018274 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801826e:	68fa      	ldr	r2, [r7, #12]
 8018270:	1ad3      	subs	r3, r2, r3
 8018272:	e020      	b.n	80182b6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801827c:	1ad3      	subs	r3, r2, r3
 801827e:	2b00      	cmp	r3, #0
 8018280:	dd03      	ble.n	801828a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	2200      	movs	r2, #0
 8018286:	855a      	strh	r2, [r3, #42]	; 0x2a
 8018288:	e014      	b.n	80182b4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018292:	1ad3      	subs	r3, r2, r3
 8018294:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018296:	68bb      	ldr	r3, [r7, #8]
 8018298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801829c:	d306      	bcc.n	80182ac <tcp_update_rcv_ann_wnd+0x90>
 801829e:	4b08      	ldr	r3, [pc, #32]	; (80182c0 <tcp_update_rcv_ann_wnd+0xa4>)
 80182a0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80182a4:	4909      	ldr	r1, [pc, #36]	; (80182cc <tcp_update_rcv_ann_wnd+0xb0>)
 80182a6:	4808      	ldr	r0, [pc, #32]	; (80182c8 <tcp_update_rcv_ann_wnd+0xac>)
 80182a8:	f00a fa82 	bl	80227b0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80182ac:	68bb      	ldr	r3, [r7, #8]
 80182ae:	b29a      	uxth	r2, r3
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80182b4:	2300      	movs	r3, #0
  }
}
 80182b6:	4618      	mov	r0, r3
 80182b8:	3710      	adds	r7, #16
 80182ba:	46bd      	mov	sp, r7
 80182bc:	bd80      	pop	{r7, pc}
 80182be:	bf00      	nop
 80182c0:	080252fc 	.word	0x080252fc
 80182c4:	08025558 	.word	0x08025558
 80182c8:	08025340 	.word	0x08025340
 80182cc:	0802557c 	.word	0x0802557c

080182d0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80182d0:	b580      	push	{r7, lr}
 80182d2:	b084      	sub	sp, #16
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	6078      	str	r0, [r7, #4]
 80182d8:	460b      	mov	r3, r1
 80182da:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d107      	bne.n	80182f2 <tcp_recved+0x22>
 80182e2:	4b1f      	ldr	r3, [pc, #124]	; (8018360 <tcp_recved+0x90>)
 80182e4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80182e8:	491e      	ldr	r1, [pc, #120]	; (8018364 <tcp_recved+0x94>)
 80182ea:	481f      	ldr	r0, [pc, #124]	; (8018368 <tcp_recved+0x98>)
 80182ec:	f00a fa60 	bl	80227b0 <iprintf>
 80182f0:	e032      	b.n	8018358 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	7d1b      	ldrb	r3, [r3, #20]
 80182f6:	2b01      	cmp	r3, #1
 80182f8:	d106      	bne.n	8018308 <tcp_recved+0x38>
 80182fa:	4b19      	ldr	r3, [pc, #100]	; (8018360 <tcp_recved+0x90>)
 80182fc:	f240 32d2 	movw	r2, #978	; 0x3d2
 8018300:	491a      	ldr	r1, [pc, #104]	; (801836c <tcp_recved+0x9c>)
 8018302:	4819      	ldr	r0, [pc, #100]	; (8018368 <tcp_recved+0x98>)
 8018304:	f00a fa54 	bl	80227b0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801830c:	887b      	ldrh	r3, [r7, #2]
 801830e:	4413      	add	r3, r2
 8018310:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8018312:	89fb      	ldrh	r3, [r7, #14]
 8018314:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018318:	d804      	bhi.n	8018324 <tcp_recved+0x54>
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801831e:	89fa      	ldrh	r2, [r7, #14]
 8018320:	429a      	cmp	r2, r3
 8018322:	d204      	bcs.n	801832e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801832a:	851a      	strh	r2, [r3, #40]	; 0x28
 801832c:	e002      	b.n	8018334 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	89fa      	ldrh	r2, [r7, #14]
 8018332:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8018334:	6878      	ldr	r0, [r7, #4]
 8018336:	f7ff ff71 	bl	801821c <tcp_update_rcv_ann_wnd>
 801833a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801833c:	68bb      	ldr	r3, [r7, #8]
 801833e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8018342:	d309      	bcc.n	8018358 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	8b5b      	ldrh	r3, [r3, #26]
 8018348:	f043 0302 	orr.w	r3, r3, #2
 801834c:	b29a      	uxth	r2, r3
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018352:	6878      	ldr	r0, [r7, #4]
 8018354:	f004 fcc6 	bl	801cce4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8018358:	3710      	adds	r7, #16
 801835a:	46bd      	mov	sp, r7
 801835c:	bd80      	pop	{r7, pc}
 801835e:	bf00      	nop
 8018360:	080252fc 	.word	0x080252fc
 8018364:	08025598 	.word	0x08025598
 8018368:	08025340 	.word	0x08025340
 801836c:	080255b0 	.word	0x080255b0

08018370 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8018370:	b480      	push	{r7}
 8018372:	b083      	sub	sp, #12
 8018374:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8018376:	2300      	movs	r3, #0
 8018378:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801837a:	4b1e      	ldr	r3, [pc, #120]	; (80183f4 <tcp_new_port+0x84>)
 801837c:	881b      	ldrh	r3, [r3, #0]
 801837e:	3301      	adds	r3, #1
 8018380:	b29a      	uxth	r2, r3
 8018382:	4b1c      	ldr	r3, [pc, #112]	; (80183f4 <tcp_new_port+0x84>)
 8018384:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8018386:	4b1b      	ldr	r3, [pc, #108]	; (80183f4 <tcp_new_port+0x84>)
 8018388:	881b      	ldrh	r3, [r3, #0]
 801838a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801838e:	4293      	cmp	r3, r2
 8018390:	d103      	bne.n	801839a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8018392:	4b18      	ldr	r3, [pc, #96]	; (80183f4 <tcp_new_port+0x84>)
 8018394:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018398:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801839a:	2300      	movs	r3, #0
 801839c:	71fb      	strb	r3, [r7, #7]
 801839e:	e01e      	b.n	80183de <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80183a0:	79fb      	ldrb	r3, [r7, #7]
 80183a2:	4a15      	ldr	r2, [pc, #84]	; (80183f8 <tcp_new_port+0x88>)
 80183a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	603b      	str	r3, [r7, #0]
 80183ac:	e011      	b.n	80183d2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80183ae:	683b      	ldr	r3, [r7, #0]
 80183b0:	8ada      	ldrh	r2, [r3, #22]
 80183b2:	4b10      	ldr	r3, [pc, #64]	; (80183f4 <tcp_new_port+0x84>)
 80183b4:	881b      	ldrh	r3, [r3, #0]
 80183b6:	429a      	cmp	r2, r3
 80183b8:	d108      	bne.n	80183cc <tcp_new_port+0x5c>
        n++;
 80183ba:	88bb      	ldrh	r3, [r7, #4]
 80183bc:	3301      	adds	r3, #1
 80183be:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80183c0:	88bb      	ldrh	r3, [r7, #4]
 80183c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80183c6:	d3d8      	bcc.n	801837a <tcp_new_port+0xa>
          return 0;
 80183c8:	2300      	movs	r3, #0
 80183ca:	e00d      	b.n	80183e8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80183cc:	683b      	ldr	r3, [r7, #0]
 80183ce:	68db      	ldr	r3, [r3, #12]
 80183d0:	603b      	str	r3, [r7, #0]
 80183d2:	683b      	ldr	r3, [r7, #0]
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d1ea      	bne.n	80183ae <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80183d8:	79fb      	ldrb	r3, [r7, #7]
 80183da:	3301      	adds	r3, #1
 80183dc:	71fb      	strb	r3, [r7, #7]
 80183de:	79fb      	ldrb	r3, [r7, #7]
 80183e0:	2b03      	cmp	r3, #3
 80183e2:	d9dd      	bls.n	80183a0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80183e4:	4b03      	ldr	r3, [pc, #12]	; (80183f4 <tcp_new_port+0x84>)
 80183e6:	881b      	ldrh	r3, [r3, #0]
}
 80183e8:	4618      	mov	r0, r3
 80183ea:	370c      	adds	r7, #12
 80183ec:	46bd      	mov	sp, r7
 80183ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f2:	4770      	bx	lr
 80183f4:	20000028 	.word	0x20000028
 80183f8:	08027370 	.word	0x08027370

080183fc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	b08a      	sub	sp, #40	; 0x28
 8018400:	af00      	add	r7, sp, #0
 8018402:	60f8      	str	r0, [r7, #12]
 8018404:	60b9      	str	r1, [r7, #8]
 8018406:	603b      	str	r3, [r7, #0]
 8018408:	4613      	mov	r3, r2
 801840a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 801840c:	2300      	movs	r3, #0
 801840e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	2b00      	cmp	r3, #0
 8018414:	d109      	bne.n	801842a <tcp_connect+0x2e>
 8018416:	4b7d      	ldr	r3, [pc, #500]	; (801860c <tcp_connect+0x210>)
 8018418:	f240 4235 	movw	r2, #1077	; 0x435
 801841c:	497c      	ldr	r1, [pc, #496]	; (8018610 <tcp_connect+0x214>)
 801841e:	487d      	ldr	r0, [pc, #500]	; (8018614 <tcp_connect+0x218>)
 8018420:	f00a f9c6 	bl	80227b0 <iprintf>
 8018424:	f06f 030f 	mvn.w	r3, #15
 8018428:	e0ec      	b.n	8018604 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801842a:	68bb      	ldr	r3, [r7, #8]
 801842c:	2b00      	cmp	r3, #0
 801842e:	d109      	bne.n	8018444 <tcp_connect+0x48>
 8018430:	4b76      	ldr	r3, [pc, #472]	; (801860c <tcp_connect+0x210>)
 8018432:	f240 4236 	movw	r2, #1078	; 0x436
 8018436:	4978      	ldr	r1, [pc, #480]	; (8018618 <tcp_connect+0x21c>)
 8018438:	4876      	ldr	r0, [pc, #472]	; (8018614 <tcp_connect+0x218>)
 801843a:	f00a f9b9 	bl	80227b0 <iprintf>
 801843e:	f06f 030f 	mvn.w	r3, #15
 8018442:	e0df      	b.n	8018604 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	7d1b      	ldrb	r3, [r3, #20]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d009      	beq.n	8018460 <tcp_connect+0x64>
 801844c:	4b6f      	ldr	r3, [pc, #444]	; (801860c <tcp_connect+0x210>)
 801844e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8018452:	4972      	ldr	r1, [pc, #456]	; (801861c <tcp_connect+0x220>)
 8018454:	486f      	ldr	r0, [pc, #444]	; (8018614 <tcp_connect+0x218>)
 8018456:	f00a f9ab 	bl	80227b0 <iprintf>
 801845a:	f06f 0309 	mvn.w	r3, #9
 801845e:	e0d1      	b.n	8018604 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8018460:	68bb      	ldr	r3, [r7, #8]
 8018462:	2b00      	cmp	r3, #0
 8018464:	d002      	beq.n	801846c <tcp_connect+0x70>
 8018466:	68bb      	ldr	r3, [r7, #8]
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	e000      	b.n	801846e <tcp_connect+0x72>
 801846c:	2300      	movs	r3, #0
 801846e:	68fa      	ldr	r2, [r7, #12]
 8018470:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	88fa      	ldrh	r2, [r7, #6]
 8018476:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	7a1b      	ldrb	r3, [r3, #8]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d006      	beq.n	801848e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	7a1b      	ldrb	r3, [r3, #8]
 8018484:	4618      	mov	r0, r3
 8018486:	f7fe fbcd 	bl	8016c24 <netif_get_by_index>
 801848a:	6278      	str	r0, [r7, #36]	; 0x24
 801848c:	e005      	b.n	801849a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	3304      	adds	r3, #4
 8018492:	4618      	mov	r0, r3
 8018494:	f007 fb48 	bl	801fb28 <ip4_route>
 8018498:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801849c:	2b00      	cmp	r3, #0
 801849e:	d102      	bne.n	80184a6 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80184a0:	f06f 0303 	mvn.w	r3, #3
 80184a4:	e0ae      	b.n	8018604 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d003      	beq.n	80184b4 <tcp_connect+0xb8>
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d111      	bne.n	80184d8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 80184b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d002      	beq.n	80184c0 <tcp_connect+0xc4>
 80184ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184bc:	3304      	adds	r3, #4
 80184be:	e000      	b.n	80184c2 <tcp_connect+0xc6>
 80184c0:	2300      	movs	r3, #0
 80184c2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 80184c4:	69fb      	ldr	r3, [r7, #28]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d102      	bne.n	80184d0 <tcp_connect+0xd4>
      return ERR_RTE;
 80184ca:	f06f 0303 	mvn.w	r3, #3
 80184ce:	e099      	b.n	8018604 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80184d0:	69fb      	ldr	r3, [r7, #28]
 80184d2:	681a      	ldr	r2, [r3, #0]
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	8adb      	ldrh	r3, [r3, #22]
 80184dc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	8adb      	ldrh	r3, [r3, #22]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d10c      	bne.n	8018500 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80184e6:	f7ff ff43 	bl	8018370 <tcp_new_port>
 80184ea:	4603      	mov	r3, r0
 80184ec:	461a      	mov	r2, r3
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	8adb      	ldrh	r3, [r3, #22]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d102      	bne.n	8018500 <tcp_connect+0x104>
      return ERR_BUF;
 80184fa:	f06f 0301 	mvn.w	r3, #1
 80184fe:	e081      	b.n	8018604 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8018500:	68f8      	ldr	r0, [r7, #12]
 8018502:	f001 f867 	bl	80195d4 <tcp_next_iss>
 8018506:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	2200      	movs	r2, #0
 801850c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	697a      	ldr	r2, [r7, #20]
 8018512:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8018514:	697b      	ldr	r3, [r7, #20]
 8018516:	1e5a      	subs	r2, r3, #1
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 801851c:	697b      	ldr	r3, [r7, #20]
 801851e:	1e5a      	subs	r2, r3, #1
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8018524:	697b      	ldr	r3, [r7, #20]
 8018526:	1e5a      	subs	r2, r3, #1
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8018532:	855a      	strh	r2, [r3, #42]	; 0x2a
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801854a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018554:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	3304      	adds	r3, #4
 801855e:	461a      	mov	r2, r3
 8018560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018562:	f001 f85d 	bl	8019620 <tcp_eff_send_mss_netif>
 8018566:	4603      	mov	r3, r0
 8018568:	461a      	mov	r2, r3
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	2201      	movs	r2, #1
 8018572:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	683a      	ldr	r2, [r7, #0]
 801857a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801857e:	2102      	movs	r1, #2
 8018580:	68f8      	ldr	r0, [r7, #12]
 8018582:	f004 fac1 	bl	801cb08 <tcp_enqueue_flags>
 8018586:	4603      	mov	r3, r0
 8018588:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801858a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d136      	bne.n	8018600 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	2202      	movs	r2, #2
 8018596:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8018598:	8b7b      	ldrh	r3, [r7, #26]
 801859a:	2b00      	cmp	r3, #0
 801859c:	d021      	beq.n	80185e2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801859e:	4b20      	ldr	r3, [pc, #128]	; (8018620 <tcp_connect+0x224>)
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	68fa      	ldr	r2, [r7, #12]
 80185a4:	429a      	cmp	r2, r3
 80185a6:	d105      	bne.n	80185b4 <tcp_connect+0x1b8>
 80185a8:	4b1d      	ldr	r3, [pc, #116]	; (8018620 <tcp_connect+0x224>)
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	68db      	ldr	r3, [r3, #12]
 80185ae:	4a1c      	ldr	r2, [pc, #112]	; (8018620 <tcp_connect+0x224>)
 80185b0:	6013      	str	r3, [r2, #0]
 80185b2:	e013      	b.n	80185dc <tcp_connect+0x1e0>
 80185b4:	4b1a      	ldr	r3, [pc, #104]	; (8018620 <tcp_connect+0x224>)
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	623b      	str	r3, [r7, #32]
 80185ba:	e00c      	b.n	80185d6 <tcp_connect+0x1da>
 80185bc:	6a3b      	ldr	r3, [r7, #32]
 80185be:	68db      	ldr	r3, [r3, #12]
 80185c0:	68fa      	ldr	r2, [r7, #12]
 80185c2:	429a      	cmp	r2, r3
 80185c4:	d104      	bne.n	80185d0 <tcp_connect+0x1d4>
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	68da      	ldr	r2, [r3, #12]
 80185ca:	6a3b      	ldr	r3, [r7, #32]
 80185cc:	60da      	str	r2, [r3, #12]
 80185ce:	e005      	b.n	80185dc <tcp_connect+0x1e0>
 80185d0:	6a3b      	ldr	r3, [r7, #32]
 80185d2:	68db      	ldr	r3, [r3, #12]
 80185d4:	623b      	str	r3, [r7, #32]
 80185d6:	6a3b      	ldr	r3, [r7, #32]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d1ef      	bne.n	80185bc <tcp_connect+0x1c0>
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	2200      	movs	r2, #0
 80185e0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80185e2:	4b10      	ldr	r3, [pc, #64]	; (8018624 <tcp_connect+0x228>)
 80185e4:	681a      	ldr	r2, [r3, #0]
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	60da      	str	r2, [r3, #12]
 80185ea:	4a0e      	ldr	r2, [pc, #56]	; (8018624 <tcp_connect+0x228>)
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	6013      	str	r3, [r2, #0]
 80185f0:	f005 faee 	bl	801dbd0 <tcp_timer_needed>
 80185f4:	4b0c      	ldr	r3, [pc, #48]	; (8018628 <tcp_connect+0x22c>)
 80185f6:	2201      	movs	r2, #1
 80185f8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80185fa:	68f8      	ldr	r0, [r7, #12]
 80185fc:	f004 fb72 	bl	801cce4 <tcp_output>
  }
  return ret;
 8018600:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8018604:	4618      	mov	r0, r3
 8018606:	3728      	adds	r7, #40	; 0x28
 8018608:	46bd      	mov	sp, r7
 801860a:	bd80      	pop	{r7, pc}
 801860c:	080252fc 	.word	0x080252fc
 8018610:	080255d8 	.word	0x080255d8
 8018614:	08025340 	.word	0x08025340
 8018618:	080255f4 	.word	0x080255f4
 801861c:	08025610 	.word	0x08025610
 8018620:	2000bfb8 	.word	0x2000bfb8
 8018624:	2000bfc0 	.word	0x2000bfc0
 8018628:	2000bfc8 	.word	0x2000bfc8

0801862c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801862c:	b5b0      	push	{r4, r5, r7, lr}
 801862e:	b090      	sub	sp, #64	; 0x40
 8018630:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8018632:	2300      	movs	r3, #0
 8018634:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8018638:	4b94      	ldr	r3, [pc, #592]	; (801888c <tcp_slowtmr+0x260>)
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	3301      	adds	r3, #1
 801863e:	4a93      	ldr	r2, [pc, #588]	; (801888c <tcp_slowtmr+0x260>)
 8018640:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8018642:	4b93      	ldr	r3, [pc, #588]	; (8018890 <tcp_slowtmr+0x264>)
 8018644:	781b      	ldrb	r3, [r3, #0]
 8018646:	3301      	adds	r3, #1
 8018648:	b2da      	uxtb	r2, r3
 801864a:	4b91      	ldr	r3, [pc, #580]	; (8018890 <tcp_slowtmr+0x264>)
 801864c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801864e:	2300      	movs	r3, #0
 8018650:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8018652:	4b90      	ldr	r3, [pc, #576]	; (8018894 <tcp_slowtmr+0x268>)
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8018658:	e29d      	b.n	8018b96 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801865a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801865c:	7d1b      	ldrb	r3, [r3, #20]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d106      	bne.n	8018670 <tcp_slowtmr+0x44>
 8018662:	4b8d      	ldr	r3, [pc, #564]	; (8018898 <tcp_slowtmr+0x26c>)
 8018664:	f240 42be 	movw	r2, #1214	; 0x4be
 8018668:	498c      	ldr	r1, [pc, #560]	; (801889c <tcp_slowtmr+0x270>)
 801866a:	488d      	ldr	r0, [pc, #564]	; (80188a0 <tcp_slowtmr+0x274>)
 801866c:	f00a f8a0 	bl	80227b0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8018670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018672:	7d1b      	ldrb	r3, [r3, #20]
 8018674:	2b01      	cmp	r3, #1
 8018676:	d106      	bne.n	8018686 <tcp_slowtmr+0x5a>
 8018678:	4b87      	ldr	r3, [pc, #540]	; (8018898 <tcp_slowtmr+0x26c>)
 801867a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801867e:	4989      	ldr	r1, [pc, #548]	; (80188a4 <tcp_slowtmr+0x278>)
 8018680:	4887      	ldr	r0, [pc, #540]	; (80188a0 <tcp_slowtmr+0x274>)
 8018682:	f00a f895 	bl	80227b0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8018686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018688:	7d1b      	ldrb	r3, [r3, #20]
 801868a:	2b0a      	cmp	r3, #10
 801868c:	d106      	bne.n	801869c <tcp_slowtmr+0x70>
 801868e:	4b82      	ldr	r3, [pc, #520]	; (8018898 <tcp_slowtmr+0x26c>)
 8018690:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8018694:	4984      	ldr	r1, [pc, #528]	; (80188a8 <tcp_slowtmr+0x27c>)
 8018696:	4882      	ldr	r0, [pc, #520]	; (80188a0 <tcp_slowtmr+0x274>)
 8018698:	f00a f88a 	bl	80227b0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801869c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801869e:	7f9a      	ldrb	r2, [r3, #30]
 80186a0:	4b7b      	ldr	r3, [pc, #492]	; (8018890 <tcp_slowtmr+0x264>)
 80186a2:	781b      	ldrb	r3, [r3, #0]
 80186a4:	429a      	cmp	r2, r3
 80186a6:	d105      	bne.n	80186b4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80186a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80186ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ae:	68db      	ldr	r3, [r3, #12]
 80186b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80186b2:	e270      	b.n	8018b96 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80186b4:	4b76      	ldr	r3, [pc, #472]	; (8018890 <tcp_slowtmr+0x264>)
 80186b6:	781a      	ldrb	r2, [r3, #0]
 80186b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ba:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80186bc:	2300      	movs	r3, #0
 80186be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80186c2:	2300      	movs	r3, #0
 80186c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80186c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ca:	7d1b      	ldrb	r3, [r3, #20]
 80186cc:	2b02      	cmp	r3, #2
 80186ce:	d10a      	bne.n	80186e6 <tcp_slowtmr+0xba>
 80186d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80186d6:	2b05      	cmp	r3, #5
 80186d8:	d905      	bls.n	80186e6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80186da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186de:	3301      	adds	r3, #1
 80186e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80186e4:	e11e      	b.n	8018924 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80186e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80186ec:	2b0b      	cmp	r3, #11
 80186ee:	d905      	bls.n	80186fc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80186f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186f4:	3301      	adds	r3, #1
 80186f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80186fa:	e113      	b.n	8018924 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80186fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018702:	2b00      	cmp	r3, #0
 8018704:	d075      	beq.n	80187f2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8018706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801870a:	2b00      	cmp	r3, #0
 801870c:	d006      	beq.n	801871c <tcp_slowtmr+0xf0>
 801870e:	4b62      	ldr	r3, [pc, #392]	; (8018898 <tcp_slowtmr+0x26c>)
 8018710:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8018714:	4965      	ldr	r1, [pc, #404]	; (80188ac <tcp_slowtmr+0x280>)
 8018716:	4862      	ldr	r0, [pc, #392]	; (80188a0 <tcp_slowtmr+0x274>)
 8018718:	f00a f84a 	bl	80227b0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801871e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018720:	2b00      	cmp	r3, #0
 8018722:	d106      	bne.n	8018732 <tcp_slowtmr+0x106>
 8018724:	4b5c      	ldr	r3, [pc, #368]	; (8018898 <tcp_slowtmr+0x26c>)
 8018726:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801872a:	4961      	ldr	r1, [pc, #388]	; (80188b0 <tcp_slowtmr+0x284>)
 801872c:	485c      	ldr	r0, [pc, #368]	; (80188a0 <tcp_slowtmr+0x274>)
 801872e:	f00a f83f 	bl	80227b0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8018732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018734:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018738:	2b0b      	cmp	r3, #11
 801873a:	d905      	bls.n	8018748 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801873c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018740:	3301      	adds	r3, #1
 8018742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018746:	e0ed      	b.n	8018924 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8018748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801874a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801874e:	3b01      	subs	r3, #1
 8018750:	4a58      	ldr	r2, [pc, #352]	; (80188b4 <tcp_slowtmr+0x288>)
 8018752:	5cd3      	ldrb	r3, [r2, r3]
 8018754:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8018756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018758:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801875c:	7c7a      	ldrb	r2, [r7, #17]
 801875e:	429a      	cmp	r2, r3
 8018760:	d907      	bls.n	8018772 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8018762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018764:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8018768:	3301      	adds	r3, #1
 801876a:	b2da      	uxtb	r2, r3
 801876c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801876e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8018772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018774:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8018778:	7c7a      	ldrb	r2, [r7, #17]
 801877a:	429a      	cmp	r2, r3
 801877c:	f200 80d2 	bhi.w	8018924 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8018780:	2301      	movs	r3, #1
 8018782:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8018784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018786:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801878a:	2b00      	cmp	r3, #0
 801878c:	d108      	bne.n	80187a0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801878e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018790:	f005 f950 	bl	801da34 <tcp_zero_window_probe>
 8018794:	4603      	mov	r3, r0
 8018796:	2b00      	cmp	r3, #0
 8018798:	d014      	beq.n	80187c4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801879a:	2300      	movs	r3, #0
 801879c:	623b      	str	r3, [r7, #32]
 801879e:	e011      	b.n	80187c4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80187a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80187a6:	4619      	mov	r1, r3
 80187a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187aa:	f004 f815 	bl	801c7d8 <tcp_split_unsent_seg>
 80187ae:	4603      	mov	r3, r0
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d107      	bne.n	80187c4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80187b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187b6:	f004 fa95 	bl	801cce4 <tcp_output>
 80187ba:	4603      	mov	r3, r0
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d101      	bne.n	80187c4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80187c0:	2300      	movs	r3, #0
 80187c2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80187c4:	6a3b      	ldr	r3, [r7, #32]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	f000 80ac 	beq.w	8018924 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80187cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ce:	2200      	movs	r2, #0
 80187d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80187d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80187da:	2b06      	cmp	r3, #6
 80187dc:	f200 80a2 	bhi.w	8018924 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80187e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80187e6:	3301      	adds	r3, #1
 80187e8:	b2da      	uxtb	r2, r3
 80187ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80187f0:	e098      	b.n	8018924 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80187f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	db0f      	blt.n	801881c <tcp_slowtmr+0x1f0>
 80187fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018802:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018806:	4293      	cmp	r3, r2
 8018808:	d008      	beq.n	801881c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801880c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018810:	b29b      	uxth	r3, r3
 8018812:	3301      	adds	r3, #1
 8018814:	b29b      	uxth	r3, r3
 8018816:	b21a      	sxth	r2, r3
 8018818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801881a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801881c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801881e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8018822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018824:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8018828:	429a      	cmp	r2, r3
 801882a:	db7b      	blt.n	8018924 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801882c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801882e:	f004 fd4b 	bl	801d2c8 <tcp_rexmit_rto_prepare>
 8018832:	4603      	mov	r3, r0
 8018834:	2b00      	cmp	r3, #0
 8018836:	d007      	beq.n	8018848 <tcp_slowtmr+0x21c>
 8018838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801883a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801883c:	2b00      	cmp	r3, #0
 801883e:	d171      	bne.n	8018924 <tcp_slowtmr+0x2f8>
 8018840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018844:	2b00      	cmp	r3, #0
 8018846:	d06d      	beq.n	8018924 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8018848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801884a:	7d1b      	ldrb	r3, [r3, #20]
 801884c:	2b02      	cmp	r3, #2
 801884e:	d03a      	beq.n	80188c6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8018850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018852:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018856:	2b0c      	cmp	r3, #12
 8018858:	bf28      	it	cs
 801885a:	230c      	movcs	r3, #12
 801885c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018860:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018864:	10db      	asrs	r3, r3, #3
 8018866:	b21b      	sxth	r3, r3
 8018868:	461a      	mov	r2, r3
 801886a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801886c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018870:	4413      	add	r3, r2
 8018872:	7efa      	ldrb	r2, [r7, #27]
 8018874:	4910      	ldr	r1, [pc, #64]	; (80188b8 <tcp_slowtmr+0x28c>)
 8018876:	5c8a      	ldrb	r2, [r1, r2]
 8018878:	4093      	lsls	r3, r2
 801887a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801887c:	697b      	ldr	r3, [r7, #20]
 801887e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8018882:	4293      	cmp	r3, r2
 8018884:	dc1a      	bgt.n	80188bc <tcp_slowtmr+0x290>
 8018886:	697b      	ldr	r3, [r7, #20]
 8018888:	b21a      	sxth	r2, r3
 801888a:	e019      	b.n	80188c0 <tcp_slowtmr+0x294>
 801888c:	2000bfb4 	.word	0x2000bfb4
 8018890:	2000bfca 	.word	0x2000bfca
 8018894:	2000bfc0 	.word	0x2000bfc0
 8018898:	080252fc 	.word	0x080252fc
 801889c:	08025640 	.word	0x08025640
 80188a0:	08025340 	.word	0x08025340
 80188a4:	0802566c 	.word	0x0802566c
 80188a8:	08025698 	.word	0x08025698
 80188ac:	080256c8 	.word	0x080256c8
 80188b0:	080256fc 	.word	0x080256fc
 80188b4:	08027368 	.word	0x08027368
 80188b8:	08027358 	.word	0x08027358
 80188bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80188c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80188c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188c8:	2200      	movs	r2, #0
 80188ca:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80188cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80188d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80188d8:	4293      	cmp	r3, r2
 80188da:	bf28      	it	cs
 80188dc:	4613      	movcs	r3, r2
 80188de:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80188e0:	8a7b      	ldrh	r3, [r7, #18]
 80188e2:	085b      	lsrs	r3, r3, #1
 80188e4:	b29a      	uxth	r2, r3
 80188e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80188ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80188f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80188f6:	005b      	lsls	r3, r3, #1
 80188f8:	b29b      	uxth	r3, r3
 80188fa:	429a      	cmp	r2, r3
 80188fc:	d206      	bcs.n	801890c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80188fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018902:	005b      	lsls	r3, r3, #1
 8018904:	b29a      	uxth	r2, r3
 8018906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018908:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801890e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8018910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018912:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8018916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018918:	2200      	movs	r2, #0
 801891a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801891e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018920:	f004 fd42 	bl	801d3a8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8018924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018926:	7d1b      	ldrb	r3, [r3, #20]
 8018928:	2b06      	cmp	r3, #6
 801892a:	d111      	bne.n	8018950 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801892c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801892e:	8b5b      	ldrh	r3, [r3, #26]
 8018930:	f003 0310 	and.w	r3, r3, #16
 8018934:	2b00      	cmp	r3, #0
 8018936:	d00b      	beq.n	8018950 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018938:	4b9c      	ldr	r3, [pc, #624]	; (8018bac <tcp_slowtmr+0x580>)
 801893a:	681a      	ldr	r2, [r3, #0]
 801893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801893e:	6a1b      	ldr	r3, [r3, #32]
 8018940:	1ad3      	subs	r3, r2, r3
 8018942:	2b28      	cmp	r3, #40	; 0x28
 8018944:	d904      	bls.n	8018950 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8018946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801894a:	3301      	adds	r3, #1
 801894c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8018950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018952:	7a5b      	ldrb	r3, [r3, #9]
 8018954:	f003 0308 	and.w	r3, r3, #8
 8018958:	2b00      	cmp	r3, #0
 801895a:	d04a      	beq.n	80189f2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801895e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8018960:	2b04      	cmp	r3, #4
 8018962:	d003      	beq.n	801896c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8018964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018966:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8018968:	2b07      	cmp	r3, #7
 801896a:	d142      	bne.n	80189f2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801896c:	4b8f      	ldr	r3, [pc, #572]	; (8018bac <tcp_slowtmr+0x580>)
 801896e:	681a      	ldr	r2, [r3, #0]
 8018970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018972:	6a1b      	ldr	r3, [r3, #32]
 8018974:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8018976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018978:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801897c:	4b8c      	ldr	r3, [pc, #560]	; (8018bb0 <tcp_slowtmr+0x584>)
 801897e:	440b      	add	r3, r1
 8018980:	498c      	ldr	r1, [pc, #560]	; (8018bb4 <tcp_slowtmr+0x588>)
 8018982:	fba1 1303 	umull	r1, r3, r1, r3
 8018986:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018988:	429a      	cmp	r2, r3
 801898a:	d90a      	bls.n	80189a2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801898c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018990:	3301      	adds	r3, #1
 8018992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8018996:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801899a:	3301      	adds	r3, #1
 801899c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80189a0:	e027      	b.n	80189f2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80189a2:	4b82      	ldr	r3, [pc, #520]	; (8018bac <tcp_slowtmr+0x580>)
 80189a4:	681a      	ldr	r2, [r3, #0]
 80189a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189a8:	6a1b      	ldr	r3, [r3, #32]
 80189aa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80189ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189ae:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80189b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189b4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80189b8:	4618      	mov	r0, r3
 80189ba:	4b7f      	ldr	r3, [pc, #508]	; (8018bb8 <tcp_slowtmr+0x58c>)
 80189bc:	fb00 f303 	mul.w	r3, r0, r3
 80189c0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80189c2:	497c      	ldr	r1, [pc, #496]	; (8018bb4 <tcp_slowtmr+0x588>)
 80189c4:	fba1 1303 	umull	r1, r3, r1, r3
 80189c8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80189ca:	429a      	cmp	r2, r3
 80189cc:	d911      	bls.n	80189f2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80189ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80189d0:	f004 fff0 	bl	801d9b4 <tcp_keepalive>
 80189d4:	4603      	mov	r3, r0
 80189d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80189da:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d107      	bne.n	80189f2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80189e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189e4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80189e8:	3301      	adds	r3, #1
 80189ea:	b2da      	uxtb	r2, r3
 80189ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189ee:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80189f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d011      	beq.n	8018a1e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80189fa:	4b6c      	ldr	r3, [pc, #432]	; (8018bac <tcp_slowtmr+0x580>)
 80189fc:	681a      	ldr	r2, [r3, #0]
 80189fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a00:	6a1b      	ldr	r3, [r3, #32]
 8018a02:	1ad2      	subs	r2, r2, r3
 8018a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a06:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8018a0a:	4619      	mov	r1, r3
 8018a0c:	460b      	mov	r3, r1
 8018a0e:	005b      	lsls	r3, r3, #1
 8018a10:	440b      	add	r3, r1
 8018a12:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8018a14:	429a      	cmp	r2, r3
 8018a16:	d302      	bcc.n	8018a1e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8018a18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018a1a:	f000 feab 	bl	8019774 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8018a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a20:	7d1b      	ldrb	r3, [r3, #20]
 8018a22:	2b03      	cmp	r3, #3
 8018a24:	d10b      	bne.n	8018a3e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018a26:	4b61      	ldr	r3, [pc, #388]	; (8018bac <tcp_slowtmr+0x580>)
 8018a28:	681a      	ldr	r2, [r3, #0]
 8018a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a2c:	6a1b      	ldr	r3, [r3, #32]
 8018a2e:	1ad3      	subs	r3, r2, r3
 8018a30:	2b28      	cmp	r3, #40	; 0x28
 8018a32:	d904      	bls.n	8018a3e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8018a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a38:	3301      	adds	r3, #1
 8018a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8018a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a40:	7d1b      	ldrb	r3, [r3, #20]
 8018a42:	2b09      	cmp	r3, #9
 8018a44:	d10b      	bne.n	8018a5e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8018a46:	4b59      	ldr	r3, [pc, #356]	; (8018bac <tcp_slowtmr+0x580>)
 8018a48:	681a      	ldr	r2, [r3, #0]
 8018a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a4c:	6a1b      	ldr	r3, [r3, #32]
 8018a4e:	1ad3      	subs	r3, r2, r3
 8018a50:	2bf0      	cmp	r3, #240	; 0xf0
 8018a52:	d904      	bls.n	8018a5e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8018a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a58:	3301      	adds	r3, #1
 8018a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8018a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d060      	beq.n	8018b28 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8018a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018a6c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8018a6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018a70:	f000 fccc 	bl	801940c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8018a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d010      	beq.n	8018a9c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8018a7a:	4b50      	ldr	r3, [pc, #320]	; (8018bbc <tcp_slowtmr+0x590>)
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018a80:	429a      	cmp	r2, r3
 8018a82:	d106      	bne.n	8018a92 <tcp_slowtmr+0x466>
 8018a84:	4b4e      	ldr	r3, [pc, #312]	; (8018bc0 <tcp_slowtmr+0x594>)
 8018a86:	f240 526d 	movw	r2, #1389	; 0x56d
 8018a8a:	494e      	ldr	r1, [pc, #312]	; (8018bc4 <tcp_slowtmr+0x598>)
 8018a8c:	484e      	ldr	r0, [pc, #312]	; (8018bc8 <tcp_slowtmr+0x59c>)
 8018a8e:	f009 fe8f 	bl	80227b0 <iprintf>
        prev->next = pcb->next;
 8018a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a94:	68da      	ldr	r2, [r3, #12]
 8018a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a98:	60da      	str	r2, [r3, #12]
 8018a9a:	e00f      	b.n	8018abc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8018a9c:	4b47      	ldr	r3, [pc, #284]	; (8018bbc <tcp_slowtmr+0x590>)
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018aa2:	429a      	cmp	r2, r3
 8018aa4:	d006      	beq.n	8018ab4 <tcp_slowtmr+0x488>
 8018aa6:	4b46      	ldr	r3, [pc, #280]	; (8018bc0 <tcp_slowtmr+0x594>)
 8018aa8:	f240 5271 	movw	r2, #1393	; 0x571
 8018aac:	4947      	ldr	r1, [pc, #284]	; (8018bcc <tcp_slowtmr+0x5a0>)
 8018aae:	4846      	ldr	r0, [pc, #280]	; (8018bc8 <tcp_slowtmr+0x59c>)
 8018ab0:	f009 fe7e 	bl	80227b0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8018ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ab6:	68db      	ldr	r3, [r3, #12]
 8018ab8:	4a40      	ldr	r2, [pc, #256]	; (8018bbc <tcp_slowtmr+0x590>)
 8018aba:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8018abc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d013      	beq.n	8018aec <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ac6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8018ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018acc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8018ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ad0:	3304      	adds	r3, #4
 8018ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018ad4:	8ad2      	ldrh	r2, [r2, #22]
 8018ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018ad8:	8b09      	ldrh	r1, [r1, #24]
 8018ada:	9102      	str	r1, [sp, #8]
 8018adc:	9201      	str	r2, [sp, #4]
 8018ade:	9300      	str	r3, [sp, #0]
 8018ae0:	462b      	mov	r3, r5
 8018ae2:	4622      	mov	r2, r4
 8018ae4:	4601      	mov	r1, r0
 8018ae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018ae8:	f004 feb0 	bl	801d84c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8018aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aee:	691b      	ldr	r3, [r3, #16]
 8018af0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8018af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018af4:	7d1b      	ldrb	r3, [r3, #20]
 8018af6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8018af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018afa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8018afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018afe:	68db      	ldr	r3, [r3, #12]
 8018b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8018b02:	6838      	ldr	r0, [r7, #0]
 8018b04:	f7fe fed8 	bl	80178b8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8018b08:	4b31      	ldr	r3, [pc, #196]	; (8018bd0 <tcp_slowtmr+0x5a4>)
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d004      	beq.n	8018b1e <tcp_slowtmr+0x4f2>
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	f06f 010c 	mvn.w	r1, #12
 8018b1a:	68b8      	ldr	r0, [r7, #8]
 8018b1c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8018b1e:	4b2c      	ldr	r3, [pc, #176]	; (8018bd0 <tcp_slowtmr+0x5a4>)
 8018b20:	781b      	ldrb	r3, [r3, #0]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d037      	beq.n	8018b96 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8018b26:	e592      	b.n	801864e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8018b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b2a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8018b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b2e:	68db      	ldr	r3, [r3, #12]
 8018b30:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8018b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b34:	7f1b      	ldrb	r3, [r3, #28]
 8018b36:	3301      	adds	r3, #1
 8018b38:	b2da      	uxtb	r2, r3
 8018b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b3c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8018b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b40:	7f1a      	ldrb	r2, [r3, #28]
 8018b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b44:	7f5b      	ldrb	r3, [r3, #29]
 8018b46:	429a      	cmp	r2, r3
 8018b48:	d325      	bcc.n	8018b96 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8018b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b4c:	2200      	movs	r2, #0
 8018b4e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8018b50:	4b1f      	ldr	r3, [pc, #124]	; (8018bd0 <tcp_slowtmr+0x5a4>)
 8018b52:	2200      	movs	r2, #0
 8018b54:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8018b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d00b      	beq.n	8018b78 <tcp_slowtmr+0x54c>
 8018b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b68:	6912      	ldr	r2, [r2, #16]
 8018b6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018b6c:	4610      	mov	r0, r2
 8018b6e:	4798      	blx	r3
 8018b70:	4603      	mov	r3, r0
 8018b72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8018b76:	e002      	b.n	8018b7e <tcp_slowtmr+0x552>
 8018b78:	2300      	movs	r3, #0
 8018b7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8018b7e:	4b14      	ldr	r3, [pc, #80]	; (8018bd0 <tcp_slowtmr+0x5a4>)
 8018b80:	781b      	ldrb	r3, [r3, #0]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d000      	beq.n	8018b88 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8018b86:	e562      	b.n	801864e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8018b88:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d102      	bne.n	8018b96 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8018b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b92:	f004 f8a7 	bl	801cce4 <tcp_output>
  while (pcb != NULL) {
 8018b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	f47f ad5e 	bne.w	801865a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8018ba2:	4b0c      	ldr	r3, [pc, #48]	; (8018bd4 <tcp_slowtmr+0x5a8>)
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8018ba8:	e069      	b.n	8018c7e <tcp_slowtmr+0x652>
 8018baa:	bf00      	nop
 8018bac:	2000bfb4 	.word	0x2000bfb4
 8018bb0:	000a4cb8 	.word	0x000a4cb8
 8018bb4:	10624dd3 	.word	0x10624dd3
 8018bb8:	000124f8 	.word	0x000124f8
 8018bbc:	2000bfc0 	.word	0x2000bfc0
 8018bc0:	080252fc 	.word	0x080252fc
 8018bc4:	08025734 	.word	0x08025734
 8018bc8:	08025340 	.word	0x08025340
 8018bcc:	08025760 	.word	0x08025760
 8018bd0:	2000bfc8 	.word	0x2000bfc8
 8018bd4:	2000bfc4 	.word	0x2000bfc4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bda:	7d1b      	ldrb	r3, [r3, #20]
 8018bdc:	2b0a      	cmp	r3, #10
 8018bde:	d006      	beq.n	8018bee <tcp_slowtmr+0x5c2>
 8018be0:	4b2b      	ldr	r3, [pc, #172]	; (8018c90 <tcp_slowtmr+0x664>)
 8018be2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8018be6:	492b      	ldr	r1, [pc, #172]	; (8018c94 <tcp_slowtmr+0x668>)
 8018be8:	482b      	ldr	r0, [pc, #172]	; (8018c98 <tcp_slowtmr+0x66c>)
 8018bea:	f009 fde1 	bl	80227b0 <iprintf>
    pcb_remove = 0;
 8018bee:	2300      	movs	r3, #0
 8018bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8018bf4:	4b29      	ldr	r3, [pc, #164]	; (8018c9c <tcp_slowtmr+0x670>)
 8018bf6:	681a      	ldr	r2, [r3, #0]
 8018bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bfa:	6a1b      	ldr	r3, [r3, #32]
 8018bfc:	1ad3      	subs	r3, r2, r3
 8018bfe:	2bf0      	cmp	r3, #240	; 0xf0
 8018c00:	d904      	bls.n	8018c0c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8018c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c06:	3301      	adds	r3, #1
 8018c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8018c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d02f      	beq.n	8018c74 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8018c14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018c16:	f000 fbf9 	bl	801940c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8018c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d010      	beq.n	8018c42 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8018c20:	4b1f      	ldr	r3, [pc, #124]	; (8018ca0 <tcp_slowtmr+0x674>)
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c26:	429a      	cmp	r2, r3
 8018c28:	d106      	bne.n	8018c38 <tcp_slowtmr+0x60c>
 8018c2a:	4b19      	ldr	r3, [pc, #100]	; (8018c90 <tcp_slowtmr+0x664>)
 8018c2c:	f240 52af 	movw	r2, #1455	; 0x5af
 8018c30:	491c      	ldr	r1, [pc, #112]	; (8018ca4 <tcp_slowtmr+0x678>)
 8018c32:	4819      	ldr	r0, [pc, #100]	; (8018c98 <tcp_slowtmr+0x66c>)
 8018c34:	f009 fdbc 	bl	80227b0 <iprintf>
        prev->next = pcb->next;
 8018c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c3a:	68da      	ldr	r2, [r3, #12]
 8018c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c3e:	60da      	str	r2, [r3, #12]
 8018c40:	e00f      	b.n	8018c62 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8018c42:	4b17      	ldr	r3, [pc, #92]	; (8018ca0 <tcp_slowtmr+0x674>)
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c48:	429a      	cmp	r2, r3
 8018c4a:	d006      	beq.n	8018c5a <tcp_slowtmr+0x62e>
 8018c4c:	4b10      	ldr	r3, [pc, #64]	; (8018c90 <tcp_slowtmr+0x664>)
 8018c4e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8018c52:	4915      	ldr	r1, [pc, #84]	; (8018ca8 <tcp_slowtmr+0x67c>)
 8018c54:	4810      	ldr	r0, [pc, #64]	; (8018c98 <tcp_slowtmr+0x66c>)
 8018c56:	f009 fdab 	bl	80227b0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8018c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c5c:	68db      	ldr	r3, [r3, #12]
 8018c5e:	4a10      	ldr	r2, [pc, #64]	; (8018ca0 <tcp_slowtmr+0x674>)
 8018c60:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8018c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c64:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8018c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c68:	68db      	ldr	r3, [r3, #12]
 8018c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8018c6c:	69f8      	ldr	r0, [r7, #28]
 8018c6e:	f7fe fe23 	bl	80178b8 <tcp_free>
 8018c72:	e004      	b.n	8018c7e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8018c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c76:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8018c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c7a:	68db      	ldr	r3, [r3, #12]
 8018c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8018c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d1a9      	bne.n	8018bd8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8018c84:	bf00      	nop
 8018c86:	bf00      	nop
 8018c88:	3730      	adds	r7, #48	; 0x30
 8018c8a:	46bd      	mov	sp, r7
 8018c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8018c8e:	bf00      	nop
 8018c90:	080252fc 	.word	0x080252fc
 8018c94:	0802578c 	.word	0x0802578c
 8018c98:	08025340 	.word	0x08025340
 8018c9c:	2000bfb4 	.word	0x2000bfb4
 8018ca0:	2000bfc4 	.word	0x2000bfc4
 8018ca4:	080257bc 	.word	0x080257bc
 8018ca8:	080257e4 	.word	0x080257e4

08018cac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b082      	sub	sp, #8
 8018cb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8018cb2:	4b2d      	ldr	r3, [pc, #180]	; (8018d68 <tcp_fasttmr+0xbc>)
 8018cb4:	781b      	ldrb	r3, [r3, #0]
 8018cb6:	3301      	adds	r3, #1
 8018cb8:	b2da      	uxtb	r2, r3
 8018cba:	4b2b      	ldr	r3, [pc, #172]	; (8018d68 <tcp_fasttmr+0xbc>)
 8018cbc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8018cbe:	4b2b      	ldr	r3, [pc, #172]	; (8018d6c <tcp_fasttmr+0xc0>)
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8018cc4:	e048      	b.n	8018d58 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	7f9a      	ldrb	r2, [r3, #30]
 8018cca:	4b27      	ldr	r3, [pc, #156]	; (8018d68 <tcp_fasttmr+0xbc>)
 8018ccc:	781b      	ldrb	r3, [r3, #0]
 8018cce:	429a      	cmp	r2, r3
 8018cd0:	d03f      	beq.n	8018d52 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8018cd2:	4b25      	ldr	r3, [pc, #148]	; (8018d68 <tcp_fasttmr+0xbc>)
 8018cd4:	781a      	ldrb	r2, [r3, #0]
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	8b5b      	ldrh	r3, [r3, #26]
 8018cde:	f003 0301 	and.w	r3, r3, #1
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d010      	beq.n	8018d08 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	8b5b      	ldrh	r3, [r3, #26]
 8018cea:	f043 0302 	orr.w	r3, r3, #2
 8018cee:	b29a      	uxth	r2, r3
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8018cf4:	6878      	ldr	r0, [r7, #4]
 8018cf6:	f003 fff5 	bl	801cce4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	8b5b      	ldrh	r3, [r3, #26]
 8018cfe:	f023 0303 	bic.w	r3, r3, #3
 8018d02:	b29a      	uxth	r2, r3
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	8b5b      	ldrh	r3, [r3, #26]
 8018d0c:	f003 0308 	and.w	r3, r3, #8
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d009      	beq.n	8018d28 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	8b5b      	ldrh	r3, [r3, #26]
 8018d18:	f023 0308 	bic.w	r3, r3, #8
 8018d1c:	b29a      	uxth	r2, r3
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8018d22:	6878      	ldr	r0, [r7, #4]
 8018d24:	f7fe ff5c 	bl	8017be0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	68db      	ldr	r3, [r3, #12]
 8018d2c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d00a      	beq.n	8018d4c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8018d36:	4b0e      	ldr	r3, [pc, #56]	; (8018d70 <tcp_fasttmr+0xc4>)
 8018d38:	2200      	movs	r2, #0
 8018d3a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8018d3c:	6878      	ldr	r0, [r7, #4]
 8018d3e:	f000 f819 	bl	8018d74 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8018d42:	4b0b      	ldr	r3, [pc, #44]	; (8018d70 <tcp_fasttmr+0xc4>)
 8018d44:	781b      	ldrb	r3, [r3, #0]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d000      	beq.n	8018d4c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8018d4a:	e7b8      	b.n	8018cbe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8018d4c:	683b      	ldr	r3, [r7, #0]
 8018d4e:	607b      	str	r3, [r7, #4]
 8018d50:	e002      	b.n	8018d58 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	68db      	ldr	r3, [r3, #12]
 8018d56:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d1b3      	bne.n	8018cc6 <tcp_fasttmr+0x1a>
    }
  }
}
 8018d5e:	bf00      	nop
 8018d60:	bf00      	nop
 8018d62:	3708      	adds	r7, #8
 8018d64:	46bd      	mov	sp, r7
 8018d66:	bd80      	pop	{r7, pc}
 8018d68:	2000bfca 	.word	0x2000bfca
 8018d6c:	2000bfc0 	.word	0x2000bfc0
 8018d70:	2000bfc8 	.word	0x2000bfc8

08018d74 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8018d74:	b590      	push	{r4, r7, lr}
 8018d76:	b085      	sub	sp, #20
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d109      	bne.n	8018d96 <tcp_process_refused_data+0x22>
 8018d82:	4b37      	ldr	r3, [pc, #220]	; (8018e60 <tcp_process_refused_data+0xec>)
 8018d84:	f240 6209 	movw	r2, #1545	; 0x609
 8018d88:	4936      	ldr	r1, [pc, #216]	; (8018e64 <tcp_process_refused_data+0xf0>)
 8018d8a:	4837      	ldr	r0, [pc, #220]	; (8018e68 <tcp_process_refused_data+0xf4>)
 8018d8c:	f009 fd10 	bl	80227b0 <iprintf>
 8018d90:	f06f 030f 	mvn.w	r3, #15
 8018d94:	e060      	b.n	8018e58 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018d9a:	7b5b      	ldrb	r3, [r3, #13]
 8018d9c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018da2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	2200      	movs	r2, #0
 8018da8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d00b      	beq.n	8018dcc <tcp_process_refused_data+0x58>
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	6918      	ldr	r0, [r3, #16]
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	68ba      	ldr	r2, [r7, #8]
 8018dc2:	6879      	ldr	r1, [r7, #4]
 8018dc4:	47a0      	blx	r4
 8018dc6:	4603      	mov	r3, r0
 8018dc8:	73fb      	strb	r3, [r7, #15]
 8018dca:	e007      	b.n	8018ddc <tcp_process_refused_data+0x68>
 8018dcc:	2300      	movs	r3, #0
 8018dce:	68ba      	ldr	r2, [r7, #8]
 8018dd0:	6879      	ldr	r1, [r7, #4]
 8018dd2:	2000      	movs	r0, #0
 8018dd4:	f000 f8a4 	bl	8018f20 <tcp_recv_null>
 8018dd8:	4603      	mov	r3, r0
 8018dda:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8018ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d12a      	bne.n	8018e3a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8018de4:	7bbb      	ldrb	r3, [r7, #14]
 8018de6:	f003 0320 	and.w	r3, r3, #32
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d033      	beq.n	8018e56 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018df2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018df6:	d005      	beq.n	8018e04 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018dfc:	3301      	adds	r3, #1
 8018dfe:	b29a      	uxth	r2, r3
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d00b      	beq.n	8018e26 <tcp_process_refused_data+0xb2>
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	6918      	ldr	r0, [r3, #16]
 8018e18:	2300      	movs	r3, #0
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	6879      	ldr	r1, [r7, #4]
 8018e1e:	47a0      	blx	r4
 8018e20:	4603      	mov	r3, r0
 8018e22:	73fb      	strb	r3, [r7, #15]
 8018e24:	e001      	b.n	8018e2a <tcp_process_refused_data+0xb6>
 8018e26:	2300      	movs	r3, #0
 8018e28:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8018e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e2e:	f113 0f0d 	cmn.w	r3, #13
 8018e32:	d110      	bne.n	8018e56 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8018e34:	f06f 030c 	mvn.w	r3, #12
 8018e38:	e00e      	b.n	8018e58 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8018e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e3e:	f113 0f0d 	cmn.w	r3, #13
 8018e42:	d102      	bne.n	8018e4a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8018e44:	f06f 030c 	mvn.w	r3, #12
 8018e48:	e006      	b.n	8018e58 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	68ba      	ldr	r2, [r7, #8]
 8018e4e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8018e50:	f06f 0304 	mvn.w	r3, #4
 8018e54:	e000      	b.n	8018e58 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8018e56:	2300      	movs	r3, #0
}
 8018e58:	4618      	mov	r0, r3
 8018e5a:	3714      	adds	r7, #20
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	bd90      	pop	{r4, r7, pc}
 8018e60:	080252fc 	.word	0x080252fc
 8018e64:	0802580c 	.word	0x0802580c
 8018e68:	08025340 	.word	0x08025340

08018e6c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8018e6c:	b580      	push	{r7, lr}
 8018e6e:	b084      	sub	sp, #16
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8018e74:	e007      	b.n	8018e86 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8018e7c:	6878      	ldr	r0, [r7, #4]
 8018e7e:	f000 f80a 	bl	8018e96 <tcp_seg_free>
    seg = next;
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d1f4      	bne.n	8018e76 <tcp_segs_free+0xa>
  }
}
 8018e8c:	bf00      	nop
 8018e8e:	bf00      	nop
 8018e90:	3710      	adds	r7, #16
 8018e92:	46bd      	mov	sp, r7
 8018e94:	bd80      	pop	{r7, pc}

08018e96 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8018e96:	b580      	push	{r7, lr}
 8018e98:	b082      	sub	sp, #8
 8018e9a:	af00      	add	r7, sp, #0
 8018e9c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d00c      	beq.n	8018ebe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	685b      	ldr	r3, [r3, #4]
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d004      	beq.n	8018eb6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	685b      	ldr	r3, [r3, #4]
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	f7fe fa45 	bl	8017340 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8018eb6:	6879      	ldr	r1, [r7, #4]
 8018eb8:	2003      	movs	r0, #3
 8018eba:	f7fd fb9d 	bl	80165f8 <memp_free>
  }
}
 8018ebe:	bf00      	nop
 8018ec0:	3708      	adds	r7, #8
 8018ec2:	46bd      	mov	sp, r7
 8018ec4:	bd80      	pop	{r7, pc}
	...

08018ec8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b084      	sub	sp, #16
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d106      	bne.n	8018ee4 <tcp_seg_copy+0x1c>
 8018ed6:	4b0f      	ldr	r3, [pc, #60]	; (8018f14 <tcp_seg_copy+0x4c>)
 8018ed8:	f240 6282 	movw	r2, #1666	; 0x682
 8018edc:	490e      	ldr	r1, [pc, #56]	; (8018f18 <tcp_seg_copy+0x50>)
 8018ede:	480f      	ldr	r0, [pc, #60]	; (8018f1c <tcp_seg_copy+0x54>)
 8018ee0:	f009 fc66 	bl	80227b0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8018ee4:	2003      	movs	r0, #3
 8018ee6:	f7fd fb11 	bl	801650c <memp_malloc>
 8018eea:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d101      	bne.n	8018ef6 <tcp_seg_copy+0x2e>
    return NULL;
 8018ef2:	2300      	movs	r3, #0
 8018ef4:	e00a      	b.n	8018f0c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8018ef6:	2210      	movs	r2, #16
 8018ef8:	6879      	ldr	r1, [r7, #4]
 8018efa:	68f8      	ldr	r0, [r7, #12]
 8018efc:	f009 fb48 	bl	8022590 <memcpy>
  pbuf_ref(cseg->p);
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	685b      	ldr	r3, [r3, #4]
 8018f04:	4618      	mov	r0, r3
 8018f06:	f7fe fac1 	bl	801748c <pbuf_ref>
  return cseg;
 8018f0a:	68fb      	ldr	r3, [r7, #12]
}
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	3710      	adds	r7, #16
 8018f10:	46bd      	mov	sp, r7
 8018f12:	bd80      	pop	{r7, pc}
 8018f14:	080252fc 	.word	0x080252fc
 8018f18:	08025850 	.word	0x08025850
 8018f1c:	08025340 	.word	0x08025340

08018f20 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8018f20:	b580      	push	{r7, lr}
 8018f22:	b084      	sub	sp, #16
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	60f8      	str	r0, [r7, #12]
 8018f28:	60b9      	str	r1, [r7, #8]
 8018f2a:	607a      	str	r2, [r7, #4]
 8018f2c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8018f2e:	68bb      	ldr	r3, [r7, #8]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d109      	bne.n	8018f48 <tcp_recv_null+0x28>
 8018f34:	4b12      	ldr	r3, [pc, #72]	; (8018f80 <tcp_recv_null+0x60>)
 8018f36:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018f3a:	4912      	ldr	r1, [pc, #72]	; (8018f84 <tcp_recv_null+0x64>)
 8018f3c:	4812      	ldr	r0, [pc, #72]	; (8018f88 <tcp_recv_null+0x68>)
 8018f3e:	f009 fc37 	bl	80227b0 <iprintf>
 8018f42:	f06f 030f 	mvn.w	r3, #15
 8018f46:	e016      	b.n	8018f76 <tcp_recv_null+0x56>

  if (p != NULL) {
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d009      	beq.n	8018f62 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	891b      	ldrh	r3, [r3, #8]
 8018f52:	4619      	mov	r1, r3
 8018f54:	68b8      	ldr	r0, [r7, #8]
 8018f56:	f7ff f9bb 	bl	80182d0 <tcp_recved>
    pbuf_free(p);
 8018f5a:	6878      	ldr	r0, [r7, #4]
 8018f5c:	f7fe f9f0 	bl	8017340 <pbuf_free>
 8018f60:	e008      	b.n	8018f74 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8018f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d104      	bne.n	8018f74 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8018f6a:	68b8      	ldr	r0, [r7, #8]
 8018f6c:	f7fe fea2 	bl	8017cb4 <tcp_close>
 8018f70:	4603      	mov	r3, r0
 8018f72:	e000      	b.n	8018f76 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8018f74:	2300      	movs	r3, #0
}
 8018f76:	4618      	mov	r0, r3
 8018f78:	3710      	adds	r7, #16
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	bd80      	pop	{r7, pc}
 8018f7e:	bf00      	nop
 8018f80:	080252fc 	.word	0x080252fc
 8018f84:	0802586c 	.word	0x0802586c
 8018f88:	08025340 	.word	0x08025340

08018f8c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b086      	sub	sp, #24
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	4603      	mov	r3, r0
 8018f94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8018f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	db01      	blt.n	8018fa2 <tcp_kill_prio+0x16>
 8018f9e:	79fb      	ldrb	r3, [r7, #7]
 8018fa0:	e000      	b.n	8018fa4 <tcp_kill_prio+0x18>
 8018fa2:	237f      	movs	r3, #127	; 0x7f
 8018fa4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8018fa6:	7afb      	ldrb	r3, [r7, #11]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d034      	beq.n	8019016 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8018fac:	7afb      	ldrb	r3, [r7, #11]
 8018fae:	3b01      	subs	r3, #1
 8018fb0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8018fb2:	2300      	movs	r3, #0
 8018fb4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018fba:	4b19      	ldr	r3, [pc, #100]	; (8019020 <tcp_kill_prio+0x94>)
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	617b      	str	r3, [r7, #20]
 8018fc0:	e01f      	b.n	8019002 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8018fc2:	697b      	ldr	r3, [r7, #20]
 8018fc4:	7d5b      	ldrb	r3, [r3, #21]
 8018fc6:	7afa      	ldrb	r2, [r7, #11]
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	d80c      	bhi.n	8018fe6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8018fcc:	697b      	ldr	r3, [r7, #20]
 8018fce:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8018fd0:	7afa      	ldrb	r2, [r7, #11]
 8018fd2:	429a      	cmp	r2, r3
 8018fd4:	d112      	bne.n	8018ffc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8018fd6:	4b13      	ldr	r3, [pc, #76]	; (8019024 <tcp_kill_prio+0x98>)
 8018fd8:	681a      	ldr	r2, [r3, #0]
 8018fda:	697b      	ldr	r3, [r7, #20]
 8018fdc:	6a1b      	ldr	r3, [r3, #32]
 8018fde:	1ad3      	subs	r3, r2, r3
 8018fe0:	68fa      	ldr	r2, [r7, #12]
 8018fe2:	429a      	cmp	r2, r3
 8018fe4:	d80a      	bhi.n	8018ffc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8018fe6:	4b0f      	ldr	r3, [pc, #60]	; (8019024 <tcp_kill_prio+0x98>)
 8018fe8:	681a      	ldr	r2, [r3, #0]
 8018fea:	697b      	ldr	r3, [r7, #20]
 8018fec:	6a1b      	ldr	r3, [r3, #32]
 8018fee:	1ad3      	subs	r3, r2, r3
 8018ff0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8018ff2:	697b      	ldr	r3, [r7, #20]
 8018ff4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8018ff6:	697b      	ldr	r3, [r7, #20]
 8018ff8:	7d5b      	ldrb	r3, [r3, #21]
 8018ffa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018ffc:	697b      	ldr	r3, [r7, #20]
 8018ffe:	68db      	ldr	r3, [r3, #12]
 8019000:	617b      	str	r3, [r7, #20]
 8019002:	697b      	ldr	r3, [r7, #20]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d1dc      	bne.n	8018fc2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8019008:	693b      	ldr	r3, [r7, #16]
 801900a:	2b00      	cmp	r3, #0
 801900c:	d004      	beq.n	8019018 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801900e:	6938      	ldr	r0, [r7, #16]
 8019010:	f7fe ff96 	bl	8017f40 <tcp_abort>
 8019014:	e000      	b.n	8019018 <tcp_kill_prio+0x8c>
    return;
 8019016:	bf00      	nop
  }
}
 8019018:	3718      	adds	r7, #24
 801901a:	46bd      	mov	sp, r7
 801901c:	bd80      	pop	{r7, pc}
 801901e:	bf00      	nop
 8019020:	2000bfc0 	.word	0x2000bfc0
 8019024:	2000bfb4 	.word	0x2000bfb4

08019028 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8019028:	b580      	push	{r7, lr}
 801902a:	b086      	sub	sp, #24
 801902c:	af00      	add	r7, sp, #0
 801902e:	4603      	mov	r3, r0
 8019030:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8019032:	79fb      	ldrb	r3, [r7, #7]
 8019034:	2b08      	cmp	r3, #8
 8019036:	d009      	beq.n	801904c <tcp_kill_state+0x24>
 8019038:	79fb      	ldrb	r3, [r7, #7]
 801903a:	2b09      	cmp	r3, #9
 801903c:	d006      	beq.n	801904c <tcp_kill_state+0x24>
 801903e:	4b1a      	ldr	r3, [pc, #104]	; (80190a8 <tcp_kill_state+0x80>)
 8019040:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8019044:	4919      	ldr	r1, [pc, #100]	; (80190ac <tcp_kill_state+0x84>)
 8019046:	481a      	ldr	r0, [pc, #104]	; (80190b0 <tcp_kill_state+0x88>)
 8019048:	f009 fbb2 	bl	80227b0 <iprintf>

  inactivity = 0;
 801904c:	2300      	movs	r3, #0
 801904e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8019050:	2300      	movs	r3, #0
 8019052:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019054:	4b17      	ldr	r3, [pc, #92]	; (80190b4 <tcp_kill_state+0x8c>)
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	617b      	str	r3, [r7, #20]
 801905a:	e017      	b.n	801908c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801905c:	697b      	ldr	r3, [r7, #20]
 801905e:	7d1b      	ldrb	r3, [r3, #20]
 8019060:	79fa      	ldrb	r2, [r7, #7]
 8019062:	429a      	cmp	r2, r3
 8019064:	d10f      	bne.n	8019086 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019066:	4b14      	ldr	r3, [pc, #80]	; (80190b8 <tcp_kill_state+0x90>)
 8019068:	681a      	ldr	r2, [r3, #0]
 801906a:	697b      	ldr	r3, [r7, #20]
 801906c:	6a1b      	ldr	r3, [r3, #32]
 801906e:	1ad3      	subs	r3, r2, r3
 8019070:	68fa      	ldr	r2, [r7, #12]
 8019072:	429a      	cmp	r2, r3
 8019074:	d807      	bhi.n	8019086 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8019076:	4b10      	ldr	r3, [pc, #64]	; (80190b8 <tcp_kill_state+0x90>)
 8019078:	681a      	ldr	r2, [r3, #0]
 801907a:	697b      	ldr	r3, [r7, #20]
 801907c:	6a1b      	ldr	r3, [r3, #32]
 801907e:	1ad3      	subs	r3, r2, r3
 8019080:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8019082:	697b      	ldr	r3, [r7, #20]
 8019084:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019086:	697b      	ldr	r3, [r7, #20]
 8019088:	68db      	ldr	r3, [r3, #12]
 801908a:	617b      	str	r3, [r7, #20]
 801908c:	697b      	ldr	r3, [r7, #20]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d1e4      	bne.n	801905c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8019092:	693b      	ldr	r3, [r7, #16]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d003      	beq.n	80190a0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8019098:	2100      	movs	r1, #0
 801909a:	6938      	ldr	r0, [r7, #16]
 801909c:	f7fe fe92 	bl	8017dc4 <tcp_abandon>
  }
}
 80190a0:	bf00      	nop
 80190a2:	3718      	adds	r7, #24
 80190a4:	46bd      	mov	sp, r7
 80190a6:	bd80      	pop	{r7, pc}
 80190a8:	080252fc 	.word	0x080252fc
 80190ac:	08025888 	.word	0x08025888
 80190b0:	08025340 	.word	0x08025340
 80190b4:	2000bfc0 	.word	0x2000bfc0
 80190b8:	2000bfb4 	.word	0x2000bfb4

080190bc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b084      	sub	sp, #16
 80190c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80190c2:	2300      	movs	r3, #0
 80190c4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80190c6:	2300      	movs	r3, #0
 80190c8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80190ca:	4b12      	ldr	r3, [pc, #72]	; (8019114 <tcp_kill_timewait+0x58>)
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	60fb      	str	r3, [r7, #12]
 80190d0:	e012      	b.n	80190f8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80190d2:	4b11      	ldr	r3, [pc, #68]	; (8019118 <tcp_kill_timewait+0x5c>)
 80190d4:	681a      	ldr	r2, [r3, #0]
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	6a1b      	ldr	r3, [r3, #32]
 80190da:	1ad3      	subs	r3, r2, r3
 80190dc:	687a      	ldr	r2, [r7, #4]
 80190de:	429a      	cmp	r2, r3
 80190e0:	d807      	bhi.n	80190f2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80190e2:	4b0d      	ldr	r3, [pc, #52]	; (8019118 <tcp_kill_timewait+0x5c>)
 80190e4:	681a      	ldr	r2, [r3, #0]
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	6a1b      	ldr	r3, [r3, #32]
 80190ea:	1ad3      	subs	r3, r2, r3
 80190ec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	68db      	ldr	r3, [r3, #12]
 80190f6:	60fb      	str	r3, [r7, #12]
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d1e9      	bne.n	80190d2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80190fe:	68bb      	ldr	r3, [r7, #8]
 8019100:	2b00      	cmp	r3, #0
 8019102:	d002      	beq.n	801910a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8019104:	68b8      	ldr	r0, [r7, #8]
 8019106:	f7fe ff1b 	bl	8017f40 <tcp_abort>
  }
}
 801910a:	bf00      	nop
 801910c:	3710      	adds	r7, #16
 801910e:	46bd      	mov	sp, r7
 8019110:	bd80      	pop	{r7, pc}
 8019112:	bf00      	nop
 8019114:	2000bfc4 	.word	0x2000bfc4
 8019118:	2000bfb4 	.word	0x2000bfb4

0801911c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b082      	sub	sp, #8
 8019120:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8019122:	4b10      	ldr	r3, [pc, #64]	; (8019164 <tcp_handle_closepend+0x48>)
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8019128:	e014      	b.n	8019154 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	68db      	ldr	r3, [r3, #12]
 801912e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	8b5b      	ldrh	r3, [r3, #26]
 8019134:	f003 0308 	and.w	r3, r3, #8
 8019138:	2b00      	cmp	r3, #0
 801913a:	d009      	beq.n	8019150 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	8b5b      	ldrh	r3, [r3, #26]
 8019140:	f023 0308 	bic.w	r3, r3, #8
 8019144:	b29a      	uxth	r2, r3
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801914a:	6878      	ldr	r0, [r7, #4]
 801914c:	f7fe fd48 	bl	8017be0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8019150:	683b      	ldr	r3, [r7, #0]
 8019152:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d1e7      	bne.n	801912a <tcp_handle_closepend+0xe>
  }
}
 801915a:	bf00      	nop
 801915c:	bf00      	nop
 801915e:	3708      	adds	r7, #8
 8019160:	46bd      	mov	sp, r7
 8019162:	bd80      	pop	{r7, pc}
 8019164:	2000bfc0 	.word	0x2000bfc0

08019168 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8019168:	b580      	push	{r7, lr}
 801916a:	b084      	sub	sp, #16
 801916c:	af00      	add	r7, sp, #0
 801916e:	4603      	mov	r3, r0
 8019170:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019172:	2001      	movs	r0, #1
 8019174:	f7fd f9ca 	bl	801650c <memp_malloc>
 8019178:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	2b00      	cmp	r3, #0
 801917e:	d126      	bne.n	80191ce <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8019180:	f7ff ffcc 	bl	801911c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8019184:	f7ff ff9a 	bl	80190bc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019188:	2001      	movs	r0, #1
 801918a:	f7fd f9bf 	bl	801650c <memp_malloc>
 801918e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	2b00      	cmp	r3, #0
 8019194:	d11b      	bne.n	80191ce <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8019196:	2009      	movs	r0, #9
 8019198:	f7ff ff46 	bl	8019028 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801919c:	2001      	movs	r0, #1
 801919e:	f7fd f9b5 	bl	801650c <memp_malloc>
 80191a2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d111      	bne.n	80191ce <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80191aa:	2008      	movs	r0, #8
 80191ac:	f7ff ff3c 	bl	8019028 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80191b0:	2001      	movs	r0, #1
 80191b2:	f7fd f9ab 	bl	801650c <memp_malloc>
 80191b6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d107      	bne.n	80191ce <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80191be:	79fb      	ldrb	r3, [r7, #7]
 80191c0:	4618      	mov	r0, r3
 80191c2:	f7ff fee3 	bl	8018f8c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80191c6:	2001      	movs	r0, #1
 80191c8:	f7fd f9a0 	bl	801650c <memp_malloc>
 80191cc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d03f      	beq.n	8019254 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80191d4:	229c      	movs	r2, #156	; 0x9c
 80191d6:	2100      	movs	r1, #0
 80191d8:	68f8      	ldr	r0, [r7, #12]
 80191da:	f009 fa01 	bl	80225e0 <memset>
    pcb->prio = prio;
 80191de:	68fb      	ldr	r3, [r7, #12]
 80191e0:	79fa      	ldrb	r2, [r7, #7]
 80191e2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80191ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80191f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	22ff      	movs	r2, #255	; 0xff
 8019202:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	f44f 7206 	mov.w	r2, #536	; 0x218
 801920a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	2206      	movs	r2, #6
 8019210:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	2206      	movs	r2, #6
 8019218:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019220:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	2201      	movs	r2, #1
 8019226:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801922a:	4b0d      	ldr	r3, [pc, #52]	; (8019260 <tcp_alloc+0xf8>)
 801922c:	681a      	ldr	r2, [r3, #0]
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8019232:	4b0c      	ldr	r3, [pc, #48]	; (8019264 <tcp_alloc+0xfc>)
 8019234:	781a      	ldrb	r2, [r3, #0]
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8019240:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	4a08      	ldr	r2, [pc, #32]	; (8019268 <tcp_alloc+0x100>)
 8019248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801924c:	68fb      	ldr	r3, [r7, #12]
 801924e:	4a07      	ldr	r2, [pc, #28]	; (801926c <tcp_alloc+0x104>)
 8019250:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8019254:	68fb      	ldr	r3, [r7, #12]
}
 8019256:	4618      	mov	r0, r3
 8019258:	3710      	adds	r7, #16
 801925a:	46bd      	mov	sp, r7
 801925c:	bd80      	pop	{r7, pc}
 801925e:	bf00      	nop
 8019260:	2000bfb4 	.word	0x2000bfb4
 8019264:	2000bfca 	.word	0x2000bfca
 8019268:	08018f21 	.word	0x08018f21
 801926c:	006ddd00 	.word	0x006ddd00

08019270 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8019270:	b580      	push	{r7, lr}
 8019272:	b084      	sub	sp, #16
 8019274:	af00      	add	r7, sp, #0
 8019276:	4603      	mov	r3, r0
 8019278:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801927a:	2040      	movs	r0, #64	; 0x40
 801927c:	f7ff ff74 	bl	8019168 <tcp_alloc>
 8019280:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8019282:	68fb      	ldr	r3, [r7, #12]
}
 8019284:	4618      	mov	r0, r3
 8019286:	3710      	adds	r7, #16
 8019288:	46bd      	mov	sp, r7
 801928a:	bd80      	pop	{r7, pc}

0801928c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801928c:	b480      	push	{r7}
 801928e:	b083      	sub	sp, #12
 8019290:	af00      	add	r7, sp, #0
 8019292:	6078      	str	r0, [r7, #4]
 8019294:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	2b00      	cmp	r3, #0
 801929a:	d002      	beq.n	80192a2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	683a      	ldr	r2, [r7, #0]
 80192a0:	611a      	str	r2, [r3, #16]
  }
}
 80192a2:	bf00      	nop
 80192a4:	370c      	adds	r7, #12
 80192a6:	46bd      	mov	sp, r7
 80192a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ac:	4770      	bx	lr
	...

080192b0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80192b0:	b580      	push	{r7, lr}
 80192b2:	b082      	sub	sp, #8
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	6078      	str	r0, [r7, #4]
 80192b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d00e      	beq.n	80192de <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	7d1b      	ldrb	r3, [r3, #20]
 80192c4:	2b01      	cmp	r3, #1
 80192c6:	d106      	bne.n	80192d6 <tcp_recv+0x26>
 80192c8:	4b07      	ldr	r3, [pc, #28]	; (80192e8 <tcp_recv+0x38>)
 80192ca:	f240 72df 	movw	r2, #2015	; 0x7df
 80192ce:	4907      	ldr	r1, [pc, #28]	; (80192ec <tcp_recv+0x3c>)
 80192d0:	4807      	ldr	r0, [pc, #28]	; (80192f0 <tcp_recv+0x40>)
 80192d2:	f009 fa6d 	bl	80227b0 <iprintf>
    pcb->recv = recv;
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	683a      	ldr	r2, [r7, #0]
 80192da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80192de:	bf00      	nop
 80192e0:	3708      	adds	r7, #8
 80192e2:	46bd      	mov	sp, r7
 80192e4:	bd80      	pop	{r7, pc}
 80192e6:	bf00      	nop
 80192e8:	080252fc 	.word	0x080252fc
 80192ec:	08025898 	.word	0x08025898
 80192f0:	08025340 	.word	0x08025340

080192f4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b082      	sub	sp, #8
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	6078      	str	r0, [r7, #4]
 80192fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	2b00      	cmp	r3, #0
 8019302:	d00e      	beq.n	8019322 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	7d1b      	ldrb	r3, [r3, #20]
 8019308:	2b01      	cmp	r3, #1
 801930a:	d106      	bne.n	801931a <tcp_sent+0x26>
 801930c:	4b07      	ldr	r3, [pc, #28]	; (801932c <tcp_sent+0x38>)
 801930e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8019312:	4907      	ldr	r1, [pc, #28]	; (8019330 <tcp_sent+0x3c>)
 8019314:	4807      	ldr	r0, [pc, #28]	; (8019334 <tcp_sent+0x40>)
 8019316:	f009 fa4b 	bl	80227b0 <iprintf>
    pcb->sent = sent;
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	683a      	ldr	r2, [r7, #0]
 801931e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8019322:	bf00      	nop
 8019324:	3708      	adds	r7, #8
 8019326:	46bd      	mov	sp, r7
 8019328:	bd80      	pop	{r7, pc}
 801932a:	bf00      	nop
 801932c:	080252fc 	.word	0x080252fc
 8019330:	080258c0 	.word	0x080258c0
 8019334:	08025340 	.word	0x08025340

08019338 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8019338:	b580      	push	{r7, lr}
 801933a:	b082      	sub	sp, #8
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]
 8019340:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	2b00      	cmp	r3, #0
 8019346:	d00e      	beq.n	8019366 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	7d1b      	ldrb	r3, [r3, #20]
 801934c:	2b01      	cmp	r3, #1
 801934e:	d106      	bne.n	801935e <tcp_err+0x26>
 8019350:	4b07      	ldr	r3, [pc, #28]	; (8019370 <tcp_err+0x38>)
 8019352:	f640 020d 	movw	r2, #2061	; 0x80d
 8019356:	4907      	ldr	r1, [pc, #28]	; (8019374 <tcp_err+0x3c>)
 8019358:	4807      	ldr	r0, [pc, #28]	; (8019378 <tcp_err+0x40>)
 801935a:	f009 fa29 	bl	80227b0 <iprintf>
    pcb->errf = err;
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	683a      	ldr	r2, [r7, #0]
 8019362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8019366:	bf00      	nop
 8019368:	3708      	adds	r7, #8
 801936a:	46bd      	mov	sp, r7
 801936c:	bd80      	pop	{r7, pc}
 801936e:	bf00      	nop
 8019370:	080252fc 	.word	0x080252fc
 8019374:	080258e8 	.word	0x080258e8
 8019378:	08025340 	.word	0x08025340

0801937c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801937c:	b480      	push	{r7}
 801937e:	b085      	sub	sp, #20
 8019380:	af00      	add	r7, sp, #0
 8019382:	6078      	str	r0, [r7, #4]
 8019384:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	2b00      	cmp	r3, #0
 801938a:	d008      	beq.n	801939e <tcp_accept+0x22>
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	7d1b      	ldrb	r3, [r3, #20]
 8019390:	2b01      	cmp	r3, #1
 8019392:	d104      	bne.n	801939e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	683a      	ldr	r2, [r7, #0]
 801939c:	619a      	str	r2, [r3, #24]
  }
}
 801939e:	bf00      	nop
 80193a0:	3714      	adds	r7, #20
 80193a2:	46bd      	mov	sp, r7
 80193a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a8:	4770      	bx	lr
	...

080193ac <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b084      	sub	sp, #16
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	60f8      	str	r0, [r7, #12]
 80193b4:	60b9      	str	r1, [r7, #8]
 80193b6:	4613      	mov	r3, r2
 80193b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d107      	bne.n	80193d0 <tcp_poll+0x24>
 80193c0:	4b0e      	ldr	r3, [pc, #56]	; (80193fc <tcp_poll+0x50>)
 80193c2:	f640 023d 	movw	r2, #2109	; 0x83d
 80193c6:	490e      	ldr	r1, [pc, #56]	; (8019400 <tcp_poll+0x54>)
 80193c8:	480e      	ldr	r0, [pc, #56]	; (8019404 <tcp_poll+0x58>)
 80193ca:	f009 f9f1 	bl	80227b0 <iprintf>
 80193ce:	e011      	b.n	80193f4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	7d1b      	ldrb	r3, [r3, #20]
 80193d4:	2b01      	cmp	r3, #1
 80193d6:	d106      	bne.n	80193e6 <tcp_poll+0x3a>
 80193d8:	4b08      	ldr	r3, [pc, #32]	; (80193fc <tcp_poll+0x50>)
 80193da:	f640 023e 	movw	r2, #2110	; 0x83e
 80193de:	490a      	ldr	r1, [pc, #40]	; (8019408 <tcp_poll+0x5c>)
 80193e0:	4808      	ldr	r0, [pc, #32]	; (8019404 <tcp_poll+0x58>)
 80193e2:	f009 f9e5 	bl	80227b0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	68ba      	ldr	r2, [r7, #8]
 80193ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	79fa      	ldrb	r2, [r7, #7]
 80193f2:	775a      	strb	r2, [r3, #29]
}
 80193f4:	3710      	adds	r7, #16
 80193f6:	46bd      	mov	sp, r7
 80193f8:	bd80      	pop	{r7, pc}
 80193fa:	bf00      	nop
 80193fc:	080252fc 	.word	0x080252fc
 8019400:	08025910 	.word	0x08025910
 8019404:	08025340 	.word	0x08025340
 8019408:	08025928 	.word	0x08025928

0801940c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b082      	sub	sp, #8
 8019410:	af00      	add	r7, sp, #0
 8019412:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d107      	bne.n	801942a <tcp_pcb_purge+0x1e>
 801941a:	4b21      	ldr	r3, [pc, #132]	; (80194a0 <tcp_pcb_purge+0x94>)
 801941c:	f640 0251 	movw	r2, #2129	; 0x851
 8019420:	4920      	ldr	r1, [pc, #128]	; (80194a4 <tcp_pcb_purge+0x98>)
 8019422:	4821      	ldr	r0, [pc, #132]	; (80194a8 <tcp_pcb_purge+0x9c>)
 8019424:	f009 f9c4 	bl	80227b0 <iprintf>
 8019428:	e037      	b.n	801949a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	7d1b      	ldrb	r3, [r3, #20]
 801942e:	2b00      	cmp	r3, #0
 8019430:	d033      	beq.n	801949a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8019436:	2b0a      	cmp	r3, #10
 8019438:	d02f      	beq.n	801949a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801943e:	2b01      	cmp	r3, #1
 8019440:	d02b      	beq.n	801949a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019446:	2b00      	cmp	r3, #0
 8019448:	d007      	beq.n	801945a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801944e:	4618      	mov	r0, r3
 8019450:	f7fd ff76 	bl	8017340 <pbuf_free>
      pcb->refused_data = NULL;
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	2200      	movs	r2, #0
 8019458:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801945e:	2b00      	cmp	r3, #0
 8019460:	d002      	beq.n	8019468 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8019462:	6878      	ldr	r0, [r7, #4]
 8019464:	f000 f986 	bl	8019774 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801946e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019474:	4618      	mov	r0, r3
 8019476:	f7ff fcf9 	bl	8018e6c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801947e:	4618      	mov	r0, r3
 8019480:	f7ff fcf4 	bl	8018e6c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	2200      	movs	r2, #0
 8019488:	66da      	str	r2, [r3, #108]	; 0x6c
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	2200      	movs	r2, #0
 8019496:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801949a:	3708      	adds	r7, #8
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}
 80194a0:	080252fc 	.word	0x080252fc
 80194a4:	08025948 	.word	0x08025948
 80194a8:	08025340 	.word	0x08025340

080194ac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80194ac:	b580      	push	{r7, lr}
 80194ae:	b084      	sub	sp, #16
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	6078      	str	r0, [r7, #4]
 80194b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80194b6:	683b      	ldr	r3, [r7, #0]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d106      	bne.n	80194ca <tcp_pcb_remove+0x1e>
 80194bc:	4b3e      	ldr	r3, [pc, #248]	; (80195b8 <tcp_pcb_remove+0x10c>)
 80194be:	f640 0283 	movw	r2, #2179	; 0x883
 80194c2:	493e      	ldr	r1, [pc, #248]	; (80195bc <tcp_pcb_remove+0x110>)
 80194c4:	483e      	ldr	r0, [pc, #248]	; (80195c0 <tcp_pcb_remove+0x114>)
 80194c6:	f009 f973 	bl	80227b0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d106      	bne.n	80194de <tcp_pcb_remove+0x32>
 80194d0:	4b39      	ldr	r3, [pc, #228]	; (80195b8 <tcp_pcb_remove+0x10c>)
 80194d2:	f640 0284 	movw	r2, #2180	; 0x884
 80194d6:	493b      	ldr	r1, [pc, #236]	; (80195c4 <tcp_pcb_remove+0x118>)
 80194d8:	4839      	ldr	r0, [pc, #228]	; (80195c0 <tcp_pcb_remove+0x114>)
 80194da:	f009 f969 	bl	80227b0 <iprintf>

  TCP_RMV(pcblist, pcb);
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	683a      	ldr	r2, [r7, #0]
 80194e4:	429a      	cmp	r2, r3
 80194e6:	d105      	bne.n	80194f4 <tcp_pcb_remove+0x48>
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	68da      	ldr	r2, [r3, #12]
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	601a      	str	r2, [r3, #0]
 80194f2:	e013      	b.n	801951c <tcp_pcb_remove+0x70>
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	60fb      	str	r3, [r7, #12]
 80194fa:	e00c      	b.n	8019516 <tcp_pcb_remove+0x6a>
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	68db      	ldr	r3, [r3, #12]
 8019500:	683a      	ldr	r2, [r7, #0]
 8019502:	429a      	cmp	r2, r3
 8019504:	d104      	bne.n	8019510 <tcp_pcb_remove+0x64>
 8019506:	683b      	ldr	r3, [r7, #0]
 8019508:	68da      	ldr	r2, [r3, #12]
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	60da      	str	r2, [r3, #12]
 801950e:	e005      	b.n	801951c <tcp_pcb_remove+0x70>
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	68db      	ldr	r3, [r3, #12]
 8019514:	60fb      	str	r3, [r7, #12]
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	2b00      	cmp	r3, #0
 801951a:	d1ef      	bne.n	80194fc <tcp_pcb_remove+0x50>
 801951c:	683b      	ldr	r3, [r7, #0]
 801951e:	2200      	movs	r2, #0
 8019520:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8019522:	6838      	ldr	r0, [r7, #0]
 8019524:	f7ff ff72 	bl	801940c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8019528:	683b      	ldr	r3, [r7, #0]
 801952a:	7d1b      	ldrb	r3, [r3, #20]
 801952c:	2b0a      	cmp	r3, #10
 801952e:	d013      	beq.n	8019558 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8019530:	683b      	ldr	r3, [r7, #0]
 8019532:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8019534:	2b01      	cmp	r3, #1
 8019536:	d00f      	beq.n	8019558 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8019538:	683b      	ldr	r3, [r7, #0]
 801953a:	8b5b      	ldrh	r3, [r3, #26]
 801953c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8019540:	2b00      	cmp	r3, #0
 8019542:	d009      	beq.n	8019558 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8019544:	683b      	ldr	r3, [r7, #0]
 8019546:	8b5b      	ldrh	r3, [r3, #26]
 8019548:	f043 0302 	orr.w	r3, r3, #2
 801954c:	b29a      	uxth	r2, r3
 801954e:	683b      	ldr	r3, [r7, #0]
 8019550:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019552:	6838      	ldr	r0, [r7, #0]
 8019554:	f003 fbc6 	bl	801cce4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8019558:	683b      	ldr	r3, [r7, #0]
 801955a:	7d1b      	ldrb	r3, [r3, #20]
 801955c:	2b01      	cmp	r3, #1
 801955e:	d020      	beq.n	80195a2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8019560:	683b      	ldr	r3, [r7, #0]
 8019562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019564:	2b00      	cmp	r3, #0
 8019566:	d006      	beq.n	8019576 <tcp_pcb_remove+0xca>
 8019568:	4b13      	ldr	r3, [pc, #76]	; (80195b8 <tcp_pcb_remove+0x10c>)
 801956a:	f640 0293 	movw	r2, #2195	; 0x893
 801956e:	4916      	ldr	r1, [pc, #88]	; (80195c8 <tcp_pcb_remove+0x11c>)
 8019570:	4813      	ldr	r0, [pc, #76]	; (80195c0 <tcp_pcb_remove+0x114>)
 8019572:	f009 f91d 	bl	80227b0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8019576:	683b      	ldr	r3, [r7, #0]
 8019578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801957a:	2b00      	cmp	r3, #0
 801957c:	d006      	beq.n	801958c <tcp_pcb_remove+0xe0>
 801957e:	4b0e      	ldr	r3, [pc, #56]	; (80195b8 <tcp_pcb_remove+0x10c>)
 8019580:	f640 0294 	movw	r2, #2196	; 0x894
 8019584:	4911      	ldr	r1, [pc, #68]	; (80195cc <tcp_pcb_remove+0x120>)
 8019586:	480e      	ldr	r0, [pc, #56]	; (80195c0 <tcp_pcb_remove+0x114>)
 8019588:	f009 f912 	bl	80227b0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801958c:	683b      	ldr	r3, [r7, #0]
 801958e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019590:	2b00      	cmp	r3, #0
 8019592:	d006      	beq.n	80195a2 <tcp_pcb_remove+0xf6>
 8019594:	4b08      	ldr	r3, [pc, #32]	; (80195b8 <tcp_pcb_remove+0x10c>)
 8019596:	f640 0296 	movw	r2, #2198	; 0x896
 801959a:	490d      	ldr	r1, [pc, #52]	; (80195d0 <tcp_pcb_remove+0x124>)
 801959c:	4808      	ldr	r0, [pc, #32]	; (80195c0 <tcp_pcb_remove+0x114>)
 801959e:	f009 f907 	bl	80227b0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80195a2:	683b      	ldr	r3, [r7, #0]
 80195a4:	2200      	movs	r2, #0
 80195a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80195a8:	683b      	ldr	r3, [r7, #0]
 80195aa:	2200      	movs	r2, #0
 80195ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80195ae:	bf00      	nop
 80195b0:	3710      	adds	r7, #16
 80195b2:	46bd      	mov	sp, r7
 80195b4:	bd80      	pop	{r7, pc}
 80195b6:	bf00      	nop
 80195b8:	080252fc 	.word	0x080252fc
 80195bc:	08025964 	.word	0x08025964
 80195c0:	08025340 	.word	0x08025340
 80195c4:	08025980 	.word	0x08025980
 80195c8:	080259a0 	.word	0x080259a0
 80195cc:	080259b8 	.word	0x080259b8
 80195d0:	080259d4 	.word	0x080259d4

080195d4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80195d4:	b580      	push	{r7, lr}
 80195d6:	b082      	sub	sp, #8
 80195d8:	af00      	add	r7, sp, #0
 80195da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d106      	bne.n	80195f0 <tcp_next_iss+0x1c>
 80195e2:	4b0a      	ldr	r3, [pc, #40]	; (801960c <tcp_next_iss+0x38>)
 80195e4:	f640 02af 	movw	r2, #2223	; 0x8af
 80195e8:	4909      	ldr	r1, [pc, #36]	; (8019610 <tcp_next_iss+0x3c>)
 80195ea:	480a      	ldr	r0, [pc, #40]	; (8019614 <tcp_next_iss+0x40>)
 80195ec:	f009 f8e0 	bl	80227b0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80195f0:	4b09      	ldr	r3, [pc, #36]	; (8019618 <tcp_next_iss+0x44>)
 80195f2:	681a      	ldr	r2, [r3, #0]
 80195f4:	4b09      	ldr	r3, [pc, #36]	; (801961c <tcp_next_iss+0x48>)
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	4413      	add	r3, r2
 80195fa:	4a07      	ldr	r2, [pc, #28]	; (8019618 <tcp_next_iss+0x44>)
 80195fc:	6013      	str	r3, [r2, #0]
  return iss;
 80195fe:	4b06      	ldr	r3, [pc, #24]	; (8019618 <tcp_next_iss+0x44>)
 8019600:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8019602:	4618      	mov	r0, r3
 8019604:	3708      	adds	r7, #8
 8019606:	46bd      	mov	sp, r7
 8019608:	bd80      	pop	{r7, pc}
 801960a:	bf00      	nop
 801960c:	080252fc 	.word	0x080252fc
 8019610:	080259ec 	.word	0x080259ec
 8019614:	08025340 	.word	0x08025340
 8019618:	2000002c 	.word	0x2000002c
 801961c:	2000bfb4 	.word	0x2000bfb4

08019620 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8019620:	b580      	push	{r7, lr}
 8019622:	b086      	sub	sp, #24
 8019624:	af00      	add	r7, sp, #0
 8019626:	4603      	mov	r3, r0
 8019628:	60b9      	str	r1, [r7, #8]
 801962a:	607a      	str	r2, [r7, #4]
 801962c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d106      	bne.n	8019642 <tcp_eff_send_mss_netif+0x22>
 8019634:	4b14      	ldr	r3, [pc, #80]	; (8019688 <tcp_eff_send_mss_netif+0x68>)
 8019636:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801963a:	4914      	ldr	r1, [pc, #80]	; (801968c <tcp_eff_send_mss_netif+0x6c>)
 801963c:	4814      	ldr	r0, [pc, #80]	; (8019690 <tcp_eff_send_mss_netif+0x70>)
 801963e:	f009 f8b7 	bl	80227b0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8019642:	68bb      	ldr	r3, [r7, #8]
 8019644:	2b00      	cmp	r3, #0
 8019646:	d101      	bne.n	801964c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8019648:	89fb      	ldrh	r3, [r7, #14]
 801964a:	e019      	b.n	8019680 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801964c:	68bb      	ldr	r3, [r7, #8]
 801964e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019650:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8019652:	8afb      	ldrh	r3, [r7, #22]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d012      	beq.n	801967e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8019658:	2328      	movs	r3, #40	; 0x28
 801965a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801965c:	8afa      	ldrh	r2, [r7, #22]
 801965e:	8abb      	ldrh	r3, [r7, #20]
 8019660:	429a      	cmp	r2, r3
 8019662:	d904      	bls.n	801966e <tcp_eff_send_mss_netif+0x4e>
 8019664:	8afa      	ldrh	r2, [r7, #22]
 8019666:	8abb      	ldrh	r3, [r7, #20]
 8019668:	1ad3      	subs	r3, r2, r3
 801966a:	b29b      	uxth	r3, r3
 801966c:	e000      	b.n	8019670 <tcp_eff_send_mss_netif+0x50>
 801966e:	2300      	movs	r3, #0
 8019670:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8019672:	8a7a      	ldrh	r2, [r7, #18]
 8019674:	89fb      	ldrh	r3, [r7, #14]
 8019676:	4293      	cmp	r3, r2
 8019678:	bf28      	it	cs
 801967a:	4613      	movcs	r3, r2
 801967c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801967e:	89fb      	ldrh	r3, [r7, #14]
}
 8019680:	4618      	mov	r0, r3
 8019682:	3718      	adds	r7, #24
 8019684:	46bd      	mov	sp, r7
 8019686:	bd80      	pop	{r7, pc}
 8019688:	080252fc 	.word	0x080252fc
 801968c:	08025a08 	.word	0x08025a08
 8019690:	08025340 	.word	0x08025340

08019694 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8019694:	b580      	push	{r7, lr}
 8019696:	b084      	sub	sp, #16
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]
 801969c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801969e:	683b      	ldr	r3, [r7, #0]
 80196a0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d119      	bne.n	80196dc <tcp_netif_ip_addr_changed_pcblist+0x48>
 80196a8:	4b10      	ldr	r3, [pc, #64]	; (80196ec <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80196aa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80196ae:	4910      	ldr	r1, [pc, #64]	; (80196f0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80196b0:	4810      	ldr	r0, [pc, #64]	; (80196f4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80196b2:	f009 f87d 	bl	80227b0 <iprintf>

  while (pcb != NULL) {
 80196b6:	e011      	b.n	80196dc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	681a      	ldr	r2, [r3, #0]
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	429a      	cmp	r2, r3
 80196c2:	d108      	bne.n	80196d6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	68db      	ldr	r3, [r3, #12]
 80196c8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80196ca:	68f8      	ldr	r0, [r7, #12]
 80196cc:	f7fe fc38 	bl	8017f40 <tcp_abort>
      pcb = next;
 80196d0:	68bb      	ldr	r3, [r7, #8]
 80196d2:	60fb      	str	r3, [r7, #12]
 80196d4:	e002      	b.n	80196dc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	68db      	ldr	r3, [r3, #12]
 80196da:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d1ea      	bne.n	80196b8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80196e2:	bf00      	nop
 80196e4:	bf00      	nop
 80196e6:	3710      	adds	r7, #16
 80196e8:	46bd      	mov	sp, r7
 80196ea:	bd80      	pop	{r7, pc}
 80196ec:	080252fc 	.word	0x080252fc
 80196f0:	08025a30 	.word	0x08025a30
 80196f4:	08025340 	.word	0x08025340

080196f8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b084      	sub	sp, #16
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	6078      	str	r0, [r7, #4]
 8019700:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d02a      	beq.n	801975e <tcp_netif_ip_addr_changed+0x66>
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d026      	beq.n	801975e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8019710:	4b15      	ldr	r3, [pc, #84]	; (8019768 <tcp_netif_ip_addr_changed+0x70>)
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	4619      	mov	r1, r3
 8019716:	6878      	ldr	r0, [r7, #4]
 8019718:	f7ff ffbc 	bl	8019694 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801971c:	4b13      	ldr	r3, [pc, #76]	; (801976c <tcp_netif_ip_addr_changed+0x74>)
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	4619      	mov	r1, r3
 8019722:	6878      	ldr	r0, [r7, #4]
 8019724:	f7ff ffb6 	bl	8019694 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8019728:	683b      	ldr	r3, [r7, #0]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d017      	beq.n	801975e <tcp_netif_ip_addr_changed+0x66>
 801972e:	683b      	ldr	r3, [r7, #0]
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d013      	beq.n	801975e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019736:	4b0e      	ldr	r3, [pc, #56]	; (8019770 <tcp_netif_ip_addr_changed+0x78>)
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	60fb      	str	r3, [r7, #12]
 801973c:	e00c      	b.n	8019758 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	681a      	ldr	r2, [r3, #0]
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	429a      	cmp	r2, r3
 8019748:	d103      	bne.n	8019752 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801974a:	683b      	ldr	r3, [r7, #0]
 801974c:	681a      	ldr	r2, [r3, #0]
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	68db      	ldr	r3, [r3, #12]
 8019756:	60fb      	str	r3, [r7, #12]
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	2b00      	cmp	r3, #0
 801975c:	d1ef      	bne.n	801973e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801975e:	bf00      	nop
 8019760:	3710      	adds	r7, #16
 8019762:	46bd      	mov	sp, r7
 8019764:	bd80      	pop	{r7, pc}
 8019766:	bf00      	nop
 8019768:	2000bfc0 	.word	0x2000bfc0
 801976c:	2000bfb8 	.word	0x2000bfb8
 8019770:	2000bfbc 	.word	0x2000bfbc

08019774 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8019774:	b580      	push	{r7, lr}
 8019776:	b082      	sub	sp, #8
 8019778:	af00      	add	r7, sp, #0
 801977a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019780:	2b00      	cmp	r3, #0
 8019782:	d007      	beq.n	8019794 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019788:	4618      	mov	r0, r3
 801978a:	f7ff fb6f 	bl	8018e6c <tcp_segs_free>
    pcb->ooseq = NULL;
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	2200      	movs	r2, #0
 8019792:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8019794:	bf00      	nop
 8019796:	3708      	adds	r7, #8
 8019798:	46bd      	mov	sp, r7
 801979a:	bd80      	pop	{r7, pc}

0801979c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801979c:	b590      	push	{r4, r7, lr}
 801979e:	b08d      	sub	sp, #52	; 0x34
 80197a0:	af04      	add	r7, sp, #16
 80197a2:	6078      	str	r0, [r7, #4]
 80197a4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d105      	bne.n	80197b8 <tcp_input+0x1c>
 80197ac:	4b9b      	ldr	r3, [pc, #620]	; (8019a1c <tcp_input+0x280>)
 80197ae:	2283      	movs	r2, #131	; 0x83
 80197b0:	499b      	ldr	r1, [pc, #620]	; (8019a20 <tcp_input+0x284>)
 80197b2:	489c      	ldr	r0, [pc, #624]	; (8019a24 <tcp_input+0x288>)
 80197b4:	f008 fffc 	bl	80227b0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	685b      	ldr	r3, [r3, #4]
 80197bc:	4a9a      	ldr	r2, [pc, #616]	; (8019a28 <tcp_input+0x28c>)
 80197be:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	895b      	ldrh	r3, [r3, #10]
 80197c4:	2b13      	cmp	r3, #19
 80197c6:	f240 83d1 	bls.w	8019f6c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80197ca:	4b98      	ldr	r3, [pc, #608]	; (8019a2c <tcp_input+0x290>)
 80197cc:	695b      	ldr	r3, [r3, #20]
 80197ce:	4a97      	ldr	r2, [pc, #604]	; (8019a2c <tcp_input+0x290>)
 80197d0:	6812      	ldr	r2, [r2, #0]
 80197d2:	4611      	mov	r1, r2
 80197d4:	4618      	mov	r0, r3
 80197d6:	f006 fc3d 	bl	8020054 <ip4_addr_isbroadcast_u32>
 80197da:	4603      	mov	r3, r0
 80197dc:	2b00      	cmp	r3, #0
 80197de:	f040 83c7 	bne.w	8019f70 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80197e2:	4b92      	ldr	r3, [pc, #584]	; (8019a2c <tcp_input+0x290>)
 80197e4:	695b      	ldr	r3, [r3, #20]
 80197e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80197ea:	2be0      	cmp	r3, #224	; 0xe0
 80197ec:	f000 83c0 	beq.w	8019f70 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80197f0:	4b8d      	ldr	r3, [pc, #564]	; (8019a28 <tcp_input+0x28c>)
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	899b      	ldrh	r3, [r3, #12]
 80197f6:	b29b      	uxth	r3, r3
 80197f8:	4618      	mov	r0, r3
 80197fa:	f7fc f9af 	bl	8015b5c <lwip_htons>
 80197fe:	4603      	mov	r3, r0
 8019800:	0b1b      	lsrs	r3, r3, #12
 8019802:	b29b      	uxth	r3, r3
 8019804:	b2db      	uxtb	r3, r3
 8019806:	009b      	lsls	r3, r3, #2
 8019808:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801980a:	7cbb      	ldrb	r3, [r7, #18]
 801980c:	2b13      	cmp	r3, #19
 801980e:	f240 83b1 	bls.w	8019f74 <tcp_input+0x7d8>
 8019812:	7cbb      	ldrb	r3, [r7, #18]
 8019814:	b29a      	uxth	r2, r3
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	891b      	ldrh	r3, [r3, #8]
 801981a:	429a      	cmp	r2, r3
 801981c:	f200 83aa 	bhi.w	8019f74 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8019820:	7cbb      	ldrb	r3, [r7, #18]
 8019822:	b29b      	uxth	r3, r3
 8019824:	3b14      	subs	r3, #20
 8019826:	b29a      	uxth	r2, r3
 8019828:	4b81      	ldr	r3, [pc, #516]	; (8019a30 <tcp_input+0x294>)
 801982a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801982c:	4b81      	ldr	r3, [pc, #516]	; (8019a34 <tcp_input+0x298>)
 801982e:	2200      	movs	r2, #0
 8019830:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	895a      	ldrh	r2, [r3, #10]
 8019836:	7cbb      	ldrb	r3, [r7, #18]
 8019838:	b29b      	uxth	r3, r3
 801983a:	429a      	cmp	r2, r3
 801983c:	d309      	bcc.n	8019852 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801983e:	4b7c      	ldr	r3, [pc, #496]	; (8019a30 <tcp_input+0x294>)
 8019840:	881a      	ldrh	r2, [r3, #0]
 8019842:	4b7d      	ldr	r3, [pc, #500]	; (8019a38 <tcp_input+0x29c>)
 8019844:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8019846:	7cbb      	ldrb	r3, [r7, #18]
 8019848:	4619      	mov	r1, r3
 801984a:	6878      	ldr	r0, [r7, #4]
 801984c:	f7fd fcf2 	bl	8017234 <pbuf_remove_header>
 8019850:	e04e      	b.n	80198f0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d105      	bne.n	8019866 <tcp_input+0xca>
 801985a:	4b70      	ldr	r3, [pc, #448]	; (8019a1c <tcp_input+0x280>)
 801985c:	22c2      	movs	r2, #194	; 0xc2
 801985e:	4977      	ldr	r1, [pc, #476]	; (8019a3c <tcp_input+0x2a0>)
 8019860:	4870      	ldr	r0, [pc, #448]	; (8019a24 <tcp_input+0x288>)
 8019862:	f008 ffa5 	bl	80227b0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8019866:	2114      	movs	r1, #20
 8019868:	6878      	ldr	r0, [r7, #4]
 801986a:	f7fd fce3 	bl	8017234 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	895a      	ldrh	r2, [r3, #10]
 8019872:	4b71      	ldr	r3, [pc, #452]	; (8019a38 <tcp_input+0x29c>)
 8019874:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8019876:	4b6e      	ldr	r3, [pc, #440]	; (8019a30 <tcp_input+0x294>)
 8019878:	881a      	ldrh	r2, [r3, #0]
 801987a:	4b6f      	ldr	r3, [pc, #444]	; (8019a38 <tcp_input+0x29c>)
 801987c:	881b      	ldrh	r3, [r3, #0]
 801987e:	1ad3      	subs	r3, r2, r3
 8019880:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8019882:	4b6d      	ldr	r3, [pc, #436]	; (8019a38 <tcp_input+0x29c>)
 8019884:	881b      	ldrh	r3, [r3, #0]
 8019886:	4619      	mov	r1, r3
 8019888:	6878      	ldr	r0, [r7, #4]
 801988a:	f7fd fcd3 	bl	8017234 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	895b      	ldrh	r3, [r3, #10]
 8019894:	8a3a      	ldrh	r2, [r7, #16]
 8019896:	429a      	cmp	r2, r3
 8019898:	f200 836e 	bhi.w	8019f78 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	685b      	ldr	r3, [r3, #4]
 80198a2:	4a64      	ldr	r2, [pc, #400]	; (8019a34 <tcp_input+0x298>)
 80198a4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	8a3a      	ldrh	r2, [r7, #16]
 80198ac:	4611      	mov	r1, r2
 80198ae:	4618      	mov	r0, r3
 80198b0:	f7fd fcc0 	bl	8017234 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	891a      	ldrh	r2, [r3, #8]
 80198b8:	8a3b      	ldrh	r3, [r7, #16]
 80198ba:	1ad3      	subs	r3, r2, r3
 80198bc:	b29a      	uxth	r2, r3
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	895b      	ldrh	r3, [r3, #10]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d005      	beq.n	80198d6 <tcp_input+0x13a>
 80198ca:	4b54      	ldr	r3, [pc, #336]	; (8019a1c <tcp_input+0x280>)
 80198cc:	22df      	movs	r2, #223	; 0xdf
 80198ce:	495c      	ldr	r1, [pc, #368]	; (8019a40 <tcp_input+0x2a4>)
 80198d0:	4854      	ldr	r0, [pc, #336]	; (8019a24 <tcp_input+0x288>)
 80198d2:	f008 ff6d 	bl	80227b0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	891a      	ldrh	r2, [r3, #8]
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	891b      	ldrh	r3, [r3, #8]
 80198e0:	429a      	cmp	r2, r3
 80198e2:	d005      	beq.n	80198f0 <tcp_input+0x154>
 80198e4:	4b4d      	ldr	r3, [pc, #308]	; (8019a1c <tcp_input+0x280>)
 80198e6:	22e0      	movs	r2, #224	; 0xe0
 80198e8:	4956      	ldr	r1, [pc, #344]	; (8019a44 <tcp_input+0x2a8>)
 80198ea:	484e      	ldr	r0, [pc, #312]	; (8019a24 <tcp_input+0x288>)
 80198ec:	f008 ff60 	bl	80227b0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80198f0:	4b4d      	ldr	r3, [pc, #308]	; (8019a28 <tcp_input+0x28c>)
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	881b      	ldrh	r3, [r3, #0]
 80198f6:	b29b      	uxth	r3, r3
 80198f8:	4a4b      	ldr	r2, [pc, #300]	; (8019a28 <tcp_input+0x28c>)
 80198fa:	6814      	ldr	r4, [r2, #0]
 80198fc:	4618      	mov	r0, r3
 80198fe:	f7fc f92d 	bl	8015b5c <lwip_htons>
 8019902:	4603      	mov	r3, r0
 8019904:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8019906:	4b48      	ldr	r3, [pc, #288]	; (8019a28 <tcp_input+0x28c>)
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	885b      	ldrh	r3, [r3, #2]
 801990c:	b29b      	uxth	r3, r3
 801990e:	4a46      	ldr	r2, [pc, #280]	; (8019a28 <tcp_input+0x28c>)
 8019910:	6814      	ldr	r4, [r2, #0]
 8019912:	4618      	mov	r0, r3
 8019914:	f7fc f922 	bl	8015b5c <lwip_htons>
 8019918:	4603      	mov	r3, r0
 801991a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801991c:	4b42      	ldr	r3, [pc, #264]	; (8019a28 <tcp_input+0x28c>)
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	685b      	ldr	r3, [r3, #4]
 8019922:	4a41      	ldr	r2, [pc, #260]	; (8019a28 <tcp_input+0x28c>)
 8019924:	6814      	ldr	r4, [r2, #0]
 8019926:	4618      	mov	r0, r3
 8019928:	f7fc f92d 	bl	8015b86 <lwip_htonl>
 801992c:	4603      	mov	r3, r0
 801992e:	6063      	str	r3, [r4, #4]
 8019930:	6863      	ldr	r3, [r4, #4]
 8019932:	4a45      	ldr	r2, [pc, #276]	; (8019a48 <tcp_input+0x2ac>)
 8019934:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8019936:	4b3c      	ldr	r3, [pc, #240]	; (8019a28 <tcp_input+0x28c>)
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	689b      	ldr	r3, [r3, #8]
 801993c:	4a3a      	ldr	r2, [pc, #232]	; (8019a28 <tcp_input+0x28c>)
 801993e:	6814      	ldr	r4, [r2, #0]
 8019940:	4618      	mov	r0, r3
 8019942:	f7fc f920 	bl	8015b86 <lwip_htonl>
 8019946:	4603      	mov	r3, r0
 8019948:	60a3      	str	r3, [r4, #8]
 801994a:	68a3      	ldr	r3, [r4, #8]
 801994c:	4a3f      	ldr	r2, [pc, #252]	; (8019a4c <tcp_input+0x2b0>)
 801994e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8019950:	4b35      	ldr	r3, [pc, #212]	; (8019a28 <tcp_input+0x28c>)
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	89db      	ldrh	r3, [r3, #14]
 8019956:	b29b      	uxth	r3, r3
 8019958:	4a33      	ldr	r2, [pc, #204]	; (8019a28 <tcp_input+0x28c>)
 801995a:	6814      	ldr	r4, [r2, #0]
 801995c:	4618      	mov	r0, r3
 801995e:	f7fc f8fd 	bl	8015b5c <lwip_htons>
 8019962:	4603      	mov	r3, r0
 8019964:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8019966:	4b30      	ldr	r3, [pc, #192]	; (8019a28 <tcp_input+0x28c>)
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	899b      	ldrh	r3, [r3, #12]
 801996c:	b29b      	uxth	r3, r3
 801996e:	4618      	mov	r0, r3
 8019970:	f7fc f8f4 	bl	8015b5c <lwip_htons>
 8019974:	4603      	mov	r3, r0
 8019976:	b2db      	uxtb	r3, r3
 8019978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801997c:	b2da      	uxtb	r2, r3
 801997e:	4b34      	ldr	r3, [pc, #208]	; (8019a50 <tcp_input+0x2b4>)
 8019980:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	891a      	ldrh	r2, [r3, #8]
 8019986:	4b33      	ldr	r3, [pc, #204]	; (8019a54 <tcp_input+0x2b8>)
 8019988:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801998a:	4b31      	ldr	r3, [pc, #196]	; (8019a50 <tcp_input+0x2b4>)
 801998c:	781b      	ldrb	r3, [r3, #0]
 801998e:	f003 0303 	and.w	r3, r3, #3
 8019992:	2b00      	cmp	r3, #0
 8019994:	d00c      	beq.n	80199b0 <tcp_input+0x214>
    tcplen++;
 8019996:	4b2f      	ldr	r3, [pc, #188]	; (8019a54 <tcp_input+0x2b8>)
 8019998:	881b      	ldrh	r3, [r3, #0]
 801999a:	3301      	adds	r3, #1
 801999c:	b29a      	uxth	r2, r3
 801999e:	4b2d      	ldr	r3, [pc, #180]	; (8019a54 <tcp_input+0x2b8>)
 80199a0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	891a      	ldrh	r2, [r3, #8]
 80199a6:	4b2b      	ldr	r3, [pc, #172]	; (8019a54 <tcp_input+0x2b8>)
 80199a8:	881b      	ldrh	r3, [r3, #0]
 80199aa:	429a      	cmp	r2, r3
 80199ac:	f200 82e6 	bhi.w	8019f7c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80199b0:	2300      	movs	r3, #0
 80199b2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80199b4:	4b28      	ldr	r3, [pc, #160]	; (8019a58 <tcp_input+0x2bc>)
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	61fb      	str	r3, [r7, #28]
 80199ba:	e09d      	b.n	8019af8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80199bc:	69fb      	ldr	r3, [r7, #28]
 80199be:	7d1b      	ldrb	r3, [r3, #20]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d105      	bne.n	80199d0 <tcp_input+0x234>
 80199c4:	4b15      	ldr	r3, [pc, #84]	; (8019a1c <tcp_input+0x280>)
 80199c6:	22fb      	movs	r2, #251	; 0xfb
 80199c8:	4924      	ldr	r1, [pc, #144]	; (8019a5c <tcp_input+0x2c0>)
 80199ca:	4816      	ldr	r0, [pc, #88]	; (8019a24 <tcp_input+0x288>)
 80199cc:	f008 fef0 	bl	80227b0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80199d0:	69fb      	ldr	r3, [r7, #28]
 80199d2:	7d1b      	ldrb	r3, [r3, #20]
 80199d4:	2b0a      	cmp	r3, #10
 80199d6:	d105      	bne.n	80199e4 <tcp_input+0x248>
 80199d8:	4b10      	ldr	r3, [pc, #64]	; (8019a1c <tcp_input+0x280>)
 80199da:	22fc      	movs	r2, #252	; 0xfc
 80199dc:	4920      	ldr	r1, [pc, #128]	; (8019a60 <tcp_input+0x2c4>)
 80199de:	4811      	ldr	r0, [pc, #68]	; (8019a24 <tcp_input+0x288>)
 80199e0:	f008 fee6 	bl	80227b0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80199e4:	69fb      	ldr	r3, [r7, #28]
 80199e6:	7d1b      	ldrb	r3, [r3, #20]
 80199e8:	2b01      	cmp	r3, #1
 80199ea:	d105      	bne.n	80199f8 <tcp_input+0x25c>
 80199ec:	4b0b      	ldr	r3, [pc, #44]	; (8019a1c <tcp_input+0x280>)
 80199ee:	22fd      	movs	r2, #253	; 0xfd
 80199f0:	491c      	ldr	r1, [pc, #112]	; (8019a64 <tcp_input+0x2c8>)
 80199f2:	480c      	ldr	r0, [pc, #48]	; (8019a24 <tcp_input+0x288>)
 80199f4:	f008 fedc 	bl	80227b0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80199f8:	69fb      	ldr	r3, [r7, #28]
 80199fa:	7a1b      	ldrb	r3, [r3, #8]
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d033      	beq.n	8019a68 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019a00:	69fb      	ldr	r3, [r7, #28]
 8019a02:	7a1a      	ldrb	r2, [r3, #8]
 8019a04:	4b09      	ldr	r3, [pc, #36]	; (8019a2c <tcp_input+0x290>)
 8019a06:	685b      	ldr	r3, [r3, #4]
 8019a08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019a0c:	3301      	adds	r3, #1
 8019a0e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019a10:	429a      	cmp	r2, r3
 8019a12:	d029      	beq.n	8019a68 <tcp_input+0x2cc>
      prev = pcb;
 8019a14:	69fb      	ldr	r3, [r7, #28]
 8019a16:	61bb      	str	r3, [r7, #24]
      continue;
 8019a18:	e06b      	b.n	8019af2 <tcp_input+0x356>
 8019a1a:	bf00      	nop
 8019a1c:	08025a64 	.word	0x08025a64
 8019a20:	08025a98 	.word	0x08025a98
 8019a24:	08025ab0 	.word	0x08025ab0
 8019a28:	2000bfdc 	.word	0x2000bfdc
 8019a2c:	200066a0 	.word	0x200066a0
 8019a30:	2000bfe0 	.word	0x2000bfe0
 8019a34:	2000bfe4 	.word	0x2000bfe4
 8019a38:	2000bfe2 	.word	0x2000bfe2
 8019a3c:	08025ad8 	.word	0x08025ad8
 8019a40:	08025ae8 	.word	0x08025ae8
 8019a44:	08025af4 	.word	0x08025af4
 8019a48:	2000bfec 	.word	0x2000bfec
 8019a4c:	2000bff0 	.word	0x2000bff0
 8019a50:	2000bff8 	.word	0x2000bff8
 8019a54:	2000bff6 	.word	0x2000bff6
 8019a58:	2000bfc0 	.word	0x2000bfc0
 8019a5c:	08025b14 	.word	0x08025b14
 8019a60:	08025b3c 	.word	0x08025b3c
 8019a64:	08025b68 	.word	0x08025b68
    }

    if (pcb->remote_port == tcphdr->src &&
 8019a68:	69fb      	ldr	r3, [r7, #28]
 8019a6a:	8b1a      	ldrh	r2, [r3, #24]
 8019a6c:	4b72      	ldr	r3, [pc, #456]	; (8019c38 <tcp_input+0x49c>)
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	881b      	ldrh	r3, [r3, #0]
 8019a72:	b29b      	uxth	r3, r3
 8019a74:	429a      	cmp	r2, r3
 8019a76:	d13a      	bne.n	8019aee <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8019a78:	69fb      	ldr	r3, [r7, #28]
 8019a7a:	8ada      	ldrh	r2, [r3, #22]
 8019a7c:	4b6e      	ldr	r3, [pc, #440]	; (8019c38 <tcp_input+0x49c>)
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	885b      	ldrh	r3, [r3, #2]
 8019a82:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8019a84:	429a      	cmp	r2, r3
 8019a86:	d132      	bne.n	8019aee <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019a88:	69fb      	ldr	r3, [r7, #28]
 8019a8a:	685a      	ldr	r2, [r3, #4]
 8019a8c:	4b6b      	ldr	r3, [pc, #428]	; (8019c3c <tcp_input+0x4a0>)
 8019a8e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8019a90:	429a      	cmp	r2, r3
 8019a92:	d12c      	bne.n	8019aee <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019a94:	69fb      	ldr	r3, [r7, #28]
 8019a96:	681a      	ldr	r2, [r3, #0]
 8019a98:	4b68      	ldr	r3, [pc, #416]	; (8019c3c <tcp_input+0x4a0>)
 8019a9a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019a9c:	429a      	cmp	r2, r3
 8019a9e:	d126      	bne.n	8019aee <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8019aa0:	69fb      	ldr	r3, [r7, #28]
 8019aa2:	68db      	ldr	r3, [r3, #12]
 8019aa4:	69fa      	ldr	r2, [r7, #28]
 8019aa6:	429a      	cmp	r2, r3
 8019aa8:	d106      	bne.n	8019ab8 <tcp_input+0x31c>
 8019aaa:	4b65      	ldr	r3, [pc, #404]	; (8019c40 <tcp_input+0x4a4>)
 8019aac:	f240 120d 	movw	r2, #269	; 0x10d
 8019ab0:	4964      	ldr	r1, [pc, #400]	; (8019c44 <tcp_input+0x4a8>)
 8019ab2:	4865      	ldr	r0, [pc, #404]	; (8019c48 <tcp_input+0x4ac>)
 8019ab4:	f008 fe7c 	bl	80227b0 <iprintf>
      if (prev != NULL) {
 8019ab8:	69bb      	ldr	r3, [r7, #24]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d00a      	beq.n	8019ad4 <tcp_input+0x338>
        prev->next = pcb->next;
 8019abe:	69fb      	ldr	r3, [r7, #28]
 8019ac0:	68da      	ldr	r2, [r3, #12]
 8019ac2:	69bb      	ldr	r3, [r7, #24]
 8019ac4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8019ac6:	4b61      	ldr	r3, [pc, #388]	; (8019c4c <tcp_input+0x4b0>)
 8019ac8:	681a      	ldr	r2, [r3, #0]
 8019aca:	69fb      	ldr	r3, [r7, #28]
 8019acc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8019ace:	4a5f      	ldr	r2, [pc, #380]	; (8019c4c <tcp_input+0x4b0>)
 8019ad0:	69fb      	ldr	r3, [r7, #28]
 8019ad2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8019ad4:	69fb      	ldr	r3, [r7, #28]
 8019ad6:	68db      	ldr	r3, [r3, #12]
 8019ad8:	69fa      	ldr	r2, [r7, #28]
 8019ada:	429a      	cmp	r2, r3
 8019adc:	d111      	bne.n	8019b02 <tcp_input+0x366>
 8019ade:	4b58      	ldr	r3, [pc, #352]	; (8019c40 <tcp_input+0x4a4>)
 8019ae0:	f240 1215 	movw	r2, #277	; 0x115
 8019ae4:	495a      	ldr	r1, [pc, #360]	; (8019c50 <tcp_input+0x4b4>)
 8019ae6:	4858      	ldr	r0, [pc, #352]	; (8019c48 <tcp_input+0x4ac>)
 8019ae8:	f008 fe62 	bl	80227b0 <iprintf>
      break;
 8019aec:	e009      	b.n	8019b02 <tcp_input+0x366>
    }
    prev = pcb;
 8019aee:	69fb      	ldr	r3, [r7, #28]
 8019af0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019af2:	69fb      	ldr	r3, [r7, #28]
 8019af4:	68db      	ldr	r3, [r3, #12]
 8019af6:	61fb      	str	r3, [r7, #28]
 8019af8:	69fb      	ldr	r3, [r7, #28]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	f47f af5e 	bne.w	80199bc <tcp_input+0x220>
 8019b00:	e000      	b.n	8019b04 <tcp_input+0x368>
      break;
 8019b02:	bf00      	nop
  }

  if (pcb == NULL) {
 8019b04:	69fb      	ldr	r3, [r7, #28]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	f040 80aa 	bne.w	8019c60 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019b0c:	4b51      	ldr	r3, [pc, #324]	; (8019c54 <tcp_input+0x4b8>)
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	61fb      	str	r3, [r7, #28]
 8019b12:	e03f      	b.n	8019b94 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8019b14:	69fb      	ldr	r3, [r7, #28]
 8019b16:	7d1b      	ldrb	r3, [r3, #20]
 8019b18:	2b0a      	cmp	r3, #10
 8019b1a:	d006      	beq.n	8019b2a <tcp_input+0x38e>
 8019b1c:	4b48      	ldr	r3, [pc, #288]	; (8019c40 <tcp_input+0x4a4>)
 8019b1e:	f240 121f 	movw	r2, #287	; 0x11f
 8019b22:	494d      	ldr	r1, [pc, #308]	; (8019c58 <tcp_input+0x4bc>)
 8019b24:	4848      	ldr	r0, [pc, #288]	; (8019c48 <tcp_input+0x4ac>)
 8019b26:	f008 fe43 	bl	80227b0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019b2a:	69fb      	ldr	r3, [r7, #28]
 8019b2c:	7a1b      	ldrb	r3, [r3, #8]
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d009      	beq.n	8019b46 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019b32:	69fb      	ldr	r3, [r7, #28]
 8019b34:	7a1a      	ldrb	r2, [r3, #8]
 8019b36:	4b41      	ldr	r3, [pc, #260]	; (8019c3c <tcp_input+0x4a0>)
 8019b38:	685b      	ldr	r3, [r3, #4]
 8019b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019b3e:	3301      	adds	r3, #1
 8019b40:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019b42:	429a      	cmp	r2, r3
 8019b44:	d122      	bne.n	8019b8c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8019b46:	69fb      	ldr	r3, [r7, #28]
 8019b48:	8b1a      	ldrh	r2, [r3, #24]
 8019b4a:	4b3b      	ldr	r3, [pc, #236]	; (8019c38 <tcp_input+0x49c>)
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	881b      	ldrh	r3, [r3, #0]
 8019b50:	b29b      	uxth	r3, r3
 8019b52:	429a      	cmp	r2, r3
 8019b54:	d11b      	bne.n	8019b8e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8019b56:	69fb      	ldr	r3, [r7, #28]
 8019b58:	8ada      	ldrh	r2, [r3, #22]
 8019b5a:	4b37      	ldr	r3, [pc, #220]	; (8019c38 <tcp_input+0x49c>)
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	885b      	ldrh	r3, [r3, #2]
 8019b60:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8019b62:	429a      	cmp	r2, r3
 8019b64:	d113      	bne.n	8019b8e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019b66:	69fb      	ldr	r3, [r7, #28]
 8019b68:	685a      	ldr	r2, [r3, #4]
 8019b6a:	4b34      	ldr	r3, [pc, #208]	; (8019c3c <tcp_input+0x4a0>)
 8019b6c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8019b6e:	429a      	cmp	r2, r3
 8019b70:	d10d      	bne.n	8019b8e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019b72:	69fb      	ldr	r3, [r7, #28]
 8019b74:	681a      	ldr	r2, [r3, #0]
 8019b76:	4b31      	ldr	r3, [pc, #196]	; (8019c3c <tcp_input+0x4a0>)
 8019b78:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019b7a:	429a      	cmp	r2, r3
 8019b7c:	d107      	bne.n	8019b8e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8019b7e:	69f8      	ldr	r0, [r7, #28]
 8019b80:	f000 fb56 	bl	801a230 <tcp_timewait_input>
        }
        pbuf_free(p);
 8019b84:	6878      	ldr	r0, [r7, #4]
 8019b86:	f7fd fbdb 	bl	8017340 <pbuf_free>
        return;
 8019b8a:	e1fd      	b.n	8019f88 <tcp_input+0x7ec>
        continue;
 8019b8c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019b8e:	69fb      	ldr	r3, [r7, #28]
 8019b90:	68db      	ldr	r3, [r3, #12]
 8019b92:	61fb      	str	r3, [r7, #28]
 8019b94:	69fb      	ldr	r3, [r7, #28]
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d1bc      	bne.n	8019b14 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019b9e:	4b2f      	ldr	r3, [pc, #188]	; (8019c5c <tcp_input+0x4c0>)
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	617b      	str	r3, [r7, #20]
 8019ba4:	e02a      	b.n	8019bfc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8019ba6:	697b      	ldr	r3, [r7, #20]
 8019ba8:	7a1b      	ldrb	r3, [r3, #8]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d00c      	beq.n	8019bc8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019bae:	697b      	ldr	r3, [r7, #20]
 8019bb0:	7a1a      	ldrb	r2, [r3, #8]
 8019bb2:	4b22      	ldr	r3, [pc, #136]	; (8019c3c <tcp_input+0x4a0>)
 8019bb4:	685b      	ldr	r3, [r3, #4]
 8019bb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019bba:	3301      	adds	r3, #1
 8019bbc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8019bbe:	429a      	cmp	r2, r3
 8019bc0:	d002      	beq.n	8019bc8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8019bc2:	697b      	ldr	r3, [r7, #20]
 8019bc4:	61bb      	str	r3, [r7, #24]
        continue;
 8019bc6:	e016      	b.n	8019bf6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8019bc8:	697b      	ldr	r3, [r7, #20]
 8019bca:	8ada      	ldrh	r2, [r3, #22]
 8019bcc:	4b1a      	ldr	r3, [pc, #104]	; (8019c38 <tcp_input+0x49c>)
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	885b      	ldrh	r3, [r3, #2]
 8019bd2:	b29b      	uxth	r3, r3
 8019bd4:	429a      	cmp	r2, r3
 8019bd6:	d10c      	bne.n	8019bf2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8019bd8:	697b      	ldr	r3, [r7, #20]
 8019bda:	681a      	ldr	r2, [r3, #0]
 8019bdc:	4b17      	ldr	r3, [pc, #92]	; (8019c3c <tcp_input+0x4a0>)
 8019bde:	695b      	ldr	r3, [r3, #20]
 8019be0:	429a      	cmp	r2, r3
 8019be2:	d00f      	beq.n	8019c04 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8019be4:	697b      	ldr	r3, [r7, #20]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d00d      	beq.n	8019c06 <tcp_input+0x46a>
 8019bea:	697b      	ldr	r3, [r7, #20]
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d009      	beq.n	8019c06 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8019bf2:	697b      	ldr	r3, [r7, #20]
 8019bf4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019bf6:	697b      	ldr	r3, [r7, #20]
 8019bf8:	68db      	ldr	r3, [r3, #12]
 8019bfa:	617b      	str	r3, [r7, #20]
 8019bfc:	697b      	ldr	r3, [r7, #20]
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d1d1      	bne.n	8019ba6 <tcp_input+0x40a>
 8019c02:	e000      	b.n	8019c06 <tcp_input+0x46a>
            break;
 8019c04:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8019c06:	697b      	ldr	r3, [r7, #20]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d029      	beq.n	8019c60 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8019c0c:	69bb      	ldr	r3, [r7, #24]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d00a      	beq.n	8019c28 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8019c12:	697b      	ldr	r3, [r7, #20]
 8019c14:	68da      	ldr	r2, [r3, #12]
 8019c16:	69bb      	ldr	r3, [r7, #24]
 8019c18:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8019c1a:	4b10      	ldr	r3, [pc, #64]	; (8019c5c <tcp_input+0x4c0>)
 8019c1c:	681a      	ldr	r2, [r3, #0]
 8019c1e:	697b      	ldr	r3, [r7, #20]
 8019c20:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8019c22:	4a0e      	ldr	r2, [pc, #56]	; (8019c5c <tcp_input+0x4c0>)
 8019c24:	697b      	ldr	r3, [r7, #20]
 8019c26:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8019c28:	6978      	ldr	r0, [r7, #20]
 8019c2a:	f000 fa03 	bl	801a034 <tcp_listen_input>
      }
      pbuf_free(p);
 8019c2e:	6878      	ldr	r0, [r7, #4]
 8019c30:	f7fd fb86 	bl	8017340 <pbuf_free>
      return;
 8019c34:	e1a8      	b.n	8019f88 <tcp_input+0x7ec>
 8019c36:	bf00      	nop
 8019c38:	2000bfdc 	.word	0x2000bfdc
 8019c3c:	200066a0 	.word	0x200066a0
 8019c40:	08025a64 	.word	0x08025a64
 8019c44:	08025b90 	.word	0x08025b90
 8019c48:	08025ab0 	.word	0x08025ab0
 8019c4c:	2000bfc0 	.word	0x2000bfc0
 8019c50:	08025bbc 	.word	0x08025bbc
 8019c54:	2000bfc4 	.word	0x2000bfc4
 8019c58:	08025be8 	.word	0x08025be8
 8019c5c:	2000bfbc 	.word	0x2000bfbc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8019c60:	69fb      	ldr	r3, [r7, #28]
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	f000 8158 	beq.w	8019f18 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8019c68:	4b95      	ldr	r3, [pc, #596]	; (8019ec0 <tcp_input+0x724>)
 8019c6a:	2200      	movs	r2, #0
 8019c6c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	891a      	ldrh	r2, [r3, #8]
 8019c72:	4b93      	ldr	r3, [pc, #588]	; (8019ec0 <tcp_input+0x724>)
 8019c74:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8019c76:	4a92      	ldr	r2, [pc, #584]	; (8019ec0 <tcp_input+0x724>)
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8019c7c:	4b91      	ldr	r3, [pc, #580]	; (8019ec4 <tcp_input+0x728>)
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	4a8f      	ldr	r2, [pc, #572]	; (8019ec0 <tcp_input+0x724>)
 8019c82:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8019c84:	4b90      	ldr	r3, [pc, #576]	; (8019ec8 <tcp_input+0x72c>)
 8019c86:	2200      	movs	r2, #0
 8019c88:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8019c8a:	4b90      	ldr	r3, [pc, #576]	; (8019ecc <tcp_input+0x730>)
 8019c8c:	2200      	movs	r2, #0
 8019c8e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8019c90:	4b8f      	ldr	r3, [pc, #572]	; (8019ed0 <tcp_input+0x734>)
 8019c92:	2200      	movs	r2, #0
 8019c94:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8019c96:	4b8f      	ldr	r3, [pc, #572]	; (8019ed4 <tcp_input+0x738>)
 8019c98:	781b      	ldrb	r3, [r3, #0]
 8019c9a:	f003 0308 	and.w	r3, r3, #8
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d006      	beq.n	8019cb0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	7b5b      	ldrb	r3, [r3, #13]
 8019ca6:	f043 0301 	orr.w	r3, r3, #1
 8019caa:	b2da      	uxtb	r2, r3
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8019cb0:	69fb      	ldr	r3, [r7, #28]
 8019cb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d017      	beq.n	8019ce8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019cb8:	69f8      	ldr	r0, [r7, #28]
 8019cba:	f7ff f85b 	bl	8018d74 <tcp_process_refused_data>
 8019cbe:	4603      	mov	r3, r0
 8019cc0:	f113 0f0d 	cmn.w	r3, #13
 8019cc4:	d007      	beq.n	8019cd6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8019cc6:	69fb      	ldr	r3, [r7, #28]
 8019cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d00c      	beq.n	8019ce8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8019cce:	4b82      	ldr	r3, [pc, #520]	; (8019ed8 <tcp_input+0x73c>)
 8019cd0:	881b      	ldrh	r3, [r3, #0]
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d008      	beq.n	8019ce8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8019cd6:	69fb      	ldr	r3, [r7, #28]
 8019cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	f040 80e3 	bne.w	8019ea6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8019ce0:	69f8      	ldr	r0, [r7, #28]
 8019ce2:	f003 fe05 	bl	801d8f0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8019ce6:	e0de      	b.n	8019ea6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8019ce8:	4a7c      	ldr	r2, [pc, #496]	; (8019edc <tcp_input+0x740>)
 8019cea:	69fb      	ldr	r3, [r7, #28]
 8019cec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8019cee:	69f8      	ldr	r0, [r7, #28]
 8019cf0:	f000 fb18 	bl	801a324 <tcp_process>
 8019cf4:	4603      	mov	r3, r0
 8019cf6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8019cf8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019cfc:	f113 0f0d 	cmn.w	r3, #13
 8019d00:	f000 80d3 	beq.w	8019eaa <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8019d04:	4b71      	ldr	r3, [pc, #452]	; (8019ecc <tcp_input+0x730>)
 8019d06:	781b      	ldrb	r3, [r3, #0]
 8019d08:	f003 0308 	and.w	r3, r3, #8
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d015      	beq.n	8019d3c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8019d10:	69fb      	ldr	r3, [r7, #28]
 8019d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d008      	beq.n	8019d2c <tcp_input+0x590>
 8019d1a:	69fb      	ldr	r3, [r7, #28]
 8019d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019d20:	69fa      	ldr	r2, [r7, #28]
 8019d22:	6912      	ldr	r2, [r2, #16]
 8019d24:	f06f 010d 	mvn.w	r1, #13
 8019d28:	4610      	mov	r0, r2
 8019d2a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019d2c:	69f9      	ldr	r1, [r7, #28]
 8019d2e:	486c      	ldr	r0, [pc, #432]	; (8019ee0 <tcp_input+0x744>)
 8019d30:	f7ff fbbc 	bl	80194ac <tcp_pcb_remove>
        tcp_free(pcb);
 8019d34:	69f8      	ldr	r0, [r7, #28]
 8019d36:	f7fd fdbf 	bl	80178b8 <tcp_free>
 8019d3a:	e0da      	b.n	8019ef2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8019d40:	4b63      	ldr	r3, [pc, #396]	; (8019ed0 <tcp_input+0x734>)
 8019d42:	881b      	ldrh	r3, [r3, #0]
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d01d      	beq.n	8019d84 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8019d48:	4b61      	ldr	r3, [pc, #388]	; (8019ed0 <tcp_input+0x734>)
 8019d4a:	881b      	ldrh	r3, [r3, #0]
 8019d4c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8019d4e:	69fb      	ldr	r3, [r7, #28]
 8019d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d00a      	beq.n	8019d6e <tcp_input+0x5d2>
 8019d58:	69fb      	ldr	r3, [r7, #28]
 8019d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019d5e:	69fa      	ldr	r2, [r7, #28]
 8019d60:	6910      	ldr	r0, [r2, #16]
 8019d62:	89fa      	ldrh	r2, [r7, #14]
 8019d64:	69f9      	ldr	r1, [r7, #28]
 8019d66:	4798      	blx	r3
 8019d68:	4603      	mov	r3, r0
 8019d6a:	74fb      	strb	r3, [r7, #19]
 8019d6c:	e001      	b.n	8019d72 <tcp_input+0x5d6>
 8019d6e:	2300      	movs	r3, #0
 8019d70:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8019d72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019d76:	f113 0f0d 	cmn.w	r3, #13
 8019d7a:	f000 8098 	beq.w	8019eae <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8019d7e:	4b54      	ldr	r3, [pc, #336]	; (8019ed0 <tcp_input+0x734>)
 8019d80:	2200      	movs	r2, #0
 8019d82:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8019d84:	69f8      	ldr	r0, [r7, #28]
 8019d86:	f000 f915 	bl	8019fb4 <tcp_input_delayed_close>
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	f040 8090 	bne.w	8019eb2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8019d92:	4b4d      	ldr	r3, [pc, #308]	; (8019ec8 <tcp_input+0x72c>)
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d041      	beq.n	8019e1e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8019d9a:	69fb      	ldr	r3, [r7, #28]
 8019d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d006      	beq.n	8019db0 <tcp_input+0x614>
 8019da2:	4b50      	ldr	r3, [pc, #320]	; (8019ee4 <tcp_input+0x748>)
 8019da4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019da8:	494f      	ldr	r1, [pc, #316]	; (8019ee8 <tcp_input+0x74c>)
 8019daa:	4850      	ldr	r0, [pc, #320]	; (8019eec <tcp_input+0x750>)
 8019dac:	f008 fd00 	bl	80227b0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8019db0:	69fb      	ldr	r3, [r7, #28]
 8019db2:	8b5b      	ldrh	r3, [r3, #26]
 8019db4:	f003 0310 	and.w	r3, r3, #16
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d008      	beq.n	8019dce <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8019dbc:	4b42      	ldr	r3, [pc, #264]	; (8019ec8 <tcp_input+0x72c>)
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	4618      	mov	r0, r3
 8019dc2:	f7fd fabd 	bl	8017340 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8019dc6:	69f8      	ldr	r0, [r7, #28]
 8019dc8:	f7fe f8ba 	bl	8017f40 <tcp_abort>
            goto aborted;
 8019dcc:	e091      	b.n	8019ef2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8019dce:	69fb      	ldr	r3, [r7, #28]
 8019dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d00c      	beq.n	8019df2 <tcp_input+0x656>
 8019dd8:	69fb      	ldr	r3, [r7, #28]
 8019dda:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019dde:	69fb      	ldr	r3, [r7, #28]
 8019de0:	6918      	ldr	r0, [r3, #16]
 8019de2:	4b39      	ldr	r3, [pc, #228]	; (8019ec8 <tcp_input+0x72c>)
 8019de4:	681a      	ldr	r2, [r3, #0]
 8019de6:	2300      	movs	r3, #0
 8019de8:	69f9      	ldr	r1, [r7, #28]
 8019dea:	47a0      	blx	r4
 8019dec:	4603      	mov	r3, r0
 8019dee:	74fb      	strb	r3, [r7, #19]
 8019df0:	e008      	b.n	8019e04 <tcp_input+0x668>
 8019df2:	4b35      	ldr	r3, [pc, #212]	; (8019ec8 <tcp_input+0x72c>)
 8019df4:	681a      	ldr	r2, [r3, #0]
 8019df6:	2300      	movs	r3, #0
 8019df8:	69f9      	ldr	r1, [r7, #28]
 8019dfa:	2000      	movs	r0, #0
 8019dfc:	f7ff f890 	bl	8018f20 <tcp_recv_null>
 8019e00:	4603      	mov	r3, r0
 8019e02:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8019e04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019e08:	f113 0f0d 	cmn.w	r3, #13
 8019e0c:	d053      	beq.n	8019eb6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8019e0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d003      	beq.n	8019e1e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8019e16:	4b2c      	ldr	r3, [pc, #176]	; (8019ec8 <tcp_input+0x72c>)
 8019e18:	681a      	ldr	r2, [r3, #0]
 8019e1a:	69fb      	ldr	r3, [r7, #28]
 8019e1c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8019e1e:	4b2b      	ldr	r3, [pc, #172]	; (8019ecc <tcp_input+0x730>)
 8019e20:	781b      	ldrb	r3, [r3, #0]
 8019e22:	f003 0320 	and.w	r3, r3, #32
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d030      	beq.n	8019e8c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8019e2a:	69fb      	ldr	r3, [r7, #28]
 8019e2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d009      	beq.n	8019e46 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8019e32:	69fb      	ldr	r3, [r7, #28]
 8019e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019e36:	7b5a      	ldrb	r2, [r3, #13]
 8019e38:	69fb      	ldr	r3, [r7, #28]
 8019e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019e3c:	f042 0220 	orr.w	r2, r2, #32
 8019e40:	b2d2      	uxtb	r2, r2
 8019e42:	735a      	strb	r2, [r3, #13]
 8019e44:	e022      	b.n	8019e8c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8019e46:	69fb      	ldr	r3, [r7, #28]
 8019e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019e4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019e4e:	d005      	beq.n	8019e5c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8019e50:	69fb      	ldr	r3, [r7, #28]
 8019e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019e54:	3301      	adds	r3, #1
 8019e56:	b29a      	uxth	r2, r3
 8019e58:	69fb      	ldr	r3, [r7, #28]
 8019e5a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8019e5c:	69fb      	ldr	r3, [r7, #28]
 8019e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d00b      	beq.n	8019e7e <tcp_input+0x6e2>
 8019e66:	69fb      	ldr	r3, [r7, #28]
 8019e68:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019e6c:	69fb      	ldr	r3, [r7, #28]
 8019e6e:	6918      	ldr	r0, [r3, #16]
 8019e70:	2300      	movs	r3, #0
 8019e72:	2200      	movs	r2, #0
 8019e74:	69f9      	ldr	r1, [r7, #28]
 8019e76:	47a0      	blx	r4
 8019e78:	4603      	mov	r3, r0
 8019e7a:	74fb      	strb	r3, [r7, #19]
 8019e7c:	e001      	b.n	8019e82 <tcp_input+0x6e6>
 8019e7e:	2300      	movs	r3, #0
 8019e80:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8019e82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019e86:	f113 0f0d 	cmn.w	r3, #13
 8019e8a:	d016      	beq.n	8019eba <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8019e8c:	4b13      	ldr	r3, [pc, #76]	; (8019edc <tcp_input+0x740>)
 8019e8e:	2200      	movs	r2, #0
 8019e90:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8019e92:	69f8      	ldr	r0, [r7, #28]
 8019e94:	f000 f88e 	bl	8019fb4 <tcp_input_delayed_close>
 8019e98:	4603      	mov	r3, r0
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d128      	bne.n	8019ef0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8019e9e:	69f8      	ldr	r0, [r7, #28]
 8019ea0:	f002 ff20 	bl	801cce4 <tcp_output>
 8019ea4:	e025      	b.n	8019ef2 <tcp_input+0x756>
        goto aborted;
 8019ea6:	bf00      	nop
 8019ea8:	e023      	b.n	8019ef2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8019eaa:	bf00      	nop
 8019eac:	e021      	b.n	8019ef2 <tcp_input+0x756>
              goto aborted;
 8019eae:	bf00      	nop
 8019eb0:	e01f      	b.n	8019ef2 <tcp_input+0x756>
          goto aborted;
 8019eb2:	bf00      	nop
 8019eb4:	e01d      	b.n	8019ef2 <tcp_input+0x756>
            goto aborted;
 8019eb6:	bf00      	nop
 8019eb8:	e01b      	b.n	8019ef2 <tcp_input+0x756>
              goto aborted;
 8019eba:	bf00      	nop
 8019ebc:	e019      	b.n	8019ef2 <tcp_input+0x756>
 8019ebe:	bf00      	nop
 8019ec0:	2000bfcc 	.word	0x2000bfcc
 8019ec4:	2000bfdc 	.word	0x2000bfdc
 8019ec8:	2000bffc 	.word	0x2000bffc
 8019ecc:	2000bff9 	.word	0x2000bff9
 8019ed0:	2000bff4 	.word	0x2000bff4
 8019ed4:	2000bff8 	.word	0x2000bff8
 8019ed8:	2000bff6 	.word	0x2000bff6
 8019edc:	2000c000 	.word	0x2000c000
 8019ee0:	2000bfc0 	.word	0x2000bfc0
 8019ee4:	08025a64 	.word	0x08025a64
 8019ee8:	08025c18 	.word	0x08025c18
 8019eec:	08025ab0 	.word	0x08025ab0
          goto aborted;
 8019ef0:	bf00      	nop
    tcp_input_pcb = NULL;
 8019ef2:	4b27      	ldr	r3, [pc, #156]	; (8019f90 <tcp_input+0x7f4>)
 8019ef4:	2200      	movs	r2, #0
 8019ef6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8019ef8:	4b26      	ldr	r3, [pc, #152]	; (8019f94 <tcp_input+0x7f8>)
 8019efa:	2200      	movs	r2, #0
 8019efc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8019efe:	4b26      	ldr	r3, [pc, #152]	; (8019f98 <tcp_input+0x7fc>)
 8019f00:	685b      	ldr	r3, [r3, #4]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d03f      	beq.n	8019f86 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8019f06:	4b24      	ldr	r3, [pc, #144]	; (8019f98 <tcp_input+0x7fc>)
 8019f08:	685b      	ldr	r3, [r3, #4]
 8019f0a:	4618      	mov	r0, r3
 8019f0c:	f7fd fa18 	bl	8017340 <pbuf_free>
      inseg.p = NULL;
 8019f10:	4b21      	ldr	r3, [pc, #132]	; (8019f98 <tcp_input+0x7fc>)
 8019f12:	2200      	movs	r2, #0
 8019f14:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8019f16:	e036      	b.n	8019f86 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8019f18:	4b20      	ldr	r3, [pc, #128]	; (8019f9c <tcp_input+0x800>)
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	899b      	ldrh	r3, [r3, #12]
 8019f1e:	b29b      	uxth	r3, r3
 8019f20:	4618      	mov	r0, r3
 8019f22:	f7fb fe1b 	bl	8015b5c <lwip_htons>
 8019f26:	4603      	mov	r3, r0
 8019f28:	b2db      	uxtb	r3, r3
 8019f2a:	f003 0304 	and.w	r3, r3, #4
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d118      	bne.n	8019f64 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019f32:	4b1b      	ldr	r3, [pc, #108]	; (8019fa0 <tcp_input+0x804>)
 8019f34:	6819      	ldr	r1, [r3, #0]
 8019f36:	4b1b      	ldr	r3, [pc, #108]	; (8019fa4 <tcp_input+0x808>)
 8019f38:	881b      	ldrh	r3, [r3, #0]
 8019f3a:	461a      	mov	r2, r3
 8019f3c:	4b1a      	ldr	r3, [pc, #104]	; (8019fa8 <tcp_input+0x80c>)
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019f42:	4b16      	ldr	r3, [pc, #88]	; (8019f9c <tcp_input+0x800>)
 8019f44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019f46:	885b      	ldrh	r3, [r3, #2]
 8019f48:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019f4a:	4a14      	ldr	r2, [pc, #80]	; (8019f9c <tcp_input+0x800>)
 8019f4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019f4e:	8812      	ldrh	r2, [r2, #0]
 8019f50:	b292      	uxth	r2, r2
 8019f52:	9202      	str	r2, [sp, #8]
 8019f54:	9301      	str	r3, [sp, #4]
 8019f56:	4b15      	ldr	r3, [pc, #84]	; (8019fac <tcp_input+0x810>)
 8019f58:	9300      	str	r3, [sp, #0]
 8019f5a:	4b15      	ldr	r3, [pc, #84]	; (8019fb0 <tcp_input+0x814>)
 8019f5c:	4602      	mov	r2, r0
 8019f5e:	2000      	movs	r0, #0
 8019f60:	f003 fc74 	bl	801d84c <tcp_rst>
    pbuf_free(p);
 8019f64:	6878      	ldr	r0, [r7, #4]
 8019f66:	f7fd f9eb 	bl	8017340 <pbuf_free>
  return;
 8019f6a:	e00c      	b.n	8019f86 <tcp_input+0x7ea>
    goto dropped;
 8019f6c:	bf00      	nop
 8019f6e:	e006      	b.n	8019f7e <tcp_input+0x7e2>
    goto dropped;
 8019f70:	bf00      	nop
 8019f72:	e004      	b.n	8019f7e <tcp_input+0x7e2>
    goto dropped;
 8019f74:	bf00      	nop
 8019f76:	e002      	b.n	8019f7e <tcp_input+0x7e2>
      goto dropped;
 8019f78:	bf00      	nop
 8019f7a:	e000      	b.n	8019f7e <tcp_input+0x7e2>
      goto dropped;
 8019f7c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8019f7e:	6878      	ldr	r0, [r7, #4]
 8019f80:	f7fd f9de 	bl	8017340 <pbuf_free>
 8019f84:	e000      	b.n	8019f88 <tcp_input+0x7ec>
  return;
 8019f86:	bf00      	nop
}
 8019f88:	3724      	adds	r7, #36	; 0x24
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	bd90      	pop	{r4, r7, pc}
 8019f8e:	bf00      	nop
 8019f90:	2000c000 	.word	0x2000c000
 8019f94:	2000bffc 	.word	0x2000bffc
 8019f98:	2000bfcc 	.word	0x2000bfcc
 8019f9c:	2000bfdc 	.word	0x2000bfdc
 8019fa0:	2000bff0 	.word	0x2000bff0
 8019fa4:	2000bff6 	.word	0x2000bff6
 8019fa8:	2000bfec 	.word	0x2000bfec
 8019fac:	200066b0 	.word	0x200066b0
 8019fb0:	200066b4 	.word	0x200066b4

08019fb4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	b082      	sub	sp, #8
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d106      	bne.n	8019fd0 <tcp_input_delayed_close+0x1c>
 8019fc2:	4b17      	ldr	r3, [pc, #92]	; (801a020 <tcp_input_delayed_close+0x6c>)
 8019fc4:	f240 225a 	movw	r2, #602	; 0x25a
 8019fc8:	4916      	ldr	r1, [pc, #88]	; (801a024 <tcp_input_delayed_close+0x70>)
 8019fca:	4817      	ldr	r0, [pc, #92]	; (801a028 <tcp_input_delayed_close+0x74>)
 8019fcc:	f008 fbf0 	bl	80227b0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8019fd0:	4b16      	ldr	r3, [pc, #88]	; (801a02c <tcp_input_delayed_close+0x78>)
 8019fd2:	781b      	ldrb	r3, [r3, #0]
 8019fd4:	f003 0310 	and.w	r3, r3, #16
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d01c      	beq.n	801a016 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	8b5b      	ldrh	r3, [r3, #26]
 8019fe0:	f003 0310 	and.w	r3, r3, #16
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d10d      	bne.n	801a004 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d008      	beq.n	801a004 <tcp_input_delayed_close+0x50>
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019ff8:	687a      	ldr	r2, [r7, #4]
 8019ffa:	6912      	ldr	r2, [r2, #16]
 8019ffc:	f06f 010e 	mvn.w	r1, #14
 801a000:	4610      	mov	r0, r2
 801a002:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801a004:	6879      	ldr	r1, [r7, #4]
 801a006:	480a      	ldr	r0, [pc, #40]	; (801a030 <tcp_input_delayed_close+0x7c>)
 801a008:	f7ff fa50 	bl	80194ac <tcp_pcb_remove>
    tcp_free(pcb);
 801a00c:	6878      	ldr	r0, [r7, #4]
 801a00e:	f7fd fc53 	bl	80178b8 <tcp_free>
    return 1;
 801a012:	2301      	movs	r3, #1
 801a014:	e000      	b.n	801a018 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801a016:	2300      	movs	r3, #0
}
 801a018:	4618      	mov	r0, r3
 801a01a:	3708      	adds	r7, #8
 801a01c:	46bd      	mov	sp, r7
 801a01e:	bd80      	pop	{r7, pc}
 801a020:	08025a64 	.word	0x08025a64
 801a024:	08025c34 	.word	0x08025c34
 801a028:	08025ab0 	.word	0x08025ab0
 801a02c:	2000bff9 	.word	0x2000bff9
 801a030:	2000bfc0 	.word	0x2000bfc0

0801a034 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801a034:	b590      	push	{r4, r7, lr}
 801a036:	b08b      	sub	sp, #44	; 0x2c
 801a038:	af04      	add	r7, sp, #16
 801a03a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801a03c:	4b6f      	ldr	r3, [pc, #444]	; (801a1fc <tcp_listen_input+0x1c8>)
 801a03e:	781b      	ldrb	r3, [r3, #0]
 801a040:	f003 0304 	and.w	r3, r3, #4
 801a044:	2b00      	cmp	r3, #0
 801a046:	f040 80d2 	bne.w	801a1ee <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d106      	bne.n	801a05e <tcp_listen_input+0x2a>
 801a050:	4b6b      	ldr	r3, [pc, #428]	; (801a200 <tcp_listen_input+0x1cc>)
 801a052:	f240 2281 	movw	r2, #641	; 0x281
 801a056:	496b      	ldr	r1, [pc, #428]	; (801a204 <tcp_listen_input+0x1d0>)
 801a058:	486b      	ldr	r0, [pc, #428]	; (801a208 <tcp_listen_input+0x1d4>)
 801a05a:	f008 fba9 	bl	80227b0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801a05e:	4b67      	ldr	r3, [pc, #412]	; (801a1fc <tcp_listen_input+0x1c8>)
 801a060:	781b      	ldrb	r3, [r3, #0]
 801a062:	f003 0310 	and.w	r3, r3, #16
 801a066:	2b00      	cmp	r3, #0
 801a068:	d019      	beq.n	801a09e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a06a:	4b68      	ldr	r3, [pc, #416]	; (801a20c <tcp_listen_input+0x1d8>)
 801a06c:	6819      	ldr	r1, [r3, #0]
 801a06e:	4b68      	ldr	r3, [pc, #416]	; (801a210 <tcp_listen_input+0x1dc>)
 801a070:	881b      	ldrh	r3, [r3, #0]
 801a072:	461a      	mov	r2, r3
 801a074:	4b67      	ldr	r3, [pc, #412]	; (801a214 <tcp_listen_input+0x1e0>)
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a07a:	4b67      	ldr	r3, [pc, #412]	; (801a218 <tcp_listen_input+0x1e4>)
 801a07c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a07e:	885b      	ldrh	r3, [r3, #2]
 801a080:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a082:	4a65      	ldr	r2, [pc, #404]	; (801a218 <tcp_listen_input+0x1e4>)
 801a084:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a086:	8812      	ldrh	r2, [r2, #0]
 801a088:	b292      	uxth	r2, r2
 801a08a:	9202      	str	r2, [sp, #8]
 801a08c:	9301      	str	r3, [sp, #4]
 801a08e:	4b63      	ldr	r3, [pc, #396]	; (801a21c <tcp_listen_input+0x1e8>)
 801a090:	9300      	str	r3, [sp, #0]
 801a092:	4b63      	ldr	r3, [pc, #396]	; (801a220 <tcp_listen_input+0x1ec>)
 801a094:	4602      	mov	r2, r0
 801a096:	6878      	ldr	r0, [r7, #4]
 801a098:	f003 fbd8 	bl	801d84c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801a09c:	e0a9      	b.n	801a1f2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801a09e:	4b57      	ldr	r3, [pc, #348]	; (801a1fc <tcp_listen_input+0x1c8>)
 801a0a0:	781b      	ldrb	r3, [r3, #0]
 801a0a2:	f003 0302 	and.w	r3, r3, #2
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	f000 80a3 	beq.w	801a1f2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	7d5b      	ldrb	r3, [r3, #21]
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	f7ff f859 	bl	8019168 <tcp_alloc>
 801a0b6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801a0b8:	697b      	ldr	r3, [r7, #20]
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d111      	bne.n	801a0e2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	699b      	ldr	r3, [r3, #24]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d00a      	beq.n	801a0dc <tcp_listen_input+0xa8>
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	699b      	ldr	r3, [r3, #24]
 801a0ca:	687a      	ldr	r2, [r7, #4]
 801a0cc:	6910      	ldr	r0, [r2, #16]
 801a0ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a0d2:	2100      	movs	r1, #0
 801a0d4:	4798      	blx	r3
 801a0d6:	4603      	mov	r3, r0
 801a0d8:	73bb      	strb	r3, [r7, #14]
      return;
 801a0da:	e08b      	b.n	801a1f4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801a0dc:	23f0      	movs	r3, #240	; 0xf0
 801a0de:	73bb      	strb	r3, [r7, #14]
      return;
 801a0e0:	e088      	b.n	801a1f4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801a0e2:	4b50      	ldr	r3, [pc, #320]	; (801a224 <tcp_listen_input+0x1f0>)
 801a0e4:	695a      	ldr	r2, [r3, #20]
 801a0e6:	697b      	ldr	r3, [r7, #20]
 801a0e8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801a0ea:	4b4e      	ldr	r3, [pc, #312]	; (801a224 <tcp_listen_input+0x1f0>)
 801a0ec:	691a      	ldr	r2, [r3, #16]
 801a0ee:	697b      	ldr	r3, [r7, #20]
 801a0f0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	8ada      	ldrh	r2, [r3, #22]
 801a0f6:	697b      	ldr	r3, [r7, #20]
 801a0f8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801a0fa:	4b47      	ldr	r3, [pc, #284]	; (801a218 <tcp_listen_input+0x1e4>)
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	881b      	ldrh	r3, [r3, #0]
 801a100:	b29a      	uxth	r2, r3
 801a102:	697b      	ldr	r3, [r7, #20]
 801a104:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801a106:	697b      	ldr	r3, [r7, #20]
 801a108:	2203      	movs	r2, #3
 801a10a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801a10c:	4b41      	ldr	r3, [pc, #260]	; (801a214 <tcp_listen_input+0x1e0>)
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	1c5a      	adds	r2, r3, #1
 801a112:	697b      	ldr	r3, [r7, #20]
 801a114:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801a116:	697b      	ldr	r3, [r7, #20]
 801a118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a11a:	697b      	ldr	r3, [r7, #20]
 801a11c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801a11e:	6978      	ldr	r0, [r7, #20]
 801a120:	f7ff fa58 	bl	80195d4 <tcp_next_iss>
 801a124:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801a126:	697b      	ldr	r3, [r7, #20]
 801a128:	693a      	ldr	r2, [r7, #16]
 801a12a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801a12c:	697b      	ldr	r3, [r7, #20]
 801a12e:	693a      	ldr	r2, [r7, #16]
 801a130:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801a132:	697b      	ldr	r3, [r7, #20]
 801a134:	693a      	ldr	r2, [r7, #16]
 801a136:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801a138:	697b      	ldr	r3, [r7, #20]
 801a13a:	693a      	ldr	r2, [r7, #16]
 801a13c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801a13e:	4b35      	ldr	r3, [pc, #212]	; (801a214 <tcp_listen_input+0x1e0>)
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	1e5a      	subs	r2, r3, #1
 801a144:	697b      	ldr	r3, [r7, #20]
 801a146:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	691a      	ldr	r2, [r3, #16]
 801a14c:	697b      	ldr	r3, [r7, #20]
 801a14e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801a150:	697b      	ldr	r3, [r7, #20]
 801a152:	687a      	ldr	r2, [r7, #4]
 801a154:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	7a5b      	ldrb	r3, [r3, #9]
 801a15a:	f003 030c 	and.w	r3, r3, #12
 801a15e:	b2da      	uxtb	r2, r3
 801a160:	697b      	ldr	r3, [r7, #20]
 801a162:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	7a1a      	ldrb	r2, [r3, #8]
 801a168:	697b      	ldr	r3, [r7, #20]
 801a16a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801a16c:	4b2e      	ldr	r3, [pc, #184]	; (801a228 <tcp_listen_input+0x1f4>)
 801a16e:	681a      	ldr	r2, [r3, #0]
 801a170:	697b      	ldr	r3, [r7, #20]
 801a172:	60da      	str	r2, [r3, #12]
 801a174:	4a2c      	ldr	r2, [pc, #176]	; (801a228 <tcp_listen_input+0x1f4>)
 801a176:	697b      	ldr	r3, [r7, #20]
 801a178:	6013      	str	r3, [r2, #0]
 801a17a:	f003 fd29 	bl	801dbd0 <tcp_timer_needed>
 801a17e:	4b2b      	ldr	r3, [pc, #172]	; (801a22c <tcp_listen_input+0x1f8>)
 801a180:	2201      	movs	r2, #1
 801a182:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801a184:	6978      	ldr	r0, [r7, #20]
 801a186:	f001 fd8f 	bl	801bca8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801a18a:	4b23      	ldr	r3, [pc, #140]	; (801a218 <tcp_listen_input+0x1e4>)
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	89db      	ldrh	r3, [r3, #14]
 801a190:	b29a      	uxth	r2, r3
 801a192:	697b      	ldr	r3, [r7, #20]
 801a194:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801a198:	697b      	ldr	r3, [r7, #20]
 801a19a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a19e:	697b      	ldr	r3, [r7, #20]
 801a1a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801a1a4:	697b      	ldr	r3, [r7, #20]
 801a1a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801a1a8:	697b      	ldr	r3, [r7, #20]
 801a1aa:	3304      	adds	r3, #4
 801a1ac:	4618      	mov	r0, r3
 801a1ae:	f005 fcbb 	bl	801fb28 <ip4_route>
 801a1b2:	4601      	mov	r1, r0
 801a1b4:	697b      	ldr	r3, [r7, #20]
 801a1b6:	3304      	adds	r3, #4
 801a1b8:	461a      	mov	r2, r3
 801a1ba:	4620      	mov	r0, r4
 801a1bc:	f7ff fa30 	bl	8019620 <tcp_eff_send_mss_netif>
 801a1c0:	4603      	mov	r3, r0
 801a1c2:	461a      	mov	r2, r3
 801a1c4:	697b      	ldr	r3, [r7, #20]
 801a1c6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801a1c8:	2112      	movs	r1, #18
 801a1ca:	6978      	ldr	r0, [r7, #20]
 801a1cc:	f002 fc9c 	bl	801cb08 <tcp_enqueue_flags>
 801a1d0:	4603      	mov	r3, r0
 801a1d2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801a1d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d004      	beq.n	801a1e6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801a1dc:	2100      	movs	r1, #0
 801a1de:	6978      	ldr	r0, [r7, #20]
 801a1e0:	f7fd fdf0 	bl	8017dc4 <tcp_abandon>
      return;
 801a1e4:	e006      	b.n	801a1f4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801a1e6:	6978      	ldr	r0, [r7, #20]
 801a1e8:	f002 fd7c 	bl	801cce4 <tcp_output>
  return;
 801a1ec:	e001      	b.n	801a1f2 <tcp_listen_input+0x1be>
    return;
 801a1ee:	bf00      	nop
 801a1f0:	e000      	b.n	801a1f4 <tcp_listen_input+0x1c0>
  return;
 801a1f2:	bf00      	nop
}
 801a1f4:	371c      	adds	r7, #28
 801a1f6:	46bd      	mov	sp, r7
 801a1f8:	bd90      	pop	{r4, r7, pc}
 801a1fa:	bf00      	nop
 801a1fc:	2000bff8 	.word	0x2000bff8
 801a200:	08025a64 	.word	0x08025a64
 801a204:	08025c5c 	.word	0x08025c5c
 801a208:	08025ab0 	.word	0x08025ab0
 801a20c:	2000bff0 	.word	0x2000bff0
 801a210:	2000bff6 	.word	0x2000bff6
 801a214:	2000bfec 	.word	0x2000bfec
 801a218:	2000bfdc 	.word	0x2000bfdc
 801a21c:	200066b0 	.word	0x200066b0
 801a220:	200066b4 	.word	0x200066b4
 801a224:	200066a0 	.word	0x200066a0
 801a228:	2000bfc0 	.word	0x2000bfc0
 801a22c:	2000bfc8 	.word	0x2000bfc8

0801a230 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801a230:	b580      	push	{r7, lr}
 801a232:	b086      	sub	sp, #24
 801a234:	af04      	add	r7, sp, #16
 801a236:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801a238:	4b2f      	ldr	r3, [pc, #188]	; (801a2f8 <tcp_timewait_input+0xc8>)
 801a23a:	781b      	ldrb	r3, [r3, #0]
 801a23c:	f003 0304 	and.w	r3, r3, #4
 801a240:	2b00      	cmp	r3, #0
 801a242:	d153      	bne.n	801a2ec <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d106      	bne.n	801a258 <tcp_timewait_input+0x28>
 801a24a:	4b2c      	ldr	r3, [pc, #176]	; (801a2fc <tcp_timewait_input+0xcc>)
 801a24c:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a250:	492b      	ldr	r1, [pc, #172]	; (801a300 <tcp_timewait_input+0xd0>)
 801a252:	482c      	ldr	r0, [pc, #176]	; (801a304 <tcp_timewait_input+0xd4>)
 801a254:	f008 faac 	bl	80227b0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801a258:	4b27      	ldr	r3, [pc, #156]	; (801a2f8 <tcp_timewait_input+0xc8>)
 801a25a:	781b      	ldrb	r3, [r3, #0]
 801a25c:	f003 0302 	and.w	r3, r3, #2
 801a260:	2b00      	cmp	r3, #0
 801a262:	d02a      	beq.n	801a2ba <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801a264:	4b28      	ldr	r3, [pc, #160]	; (801a308 <tcp_timewait_input+0xd8>)
 801a266:	681a      	ldr	r2, [r3, #0]
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a26c:	1ad3      	subs	r3, r2, r3
 801a26e:	2b00      	cmp	r3, #0
 801a270:	db2d      	blt.n	801a2ce <tcp_timewait_input+0x9e>
 801a272:	4b25      	ldr	r3, [pc, #148]	; (801a308 <tcp_timewait_input+0xd8>)
 801a274:	681a      	ldr	r2, [r3, #0]
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a27a:	6879      	ldr	r1, [r7, #4]
 801a27c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a27e:	440b      	add	r3, r1
 801a280:	1ad3      	subs	r3, r2, r3
 801a282:	2b00      	cmp	r3, #0
 801a284:	dc23      	bgt.n	801a2ce <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a286:	4b21      	ldr	r3, [pc, #132]	; (801a30c <tcp_timewait_input+0xdc>)
 801a288:	6819      	ldr	r1, [r3, #0]
 801a28a:	4b21      	ldr	r3, [pc, #132]	; (801a310 <tcp_timewait_input+0xe0>)
 801a28c:	881b      	ldrh	r3, [r3, #0]
 801a28e:	461a      	mov	r2, r3
 801a290:	4b1d      	ldr	r3, [pc, #116]	; (801a308 <tcp_timewait_input+0xd8>)
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a296:	4b1f      	ldr	r3, [pc, #124]	; (801a314 <tcp_timewait_input+0xe4>)
 801a298:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a29a:	885b      	ldrh	r3, [r3, #2]
 801a29c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a29e:	4a1d      	ldr	r2, [pc, #116]	; (801a314 <tcp_timewait_input+0xe4>)
 801a2a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a2a2:	8812      	ldrh	r2, [r2, #0]
 801a2a4:	b292      	uxth	r2, r2
 801a2a6:	9202      	str	r2, [sp, #8]
 801a2a8:	9301      	str	r3, [sp, #4]
 801a2aa:	4b1b      	ldr	r3, [pc, #108]	; (801a318 <tcp_timewait_input+0xe8>)
 801a2ac:	9300      	str	r3, [sp, #0]
 801a2ae:	4b1b      	ldr	r3, [pc, #108]	; (801a31c <tcp_timewait_input+0xec>)
 801a2b0:	4602      	mov	r2, r0
 801a2b2:	6878      	ldr	r0, [r7, #4]
 801a2b4:	f003 faca 	bl	801d84c <tcp_rst>
      return;
 801a2b8:	e01b      	b.n	801a2f2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801a2ba:	4b0f      	ldr	r3, [pc, #60]	; (801a2f8 <tcp_timewait_input+0xc8>)
 801a2bc:	781b      	ldrb	r3, [r3, #0]
 801a2be:	f003 0301 	and.w	r3, r3, #1
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d003      	beq.n	801a2ce <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801a2c6:	4b16      	ldr	r3, [pc, #88]	; (801a320 <tcp_timewait_input+0xf0>)
 801a2c8:	681a      	ldr	r2, [r3, #0]
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801a2ce:	4b10      	ldr	r3, [pc, #64]	; (801a310 <tcp_timewait_input+0xe0>)
 801a2d0:	881b      	ldrh	r3, [r3, #0]
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d00c      	beq.n	801a2f0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	8b5b      	ldrh	r3, [r3, #26]
 801a2da:	f043 0302 	orr.w	r3, r3, #2
 801a2de:	b29a      	uxth	r2, r3
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801a2e4:	6878      	ldr	r0, [r7, #4]
 801a2e6:	f002 fcfd 	bl	801cce4 <tcp_output>
  }
  return;
 801a2ea:	e001      	b.n	801a2f0 <tcp_timewait_input+0xc0>
    return;
 801a2ec:	bf00      	nop
 801a2ee:	e000      	b.n	801a2f2 <tcp_timewait_input+0xc2>
  return;
 801a2f0:	bf00      	nop
}
 801a2f2:	3708      	adds	r7, #8
 801a2f4:	46bd      	mov	sp, r7
 801a2f6:	bd80      	pop	{r7, pc}
 801a2f8:	2000bff8 	.word	0x2000bff8
 801a2fc:	08025a64 	.word	0x08025a64
 801a300:	08025c7c 	.word	0x08025c7c
 801a304:	08025ab0 	.word	0x08025ab0
 801a308:	2000bfec 	.word	0x2000bfec
 801a30c:	2000bff0 	.word	0x2000bff0
 801a310:	2000bff6 	.word	0x2000bff6
 801a314:	2000bfdc 	.word	0x2000bfdc
 801a318:	200066b0 	.word	0x200066b0
 801a31c:	200066b4 	.word	0x200066b4
 801a320:	2000bfb4 	.word	0x2000bfb4

0801a324 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801a324:	b590      	push	{r4, r7, lr}
 801a326:	b08d      	sub	sp, #52	; 0x34
 801a328:	af04      	add	r7, sp, #16
 801a32a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801a32c:	2300      	movs	r3, #0
 801a32e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801a330:	2300      	movs	r3, #0
 801a332:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d106      	bne.n	801a348 <tcp_process+0x24>
 801a33a:	4b9d      	ldr	r3, [pc, #628]	; (801a5b0 <tcp_process+0x28c>)
 801a33c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801a340:	499c      	ldr	r1, [pc, #624]	; (801a5b4 <tcp_process+0x290>)
 801a342:	489d      	ldr	r0, [pc, #628]	; (801a5b8 <tcp_process+0x294>)
 801a344:	f008 fa34 	bl	80227b0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801a348:	4b9c      	ldr	r3, [pc, #624]	; (801a5bc <tcp_process+0x298>)
 801a34a:	781b      	ldrb	r3, [r3, #0]
 801a34c:	f003 0304 	and.w	r3, r3, #4
 801a350:	2b00      	cmp	r3, #0
 801a352:	d04e      	beq.n	801a3f2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	7d1b      	ldrb	r3, [r3, #20]
 801a358:	2b02      	cmp	r3, #2
 801a35a:	d108      	bne.n	801a36e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a360:	4b97      	ldr	r3, [pc, #604]	; (801a5c0 <tcp_process+0x29c>)
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	429a      	cmp	r2, r3
 801a366:	d123      	bne.n	801a3b0 <tcp_process+0x8c>
        acceptable = 1;
 801a368:	2301      	movs	r3, #1
 801a36a:	76fb      	strb	r3, [r7, #27]
 801a36c:	e020      	b.n	801a3b0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a372:	4b94      	ldr	r3, [pc, #592]	; (801a5c4 <tcp_process+0x2a0>)
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	429a      	cmp	r2, r3
 801a378:	d102      	bne.n	801a380 <tcp_process+0x5c>
        acceptable = 1;
 801a37a:	2301      	movs	r3, #1
 801a37c:	76fb      	strb	r3, [r7, #27]
 801a37e:	e017      	b.n	801a3b0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a380:	4b90      	ldr	r3, [pc, #576]	; (801a5c4 <tcp_process+0x2a0>)
 801a382:	681a      	ldr	r2, [r3, #0]
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a388:	1ad3      	subs	r3, r2, r3
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	db10      	blt.n	801a3b0 <tcp_process+0x8c>
 801a38e:	4b8d      	ldr	r3, [pc, #564]	; (801a5c4 <tcp_process+0x2a0>)
 801a390:	681a      	ldr	r2, [r3, #0]
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a396:	6879      	ldr	r1, [r7, #4]
 801a398:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a39a:	440b      	add	r3, r1
 801a39c:	1ad3      	subs	r3, r2, r3
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	dc06      	bgt.n	801a3b0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	8b5b      	ldrh	r3, [r3, #26]
 801a3a6:	f043 0302 	orr.w	r3, r3, #2
 801a3aa:	b29a      	uxth	r2, r3
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801a3b0:	7efb      	ldrb	r3, [r7, #27]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d01b      	beq.n	801a3ee <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	7d1b      	ldrb	r3, [r3, #20]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d106      	bne.n	801a3cc <tcp_process+0xa8>
 801a3be:	4b7c      	ldr	r3, [pc, #496]	; (801a5b0 <tcp_process+0x28c>)
 801a3c0:	f44f 724e 	mov.w	r2, #824	; 0x338
 801a3c4:	4980      	ldr	r1, [pc, #512]	; (801a5c8 <tcp_process+0x2a4>)
 801a3c6:	487c      	ldr	r0, [pc, #496]	; (801a5b8 <tcp_process+0x294>)
 801a3c8:	f008 f9f2 	bl	80227b0 <iprintf>
      recv_flags |= TF_RESET;
 801a3cc:	4b7f      	ldr	r3, [pc, #508]	; (801a5cc <tcp_process+0x2a8>)
 801a3ce:	781b      	ldrb	r3, [r3, #0]
 801a3d0:	f043 0308 	orr.w	r3, r3, #8
 801a3d4:	b2da      	uxtb	r2, r3
 801a3d6:	4b7d      	ldr	r3, [pc, #500]	; (801a5cc <tcp_process+0x2a8>)
 801a3d8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	8b5b      	ldrh	r3, [r3, #26]
 801a3de:	f023 0301 	bic.w	r3, r3, #1
 801a3e2:	b29a      	uxth	r2, r3
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801a3e8:	f06f 030d 	mvn.w	r3, #13
 801a3ec:	e37a      	b.n	801aae4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801a3ee:	2300      	movs	r3, #0
 801a3f0:	e378      	b.n	801aae4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801a3f2:	4b72      	ldr	r3, [pc, #456]	; (801a5bc <tcp_process+0x298>)
 801a3f4:	781b      	ldrb	r3, [r3, #0]
 801a3f6:	f003 0302 	and.w	r3, r3, #2
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d010      	beq.n	801a420 <tcp_process+0xfc>
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	7d1b      	ldrb	r3, [r3, #20]
 801a402:	2b02      	cmp	r3, #2
 801a404:	d00c      	beq.n	801a420 <tcp_process+0xfc>
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	7d1b      	ldrb	r3, [r3, #20]
 801a40a:	2b03      	cmp	r3, #3
 801a40c:	d008      	beq.n	801a420 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	8b5b      	ldrh	r3, [r3, #26]
 801a412:	f043 0302 	orr.w	r3, r3, #2
 801a416:	b29a      	uxth	r2, r3
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801a41c:	2300      	movs	r3, #0
 801a41e:	e361      	b.n	801aae4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	8b5b      	ldrh	r3, [r3, #26]
 801a424:	f003 0310 	and.w	r3, r3, #16
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d103      	bne.n	801a434 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801a42c:	4b68      	ldr	r3, [pc, #416]	; (801a5d0 <tcp_process+0x2ac>)
 801a42e:	681a      	ldr	r2, [r3, #0]
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	2200      	movs	r2, #0
 801a438:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	2200      	movs	r2, #0
 801a440:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801a444:	6878      	ldr	r0, [r7, #4]
 801a446:	f001 fc2f 	bl	801bca8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	7d1b      	ldrb	r3, [r3, #20]
 801a44e:	3b02      	subs	r3, #2
 801a450:	2b07      	cmp	r3, #7
 801a452:	f200 8337 	bhi.w	801aac4 <tcp_process+0x7a0>
 801a456:	a201      	add	r2, pc, #4	; (adr r2, 801a45c <tcp_process+0x138>)
 801a458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a45c:	0801a47d 	.word	0x0801a47d
 801a460:	0801a6ad 	.word	0x0801a6ad
 801a464:	0801a825 	.word	0x0801a825
 801a468:	0801a84f 	.word	0x0801a84f
 801a46c:	0801a973 	.word	0x0801a973
 801a470:	0801a825 	.word	0x0801a825
 801a474:	0801a9ff 	.word	0x0801a9ff
 801a478:	0801aa8f 	.word	0x0801aa8f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801a47c:	4b4f      	ldr	r3, [pc, #316]	; (801a5bc <tcp_process+0x298>)
 801a47e:	781b      	ldrb	r3, [r3, #0]
 801a480:	f003 0310 	and.w	r3, r3, #16
 801a484:	2b00      	cmp	r3, #0
 801a486:	f000 80e4 	beq.w	801a652 <tcp_process+0x32e>
 801a48a:	4b4c      	ldr	r3, [pc, #304]	; (801a5bc <tcp_process+0x298>)
 801a48c:	781b      	ldrb	r3, [r3, #0]
 801a48e:	f003 0302 	and.w	r3, r3, #2
 801a492:	2b00      	cmp	r3, #0
 801a494:	f000 80dd 	beq.w	801a652 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a49c:	1c5a      	adds	r2, r3, #1
 801a49e:	4b48      	ldr	r3, [pc, #288]	; (801a5c0 <tcp_process+0x29c>)
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	429a      	cmp	r2, r3
 801a4a4:	f040 80d5 	bne.w	801a652 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801a4a8:	4b46      	ldr	r3, [pc, #280]	; (801a5c4 <tcp_process+0x2a0>)
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	1c5a      	adds	r2, r3, #1
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801a4ba:	4b41      	ldr	r3, [pc, #260]	; (801a5c0 <tcp_process+0x29c>)
 801a4bc:	681a      	ldr	r2, [r3, #0]
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801a4c2:	4b44      	ldr	r3, [pc, #272]	; (801a5d4 <tcp_process+0x2b0>)
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	89db      	ldrh	r3, [r3, #14]
 801a4c8:	b29a      	uxth	r2, r3
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801a4dc:	4b39      	ldr	r3, [pc, #228]	; (801a5c4 <tcp_process+0x2a0>)
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	1e5a      	subs	r2, r3, #1
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	2204      	movs	r2, #4
 801a4ea:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	3304      	adds	r3, #4
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	f005 fb17 	bl	801fb28 <ip4_route>
 801a4fa:	4601      	mov	r1, r0
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	3304      	adds	r3, #4
 801a500:	461a      	mov	r2, r3
 801a502:	4620      	mov	r0, r4
 801a504:	f7ff f88c 	bl	8019620 <tcp_eff_send_mss_netif>
 801a508:	4603      	mov	r3, r0
 801a50a:	461a      	mov	r2, r3
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a514:	009a      	lsls	r2, r3, #2
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a51a:	005b      	lsls	r3, r3, #1
 801a51c:	f241 111c 	movw	r1, #4380	; 0x111c
 801a520:	428b      	cmp	r3, r1
 801a522:	bf38      	it	cc
 801a524:	460b      	movcc	r3, r1
 801a526:	429a      	cmp	r2, r3
 801a528:	d204      	bcs.n	801a534 <tcp_process+0x210>
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a52e:	009b      	lsls	r3, r3, #2
 801a530:	b29b      	uxth	r3, r3
 801a532:	e00d      	b.n	801a550 <tcp_process+0x22c>
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a538:	005b      	lsls	r3, r3, #1
 801a53a:	f241 121c 	movw	r2, #4380	; 0x111c
 801a53e:	4293      	cmp	r3, r2
 801a540:	d904      	bls.n	801a54c <tcp_process+0x228>
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a546:	005b      	lsls	r3, r3, #1
 801a548:	b29b      	uxth	r3, r3
 801a54a:	e001      	b.n	801a550 <tcp_process+0x22c>
 801a54c:	f241 131c 	movw	r3, #4380	; 0x111c
 801a550:	687a      	ldr	r2, [r7, #4]
 801a552:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d106      	bne.n	801a56e <tcp_process+0x24a>
 801a560:	4b13      	ldr	r3, [pc, #76]	; (801a5b0 <tcp_process+0x28c>)
 801a562:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801a566:	491c      	ldr	r1, [pc, #112]	; (801a5d8 <tcp_process+0x2b4>)
 801a568:	4813      	ldr	r0, [pc, #76]	; (801a5b8 <tcp_process+0x294>)
 801a56a:	f008 f921 	bl	80227b0 <iprintf>
        --pcb->snd_queuelen;
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a574:	3b01      	subs	r3, #1
 801a576:	b29a      	uxth	r2, r3
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a582:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801a584:	69fb      	ldr	r3, [r7, #28]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d12a      	bne.n	801a5e0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a58e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801a590:	69fb      	ldr	r3, [r7, #28]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d106      	bne.n	801a5a4 <tcp_process+0x280>
 801a596:	4b06      	ldr	r3, [pc, #24]	; (801a5b0 <tcp_process+0x28c>)
 801a598:	f44f 725d 	mov.w	r2, #884	; 0x374
 801a59c:	490f      	ldr	r1, [pc, #60]	; (801a5dc <tcp_process+0x2b8>)
 801a59e:	4806      	ldr	r0, [pc, #24]	; (801a5b8 <tcp_process+0x294>)
 801a5a0:	f008 f906 	bl	80227b0 <iprintf>
          pcb->unsent = rseg->next;
 801a5a4:	69fb      	ldr	r3, [r7, #28]
 801a5a6:	681a      	ldr	r2, [r3, #0]
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	66da      	str	r2, [r3, #108]	; 0x6c
 801a5ac:	e01c      	b.n	801a5e8 <tcp_process+0x2c4>
 801a5ae:	bf00      	nop
 801a5b0:	08025a64 	.word	0x08025a64
 801a5b4:	08025c9c 	.word	0x08025c9c
 801a5b8:	08025ab0 	.word	0x08025ab0
 801a5bc:	2000bff8 	.word	0x2000bff8
 801a5c0:	2000bff0 	.word	0x2000bff0
 801a5c4:	2000bfec 	.word	0x2000bfec
 801a5c8:	08025cb8 	.word	0x08025cb8
 801a5cc:	2000bff9 	.word	0x2000bff9
 801a5d0:	2000bfb4 	.word	0x2000bfb4
 801a5d4:	2000bfdc 	.word	0x2000bfdc
 801a5d8:	08025cd8 	.word	0x08025cd8
 801a5dc:	08025cf0 	.word	0x08025cf0
        } else {
          pcb->unacked = rseg->next;
 801a5e0:	69fb      	ldr	r3, [r7, #28]
 801a5e2:	681a      	ldr	r2, [r3, #0]
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801a5e8:	69f8      	ldr	r0, [r7, #28]
 801a5ea:	f7fe fc54 	bl	8018e96 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d104      	bne.n	801a600 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5fc:	861a      	strh	r2, [r3, #48]	; 0x30
 801a5fe:	e006      	b.n	801a60e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	2200      	movs	r2, #0
 801a604:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	2200      	movs	r2, #0
 801a60a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a614:	2b00      	cmp	r3, #0
 801a616:	d00a      	beq.n	801a62e <tcp_process+0x30a>
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a61e:	687a      	ldr	r2, [r7, #4]
 801a620:	6910      	ldr	r0, [r2, #16]
 801a622:	2200      	movs	r2, #0
 801a624:	6879      	ldr	r1, [r7, #4]
 801a626:	4798      	blx	r3
 801a628:	4603      	mov	r3, r0
 801a62a:	76bb      	strb	r3, [r7, #26]
 801a62c:	e001      	b.n	801a632 <tcp_process+0x30e>
 801a62e:	2300      	movs	r3, #0
 801a630:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801a632:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801a636:	f113 0f0d 	cmn.w	r3, #13
 801a63a:	d102      	bne.n	801a642 <tcp_process+0x31e>
          return ERR_ABRT;
 801a63c:	f06f 030c 	mvn.w	r3, #12
 801a640:	e250      	b.n	801aae4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	8b5b      	ldrh	r3, [r3, #26]
 801a646:	f043 0302 	orr.w	r3, r3, #2
 801a64a:	b29a      	uxth	r2, r3
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801a650:	e23a      	b.n	801aac8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801a652:	4b98      	ldr	r3, [pc, #608]	; (801a8b4 <tcp_process+0x590>)
 801a654:	781b      	ldrb	r3, [r3, #0]
 801a656:	f003 0310 	and.w	r3, r3, #16
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	f000 8234 	beq.w	801aac8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a660:	4b95      	ldr	r3, [pc, #596]	; (801a8b8 <tcp_process+0x594>)
 801a662:	6819      	ldr	r1, [r3, #0]
 801a664:	4b95      	ldr	r3, [pc, #596]	; (801a8bc <tcp_process+0x598>)
 801a666:	881b      	ldrh	r3, [r3, #0]
 801a668:	461a      	mov	r2, r3
 801a66a:	4b95      	ldr	r3, [pc, #596]	; (801a8c0 <tcp_process+0x59c>)
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a670:	4b94      	ldr	r3, [pc, #592]	; (801a8c4 <tcp_process+0x5a0>)
 801a672:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a674:	885b      	ldrh	r3, [r3, #2]
 801a676:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a678:	4a92      	ldr	r2, [pc, #584]	; (801a8c4 <tcp_process+0x5a0>)
 801a67a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a67c:	8812      	ldrh	r2, [r2, #0]
 801a67e:	b292      	uxth	r2, r2
 801a680:	9202      	str	r2, [sp, #8]
 801a682:	9301      	str	r3, [sp, #4]
 801a684:	4b90      	ldr	r3, [pc, #576]	; (801a8c8 <tcp_process+0x5a4>)
 801a686:	9300      	str	r3, [sp, #0]
 801a688:	4b90      	ldr	r3, [pc, #576]	; (801a8cc <tcp_process+0x5a8>)
 801a68a:	4602      	mov	r2, r0
 801a68c:	6878      	ldr	r0, [r7, #4]
 801a68e:	f003 f8dd 	bl	801d84c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a698:	2b05      	cmp	r3, #5
 801a69a:	f200 8215 	bhi.w	801aac8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	2200      	movs	r2, #0
 801a6a2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801a6a4:	6878      	ldr	r0, [r7, #4]
 801a6a6:	f002 fea7 	bl	801d3f8 <tcp_rexmit_rto>
      break;
 801a6aa:	e20d      	b.n	801aac8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801a6ac:	4b81      	ldr	r3, [pc, #516]	; (801a8b4 <tcp_process+0x590>)
 801a6ae:	781b      	ldrb	r3, [r3, #0]
 801a6b0:	f003 0310 	and.w	r3, r3, #16
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	f000 80a1 	beq.w	801a7fc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a6ba:	4b7f      	ldr	r3, [pc, #508]	; (801a8b8 <tcp_process+0x594>)
 801a6bc:	681a      	ldr	r2, [r3, #0]
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6c2:	1ad3      	subs	r3, r2, r3
 801a6c4:	3b01      	subs	r3, #1
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	db7e      	blt.n	801a7c8 <tcp_process+0x4a4>
 801a6ca:	4b7b      	ldr	r3, [pc, #492]	; (801a8b8 <tcp_process+0x594>)
 801a6cc:	681a      	ldr	r2, [r3, #0]
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a6d2:	1ad3      	subs	r3, r2, r3
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	dc77      	bgt.n	801a7c8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	2204      	movs	r2, #4
 801a6dc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d102      	bne.n	801a6ec <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801a6e6:	23fa      	movs	r3, #250	; 0xfa
 801a6e8:	76bb      	strb	r3, [r7, #26]
 801a6ea:	e01d      	b.n	801a728 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a6f0:	699b      	ldr	r3, [r3, #24]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d106      	bne.n	801a704 <tcp_process+0x3e0>
 801a6f6:	4b76      	ldr	r3, [pc, #472]	; (801a8d0 <tcp_process+0x5ac>)
 801a6f8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801a6fc:	4975      	ldr	r1, [pc, #468]	; (801a8d4 <tcp_process+0x5b0>)
 801a6fe:	4876      	ldr	r0, [pc, #472]	; (801a8d8 <tcp_process+0x5b4>)
 801a700:	f008 f856 	bl	80227b0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a708:	699b      	ldr	r3, [r3, #24]
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d00a      	beq.n	801a724 <tcp_process+0x400>
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a712:	699b      	ldr	r3, [r3, #24]
 801a714:	687a      	ldr	r2, [r7, #4]
 801a716:	6910      	ldr	r0, [r2, #16]
 801a718:	2200      	movs	r2, #0
 801a71a:	6879      	ldr	r1, [r7, #4]
 801a71c:	4798      	blx	r3
 801a71e:	4603      	mov	r3, r0
 801a720:	76bb      	strb	r3, [r7, #26]
 801a722:	e001      	b.n	801a728 <tcp_process+0x404>
 801a724:	23f0      	movs	r3, #240	; 0xf0
 801a726:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801a728:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d00a      	beq.n	801a746 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801a730:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801a734:	f113 0f0d 	cmn.w	r3, #13
 801a738:	d002      	beq.n	801a740 <tcp_process+0x41c>
              tcp_abort(pcb);
 801a73a:	6878      	ldr	r0, [r7, #4]
 801a73c:	f7fd fc00 	bl	8017f40 <tcp_abort>
            }
            return ERR_ABRT;
 801a740:	f06f 030c 	mvn.w	r3, #12
 801a744:	e1ce      	b.n	801aae4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801a746:	6878      	ldr	r0, [r7, #4]
 801a748:	f000 fae0 	bl	801ad0c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801a74c:	4b63      	ldr	r3, [pc, #396]	; (801a8dc <tcp_process+0x5b8>)
 801a74e:	881b      	ldrh	r3, [r3, #0]
 801a750:	2b00      	cmp	r3, #0
 801a752:	d005      	beq.n	801a760 <tcp_process+0x43c>
            recv_acked--;
 801a754:	4b61      	ldr	r3, [pc, #388]	; (801a8dc <tcp_process+0x5b8>)
 801a756:	881b      	ldrh	r3, [r3, #0]
 801a758:	3b01      	subs	r3, #1
 801a75a:	b29a      	uxth	r2, r3
 801a75c:	4b5f      	ldr	r3, [pc, #380]	; (801a8dc <tcp_process+0x5b8>)
 801a75e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a764:	009a      	lsls	r2, r3, #2
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a76a:	005b      	lsls	r3, r3, #1
 801a76c:	f241 111c 	movw	r1, #4380	; 0x111c
 801a770:	428b      	cmp	r3, r1
 801a772:	bf38      	it	cc
 801a774:	460b      	movcc	r3, r1
 801a776:	429a      	cmp	r2, r3
 801a778:	d204      	bcs.n	801a784 <tcp_process+0x460>
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a77e:	009b      	lsls	r3, r3, #2
 801a780:	b29b      	uxth	r3, r3
 801a782:	e00d      	b.n	801a7a0 <tcp_process+0x47c>
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a788:	005b      	lsls	r3, r3, #1
 801a78a:	f241 121c 	movw	r2, #4380	; 0x111c
 801a78e:	4293      	cmp	r3, r2
 801a790:	d904      	bls.n	801a79c <tcp_process+0x478>
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a796:	005b      	lsls	r3, r3, #1
 801a798:	b29b      	uxth	r3, r3
 801a79a:	e001      	b.n	801a7a0 <tcp_process+0x47c>
 801a79c:	f241 131c 	movw	r3, #4380	; 0x111c
 801a7a0:	687a      	ldr	r2, [r7, #4]
 801a7a2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801a7a6:	4b4e      	ldr	r3, [pc, #312]	; (801a8e0 <tcp_process+0x5bc>)
 801a7a8:	781b      	ldrb	r3, [r3, #0]
 801a7aa:	f003 0320 	and.w	r3, r3, #32
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d037      	beq.n	801a822 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	8b5b      	ldrh	r3, [r3, #26]
 801a7b6:	f043 0302 	orr.w	r3, r3, #2
 801a7ba:	b29a      	uxth	r2, r3
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	2207      	movs	r2, #7
 801a7c4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801a7c6:	e02c      	b.n	801a822 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a7c8:	4b3b      	ldr	r3, [pc, #236]	; (801a8b8 <tcp_process+0x594>)
 801a7ca:	6819      	ldr	r1, [r3, #0]
 801a7cc:	4b3b      	ldr	r3, [pc, #236]	; (801a8bc <tcp_process+0x598>)
 801a7ce:	881b      	ldrh	r3, [r3, #0]
 801a7d0:	461a      	mov	r2, r3
 801a7d2:	4b3b      	ldr	r3, [pc, #236]	; (801a8c0 <tcp_process+0x59c>)
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a7d8:	4b3a      	ldr	r3, [pc, #232]	; (801a8c4 <tcp_process+0x5a0>)
 801a7da:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a7dc:	885b      	ldrh	r3, [r3, #2]
 801a7de:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a7e0:	4a38      	ldr	r2, [pc, #224]	; (801a8c4 <tcp_process+0x5a0>)
 801a7e2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a7e4:	8812      	ldrh	r2, [r2, #0]
 801a7e6:	b292      	uxth	r2, r2
 801a7e8:	9202      	str	r2, [sp, #8]
 801a7ea:	9301      	str	r3, [sp, #4]
 801a7ec:	4b36      	ldr	r3, [pc, #216]	; (801a8c8 <tcp_process+0x5a4>)
 801a7ee:	9300      	str	r3, [sp, #0]
 801a7f0:	4b36      	ldr	r3, [pc, #216]	; (801a8cc <tcp_process+0x5a8>)
 801a7f2:	4602      	mov	r2, r0
 801a7f4:	6878      	ldr	r0, [r7, #4]
 801a7f6:	f003 f829 	bl	801d84c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801a7fa:	e167      	b.n	801aacc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801a7fc:	4b2d      	ldr	r3, [pc, #180]	; (801a8b4 <tcp_process+0x590>)
 801a7fe:	781b      	ldrb	r3, [r3, #0]
 801a800:	f003 0302 	and.w	r3, r3, #2
 801a804:	2b00      	cmp	r3, #0
 801a806:	f000 8161 	beq.w	801aacc <tcp_process+0x7a8>
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a80e:	1e5a      	subs	r2, r3, #1
 801a810:	4b2b      	ldr	r3, [pc, #172]	; (801a8c0 <tcp_process+0x59c>)
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	429a      	cmp	r2, r3
 801a816:	f040 8159 	bne.w	801aacc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801a81a:	6878      	ldr	r0, [r7, #4]
 801a81c:	f002 fe0e 	bl	801d43c <tcp_rexmit>
      break;
 801a820:	e154      	b.n	801aacc <tcp_process+0x7a8>
 801a822:	e153      	b.n	801aacc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801a824:	6878      	ldr	r0, [r7, #4]
 801a826:	f000 fa71 	bl	801ad0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801a82a:	4b2d      	ldr	r3, [pc, #180]	; (801a8e0 <tcp_process+0x5bc>)
 801a82c:	781b      	ldrb	r3, [r3, #0]
 801a82e:	f003 0320 	and.w	r3, r3, #32
 801a832:	2b00      	cmp	r3, #0
 801a834:	f000 814c 	beq.w	801aad0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	8b5b      	ldrh	r3, [r3, #26]
 801a83c:	f043 0302 	orr.w	r3, r3, #2
 801a840:	b29a      	uxth	r2, r3
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	2207      	movs	r2, #7
 801a84a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801a84c:	e140      	b.n	801aad0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801a84e:	6878      	ldr	r0, [r7, #4]
 801a850:	f000 fa5c 	bl	801ad0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801a854:	4b22      	ldr	r3, [pc, #136]	; (801a8e0 <tcp_process+0x5bc>)
 801a856:	781b      	ldrb	r3, [r3, #0]
 801a858:	f003 0320 	and.w	r3, r3, #32
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d071      	beq.n	801a944 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a860:	4b14      	ldr	r3, [pc, #80]	; (801a8b4 <tcp_process+0x590>)
 801a862:	781b      	ldrb	r3, [r3, #0]
 801a864:	f003 0310 	and.w	r3, r3, #16
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d060      	beq.n	801a92e <tcp_process+0x60a>
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a870:	4b11      	ldr	r3, [pc, #68]	; (801a8b8 <tcp_process+0x594>)
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	429a      	cmp	r2, r3
 801a876:	d15a      	bne.n	801a92e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d156      	bne.n	801a92e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	8b5b      	ldrh	r3, [r3, #26]
 801a884:	f043 0302 	orr.w	r3, r3, #2
 801a888:	b29a      	uxth	r2, r3
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801a88e:	6878      	ldr	r0, [r7, #4]
 801a890:	f7fe fdbc 	bl	801940c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801a894:	4b13      	ldr	r3, [pc, #76]	; (801a8e4 <tcp_process+0x5c0>)
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	687a      	ldr	r2, [r7, #4]
 801a89a:	429a      	cmp	r2, r3
 801a89c:	d105      	bne.n	801a8aa <tcp_process+0x586>
 801a89e:	4b11      	ldr	r3, [pc, #68]	; (801a8e4 <tcp_process+0x5c0>)
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	68db      	ldr	r3, [r3, #12]
 801a8a4:	4a0f      	ldr	r2, [pc, #60]	; (801a8e4 <tcp_process+0x5c0>)
 801a8a6:	6013      	str	r3, [r2, #0]
 801a8a8:	e02e      	b.n	801a908 <tcp_process+0x5e4>
 801a8aa:	4b0e      	ldr	r3, [pc, #56]	; (801a8e4 <tcp_process+0x5c0>)
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	617b      	str	r3, [r7, #20]
 801a8b0:	e027      	b.n	801a902 <tcp_process+0x5de>
 801a8b2:	bf00      	nop
 801a8b4:	2000bff8 	.word	0x2000bff8
 801a8b8:	2000bff0 	.word	0x2000bff0
 801a8bc:	2000bff6 	.word	0x2000bff6
 801a8c0:	2000bfec 	.word	0x2000bfec
 801a8c4:	2000bfdc 	.word	0x2000bfdc
 801a8c8:	200066b0 	.word	0x200066b0
 801a8cc:	200066b4 	.word	0x200066b4
 801a8d0:	08025a64 	.word	0x08025a64
 801a8d4:	08025d04 	.word	0x08025d04
 801a8d8:	08025ab0 	.word	0x08025ab0
 801a8dc:	2000bff4 	.word	0x2000bff4
 801a8e0:	2000bff9 	.word	0x2000bff9
 801a8e4:	2000bfc0 	.word	0x2000bfc0
 801a8e8:	697b      	ldr	r3, [r7, #20]
 801a8ea:	68db      	ldr	r3, [r3, #12]
 801a8ec:	687a      	ldr	r2, [r7, #4]
 801a8ee:	429a      	cmp	r2, r3
 801a8f0:	d104      	bne.n	801a8fc <tcp_process+0x5d8>
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	68da      	ldr	r2, [r3, #12]
 801a8f6:	697b      	ldr	r3, [r7, #20]
 801a8f8:	60da      	str	r2, [r3, #12]
 801a8fa:	e005      	b.n	801a908 <tcp_process+0x5e4>
 801a8fc:	697b      	ldr	r3, [r7, #20]
 801a8fe:	68db      	ldr	r3, [r3, #12]
 801a900:	617b      	str	r3, [r7, #20]
 801a902:	697b      	ldr	r3, [r7, #20]
 801a904:	2b00      	cmp	r3, #0
 801a906:	d1ef      	bne.n	801a8e8 <tcp_process+0x5c4>
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	2200      	movs	r2, #0
 801a90c:	60da      	str	r2, [r3, #12]
 801a90e:	4b77      	ldr	r3, [pc, #476]	; (801aaec <tcp_process+0x7c8>)
 801a910:	2201      	movs	r2, #1
 801a912:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	220a      	movs	r2, #10
 801a918:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801a91a:	4b75      	ldr	r3, [pc, #468]	; (801aaf0 <tcp_process+0x7cc>)
 801a91c:	681a      	ldr	r2, [r3, #0]
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	60da      	str	r2, [r3, #12]
 801a922:	4a73      	ldr	r2, [pc, #460]	; (801aaf0 <tcp_process+0x7cc>)
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	6013      	str	r3, [r2, #0]
 801a928:	f003 f952 	bl	801dbd0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801a92c:	e0d2      	b.n	801aad4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	8b5b      	ldrh	r3, [r3, #26]
 801a932:	f043 0302 	orr.w	r3, r3, #2
 801a936:	b29a      	uxth	r2, r3
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	2208      	movs	r2, #8
 801a940:	751a      	strb	r2, [r3, #20]
      break;
 801a942:	e0c7      	b.n	801aad4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a944:	4b6b      	ldr	r3, [pc, #428]	; (801aaf4 <tcp_process+0x7d0>)
 801a946:	781b      	ldrb	r3, [r3, #0]
 801a948:	f003 0310 	and.w	r3, r3, #16
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	f000 80c1 	beq.w	801aad4 <tcp_process+0x7b0>
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a956:	4b68      	ldr	r3, [pc, #416]	; (801aaf8 <tcp_process+0x7d4>)
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	429a      	cmp	r2, r3
 801a95c:	f040 80ba 	bne.w	801aad4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a964:	2b00      	cmp	r3, #0
 801a966:	f040 80b5 	bne.w	801aad4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	2206      	movs	r2, #6
 801a96e:	751a      	strb	r2, [r3, #20]
      break;
 801a970:	e0b0      	b.n	801aad4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801a972:	6878      	ldr	r0, [r7, #4]
 801a974:	f000 f9ca 	bl	801ad0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801a978:	4b60      	ldr	r3, [pc, #384]	; (801aafc <tcp_process+0x7d8>)
 801a97a:	781b      	ldrb	r3, [r3, #0]
 801a97c:	f003 0320 	and.w	r3, r3, #32
 801a980:	2b00      	cmp	r3, #0
 801a982:	f000 80a9 	beq.w	801aad8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	8b5b      	ldrh	r3, [r3, #26]
 801a98a:	f043 0302 	orr.w	r3, r3, #2
 801a98e:	b29a      	uxth	r2, r3
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801a994:	6878      	ldr	r0, [r7, #4]
 801a996:	f7fe fd39 	bl	801940c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801a99a:	4b59      	ldr	r3, [pc, #356]	; (801ab00 <tcp_process+0x7dc>)
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	687a      	ldr	r2, [r7, #4]
 801a9a0:	429a      	cmp	r2, r3
 801a9a2:	d105      	bne.n	801a9b0 <tcp_process+0x68c>
 801a9a4:	4b56      	ldr	r3, [pc, #344]	; (801ab00 <tcp_process+0x7dc>)
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	68db      	ldr	r3, [r3, #12]
 801a9aa:	4a55      	ldr	r2, [pc, #340]	; (801ab00 <tcp_process+0x7dc>)
 801a9ac:	6013      	str	r3, [r2, #0]
 801a9ae:	e013      	b.n	801a9d8 <tcp_process+0x6b4>
 801a9b0:	4b53      	ldr	r3, [pc, #332]	; (801ab00 <tcp_process+0x7dc>)
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	613b      	str	r3, [r7, #16]
 801a9b6:	e00c      	b.n	801a9d2 <tcp_process+0x6ae>
 801a9b8:	693b      	ldr	r3, [r7, #16]
 801a9ba:	68db      	ldr	r3, [r3, #12]
 801a9bc:	687a      	ldr	r2, [r7, #4]
 801a9be:	429a      	cmp	r2, r3
 801a9c0:	d104      	bne.n	801a9cc <tcp_process+0x6a8>
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	68da      	ldr	r2, [r3, #12]
 801a9c6:	693b      	ldr	r3, [r7, #16]
 801a9c8:	60da      	str	r2, [r3, #12]
 801a9ca:	e005      	b.n	801a9d8 <tcp_process+0x6b4>
 801a9cc:	693b      	ldr	r3, [r7, #16]
 801a9ce:	68db      	ldr	r3, [r3, #12]
 801a9d0:	613b      	str	r3, [r7, #16]
 801a9d2:	693b      	ldr	r3, [r7, #16]
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d1ef      	bne.n	801a9b8 <tcp_process+0x694>
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	2200      	movs	r2, #0
 801a9dc:	60da      	str	r2, [r3, #12]
 801a9de:	4b43      	ldr	r3, [pc, #268]	; (801aaec <tcp_process+0x7c8>)
 801a9e0:	2201      	movs	r2, #1
 801a9e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	220a      	movs	r2, #10
 801a9e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a9ea:	4b41      	ldr	r3, [pc, #260]	; (801aaf0 <tcp_process+0x7cc>)
 801a9ec:	681a      	ldr	r2, [r3, #0]
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	60da      	str	r2, [r3, #12]
 801a9f2:	4a3f      	ldr	r2, [pc, #252]	; (801aaf0 <tcp_process+0x7cc>)
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	6013      	str	r3, [r2, #0]
 801a9f8:	f003 f8ea 	bl	801dbd0 <tcp_timer_needed>
      }
      break;
 801a9fc:	e06c      	b.n	801aad8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801a9fe:	6878      	ldr	r0, [r7, #4]
 801aa00:	f000 f984 	bl	801ad0c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801aa04:	4b3b      	ldr	r3, [pc, #236]	; (801aaf4 <tcp_process+0x7d0>)
 801aa06:	781b      	ldrb	r3, [r3, #0]
 801aa08:	f003 0310 	and.w	r3, r3, #16
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d065      	beq.n	801aadc <tcp_process+0x7b8>
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801aa14:	4b38      	ldr	r3, [pc, #224]	; (801aaf8 <tcp_process+0x7d4>)
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	429a      	cmp	r2, r3
 801aa1a:	d15f      	bne.n	801aadc <tcp_process+0x7b8>
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d15b      	bne.n	801aadc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801aa24:	6878      	ldr	r0, [r7, #4]
 801aa26:	f7fe fcf1 	bl	801940c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801aa2a:	4b35      	ldr	r3, [pc, #212]	; (801ab00 <tcp_process+0x7dc>)
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	687a      	ldr	r2, [r7, #4]
 801aa30:	429a      	cmp	r2, r3
 801aa32:	d105      	bne.n	801aa40 <tcp_process+0x71c>
 801aa34:	4b32      	ldr	r3, [pc, #200]	; (801ab00 <tcp_process+0x7dc>)
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	68db      	ldr	r3, [r3, #12]
 801aa3a:	4a31      	ldr	r2, [pc, #196]	; (801ab00 <tcp_process+0x7dc>)
 801aa3c:	6013      	str	r3, [r2, #0]
 801aa3e:	e013      	b.n	801aa68 <tcp_process+0x744>
 801aa40:	4b2f      	ldr	r3, [pc, #188]	; (801ab00 <tcp_process+0x7dc>)
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	60fb      	str	r3, [r7, #12]
 801aa46:	e00c      	b.n	801aa62 <tcp_process+0x73e>
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	68db      	ldr	r3, [r3, #12]
 801aa4c:	687a      	ldr	r2, [r7, #4]
 801aa4e:	429a      	cmp	r2, r3
 801aa50:	d104      	bne.n	801aa5c <tcp_process+0x738>
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	68da      	ldr	r2, [r3, #12]
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	60da      	str	r2, [r3, #12]
 801aa5a:	e005      	b.n	801aa68 <tcp_process+0x744>
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	68db      	ldr	r3, [r3, #12]
 801aa60:	60fb      	str	r3, [r7, #12]
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d1ef      	bne.n	801aa48 <tcp_process+0x724>
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	2200      	movs	r2, #0
 801aa6c:	60da      	str	r2, [r3, #12]
 801aa6e:	4b1f      	ldr	r3, [pc, #124]	; (801aaec <tcp_process+0x7c8>)
 801aa70:	2201      	movs	r2, #1
 801aa72:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	220a      	movs	r2, #10
 801aa78:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801aa7a:	4b1d      	ldr	r3, [pc, #116]	; (801aaf0 <tcp_process+0x7cc>)
 801aa7c:	681a      	ldr	r2, [r3, #0]
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	60da      	str	r2, [r3, #12]
 801aa82:	4a1b      	ldr	r2, [pc, #108]	; (801aaf0 <tcp_process+0x7cc>)
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	6013      	str	r3, [r2, #0]
 801aa88:	f003 f8a2 	bl	801dbd0 <tcp_timer_needed>
      }
      break;
 801aa8c:	e026      	b.n	801aadc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801aa8e:	6878      	ldr	r0, [r7, #4]
 801aa90:	f000 f93c 	bl	801ad0c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801aa94:	4b17      	ldr	r3, [pc, #92]	; (801aaf4 <tcp_process+0x7d0>)
 801aa96:	781b      	ldrb	r3, [r3, #0]
 801aa98:	f003 0310 	and.w	r3, r3, #16
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d01f      	beq.n	801aae0 <tcp_process+0x7bc>
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801aaa4:	4b14      	ldr	r3, [pc, #80]	; (801aaf8 <tcp_process+0x7d4>)
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	429a      	cmp	r2, r3
 801aaaa:	d119      	bne.n	801aae0 <tcp_process+0x7bc>
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d115      	bne.n	801aae0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801aab4:	4b11      	ldr	r3, [pc, #68]	; (801aafc <tcp_process+0x7d8>)
 801aab6:	781b      	ldrb	r3, [r3, #0]
 801aab8:	f043 0310 	orr.w	r3, r3, #16
 801aabc:	b2da      	uxtb	r2, r3
 801aabe:	4b0f      	ldr	r3, [pc, #60]	; (801aafc <tcp_process+0x7d8>)
 801aac0:	701a      	strb	r2, [r3, #0]
      }
      break;
 801aac2:	e00d      	b.n	801aae0 <tcp_process+0x7bc>
    default:
      break;
 801aac4:	bf00      	nop
 801aac6:	e00c      	b.n	801aae2 <tcp_process+0x7be>
      break;
 801aac8:	bf00      	nop
 801aaca:	e00a      	b.n	801aae2 <tcp_process+0x7be>
      break;
 801aacc:	bf00      	nop
 801aace:	e008      	b.n	801aae2 <tcp_process+0x7be>
      break;
 801aad0:	bf00      	nop
 801aad2:	e006      	b.n	801aae2 <tcp_process+0x7be>
      break;
 801aad4:	bf00      	nop
 801aad6:	e004      	b.n	801aae2 <tcp_process+0x7be>
      break;
 801aad8:	bf00      	nop
 801aada:	e002      	b.n	801aae2 <tcp_process+0x7be>
      break;
 801aadc:	bf00      	nop
 801aade:	e000      	b.n	801aae2 <tcp_process+0x7be>
      break;
 801aae0:	bf00      	nop
  }
  return ERR_OK;
 801aae2:	2300      	movs	r3, #0
}
 801aae4:	4618      	mov	r0, r3
 801aae6:	3724      	adds	r7, #36	; 0x24
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bd90      	pop	{r4, r7, pc}
 801aaec:	2000bfc8 	.word	0x2000bfc8
 801aaf0:	2000bfc4 	.word	0x2000bfc4
 801aaf4:	2000bff8 	.word	0x2000bff8
 801aaf8:	2000bff0 	.word	0x2000bff0
 801aafc:	2000bff9 	.word	0x2000bff9
 801ab00:	2000bfc0 	.word	0x2000bfc0

0801ab04 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801ab04:	b590      	push	{r4, r7, lr}
 801ab06:	b085      	sub	sp, #20
 801ab08:	af00      	add	r7, sp, #0
 801ab0a:	6078      	str	r0, [r7, #4]
 801ab0c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	d106      	bne.n	801ab22 <tcp_oos_insert_segment+0x1e>
 801ab14:	4b3b      	ldr	r3, [pc, #236]	; (801ac04 <tcp_oos_insert_segment+0x100>)
 801ab16:	f240 421f 	movw	r2, #1055	; 0x41f
 801ab1a:	493b      	ldr	r1, [pc, #236]	; (801ac08 <tcp_oos_insert_segment+0x104>)
 801ab1c:	483b      	ldr	r0, [pc, #236]	; (801ac0c <tcp_oos_insert_segment+0x108>)
 801ab1e:	f007 fe47 	bl	80227b0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	68db      	ldr	r3, [r3, #12]
 801ab26:	899b      	ldrh	r3, [r3, #12]
 801ab28:	b29b      	uxth	r3, r3
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	f7fb f816 	bl	8015b5c <lwip_htons>
 801ab30:	4603      	mov	r3, r0
 801ab32:	b2db      	uxtb	r3, r3
 801ab34:	f003 0301 	and.w	r3, r3, #1
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d028      	beq.n	801ab8e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801ab3c:	6838      	ldr	r0, [r7, #0]
 801ab3e:	f7fe f995 	bl	8018e6c <tcp_segs_free>
    next = NULL;
 801ab42:	2300      	movs	r3, #0
 801ab44:	603b      	str	r3, [r7, #0]
 801ab46:	e056      	b.n	801abf6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801ab48:	683b      	ldr	r3, [r7, #0]
 801ab4a:	68db      	ldr	r3, [r3, #12]
 801ab4c:	899b      	ldrh	r3, [r3, #12]
 801ab4e:	b29b      	uxth	r3, r3
 801ab50:	4618      	mov	r0, r3
 801ab52:	f7fb f803 	bl	8015b5c <lwip_htons>
 801ab56:	4603      	mov	r3, r0
 801ab58:	b2db      	uxtb	r3, r3
 801ab5a:	f003 0301 	and.w	r3, r3, #1
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d00d      	beq.n	801ab7e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	68db      	ldr	r3, [r3, #12]
 801ab66:	899b      	ldrh	r3, [r3, #12]
 801ab68:	b29c      	uxth	r4, r3
 801ab6a:	2001      	movs	r0, #1
 801ab6c:	f7fa fff6 	bl	8015b5c <lwip_htons>
 801ab70:	4603      	mov	r3, r0
 801ab72:	461a      	mov	r2, r3
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	68db      	ldr	r3, [r3, #12]
 801ab78:	4322      	orrs	r2, r4
 801ab7a:	b292      	uxth	r2, r2
 801ab7c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801ab7e:	683b      	ldr	r3, [r7, #0]
 801ab80:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801ab82:	683b      	ldr	r3, [r7, #0]
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801ab88:	68f8      	ldr	r0, [r7, #12]
 801ab8a:	f7fe f984 	bl	8018e96 <tcp_seg_free>
    while (next &&
 801ab8e:	683b      	ldr	r3, [r7, #0]
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	d00e      	beq.n	801abb2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	891b      	ldrh	r3, [r3, #8]
 801ab98:	461a      	mov	r2, r3
 801ab9a:	4b1d      	ldr	r3, [pc, #116]	; (801ac10 <tcp_oos_insert_segment+0x10c>)
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	441a      	add	r2, r3
 801aba0:	683b      	ldr	r3, [r7, #0]
 801aba2:	68db      	ldr	r3, [r3, #12]
 801aba4:	685b      	ldr	r3, [r3, #4]
 801aba6:	6839      	ldr	r1, [r7, #0]
 801aba8:	8909      	ldrh	r1, [r1, #8]
 801abaa:	440b      	add	r3, r1
 801abac:	1ad3      	subs	r3, r2, r3
    while (next &&
 801abae:	2b00      	cmp	r3, #0
 801abb0:	daca      	bge.n	801ab48 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801abb2:	683b      	ldr	r3, [r7, #0]
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d01e      	beq.n	801abf6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	891b      	ldrh	r3, [r3, #8]
 801abbc:	461a      	mov	r2, r3
 801abbe:	4b14      	ldr	r3, [pc, #80]	; (801ac10 <tcp_oos_insert_segment+0x10c>)
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	441a      	add	r2, r3
 801abc4:	683b      	ldr	r3, [r7, #0]
 801abc6:	68db      	ldr	r3, [r3, #12]
 801abc8:	685b      	ldr	r3, [r3, #4]
 801abca:	1ad3      	subs	r3, r2, r3
    if (next &&
 801abcc:	2b00      	cmp	r3, #0
 801abce:	dd12      	ble.n	801abf6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801abd0:	683b      	ldr	r3, [r7, #0]
 801abd2:	68db      	ldr	r3, [r3, #12]
 801abd4:	685b      	ldr	r3, [r3, #4]
 801abd6:	b29a      	uxth	r2, r3
 801abd8:	4b0d      	ldr	r3, [pc, #52]	; (801ac10 <tcp_oos_insert_segment+0x10c>)
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	b29b      	uxth	r3, r3
 801abde:	1ad3      	subs	r3, r2, r3
 801abe0:	b29a      	uxth	r2, r3
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	685a      	ldr	r2, [r3, #4]
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	891b      	ldrh	r3, [r3, #8]
 801abee:	4619      	mov	r1, r3
 801abf0:	4610      	mov	r0, r2
 801abf2:	f7fc fa1f 	bl	8017034 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	683a      	ldr	r2, [r7, #0]
 801abfa:	601a      	str	r2, [r3, #0]
}
 801abfc:	bf00      	nop
 801abfe:	3714      	adds	r7, #20
 801ac00:	46bd      	mov	sp, r7
 801ac02:	bd90      	pop	{r4, r7, pc}
 801ac04:	08025a64 	.word	0x08025a64
 801ac08:	08025d24 	.word	0x08025d24
 801ac0c:	08025ab0 	.word	0x08025ab0
 801ac10:	2000bfec 	.word	0x2000bfec

0801ac14 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801ac14:	b5b0      	push	{r4, r5, r7, lr}
 801ac16:	b086      	sub	sp, #24
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	60f8      	str	r0, [r7, #12]
 801ac1c:	60b9      	str	r1, [r7, #8]
 801ac1e:	607a      	str	r2, [r7, #4]
 801ac20:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801ac22:	e03e      	b.n	801aca2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801ac24:	68bb      	ldr	r3, [r7, #8]
 801ac26:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801ac28:	68bb      	ldr	r3, [r7, #8]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801ac2e:	697b      	ldr	r3, [r7, #20]
 801ac30:	685b      	ldr	r3, [r3, #4]
 801ac32:	4618      	mov	r0, r3
 801ac34:	f7fc fc12 	bl	801745c <pbuf_clen>
 801ac38:	4603      	mov	r3, r0
 801ac3a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ac42:	8a7a      	ldrh	r2, [r7, #18]
 801ac44:	429a      	cmp	r2, r3
 801ac46:	d906      	bls.n	801ac56 <tcp_free_acked_segments+0x42>
 801ac48:	4b2a      	ldr	r3, [pc, #168]	; (801acf4 <tcp_free_acked_segments+0xe0>)
 801ac4a:	f240 4257 	movw	r2, #1111	; 0x457
 801ac4e:	492a      	ldr	r1, [pc, #168]	; (801acf8 <tcp_free_acked_segments+0xe4>)
 801ac50:	482a      	ldr	r0, [pc, #168]	; (801acfc <tcp_free_acked_segments+0xe8>)
 801ac52:	f007 fdad 	bl	80227b0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801ac56:	68fb      	ldr	r3, [r7, #12]
 801ac58:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801ac5c:	8a7b      	ldrh	r3, [r7, #18]
 801ac5e:	1ad3      	subs	r3, r2, r3
 801ac60:	b29a      	uxth	r2, r3
 801ac62:	68fb      	ldr	r3, [r7, #12]
 801ac64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801ac68:	697b      	ldr	r3, [r7, #20]
 801ac6a:	891a      	ldrh	r2, [r3, #8]
 801ac6c:	4b24      	ldr	r3, [pc, #144]	; (801ad00 <tcp_free_acked_segments+0xec>)
 801ac6e:	881b      	ldrh	r3, [r3, #0]
 801ac70:	4413      	add	r3, r2
 801ac72:	b29a      	uxth	r2, r3
 801ac74:	4b22      	ldr	r3, [pc, #136]	; (801ad00 <tcp_free_acked_segments+0xec>)
 801ac76:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801ac78:	6978      	ldr	r0, [r7, #20]
 801ac7a:	f7fe f90c 	bl	8018e96 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801ac7e:	68fb      	ldr	r3, [r7, #12]
 801ac80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d00c      	beq.n	801aca2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801ac88:	68bb      	ldr	r3, [r7, #8]
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d109      	bne.n	801aca2 <tcp_free_acked_segments+0x8e>
 801ac8e:	683b      	ldr	r3, [r7, #0]
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d106      	bne.n	801aca2 <tcp_free_acked_segments+0x8e>
 801ac94:	4b17      	ldr	r3, [pc, #92]	; (801acf4 <tcp_free_acked_segments+0xe0>)
 801ac96:	f240 4261 	movw	r2, #1121	; 0x461
 801ac9a:	491a      	ldr	r1, [pc, #104]	; (801ad04 <tcp_free_acked_segments+0xf0>)
 801ac9c:	4817      	ldr	r0, [pc, #92]	; (801acfc <tcp_free_acked_segments+0xe8>)
 801ac9e:	f007 fd87 	bl	80227b0 <iprintf>
  while (seg_list != NULL &&
 801aca2:	68bb      	ldr	r3, [r7, #8]
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	d020      	beq.n	801acea <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801aca8:	68bb      	ldr	r3, [r7, #8]
 801acaa:	68db      	ldr	r3, [r3, #12]
 801acac:	685b      	ldr	r3, [r3, #4]
 801acae:	4618      	mov	r0, r3
 801acb0:	f7fa ff69 	bl	8015b86 <lwip_htonl>
 801acb4:	4604      	mov	r4, r0
 801acb6:	68bb      	ldr	r3, [r7, #8]
 801acb8:	891b      	ldrh	r3, [r3, #8]
 801acba:	461d      	mov	r5, r3
 801acbc:	68bb      	ldr	r3, [r7, #8]
 801acbe:	68db      	ldr	r3, [r3, #12]
 801acc0:	899b      	ldrh	r3, [r3, #12]
 801acc2:	b29b      	uxth	r3, r3
 801acc4:	4618      	mov	r0, r3
 801acc6:	f7fa ff49 	bl	8015b5c <lwip_htons>
 801acca:	4603      	mov	r3, r0
 801accc:	b2db      	uxtb	r3, r3
 801acce:	f003 0303 	and.w	r3, r3, #3
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d001      	beq.n	801acda <tcp_free_acked_segments+0xc6>
 801acd6:	2301      	movs	r3, #1
 801acd8:	e000      	b.n	801acdc <tcp_free_acked_segments+0xc8>
 801acda:	2300      	movs	r3, #0
 801acdc:	442b      	add	r3, r5
 801acde:	18e2      	adds	r2, r4, r3
 801ace0:	4b09      	ldr	r3, [pc, #36]	; (801ad08 <tcp_free_acked_segments+0xf4>)
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	dd9c      	ble.n	801ac24 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801acea:	68bb      	ldr	r3, [r7, #8]
}
 801acec:	4618      	mov	r0, r3
 801acee:	3718      	adds	r7, #24
 801acf0:	46bd      	mov	sp, r7
 801acf2:	bdb0      	pop	{r4, r5, r7, pc}
 801acf4:	08025a64 	.word	0x08025a64
 801acf8:	08025d4c 	.word	0x08025d4c
 801acfc:	08025ab0 	.word	0x08025ab0
 801ad00:	2000bff4 	.word	0x2000bff4
 801ad04:	08025d74 	.word	0x08025d74
 801ad08:	2000bff0 	.word	0x2000bff0

0801ad0c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801ad0c:	b5b0      	push	{r4, r5, r7, lr}
 801ad0e:	b094      	sub	sp, #80	; 0x50
 801ad10:	af00      	add	r7, sp, #0
 801ad12:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801ad14:	2300      	movs	r3, #0
 801ad16:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	d106      	bne.n	801ad2c <tcp_receive+0x20>
 801ad1e:	4b91      	ldr	r3, [pc, #580]	; (801af64 <tcp_receive+0x258>)
 801ad20:	f240 427b 	movw	r2, #1147	; 0x47b
 801ad24:	4990      	ldr	r1, [pc, #576]	; (801af68 <tcp_receive+0x25c>)
 801ad26:	4891      	ldr	r0, [pc, #580]	; (801af6c <tcp_receive+0x260>)
 801ad28:	f007 fd42 	bl	80227b0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	7d1b      	ldrb	r3, [r3, #20]
 801ad30:	2b03      	cmp	r3, #3
 801ad32:	d806      	bhi.n	801ad42 <tcp_receive+0x36>
 801ad34:	4b8b      	ldr	r3, [pc, #556]	; (801af64 <tcp_receive+0x258>)
 801ad36:	f240 427c 	movw	r2, #1148	; 0x47c
 801ad3a:	498d      	ldr	r1, [pc, #564]	; (801af70 <tcp_receive+0x264>)
 801ad3c:	488b      	ldr	r0, [pc, #556]	; (801af6c <tcp_receive+0x260>)
 801ad3e:	f007 fd37 	bl	80227b0 <iprintf>

  if (flags & TCP_ACK) {
 801ad42:	4b8c      	ldr	r3, [pc, #560]	; (801af74 <tcp_receive+0x268>)
 801ad44:	781b      	ldrb	r3, [r3, #0]
 801ad46:	f003 0310 	and.w	r3, r3, #16
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	f000 8264 	beq.w	801b218 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ad56:	461a      	mov	r2, r3
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad5c:	4413      	add	r3, r2
 801ad5e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ad64:	4b84      	ldr	r3, [pc, #528]	; (801af78 <tcp_receive+0x26c>)
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	1ad3      	subs	r3, r2, r3
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	db1b      	blt.n	801ada6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ad72:	4b81      	ldr	r3, [pc, #516]	; (801af78 <tcp_receive+0x26c>)
 801ad74:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801ad76:	429a      	cmp	r2, r3
 801ad78:	d106      	bne.n	801ad88 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ad7e:	4b7f      	ldr	r3, [pc, #508]	; (801af7c <tcp_receive+0x270>)
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	1ad3      	subs	r3, r2, r3
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	db0e      	blt.n	801ada6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ad8c:	4b7b      	ldr	r3, [pc, #492]	; (801af7c <tcp_receive+0x270>)
 801ad8e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ad90:	429a      	cmp	r2, r3
 801ad92:	d125      	bne.n	801ade0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ad94:	4b7a      	ldr	r3, [pc, #488]	; (801af80 <tcp_receive+0x274>)
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	89db      	ldrh	r3, [r3, #14]
 801ad9a:	b29a      	uxth	r2, r3
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ada2:	429a      	cmp	r2, r3
 801ada4:	d91c      	bls.n	801ade0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801ada6:	4b76      	ldr	r3, [pc, #472]	; (801af80 <tcp_receive+0x274>)
 801ada8:	681b      	ldr	r3, [r3, #0]
 801adaa:	89db      	ldrh	r3, [r3, #14]
 801adac:	b29a      	uxth	r2, r3
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801adc0:	429a      	cmp	r2, r3
 801adc2:	d205      	bcs.n	801add0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801add0:	4b69      	ldr	r3, [pc, #420]	; (801af78 <tcp_receive+0x26c>)
 801add2:	681a      	ldr	r2, [r3, #0]
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801add8:	4b68      	ldr	r3, [pc, #416]	; (801af7c <tcp_receive+0x270>)
 801adda:	681a      	ldr	r2, [r3, #0]
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801ade0:	4b66      	ldr	r3, [pc, #408]	; (801af7c <tcp_receive+0x270>)
 801ade2:	681a      	ldr	r2, [r3, #0]
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ade8:	1ad3      	subs	r3, r2, r3
 801adea:	2b00      	cmp	r3, #0
 801adec:	dc58      	bgt.n	801aea0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801adee:	4b65      	ldr	r3, [pc, #404]	; (801af84 <tcp_receive+0x278>)
 801adf0:	881b      	ldrh	r3, [r3, #0]
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d14b      	bne.n	801ae8e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801adfa:	687a      	ldr	r2, [r7, #4]
 801adfc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801ae00:	4413      	add	r3, r2
 801ae02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae04:	429a      	cmp	r2, r3
 801ae06:	d142      	bne.n	801ae8e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	db3d      	blt.n	801ae8e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ae16:	4b59      	ldr	r3, [pc, #356]	; (801af7c <tcp_receive+0x270>)
 801ae18:	681b      	ldr	r3, [r3, #0]
 801ae1a:	429a      	cmp	r2, r3
 801ae1c:	d137      	bne.n	801ae8e <tcp_receive+0x182>
              found_dupack = 1;
 801ae1e:	2301      	movs	r3, #1
 801ae20:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ae28:	2bff      	cmp	r3, #255	; 0xff
 801ae2a:	d007      	beq.n	801ae3c <tcp_receive+0x130>
                ++pcb->dupacks;
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ae32:	3301      	adds	r3, #1
 801ae34:	b2da      	uxtb	r2, r3
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ae42:	2b03      	cmp	r3, #3
 801ae44:	d91b      	bls.n	801ae7e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ae50:	4413      	add	r3, r2
 801ae52:	b29a      	uxth	r2, r3
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ae5a:	429a      	cmp	r2, r3
 801ae5c:	d30a      	bcc.n	801ae74 <tcp_receive+0x168>
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ae68:	4413      	add	r3, r2
 801ae6a:	b29a      	uxth	r2, r3
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ae72:	e004      	b.n	801ae7e <tcp_receive+0x172>
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ae7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ae84:	2b02      	cmp	r3, #2
 801ae86:	d902      	bls.n	801ae8e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801ae88:	6878      	ldr	r0, [r7, #4]
 801ae8a:	f002 fb43 	bl	801d514 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801ae8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	f040 8161 	bne.w	801b158 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	2200      	movs	r2, #0
 801ae9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ae9e:	e15b      	b.n	801b158 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801aea0:	4b36      	ldr	r3, [pc, #216]	; (801af7c <tcp_receive+0x270>)
 801aea2:	681a      	ldr	r2, [r3, #0]
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aea8:	1ad3      	subs	r3, r2, r3
 801aeaa:	3b01      	subs	r3, #1
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	f2c0 814e 	blt.w	801b14e <tcp_receive+0x442>
 801aeb2:	4b32      	ldr	r3, [pc, #200]	; (801af7c <tcp_receive+0x270>)
 801aeb4:	681a      	ldr	r2, [r3, #0]
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aeba:	1ad3      	subs	r3, r2, r3
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	f300 8146 	bgt.w	801b14e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	8b5b      	ldrh	r3, [r3, #26]
 801aec6:	f003 0304 	and.w	r3, r3, #4
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d010      	beq.n	801aef0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	8b5b      	ldrh	r3, [r3, #26]
 801aed2:	f023 0304 	bic.w	r3, r3, #4
 801aed6:	b29a      	uxth	r2, r3
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	2200      	movs	r2, #0
 801aeec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	2200      	movs	r2, #0
 801aef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801aefe:	10db      	asrs	r3, r3, #3
 801af00:	b21b      	sxth	r3, r3
 801af02:	b29a      	uxth	r2, r3
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801af0a:	b29b      	uxth	r3, r3
 801af0c:	4413      	add	r3, r2
 801af0e:	b29b      	uxth	r3, r3
 801af10:	b21a      	sxth	r2, r3
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801af18:	4b18      	ldr	r3, [pc, #96]	; (801af7c <tcp_receive+0x270>)
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	b29a      	uxth	r2, r3
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801af22:	b29b      	uxth	r3, r3
 801af24:	1ad3      	subs	r3, r2, r3
 801af26:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	2200      	movs	r2, #0
 801af2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801af30:	4b12      	ldr	r3, [pc, #72]	; (801af7c <tcp_receive+0x270>)
 801af32:	681a      	ldr	r2, [r3, #0]
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	7d1b      	ldrb	r3, [r3, #20]
 801af3c:	2b03      	cmp	r3, #3
 801af3e:	f240 8097 	bls.w	801b070 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801af4e:	429a      	cmp	r2, r3
 801af50:	d245      	bcs.n	801afde <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	8b5b      	ldrh	r3, [r3, #26]
 801af56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	d014      	beq.n	801af88 <tcp_receive+0x27c>
 801af5e:	2301      	movs	r3, #1
 801af60:	e013      	b.n	801af8a <tcp_receive+0x27e>
 801af62:	bf00      	nop
 801af64:	08025a64 	.word	0x08025a64
 801af68:	08025d94 	.word	0x08025d94
 801af6c:	08025ab0 	.word	0x08025ab0
 801af70:	08025db0 	.word	0x08025db0
 801af74:	2000bff8 	.word	0x2000bff8
 801af78:	2000bfec 	.word	0x2000bfec
 801af7c:	2000bff0 	.word	0x2000bff0
 801af80:	2000bfdc 	.word	0x2000bfdc
 801af84:	2000bff6 	.word	0x2000bff6
 801af88:	2302      	movs	r3, #2
 801af8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801af8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801af92:	b29a      	uxth	r2, r3
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801af98:	fb12 f303 	smulbb	r3, r2, r3
 801af9c:	b29b      	uxth	r3, r3
 801af9e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801afa0:	4293      	cmp	r3, r2
 801afa2:	bf28      	it	cs
 801afa4:	4613      	movcs	r3, r2
 801afa6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801afae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801afb0:	4413      	add	r3, r2
 801afb2:	b29a      	uxth	r2, r3
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801afba:	429a      	cmp	r2, r3
 801afbc:	d309      	bcc.n	801afd2 <tcp_receive+0x2c6>
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801afc4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801afc6:	4413      	add	r3, r2
 801afc8:	b29a      	uxth	r2, r3
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801afd0:	e04e      	b.n	801b070 <tcp_receive+0x364>
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801afd8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801afdc:	e048      	b.n	801b070 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801afe4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801afe6:	4413      	add	r3, r2
 801afe8:	b29a      	uxth	r2, r3
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801aff0:	429a      	cmp	r2, r3
 801aff2:	d309      	bcc.n	801b008 <tcp_receive+0x2fc>
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801affa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801affc:	4413      	add	r3, r2
 801affe:	b29a      	uxth	r2, r3
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801b006:	e004      	b.n	801b012 <tcp_receive+0x306>
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b00e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b01e:	429a      	cmp	r2, r3
 801b020:	d326      	bcc.n	801b070 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b02e:	1ad3      	subs	r3, r2, r3
 801b030:	b29a      	uxth	r2, r3
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b042:	4413      	add	r3, r2
 801b044:	b29a      	uxth	r2, r3
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b04c:	429a      	cmp	r2, r3
 801b04e:	d30a      	bcc.n	801b066 <tcp_receive+0x35a>
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b05a:	4413      	add	r3, r2
 801b05c:	b29a      	uxth	r2, r3
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b064:	e004      	b.n	801b070 <tcp_receive+0x364>
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b06c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b078:	4a98      	ldr	r2, [pc, #608]	; (801b2dc <tcp_receive+0x5d0>)
 801b07a:	6878      	ldr	r0, [r7, #4]
 801b07c:	f7ff fdca 	bl	801ac14 <tcp_free_acked_segments>
 801b080:	4602      	mov	r2, r0
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b08e:	4a94      	ldr	r2, [pc, #592]	; (801b2e0 <tcp_receive+0x5d4>)
 801b090:	6878      	ldr	r0, [r7, #4]
 801b092:	f7ff fdbf 	bl	801ac14 <tcp_free_acked_segments>
 801b096:	4602      	mov	r2, r0
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d104      	bne.n	801b0ae <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b0aa:	861a      	strh	r2, [r3, #48]	; 0x30
 801b0ac:	e002      	b.n	801b0b4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	2200      	movs	r2, #0
 801b0b2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	2200      	movs	r2, #0
 801b0b8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d103      	bne.n	801b0ca <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	2200      	movs	r2, #0
 801b0c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801b0d0:	4b84      	ldr	r3, [pc, #528]	; (801b2e4 <tcp_receive+0x5d8>)
 801b0d2:	881b      	ldrh	r3, [r3, #0]
 801b0d4:	4413      	add	r3, r2
 801b0d6:	b29a      	uxth	r2, r3
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	8b5b      	ldrh	r3, [r3, #26]
 801b0e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d035      	beq.n	801b156 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d118      	bne.n	801b124 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d00c      	beq.n	801b114 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b102:	68db      	ldr	r3, [r3, #12]
 801b104:	685b      	ldr	r3, [r3, #4]
 801b106:	4618      	mov	r0, r3
 801b108:	f7fa fd3d 	bl	8015b86 <lwip_htonl>
 801b10c:	4603      	mov	r3, r0
 801b10e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801b110:	2b00      	cmp	r3, #0
 801b112:	dc20      	bgt.n	801b156 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	8b5b      	ldrh	r3, [r3, #26]
 801b118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b11c:	b29a      	uxth	r2, r3
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b122:	e018      	b.n	801b156 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b12c:	68db      	ldr	r3, [r3, #12]
 801b12e:	685b      	ldr	r3, [r3, #4]
 801b130:	4618      	mov	r0, r3
 801b132:	f7fa fd28 	bl	8015b86 <lwip_htonl>
 801b136:	4603      	mov	r3, r0
 801b138:	1ae3      	subs	r3, r4, r3
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	dc0b      	bgt.n	801b156 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	8b5b      	ldrh	r3, [r3, #26]
 801b142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b146:	b29a      	uxth	r2, r3
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b14c:	e003      	b.n	801b156 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801b14e:	6878      	ldr	r0, [r7, #4]
 801b150:	f002 fbce 	bl	801d8f0 <tcp_send_empty_ack>
 801b154:	e000      	b.n	801b158 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b156:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d05b      	beq.n	801b218 <tcp_receive+0x50c>
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b164:	4b60      	ldr	r3, [pc, #384]	; (801b2e8 <tcp_receive+0x5dc>)
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	1ad3      	subs	r3, r2, r3
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	da54      	bge.n	801b218 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801b16e:	4b5f      	ldr	r3, [pc, #380]	; (801b2ec <tcp_receive+0x5e0>)
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	b29a      	uxth	r2, r3
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b178:	b29b      	uxth	r3, r3
 801b17a:	1ad3      	subs	r3, r2, r3
 801b17c:	b29b      	uxth	r3, r3
 801b17e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801b182:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b18c:	10db      	asrs	r3, r3, #3
 801b18e:	b21b      	sxth	r3, r3
 801b190:	b29b      	uxth	r3, r3
 801b192:	1ad3      	subs	r3, r2, r3
 801b194:	b29b      	uxth	r3, r3
 801b196:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b1a0:	b29a      	uxth	r2, r3
 801b1a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b1a6:	4413      	add	r3, r2
 801b1a8:	b29b      	uxth	r3, r3
 801b1aa:	b21a      	sxth	r2, r3
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801b1b0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	da05      	bge.n	801b1c4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801b1b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b1bc:	425b      	negs	r3, r3
 801b1be:	b29b      	uxth	r3, r3
 801b1c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801b1c4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b1ce:	109b      	asrs	r3, r3, #2
 801b1d0:	b21b      	sxth	r3, r3
 801b1d2:	b29b      	uxth	r3, r3
 801b1d4:	1ad3      	subs	r3, r2, r3
 801b1d6:	b29b      	uxth	r3, r3
 801b1d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b1e2:	b29a      	uxth	r2, r3
 801b1e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b1e8:	4413      	add	r3, r2
 801b1ea:	b29b      	uxth	r3, r3
 801b1ec:	b21a      	sxth	r2, r3
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b1f8:	10db      	asrs	r3, r3, #3
 801b1fa:	b21b      	sxth	r3, r3
 801b1fc:	b29a      	uxth	r2, r3
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b204:	b29b      	uxth	r3, r3
 801b206:	4413      	add	r3, r2
 801b208:	b29b      	uxth	r3, r3
 801b20a:	b21a      	sxth	r2, r3
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	2200      	movs	r2, #0
 801b216:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801b218:	4b35      	ldr	r3, [pc, #212]	; (801b2f0 <tcp_receive+0x5e4>)
 801b21a:	881b      	ldrh	r3, [r3, #0]
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	f000 84e2 	beq.w	801bbe6 <tcp_receive+0xeda>
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	7d1b      	ldrb	r3, [r3, #20]
 801b226:	2b06      	cmp	r3, #6
 801b228:	f200 84dd 	bhi.w	801bbe6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b230:	4b30      	ldr	r3, [pc, #192]	; (801b2f4 <tcp_receive+0x5e8>)
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	1ad3      	subs	r3, r2, r3
 801b236:	3b01      	subs	r3, #1
 801b238:	2b00      	cmp	r3, #0
 801b23a:	f2c0 808f 	blt.w	801b35c <tcp_receive+0x650>
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b242:	4b2b      	ldr	r3, [pc, #172]	; (801b2f0 <tcp_receive+0x5e4>)
 801b244:	881b      	ldrh	r3, [r3, #0]
 801b246:	4619      	mov	r1, r3
 801b248:	4b2a      	ldr	r3, [pc, #168]	; (801b2f4 <tcp_receive+0x5e8>)
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	440b      	add	r3, r1
 801b24e:	1ad3      	subs	r3, r2, r3
 801b250:	3301      	adds	r3, #1
 801b252:	2b00      	cmp	r3, #0
 801b254:	f300 8082 	bgt.w	801b35c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801b258:	4b27      	ldr	r3, [pc, #156]	; (801b2f8 <tcp_receive+0x5ec>)
 801b25a:	685b      	ldr	r3, [r3, #4]
 801b25c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b262:	4b24      	ldr	r3, [pc, #144]	; (801b2f4 <tcp_receive+0x5e8>)
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	1ad3      	subs	r3, r2, r3
 801b268:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801b26a:	4b23      	ldr	r3, [pc, #140]	; (801b2f8 <tcp_receive+0x5ec>)
 801b26c:	685b      	ldr	r3, [r3, #4]
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d106      	bne.n	801b280 <tcp_receive+0x574>
 801b272:	4b22      	ldr	r3, [pc, #136]	; (801b2fc <tcp_receive+0x5f0>)
 801b274:	f240 5294 	movw	r2, #1428	; 0x594
 801b278:	4921      	ldr	r1, [pc, #132]	; (801b300 <tcp_receive+0x5f4>)
 801b27a:	4822      	ldr	r0, [pc, #136]	; (801b304 <tcp_receive+0x5f8>)
 801b27c:	f007 fa98 	bl	80227b0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801b280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b282:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b286:	4293      	cmp	r3, r2
 801b288:	d906      	bls.n	801b298 <tcp_receive+0x58c>
 801b28a:	4b1c      	ldr	r3, [pc, #112]	; (801b2fc <tcp_receive+0x5f0>)
 801b28c:	f240 5295 	movw	r2, #1429	; 0x595
 801b290:	491d      	ldr	r1, [pc, #116]	; (801b308 <tcp_receive+0x5fc>)
 801b292:	481c      	ldr	r0, [pc, #112]	; (801b304 <tcp_receive+0x5f8>)
 801b294:	f007 fa8c 	bl	80227b0 <iprintf>
      off = (u16_t)off32;
 801b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b29a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801b29e:	4b16      	ldr	r3, [pc, #88]	; (801b2f8 <tcp_receive+0x5ec>)
 801b2a0:	685b      	ldr	r3, [r3, #4]
 801b2a2:	891b      	ldrh	r3, [r3, #8]
 801b2a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b2a8:	429a      	cmp	r2, r3
 801b2aa:	d906      	bls.n	801b2ba <tcp_receive+0x5ae>
 801b2ac:	4b13      	ldr	r3, [pc, #76]	; (801b2fc <tcp_receive+0x5f0>)
 801b2ae:	f240 5297 	movw	r2, #1431	; 0x597
 801b2b2:	4916      	ldr	r1, [pc, #88]	; (801b30c <tcp_receive+0x600>)
 801b2b4:	4813      	ldr	r0, [pc, #76]	; (801b304 <tcp_receive+0x5f8>)
 801b2b6:	f007 fa7b 	bl	80227b0 <iprintf>
      inseg.len -= off;
 801b2ba:	4b0f      	ldr	r3, [pc, #60]	; (801b2f8 <tcp_receive+0x5ec>)
 801b2bc:	891a      	ldrh	r2, [r3, #8]
 801b2be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b2c2:	1ad3      	subs	r3, r2, r3
 801b2c4:	b29a      	uxth	r2, r3
 801b2c6:	4b0c      	ldr	r3, [pc, #48]	; (801b2f8 <tcp_receive+0x5ec>)
 801b2c8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801b2ca:	4b0b      	ldr	r3, [pc, #44]	; (801b2f8 <tcp_receive+0x5ec>)
 801b2cc:	685b      	ldr	r3, [r3, #4]
 801b2ce:	891a      	ldrh	r2, [r3, #8]
 801b2d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b2d4:	1ad3      	subs	r3, r2, r3
 801b2d6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801b2d8:	e02a      	b.n	801b330 <tcp_receive+0x624>
 801b2da:	bf00      	nop
 801b2dc:	08025dcc 	.word	0x08025dcc
 801b2e0:	08025dd4 	.word	0x08025dd4
 801b2e4:	2000bff4 	.word	0x2000bff4
 801b2e8:	2000bff0 	.word	0x2000bff0
 801b2ec:	2000bfb4 	.word	0x2000bfb4
 801b2f0:	2000bff6 	.word	0x2000bff6
 801b2f4:	2000bfec 	.word	0x2000bfec
 801b2f8:	2000bfcc 	.word	0x2000bfcc
 801b2fc:	08025a64 	.word	0x08025a64
 801b300:	08025ddc 	.word	0x08025ddc
 801b304:	08025ab0 	.word	0x08025ab0
 801b308:	08025dec 	.word	0x08025dec
 801b30c:	08025dfc 	.word	0x08025dfc
        off -= p->len;
 801b310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b312:	895b      	ldrh	r3, [r3, #10]
 801b314:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b318:	1ad3      	subs	r3, r2, r3
 801b31a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801b31e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b320:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b322:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801b324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b326:	2200      	movs	r2, #0
 801b328:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801b32a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801b330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b332:	895b      	ldrh	r3, [r3, #10]
 801b334:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b338:	429a      	cmp	r2, r3
 801b33a:	d8e9      	bhi.n	801b310 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801b33c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b340:	4619      	mov	r1, r3
 801b342:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801b344:	f7fb ff76 	bl	8017234 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b34c:	4a91      	ldr	r2, [pc, #580]	; (801b594 <tcp_receive+0x888>)
 801b34e:	6013      	str	r3, [r2, #0]
 801b350:	4b91      	ldr	r3, [pc, #580]	; (801b598 <tcp_receive+0x88c>)
 801b352:	68db      	ldr	r3, [r3, #12]
 801b354:	4a8f      	ldr	r2, [pc, #572]	; (801b594 <tcp_receive+0x888>)
 801b356:	6812      	ldr	r2, [r2, #0]
 801b358:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801b35a:	e00d      	b.n	801b378 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801b35c:	4b8d      	ldr	r3, [pc, #564]	; (801b594 <tcp_receive+0x888>)
 801b35e:	681a      	ldr	r2, [r3, #0]
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b364:	1ad3      	subs	r3, r2, r3
 801b366:	2b00      	cmp	r3, #0
 801b368:	da06      	bge.n	801b378 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	8b5b      	ldrh	r3, [r3, #26]
 801b36e:	f043 0302 	orr.w	r3, r3, #2
 801b372:	b29a      	uxth	r2, r3
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b378:	4b86      	ldr	r3, [pc, #536]	; (801b594 <tcp_receive+0x888>)
 801b37a:	681a      	ldr	r2, [r3, #0]
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b380:	1ad3      	subs	r3, r2, r3
 801b382:	2b00      	cmp	r3, #0
 801b384:	f2c0 842a 	blt.w	801bbdc <tcp_receive+0xed0>
 801b388:	4b82      	ldr	r3, [pc, #520]	; (801b594 <tcp_receive+0x888>)
 801b38a:	681a      	ldr	r2, [r3, #0]
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b390:	6879      	ldr	r1, [r7, #4]
 801b392:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b394:	440b      	add	r3, r1
 801b396:	1ad3      	subs	r3, r2, r3
 801b398:	3301      	adds	r3, #1
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	f300 841e 	bgt.w	801bbdc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b3a4:	4b7b      	ldr	r3, [pc, #492]	; (801b594 <tcp_receive+0x888>)
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	429a      	cmp	r2, r3
 801b3aa:	f040 829a 	bne.w	801b8e2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801b3ae:	4b7a      	ldr	r3, [pc, #488]	; (801b598 <tcp_receive+0x88c>)
 801b3b0:	891c      	ldrh	r4, [r3, #8]
 801b3b2:	4b79      	ldr	r3, [pc, #484]	; (801b598 <tcp_receive+0x88c>)
 801b3b4:	68db      	ldr	r3, [r3, #12]
 801b3b6:	899b      	ldrh	r3, [r3, #12]
 801b3b8:	b29b      	uxth	r3, r3
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	f7fa fbce 	bl	8015b5c <lwip_htons>
 801b3c0:	4603      	mov	r3, r0
 801b3c2:	b2db      	uxtb	r3, r3
 801b3c4:	f003 0303 	and.w	r3, r3, #3
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d001      	beq.n	801b3d0 <tcp_receive+0x6c4>
 801b3cc:	2301      	movs	r3, #1
 801b3ce:	e000      	b.n	801b3d2 <tcp_receive+0x6c6>
 801b3d0:	2300      	movs	r3, #0
 801b3d2:	4423      	add	r3, r4
 801b3d4:	b29a      	uxth	r2, r3
 801b3d6:	4b71      	ldr	r3, [pc, #452]	; (801b59c <tcp_receive+0x890>)
 801b3d8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b3de:	4b6f      	ldr	r3, [pc, #444]	; (801b59c <tcp_receive+0x890>)
 801b3e0:	881b      	ldrh	r3, [r3, #0]
 801b3e2:	429a      	cmp	r2, r3
 801b3e4:	d275      	bcs.n	801b4d2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b3e6:	4b6c      	ldr	r3, [pc, #432]	; (801b598 <tcp_receive+0x88c>)
 801b3e8:	68db      	ldr	r3, [r3, #12]
 801b3ea:	899b      	ldrh	r3, [r3, #12]
 801b3ec:	b29b      	uxth	r3, r3
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	f7fa fbb4 	bl	8015b5c <lwip_htons>
 801b3f4:	4603      	mov	r3, r0
 801b3f6:	b2db      	uxtb	r3, r3
 801b3f8:	f003 0301 	and.w	r3, r3, #1
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	d01f      	beq.n	801b440 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801b400:	4b65      	ldr	r3, [pc, #404]	; (801b598 <tcp_receive+0x88c>)
 801b402:	68db      	ldr	r3, [r3, #12]
 801b404:	899b      	ldrh	r3, [r3, #12]
 801b406:	b29b      	uxth	r3, r3
 801b408:	b21b      	sxth	r3, r3
 801b40a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b40e:	b21c      	sxth	r4, r3
 801b410:	4b61      	ldr	r3, [pc, #388]	; (801b598 <tcp_receive+0x88c>)
 801b412:	68db      	ldr	r3, [r3, #12]
 801b414:	899b      	ldrh	r3, [r3, #12]
 801b416:	b29b      	uxth	r3, r3
 801b418:	4618      	mov	r0, r3
 801b41a:	f7fa fb9f 	bl	8015b5c <lwip_htons>
 801b41e:	4603      	mov	r3, r0
 801b420:	b2db      	uxtb	r3, r3
 801b422:	b29b      	uxth	r3, r3
 801b424:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801b428:	b29b      	uxth	r3, r3
 801b42a:	4618      	mov	r0, r3
 801b42c:	f7fa fb96 	bl	8015b5c <lwip_htons>
 801b430:	4603      	mov	r3, r0
 801b432:	b21b      	sxth	r3, r3
 801b434:	4323      	orrs	r3, r4
 801b436:	b21a      	sxth	r2, r3
 801b438:	4b57      	ldr	r3, [pc, #348]	; (801b598 <tcp_receive+0x88c>)
 801b43a:	68db      	ldr	r3, [r3, #12]
 801b43c:	b292      	uxth	r2, r2
 801b43e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b444:	4b54      	ldr	r3, [pc, #336]	; (801b598 <tcp_receive+0x88c>)
 801b446:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801b448:	4b53      	ldr	r3, [pc, #332]	; (801b598 <tcp_receive+0x88c>)
 801b44a:	68db      	ldr	r3, [r3, #12]
 801b44c:	899b      	ldrh	r3, [r3, #12]
 801b44e:	b29b      	uxth	r3, r3
 801b450:	4618      	mov	r0, r3
 801b452:	f7fa fb83 	bl	8015b5c <lwip_htons>
 801b456:	4603      	mov	r3, r0
 801b458:	b2db      	uxtb	r3, r3
 801b45a:	f003 0302 	and.w	r3, r3, #2
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d005      	beq.n	801b46e <tcp_receive+0x762>
            inseg.len -= 1;
 801b462:	4b4d      	ldr	r3, [pc, #308]	; (801b598 <tcp_receive+0x88c>)
 801b464:	891b      	ldrh	r3, [r3, #8]
 801b466:	3b01      	subs	r3, #1
 801b468:	b29a      	uxth	r2, r3
 801b46a:	4b4b      	ldr	r3, [pc, #300]	; (801b598 <tcp_receive+0x88c>)
 801b46c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801b46e:	4b4a      	ldr	r3, [pc, #296]	; (801b598 <tcp_receive+0x88c>)
 801b470:	685b      	ldr	r3, [r3, #4]
 801b472:	4a49      	ldr	r2, [pc, #292]	; (801b598 <tcp_receive+0x88c>)
 801b474:	8912      	ldrh	r2, [r2, #8]
 801b476:	4611      	mov	r1, r2
 801b478:	4618      	mov	r0, r3
 801b47a:	f7fb fddb 	bl	8017034 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801b47e:	4b46      	ldr	r3, [pc, #280]	; (801b598 <tcp_receive+0x88c>)
 801b480:	891c      	ldrh	r4, [r3, #8]
 801b482:	4b45      	ldr	r3, [pc, #276]	; (801b598 <tcp_receive+0x88c>)
 801b484:	68db      	ldr	r3, [r3, #12]
 801b486:	899b      	ldrh	r3, [r3, #12]
 801b488:	b29b      	uxth	r3, r3
 801b48a:	4618      	mov	r0, r3
 801b48c:	f7fa fb66 	bl	8015b5c <lwip_htons>
 801b490:	4603      	mov	r3, r0
 801b492:	b2db      	uxtb	r3, r3
 801b494:	f003 0303 	and.w	r3, r3, #3
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d001      	beq.n	801b4a0 <tcp_receive+0x794>
 801b49c:	2301      	movs	r3, #1
 801b49e:	e000      	b.n	801b4a2 <tcp_receive+0x796>
 801b4a0:	2300      	movs	r3, #0
 801b4a2:	4423      	add	r3, r4
 801b4a4:	b29a      	uxth	r2, r3
 801b4a6:	4b3d      	ldr	r3, [pc, #244]	; (801b59c <tcp_receive+0x890>)
 801b4a8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b4aa:	4b3c      	ldr	r3, [pc, #240]	; (801b59c <tcp_receive+0x890>)
 801b4ac:	881b      	ldrh	r3, [r3, #0]
 801b4ae:	461a      	mov	r2, r3
 801b4b0:	4b38      	ldr	r3, [pc, #224]	; (801b594 <tcp_receive+0x888>)
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	441a      	add	r2, r3
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4ba:	6879      	ldr	r1, [r7, #4]
 801b4bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b4be:	440b      	add	r3, r1
 801b4c0:	429a      	cmp	r2, r3
 801b4c2:	d006      	beq.n	801b4d2 <tcp_receive+0x7c6>
 801b4c4:	4b36      	ldr	r3, [pc, #216]	; (801b5a0 <tcp_receive+0x894>)
 801b4c6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801b4ca:	4936      	ldr	r1, [pc, #216]	; (801b5a4 <tcp_receive+0x898>)
 801b4cc:	4836      	ldr	r0, [pc, #216]	; (801b5a8 <tcp_receive+0x89c>)
 801b4ce:	f007 f96f 	bl	80227b0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	f000 80e7 	beq.w	801b6aa <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b4dc:	4b2e      	ldr	r3, [pc, #184]	; (801b598 <tcp_receive+0x88c>)
 801b4de:	68db      	ldr	r3, [r3, #12]
 801b4e0:	899b      	ldrh	r3, [r3, #12]
 801b4e2:	b29b      	uxth	r3, r3
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	f7fa fb39 	bl	8015b5c <lwip_htons>
 801b4ea:	4603      	mov	r3, r0
 801b4ec:	b2db      	uxtb	r3, r3
 801b4ee:	f003 0301 	and.w	r3, r3, #1
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d010      	beq.n	801b518 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801b4f6:	e00a      	b.n	801b50e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b4fc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b502:	681a      	ldr	r2, [r3, #0]
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801b508:	68f8      	ldr	r0, [r7, #12]
 801b50a:	f7fd fcc4 	bl	8018e96 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b512:	2b00      	cmp	r3, #0
 801b514:	d1f0      	bne.n	801b4f8 <tcp_receive+0x7ec>
 801b516:	e0c8      	b.n	801b6aa <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b51c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801b51e:	e052      	b.n	801b5c6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801b520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b522:	68db      	ldr	r3, [r3, #12]
 801b524:	899b      	ldrh	r3, [r3, #12]
 801b526:	b29b      	uxth	r3, r3
 801b528:	4618      	mov	r0, r3
 801b52a:	f7fa fb17 	bl	8015b5c <lwip_htons>
 801b52e:	4603      	mov	r3, r0
 801b530:	b2db      	uxtb	r3, r3
 801b532:	f003 0301 	and.w	r3, r3, #1
 801b536:	2b00      	cmp	r3, #0
 801b538:	d03d      	beq.n	801b5b6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801b53a:	4b17      	ldr	r3, [pc, #92]	; (801b598 <tcp_receive+0x88c>)
 801b53c:	68db      	ldr	r3, [r3, #12]
 801b53e:	899b      	ldrh	r3, [r3, #12]
 801b540:	b29b      	uxth	r3, r3
 801b542:	4618      	mov	r0, r3
 801b544:	f7fa fb0a 	bl	8015b5c <lwip_htons>
 801b548:	4603      	mov	r3, r0
 801b54a:	b2db      	uxtb	r3, r3
 801b54c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801b550:	2b00      	cmp	r3, #0
 801b552:	d130      	bne.n	801b5b6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801b554:	4b10      	ldr	r3, [pc, #64]	; (801b598 <tcp_receive+0x88c>)
 801b556:	68db      	ldr	r3, [r3, #12]
 801b558:	899b      	ldrh	r3, [r3, #12]
 801b55a:	b29c      	uxth	r4, r3
 801b55c:	2001      	movs	r0, #1
 801b55e:	f7fa fafd 	bl	8015b5c <lwip_htons>
 801b562:	4603      	mov	r3, r0
 801b564:	461a      	mov	r2, r3
 801b566:	4b0c      	ldr	r3, [pc, #48]	; (801b598 <tcp_receive+0x88c>)
 801b568:	68db      	ldr	r3, [r3, #12]
 801b56a:	4322      	orrs	r2, r4
 801b56c:	b292      	uxth	r2, r2
 801b56e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801b570:	4b09      	ldr	r3, [pc, #36]	; (801b598 <tcp_receive+0x88c>)
 801b572:	891c      	ldrh	r4, [r3, #8]
 801b574:	4b08      	ldr	r3, [pc, #32]	; (801b598 <tcp_receive+0x88c>)
 801b576:	68db      	ldr	r3, [r3, #12]
 801b578:	899b      	ldrh	r3, [r3, #12]
 801b57a:	b29b      	uxth	r3, r3
 801b57c:	4618      	mov	r0, r3
 801b57e:	f7fa faed 	bl	8015b5c <lwip_htons>
 801b582:	4603      	mov	r3, r0
 801b584:	b2db      	uxtb	r3, r3
 801b586:	f003 0303 	and.w	r3, r3, #3
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d00e      	beq.n	801b5ac <tcp_receive+0x8a0>
 801b58e:	2301      	movs	r3, #1
 801b590:	e00d      	b.n	801b5ae <tcp_receive+0x8a2>
 801b592:	bf00      	nop
 801b594:	2000bfec 	.word	0x2000bfec
 801b598:	2000bfcc 	.word	0x2000bfcc
 801b59c:	2000bff6 	.word	0x2000bff6
 801b5a0:	08025a64 	.word	0x08025a64
 801b5a4:	08025e0c 	.word	0x08025e0c
 801b5a8:	08025ab0 	.word	0x08025ab0
 801b5ac:	2300      	movs	r3, #0
 801b5ae:	4423      	add	r3, r4
 801b5b0:	b29a      	uxth	r2, r3
 801b5b2:	4b98      	ldr	r3, [pc, #608]	; (801b814 <tcp_receive+0xb08>)
 801b5b4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801b5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b5b8:	613b      	str	r3, [r7, #16]
              next = next->next;
 801b5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b5bc:	681b      	ldr	r3, [r3, #0]
 801b5be:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801b5c0:	6938      	ldr	r0, [r7, #16]
 801b5c2:	f7fd fc68 	bl	8018e96 <tcp_seg_free>
            while (next &&
 801b5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d00e      	beq.n	801b5ea <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801b5cc:	4b91      	ldr	r3, [pc, #580]	; (801b814 <tcp_receive+0xb08>)
 801b5ce:	881b      	ldrh	r3, [r3, #0]
 801b5d0:	461a      	mov	r2, r3
 801b5d2:	4b91      	ldr	r3, [pc, #580]	; (801b818 <tcp_receive+0xb0c>)
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	441a      	add	r2, r3
 801b5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b5da:	68db      	ldr	r3, [r3, #12]
 801b5dc:	685b      	ldr	r3, [r3, #4]
 801b5de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b5e0:	8909      	ldrh	r1, [r1, #8]
 801b5e2:	440b      	add	r3, r1
 801b5e4:	1ad3      	subs	r3, r2, r3
            while (next &&
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	da9a      	bge.n	801b520 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801b5ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	d059      	beq.n	801b6a4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801b5f0:	4b88      	ldr	r3, [pc, #544]	; (801b814 <tcp_receive+0xb08>)
 801b5f2:	881b      	ldrh	r3, [r3, #0]
 801b5f4:	461a      	mov	r2, r3
 801b5f6:	4b88      	ldr	r3, [pc, #544]	; (801b818 <tcp_receive+0xb0c>)
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	441a      	add	r2, r3
 801b5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b5fe:	68db      	ldr	r3, [r3, #12]
 801b600:	685b      	ldr	r3, [r3, #4]
 801b602:	1ad3      	subs	r3, r2, r3
            if (next &&
 801b604:	2b00      	cmp	r3, #0
 801b606:	dd4d      	ble.n	801b6a4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801b608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b60a:	68db      	ldr	r3, [r3, #12]
 801b60c:	685b      	ldr	r3, [r3, #4]
 801b60e:	b29a      	uxth	r2, r3
 801b610:	4b81      	ldr	r3, [pc, #516]	; (801b818 <tcp_receive+0xb0c>)
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	b29b      	uxth	r3, r3
 801b616:	1ad3      	subs	r3, r2, r3
 801b618:	b29a      	uxth	r2, r3
 801b61a:	4b80      	ldr	r3, [pc, #512]	; (801b81c <tcp_receive+0xb10>)
 801b61c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801b61e:	4b7f      	ldr	r3, [pc, #508]	; (801b81c <tcp_receive+0xb10>)
 801b620:	68db      	ldr	r3, [r3, #12]
 801b622:	899b      	ldrh	r3, [r3, #12]
 801b624:	b29b      	uxth	r3, r3
 801b626:	4618      	mov	r0, r3
 801b628:	f7fa fa98 	bl	8015b5c <lwip_htons>
 801b62c:	4603      	mov	r3, r0
 801b62e:	b2db      	uxtb	r3, r3
 801b630:	f003 0302 	and.w	r3, r3, #2
 801b634:	2b00      	cmp	r3, #0
 801b636:	d005      	beq.n	801b644 <tcp_receive+0x938>
                inseg.len -= 1;
 801b638:	4b78      	ldr	r3, [pc, #480]	; (801b81c <tcp_receive+0xb10>)
 801b63a:	891b      	ldrh	r3, [r3, #8]
 801b63c:	3b01      	subs	r3, #1
 801b63e:	b29a      	uxth	r2, r3
 801b640:	4b76      	ldr	r3, [pc, #472]	; (801b81c <tcp_receive+0xb10>)
 801b642:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801b644:	4b75      	ldr	r3, [pc, #468]	; (801b81c <tcp_receive+0xb10>)
 801b646:	685b      	ldr	r3, [r3, #4]
 801b648:	4a74      	ldr	r2, [pc, #464]	; (801b81c <tcp_receive+0xb10>)
 801b64a:	8912      	ldrh	r2, [r2, #8]
 801b64c:	4611      	mov	r1, r2
 801b64e:	4618      	mov	r0, r3
 801b650:	f7fb fcf0 	bl	8017034 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801b654:	4b71      	ldr	r3, [pc, #452]	; (801b81c <tcp_receive+0xb10>)
 801b656:	891c      	ldrh	r4, [r3, #8]
 801b658:	4b70      	ldr	r3, [pc, #448]	; (801b81c <tcp_receive+0xb10>)
 801b65a:	68db      	ldr	r3, [r3, #12]
 801b65c:	899b      	ldrh	r3, [r3, #12]
 801b65e:	b29b      	uxth	r3, r3
 801b660:	4618      	mov	r0, r3
 801b662:	f7fa fa7b 	bl	8015b5c <lwip_htons>
 801b666:	4603      	mov	r3, r0
 801b668:	b2db      	uxtb	r3, r3
 801b66a:	f003 0303 	and.w	r3, r3, #3
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d001      	beq.n	801b676 <tcp_receive+0x96a>
 801b672:	2301      	movs	r3, #1
 801b674:	e000      	b.n	801b678 <tcp_receive+0x96c>
 801b676:	2300      	movs	r3, #0
 801b678:	4423      	add	r3, r4
 801b67a:	b29a      	uxth	r2, r3
 801b67c:	4b65      	ldr	r3, [pc, #404]	; (801b814 <tcp_receive+0xb08>)
 801b67e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801b680:	4b64      	ldr	r3, [pc, #400]	; (801b814 <tcp_receive+0xb08>)
 801b682:	881b      	ldrh	r3, [r3, #0]
 801b684:	461a      	mov	r2, r3
 801b686:	4b64      	ldr	r3, [pc, #400]	; (801b818 <tcp_receive+0xb0c>)
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	441a      	add	r2, r3
 801b68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b68e:	68db      	ldr	r3, [r3, #12]
 801b690:	685b      	ldr	r3, [r3, #4]
 801b692:	429a      	cmp	r2, r3
 801b694:	d006      	beq.n	801b6a4 <tcp_receive+0x998>
 801b696:	4b62      	ldr	r3, [pc, #392]	; (801b820 <tcp_receive+0xb14>)
 801b698:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801b69c:	4961      	ldr	r1, [pc, #388]	; (801b824 <tcp_receive+0xb18>)
 801b69e:	4862      	ldr	r0, [pc, #392]	; (801b828 <tcp_receive+0xb1c>)
 801b6a0:	f007 f886 	bl	80227b0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b6a8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801b6aa:	4b5a      	ldr	r3, [pc, #360]	; (801b814 <tcp_receive+0xb08>)
 801b6ac:	881b      	ldrh	r3, [r3, #0]
 801b6ae:	461a      	mov	r2, r3
 801b6b0:	4b59      	ldr	r3, [pc, #356]	; (801b818 <tcp_receive+0xb0c>)
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	441a      	add	r2, r3
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b6be:	4b55      	ldr	r3, [pc, #340]	; (801b814 <tcp_receive+0xb08>)
 801b6c0:	881b      	ldrh	r3, [r3, #0]
 801b6c2:	429a      	cmp	r2, r3
 801b6c4:	d206      	bcs.n	801b6d4 <tcp_receive+0x9c8>
 801b6c6:	4b56      	ldr	r3, [pc, #344]	; (801b820 <tcp_receive+0xb14>)
 801b6c8:	f240 6207 	movw	r2, #1543	; 0x607
 801b6cc:	4957      	ldr	r1, [pc, #348]	; (801b82c <tcp_receive+0xb20>)
 801b6ce:	4856      	ldr	r0, [pc, #344]	; (801b828 <tcp_receive+0xb1c>)
 801b6d0:	f007 f86e 	bl	80227b0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b6d8:	4b4e      	ldr	r3, [pc, #312]	; (801b814 <tcp_receive+0xb08>)
 801b6da:	881b      	ldrh	r3, [r3, #0]
 801b6dc:	1ad3      	subs	r3, r2, r3
 801b6de:	b29a      	uxth	r2, r3
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801b6e4:	6878      	ldr	r0, [r7, #4]
 801b6e6:	f7fc fd99 	bl	801821c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801b6ea:	4b4c      	ldr	r3, [pc, #304]	; (801b81c <tcp_receive+0xb10>)
 801b6ec:	685b      	ldr	r3, [r3, #4]
 801b6ee:	891b      	ldrh	r3, [r3, #8]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d006      	beq.n	801b702 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801b6f4:	4b49      	ldr	r3, [pc, #292]	; (801b81c <tcp_receive+0xb10>)
 801b6f6:	685b      	ldr	r3, [r3, #4]
 801b6f8:	4a4d      	ldr	r2, [pc, #308]	; (801b830 <tcp_receive+0xb24>)
 801b6fa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801b6fc:	4b47      	ldr	r3, [pc, #284]	; (801b81c <tcp_receive+0xb10>)
 801b6fe:	2200      	movs	r2, #0
 801b700:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b702:	4b46      	ldr	r3, [pc, #280]	; (801b81c <tcp_receive+0xb10>)
 801b704:	68db      	ldr	r3, [r3, #12]
 801b706:	899b      	ldrh	r3, [r3, #12]
 801b708:	b29b      	uxth	r3, r3
 801b70a:	4618      	mov	r0, r3
 801b70c:	f7fa fa26 	bl	8015b5c <lwip_htons>
 801b710:	4603      	mov	r3, r0
 801b712:	b2db      	uxtb	r3, r3
 801b714:	f003 0301 	and.w	r3, r3, #1
 801b718:	2b00      	cmp	r3, #0
 801b71a:	f000 80b8 	beq.w	801b88e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801b71e:	4b45      	ldr	r3, [pc, #276]	; (801b834 <tcp_receive+0xb28>)
 801b720:	781b      	ldrb	r3, [r3, #0]
 801b722:	f043 0320 	orr.w	r3, r3, #32
 801b726:	b2da      	uxtb	r2, r3
 801b728:	4b42      	ldr	r3, [pc, #264]	; (801b834 <tcp_receive+0xb28>)
 801b72a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801b72c:	e0af      	b.n	801b88e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b732:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b738:	68db      	ldr	r3, [r3, #12]
 801b73a:	685b      	ldr	r3, [r3, #4]
 801b73c:	4a36      	ldr	r2, [pc, #216]	; (801b818 <tcp_receive+0xb0c>)
 801b73e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801b740:	68bb      	ldr	r3, [r7, #8]
 801b742:	891b      	ldrh	r3, [r3, #8]
 801b744:	461c      	mov	r4, r3
 801b746:	68bb      	ldr	r3, [r7, #8]
 801b748:	68db      	ldr	r3, [r3, #12]
 801b74a:	899b      	ldrh	r3, [r3, #12]
 801b74c:	b29b      	uxth	r3, r3
 801b74e:	4618      	mov	r0, r3
 801b750:	f7fa fa04 	bl	8015b5c <lwip_htons>
 801b754:	4603      	mov	r3, r0
 801b756:	b2db      	uxtb	r3, r3
 801b758:	f003 0303 	and.w	r3, r3, #3
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d001      	beq.n	801b764 <tcp_receive+0xa58>
 801b760:	2301      	movs	r3, #1
 801b762:	e000      	b.n	801b766 <tcp_receive+0xa5a>
 801b764:	2300      	movs	r3, #0
 801b766:	191a      	adds	r2, r3, r4
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b76c:	441a      	add	r2, r3
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b776:	461c      	mov	r4, r3
 801b778:	68bb      	ldr	r3, [r7, #8]
 801b77a:	891b      	ldrh	r3, [r3, #8]
 801b77c:	461d      	mov	r5, r3
 801b77e:	68bb      	ldr	r3, [r7, #8]
 801b780:	68db      	ldr	r3, [r3, #12]
 801b782:	899b      	ldrh	r3, [r3, #12]
 801b784:	b29b      	uxth	r3, r3
 801b786:	4618      	mov	r0, r3
 801b788:	f7fa f9e8 	bl	8015b5c <lwip_htons>
 801b78c:	4603      	mov	r3, r0
 801b78e:	b2db      	uxtb	r3, r3
 801b790:	f003 0303 	and.w	r3, r3, #3
 801b794:	2b00      	cmp	r3, #0
 801b796:	d001      	beq.n	801b79c <tcp_receive+0xa90>
 801b798:	2301      	movs	r3, #1
 801b79a:	e000      	b.n	801b79e <tcp_receive+0xa92>
 801b79c:	2300      	movs	r3, #0
 801b79e:	442b      	add	r3, r5
 801b7a0:	429c      	cmp	r4, r3
 801b7a2:	d206      	bcs.n	801b7b2 <tcp_receive+0xaa6>
 801b7a4:	4b1e      	ldr	r3, [pc, #120]	; (801b820 <tcp_receive+0xb14>)
 801b7a6:	f240 622b 	movw	r2, #1579	; 0x62b
 801b7aa:	4923      	ldr	r1, [pc, #140]	; (801b838 <tcp_receive+0xb2c>)
 801b7ac:	481e      	ldr	r0, [pc, #120]	; (801b828 <tcp_receive+0xb1c>)
 801b7ae:	f006 ffff 	bl	80227b0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801b7b2:	68bb      	ldr	r3, [r7, #8]
 801b7b4:	891b      	ldrh	r3, [r3, #8]
 801b7b6:	461c      	mov	r4, r3
 801b7b8:	68bb      	ldr	r3, [r7, #8]
 801b7ba:	68db      	ldr	r3, [r3, #12]
 801b7bc:	899b      	ldrh	r3, [r3, #12]
 801b7be:	b29b      	uxth	r3, r3
 801b7c0:	4618      	mov	r0, r3
 801b7c2:	f7fa f9cb 	bl	8015b5c <lwip_htons>
 801b7c6:	4603      	mov	r3, r0
 801b7c8:	b2db      	uxtb	r3, r3
 801b7ca:	f003 0303 	and.w	r3, r3, #3
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d001      	beq.n	801b7d6 <tcp_receive+0xaca>
 801b7d2:	2301      	movs	r3, #1
 801b7d4:	e000      	b.n	801b7d8 <tcp_receive+0xacc>
 801b7d6:	2300      	movs	r3, #0
 801b7d8:	1919      	adds	r1, r3, r4
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b7de:	b28b      	uxth	r3, r1
 801b7e0:	1ad3      	subs	r3, r2, r3
 801b7e2:	b29a      	uxth	r2, r3
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801b7e8:	6878      	ldr	r0, [r7, #4]
 801b7ea:	f7fc fd17 	bl	801821c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801b7ee:	68bb      	ldr	r3, [r7, #8]
 801b7f0:	685b      	ldr	r3, [r3, #4]
 801b7f2:	891b      	ldrh	r3, [r3, #8]
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d028      	beq.n	801b84a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801b7f8:	4b0d      	ldr	r3, [pc, #52]	; (801b830 <tcp_receive+0xb24>)
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d01d      	beq.n	801b83c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801b800:	4b0b      	ldr	r3, [pc, #44]	; (801b830 <tcp_receive+0xb24>)
 801b802:	681a      	ldr	r2, [r3, #0]
 801b804:	68bb      	ldr	r3, [r7, #8]
 801b806:	685b      	ldr	r3, [r3, #4]
 801b808:	4619      	mov	r1, r3
 801b80a:	4610      	mov	r0, r2
 801b80c:	f7fb fe66 	bl	80174dc <pbuf_cat>
 801b810:	e018      	b.n	801b844 <tcp_receive+0xb38>
 801b812:	bf00      	nop
 801b814:	2000bff6 	.word	0x2000bff6
 801b818:	2000bfec 	.word	0x2000bfec
 801b81c:	2000bfcc 	.word	0x2000bfcc
 801b820:	08025a64 	.word	0x08025a64
 801b824:	08025e44 	.word	0x08025e44
 801b828:	08025ab0 	.word	0x08025ab0
 801b82c:	08025e80 	.word	0x08025e80
 801b830:	2000bffc 	.word	0x2000bffc
 801b834:	2000bff9 	.word	0x2000bff9
 801b838:	08025ea0 	.word	0x08025ea0
            } else {
              recv_data = cseg->p;
 801b83c:	68bb      	ldr	r3, [r7, #8]
 801b83e:	685b      	ldr	r3, [r3, #4]
 801b840:	4a70      	ldr	r2, [pc, #448]	; (801ba04 <tcp_receive+0xcf8>)
 801b842:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801b844:	68bb      	ldr	r3, [r7, #8]
 801b846:	2200      	movs	r2, #0
 801b848:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801b84a:	68bb      	ldr	r3, [r7, #8]
 801b84c:	68db      	ldr	r3, [r3, #12]
 801b84e:	899b      	ldrh	r3, [r3, #12]
 801b850:	b29b      	uxth	r3, r3
 801b852:	4618      	mov	r0, r3
 801b854:	f7fa f982 	bl	8015b5c <lwip_htons>
 801b858:	4603      	mov	r3, r0
 801b85a:	b2db      	uxtb	r3, r3
 801b85c:	f003 0301 	and.w	r3, r3, #1
 801b860:	2b00      	cmp	r3, #0
 801b862:	d00d      	beq.n	801b880 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801b864:	4b68      	ldr	r3, [pc, #416]	; (801ba08 <tcp_receive+0xcfc>)
 801b866:	781b      	ldrb	r3, [r3, #0]
 801b868:	f043 0320 	orr.w	r3, r3, #32
 801b86c:	b2da      	uxtb	r2, r3
 801b86e:	4b66      	ldr	r3, [pc, #408]	; (801ba08 <tcp_receive+0xcfc>)
 801b870:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	7d1b      	ldrb	r3, [r3, #20]
 801b876:	2b04      	cmp	r3, #4
 801b878:	d102      	bne.n	801b880 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	2207      	movs	r2, #7
 801b87e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801b880:	68bb      	ldr	r3, [r7, #8]
 801b882:	681a      	ldr	r2, [r3, #0]
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801b888:	68b8      	ldr	r0, [r7, #8]
 801b88a:	f7fd fb04 	bl	8018e96 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b892:	2b00      	cmp	r3, #0
 801b894:	d008      	beq.n	801b8a8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b89a:	68db      	ldr	r3, [r3, #12]
 801b89c:	685a      	ldr	r2, [r3, #4]
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801b8a2:	429a      	cmp	r2, r3
 801b8a4:	f43f af43 	beq.w	801b72e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	8b5b      	ldrh	r3, [r3, #26]
 801b8ac:	f003 0301 	and.w	r3, r3, #1
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d00e      	beq.n	801b8d2 <tcp_receive+0xbc6>
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	8b5b      	ldrh	r3, [r3, #26]
 801b8b8:	f023 0301 	bic.w	r3, r3, #1
 801b8bc:	b29a      	uxth	r2, r3
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	835a      	strh	r2, [r3, #26]
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	8b5b      	ldrh	r3, [r3, #26]
 801b8c6:	f043 0302 	orr.w	r3, r3, #2
 801b8ca:	b29a      	uxth	r2, r3
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801b8d0:	e188      	b.n	801bbe4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	8b5b      	ldrh	r3, [r3, #26]
 801b8d6:	f043 0301 	orr.w	r3, r3, #1
 801b8da:	b29a      	uxth	r2, r3
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801b8e0:	e180      	b.n	801bbe4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d106      	bne.n	801b8f8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801b8ea:	4848      	ldr	r0, [pc, #288]	; (801ba0c <tcp_receive+0xd00>)
 801b8ec:	f7fd faec 	bl	8018ec8 <tcp_seg_copy>
 801b8f0:	4602      	mov	r2, r0
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	675a      	str	r2, [r3, #116]	; 0x74
 801b8f6:	e16d      	b.n	801bbd4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801b8f8:	2300      	movs	r3, #0
 801b8fa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b900:	63bb      	str	r3, [r7, #56]	; 0x38
 801b902:	e157      	b.n	801bbb4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801b904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b906:	68db      	ldr	r3, [r3, #12]
 801b908:	685a      	ldr	r2, [r3, #4]
 801b90a:	4b41      	ldr	r3, [pc, #260]	; (801ba10 <tcp_receive+0xd04>)
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	429a      	cmp	r2, r3
 801b910:	d11d      	bne.n	801b94e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801b912:	4b3e      	ldr	r3, [pc, #248]	; (801ba0c <tcp_receive+0xd00>)
 801b914:	891a      	ldrh	r2, [r3, #8]
 801b916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b918:	891b      	ldrh	r3, [r3, #8]
 801b91a:	429a      	cmp	r2, r3
 801b91c:	f240 814f 	bls.w	801bbbe <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b920:	483a      	ldr	r0, [pc, #232]	; (801ba0c <tcp_receive+0xd00>)
 801b922:	f7fd fad1 	bl	8018ec8 <tcp_seg_copy>
 801b926:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801b928:	697b      	ldr	r3, [r7, #20]
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	f000 8149 	beq.w	801bbc2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801b930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b932:	2b00      	cmp	r3, #0
 801b934:	d003      	beq.n	801b93e <tcp_receive+0xc32>
                    prev->next = cseg;
 801b936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b938:	697a      	ldr	r2, [r7, #20]
 801b93a:	601a      	str	r2, [r3, #0]
 801b93c:	e002      	b.n	801b944 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	697a      	ldr	r2, [r7, #20]
 801b942:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801b944:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b946:	6978      	ldr	r0, [r7, #20]
 801b948:	f7ff f8dc 	bl	801ab04 <tcp_oos_insert_segment>
                }
                break;
 801b94c:	e139      	b.n	801bbc2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801b94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b950:	2b00      	cmp	r3, #0
 801b952:	d117      	bne.n	801b984 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801b954:	4b2e      	ldr	r3, [pc, #184]	; (801ba10 <tcp_receive+0xd04>)
 801b956:	681a      	ldr	r2, [r3, #0]
 801b958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b95a:	68db      	ldr	r3, [r3, #12]
 801b95c:	685b      	ldr	r3, [r3, #4]
 801b95e:	1ad3      	subs	r3, r2, r3
 801b960:	2b00      	cmp	r3, #0
 801b962:	da57      	bge.n	801ba14 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b964:	4829      	ldr	r0, [pc, #164]	; (801ba0c <tcp_receive+0xd00>)
 801b966:	f7fd faaf 	bl	8018ec8 <tcp_seg_copy>
 801b96a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801b96c:	69bb      	ldr	r3, [r7, #24]
 801b96e:	2b00      	cmp	r3, #0
 801b970:	f000 8129 	beq.w	801bbc6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	69ba      	ldr	r2, [r7, #24]
 801b978:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801b97a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b97c:	69b8      	ldr	r0, [r7, #24]
 801b97e:	f7ff f8c1 	bl	801ab04 <tcp_oos_insert_segment>
                  }
                  break;
 801b982:	e120      	b.n	801bbc6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801b984:	4b22      	ldr	r3, [pc, #136]	; (801ba10 <tcp_receive+0xd04>)
 801b986:	681a      	ldr	r2, [r3, #0]
 801b988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b98a:	68db      	ldr	r3, [r3, #12]
 801b98c:	685b      	ldr	r3, [r3, #4]
 801b98e:	1ad3      	subs	r3, r2, r3
 801b990:	3b01      	subs	r3, #1
 801b992:	2b00      	cmp	r3, #0
 801b994:	db3e      	blt.n	801ba14 <tcp_receive+0xd08>
 801b996:	4b1e      	ldr	r3, [pc, #120]	; (801ba10 <tcp_receive+0xd04>)
 801b998:	681a      	ldr	r2, [r3, #0]
 801b99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b99c:	68db      	ldr	r3, [r3, #12]
 801b99e:	685b      	ldr	r3, [r3, #4]
 801b9a0:	1ad3      	subs	r3, r2, r3
 801b9a2:	3301      	adds	r3, #1
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	dc35      	bgt.n	801ba14 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b9a8:	4818      	ldr	r0, [pc, #96]	; (801ba0c <tcp_receive+0xd00>)
 801b9aa:	f7fd fa8d 	bl	8018ec8 <tcp_seg_copy>
 801b9ae:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801b9b0:	69fb      	ldr	r3, [r7, #28]
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	f000 8109 	beq.w	801bbca <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801b9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9ba:	68db      	ldr	r3, [r3, #12]
 801b9bc:	685b      	ldr	r3, [r3, #4]
 801b9be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b9c0:	8912      	ldrh	r2, [r2, #8]
 801b9c2:	441a      	add	r2, r3
 801b9c4:	4b12      	ldr	r3, [pc, #72]	; (801ba10 <tcp_receive+0xd04>)
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	1ad3      	subs	r3, r2, r3
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	dd12      	ble.n	801b9f4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801b9ce:	4b10      	ldr	r3, [pc, #64]	; (801ba10 <tcp_receive+0xd04>)
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	b29a      	uxth	r2, r3
 801b9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9d6:	68db      	ldr	r3, [r3, #12]
 801b9d8:	685b      	ldr	r3, [r3, #4]
 801b9da:	b29b      	uxth	r3, r3
 801b9dc:	1ad3      	subs	r3, r2, r3
 801b9de:	b29a      	uxth	r2, r3
 801b9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9e2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801b9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9e6:	685a      	ldr	r2, [r3, #4]
 801b9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9ea:	891b      	ldrh	r3, [r3, #8]
 801b9ec:	4619      	mov	r1, r3
 801b9ee:	4610      	mov	r0, r2
 801b9f0:	f7fb fb20 	bl	8017034 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801b9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9f6:	69fa      	ldr	r2, [r7, #28]
 801b9f8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801b9fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b9fc:	69f8      	ldr	r0, [r7, #28]
 801b9fe:	f7ff f881 	bl	801ab04 <tcp_oos_insert_segment>
                  }
                  break;
 801ba02:	e0e2      	b.n	801bbca <tcp_receive+0xebe>
 801ba04:	2000bffc 	.word	0x2000bffc
 801ba08:	2000bff9 	.word	0x2000bff9
 801ba0c:	2000bfcc 	.word	0x2000bfcc
 801ba10:	2000bfec 	.word	0x2000bfec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801ba14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba16:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801ba18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	f040 80c6 	bne.w	801bbae <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801ba22:	4b80      	ldr	r3, [pc, #512]	; (801bc24 <tcp_receive+0xf18>)
 801ba24:	681a      	ldr	r2, [r3, #0]
 801ba26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba28:	68db      	ldr	r3, [r3, #12]
 801ba2a:	685b      	ldr	r3, [r3, #4]
 801ba2c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	f340 80bd 	ble.w	801bbae <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801ba34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba36:	68db      	ldr	r3, [r3, #12]
 801ba38:	899b      	ldrh	r3, [r3, #12]
 801ba3a:	b29b      	uxth	r3, r3
 801ba3c:	4618      	mov	r0, r3
 801ba3e:	f7fa f88d 	bl	8015b5c <lwip_htons>
 801ba42:	4603      	mov	r3, r0
 801ba44:	b2db      	uxtb	r3, r3
 801ba46:	f003 0301 	and.w	r3, r3, #1
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	f040 80bf 	bne.w	801bbce <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801ba50:	4875      	ldr	r0, [pc, #468]	; (801bc28 <tcp_receive+0xf1c>)
 801ba52:	f7fd fa39 	bl	8018ec8 <tcp_seg_copy>
 801ba56:	4602      	mov	r2, r0
 801ba58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba5a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801ba5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	f000 80b6 	beq.w	801bbd2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801ba66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba68:	68db      	ldr	r3, [r3, #12]
 801ba6a:	685b      	ldr	r3, [r3, #4]
 801ba6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ba6e:	8912      	ldrh	r2, [r2, #8]
 801ba70:	441a      	add	r2, r3
 801ba72:	4b6c      	ldr	r3, [pc, #432]	; (801bc24 <tcp_receive+0xf18>)
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	1ad3      	subs	r3, r2, r3
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	dd12      	ble.n	801baa2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801ba7c:	4b69      	ldr	r3, [pc, #420]	; (801bc24 <tcp_receive+0xf18>)
 801ba7e:	681b      	ldr	r3, [r3, #0]
 801ba80:	b29a      	uxth	r2, r3
 801ba82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba84:	68db      	ldr	r3, [r3, #12]
 801ba86:	685b      	ldr	r3, [r3, #4]
 801ba88:	b29b      	uxth	r3, r3
 801ba8a:	1ad3      	subs	r3, r2, r3
 801ba8c:	b29a      	uxth	r2, r3
 801ba8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba90:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801ba92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba94:	685a      	ldr	r2, [r3, #4]
 801ba96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba98:	891b      	ldrh	r3, [r3, #8]
 801ba9a:	4619      	mov	r1, r3
 801ba9c:	4610      	mov	r0, r2
 801ba9e:	f7fb fac9 	bl	8017034 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801baa2:	4b62      	ldr	r3, [pc, #392]	; (801bc2c <tcp_receive+0xf20>)
 801baa4:	881b      	ldrh	r3, [r3, #0]
 801baa6:	461a      	mov	r2, r3
 801baa8:	4b5e      	ldr	r3, [pc, #376]	; (801bc24 <tcp_receive+0xf18>)
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	441a      	add	r2, r3
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bab2:	6879      	ldr	r1, [r7, #4]
 801bab4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bab6:	440b      	add	r3, r1
 801bab8:	1ad3      	subs	r3, r2, r3
 801baba:	2b00      	cmp	r3, #0
 801babc:	f340 8089 	ble.w	801bbd2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801bac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	68db      	ldr	r3, [r3, #12]
 801bac6:	899b      	ldrh	r3, [r3, #12]
 801bac8:	b29b      	uxth	r3, r3
 801baca:	4618      	mov	r0, r3
 801bacc:	f7fa f846 	bl	8015b5c <lwip_htons>
 801bad0:	4603      	mov	r3, r0
 801bad2:	b2db      	uxtb	r3, r3
 801bad4:	f003 0301 	and.w	r3, r3, #1
 801bad8:	2b00      	cmp	r3, #0
 801bada:	d022      	beq.n	801bb22 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801badc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	68db      	ldr	r3, [r3, #12]
 801bae2:	899b      	ldrh	r3, [r3, #12]
 801bae4:	b29b      	uxth	r3, r3
 801bae6:	b21b      	sxth	r3, r3
 801bae8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801baec:	b21c      	sxth	r4, r3
 801baee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	68db      	ldr	r3, [r3, #12]
 801baf4:	899b      	ldrh	r3, [r3, #12]
 801baf6:	b29b      	uxth	r3, r3
 801baf8:	4618      	mov	r0, r3
 801bafa:	f7fa f82f 	bl	8015b5c <lwip_htons>
 801bafe:	4603      	mov	r3, r0
 801bb00:	b2db      	uxtb	r3, r3
 801bb02:	b29b      	uxth	r3, r3
 801bb04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801bb08:	b29b      	uxth	r3, r3
 801bb0a:	4618      	mov	r0, r3
 801bb0c:	f7fa f826 	bl	8015b5c <lwip_htons>
 801bb10:	4603      	mov	r3, r0
 801bb12:	b21b      	sxth	r3, r3
 801bb14:	4323      	orrs	r3, r4
 801bb16:	b21a      	sxth	r2, r3
 801bb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	68db      	ldr	r3, [r3, #12]
 801bb1e:	b292      	uxth	r2, r2
 801bb20:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb26:	b29a      	uxth	r2, r3
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bb2c:	4413      	add	r3, r2
 801bb2e:	b299      	uxth	r1, r3
 801bb30:	4b3c      	ldr	r3, [pc, #240]	; (801bc24 <tcp_receive+0xf18>)
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	b29a      	uxth	r2, r3
 801bb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	1a8a      	subs	r2, r1, r2
 801bb3c:	b292      	uxth	r2, r2
 801bb3e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801bb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	685a      	ldr	r2, [r3, #4]
 801bb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb48:	681b      	ldr	r3, [r3, #0]
 801bb4a:	891b      	ldrh	r3, [r3, #8]
 801bb4c:	4619      	mov	r1, r3
 801bb4e:	4610      	mov	r0, r2
 801bb50:	f7fb fa70 	bl	8017034 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801bb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	891c      	ldrh	r4, [r3, #8]
 801bb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb5c:	681b      	ldr	r3, [r3, #0]
 801bb5e:	68db      	ldr	r3, [r3, #12]
 801bb60:	899b      	ldrh	r3, [r3, #12]
 801bb62:	b29b      	uxth	r3, r3
 801bb64:	4618      	mov	r0, r3
 801bb66:	f7f9 fff9 	bl	8015b5c <lwip_htons>
 801bb6a:	4603      	mov	r3, r0
 801bb6c:	b2db      	uxtb	r3, r3
 801bb6e:	f003 0303 	and.w	r3, r3, #3
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d001      	beq.n	801bb7a <tcp_receive+0xe6e>
 801bb76:	2301      	movs	r3, #1
 801bb78:	e000      	b.n	801bb7c <tcp_receive+0xe70>
 801bb7a:	2300      	movs	r3, #0
 801bb7c:	4423      	add	r3, r4
 801bb7e:	b29a      	uxth	r2, r3
 801bb80:	4b2a      	ldr	r3, [pc, #168]	; (801bc2c <tcp_receive+0xf20>)
 801bb82:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801bb84:	4b29      	ldr	r3, [pc, #164]	; (801bc2c <tcp_receive+0xf20>)
 801bb86:	881b      	ldrh	r3, [r3, #0]
 801bb88:	461a      	mov	r2, r3
 801bb8a:	4b26      	ldr	r3, [pc, #152]	; (801bc24 <tcp_receive+0xf18>)
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	441a      	add	r2, r3
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb94:	6879      	ldr	r1, [r7, #4]
 801bb96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bb98:	440b      	add	r3, r1
 801bb9a:	429a      	cmp	r2, r3
 801bb9c:	d019      	beq.n	801bbd2 <tcp_receive+0xec6>
 801bb9e:	4b24      	ldr	r3, [pc, #144]	; (801bc30 <tcp_receive+0xf24>)
 801bba0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801bba4:	4923      	ldr	r1, [pc, #140]	; (801bc34 <tcp_receive+0xf28>)
 801bba6:	4824      	ldr	r0, [pc, #144]	; (801bc38 <tcp_receive+0xf2c>)
 801bba8:	f006 fe02 	bl	80227b0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801bbac:	e011      	b.n	801bbd2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801bbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	63bb      	str	r3, [r7, #56]	; 0x38
 801bbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	f47f aea4 	bne.w	801b904 <tcp_receive+0xbf8>
 801bbbc:	e00a      	b.n	801bbd4 <tcp_receive+0xec8>
                break;
 801bbbe:	bf00      	nop
 801bbc0:	e008      	b.n	801bbd4 <tcp_receive+0xec8>
                break;
 801bbc2:	bf00      	nop
 801bbc4:	e006      	b.n	801bbd4 <tcp_receive+0xec8>
                  break;
 801bbc6:	bf00      	nop
 801bbc8:	e004      	b.n	801bbd4 <tcp_receive+0xec8>
                  break;
 801bbca:	bf00      	nop
 801bbcc:	e002      	b.n	801bbd4 <tcp_receive+0xec8>
                  break;
 801bbce:	bf00      	nop
 801bbd0:	e000      	b.n	801bbd4 <tcp_receive+0xec8>
                break;
 801bbd2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801bbd4:	6878      	ldr	r0, [r7, #4]
 801bbd6:	f001 fe8b 	bl	801d8f0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801bbda:	e003      	b.n	801bbe4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801bbdc:	6878      	ldr	r0, [r7, #4]
 801bbde:	f001 fe87 	bl	801d8f0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801bbe2:	e01a      	b.n	801bc1a <tcp_receive+0xf0e>
 801bbe4:	e019      	b.n	801bc1a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801bbe6:	4b0f      	ldr	r3, [pc, #60]	; (801bc24 <tcp_receive+0xf18>)
 801bbe8:	681a      	ldr	r2, [r3, #0]
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbee:	1ad3      	subs	r3, r2, r3
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	db0a      	blt.n	801bc0a <tcp_receive+0xefe>
 801bbf4:	4b0b      	ldr	r3, [pc, #44]	; (801bc24 <tcp_receive+0xf18>)
 801bbf6:	681a      	ldr	r2, [r3, #0]
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbfc:	6879      	ldr	r1, [r7, #4]
 801bbfe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bc00:	440b      	add	r3, r1
 801bc02:	1ad3      	subs	r3, r2, r3
 801bc04:	3301      	adds	r3, #1
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	dd07      	ble.n	801bc1a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	8b5b      	ldrh	r3, [r3, #26]
 801bc0e:	f043 0302 	orr.w	r3, r3, #2
 801bc12:	b29a      	uxth	r2, r3
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801bc18:	e7ff      	b.n	801bc1a <tcp_receive+0xf0e>
 801bc1a:	bf00      	nop
 801bc1c:	3750      	adds	r7, #80	; 0x50
 801bc1e:	46bd      	mov	sp, r7
 801bc20:	bdb0      	pop	{r4, r5, r7, pc}
 801bc22:	bf00      	nop
 801bc24:	2000bfec 	.word	0x2000bfec
 801bc28:	2000bfcc 	.word	0x2000bfcc
 801bc2c:	2000bff6 	.word	0x2000bff6
 801bc30:	08025a64 	.word	0x08025a64
 801bc34:	08025e0c 	.word	0x08025e0c
 801bc38:	08025ab0 	.word	0x08025ab0

0801bc3c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801bc3c:	b480      	push	{r7}
 801bc3e:	b083      	sub	sp, #12
 801bc40:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801bc42:	4b15      	ldr	r3, [pc, #84]	; (801bc98 <tcp_get_next_optbyte+0x5c>)
 801bc44:	881b      	ldrh	r3, [r3, #0]
 801bc46:	1c5a      	adds	r2, r3, #1
 801bc48:	b291      	uxth	r1, r2
 801bc4a:	4a13      	ldr	r2, [pc, #76]	; (801bc98 <tcp_get_next_optbyte+0x5c>)
 801bc4c:	8011      	strh	r1, [r2, #0]
 801bc4e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801bc50:	4b12      	ldr	r3, [pc, #72]	; (801bc9c <tcp_get_next_optbyte+0x60>)
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d004      	beq.n	801bc62 <tcp_get_next_optbyte+0x26>
 801bc58:	4b11      	ldr	r3, [pc, #68]	; (801bca0 <tcp_get_next_optbyte+0x64>)
 801bc5a:	881b      	ldrh	r3, [r3, #0]
 801bc5c:	88fa      	ldrh	r2, [r7, #6]
 801bc5e:	429a      	cmp	r2, r3
 801bc60:	d208      	bcs.n	801bc74 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801bc62:	4b10      	ldr	r3, [pc, #64]	; (801bca4 <tcp_get_next_optbyte+0x68>)
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	3314      	adds	r3, #20
 801bc68:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801bc6a:	88fb      	ldrh	r3, [r7, #6]
 801bc6c:	683a      	ldr	r2, [r7, #0]
 801bc6e:	4413      	add	r3, r2
 801bc70:	781b      	ldrb	r3, [r3, #0]
 801bc72:	e00b      	b.n	801bc8c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801bc74:	88fb      	ldrh	r3, [r7, #6]
 801bc76:	b2da      	uxtb	r2, r3
 801bc78:	4b09      	ldr	r3, [pc, #36]	; (801bca0 <tcp_get_next_optbyte+0x64>)
 801bc7a:	881b      	ldrh	r3, [r3, #0]
 801bc7c:	b2db      	uxtb	r3, r3
 801bc7e:	1ad3      	subs	r3, r2, r3
 801bc80:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801bc82:	4b06      	ldr	r3, [pc, #24]	; (801bc9c <tcp_get_next_optbyte+0x60>)
 801bc84:	681a      	ldr	r2, [r3, #0]
 801bc86:	797b      	ldrb	r3, [r7, #5]
 801bc88:	4413      	add	r3, r2
 801bc8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801bc8c:	4618      	mov	r0, r3
 801bc8e:	370c      	adds	r7, #12
 801bc90:	46bd      	mov	sp, r7
 801bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc96:	4770      	bx	lr
 801bc98:	2000bfe8 	.word	0x2000bfe8
 801bc9c:	2000bfe4 	.word	0x2000bfe4
 801bca0:	2000bfe2 	.word	0x2000bfe2
 801bca4:	2000bfdc 	.word	0x2000bfdc

0801bca8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801bca8:	b580      	push	{r7, lr}
 801bcaa:	b084      	sub	sp, #16
 801bcac:	af00      	add	r7, sp, #0
 801bcae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d106      	bne.n	801bcc4 <tcp_parseopt+0x1c>
 801bcb6:	4b32      	ldr	r3, [pc, #200]	; (801bd80 <tcp_parseopt+0xd8>)
 801bcb8:	f240 727d 	movw	r2, #1917	; 0x77d
 801bcbc:	4931      	ldr	r1, [pc, #196]	; (801bd84 <tcp_parseopt+0xdc>)
 801bcbe:	4832      	ldr	r0, [pc, #200]	; (801bd88 <tcp_parseopt+0xe0>)
 801bcc0:	f006 fd76 	bl	80227b0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801bcc4:	4b31      	ldr	r3, [pc, #196]	; (801bd8c <tcp_parseopt+0xe4>)
 801bcc6:	881b      	ldrh	r3, [r3, #0]
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d055      	beq.n	801bd78 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801bccc:	4b30      	ldr	r3, [pc, #192]	; (801bd90 <tcp_parseopt+0xe8>)
 801bcce:	2200      	movs	r2, #0
 801bcd0:	801a      	strh	r2, [r3, #0]
 801bcd2:	e045      	b.n	801bd60 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801bcd4:	f7ff ffb2 	bl	801bc3c <tcp_get_next_optbyte>
 801bcd8:	4603      	mov	r3, r0
 801bcda:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801bcdc:	7bfb      	ldrb	r3, [r7, #15]
 801bcde:	2b02      	cmp	r3, #2
 801bce0:	d006      	beq.n	801bcf0 <tcp_parseopt+0x48>
 801bce2:	2b02      	cmp	r3, #2
 801bce4:	dc2b      	bgt.n	801bd3e <tcp_parseopt+0x96>
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d041      	beq.n	801bd6e <tcp_parseopt+0xc6>
 801bcea:	2b01      	cmp	r3, #1
 801bcec:	d127      	bne.n	801bd3e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801bcee:	e037      	b.n	801bd60 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801bcf0:	f7ff ffa4 	bl	801bc3c <tcp_get_next_optbyte>
 801bcf4:	4603      	mov	r3, r0
 801bcf6:	2b04      	cmp	r3, #4
 801bcf8:	d13b      	bne.n	801bd72 <tcp_parseopt+0xca>
 801bcfa:	4b25      	ldr	r3, [pc, #148]	; (801bd90 <tcp_parseopt+0xe8>)
 801bcfc:	881b      	ldrh	r3, [r3, #0]
 801bcfe:	3301      	adds	r3, #1
 801bd00:	4a22      	ldr	r2, [pc, #136]	; (801bd8c <tcp_parseopt+0xe4>)
 801bd02:	8812      	ldrh	r2, [r2, #0]
 801bd04:	4293      	cmp	r3, r2
 801bd06:	da34      	bge.n	801bd72 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801bd08:	f7ff ff98 	bl	801bc3c <tcp_get_next_optbyte>
 801bd0c:	4603      	mov	r3, r0
 801bd0e:	b29b      	uxth	r3, r3
 801bd10:	021b      	lsls	r3, r3, #8
 801bd12:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801bd14:	f7ff ff92 	bl	801bc3c <tcp_get_next_optbyte>
 801bd18:	4603      	mov	r3, r0
 801bd1a:	b29a      	uxth	r2, r3
 801bd1c:	89bb      	ldrh	r3, [r7, #12]
 801bd1e:	4313      	orrs	r3, r2
 801bd20:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801bd22:	89bb      	ldrh	r3, [r7, #12]
 801bd24:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801bd28:	d804      	bhi.n	801bd34 <tcp_parseopt+0x8c>
 801bd2a:	89bb      	ldrh	r3, [r7, #12]
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d001      	beq.n	801bd34 <tcp_parseopt+0x8c>
 801bd30:	89ba      	ldrh	r2, [r7, #12]
 801bd32:	e001      	b.n	801bd38 <tcp_parseopt+0x90>
 801bd34:	f44f 7206 	mov.w	r2, #536	; 0x218
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801bd3c:	e010      	b.n	801bd60 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801bd3e:	f7ff ff7d 	bl	801bc3c <tcp_get_next_optbyte>
 801bd42:	4603      	mov	r3, r0
 801bd44:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801bd46:	7afb      	ldrb	r3, [r7, #11]
 801bd48:	2b01      	cmp	r3, #1
 801bd4a:	d914      	bls.n	801bd76 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801bd4c:	7afb      	ldrb	r3, [r7, #11]
 801bd4e:	b29a      	uxth	r2, r3
 801bd50:	4b0f      	ldr	r3, [pc, #60]	; (801bd90 <tcp_parseopt+0xe8>)
 801bd52:	881b      	ldrh	r3, [r3, #0]
 801bd54:	4413      	add	r3, r2
 801bd56:	b29b      	uxth	r3, r3
 801bd58:	3b02      	subs	r3, #2
 801bd5a:	b29a      	uxth	r2, r3
 801bd5c:	4b0c      	ldr	r3, [pc, #48]	; (801bd90 <tcp_parseopt+0xe8>)
 801bd5e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801bd60:	4b0b      	ldr	r3, [pc, #44]	; (801bd90 <tcp_parseopt+0xe8>)
 801bd62:	881a      	ldrh	r2, [r3, #0]
 801bd64:	4b09      	ldr	r3, [pc, #36]	; (801bd8c <tcp_parseopt+0xe4>)
 801bd66:	881b      	ldrh	r3, [r3, #0]
 801bd68:	429a      	cmp	r2, r3
 801bd6a:	d3b3      	bcc.n	801bcd4 <tcp_parseopt+0x2c>
 801bd6c:	e004      	b.n	801bd78 <tcp_parseopt+0xd0>
          return;
 801bd6e:	bf00      	nop
 801bd70:	e002      	b.n	801bd78 <tcp_parseopt+0xd0>
            return;
 801bd72:	bf00      	nop
 801bd74:	e000      	b.n	801bd78 <tcp_parseopt+0xd0>
            return;
 801bd76:	bf00      	nop
      }
    }
  }
}
 801bd78:	3710      	adds	r7, #16
 801bd7a:	46bd      	mov	sp, r7
 801bd7c:	bd80      	pop	{r7, pc}
 801bd7e:	bf00      	nop
 801bd80:	08025a64 	.word	0x08025a64
 801bd84:	08025ec8 	.word	0x08025ec8
 801bd88:	08025ab0 	.word	0x08025ab0
 801bd8c:	2000bfe0 	.word	0x2000bfe0
 801bd90:	2000bfe8 	.word	0x2000bfe8

0801bd94 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801bd94:	b480      	push	{r7}
 801bd96:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801bd98:	4b05      	ldr	r3, [pc, #20]	; (801bdb0 <tcp_trigger_input_pcb_close+0x1c>)
 801bd9a:	781b      	ldrb	r3, [r3, #0]
 801bd9c:	f043 0310 	orr.w	r3, r3, #16
 801bda0:	b2da      	uxtb	r2, r3
 801bda2:	4b03      	ldr	r3, [pc, #12]	; (801bdb0 <tcp_trigger_input_pcb_close+0x1c>)
 801bda4:	701a      	strb	r2, [r3, #0]
}
 801bda6:	bf00      	nop
 801bda8:	46bd      	mov	sp, r7
 801bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdae:	4770      	bx	lr
 801bdb0:	2000bff9 	.word	0x2000bff9

0801bdb4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b084      	sub	sp, #16
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	60f8      	str	r0, [r7, #12]
 801bdbc:	60b9      	str	r1, [r7, #8]
 801bdbe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801bdc0:	68fb      	ldr	r3, [r7, #12]
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d00a      	beq.n	801bddc <tcp_route+0x28>
 801bdc6:	68fb      	ldr	r3, [r7, #12]
 801bdc8:	7a1b      	ldrb	r3, [r3, #8]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d006      	beq.n	801bddc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801bdce:	68fb      	ldr	r3, [r7, #12]
 801bdd0:	7a1b      	ldrb	r3, [r3, #8]
 801bdd2:	4618      	mov	r0, r3
 801bdd4:	f7fa ff26 	bl	8016c24 <netif_get_by_index>
 801bdd8:	4603      	mov	r3, r0
 801bdda:	e003      	b.n	801bde4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801bddc:	6878      	ldr	r0, [r7, #4]
 801bdde:	f003 fea3 	bl	801fb28 <ip4_route>
 801bde2:	4603      	mov	r3, r0
  }
}
 801bde4:	4618      	mov	r0, r3
 801bde6:	3710      	adds	r7, #16
 801bde8:	46bd      	mov	sp, r7
 801bdea:	bd80      	pop	{r7, pc}

0801bdec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801bdec:	b590      	push	{r4, r7, lr}
 801bdee:	b087      	sub	sp, #28
 801bdf0:	af00      	add	r7, sp, #0
 801bdf2:	60f8      	str	r0, [r7, #12]
 801bdf4:	60b9      	str	r1, [r7, #8]
 801bdf6:	603b      	str	r3, [r7, #0]
 801bdf8:	4613      	mov	r3, r2
 801bdfa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801bdfc:	68fb      	ldr	r3, [r7, #12]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d105      	bne.n	801be0e <tcp_create_segment+0x22>
 801be02:	4b44      	ldr	r3, [pc, #272]	; (801bf14 <tcp_create_segment+0x128>)
 801be04:	22a3      	movs	r2, #163	; 0xa3
 801be06:	4944      	ldr	r1, [pc, #272]	; (801bf18 <tcp_create_segment+0x12c>)
 801be08:	4844      	ldr	r0, [pc, #272]	; (801bf1c <tcp_create_segment+0x130>)
 801be0a:	f006 fcd1 	bl	80227b0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801be0e:	68bb      	ldr	r3, [r7, #8]
 801be10:	2b00      	cmp	r3, #0
 801be12:	d105      	bne.n	801be20 <tcp_create_segment+0x34>
 801be14:	4b3f      	ldr	r3, [pc, #252]	; (801bf14 <tcp_create_segment+0x128>)
 801be16:	22a4      	movs	r2, #164	; 0xa4
 801be18:	4941      	ldr	r1, [pc, #260]	; (801bf20 <tcp_create_segment+0x134>)
 801be1a:	4840      	ldr	r0, [pc, #256]	; (801bf1c <tcp_create_segment+0x130>)
 801be1c:	f006 fcc8 	bl	80227b0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801be20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801be24:	009b      	lsls	r3, r3, #2
 801be26:	b2db      	uxtb	r3, r3
 801be28:	f003 0304 	and.w	r3, r3, #4
 801be2c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801be2e:	2003      	movs	r0, #3
 801be30:	f7fa fb6c 	bl	801650c <memp_malloc>
 801be34:	6138      	str	r0, [r7, #16]
 801be36:	693b      	ldr	r3, [r7, #16]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d104      	bne.n	801be46 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801be3c:	68b8      	ldr	r0, [r7, #8]
 801be3e:	f7fb fa7f 	bl	8017340 <pbuf_free>
    return NULL;
 801be42:	2300      	movs	r3, #0
 801be44:	e061      	b.n	801bf0a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801be46:	693b      	ldr	r3, [r7, #16]
 801be48:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801be4c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801be4e:	693b      	ldr	r3, [r7, #16]
 801be50:	2200      	movs	r2, #0
 801be52:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801be54:	693b      	ldr	r3, [r7, #16]
 801be56:	68ba      	ldr	r2, [r7, #8]
 801be58:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801be5a:	68bb      	ldr	r3, [r7, #8]
 801be5c:	891a      	ldrh	r2, [r3, #8]
 801be5e:	7dfb      	ldrb	r3, [r7, #23]
 801be60:	b29b      	uxth	r3, r3
 801be62:	429a      	cmp	r2, r3
 801be64:	d205      	bcs.n	801be72 <tcp_create_segment+0x86>
 801be66:	4b2b      	ldr	r3, [pc, #172]	; (801bf14 <tcp_create_segment+0x128>)
 801be68:	22b0      	movs	r2, #176	; 0xb0
 801be6a:	492e      	ldr	r1, [pc, #184]	; (801bf24 <tcp_create_segment+0x138>)
 801be6c:	482b      	ldr	r0, [pc, #172]	; (801bf1c <tcp_create_segment+0x130>)
 801be6e:	f006 fc9f 	bl	80227b0 <iprintf>
  seg->len = p->tot_len - optlen;
 801be72:	68bb      	ldr	r3, [r7, #8]
 801be74:	891a      	ldrh	r2, [r3, #8]
 801be76:	7dfb      	ldrb	r3, [r7, #23]
 801be78:	b29b      	uxth	r3, r3
 801be7a:	1ad3      	subs	r3, r2, r3
 801be7c:	b29a      	uxth	r2, r3
 801be7e:	693b      	ldr	r3, [r7, #16]
 801be80:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801be82:	2114      	movs	r1, #20
 801be84:	68b8      	ldr	r0, [r7, #8]
 801be86:	f7fb f9c5 	bl	8017214 <pbuf_add_header>
 801be8a:	4603      	mov	r3, r0
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	d004      	beq.n	801be9a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801be90:	6938      	ldr	r0, [r7, #16]
 801be92:	f7fd f800 	bl	8018e96 <tcp_seg_free>
    return NULL;
 801be96:	2300      	movs	r3, #0
 801be98:	e037      	b.n	801bf0a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801be9a:	693b      	ldr	r3, [r7, #16]
 801be9c:	685b      	ldr	r3, [r3, #4]
 801be9e:	685a      	ldr	r2, [r3, #4]
 801bea0:	693b      	ldr	r3, [r7, #16]
 801bea2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801bea4:	68fb      	ldr	r3, [r7, #12]
 801bea6:	8ada      	ldrh	r2, [r3, #22]
 801bea8:	693b      	ldr	r3, [r7, #16]
 801beaa:	68dc      	ldr	r4, [r3, #12]
 801beac:	4610      	mov	r0, r2
 801beae:	f7f9 fe55 	bl	8015b5c <lwip_htons>
 801beb2:	4603      	mov	r3, r0
 801beb4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	8b1a      	ldrh	r2, [r3, #24]
 801beba:	693b      	ldr	r3, [r7, #16]
 801bebc:	68dc      	ldr	r4, [r3, #12]
 801bebe:	4610      	mov	r0, r2
 801bec0:	f7f9 fe4c 	bl	8015b5c <lwip_htons>
 801bec4:	4603      	mov	r3, r0
 801bec6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801bec8:	693b      	ldr	r3, [r7, #16]
 801beca:	68dc      	ldr	r4, [r3, #12]
 801becc:	6838      	ldr	r0, [r7, #0]
 801bece:	f7f9 fe5a 	bl	8015b86 <lwip_htonl>
 801bed2:	4603      	mov	r3, r0
 801bed4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801bed6:	7dfb      	ldrb	r3, [r7, #23]
 801bed8:	089b      	lsrs	r3, r3, #2
 801beda:	b2db      	uxtb	r3, r3
 801bedc:	b29b      	uxth	r3, r3
 801bede:	3305      	adds	r3, #5
 801bee0:	b29b      	uxth	r3, r3
 801bee2:	031b      	lsls	r3, r3, #12
 801bee4:	b29a      	uxth	r2, r3
 801bee6:	79fb      	ldrb	r3, [r7, #7]
 801bee8:	b29b      	uxth	r3, r3
 801beea:	4313      	orrs	r3, r2
 801beec:	b29a      	uxth	r2, r3
 801beee:	693b      	ldr	r3, [r7, #16]
 801bef0:	68dc      	ldr	r4, [r3, #12]
 801bef2:	4610      	mov	r0, r2
 801bef4:	f7f9 fe32 	bl	8015b5c <lwip_htons>
 801bef8:	4603      	mov	r3, r0
 801befa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801befc:	693b      	ldr	r3, [r7, #16]
 801befe:	68db      	ldr	r3, [r3, #12]
 801bf00:	2200      	movs	r2, #0
 801bf02:	749a      	strb	r2, [r3, #18]
 801bf04:	2200      	movs	r2, #0
 801bf06:	74da      	strb	r2, [r3, #19]
  return seg;
 801bf08:	693b      	ldr	r3, [r7, #16]
}
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	371c      	adds	r7, #28
 801bf0e:	46bd      	mov	sp, r7
 801bf10:	bd90      	pop	{r4, r7, pc}
 801bf12:	bf00      	nop
 801bf14:	08025ee4 	.word	0x08025ee4
 801bf18:	08025f18 	.word	0x08025f18
 801bf1c:	08025f38 	.word	0x08025f38
 801bf20:	08025f60 	.word	0x08025f60
 801bf24:	08025f84 	.word	0x08025f84

0801bf28 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b086      	sub	sp, #24
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	607b      	str	r3, [r7, #4]
 801bf30:	4603      	mov	r3, r0
 801bf32:	73fb      	strb	r3, [r7, #15]
 801bf34:	460b      	mov	r3, r1
 801bf36:	81bb      	strh	r3, [r7, #12]
 801bf38:	4613      	mov	r3, r2
 801bf3a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801bf3c:	89bb      	ldrh	r3, [r7, #12]
 801bf3e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d105      	bne.n	801bf52 <tcp_pbuf_prealloc+0x2a>
 801bf46:	4b30      	ldr	r3, [pc, #192]	; (801c008 <tcp_pbuf_prealloc+0xe0>)
 801bf48:	22e8      	movs	r2, #232	; 0xe8
 801bf4a:	4930      	ldr	r1, [pc, #192]	; (801c00c <tcp_pbuf_prealloc+0xe4>)
 801bf4c:	4830      	ldr	r0, [pc, #192]	; (801c010 <tcp_pbuf_prealloc+0xe8>)
 801bf4e:	f006 fc2f 	bl	80227b0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801bf52:	6a3b      	ldr	r3, [r7, #32]
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d105      	bne.n	801bf64 <tcp_pbuf_prealloc+0x3c>
 801bf58:	4b2b      	ldr	r3, [pc, #172]	; (801c008 <tcp_pbuf_prealloc+0xe0>)
 801bf5a:	22e9      	movs	r2, #233	; 0xe9
 801bf5c:	492d      	ldr	r1, [pc, #180]	; (801c014 <tcp_pbuf_prealloc+0xec>)
 801bf5e:	482c      	ldr	r0, [pc, #176]	; (801c010 <tcp_pbuf_prealloc+0xe8>)
 801bf60:	f006 fc26 	bl	80227b0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801bf64:	89ba      	ldrh	r2, [r7, #12]
 801bf66:	897b      	ldrh	r3, [r7, #10]
 801bf68:	429a      	cmp	r2, r3
 801bf6a:	d221      	bcs.n	801bfb0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801bf6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801bf70:	f003 0302 	and.w	r3, r3, #2
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d111      	bne.n	801bf9c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801bf78:	6a3b      	ldr	r3, [r7, #32]
 801bf7a:	8b5b      	ldrh	r3, [r3, #26]
 801bf7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d115      	bne.n	801bfb0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801bf84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d007      	beq.n	801bf9c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801bf8c:	6a3b      	ldr	r3, [r7, #32]
 801bf8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d103      	bne.n	801bf9c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801bf94:	6a3b      	ldr	r3, [r7, #32]
 801bf96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d009      	beq.n	801bfb0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801bf9c:	89bb      	ldrh	r3, [r7, #12]
 801bf9e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801bfa2:	f023 0203 	bic.w	r2, r3, #3
 801bfa6:	897b      	ldrh	r3, [r7, #10]
 801bfa8:	4293      	cmp	r3, r2
 801bfaa:	bf28      	it	cs
 801bfac:	4613      	movcs	r3, r2
 801bfae:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801bfb0:	8af9      	ldrh	r1, [r7, #22]
 801bfb2:	7bfb      	ldrb	r3, [r7, #15]
 801bfb4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bfb8:	4618      	mov	r0, r3
 801bfba:	f7fa fedd 	bl	8016d78 <pbuf_alloc>
 801bfbe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bfc0:	693b      	ldr	r3, [r7, #16]
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d101      	bne.n	801bfca <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801bfc6:	2300      	movs	r3, #0
 801bfc8:	e019      	b.n	801bffe <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801bfca:	693b      	ldr	r3, [r7, #16]
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d006      	beq.n	801bfe0 <tcp_pbuf_prealloc+0xb8>
 801bfd2:	4b0d      	ldr	r3, [pc, #52]	; (801c008 <tcp_pbuf_prealloc+0xe0>)
 801bfd4:	f240 120b 	movw	r2, #267	; 0x10b
 801bfd8:	490f      	ldr	r1, [pc, #60]	; (801c018 <tcp_pbuf_prealloc+0xf0>)
 801bfda:	480d      	ldr	r0, [pc, #52]	; (801c010 <tcp_pbuf_prealloc+0xe8>)
 801bfdc:	f006 fbe8 	bl	80227b0 <iprintf>
  *oversize = p->len - length;
 801bfe0:	693b      	ldr	r3, [r7, #16]
 801bfe2:	895a      	ldrh	r2, [r3, #10]
 801bfe4:	89bb      	ldrh	r3, [r7, #12]
 801bfe6:	1ad3      	subs	r3, r2, r3
 801bfe8:	b29a      	uxth	r2, r3
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801bfee:	693b      	ldr	r3, [r7, #16]
 801bff0:	89ba      	ldrh	r2, [r7, #12]
 801bff2:	811a      	strh	r2, [r3, #8]
 801bff4:	693b      	ldr	r3, [r7, #16]
 801bff6:	891a      	ldrh	r2, [r3, #8]
 801bff8:	693b      	ldr	r3, [r7, #16]
 801bffa:	815a      	strh	r2, [r3, #10]
  return p;
 801bffc:	693b      	ldr	r3, [r7, #16]
}
 801bffe:	4618      	mov	r0, r3
 801c000:	3718      	adds	r7, #24
 801c002:	46bd      	mov	sp, r7
 801c004:	bd80      	pop	{r7, pc}
 801c006:	bf00      	nop
 801c008:	08025ee4 	.word	0x08025ee4
 801c00c:	08025f9c 	.word	0x08025f9c
 801c010:	08025f38 	.word	0x08025f38
 801c014:	08025fc0 	.word	0x08025fc0
 801c018:	08025fe0 	.word	0x08025fe0

0801c01c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801c01c:	b580      	push	{r7, lr}
 801c01e:	b082      	sub	sp, #8
 801c020:	af00      	add	r7, sp, #0
 801c022:	6078      	str	r0, [r7, #4]
 801c024:	460b      	mov	r3, r1
 801c026:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d106      	bne.n	801c03c <tcp_write_checks+0x20>
 801c02e:	4b33      	ldr	r3, [pc, #204]	; (801c0fc <tcp_write_checks+0xe0>)
 801c030:	f240 1233 	movw	r2, #307	; 0x133
 801c034:	4932      	ldr	r1, [pc, #200]	; (801c100 <tcp_write_checks+0xe4>)
 801c036:	4833      	ldr	r0, [pc, #204]	; (801c104 <tcp_write_checks+0xe8>)
 801c038:	f006 fbba 	bl	80227b0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	7d1b      	ldrb	r3, [r3, #20]
 801c040:	2b04      	cmp	r3, #4
 801c042:	d00e      	beq.n	801c062 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801c048:	2b07      	cmp	r3, #7
 801c04a:	d00a      	beq.n	801c062 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801c050:	2b02      	cmp	r3, #2
 801c052:	d006      	beq.n	801c062 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801c058:	2b03      	cmp	r3, #3
 801c05a:	d002      	beq.n	801c062 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801c05c:	f06f 030a 	mvn.w	r3, #10
 801c060:	e048      	b.n	801c0f4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801c062:	887b      	ldrh	r3, [r7, #2]
 801c064:	2b00      	cmp	r3, #0
 801c066:	d101      	bne.n	801c06c <tcp_write_checks+0x50>
    return ERR_OK;
 801c068:	2300      	movs	r3, #0
 801c06a:	e043      	b.n	801c0f4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801c072:	887a      	ldrh	r2, [r7, #2]
 801c074:	429a      	cmp	r2, r3
 801c076:	d909      	bls.n	801c08c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	8b5b      	ldrh	r3, [r3, #26]
 801c07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c080:	b29a      	uxth	r2, r3
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801c086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c08a:	e033      	b.n	801c0f4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c092:	2b08      	cmp	r3, #8
 801c094:	d909      	bls.n	801c0aa <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	8b5b      	ldrh	r3, [r3, #26]
 801c09a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c09e:	b29a      	uxth	r2, r3
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801c0a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c0a8:	e024      	b.n	801c0f4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d00f      	beq.n	801c0d4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d11a      	bne.n	801c0f2 <tcp_write_checks+0xd6>
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d116      	bne.n	801c0f2 <tcp_write_checks+0xd6>
 801c0c4:	4b0d      	ldr	r3, [pc, #52]	; (801c0fc <tcp_write_checks+0xe0>)
 801c0c6:	f240 1255 	movw	r2, #341	; 0x155
 801c0ca:	490f      	ldr	r1, [pc, #60]	; (801c108 <tcp_write_checks+0xec>)
 801c0cc:	480d      	ldr	r0, [pc, #52]	; (801c104 <tcp_write_checks+0xe8>)
 801c0ce:	f006 fb6f 	bl	80227b0 <iprintf>
 801c0d2:	e00e      	b.n	801c0f2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d103      	bne.n	801c0e4 <tcp_write_checks+0xc8>
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d006      	beq.n	801c0f2 <tcp_write_checks+0xd6>
 801c0e4:	4b05      	ldr	r3, [pc, #20]	; (801c0fc <tcp_write_checks+0xe0>)
 801c0e6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801c0ea:	4908      	ldr	r1, [pc, #32]	; (801c10c <tcp_write_checks+0xf0>)
 801c0ec:	4805      	ldr	r0, [pc, #20]	; (801c104 <tcp_write_checks+0xe8>)
 801c0ee:	f006 fb5f 	bl	80227b0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801c0f2:	2300      	movs	r3, #0
}
 801c0f4:	4618      	mov	r0, r3
 801c0f6:	3708      	adds	r7, #8
 801c0f8:	46bd      	mov	sp, r7
 801c0fa:	bd80      	pop	{r7, pc}
 801c0fc:	08025ee4 	.word	0x08025ee4
 801c100:	08025ff4 	.word	0x08025ff4
 801c104:	08025f38 	.word	0x08025f38
 801c108:	08026014 	.word	0x08026014
 801c10c:	08026050 	.word	0x08026050

0801c110 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801c110:	b590      	push	{r4, r7, lr}
 801c112:	b09b      	sub	sp, #108	; 0x6c
 801c114:	af04      	add	r7, sp, #16
 801c116:	60f8      	str	r0, [r7, #12]
 801c118:	60b9      	str	r1, [r7, #8]
 801c11a:	4611      	mov	r1, r2
 801c11c:	461a      	mov	r2, r3
 801c11e:	460b      	mov	r3, r1
 801c120:	80fb      	strh	r3, [r7, #6]
 801c122:	4613      	mov	r3, r2
 801c124:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801c126:	2300      	movs	r3, #0
 801c128:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801c12a:	2300      	movs	r3, #0
 801c12c:	653b      	str	r3, [r7, #80]	; 0x50
 801c12e:	2300      	movs	r3, #0
 801c130:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c132:	2300      	movs	r3, #0
 801c134:	64bb      	str	r3, [r7, #72]	; 0x48
 801c136:	2300      	movs	r3, #0
 801c138:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801c13a:	2300      	movs	r3, #0
 801c13c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801c140:	2300      	movs	r3, #0
 801c142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801c146:	2300      	movs	r3, #0
 801c148:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801c14a:	2300      	movs	r3, #0
 801c14c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801c14e:	2300      	movs	r3, #0
 801c150:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801c152:	68fb      	ldr	r3, [r7, #12]
 801c154:	2b00      	cmp	r3, #0
 801c156:	d109      	bne.n	801c16c <tcp_write+0x5c>
 801c158:	4ba4      	ldr	r3, [pc, #656]	; (801c3ec <tcp_write+0x2dc>)
 801c15a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801c15e:	49a4      	ldr	r1, [pc, #656]	; (801c3f0 <tcp_write+0x2e0>)
 801c160:	48a4      	ldr	r0, [pc, #656]	; (801c3f4 <tcp_write+0x2e4>)
 801c162:	f006 fb25 	bl	80227b0 <iprintf>
 801c166:	f06f 030f 	mvn.w	r3, #15
 801c16a:	e32a      	b.n	801c7c2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801c16c:	68fb      	ldr	r3, [r7, #12]
 801c16e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801c172:	085b      	lsrs	r3, r3, #1
 801c174:	b29a      	uxth	r2, r3
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c17a:	4293      	cmp	r3, r2
 801c17c:	bf28      	it	cs
 801c17e:	4613      	movcs	r3, r2
 801c180:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801c182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c184:	2b00      	cmp	r3, #0
 801c186:	d102      	bne.n	801c18e <tcp_write+0x7e>
 801c188:	68fb      	ldr	r3, [r7, #12]
 801c18a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c18c:	e000      	b.n	801c190 <tcp_write+0x80>
 801c18e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c190:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801c192:	68bb      	ldr	r3, [r7, #8]
 801c194:	2b00      	cmp	r3, #0
 801c196:	d109      	bne.n	801c1ac <tcp_write+0x9c>
 801c198:	4b94      	ldr	r3, [pc, #592]	; (801c3ec <tcp_write+0x2dc>)
 801c19a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801c19e:	4996      	ldr	r1, [pc, #600]	; (801c3f8 <tcp_write+0x2e8>)
 801c1a0:	4894      	ldr	r0, [pc, #592]	; (801c3f4 <tcp_write+0x2e4>)
 801c1a2:	f006 fb05 	bl	80227b0 <iprintf>
 801c1a6:	f06f 030f 	mvn.w	r3, #15
 801c1aa:	e30a      	b.n	801c7c2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801c1ac:	88fb      	ldrh	r3, [r7, #6]
 801c1ae:	4619      	mov	r1, r3
 801c1b0:	68f8      	ldr	r0, [r7, #12]
 801c1b2:	f7ff ff33 	bl	801c01c <tcp_write_checks>
 801c1b6:	4603      	mov	r3, r0
 801c1b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801c1bc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	d002      	beq.n	801c1ca <tcp_write+0xba>
    return err;
 801c1c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801c1c8:	e2fb      	b.n	801c7c2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801c1ca:	68fb      	ldr	r3, [r7, #12]
 801c1cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c1d0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c1d4:	2300      	movs	r3, #0
 801c1d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801c1da:	68fb      	ldr	r3, [r7, #12]
 801c1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	f000 80f6 	beq.w	801c3d0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c1e8:	653b      	str	r3, [r7, #80]	; 0x50
 801c1ea:	e002      	b.n	801c1f2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801c1ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c1ee:	681b      	ldr	r3, [r3, #0]
 801c1f0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c1f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d1f8      	bne.n	801c1ec <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801c1fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c1fc:	7a9b      	ldrb	r3, [r3, #10]
 801c1fe:	009b      	lsls	r3, r3, #2
 801c200:	b29b      	uxth	r3, r3
 801c202:	f003 0304 	and.w	r3, r3, #4
 801c206:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801c208:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c20c:	891b      	ldrh	r3, [r3, #8]
 801c20e:	4619      	mov	r1, r3
 801c210:	8c3b      	ldrh	r3, [r7, #32]
 801c212:	440b      	add	r3, r1
 801c214:	429a      	cmp	r2, r3
 801c216:	da06      	bge.n	801c226 <tcp_write+0x116>
 801c218:	4b74      	ldr	r3, [pc, #464]	; (801c3ec <tcp_write+0x2dc>)
 801c21a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801c21e:	4977      	ldr	r1, [pc, #476]	; (801c3fc <tcp_write+0x2ec>)
 801c220:	4874      	ldr	r0, [pc, #464]	; (801c3f4 <tcp_write+0x2e4>)
 801c222:	f006 fac5 	bl	80227b0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801c226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c228:	891a      	ldrh	r2, [r3, #8]
 801c22a:	8c3b      	ldrh	r3, [r7, #32]
 801c22c:	4413      	add	r3, r2
 801c22e:	b29b      	uxth	r3, r3
 801c230:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c232:	1ad3      	subs	r3, r2, r3
 801c234:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801c236:	68fb      	ldr	r3, [r7, #12]
 801c238:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c23c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801c23e:	8a7b      	ldrh	r3, [r7, #18]
 801c240:	2b00      	cmp	r3, #0
 801c242:	d026      	beq.n	801c292 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801c244:	8a7b      	ldrh	r3, [r7, #18]
 801c246:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c248:	429a      	cmp	r2, r3
 801c24a:	d206      	bcs.n	801c25a <tcp_write+0x14a>
 801c24c:	4b67      	ldr	r3, [pc, #412]	; (801c3ec <tcp_write+0x2dc>)
 801c24e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801c252:	496b      	ldr	r1, [pc, #428]	; (801c400 <tcp_write+0x2f0>)
 801c254:	4867      	ldr	r0, [pc, #412]	; (801c3f4 <tcp_write+0x2e4>)
 801c256:	f006 faab 	bl	80227b0 <iprintf>
      seg = last_unsent;
 801c25a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c25c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801c25e:	8a7b      	ldrh	r3, [r7, #18]
 801c260:	88fa      	ldrh	r2, [r7, #6]
 801c262:	4293      	cmp	r3, r2
 801c264:	bf28      	it	cs
 801c266:	4613      	movcs	r3, r2
 801c268:	b29b      	uxth	r3, r3
 801c26a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c26c:	4293      	cmp	r3, r2
 801c26e:	bf28      	it	cs
 801c270:	4613      	movcs	r3, r2
 801c272:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801c274:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c278:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c27a:	4413      	add	r3, r2
 801c27c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801c280:	8a7a      	ldrh	r2, [r7, #18]
 801c282:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c284:	1ad3      	subs	r3, r2, r3
 801c286:	b29b      	uxth	r3, r3
 801c288:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801c28a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c28c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c28e:	1ad3      	subs	r3, r2, r3
 801c290:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801c292:	8a7b      	ldrh	r3, [r7, #18]
 801c294:	2b00      	cmp	r3, #0
 801c296:	d00b      	beq.n	801c2b0 <tcp_write+0x1a0>
 801c298:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c29c:	88fb      	ldrh	r3, [r7, #6]
 801c29e:	429a      	cmp	r2, r3
 801c2a0:	d006      	beq.n	801c2b0 <tcp_write+0x1a0>
 801c2a2:	4b52      	ldr	r3, [pc, #328]	; (801c3ec <tcp_write+0x2dc>)
 801c2a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c2a8:	4956      	ldr	r1, [pc, #344]	; (801c404 <tcp_write+0x2f4>)
 801c2aa:	4852      	ldr	r0, [pc, #328]	; (801c3f4 <tcp_write+0x2e4>)
 801c2ac:	f006 fa80 	bl	80227b0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801c2b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c2b4:	88fb      	ldrh	r3, [r7, #6]
 801c2b6:	429a      	cmp	r2, r3
 801c2b8:	f080 8167 	bcs.w	801c58a <tcp_write+0x47a>
 801c2bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	f000 8163 	beq.w	801c58a <tcp_write+0x47a>
 801c2c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c2c6:	891b      	ldrh	r3, [r3, #8]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	f000 815e 	beq.w	801c58a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801c2ce:	88fa      	ldrh	r2, [r7, #6]
 801c2d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c2d4:	1ad2      	subs	r2, r2, r3
 801c2d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c2d8:	4293      	cmp	r3, r2
 801c2da:	bfa8      	it	ge
 801c2dc:	4613      	movge	r3, r2
 801c2de:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801c2e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c2e2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801c2e4:	797b      	ldrb	r3, [r7, #5]
 801c2e6:	f003 0301 	and.w	r3, r3, #1
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d027      	beq.n	801c33e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801c2ee:	f107 0012 	add.w	r0, r7, #18
 801c2f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c2f4:	8bf9      	ldrh	r1, [r7, #30]
 801c2f6:	2301      	movs	r3, #1
 801c2f8:	9302      	str	r3, [sp, #8]
 801c2fa:	797b      	ldrb	r3, [r7, #5]
 801c2fc:	9301      	str	r3, [sp, #4]
 801c2fe:	68fb      	ldr	r3, [r7, #12]
 801c300:	9300      	str	r3, [sp, #0]
 801c302:	4603      	mov	r3, r0
 801c304:	2000      	movs	r0, #0
 801c306:	f7ff fe0f 	bl	801bf28 <tcp_pbuf_prealloc>
 801c30a:	6578      	str	r0, [r7, #84]	; 0x54
 801c30c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c30e:	2b00      	cmp	r3, #0
 801c310:	f000 8225 	beq.w	801c75e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801c314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c316:	6858      	ldr	r0, [r3, #4]
 801c318:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c31c:	68ba      	ldr	r2, [r7, #8]
 801c31e:	4413      	add	r3, r2
 801c320:	8bfa      	ldrh	r2, [r7, #30]
 801c322:	4619      	mov	r1, r3
 801c324:	f006 f934 	bl	8022590 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801c328:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801c32a:	f7fb f897 	bl	801745c <pbuf_clen>
 801c32e:	4603      	mov	r3, r0
 801c330:	461a      	mov	r2, r3
 801c332:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c336:	4413      	add	r3, r2
 801c338:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801c33c:	e041      	b.n	801c3c2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801c33e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c340:	685b      	ldr	r3, [r3, #4]
 801c342:	637b      	str	r3, [r7, #52]	; 0x34
 801c344:	e002      	b.n	801c34c <tcp_write+0x23c>
 801c346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	637b      	str	r3, [r7, #52]	; 0x34
 801c34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c34e:	681b      	ldr	r3, [r3, #0]
 801c350:	2b00      	cmp	r3, #0
 801c352:	d1f8      	bne.n	801c346 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801c354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c356:	7b1b      	ldrb	r3, [r3, #12]
 801c358:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d115      	bne.n	801c38c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801c360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c362:	685b      	ldr	r3, [r3, #4]
 801c364:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c366:	8952      	ldrh	r2, [r2, #10]
 801c368:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801c36a:	68ba      	ldr	r2, [r7, #8]
 801c36c:	429a      	cmp	r2, r3
 801c36e:	d10d      	bne.n	801c38c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801c370:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c374:	2b00      	cmp	r3, #0
 801c376:	d006      	beq.n	801c386 <tcp_write+0x276>
 801c378:	4b1c      	ldr	r3, [pc, #112]	; (801c3ec <tcp_write+0x2dc>)
 801c37a:	f240 2231 	movw	r2, #561	; 0x231
 801c37e:	4922      	ldr	r1, [pc, #136]	; (801c408 <tcp_write+0x2f8>)
 801c380:	481c      	ldr	r0, [pc, #112]	; (801c3f4 <tcp_write+0x2e4>)
 801c382:	f006 fa15 	bl	80227b0 <iprintf>
          extendlen = seglen;
 801c386:	8bfb      	ldrh	r3, [r7, #30]
 801c388:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801c38a:	e01a      	b.n	801c3c2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801c38c:	8bfb      	ldrh	r3, [r7, #30]
 801c38e:	2201      	movs	r2, #1
 801c390:	4619      	mov	r1, r3
 801c392:	2000      	movs	r0, #0
 801c394:	f7fa fcf0 	bl	8016d78 <pbuf_alloc>
 801c398:	6578      	str	r0, [r7, #84]	; 0x54
 801c39a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	f000 81e0 	beq.w	801c762 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801c3a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c3a6:	68ba      	ldr	r2, [r7, #8]
 801c3a8:	441a      	add	r2, r3
 801c3aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c3ac:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801c3ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801c3b0:	f7fb f854 	bl	801745c <pbuf_clen>
 801c3b4:	4603      	mov	r3, r0
 801c3b6:	461a      	mov	r2, r3
 801c3b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c3bc:	4413      	add	r3, r2
 801c3be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801c3c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c3c6:	8bfb      	ldrh	r3, [r7, #30]
 801c3c8:	4413      	add	r3, r2
 801c3ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801c3ce:	e0dc      	b.n	801c58a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	f000 80d7 	beq.w	801c58a <tcp_write+0x47a>
 801c3dc:	4b03      	ldr	r3, [pc, #12]	; (801c3ec <tcp_write+0x2dc>)
 801c3de:	f240 224a 	movw	r2, #586	; 0x24a
 801c3e2:	490a      	ldr	r1, [pc, #40]	; (801c40c <tcp_write+0x2fc>)
 801c3e4:	4803      	ldr	r0, [pc, #12]	; (801c3f4 <tcp_write+0x2e4>)
 801c3e6:	f006 f9e3 	bl	80227b0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801c3ea:	e0ce      	b.n	801c58a <tcp_write+0x47a>
 801c3ec:	08025ee4 	.word	0x08025ee4
 801c3f0:	08026084 	.word	0x08026084
 801c3f4:	08025f38 	.word	0x08025f38
 801c3f8:	0802609c 	.word	0x0802609c
 801c3fc:	080260d0 	.word	0x080260d0
 801c400:	080260e8 	.word	0x080260e8
 801c404:	08026108 	.word	0x08026108
 801c408:	08026128 	.word	0x08026128
 801c40c:	08026154 	.word	0x08026154
    struct pbuf *p;
    u16_t left = len - pos;
 801c410:	88fa      	ldrh	r2, [r7, #6]
 801c412:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c416:	1ad3      	subs	r3, r2, r3
 801c418:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801c41a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c41e:	b29b      	uxth	r3, r3
 801c420:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c422:	1ad3      	subs	r3, r2, r3
 801c424:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801c426:	8b7a      	ldrh	r2, [r7, #26]
 801c428:	8bbb      	ldrh	r3, [r7, #28]
 801c42a:	4293      	cmp	r3, r2
 801c42c:	bf28      	it	cs
 801c42e:	4613      	movcs	r3, r2
 801c430:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801c432:	797b      	ldrb	r3, [r7, #5]
 801c434:	f003 0301 	and.w	r3, r3, #1
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d036      	beq.n	801c4aa <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801c43c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c440:	b29a      	uxth	r2, r3
 801c442:	8b3b      	ldrh	r3, [r7, #24]
 801c444:	4413      	add	r3, r2
 801c446:	b299      	uxth	r1, r3
 801c448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	bf0c      	ite	eq
 801c44e:	2301      	moveq	r3, #1
 801c450:	2300      	movne	r3, #0
 801c452:	b2db      	uxtb	r3, r3
 801c454:	f107 0012 	add.w	r0, r7, #18
 801c458:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c45a:	9302      	str	r3, [sp, #8]
 801c45c:	797b      	ldrb	r3, [r7, #5]
 801c45e:	9301      	str	r3, [sp, #4]
 801c460:	68fb      	ldr	r3, [r7, #12]
 801c462:	9300      	str	r3, [sp, #0]
 801c464:	4603      	mov	r3, r0
 801c466:	2036      	movs	r0, #54	; 0x36
 801c468:	f7ff fd5e 	bl	801bf28 <tcp_pbuf_prealloc>
 801c46c:	6338      	str	r0, [r7, #48]	; 0x30
 801c46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c470:	2b00      	cmp	r3, #0
 801c472:	f000 8178 	beq.w	801c766 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801c476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c478:	895b      	ldrh	r3, [r3, #10]
 801c47a:	8b3a      	ldrh	r2, [r7, #24]
 801c47c:	429a      	cmp	r2, r3
 801c47e:	d906      	bls.n	801c48e <tcp_write+0x37e>
 801c480:	4b8c      	ldr	r3, [pc, #560]	; (801c6b4 <tcp_write+0x5a4>)
 801c482:	f240 2266 	movw	r2, #614	; 0x266
 801c486:	498c      	ldr	r1, [pc, #560]	; (801c6b8 <tcp_write+0x5a8>)
 801c488:	488c      	ldr	r0, [pc, #560]	; (801c6bc <tcp_write+0x5ac>)
 801c48a:	f006 f991 	bl	80227b0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c490:	685a      	ldr	r2, [r3, #4]
 801c492:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c496:	18d0      	adds	r0, r2, r3
 801c498:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c49c:	68ba      	ldr	r2, [r7, #8]
 801c49e:	4413      	add	r3, r2
 801c4a0:	8b3a      	ldrh	r2, [r7, #24]
 801c4a2:	4619      	mov	r1, r3
 801c4a4:	f006 f874 	bl	8022590 <memcpy>
 801c4a8:	e02f      	b.n	801c50a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801c4aa:	8a7b      	ldrh	r3, [r7, #18]
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d006      	beq.n	801c4be <tcp_write+0x3ae>
 801c4b0:	4b80      	ldr	r3, [pc, #512]	; (801c6b4 <tcp_write+0x5a4>)
 801c4b2:	f240 2271 	movw	r2, #625	; 0x271
 801c4b6:	4982      	ldr	r1, [pc, #520]	; (801c6c0 <tcp_write+0x5b0>)
 801c4b8:	4880      	ldr	r0, [pc, #512]	; (801c6bc <tcp_write+0x5ac>)
 801c4ba:	f006 f979 	bl	80227b0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801c4be:	8b3b      	ldrh	r3, [r7, #24]
 801c4c0:	2201      	movs	r2, #1
 801c4c2:	4619      	mov	r1, r3
 801c4c4:	2036      	movs	r0, #54	; 0x36
 801c4c6:	f7fa fc57 	bl	8016d78 <pbuf_alloc>
 801c4ca:	6178      	str	r0, [r7, #20]
 801c4cc:	697b      	ldr	r3, [r7, #20]
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	f000 814b 	beq.w	801c76a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801c4d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c4d8:	68ba      	ldr	r2, [r7, #8]
 801c4da:	441a      	add	r2, r3
 801c4dc:	697b      	ldr	r3, [r7, #20]
 801c4de:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801c4e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c4e4:	b29b      	uxth	r3, r3
 801c4e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c4ea:	4619      	mov	r1, r3
 801c4ec:	2036      	movs	r0, #54	; 0x36
 801c4ee:	f7fa fc43 	bl	8016d78 <pbuf_alloc>
 801c4f2:	6338      	str	r0, [r7, #48]	; 0x30
 801c4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d103      	bne.n	801c502 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801c4fa:	6978      	ldr	r0, [r7, #20]
 801c4fc:	f7fa ff20 	bl	8017340 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801c500:	e136      	b.n	801c770 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801c502:	6979      	ldr	r1, [r7, #20]
 801c504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c506:	f7fa ffe9 	bl	80174dc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801c50a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c50c:	f7fa ffa6 	bl	801745c <pbuf_clen>
 801c510:	4603      	mov	r3, r0
 801c512:	461a      	mov	r2, r3
 801c514:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c518:	4413      	add	r3, r2
 801c51a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801c51e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c522:	2b09      	cmp	r3, #9
 801c524:	d903      	bls.n	801c52e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801c526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c528:	f7fa ff0a 	bl	8017340 <pbuf_free>
      goto memerr;
 801c52c:	e120      	b.n	801c770 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801c532:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c536:	441a      	add	r2, r3
 801c538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c53c:	9300      	str	r3, [sp, #0]
 801c53e:	4613      	mov	r3, r2
 801c540:	2200      	movs	r2, #0
 801c542:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c544:	68f8      	ldr	r0, [r7, #12]
 801c546:	f7ff fc51 	bl	801bdec <tcp_create_segment>
 801c54a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c54c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c54e:	2b00      	cmp	r3, #0
 801c550:	f000 810d 	beq.w	801c76e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801c554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c556:	2b00      	cmp	r3, #0
 801c558:	d102      	bne.n	801c560 <tcp_write+0x450>
      queue = seg;
 801c55a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c55c:	647b      	str	r3, [r7, #68]	; 0x44
 801c55e:	e00c      	b.n	801c57a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801c560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c562:	2b00      	cmp	r3, #0
 801c564:	d106      	bne.n	801c574 <tcp_write+0x464>
 801c566:	4b53      	ldr	r3, [pc, #332]	; (801c6b4 <tcp_write+0x5a4>)
 801c568:	f240 22ab 	movw	r2, #683	; 0x2ab
 801c56c:	4955      	ldr	r1, [pc, #340]	; (801c6c4 <tcp_write+0x5b4>)
 801c56e:	4853      	ldr	r0, [pc, #332]	; (801c6bc <tcp_write+0x5ac>)
 801c570:	f006 f91e 	bl	80227b0 <iprintf>
      prev_seg->next = seg;
 801c574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c578:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801c57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c57c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801c57e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c582:	8b3b      	ldrh	r3, [r7, #24]
 801c584:	4413      	add	r3, r2
 801c586:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801c58a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c58e:	88fb      	ldrh	r3, [r7, #6]
 801c590:	429a      	cmp	r2, r3
 801c592:	f4ff af3d 	bcc.w	801c410 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801c596:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d02c      	beq.n	801c5f6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801c59c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c59e:	685b      	ldr	r3, [r3, #4]
 801c5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c5a2:	e01e      	b.n	801c5e2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801c5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5a6:	891a      	ldrh	r2, [r3, #8]
 801c5a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c5aa:	4413      	add	r3, r2
 801c5ac:	b29a      	uxth	r2, r3
 801c5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5b0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801c5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d110      	bne.n	801c5dc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801c5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5bc:	685b      	ldr	r3, [r3, #4]
 801c5be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c5c0:	8952      	ldrh	r2, [r2, #10]
 801c5c2:	4413      	add	r3, r2
 801c5c4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c5c6:	68b9      	ldr	r1, [r7, #8]
 801c5c8:	4618      	mov	r0, r3
 801c5ca:	f005 ffe1 	bl	8022590 <memcpy>
        p->len += oversize_used;
 801c5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5d0:	895a      	ldrh	r2, [r3, #10]
 801c5d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c5d4:	4413      	add	r3, r2
 801c5d6:	b29a      	uxth	r2, r3
 801c5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5da:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801c5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d1dd      	bne.n	801c5a4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801c5e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c5ea:	891a      	ldrh	r2, [r3, #8]
 801c5ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c5ee:	4413      	add	r3, r2
 801c5f0:	b29a      	uxth	r2, r3
 801c5f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c5f4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801c5f6:	8a7a      	ldrh	r2, [r7, #18]
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801c5fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c600:	2b00      	cmp	r3, #0
 801c602:	d018      	beq.n	801c636 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801c604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c606:	2b00      	cmp	r3, #0
 801c608:	d106      	bne.n	801c618 <tcp_write+0x508>
 801c60a:	4b2a      	ldr	r3, [pc, #168]	; (801c6b4 <tcp_write+0x5a4>)
 801c60c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801c610:	492d      	ldr	r1, [pc, #180]	; (801c6c8 <tcp_write+0x5b8>)
 801c612:	482a      	ldr	r0, [pc, #168]	; (801c6bc <tcp_write+0x5ac>)
 801c614:	f006 f8cc 	bl	80227b0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801c618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c61a:	685b      	ldr	r3, [r3, #4]
 801c61c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c61e:	4618      	mov	r0, r3
 801c620:	f7fa ff5c 	bl	80174dc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801c624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c626:	891a      	ldrh	r2, [r3, #8]
 801c628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c62a:	891b      	ldrh	r3, [r3, #8]
 801c62c:	4413      	add	r3, r2
 801c62e:	b29a      	uxth	r2, r3
 801c630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c632:	811a      	strh	r2, [r3, #8]
 801c634:	e037      	b.n	801c6a6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801c636:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d034      	beq.n	801c6a6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801c63c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d003      	beq.n	801c64a <tcp_write+0x53a>
 801c642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c644:	685b      	ldr	r3, [r3, #4]
 801c646:	2b00      	cmp	r3, #0
 801c648:	d106      	bne.n	801c658 <tcp_write+0x548>
 801c64a:	4b1a      	ldr	r3, [pc, #104]	; (801c6b4 <tcp_write+0x5a4>)
 801c64c:	f240 22e6 	movw	r2, #742	; 0x2e6
 801c650:	491e      	ldr	r1, [pc, #120]	; (801c6cc <tcp_write+0x5bc>)
 801c652:	481a      	ldr	r0, [pc, #104]	; (801c6bc <tcp_write+0x5ac>)
 801c654:	f006 f8ac 	bl	80227b0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801c658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c65a:	685b      	ldr	r3, [r3, #4]
 801c65c:	62bb      	str	r3, [r7, #40]	; 0x28
 801c65e:	e009      	b.n	801c674 <tcp_write+0x564>
      p->tot_len += extendlen;
 801c660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c662:	891a      	ldrh	r2, [r3, #8]
 801c664:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c666:	4413      	add	r3, r2
 801c668:	b29a      	uxth	r2, r3
 801c66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c66c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801c66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c670:	681b      	ldr	r3, [r3, #0]
 801c672:	62bb      	str	r3, [r7, #40]	; 0x28
 801c674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c676:	681b      	ldr	r3, [r3, #0]
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d1f1      	bne.n	801c660 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801c67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c67e:	891a      	ldrh	r2, [r3, #8]
 801c680:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c682:	4413      	add	r3, r2
 801c684:	b29a      	uxth	r2, r3
 801c686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c688:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801c68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c68c:	895a      	ldrh	r2, [r3, #10]
 801c68e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c690:	4413      	add	r3, r2
 801c692:	b29a      	uxth	r2, r3
 801c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c696:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801c698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c69a:	891a      	ldrh	r2, [r3, #8]
 801c69c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c69e:	4413      	add	r3, r2
 801c6a0:	b29a      	uxth	r2, r3
 801c6a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6a4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801c6a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d111      	bne.n	801c6d0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c6b0:	66da      	str	r2, [r3, #108]	; 0x6c
 801c6b2:	e010      	b.n	801c6d6 <tcp_write+0x5c6>
 801c6b4:	08025ee4 	.word	0x08025ee4
 801c6b8:	08026184 	.word	0x08026184
 801c6bc:	08025f38 	.word	0x08025f38
 801c6c0:	080261c4 	.word	0x080261c4
 801c6c4:	080261d4 	.word	0x080261d4
 801c6c8:	080261e8 	.word	0x080261e8
 801c6cc:	08026220 	.word	0x08026220
  } else {
    last_unsent->next = queue;
 801c6d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c6d4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801c6d6:	68fb      	ldr	r3, [r7, #12]
 801c6d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801c6da:	88fb      	ldrh	r3, [r7, #6]
 801c6dc:	441a      	add	r2, r3
 801c6de:	68fb      	ldr	r3, [r7, #12]
 801c6e0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801c6e2:	68fb      	ldr	r3, [r7, #12]
 801c6e4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801c6e8:	88fb      	ldrh	r3, [r7, #6]
 801c6ea:	1ad3      	subs	r3, r2, r3
 801c6ec:	b29a      	uxth	r2, r3
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801c6f4:	68fb      	ldr	r3, [r7, #12]
 801c6f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801c6fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801c6fe:	68fb      	ldr	r3, [r7, #12]
 801c700:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c704:	2b00      	cmp	r3, #0
 801c706:	d00e      	beq.n	801c726 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801c708:	68fb      	ldr	r3, [r7, #12]
 801c70a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d10a      	bne.n	801c726 <tcp_write+0x616>
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c714:	2b00      	cmp	r3, #0
 801c716:	d106      	bne.n	801c726 <tcp_write+0x616>
 801c718:	4b2c      	ldr	r3, [pc, #176]	; (801c7cc <tcp_write+0x6bc>)
 801c71a:	f240 3212 	movw	r2, #786	; 0x312
 801c71e:	492c      	ldr	r1, [pc, #176]	; (801c7d0 <tcp_write+0x6c0>)
 801c720:	482c      	ldr	r0, [pc, #176]	; (801c7d4 <tcp_write+0x6c4>)
 801c722:	f006 f845 	bl	80227b0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801c726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d016      	beq.n	801c75a <tcp_write+0x64a>
 801c72c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c72e:	68db      	ldr	r3, [r3, #12]
 801c730:	2b00      	cmp	r3, #0
 801c732:	d012      	beq.n	801c75a <tcp_write+0x64a>
 801c734:	797b      	ldrb	r3, [r7, #5]
 801c736:	f003 0302 	and.w	r3, r3, #2
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	d10d      	bne.n	801c75a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801c73e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c740:	68db      	ldr	r3, [r3, #12]
 801c742:	899b      	ldrh	r3, [r3, #12]
 801c744:	b29c      	uxth	r4, r3
 801c746:	2008      	movs	r0, #8
 801c748:	f7f9 fa08 	bl	8015b5c <lwip_htons>
 801c74c:	4603      	mov	r3, r0
 801c74e:	461a      	mov	r2, r3
 801c750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c752:	68db      	ldr	r3, [r3, #12]
 801c754:	4322      	orrs	r2, r4
 801c756:	b292      	uxth	r2, r2
 801c758:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801c75a:	2300      	movs	r3, #0
 801c75c:	e031      	b.n	801c7c2 <tcp_write+0x6b2>
          goto memerr;
 801c75e:	bf00      	nop
 801c760:	e006      	b.n	801c770 <tcp_write+0x660>
            goto memerr;
 801c762:	bf00      	nop
 801c764:	e004      	b.n	801c770 <tcp_write+0x660>
        goto memerr;
 801c766:	bf00      	nop
 801c768:	e002      	b.n	801c770 <tcp_write+0x660>
        goto memerr;
 801c76a:	bf00      	nop
 801c76c:	e000      	b.n	801c770 <tcp_write+0x660>
      goto memerr;
 801c76e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	8b5b      	ldrh	r3, [r3, #26]
 801c774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c778:	b29a      	uxth	r2, r3
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801c77e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c780:	2b00      	cmp	r3, #0
 801c782:	d002      	beq.n	801c78a <tcp_write+0x67a>
    pbuf_free(concat_p);
 801c784:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801c786:	f7fa fddb 	bl	8017340 <pbuf_free>
  }
  if (queue != NULL) {
 801c78a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d002      	beq.n	801c796 <tcp_write+0x686>
    tcp_segs_free(queue);
 801c790:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801c792:	f7fc fb6b 	bl	8018e6c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d00e      	beq.n	801c7be <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d10a      	bne.n	801c7be <tcp_write+0x6ae>
 801c7a8:	68fb      	ldr	r3, [r7, #12]
 801c7aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	d106      	bne.n	801c7be <tcp_write+0x6ae>
 801c7b0:	4b06      	ldr	r3, [pc, #24]	; (801c7cc <tcp_write+0x6bc>)
 801c7b2:	f240 3227 	movw	r2, #807	; 0x327
 801c7b6:	4906      	ldr	r1, [pc, #24]	; (801c7d0 <tcp_write+0x6c0>)
 801c7b8:	4806      	ldr	r0, [pc, #24]	; (801c7d4 <tcp_write+0x6c4>)
 801c7ba:	f005 fff9 	bl	80227b0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801c7be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801c7c2:	4618      	mov	r0, r3
 801c7c4:	375c      	adds	r7, #92	; 0x5c
 801c7c6:	46bd      	mov	sp, r7
 801c7c8:	bd90      	pop	{r4, r7, pc}
 801c7ca:	bf00      	nop
 801c7cc:	08025ee4 	.word	0x08025ee4
 801c7d0:	08026258 	.word	0x08026258
 801c7d4:	08025f38 	.word	0x08025f38

0801c7d8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801c7d8:	b590      	push	{r4, r7, lr}
 801c7da:	b08b      	sub	sp, #44	; 0x2c
 801c7dc:	af02      	add	r7, sp, #8
 801c7de:	6078      	str	r0, [r7, #4]
 801c7e0:	460b      	mov	r3, r1
 801c7e2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801c7e4:	2300      	movs	r3, #0
 801c7e6:	61fb      	str	r3, [r7, #28]
 801c7e8:	2300      	movs	r3, #0
 801c7ea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801c7ec:	2300      	movs	r3, #0
 801c7ee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d106      	bne.n	801c804 <tcp_split_unsent_seg+0x2c>
 801c7f6:	4b95      	ldr	r3, [pc, #596]	; (801ca4c <tcp_split_unsent_seg+0x274>)
 801c7f8:	f240 324b 	movw	r2, #843	; 0x34b
 801c7fc:	4994      	ldr	r1, [pc, #592]	; (801ca50 <tcp_split_unsent_seg+0x278>)
 801c7fe:	4895      	ldr	r0, [pc, #596]	; (801ca54 <tcp_split_unsent_seg+0x27c>)
 801c800:	f005 ffd6 	bl	80227b0 <iprintf>

  useg = pcb->unsent;
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c808:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801c80a:	697b      	ldr	r3, [r7, #20]
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d102      	bne.n	801c816 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801c810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c814:	e116      	b.n	801ca44 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801c816:	887b      	ldrh	r3, [r7, #2]
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d109      	bne.n	801c830 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801c81c:	4b8b      	ldr	r3, [pc, #556]	; (801ca4c <tcp_split_unsent_seg+0x274>)
 801c81e:	f240 3253 	movw	r2, #851	; 0x353
 801c822:	498d      	ldr	r1, [pc, #564]	; (801ca58 <tcp_split_unsent_seg+0x280>)
 801c824:	488b      	ldr	r0, [pc, #556]	; (801ca54 <tcp_split_unsent_seg+0x27c>)
 801c826:	f005 ffc3 	bl	80227b0 <iprintf>
    return ERR_VAL;
 801c82a:	f06f 0305 	mvn.w	r3, #5
 801c82e:	e109      	b.n	801ca44 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801c830:	697b      	ldr	r3, [r7, #20]
 801c832:	891b      	ldrh	r3, [r3, #8]
 801c834:	887a      	ldrh	r2, [r7, #2]
 801c836:	429a      	cmp	r2, r3
 801c838:	d301      	bcc.n	801c83e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801c83a:	2300      	movs	r3, #0
 801c83c:	e102      	b.n	801ca44 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c842:	887a      	ldrh	r2, [r7, #2]
 801c844:	429a      	cmp	r2, r3
 801c846:	d906      	bls.n	801c856 <tcp_split_unsent_seg+0x7e>
 801c848:	4b80      	ldr	r3, [pc, #512]	; (801ca4c <tcp_split_unsent_seg+0x274>)
 801c84a:	f240 325b 	movw	r2, #859	; 0x35b
 801c84e:	4983      	ldr	r1, [pc, #524]	; (801ca5c <tcp_split_unsent_seg+0x284>)
 801c850:	4880      	ldr	r0, [pc, #512]	; (801ca54 <tcp_split_unsent_seg+0x27c>)
 801c852:	f005 ffad 	bl	80227b0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801c856:	697b      	ldr	r3, [r7, #20]
 801c858:	891b      	ldrh	r3, [r3, #8]
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	d106      	bne.n	801c86c <tcp_split_unsent_seg+0x94>
 801c85e:	4b7b      	ldr	r3, [pc, #492]	; (801ca4c <tcp_split_unsent_seg+0x274>)
 801c860:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801c864:	497e      	ldr	r1, [pc, #504]	; (801ca60 <tcp_split_unsent_seg+0x288>)
 801c866:	487b      	ldr	r0, [pc, #492]	; (801ca54 <tcp_split_unsent_seg+0x27c>)
 801c868:	f005 ffa2 	bl	80227b0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801c86c:	697b      	ldr	r3, [r7, #20]
 801c86e:	7a9b      	ldrb	r3, [r3, #10]
 801c870:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801c872:	7bfb      	ldrb	r3, [r7, #15]
 801c874:	009b      	lsls	r3, r3, #2
 801c876:	b2db      	uxtb	r3, r3
 801c878:	f003 0304 	and.w	r3, r3, #4
 801c87c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801c87e:	697b      	ldr	r3, [r7, #20]
 801c880:	891a      	ldrh	r2, [r3, #8]
 801c882:	887b      	ldrh	r3, [r7, #2]
 801c884:	1ad3      	subs	r3, r2, r3
 801c886:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801c888:	7bbb      	ldrb	r3, [r7, #14]
 801c88a:	b29a      	uxth	r2, r3
 801c88c:	89bb      	ldrh	r3, [r7, #12]
 801c88e:	4413      	add	r3, r2
 801c890:	b29b      	uxth	r3, r3
 801c892:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c896:	4619      	mov	r1, r3
 801c898:	2036      	movs	r0, #54	; 0x36
 801c89a:	f7fa fa6d 	bl	8016d78 <pbuf_alloc>
 801c89e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c8a0:	693b      	ldr	r3, [r7, #16]
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	f000 80b7 	beq.w	801ca16 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801c8a8:	697b      	ldr	r3, [r7, #20]
 801c8aa:	685b      	ldr	r3, [r3, #4]
 801c8ac:	891a      	ldrh	r2, [r3, #8]
 801c8ae:	697b      	ldr	r3, [r7, #20]
 801c8b0:	891b      	ldrh	r3, [r3, #8]
 801c8b2:	1ad3      	subs	r3, r2, r3
 801c8b4:	b29a      	uxth	r2, r3
 801c8b6:	887b      	ldrh	r3, [r7, #2]
 801c8b8:	4413      	add	r3, r2
 801c8ba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801c8bc:	697b      	ldr	r3, [r7, #20]
 801c8be:	6858      	ldr	r0, [r3, #4]
 801c8c0:	693b      	ldr	r3, [r7, #16]
 801c8c2:	685a      	ldr	r2, [r3, #4]
 801c8c4:	7bbb      	ldrb	r3, [r7, #14]
 801c8c6:	18d1      	adds	r1, r2, r3
 801c8c8:	897b      	ldrh	r3, [r7, #10]
 801c8ca:	89ba      	ldrh	r2, [r7, #12]
 801c8cc:	f7fa ff3e 	bl	801774c <pbuf_copy_partial>
 801c8d0:	4603      	mov	r3, r0
 801c8d2:	461a      	mov	r2, r3
 801c8d4:	89bb      	ldrh	r3, [r7, #12]
 801c8d6:	4293      	cmp	r3, r2
 801c8d8:	f040 809f 	bne.w	801ca1a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801c8dc:	697b      	ldr	r3, [r7, #20]
 801c8de:	68db      	ldr	r3, [r3, #12]
 801c8e0:	899b      	ldrh	r3, [r3, #12]
 801c8e2:	b29b      	uxth	r3, r3
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	f7f9 f939 	bl	8015b5c <lwip_htons>
 801c8ea:	4603      	mov	r3, r0
 801c8ec:	b2db      	uxtb	r3, r3
 801c8ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c8f2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801c8f4:	2300      	movs	r3, #0
 801c8f6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801c8f8:	7efb      	ldrb	r3, [r7, #27]
 801c8fa:	f003 0308 	and.w	r3, r3, #8
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d007      	beq.n	801c912 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801c902:	7efb      	ldrb	r3, [r7, #27]
 801c904:	f023 0308 	bic.w	r3, r3, #8
 801c908:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801c90a:	7ebb      	ldrb	r3, [r7, #26]
 801c90c:	f043 0308 	orr.w	r3, r3, #8
 801c910:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801c912:	7efb      	ldrb	r3, [r7, #27]
 801c914:	f003 0301 	and.w	r3, r3, #1
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d007      	beq.n	801c92c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801c91c:	7efb      	ldrb	r3, [r7, #27]
 801c91e:	f023 0301 	bic.w	r3, r3, #1
 801c922:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801c924:	7ebb      	ldrb	r3, [r7, #26]
 801c926:	f043 0301 	orr.w	r3, r3, #1
 801c92a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801c92c:	697b      	ldr	r3, [r7, #20]
 801c92e:	68db      	ldr	r3, [r3, #12]
 801c930:	685b      	ldr	r3, [r3, #4]
 801c932:	4618      	mov	r0, r3
 801c934:	f7f9 f927 	bl	8015b86 <lwip_htonl>
 801c938:	4602      	mov	r2, r0
 801c93a:	887b      	ldrh	r3, [r7, #2]
 801c93c:	18d1      	adds	r1, r2, r3
 801c93e:	7eba      	ldrb	r2, [r7, #26]
 801c940:	7bfb      	ldrb	r3, [r7, #15]
 801c942:	9300      	str	r3, [sp, #0]
 801c944:	460b      	mov	r3, r1
 801c946:	6939      	ldr	r1, [r7, #16]
 801c948:	6878      	ldr	r0, [r7, #4]
 801c94a:	f7ff fa4f 	bl	801bdec <tcp_create_segment>
 801c94e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801c950:	69fb      	ldr	r3, [r7, #28]
 801c952:	2b00      	cmp	r3, #0
 801c954:	d063      	beq.n	801ca1e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801c956:	697b      	ldr	r3, [r7, #20]
 801c958:	685b      	ldr	r3, [r3, #4]
 801c95a:	4618      	mov	r0, r3
 801c95c:	f7fa fd7e 	bl	801745c <pbuf_clen>
 801c960:	4603      	mov	r3, r0
 801c962:	461a      	mov	r2, r3
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c96a:	1a9b      	subs	r3, r3, r2
 801c96c:	b29a      	uxth	r2, r3
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801c974:	697b      	ldr	r3, [r7, #20]
 801c976:	6858      	ldr	r0, [r3, #4]
 801c978:	697b      	ldr	r3, [r7, #20]
 801c97a:	685b      	ldr	r3, [r3, #4]
 801c97c:	891a      	ldrh	r2, [r3, #8]
 801c97e:	89bb      	ldrh	r3, [r7, #12]
 801c980:	1ad3      	subs	r3, r2, r3
 801c982:	b29b      	uxth	r3, r3
 801c984:	4619      	mov	r1, r3
 801c986:	f7fa fb55 	bl	8017034 <pbuf_realloc>
  useg->len -= remainder;
 801c98a:	697b      	ldr	r3, [r7, #20]
 801c98c:	891a      	ldrh	r2, [r3, #8]
 801c98e:	89bb      	ldrh	r3, [r7, #12]
 801c990:	1ad3      	subs	r3, r2, r3
 801c992:	b29a      	uxth	r2, r3
 801c994:	697b      	ldr	r3, [r7, #20]
 801c996:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801c998:	697b      	ldr	r3, [r7, #20]
 801c99a:	68db      	ldr	r3, [r3, #12]
 801c99c:	899b      	ldrh	r3, [r3, #12]
 801c99e:	b29c      	uxth	r4, r3
 801c9a0:	7efb      	ldrb	r3, [r7, #27]
 801c9a2:	b29b      	uxth	r3, r3
 801c9a4:	4618      	mov	r0, r3
 801c9a6:	f7f9 f8d9 	bl	8015b5c <lwip_htons>
 801c9aa:	4603      	mov	r3, r0
 801c9ac:	461a      	mov	r2, r3
 801c9ae:	697b      	ldr	r3, [r7, #20]
 801c9b0:	68db      	ldr	r3, [r3, #12]
 801c9b2:	4322      	orrs	r2, r4
 801c9b4:	b292      	uxth	r2, r2
 801c9b6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801c9b8:	697b      	ldr	r3, [r7, #20]
 801c9ba:	685b      	ldr	r3, [r3, #4]
 801c9bc:	4618      	mov	r0, r3
 801c9be:	f7fa fd4d 	bl	801745c <pbuf_clen>
 801c9c2:	4603      	mov	r3, r0
 801c9c4:	461a      	mov	r2, r3
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c9cc:	4413      	add	r3, r2
 801c9ce:	b29a      	uxth	r2, r3
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801c9d6:	69fb      	ldr	r3, [r7, #28]
 801c9d8:	685b      	ldr	r3, [r3, #4]
 801c9da:	4618      	mov	r0, r3
 801c9dc:	f7fa fd3e 	bl	801745c <pbuf_clen>
 801c9e0:	4603      	mov	r3, r0
 801c9e2:	461a      	mov	r2, r3
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c9ea:	4413      	add	r3, r2
 801c9ec:	b29a      	uxth	r2, r3
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801c9f4:	697b      	ldr	r3, [r7, #20]
 801c9f6:	681a      	ldr	r2, [r3, #0]
 801c9f8:	69fb      	ldr	r3, [r7, #28]
 801c9fa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801c9fc:	697b      	ldr	r3, [r7, #20]
 801c9fe:	69fa      	ldr	r2, [r7, #28]
 801ca00:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801ca02:	69fb      	ldr	r3, [r7, #28]
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	d103      	bne.n	801ca12 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801ca0a:	687b      	ldr	r3, [r7, #4]
 801ca0c:	2200      	movs	r2, #0
 801ca0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801ca12:	2300      	movs	r3, #0
 801ca14:	e016      	b.n	801ca44 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801ca16:	bf00      	nop
 801ca18:	e002      	b.n	801ca20 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801ca1a:	bf00      	nop
 801ca1c:	e000      	b.n	801ca20 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801ca1e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801ca20:	69fb      	ldr	r3, [r7, #28]
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d006      	beq.n	801ca34 <tcp_split_unsent_seg+0x25c>
 801ca26:	4b09      	ldr	r3, [pc, #36]	; (801ca4c <tcp_split_unsent_seg+0x274>)
 801ca28:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801ca2c:	490d      	ldr	r1, [pc, #52]	; (801ca64 <tcp_split_unsent_seg+0x28c>)
 801ca2e:	4809      	ldr	r0, [pc, #36]	; (801ca54 <tcp_split_unsent_seg+0x27c>)
 801ca30:	f005 febe 	bl	80227b0 <iprintf>
  if (p != NULL) {
 801ca34:	693b      	ldr	r3, [r7, #16]
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d002      	beq.n	801ca40 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801ca3a:	6938      	ldr	r0, [r7, #16]
 801ca3c:	f7fa fc80 	bl	8017340 <pbuf_free>
  }

  return ERR_MEM;
 801ca40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801ca44:	4618      	mov	r0, r3
 801ca46:	3724      	adds	r7, #36	; 0x24
 801ca48:	46bd      	mov	sp, r7
 801ca4a:	bd90      	pop	{r4, r7, pc}
 801ca4c:	08025ee4 	.word	0x08025ee4
 801ca50:	08026278 	.word	0x08026278
 801ca54:	08025f38 	.word	0x08025f38
 801ca58:	0802629c 	.word	0x0802629c
 801ca5c:	080262c0 	.word	0x080262c0
 801ca60:	080262d0 	.word	0x080262d0
 801ca64:	080262e0 	.word	0x080262e0

0801ca68 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801ca68:	b590      	push	{r4, r7, lr}
 801ca6a:	b085      	sub	sp, #20
 801ca6c:	af00      	add	r7, sp, #0
 801ca6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d106      	bne.n	801ca84 <tcp_send_fin+0x1c>
 801ca76:	4b21      	ldr	r3, [pc, #132]	; (801cafc <tcp_send_fin+0x94>)
 801ca78:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801ca7c:	4920      	ldr	r1, [pc, #128]	; (801cb00 <tcp_send_fin+0x98>)
 801ca7e:	4821      	ldr	r0, [pc, #132]	; (801cb04 <tcp_send_fin+0x9c>)
 801ca80:	f005 fe96 	bl	80227b0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d02e      	beq.n	801caea <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ca90:	60fb      	str	r3, [r7, #12]
 801ca92:	e002      	b.n	801ca9a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	681b      	ldr	r3, [r3, #0]
 801ca98:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ca9a:	68fb      	ldr	r3, [r7, #12]
 801ca9c:	681b      	ldr	r3, [r3, #0]
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	d1f8      	bne.n	801ca94 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801caa2:	68fb      	ldr	r3, [r7, #12]
 801caa4:	68db      	ldr	r3, [r3, #12]
 801caa6:	899b      	ldrh	r3, [r3, #12]
 801caa8:	b29b      	uxth	r3, r3
 801caaa:	4618      	mov	r0, r3
 801caac:	f7f9 f856 	bl	8015b5c <lwip_htons>
 801cab0:	4603      	mov	r3, r0
 801cab2:	b2db      	uxtb	r3, r3
 801cab4:	f003 0307 	and.w	r3, r3, #7
 801cab8:	2b00      	cmp	r3, #0
 801caba:	d116      	bne.n	801caea <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801cabc:	68fb      	ldr	r3, [r7, #12]
 801cabe:	68db      	ldr	r3, [r3, #12]
 801cac0:	899b      	ldrh	r3, [r3, #12]
 801cac2:	b29c      	uxth	r4, r3
 801cac4:	2001      	movs	r0, #1
 801cac6:	f7f9 f849 	bl	8015b5c <lwip_htons>
 801caca:	4603      	mov	r3, r0
 801cacc:	461a      	mov	r2, r3
 801cace:	68fb      	ldr	r3, [r7, #12]
 801cad0:	68db      	ldr	r3, [r3, #12]
 801cad2:	4322      	orrs	r2, r4
 801cad4:	b292      	uxth	r2, r2
 801cad6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	8b5b      	ldrh	r3, [r3, #26]
 801cadc:	f043 0320 	orr.w	r3, r3, #32
 801cae0:	b29a      	uxth	r2, r3
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801cae6:	2300      	movs	r3, #0
 801cae8:	e004      	b.n	801caf4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801caea:	2101      	movs	r1, #1
 801caec:	6878      	ldr	r0, [r7, #4]
 801caee:	f000 f80b 	bl	801cb08 <tcp_enqueue_flags>
 801caf2:	4603      	mov	r3, r0
}
 801caf4:	4618      	mov	r0, r3
 801caf6:	3714      	adds	r7, #20
 801caf8:	46bd      	mov	sp, r7
 801cafa:	bd90      	pop	{r4, r7, pc}
 801cafc:	08025ee4 	.word	0x08025ee4
 801cb00:	080262ec 	.word	0x080262ec
 801cb04:	08025f38 	.word	0x08025f38

0801cb08 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801cb08:	b580      	push	{r7, lr}
 801cb0a:	b08a      	sub	sp, #40	; 0x28
 801cb0c:	af02      	add	r7, sp, #8
 801cb0e:	6078      	str	r0, [r7, #4]
 801cb10:	460b      	mov	r3, r1
 801cb12:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801cb14:	2300      	movs	r3, #0
 801cb16:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801cb18:	2300      	movs	r3, #0
 801cb1a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801cb1c:	78fb      	ldrb	r3, [r7, #3]
 801cb1e:	f003 0303 	and.w	r3, r3, #3
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d106      	bne.n	801cb34 <tcp_enqueue_flags+0x2c>
 801cb26:	4b67      	ldr	r3, [pc, #412]	; (801ccc4 <tcp_enqueue_flags+0x1bc>)
 801cb28:	f240 4211 	movw	r2, #1041	; 0x411
 801cb2c:	4966      	ldr	r1, [pc, #408]	; (801ccc8 <tcp_enqueue_flags+0x1c0>)
 801cb2e:	4867      	ldr	r0, [pc, #412]	; (801cccc <tcp_enqueue_flags+0x1c4>)
 801cb30:	f005 fe3e 	bl	80227b0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	d106      	bne.n	801cb48 <tcp_enqueue_flags+0x40>
 801cb3a:	4b62      	ldr	r3, [pc, #392]	; (801ccc4 <tcp_enqueue_flags+0x1bc>)
 801cb3c:	f240 4213 	movw	r2, #1043	; 0x413
 801cb40:	4963      	ldr	r1, [pc, #396]	; (801ccd0 <tcp_enqueue_flags+0x1c8>)
 801cb42:	4862      	ldr	r0, [pc, #392]	; (801cccc <tcp_enqueue_flags+0x1c4>)
 801cb44:	f005 fe34 	bl	80227b0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801cb48:	78fb      	ldrb	r3, [r7, #3]
 801cb4a:	f003 0302 	and.w	r3, r3, #2
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d001      	beq.n	801cb56 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801cb52:	2301      	movs	r3, #1
 801cb54:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801cb56:	7ffb      	ldrb	r3, [r7, #31]
 801cb58:	009b      	lsls	r3, r3, #2
 801cb5a:	b2db      	uxtb	r3, r3
 801cb5c:	f003 0304 	and.w	r3, r3, #4
 801cb60:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801cb62:	7dfb      	ldrb	r3, [r7, #23]
 801cb64:	b29b      	uxth	r3, r3
 801cb66:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cb6a:	4619      	mov	r1, r3
 801cb6c:	2036      	movs	r0, #54	; 0x36
 801cb6e:	f7fa f903 	bl	8016d78 <pbuf_alloc>
 801cb72:	6138      	str	r0, [r7, #16]
 801cb74:	693b      	ldr	r3, [r7, #16]
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d109      	bne.n	801cb8e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	8b5b      	ldrh	r3, [r3, #26]
 801cb7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cb82:	b29a      	uxth	r2, r3
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801cb88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb8c:	e095      	b.n	801ccba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801cb8e:	693b      	ldr	r3, [r7, #16]
 801cb90:	895a      	ldrh	r2, [r3, #10]
 801cb92:	7dfb      	ldrb	r3, [r7, #23]
 801cb94:	b29b      	uxth	r3, r3
 801cb96:	429a      	cmp	r2, r3
 801cb98:	d206      	bcs.n	801cba8 <tcp_enqueue_flags+0xa0>
 801cb9a:	4b4a      	ldr	r3, [pc, #296]	; (801ccc4 <tcp_enqueue_flags+0x1bc>)
 801cb9c:	f240 4239 	movw	r2, #1081	; 0x439
 801cba0:	494c      	ldr	r1, [pc, #304]	; (801ccd4 <tcp_enqueue_flags+0x1cc>)
 801cba2:	484a      	ldr	r0, [pc, #296]	; (801cccc <tcp_enqueue_flags+0x1c4>)
 801cba4:	f005 fe04 	bl	80227b0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801cbac:	78fa      	ldrb	r2, [r7, #3]
 801cbae:	7ffb      	ldrb	r3, [r7, #31]
 801cbb0:	9300      	str	r3, [sp, #0]
 801cbb2:	460b      	mov	r3, r1
 801cbb4:	6939      	ldr	r1, [r7, #16]
 801cbb6:	6878      	ldr	r0, [r7, #4]
 801cbb8:	f7ff f918 	bl	801bdec <tcp_create_segment>
 801cbbc:	60f8      	str	r0, [r7, #12]
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d109      	bne.n	801cbd8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	8b5b      	ldrh	r3, [r3, #26]
 801cbc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cbcc:	b29a      	uxth	r2, r3
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801cbd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cbd6:	e070      	b.n	801ccba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	68db      	ldr	r3, [r3, #12]
 801cbdc:	f003 0303 	and.w	r3, r3, #3
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	d006      	beq.n	801cbf2 <tcp_enqueue_flags+0xea>
 801cbe4:	4b37      	ldr	r3, [pc, #220]	; (801ccc4 <tcp_enqueue_flags+0x1bc>)
 801cbe6:	f240 4242 	movw	r2, #1090	; 0x442
 801cbea:	493b      	ldr	r1, [pc, #236]	; (801ccd8 <tcp_enqueue_flags+0x1d0>)
 801cbec:	4837      	ldr	r0, [pc, #220]	; (801cccc <tcp_enqueue_flags+0x1c4>)
 801cbee:	f005 fddf 	bl	80227b0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801cbf2:	68fb      	ldr	r3, [r7, #12]
 801cbf4:	891b      	ldrh	r3, [r3, #8]
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	d006      	beq.n	801cc08 <tcp_enqueue_flags+0x100>
 801cbfa:	4b32      	ldr	r3, [pc, #200]	; (801ccc4 <tcp_enqueue_flags+0x1bc>)
 801cbfc:	f240 4243 	movw	r2, #1091	; 0x443
 801cc00:	4936      	ldr	r1, [pc, #216]	; (801ccdc <tcp_enqueue_flags+0x1d4>)
 801cc02:	4832      	ldr	r0, [pc, #200]	; (801cccc <tcp_enqueue_flags+0x1c4>)
 801cc04:	f005 fdd4 	bl	80227b0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	d103      	bne.n	801cc18 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	68fa      	ldr	r2, [r7, #12]
 801cc14:	66da      	str	r2, [r3, #108]	; 0x6c
 801cc16:	e00d      	b.n	801cc34 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cc1c:	61bb      	str	r3, [r7, #24]
 801cc1e:	e002      	b.n	801cc26 <tcp_enqueue_flags+0x11e>
 801cc20:	69bb      	ldr	r3, [r7, #24]
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	61bb      	str	r3, [r7, #24]
 801cc26:	69bb      	ldr	r3, [r7, #24]
 801cc28:	681b      	ldr	r3, [r3, #0]
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	d1f8      	bne.n	801cc20 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801cc2e:	69bb      	ldr	r3, [r7, #24]
 801cc30:	68fa      	ldr	r2, [r7, #12]
 801cc32:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	2200      	movs	r2, #0
 801cc38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801cc3c:	78fb      	ldrb	r3, [r7, #3]
 801cc3e:	f003 0302 	and.w	r3, r3, #2
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	d104      	bne.n	801cc50 <tcp_enqueue_flags+0x148>
 801cc46:	78fb      	ldrb	r3, [r7, #3]
 801cc48:	f003 0301 	and.w	r3, r3, #1
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d004      	beq.n	801cc5a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cc54:	1c5a      	adds	r2, r3, #1
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801cc5a:	78fb      	ldrb	r3, [r7, #3]
 801cc5c:	f003 0301 	and.w	r3, r3, #1
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d006      	beq.n	801cc72 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	8b5b      	ldrh	r3, [r3, #26]
 801cc68:	f043 0320 	orr.w	r3, r3, #32
 801cc6c:	b29a      	uxth	r2, r3
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	685b      	ldr	r3, [r3, #4]
 801cc76:	4618      	mov	r0, r3
 801cc78:	f7fa fbf0 	bl	801745c <pbuf_clen>
 801cc7c:	4603      	mov	r3, r0
 801cc7e:	461a      	mov	r2, r3
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cc86:	4413      	add	r3, r2
 801cc88:	b29a      	uxth	r2, r3
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d00e      	beq.n	801ccb8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d10a      	bne.n	801ccb8 <tcp_enqueue_flags+0x1b0>
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cca6:	2b00      	cmp	r3, #0
 801cca8:	d106      	bne.n	801ccb8 <tcp_enqueue_flags+0x1b0>
 801ccaa:	4b06      	ldr	r3, [pc, #24]	; (801ccc4 <tcp_enqueue_flags+0x1bc>)
 801ccac:	f240 4265 	movw	r2, #1125	; 0x465
 801ccb0:	490b      	ldr	r1, [pc, #44]	; (801cce0 <tcp_enqueue_flags+0x1d8>)
 801ccb2:	4806      	ldr	r0, [pc, #24]	; (801cccc <tcp_enqueue_flags+0x1c4>)
 801ccb4:	f005 fd7c 	bl	80227b0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801ccb8:	2300      	movs	r3, #0
}
 801ccba:	4618      	mov	r0, r3
 801ccbc:	3720      	adds	r7, #32
 801ccbe:	46bd      	mov	sp, r7
 801ccc0:	bd80      	pop	{r7, pc}
 801ccc2:	bf00      	nop
 801ccc4:	08025ee4 	.word	0x08025ee4
 801ccc8:	08026308 	.word	0x08026308
 801cccc:	08025f38 	.word	0x08025f38
 801ccd0:	08026360 	.word	0x08026360
 801ccd4:	08026380 	.word	0x08026380
 801ccd8:	080263bc 	.word	0x080263bc
 801ccdc:	080263d4 	.word	0x080263d4
 801cce0:	08026400 	.word	0x08026400

0801cce4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801cce4:	b5b0      	push	{r4, r5, r7, lr}
 801cce6:	b08a      	sub	sp, #40	; 0x28
 801cce8:	af00      	add	r7, sp, #0
 801ccea:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d106      	bne.n	801cd00 <tcp_output+0x1c>
 801ccf2:	4b8a      	ldr	r3, [pc, #552]	; (801cf1c <tcp_output+0x238>)
 801ccf4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801ccf8:	4989      	ldr	r1, [pc, #548]	; (801cf20 <tcp_output+0x23c>)
 801ccfa:	488a      	ldr	r0, [pc, #552]	; (801cf24 <tcp_output+0x240>)
 801ccfc:	f005 fd58 	bl	80227b0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	7d1b      	ldrb	r3, [r3, #20]
 801cd04:	2b01      	cmp	r3, #1
 801cd06:	d106      	bne.n	801cd16 <tcp_output+0x32>
 801cd08:	4b84      	ldr	r3, [pc, #528]	; (801cf1c <tcp_output+0x238>)
 801cd0a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801cd0e:	4986      	ldr	r1, [pc, #536]	; (801cf28 <tcp_output+0x244>)
 801cd10:	4884      	ldr	r0, [pc, #528]	; (801cf24 <tcp_output+0x240>)
 801cd12:	f005 fd4d 	bl	80227b0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801cd16:	4b85      	ldr	r3, [pc, #532]	; (801cf2c <tcp_output+0x248>)
 801cd18:	681b      	ldr	r3, [r3, #0]
 801cd1a:	687a      	ldr	r2, [r7, #4]
 801cd1c:	429a      	cmp	r2, r3
 801cd1e:	d101      	bne.n	801cd24 <tcp_output+0x40>
    return ERR_OK;
 801cd20:	2300      	movs	r3, #0
 801cd22:	e1ce      	b.n	801d0c2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cd30:	4293      	cmp	r3, r2
 801cd32:	bf28      	it	cs
 801cd34:	4613      	movcs	r3, r2
 801cd36:	b29b      	uxth	r3, r3
 801cd38:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cd3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801cd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d10b      	bne.n	801cd5e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	8b5b      	ldrh	r3, [r3, #26]
 801cd4a:	f003 0302 	and.w	r3, r3, #2
 801cd4e:	2b00      	cmp	r3, #0
 801cd50:	f000 81aa 	beq.w	801d0a8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801cd54:	6878      	ldr	r0, [r7, #4]
 801cd56:	f000 fdcb 	bl	801d8f0 <tcp_send_empty_ack>
 801cd5a:	4603      	mov	r3, r0
 801cd5c:	e1b1      	b.n	801d0c2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801cd5e:	6879      	ldr	r1, [r7, #4]
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	3304      	adds	r3, #4
 801cd64:	461a      	mov	r2, r3
 801cd66:	6878      	ldr	r0, [r7, #4]
 801cd68:	f7ff f824 	bl	801bdb4 <tcp_route>
 801cd6c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801cd6e:	697b      	ldr	r3, [r7, #20]
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d102      	bne.n	801cd7a <tcp_output+0x96>
    return ERR_RTE;
 801cd74:	f06f 0303 	mvn.w	r3, #3
 801cd78:	e1a3      	b.n	801d0c2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	d003      	beq.n	801cd88 <tcp_output+0xa4>
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	681b      	ldr	r3, [r3, #0]
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	d111      	bne.n	801cdac <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801cd88:	697b      	ldr	r3, [r7, #20]
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d002      	beq.n	801cd94 <tcp_output+0xb0>
 801cd8e:	697b      	ldr	r3, [r7, #20]
 801cd90:	3304      	adds	r3, #4
 801cd92:	e000      	b.n	801cd96 <tcp_output+0xb2>
 801cd94:	2300      	movs	r3, #0
 801cd96:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801cd98:	693b      	ldr	r3, [r7, #16]
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d102      	bne.n	801cda4 <tcp_output+0xc0>
      return ERR_RTE;
 801cd9e:	f06f 0303 	mvn.w	r3, #3
 801cda2:	e18e      	b.n	801d0c2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801cda4:	693b      	ldr	r3, [r7, #16]
 801cda6:	681a      	ldr	r2, [r3, #0]
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801cdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdae:	68db      	ldr	r3, [r3, #12]
 801cdb0:	685b      	ldr	r3, [r3, #4]
 801cdb2:	4618      	mov	r0, r3
 801cdb4:	f7f8 fee7 	bl	8015b86 <lwip_htonl>
 801cdb8:	4602      	mov	r2, r0
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cdbe:	1ad3      	subs	r3, r2, r3
 801cdc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cdc2:	8912      	ldrh	r2, [r2, #8]
 801cdc4:	4413      	add	r3, r2
 801cdc6:	69ba      	ldr	r2, [r7, #24]
 801cdc8:	429a      	cmp	r2, r3
 801cdca:	d227      	bcs.n	801ce1c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cdd2:	461a      	mov	r2, r3
 801cdd4:	69bb      	ldr	r3, [r7, #24]
 801cdd6:	4293      	cmp	r3, r2
 801cdd8:	d114      	bne.n	801ce04 <tcp_output+0x120>
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	d110      	bne.n	801ce04 <tcp_output+0x120>
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	d10b      	bne.n	801ce04 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	2200      	movs	r2, #0
 801cdf0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	2201      	movs	r2, #1
 801cdf8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	2200      	movs	r2, #0
 801ce00:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	8b5b      	ldrh	r3, [r3, #26]
 801ce08:	f003 0302 	and.w	r3, r3, #2
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	f000 814d 	beq.w	801d0ac <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801ce12:	6878      	ldr	r0, [r7, #4]
 801ce14:	f000 fd6c 	bl	801d8f0 <tcp_send_empty_ack>
 801ce18:	4603      	mov	r3, r0
 801ce1a:	e152      	b.n	801d0c2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	2200      	movs	r2, #0
 801ce20:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ce28:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801ce2a:	6a3b      	ldr	r3, [r7, #32]
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	f000 811c 	beq.w	801d06a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801ce32:	e002      	b.n	801ce3a <tcp_output+0x156>
 801ce34:	6a3b      	ldr	r3, [r7, #32]
 801ce36:	681b      	ldr	r3, [r3, #0]
 801ce38:	623b      	str	r3, [r7, #32]
 801ce3a:	6a3b      	ldr	r3, [r7, #32]
 801ce3c:	681b      	ldr	r3, [r3, #0]
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d1f8      	bne.n	801ce34 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801ce42:	e112      	b.n	801d06a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801ce44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce46:	68db      	ldr	r3, [r3, #12]
 801ce48:	899b      	ldrh	r3, [r3, #12]
 801ce4a:	b29b      	uxth	r3, r3
 801ce4c:	4618      	mov	r0, r3
 801ce4e:	f7f8 fe85 	bl	8015b5c <lwip_htons>
 801ce52:	4603      	mov	r3, r0
 801ce54:	b2db      	uxtb	r3, r3
 801ce56:	f003 0304 	and.w	r3, r3, #4
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d006      	beq.n	801ce6c <tcp_output+0x188>
 801ce5e:	4b2f      	ldr	r3, [pc, #188]	; (801cf1c <tcp_output+0x238>)
 801ce60:	f240 5236 	movw	r2, #1334	; 0x536
 801ce64:	4932      	ldr	r1, [pc, #200]	; (801cf30 <tcp_output+0x24c>)
 801ce66:	482f      	ldr	r0, [pc, #188]	; (801cf24 <tcp_output+0x240>)
 801ce68:	f005 fca2 	bl	80227b0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d01f      	beq.n	801ceb4 <tcp_output+0x1d0>
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	8b5b      	ldrh	r3, [r3, #26]
 801ce78:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d119      	bne.n	801ceb4 <tcp_output+0x1d0>
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	d00b      	beq.n	801cea0 <tcp_output+0x1bc>
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d110      	bne.n	801ceb4 <tcp_output+0x1d0>
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ce96:	891a      	ldrh	r2, [r3, #8]
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ce9c:	429a      	cmp	r2, r3
 801ce9e:	d209      	bcs.n	801ceb4 <tcp_output+0x1d0>
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d004      	beq.n	801ceb4 <tcp_output+0x1d0>
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ceb0:	2b08      	cmp	r3, #8
 801ceb2:	d901      	bls.n	801ceb8 <tcp_output+0x1d4>
 801ceb4:	2301      	movs	r3, #1
 801ceb6:	e000      	b.n	801ceba <tcp_output+0x1d6>
 801ceb8:	2300      	movs	r3, #0
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	d106      	bne.n	801cecc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	8b5b      	ldrh	r3, [r3, #26]
 801cec2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	f000 80e4 	beq.w	801d094 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	7d1b      	ldrb	r3, [r3, #20]
 801ced0:	2b02      	cmp	r3, #2
 801ced2:	d00d      	beq.n	801cef0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801ced4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ced6:	68db      	ldr	r3, [r3, #12]
 801ced8:	899b      	ldrh	r3, [r3, #12]
 801ceda:	b29c      	uxth	r4, r3
 801cedc:	2010      	movs	r0, #16
 801cede:	f7f8 fe3d 	bl	8015b5c <lwip_htons>
 801cee2:	4603      	mov	r3, r0
 801cee4:	461a      	mov	r2, r3
 801cee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cee8:	68db      	ldr	r3, [r3, #12]
 801ceea:	4322      	orrs	r2, r4
 801ceec:	b292      	uxth	r2, r2
 801ceee:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801cef0:	697a      	ldr	r2, [r7, #20]
 801cef2:	6879      	ldr	r1, [r7, #4]
 801cef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cef6:	f000 f909 	bl	801d10c <tcp_output_segment>
 801cefa:	4603      	mov	r3, r0
 801cefc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801cefe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d016      	beq.n	801cf34 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	8b5b      	ldrh	r3, [r3, #26]
 801cf0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cf0e:	b29a      	uxth	r2, r3
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	835a      	strh	r2, [r3, #26]
      return err;
 801cf14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cf18:	e0d3      	b.n	801d0c2 <tcp_output+0x3de>
 801cf1a:	bf00      	nop
 801cf1c:	08025ee4 	.word	0x08025ee4
 801cf20:	08026428 	.word	0x08026428
 801cf24:	08025f38 	.word	0x08025f38
 801cf28:	08026440 	.word	0x08026440
 801cf2c:	2000c000 	.word	0x2000c000
 801cf30:	08026468 	.word	0x08026468
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf36:	681a      	ldr	r2, [r3, #0]
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	7d1b      	ldrb	r3, [r3, #20]
 801cf40:	2b02      	cmp	r3, #2
 801cf42:	d006      	beq.n	801cf52 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	8b5b      	ldrh	r3, [r3, #26]
 801cf48:	f023 0303 	bic.w	r3, r3, #3
 801cf4c:	b29a      	uxth	r2, r3
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801cf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf54:	68db      	ldr	r3, [r3, #12]
 801cf56:	685b      	ldr	r3, [r3, #4]
 801cf58:	4618      	mov	r0, r3
 801cf5a:	f7f8 fe14 	bl	8015b86 <lwip_htonl>
 801cf5e:	4604      	mov	r4, r0
 801cf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf62:	891b      	ldrh	r3, [r3, #8]
 801cf64:	461d      	mov	r5, r3
 801cf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf68:	68db      	ldr	r3, [r3, #12]
 801cf6a:	899b      	ldrh	r3, [r3, #12]
 801cf6c:	b29b      	uxth	r3, r3
 801cf6e:	4618      	mov	r0, r3
 801cf70:	f7f8 fdf4 	bl	8015b5c <lwip_htons>
 801cf74:	4603      	mov	r3, r0
 801cf76:	b2db      	uxtb	r3, r3
 801cf78:	f003 0303 	and.w	r3, r3, #3
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	d001      	beq.n	801cf84 <tcp_output+0x2a0>
 801cf80:	2301      	movs	r3, #1
 801cf82:	e000      	b.n	801cf86 <tcp_output+0x2a2>
 801cf84:	2300      	movs	r3, #0
 801cf86:	442b      	add	r3, r5
 801cf88:	4423      	add	r3, r4
 801cf8a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801cf90:	68bb      	ldr	r3, [r7, #8]
 801cf92:	1ad3      	subs	r3, r2, r3
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	da02      	bge.n	801cf9e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	68ba      	ldr	r2, [r7, #8]
 801cf9c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801cf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfa0:	891b      	ldrh	r3, [r3, #8]
 801cfa2:	461c      	mov	r4, r3
 801cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfa6:	68db      	ldr	r3, [r3, #12]
 801cfa8:	899b      	ldrh	r3, [r3, #12]
 801cfaa:	b29b      	uxth	r3, r3
 801cfac:	4618      	mov	r0, r3
 801cfae:	f7f8 fdd5 	bl	8015b5c <lwip_htons>
 801cfb2:	4603      	mov	r3, r0
 801cfb4:	b2db      	uxtb	r3, r3
 801cfb6:	f003 0303 	and.w	r3, r3, #3
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d001      	beq.n	801cfc2 <tcp_output+0x2de>
 801cfbe:	2301      	movs	r3, #1
 801cfc0:	e000      	b.n	801cfc4 <tcp_output+0x2e0>
 801cfc2:	2300      	movs	r3, #0
 801cfc4:	4423      	add	r3, r4
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d049      	beq.n	801d05e <tcp_output+0x37a>
      seg->next = NULL;
 801cfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfcc:	2200      	movs	r2, #0
 801cfce:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	d105      	bne.n	801cfe4 <tcp_output+0x300>
        pcb->unacked = seg;
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cfdc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801cfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfe0:	623b      	str	r3, [r7, #32]
 801cfe2:	e03f      	b.n	801d064 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801cfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfe6:	68db      	ldr	r3, [r3, #12]
 801cfe8:	685b      	ldr	r3, [r3, #4]
 801cfea:	4618      	mov	r0, r3
 801cfec:	f7f8 fdcb 	bl	8015b86 <lwip_htonl>
 801cff0:	4604      	mov	r4, r0
 801cff2:	6a3b      	ldr	r3, [r7, #32]
 801cff4:	68db      	ldr	r3, [r3, #12]
 801cff6:	685b      	ldr	r3, [r3, #4]
 801cff8:	4618      	mov	r0, r3
 801cffa:	f7f8 fdc4 	bl	8015b86 <lwip_htonl>
 801cffe:	4603      	mov	r3, r0
 801d000:	1ae3      	subs	r3, r4, r3
 801d002:	2b00      	cmp	r3, #0
 801d004:	da24      	bge.n	801d050 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	3370      	adds	r3, #112	; 0x70
 801d00a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801d00c:	e002      	b.n	801d014 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801d00e:	69fb      	ldr	r3, [r7, #28]
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801d014:	69fb      	ldr	r3, [r7, #28]
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d011      	beq.n	801d040 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801d01c:	69fb      	ldr	r3, [r7, #28]
 801d01e:	681b      	ldr	r3, [r3, #0]
 801d020:	68db      	ldr	r3, [r3, #12]
 801d022:	685b      	ldr	r3, [r3, #4]
 801d024:	4618      	mov	r0, r3
 801d026:	f7f8 fdae 	bl	8015b86 <lwip_htonl>
 801d02a:	4604      	mov	r4, r0
 801d02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d02e:	68db      	ldr	r3, [r3, #12]
 801d030:	685b      	ldr	r3, [r3, #4]
 801d032:	4618      	mov	r0, r3
 801d034:	f7f8 fda7 	bl	8015b86 <lwip_htonl>
 801d038:	4603      	mov	r3, r0
 801d03a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	dbe6      	blt.n	801d00e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801d040:	69fb      	ldr	r3, [r7, #28]
 801d042:	681a      	ldr	r2, [r3, #0]
 801d044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d046:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801d048:	69fb      	ldr	r3, [r7, #28]
 801d04a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d04c:	601a      	str	r2, [r3, #0]
 801d04e:	e009      	b.n	801d064 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801d050:	6a3b      	ldr	r3, [r7, #32]
 801d052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d054:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801d056:	6a3b      	ldr	r3, [r7, #32]
 801d058:	681b      	ldr	r3, [r3, #0]
 801d05a:	623b      	str	r3, [r7, #32]
 801d05c:	e002      	b.n	801d064 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801d05e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d060:	f7fb ff19 	bl	8018e96 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d068:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801d06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d012      	beq.n	801d096 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801d070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d072:	68db      	ldr	r3, [r3, #12]
 801d074:	685b      	ldr	r3, [r3, #4]
 801d076:	4618      	mov	r0, r3
 801d078:	f7f8 fd85 	bl	8015b86 <lwip_htonl>
 801d07c:	4602      	mov	r2, r0
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d082:	1ad3      	subs	r3, r2, r3
 801d084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d086:	8912      	ldrh	r2, [r2, #8]
 801d088:	4413      	add	r3, r2
  while (seg != NULL &&
 801d08a:	69ba      	ldr	r2, [r7, #24]
 801d08c:	429a      	cmp	r2, r3
 801d08e:	f4bf aed9 	bcs.w	801ce44 <tcp_output+0x160>
 801d092:	e000      	b.n	801d096 <tcp_output+0x3b2>
      break;
 801d094:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d09a:	2b00      	cmp	r3, #0
 801d09c:	d108      	bne.n	801d0b0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	2200      	movs	r2, #0
 801d0a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801d0a6:	e004      	b.n	801d0b2 <tcp_output+0x3ce>
    goto output_done;
 801d0a8:	bf00      	nop
 801d0aa:	e002      	b.n	801d0b2 <tcp_output+0x3ce>
    goto output_done;
 801d0ac:	bf00      	nop
 801d0ae:	e000      	b.n	801d0b2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801d0b0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801d0b2:	687b      	ldr	r3, [r7, #4]
 801d0b4:	8b5b      	ldrh	r3, [r3, #26]
 801d0b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d0ba:	b29a      	uxth	r2, r3
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801d0c0:	2300      	movs	r3, #0
}
 801d0c2:	4618      	mov	r0, r3
 801d0c4:	3728      	adds	r7, #40	; 0x28
 801d0c6:	46bd      	mov	sp, r7
 801d0c8:	bdb0      	pop	{r4, r5, r7, pc}
 801d0ca:	bf00      	nop

0801d0cc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801d0cc:	b580      	push	{r7, lr}
 801d0ce:	b082      	sub	sp, #8
 801d0d0:	af00      	add	r7, sp, #0
 801d0d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d106      	bne.n	801d0e8 <tcp_output_segment_busy+0x1c>
 801d0da:	4b09      	ldr	r3, [pc, #36]	; (801d100 <tcp_output_segment_busy+0x34>)
 801d0dc:	f240 529a 	movw	r2, #1434	; 0x59a
 801d0e0:	4908      	ldr	r1, [pc, #32]	; (801d104 <tcp_output_segment_busy+0x38>)
 801d0e2:	4809      	ldr	r0, [pc, #36]	; (801d108 <tcp_output_segment_busy+0x3c>)
 801d0e4:	f005 fb64 	bl	80227b0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	685b      	ldr	r3, [r3, #4]
 801d0ec:	7b9b      	ldrb	r3, [r3, #14]
 801d0ee:	2b01      	cmp	r3, #1
 801d0f0:	d001      	beq.n	801d0f6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801d0f2:	2301      	movs	r3, #1
 801d0f4:	e000      	b.n	801d0f8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801d0f6:	2300      	movs	r3, #0
}
 801d0f8:	4618      	mov	r0, r3
 801d0fa:	3708      	adds	r7, #8
 801d0fc:	46bd      	mov	sp, r7
 801d0fe:	bd80      	pop	{r7, pc}
 801d100:	08025ee4 	.word	0x08025ee4
 801d104:	08026480 	.word	0x08026480
 801d108:	08025f38 	.word	0x08025f38

0801d10c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801d10c:	b5b0      	push	{r4, r5, r7, lr}
 801d10e:	b08c      	sub	sp, #48	; 0x30
 801d110:	af04      	add	r7, sp, #16
 801d112:	60f8      	str	r0, [r7, #12]
 801d114:	60b9      	str	r1, [r7, #8]
 801d116:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801d118:	68fb      	ldr	r3, [r7, #12]
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d106      	bne.n	801d12c <tcp_output_segment+0x20>
 801d11e:	4b63      	ldr	r3, [pc, #396]	; (801d2ac <tcp_output_segment+0x1a0>)
 801d120:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801d124:	4962      	ldr	r1, [pc, #392]	; (801d2b0 <tcp_output_segment+0x1a4>)
 801d126:	4863      	ldr	r0, [pc, #396]	; (801d2b4 <tcp_output_segment+0x1a8>)
 801d128:	f005 fb42 	bl	80227b0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801d12c:	68bb      	ldr	r3, [r7, #8]
 801d12e:	2b00      	cmp	r3, #0
 801d130:	d106      	bne.n	801d140 <tcp_output_segment+0x34>
 801d132:	4b5e      	ldr	r3, [pc, #376]	; (801d2ac <tcp_output_segment+0x1a0>)
 801d134:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801d138:	495f      	ldr	r1, [pc, #380]	; (801d2b8 <tcp_output_segment+0x1ac>)
 801d13a:	485e      	ldr	r0, [pc, #376]	; (801d2b4 <tcp_output_segment+0x1a8>)
 801d13c:	f005 fb38 	bl	80227b0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	2b00      	cmp	r3, #0
 801d144:	d106      	bne.n	801d154 <tcp_output_segment+0x48>
 801d146:	4b59      	ldr	r3, [pc, #356]	; (801d2ac <tcp_output_segment+0x1a0>)
 801d148:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801d14c:	495b      	ldr	r1, [pc, #364]	; (801d2bc <tcp_output_segment+0x1b0>)
 801d14e:	4859      	ldr	r0, [pc, #356]	; (801d2b4 <tcp_output_segment+0x1a8>)
 801d150:	f005 fb2e 	bl	80227b0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801d154:	68f8      	ldr	r0, [r7, #12]
 801d156:	f7ff ffb9 	bl	801d0cc <tcp_output_segment_busy>
 801d15a:	4603      	mov	r3, r0
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	d001      	beq.n	801d164 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801d160:	2300      	movs	r3, #0
 801d162:	e09f      	b.n	801d2a4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801d164:	68bb      	ldr	r3, [r7, #8]
 801d166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d168:	68fb      	ldr	r3, [r7, #12]
 801d16a:	68dc      	ldr	r4, [r3, #12]
 801d16c:	4610      	mov	r0, r2
 801d16e:	f7f8 fd0a 	bl	8015b86 <lwip_htonl>
 801d172:	4603      	mov	r3, r0
 801d174:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801d176:	68bb      	ldr	r3, [r7, #8]
 801d178:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801d17a:	68fb      	ldr	r3, [r7, #12]
 801d17c:	68dc      	ldr	r4, [r3, #12]
 801d17e:	4610      	mov	r0, r2
 801d180:	f7f8 fcec 	bl	8015b5c <lwip_htons>
 801d184:	4603      	mov	r3, r0
 801d186:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d188:	68bb      	ldr	r3, [r7, #8]
 801d18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d18c:	68ba      	ldr	r2, [r7, #8]
 801d18e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801d190:	441a      	add	r2, r3
 801d192:	68bb      	ldr	r3, [r7, #8]
 801d194:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	68db      	ldr	r3, [r3, #12]
 801d19a:	3314      	adds	r3, #20
 801d19c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801d19e:	68fb      	ldr	r3, [r7, #12]
 801d1a0:	7a9b      	ldrb	r3, [r3, #10]
 801d1a2:	f003 0301 	and.w	r3, r3, #1
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d015      	beq.n	801d1d6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801d1aa:	68bb      	ldr	r3, [r7, #8]
 801d1ac:	3304      	adds	r3, #4
 801d1ae:	461a      	mov	r2, r3
 801d1b0:	6879      	ldr	r1, [r7, #4]
 801d1b2:	f44f 7006 	mov.w	r0, #536	; 0x218
 801d1b6:	f7fc fa33 	bl	8019620 <tcp_eff_send_mss_netif>
 801d1ba:	4603      	mov	r3, r0
 801d1bc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801d1be:	8b7b      	ldrh	r3, [r7, #26]
 801d1c0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801d1c4:	4618      	mov	r0, r3
 801d1c6:	f7f8 fcde 	bl	8015b86 <lwip_htonl>
 801d1ca:	4602      	mov	r2, r0
 801d1cc:	69fb      	ldr	r3, [r7, #28]
 801d1ce:	601a      	str	r2, [r3, #0]
    opts += 1;
 801d1d0:	69fb      	ldr	r3, [r7, #28]
 801d1d2:	3304      	adds	r3, #4
 801d1d4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801d1d6:	68bb      	ldr	r3, [r7, #8]
 801d1d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801d1dc:	2b00      	cmp	r3, #0
 801d1de:	da02      	bge.n	801d1e6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801d1e0:	68bb      	ldr	r3, [r7, #8]
 801d1e2:	2200      	movs	r2, #0
 801d1e4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801d1e6:	68bb      	ldr	r3, [r7, #8]
 801d1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	d10c      	bne.n	801d208 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801d1ee:	4b34      	ldr	r3, [pc, #208]	; (801d2c0 <tcp_output_segment+0x1b4>)
 801d1f0:	681a      	ldr	r2, [r3, #0]
 801d1f2:	68bb      	ldr	r3, [r7, #8]
 801d1f4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801d1f6:	68fb      	ldr	r3, [r7, #12]
 801d1f8:	68db      	ldr	r3, [r3, #12]
 801d1fa:	685b      	ldr	r3, [r3, #4]
 801d1fc:	4618      	mov	r0, r3
 801d1fe:	f7f8 fcc2 	bl	8015b86 <lwip_htonl>
 801d202:	4602      	mov	r2, r0
 801d204:	68bb      	ldr	r3, [r7, #8]
 801d206:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801d208:	68fb      	ldr	r3, [r7, #12]
 801d20a:	68da      	ldr	r2, [r3, #12]
 801d20c:	68fb      	ldr	r3, [r7, #12]
 801d20e:	685b      	ldr	r3, [r3, #4]
 801d210:	685b      	ldr	r3, [r3, #4]
 801d212:	1ad3      	subs	r3, r2, r3
 801d214:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801d216:	68fb      	ldr	r3, [r7, #12]
 801d218:	685b      	ldr	r3, [r3, #4]
 801d21a:	8959      	ldrh	r1, [r3, #10]
 801d21c:	68fb      	ldr	r3, [r7, #12]
 801d21e:	685b      	ldr	r3, [r3, #4]
 801d220:	8b3a      	ldrh	r2, [r7, #24]
 801d222:	1a8a      	subs	r2, r1, r2
 801d224:	b292      	uxth	r2, r2
 801d226:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801d228:	68fb      	ldr	r3, [r7, #12]
 801d22a:	685b      	ldr	r3, [r3, #4]
 801d22c:	8919      	ldrh	r1, [r3, #8]
 801d22e:	68fb      	ldr	r3, [r7, #12]
 801d230:	685b      	ldr	r3, [r3, #4]
 801d232:	8b3a      	ldrh	r2, [r7, #24]
 801d234:	1a8a      	subs	r2, r1, r2
 801d236:	b292      	uxth	r2, r2
 801d238:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	685b      	ldr	r3, [r3, #4]
 801d23e:	68fa      	ldr	r2, [r7, #12]
 801d240:	68d2      	ldr	r2, [r2, #12]
 801d242:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	68db      	ldr	r3, [r3, #12]
 801d248:	2200      	movs	r2, #0
 801d24a:	741a      	strb	r2, [r3, #16]
 801d24c:	2200      	movs	r2, #0
 801d24e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801d250:	68fb      	ldr	r3, [r7, #12]
 801d252:	68db      	ldr	r3, [r3, #12]
 801d254:	f103 0214 	add.w	r2, r3, #20
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	7a9b      	ldrb	r3, [r3, #10]
 801d25c:	009b      	lsls	r3, r3, #2
 801d25e:	f003 0304 	and.w	r3, r3, #4
 801d262:	4413      	add	r3, r2
 801d264:	69fa      	ldr	r2, [r7, #28]
 801d266:	429a      	cmp	r2, r3
 801d268:	d006      	beq.n	801d278 <tcp_output_segment+0x16c>
 801d26a:	4b10      	ldr	r3, [pc, #64]	; (801d2ac <tcp_output_segment+0x1a0>)
 801d26c:	f240 621c 	movw	r2, #1564	; 0x61c
 801d270:	4914      	ldr	r1, [pc, #80]	; (801d2c4 <tcp_output_segment+0x1b8>)
 801d272:	4810      	ldr	r0, [pc, #64]	; (801d2b4 <tcp_output_segment+0x1a8>)
 801d274:	f005 fa9c 	bl	80227b0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	6858      	ldr	r0, [r3, #4]
 801d27c:	68b9      	ldr	r1, [r7, #8]
 801d27e:	68bb      	ldr	r3, [r7, #8]
 801d280:	1d1c      	adds	r4, r3, #4
 801d282:	68bb      	ldr	r3, [r7, #8]
 801d284:	7add      	ldrb	r5, [r3, #11]
 801d286:	68bb      	ldr	r3, [r7, #8]
 801d288:	7a9b      	ldrb	r3, [r3, #10]
 801d28a:	687a      	ldr	r2, [r7, #4]
 801d28c:	9202      	str	r2, [sp, #8]
 801d28e:	2206      	movs	r2, #6
 801d290:	9201      	str	r2, [sp, #4]
 801d292:	9300      	str	r3, [sp, #0]
 801d294:	462b      	mov	r3, r5
 801d296:	4622      	mov	r2, r4
 801d298:	f002 fe04 	bl	801fea4 <ip4_output_if>
 801d29c:	4603      	mov	r3, r0
 801d29e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801d2a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d2a4:	4618      	mov	r0, r3
 801d2a6:	3720      	adds	r7, #32
 801d2a8:	46bd      	mov	sp, r7
 801d2aa:	bdb0      	pop	{r4, r5, r7, pc}
 801d2ac:	08025ee4 	.word	0x08025ee4
 801d2b0:	080264a8 	.word	0x080264a8
 801d2b4:	08025f38 	.word	0x08025f38
 801d2b8:	080264c8 	.word	0x080264c8
 801d2bc:	080264e8 	.word	0x080264e8
 801d2c0:	2000bfb4 	.word	0x2000bfb4
 801d2c4:	0802650c 	.word	0x0802650c

0801d2c8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801d2c8:	b5b0      	push	{r4, r5, r7, lr}
 801d2ca:	b084      	sub	sp, #16
 801d2cc:	af00      	add	r7, sp, #0
 801d2ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d106      	bne.n	801d2e4 <tcp_rexmit_rto_prepare+0x1c>
 801d2d6:	4b31      	ldr	r3, [pc, #196]	; (801d39c <tcp_rexmit_rto_prepare+0xd4>)
 801d2d8:	f240 6263 	movw	r2, #1635	; 0x663
 801d2dc:	4930      	ldr	r1, [pc, #192]	; (801d3a0 <tcp_rexmit_rto_prepare+0xd8>)
 801d2de:	4831      	ldr	r0, [pc, #196]	; (801d3a4 <tcp_rexmit_rto_prepare+0xdc>)
 801d2e0:	f005 fa66 	bl	80227b0 <iprintf>

  if (pcb->unacked == NULL) {
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d102      	bne.n	801d2f2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801d2ec:	f06f 0305 	mvn.w	r3, #5
 801d2f0:	e050      	b.n	801d394 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801d2f2:	687b      	ldr	r3, [r7, #4]
 801d2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d2f6:	60fb      	str	r3, [r7, #12]
 801d2f8:	e00b      	b.n	801d312 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801d2fa:	68f8      	ldr	r0, [r7, #12]
 801d2fc:	f7ff fee6 	bl	801d0cc <tcp_output_segment_busy>
 801d300:	4603      	mov	r3, r0
 801d302:	2b00      	cmp	r3, #0
 801d304:	d002      	beq.n	801d30c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801d306:	f06f 0305 	mvn.w	r3, #5
 801d30a:	e043      	b.n	801d394 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	60fb      	str	r3, [r7, #12]
 801d312:	68fb      	ldr	r3, [r7, #12]
 801d314:	681b      	ldr	r3, [r3, #0]
 801d316:	2b00      	cmp	r3, #0
 801d318:	d1ef      	bne.n	801d2fa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801d31a:	68f8      	ldr	r0, [r7, #12]
 801d31c:	f7ff fed6 	bl	801d0cc <tcp_output_segment_busy>
 801d320:	4603      	mov	r3, r0
 801d322:	2b00      	cmp	r3, #0
 801d324:	d002      	beq.n	801d32c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801d326:	f06f 0305 	mvn.w	r3, #5
 801d32a:	e033      	b.n	801d394 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801d330:	68fb      	ldr	r3, [r7, #12]
 801d332:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	2200      	movs	r2, #0
 801d340:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	8b5b      	ldrh	r3, [r3, #26]
 801d346:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801d34a:	b29a      	uxth	r2, r3
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801d350:	68fb      	ldr	r3, [r7, #12]
 801d352:	68db      	ldr	r3, [r3, #12]
 801d354:	685b      	ldr	r3, [r3, #4]
 801d356:	4618      	mov	r0, r3
 801d358:	f7f8 fc15 	bl	8015b86 <lwip_htonl>
 801d35c:	4604      	mov	r4, r0
 801d35e:	68fb      	ldr	r3, [r7, #12]
 801d360:	891b      	ldrh	r3, [r3, #8]
 801d362:	461d      	mov	r5, r3
 801d364:	68fb      	ldr	r3, [r7, #12]
 801d366:	68db      	ldr	r3, [r3, #12]
 801d368:	899b      	ldrh	r3, [r3, #12]
 801d36a:	b29b      	uxth	r3, r3
 801d36c:	4618      	mov	r0, r3
 801d36e:	f7f8 fbf5 	bl	8015b5c <lwip_htons>
 801d372:	4603      	mov	r3, r0
 801d374:	b2db      	uxtb	r3, r3
 801d376:	f003 0303 	and.w	r3, r3, #3
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d001      	beq.n	801d382 <tcp_rexmit_rto_prepare+0xba>
 801d37e:	2301      	movs	r3, #1
 801d380:	e000      	b.n	801d384 <tcp_rexmit_rto_prepare+0xbc>
 801d382:	2300      	movs	r3, #0
 801d384:	442b      	add	r3, r5
 801d386:	18e2      	adds	r2, r4, r3
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	2200      	movs	r2, #0
 801d390:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801d392:	2300      	movs	r3, #0
}
 801d394:	4618      	mov	r0, r3
 801d396:	3710      	adds	r7, #16
 801d398:	46bd      	mov	sp, r7
 801d39a:	bdb0      	pop	{r4, r5, r7, pc}
 801d39c:	08025ee4 	.word	0x08025ee4
 801d3a0:	08026520 	.word	0x08026520
 801d3a4:	08025f38 	.word	0x08025f38

0801d3a8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801d3a8:	b580      	push	{r7, lr}
 801d3aa:	b082      	sub	sp, #8
 801d3ac:	af00      	add	r7, sp, #0
 801d3ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	d106      	bne.n	801d3c4 <tcp_rexmit_rto_commit+0x1c>
 801d3b6:	4b0d      	ldr	r3, [pc, #52]	; (801d3ec <tcp_rexmit_rto_commit+0x44>)
 801d3b8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801d3bc:	490c      	ldr	r1, [pc, #48]	; (801d3f0 <tcp_rexmit_rto_commit+0x48>)
 801d3be:	480d      	ldr	r0, [pc, #52]	; (801d3f4 <tcp_rexmit_rto_commit+0x4c>)
 801d3c0:	f005 f9f6 	bl	80227b0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d3ca:	2bff      	cmp	r3, #255	; 0xff
 801d3cc:	d007      	beq.n	801d3de <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d3d4:	3301      	adds	r3, #1
 801d3d6:	b2da      	uxtb	r2, r3
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801d3de:	6878      	ldr	r0, [r7, #4]
 801d3e0:	f7ff fc80 	bl	801cce4 <tcp_output>
}
 801d3e4:	bf00      	nop
 801d3e6:	3708      	adds	r7, #8
 801d3e8:	46bd      	mov	sp, r7
 801d3ea:	bd80      	pop	{r7, pc}
 801d3ec:	08025ee4 	.word	0x08025ee4
 801d3f0:	08026544 	.word	0x08026544
 801d3f4:	08025f38 	.word	0x08025f38

0801d3f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801d3f8:	b580      	push	{r7, lr}
 801d3fa:	b082      	sub	sp, #8
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	2b00      	cmp	r3, #0
 801d404:	d106      	bne.n	801d414 <tcp_rexmit_rto+0x1c>
 801d406:	4b0a      	ldr	r3, [pc, #40]	; (801d430 <tcp_rexmit_rto+0x38>)
 801d408:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801d40c:	4909      	ldr	r1, [pc, #36]	; (801d434 <tcp_rexmit_rto+0x3c>)
 801d40e:	480a      	ldr	r0, [pc, #40]	; (801d438 <tcp_rexmit_rto+0x40>)
 801d410:	f005 f9ce 	bl	80227b0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801d414:	6878      	ldr	r0, [r7, #4]
 801d416:	f7ff ff57 	bl	801d2c8 <tcp_rexmit_rto_prepare>
 801d41a:	4603      	mov	r3, r0
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	d102      	bne.n	801d426 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801d420:	6878      	ldr	r0, [r7, #4]
 801d422:	f7ff ffc1 	bl	801d3a8 <tcp_rexmit_rto_commit>
  }
}
 801d426:	bf00      	nop
 801d428:	3708      	adds	r7, #8
 801d42a:	46bd      	mov	sp, r7
 801d42c:	bd80      	pop	{r7, pc}
 801d42e:	bf00      	nop
 801d430:	08025ee4 	.word	0x08025ee4
 801d434:	08026568 	.word	0x08026568
 801d438:	08025f38 	.word	0x08025f38

0801d43c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801d43c:	b590      	push	{r4, r7, lr}
 801d43e:	b085      	sub	sp, #20
 801d440:	af00      	add	r7, sp, #0
 801d442:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	2b00      	cmp	r3, #0
 801d448:	d106      	bne.n	801d458 <tcp_rexmit+0x1c>
 801d44a:	4b2f      	ldr	r3, [pc, #188]	; (801d508 <tcp_rexmit+0xcc>)
 801d44c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801d450:	492e      	ldr	r1, [pc, #184]	; (801d50c <tcp_rexmit+0xd0>)
 801d452:	482f      	ldr	r0, [pc, #188]	; (801d510 <tcp_rexmit+0xd4>)
 801d454:	f005 f9ac 	bl	80227b0 <iprintf>

  if (pcb->unacked == NULL) {
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d102      	bne.n	801d466 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801d460:	f06f 0305 	mvn.w	r3, #5
 801d464:	e04c      	b.n	801d500 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801d466:	687b      	ldr	r3, [r7, #4]
 801d468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d46a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801d46c:	68b8      	ldr	r0, [r7, #8]
 801d46e:	f7ff fe2d 	bl	801d0cc <tcp_output_segment_busy>
 801d472:	4603      	mov	r3, r0
 801d474:	2b00      	cmp	r3, #0
 801d476:	d002      	beq.n	801d47e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801d478:	f06f 0305 	mvn.w	r3, #5
 801d47c:	e040      	b.n	801d500 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801d47e:	68bb      	ldr	r3, [r7, #8]
 801d480:	681a      	ldr	r2, [r3, #0]
 801d482:	687b      	ldr	r3, [r7, #4]
 801d484:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	336c      	adds	r3, #108	; 0x6c
 801d48a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801d48c:	e002      	b.n	801d494 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	681b      	ldr	r3, [r3, #0]
 801d492:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801d494:	68fb      	ldr	r3, [r7, #12]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d011      	beq.n	801d4c0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801d49c:	68fb      	ldr	r3, [r7, #12]
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	68db      	ldr	r3, [r3, #12]
 801d4a2:	685b      	ldr	r3, [r3, #4]
 801d4a4:	4618      	mov	r0, r3
 801d4a6:	f7f8 fb6e 	bl	8015b86 <lwip_htonl>
 801d4aa:	4604      	mov	r4, r0
 801d4ac:	68bb      	ldr	r3, [r7, #8]
 801d4ae:	68db      	ldr	r3, [r3, #12]
 801d4b0:	685b      	ldr	r3, [r3, #4]
 801d4b2:	4618      	mov	r0, r3
 801d4b4:	f7f8 fb67 	bl	8015b86 <lwip_htonl>
 801d4b8:	4603      	mov	r3, r0
 801d4ba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	dbe6      	blt.n	801d48e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	681a      	ldr	r2, [r3, #0]
 801d4c4:	68bb      	ldr	r3, [r7, #8]
 801d4c6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801d4c8:	68fb      	ldr	r3, [r7, #12]
 801d4ca:	68ba      	ldr	r2, [r7, #8]
 801d4cc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801d4ce:	68bb      	ldr	r3, [r7, #8]
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	2b00      	cmp	r3, #0
 801d4d4:	d103      	bne.n	801d4de <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	2200      	movs	r2, #0
 801d4da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d4e4:	2bff      	cmp	r3, #255	; 0xff
 801d4e6:	d007      	beq.n	801d4f8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d4ee:	3301      	adds	r3, #1
 801d4f0:	b2da      	uxtb	r2, r3
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	2200      	movs	r2, #0
 801d4fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801d4fe:	2300      	movs	r3, #0
}
 801d500:	4618      	mov	r0, r3
 801d502:	3714      	adds	r7, #20
 801d504:	46bd      	mov	sp, r7
 801d506:	bd90      	pop	{r4, r7, pc}
 801d508:	08025ee4 	.word	0x08025ee4
 801d50c:	08026584 	.word	0x08026584
 801d510:	08025f38 	.word	0x08025f38

0801d514 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801d514:	b580      	push	{r7, lr}
 801d516:	b082      	sub	sp, #8
 801d518:	af00      	add	r7, sp, #0
 801d51a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801d51c:	687b      	ldr	r3, [r7, #4]
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d106      	bne.n	801d530 <tcp_rexmit_fast+0x1c>
 801d522:	4b2a      	ldr	r3, [pc, #168]	; (801d5cc <tcp_rexmit_fast+0xb8>)
 801d524:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801d528:	4929      	ldr	r1, [pc, #164]	; (801d5d0 <tcp_rexmit_fast+0xbc>)
 801d52a:	482a      	ldr	r0, [pc, #168]	; (801d5d4 <tcp_rexmit_fast+0xc0>)
 801d52c:	f005 f940 	bl	80227b0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801d530:	687b      	ldr	r3, [r7, #4]
 801d532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d534:	2b00      	cmp	r3, #0
 801d536:	d045      	beq.n	801d5c4 <tcp_rexmit_fast+0xb0>
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	8b5b      	ldrh	r3, [r3, #26]
 801d53c:	f003 0304 	and.w	r3, r3, #4
 801d540:	2b00      	cmp	r3, #0
 801d542:	d13f      	bne.n	801d5c4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801d544:	6878      	ldr	r0, [r7, #4]
 801d546:	f7ff ff79 	bl	801d43c <tcp_rexmit>
 801d54a:	4603      	mov	r3, r0
 801d54c:	2b00      	cmp	r3, #0
 801d54e:	d139      	bne.n	801d5c4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d55c:	4293      	cmp	r3, r2
 801d55e:	bf28      	it	cs
 801d560:	4613      	movcs	r3, r2
 801d562:	b29b      	uxth	r3, r3
 801d564:	2b00      	cmp	r3, #0
 801d566:	da00      	bge.n	801d56a <tcp_rexmit_fast+0x56>
 801d568:	3301      	adds	r3, #1
 801d56a:	105b      	asrs	r3, r3, #1
 801d56c:	b29a      	uxth	r2, r3
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801d574:	687b      	ldr	r3, [r7, #4]
 801d576:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801d57a:	461a      	mov	r2, r3
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d580:	005b      	lsls	r3, r3, #1
 801d582:	429a      	cmp	r2, r3
 801d584:	d206      	bcs.n	801d594 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801d586:	687b      	ldr	r3, [r7, #4]
 801d588:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d58a:	005b      	lsls	r3, r3, #1
 801d58c:	b29a      	uxth	r2, r3
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801d59a:	687b      	ldr	r3, [r7, #4]
 801d59c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d59e:	4619      	mov	r1, r3
 801d5a0:	0049      	lsls	r1, r1, #1
 801d5a2:	440b      	add	r3, r1
 801d5a4:	b29b      	uxth	r3, r3
 801d5a6:	4413      	add	r3, r2
 801d5a8:	b29a      	uxth	r2, r3
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	8b5b      	ldrh	r3, [r3, #26]
 801d5b4:	f043 0304 	orr.w	r3, r3, #4
 801d5b8:	b29a      	uxth	r2, r3
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	2200      	movs	r2, #0
 801d5c2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801d5c4:	bf00      	nop
 801d5c6:	3708      	adds	r7, #8
 801d5c8:	46bd      	mov	sp, r7
 801d5ca:	bd80      	pop	{r7, pc}
 801d5cc:	08025ee4 	.word	0x08025ee4
 801d5d0:	0802659c 	.word	0x0802659c
 801d5d4:	08025f38 	.word	0x08025f38

0801d5d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801d5d8:	b580      	push	{r7, lr}
 801d5da:	b086      	sub	sp, #24
 801d5dc:	af00      	add	r7, sp, #0
 801d5de:	60f8      	str	r0, [r7, #12]
 801d5e0:	607b      	str	r3, [r7, #4]
 801d5e2:	460b      	mov	r3, r1
 801d5e4:	817b      	strh	r3, [r7, #10]
 801d5e6:	4613      	mov	r3, r2
 801d5e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801d5ea:	897a      	ldrh	r2, [r7, #10]
 801d5ec:	893b      	ldrh	r3, [r7, #8]
 801d5ee:	4413      	add	r3, r2
 801d5f0:	b29b      	uxth	r3, r3
 801d5f2:	3314      	adds	r3, #20
 801d5f4:	b29b      	uxth	r3, r3
 801d5f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d5fa:	4619      	mov	r1, r3
 801d5fc:	2022      	movs	r0, #34	; 0x22
 801d5fe:	f7f9 fbbb 	bl	8016d78 <pbuf_alloc>
 801d602:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801d604:	697b      	ldr	r3, [r7, #20]
 801d606:	2b00      	cmp	r3, #0
 801d608:	d04d      	beq.n	801d6a6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801d60a:	897b      	ldrh	r3, [r7, #10]
 801d60c:	3313      	adds	r3, #19
 801d60e:	697a      	ldr	r2, [r7, #20]
 801d610:	8952      	ldrh	r2, [r2, #10]
 801d612:	4293      	cmp	r3, r2
 801d614:	db06      	blt.n	801d624 <tcp_output_alloc_header_common+0x4c>
 801d616:	4b26      	ldr	r3, [pc, #152]	; (801d6b0 <tcp_output_alloc_header_common+0xd8>)
 801d618:	f240 7223 	movw	r2, #1827	; 0x723
 801d61c:	4925      	ldr	r1, [pc, #148]	; (801d6b4 <tcp_output_alloc_header_common+0xdc>)
 801d61e:	4826      	ldr	r0, [pc, #152]	; (801d6b8 <tcp_output_alloc_header_common+0xe0>)
 801d620:	f005 f8c6 	bl	80227b0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801d624:	697b      	ldr	r3, [r7, #20]
 801d626:	685b      	ldr	r3, [r3, #4]
 801d628:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801d62a:	8c3b      	ldrh	r3, [r7, #32]
 801d62c:	4618      	mov	r0, r3
 801d62e:	f7f8 fa95 	bl	8015b5c <lwip_htons>
 801d632:	4603      	mov	r3, r0
 801d634:	461a      	mov	r2, r3
 801d636:	693b      	ldr	r3, [r7, #16]
 801d638:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801d63a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d63c:	4618      	mov	r0, r3
 801d63e:	f7f8 fa8d 	bl	8015b5c <lwip_htons>
 801d642:	4603      	mov	r3, r0
 801d644:	461a      	mov	r2, r3
 801d646:	693b      	ldr	r3, [r7, #16]
 801d648:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801d64a:	693b      	ldr	r3, [r7, #16]
 801d64c:	687a      	ldr	r2, [r7, #4]
 801d64e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801d650:	68f8      	ldr	r0, [r7, #12]
 801d652:	f7f8 fa98 	bl	8015b86 <lwip_htonl>
 801d656:	4602      	mov	r2, r0
 801d658:	693b      	ldr	r3, [r7, #16]
 801d65a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801d65c:	897b      	ldrh	r3, [r7, #10]
 801d65e:	089b      	lsrs	r3, r3, #2
 801d660:	b29b      	uxth	r3, r3
 801d662:	3305      	adds	r3, #5
 801d664:	b29b      	uxth	r3, r3
 801d666:	031b      	lsls	r3, r3, #12
 801d668:	b29a      	uxth	r2, r3
 801d66a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d66e:	b29b      	uxth	r3, r3
 801d670:	4313      	orrs	r3, r2
 801d672:	b29b      	uxth	r3, r3
 801d674:	4618      	mov	r0, r3
 801d676:	f7f8 fa71 	bl	8015b5c <lwip_htons>
 801d67a:	4603      	mov	r3, r0
 801d67c:	461a      	mov	r2, r3
 801d67e:	693b      	ldr	r3, [r7, #16]
 801d680:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801d682:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d684:	4618      	mov	r0, r3
 801d686:	f7f8 fa69 	bl	8015b5c <lwip_htons>
 801d68a:	4603      	mov	r3, r0
 801d68c:	461a      	mov	r2, r3
 801d68e:	693b      	ldr	r3, [r7, #16]
 801d690:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801d692:	693b      	ldr	r3, [r7, #16]
 801d694:	2200      	movs	r2, #0
 801d696:	741a      	strb	r2, [r3, #16]
 801d698:	2200      	movs	r2, #0
 801d69a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801d69c:	693b      	ldr	r3, [r7, #16]
 801d69e:	2200      	movs	r2, #0
 801d6a0:	749a      	strb	r2, [r3, #18]
 801d6a2:	2200      	movs	r2, #0
 801d6a4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801d6a6:	697b      	ldr	r3, [r7, #20]
}
 801d6a8:	4618      	mov	r0, r3
 801d6aa:	3718      	adds	r7, #24
 801d6ac:	46bd      	mov	sp, r7
 801d6ae:	bd80      	pop	{r7, pc}
 801d6b0:	08025ee4 	.word	0x08025ee4
 801d6b4:	080265bc 	.word	0x080265bc
 801d6b8:	08025f38 	.word	0x08025f38

0801d6bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801d6bc:	b5b0      	push	{r4, r5, r7, lr}
 801d6be:	b08a      	sub	sp, #40	; 0x28
 801d6c0:	af04      	add	r7, sp, #16
 801d6c2:	60f8      	str	r0, [r7, #12]
 801d6c4:	607b      	str	r3, [r7, #4]
 801d6c6:	460b      	mov	r3, r1
 801d6c8:	817b      	strh	r3, [r7, #10]
 801d6ca:	4613      	mov	r3, r2
 801d6cc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801d6ce:	68fb      	ldr	r3, [r7, #12]
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	d106      	bne.n	801d6e2 <tcp_output_alloc_header+0x26>
 801d6d4:	4b15      	ldr	r3, [pc, #84]	; (801d72c <tcp_output_alloc_header+0x70>)
 801d6d6:	f240 7242 	movw	r2, #1858	; 0x742
 801d6da:	4915      	ldr	r1, [pc, #84]	; (801d730 <tcp_output_alloc_header+0x74>)
 801d6dc:	4815      	ldr	r0, [pc, #84]	; (801d734 <tcp_output_alloc_header+0x78>)
 801d6de:	f005 f867 	bl	80227b0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801d6e2:	68fb      	ldr	r3, [r7, #12]
 801d6e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	8adb      	ldrh	r3, [r3, #22]
 801d6ea:	68fa      	ldr	r2, [r7, #12]
 801d6ec:	8b12      	ldrh	r2, [r2, #24]
 801d6ee:	68f9      	ldr	r1, [r7, #12]
 801d6f0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801d6f2:	893d      	ldrh	r5, [r7, #8]
 801d6f4:	897c      	ldrh	r4, [r7, #10]
 801d6f6:	9103      	str	r1, [sp, #12]
 801d6f8:	2110      	movs	r1, #16
 801d6fa:	9102      	str	r1, [sp, #8]
 801d6fc:	9201      	str	r2, [sp, #4]
 801d6fe:	9300      	str	r3, [sp, #0]
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	462a      	mov	r2, r5
 801d704:	4621      	mov	r1, r4
 801d706:	f7ff ff67 	bl	801d5d8 <tcp_output_alloc_header_common>
 801d70a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801d70c:	697b      	ldr	r3, [r7, #20]
 801d70e:	2b00      	cmp	r3, #0
 801d710:	d006      	beq.n	801d720 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d712:	68fb      	ldr	r3, [r7, #12]
 801d714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d716:	68fa      	ldr	r2, [r7, #12]
 801d718:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801d71a:	441a      	add	r2, r3
 801d71c:	68fb      	ldr	r3, [r7, #12]
 801d71e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801d720:	697b      	ldr	r3, [r7, #20]
}
 801d722:	4618      	mov	r0, r3
 801d724:	3718      	adds	r7, #24
 801d726:	46bd      	mov	sp, r7
 801d728:	bdb0      	pop	{r4, r5, r7, pc}
 801d72a:	bf00      	nop
 801d72c:	08025ee4 	.word	0x08025ee4
 801d730:	080265ec 	.word	0x080265ec
 801d734:	08025f38 	.word	0x08025f38

0801d738 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801d738:	b580      	push	{r7, lr}
 801d73a:	b088      	sub	sp, #32
 801d73c:	af00      	add	r7, sp, #0
 801d73e:	60f8      	str	r0, [r7, #12]
 801d740:	60b9      	str	r1, [r7, #8]
 801d742:	4611      	mov	r1, r2
 801d744:	461a      	mov	r2, r3
 801d746:	460b      	mov	r3, r1
 801d748:	71fb      	strb	r3, [r7, #7]
 801d74a:	4613      	mov	r3, r2
 801d74c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801d74e:	2300      	movs	r3, #0
 801d750:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801d752:	68bb      	ldr	r3, [r7, #8]
 801d754:	2b00      	cmp	r3, #0
 801d756:	d106      	bne.n	801d766 <tcp_output_fill_options+0x2e>
 801d758:	4b13      	ldr	r3, [pc, #76]	; (801d7a8 <tcp_output_fill_options+0x70>)
 801d75a:	f240 7256 	movw	r2, #1878	; 0x756
 801d75e:	4913      	ldr	r1, [pc, #76]	; (801d7ac <tcp_output_fill_options+0x74>)
 801d760:	4813      	ldr	r0, [pc, #76]	; (801d7b0 <tcp_output_fill_options+0x78>)
 801d762:	f005 f825 	bl	80227b0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801d766:	68bb      	ldr	r3, [r7, #8]
 801d768:	685b      	ldr	r3, [r3, #4]
 801d76a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801d76c:	69bb      	ldr	r3, [r7, #24]
 801d76e:	3314      	adds	r3, #20
 801d770:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801d772:	69bb      	ldr	r3, [r7, #24]
 801d774:	f103 0214 	add.w	r2, r3, #20
 801d778:	8bfb      	ldrh	r3, [r7, #30]
 801d77a:	009b      	lsls	r3, r3, #2
 801d77c:	4619      	mov	r1, r3
 801d77e:	79fb      	ldrb	r3, [r7, #7]
 801d780:	009b      	lsls	r3, r3, #2
 801d782:	f003 0304 	and.w	r3, r3, #4
 801d786:	440b      	add	r3, r1
 801d788:	4413      	add	r3, r2
 801d78a:	697a      	ldr	r2, [r7, #20]
 801d78c:	429a      	cmp	r2, r3
 801d78e:	d006      	beq.n	801d79e <tcp_output_fill_options+0x66>
 801d790:	4b05      	ldr	r3, [pc, #20]	; (801d7a8 <tcp_output_fill_options+0x70>)
 801d792:	f240 7275 	movw	r2, #1909	; 0x775
 801d796:	4907      	ldr	r1, [pc, #28]	; (801d7b4 <tcp_output_fill_options+0x7c>)
 801d798:	4805      	ldr	r0, [pc, #20]	; (801d7b0 <tcp_output_fill_options+0x78>)
 801d79a:	f005 f809 	bl	80227b0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801d79e:	bf00      	nop
 801d7a0:	3720      	adds	r7, #32
 801d7a2:	46bd      	mov	sp, r7
 801d7a4:	bd80      	pop	{r7, pc}
 801d7a6:	bf00      	nop
 801d7a8:	08025ee4 	.word	0x08025ee4
 801d7ac:	08026614 	.word	0x08026614
 801d7b0:	08025f38 	.word	0x08025f38
 801d7b4:	0802650c 	.word	0x0802650c

0801d7b8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801d7b8:	b580      	push	{r7, lr}
 801d7ba:	b08a      	sub	sp, #40	; 0x28
 801d7bc:	af04      	add	r7, sp, #16
 801d7be:	60f8      	str	r0, [r7, #12]
 801d7c0:	60b9      	str	r1, [r7, #8]
 801d7c2:	607a      	str	r2, [r7, #4]
 801d7c4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801d7c6:	68bb      	ldr	r3, [r7, #8]
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	d106      	bne.n	801d7da <tcp_output_control_segment+0x22>
 801d7cc:	4b1c      	ldr	r3, [pc, #112]	; (801d840 <tcp_output_control_segment+0x88>)
 801d7ce:	f240 7287 	movw	r2, #1927	; 0x787
 801d7d2:	491c      	ldr	r1, [pc, #112]	; (801d844 <tcp_output_control_segment+0x8c>)
 801d7d4:	481c      	ldr	r0, [pc, #112]	; (801d848 <tcp_output_control_segment+0x90>)
 801d7d6:	f004 ffeb 	bl	80227b0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801d7da:	683a      	ldr	r2, [r7, #0]
 801d7dc:	6879      	ldr	r1, [r7, #4]
 801d7de:	68f8      	ldr	r0, [r7, #12]
 801d7e0:	f7fe fae8 	bl	801bdb4 <tcp_route>
 801d7e4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801d7e6:	693b      	ldr	r3, [r7, #16]
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d102      	bne.n	801d7f2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801d7ec:	23fc      	movs	r3, #252	; 0xfc
 801d7ee:	75fb      	strb	r3, [r7, #23]
 801d7f0:	e01c      	b.n	801d82c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801d7f2:	68fb      	ldr	r3, [r7, #12]
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	d006      	beq.n	801d806 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801d7f8:	68fb      	ldr	r3, [r7, #12]
 801d7fa:	7adb      	ldrb	r3, [r3, #11]
 801d7fc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801d7fe:	68fb      	ldr	r3, [r7, #12]
 801d800:	7a9b      	ldrb	r3, [r3, #10]
 801d802:	757b      	strb	r3, [r7, #21]
 801d804:	e003      	b.n	801d80e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801d806:	23ff      	movs	r3, #255	; 0xff
 801d808:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801d80a:	2300      	movs	r3, #0
 801d80c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801d80e:	7dba      	ldrb	r2, [r7, #22]
 801d810:	693b      	ldr	r3, [r7, #16]
 801d812:	9302      	str	r3, [sp, #8]
 801d814:	2306      	movs	r3, #6
 801d816:	9301      	str	r3, [sp, #4]
 801d818:	7d7b      	ldrb	r3, [r7, #21]
 801d81a:	9300      	str	r3, [sp, #0]
 801d81c:	4613      	mov	r3, r2
 801d81e:	683a      	ldr	r2, [r7, #0]
 801d820:	6879      	ldr	r1, [r7, #4]
 801d822:	68b8      	ldr	r0, [r7, #8]
 801d824:	f002 fb3e 	bl	801fea4 <ip4_output_if>
 801d828:	4603      	mov	r3, r0
 801d82a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801d82c:	68b8      	ldr	r0, [r7, #8]
 801d82e:	f7f9 fd87 	bl	8017340 <pbuf_free>
  return err;
 801d832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d836:	4618      	mov	r0, r3
 801d838:	3718      	adds	r7, #24
 801d83a:	46bd      	mov	sp, r7
 801d83c:	bd80      	pop	{r7, pc}
 801d83e:	bf00      	nop
 801d840:	08025ee4 	.word	0x08025ee4
 801d844:	0802663c 	.word	0x0802663c
 801d848:	08025f38 	.word	0x08025f38

0801d84c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801d84c:	b590      	push	{r4, r7, lr}
 801d84e:	b08b      	sub	sp, #44	; 0x2c
 801d850:	af04      	add	r7, sp, #16
 801d852:	60f8      	str	r0, [r7, #12]
 801d854:	60b9      	str	r1, [r7, #8]
 801d856:	607a      	str	r2, [r7, #4]
 801d858:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801d85a:	683b      	ldr	r3, [r7, #0]
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	d106      	bne.n	801d86e <tcp_rst+0x22>
 801d860:	4b1f      	ldr	r3, [pc, #124]	; (801d8e0 <tcp_rst+0x94>)
 801d862:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801d866:	491f      	ldr	r1, [pc, #124]	; (801d8e4 <tcp_rst+0x98>)
 801d868:	481f      	ldr	r0, [pc, #124]	; (801d8e8 <tcp_rst+0x9c>)
 801d86a:	f004 ffa1 	bl	80227b0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801d86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d870:	2b00      	cmp	r3, #0
 801d872:	d106      	bne.n	801d882 <tcp_rst+0x36>
 801d874:	4b1a      	ldr	r3, [pc, #104]	; (801d8e0 <tcp_rst+0x94>)
 801d876:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801d87a:	491c      	ldr	r1, [pc, #112]	; (801d8ec <tcp_rst+0xa0>)
 801d87c:	481a      	ldr	r0, [pc, #104]	; (801d8e8 <tcp_rst+0x9c>)
 801d87e:	f004 ff97 	bl	80227b0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d882:	2300      	movs	r3, #0
 801d884:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801d886:	f246 0308 	movw	r3, #24584	; 0x6008
 801d88a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801d88c:	7dfb      	ldrb	r3, [r7, #23]
 801d88e:	b29c      	uxth	r4, r3
 801d890:	68b8      	ldr	r0, [r7, #8]
 801d892:	f7f8 f978 	bl	8015b86 <lwip_htonl>
 801d896:	4602      	mov	r2, r0
 801d898:	8abb      	ldrh	r3, [r7, #20]
 801d89a:	9303      	str	r3, [sp, #12]
 801d89c:	2314      	movs	r3, #20
 801d89e:	9302      	str	r3, [sp, #8]
 801d8a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801d8a2:	9301      	str	r3, [sp, #4]
 801d8a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d8a6:	9300      	str	r3, [sp, #0]
 801d8a8:	4613      	mov	r3, r2
 801d8aa:	2200      	movs	r2, #0
 801d8ac:	4621      	mov	r1, r4
 801d8ae:	6878      	ldr	r0, [r7, #4]
 801d8b0:	f7ff fe92 	bl	801d5d8 <tcp_output_alloc_header_common>
 801d8b4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801d8b6:	693b      	ldr	r3, [r7, #16]
 801d8b8:	2b00      	cmp	r3, #0
 801d8ba:	d00c      	beq.n	801d8d6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d8bc:	7dfb      	ldrb	r3, [r7, #23]
 801d8be:	2200      	movs	r2, #0
 801d8c0:	6939      	ldr	r1, [r7, #16]
 801d8c2:	68f8      	ldr	r0, [r7, #12]
 801d8c4:	f7ff ff38 	bl	801d738 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801d8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8ca:	683a      	ldr	r2, [r7, #0]
 801d8cc:	6939      	ldr	r1, [r7, #16]
 801d8ce:	68f8      	ldr	r0, [r7, #12]
 801d8d0:	f7ff ff72 	bl	801d7b8 <tcp_output_control_segment>
 801d8d4:	e000      	b.n	801d8d8 <tcp_rst+0x8c>
    return;
 801d8d6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801d8d8:	371c      	adds	r7, #28
 801d8da:	46bd      	mov	sp, r7
 801d8dc:	bd90      	pop	{r4, r7, pc}
 801d8de:	bf00      	nop
 801d8e0:	08025ee4 	.word	0x08025ee4
 801d8e4:	08026668 	.word	0x08026668
 801d8e8:	08025f38 	.word	0x08025f38
 801d8ec:	08026684 	.word	0x08026684

0801d8f0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801d8f0:	b590      	push	{r4, r7, lr}
 801d8f2:	b087      	sub	sp, #28
 801d8f4:	af00      	add	r7, sp, #0
 801d8f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801d8f8:	2300      	movs	r3, #0
 801d8fa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801d8fc:	2300      	movs	r3, #0
 801d8fe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	2b00      	cmp	r3, #0
 801d904:	d106      	bne.n	801d914 <tcp_send_empty_ack+0x24>
 801d906:	4b28      	ldr	r3, [pc, #160]	; (801d9a8 <tcp_send_empty_ack+0xb8>)
 801d908:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801d90c:	4927      	ldr	r1, [pc, #156]	; (801d9ac <tcp_send_empty_ack+0xbc>)
 801d90e:	4828      	ldr	r0, [pc, #160]	; (801d9b0 <tcp_send_empty_ack+0xc0>)
 801d910:	f004 ff4e 	bl	80227b0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d914:	7dfb      	ldrb	r3, [r7, #23]
 801d916:	009b      	lsls	r3, r3, #2
 801d918:	b2db      	uxtb	r3, r3
 801d91a:	f003 0304 	and.w	r3, r3, #4
 801d91e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801d920:	7d7b      	ldrb	r3, [r7, #21]
 801d922:	b29c      	uxth	r4, r3
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d928:	4618      	mov	r0, r3
 801d92a:	f7f8 f92c 	bl	8015b86 <lwip_htonl>
 801d92e:	4603      	mov	r3, r0
 801d930:	2200      	movs	r2, #0
 801d932:	4621      	mov	r1, r4
 801d934:	6878      	ldr	r0, [r7, #4]
 801d936:	f7ff fec1 	bl	801d6bc <tcp_output_alloc_header>
 801d93a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d93c:	693b      	ldr	r3, [r7, #16]
 801d93e:	2b00      	cmp	r3, #0
 801d940:	d109      	bne.n	801d956 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	8b5b      	ldrh	r3, [r3, #26]
 801d946:	f043 0303 	orr.w	r3, r3, #3
 801d94a:	b29a      	uxth	r2, r3
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801d950:	f06f 0301 	mvn.w	r3, #1
 801d954:	e023      	b.n	801d99e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801d956:	7dbb      	ldrb	r3, [r7, #22]
 801d958:	7dfa      	ldrb	r2, [r7, #23]
 801d95a:	6939      	ldr	r1, [r7, #16]
 801d95c:	6878      	ldr	r0, [r7, #4]
 801d95e:	f7ff feeb 	bl	801d738 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801d962:	687a      	ldr	r2, [r7, #4]
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	3304      	adds	r3, #4
 801d968:	6939      	ldr	r1, [r7, #16]
 801d96a:	6878      	ldr	r0, [r7, #4]
 801d96c:	f7ff ff24 	bl	801d7b8 <tcp_output_control_segment>
 801d970:	4603      	mov	r3, r0
 801d972:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801d974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d978:	2b00      	cmp	r3, #0
 801d97a:	d007      	beq.n	801d98c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d97c:	687b      	ldr	r3, [r7, #4]
 801d97e:	8b5b      	ldrh	r3, [r3, #26]
 801d980:	f043 0303 	orr.w	r3, r3, #3
 801d984:	b29a      	uxth	r2, r3
 801d986:	687b      	ldr	r3, [r7, #4]
 801d988:	835a      	strh	r2, [r3, #26]
 801d98a:	e006      	b.n	801d99a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	8b5b      	ldrh	r3, [r3, #26]
 801d990:	f023 0303 	bic.w	r3, r3, #3
 801d994:	b29a      	uxth	r2, r3
 801d996:	687b      	ldr	r3, [r7, #4]
 801d998:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801d99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d99e:	4618      	mov	r0, r3
 801d9a0:	371c      	adds	r7, #28
 801d9a2:	46bd      	mov	sp, r7
 801d9a4:	bd90      	pop	{r4, r7, pc}
 801d9a6:	bf00      	nop
 801d9a8:	08025ee4 	.word	0x08025ee4
 801d9ac:	080266a0 	.word	0x080266a0
 801d9b0:	08025f38 	.word	0x08025f38

0801d9b4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801d9b4:	b590      	push	{r4, r7, lr}
 801d9b6:	b087      	sub	sp, #28
 801d9b8:	af00      	add	r7, sp, #0
 801d9ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d9bc:	2300      	movs	r3, #0
 801d9be:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	d106      	bne.n	801d9d4 <tcp_keepalive+0x20>
 801d9c6:	4b18      	ldr	r3, [pc, #96]	; (801da28 <tcp_keepalive+0x74>)
 801d9c8:	f640 0224 	movw	r2, #2084	; 0x824
 801d9cc:	4917      	ldr	r1, [pc, #92]	; (801da2c <tcp_keepalive+0x78>)
 801d9ce:	4818      	ldr	r0, [pc, #96]	; (801da30 <tcp_keepalive+0x7c>)
 801d9d0:	f004 feee 	bl	80227b0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801d9d4:	7dfb      	ldrb	r3, [r7, #23]
 801d9d6:	b29c      	uxth	r4, r3
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d9dc:	3b01      	subs	r3, #1
 801d9de:	4618      	mov	r0, r3
 801d9e0:	f7f8 f8d1 	bl	8015b86 <lwip_htonl>
 801d9e4:	4603      	mov	r3, r0
 801d9e6:	2200      	movs	r2, #0
 801d9e8:	4621      	mov	r1, r4
 801d9ea:	6878      	ldr	r0, [r7, #4]
 801d9ec:	f7ff fe66 	bl	801d6bc <tcp_output_alloc_header>
 801d9f0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d9f2:	693b      	ldr	r3, [r7, #16]
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d102      	bne.n	801d9fe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801d9f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d9fc:	e010      	b.n	801da20 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d9fe:	7dfb      	ldrb	r3, [r7, #23]
 801da00:	2200      	movs	r2, #0
 801da02:	6939      	ldr	r1, [r7, #16]
 801da04:	6878      	ldr	r0, [r7, #4]
 801da06:	f7ff fe97 	bl	801d738 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801da0a:	687a      	ldr	r2, [r7, #4]
 801da0c:	687b      	ldr	r3, [r7, #4]
 801da0e:	3304      	adds	r3, #4
 801da10:	6939      	ldr	r1, [r7, #16]
 801da12:	6878      	ldr	r0, [r7, #4]
 801da14:	f7ff fed0 	bl	801d7b8 <tcp_output_control_segment>
 801da18:	4603      	mov	r3, r0
 801da1a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801da1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801da20:	4618      	mov	r0, r3
 801da22:	371c      	adds	r7, #28
 801da24:	46bd      	mov	sp, r7
 801da26:	bd90      	pop	{r4, r7, pc}
 801da28:	08025ee4 	.word	0x08025ee4
 801da2c:	080266c0 	.word	0x080266c0
 801da30:	08025f38 	.word	0x08025f38

0801da34 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801da34:	b590      	push	{r4, r7, lr}
 801da36:	b08b      	sub	sp, #44	; 0x2c
 801da38:	af00      	add	r7, sp, #0
 801da3a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801da3c:	2300      	movs	r3, #0
 801da3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801da42:	687b      	ldr	r3, [r7, #4]
 801da44:	2b00      	cmp	r3, #0
 801da46:	d106      	bne.n	801da56 <tcp_zero_window_probe+0x22>
 801da48:	4b4c      	ldr	r3, [pc, #304]	; (801db7c <tcp_zero_window_probe+0x148>)
 801da4a:	f640 024f 	movw	r2, #2127	; 0x84f
 801da4e:	494c      	ldr	r1, [pc, #304]	; (801db80 <tcp_zero_window_probe+0x14c>)
 801da50:	484c      	ldr	r0, [pc, #304]	; (801db84 <tcp_zero_window_probe+0x150>)
 801da52:	f004 fead 	bl	80227b0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801da5a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801da5c:	6a3b      	ldr	r3, [r7, #32]
 801da5e:	2b00      	cmp	r3, #0
 801da60:	d101      	bne.n	801da66 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801da62:	2300      	movs	r3, #0
 801da64:	e086      	b.n	801db74 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801da6c:	2bff      	cmp	r3, #255	; 0xff
 801da6e:	d007      	beq.n	801da80 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801da76:	3301      	adds	r3, #1
 801da78:	b2da      	uxtb	r2, r3
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801da80:	6a3b      	ldr	r3, [r7, #32]
 801da82:	68db      	ldr	r3, [r3, #12]
 801da84:	899b      	ldrh	r3, [r3, #12]
 801da86:	b29b      	uxth	r3, r3
 801da88:	4618      	mov	r0, r3
 801da8a:	f7f8 f867 	bl	8015b5c <lwip_htons>
 801da8e:	4603      	mov	r3, r0
 801da90:	b2db      	uxtb	r3, r3
 801da92:	f003 0301 	and.w	r3, r3, #1
 801da96:	2b00      	cmp	r3, #0
 801da98:	d005      	beq.n	801daa6 <tcp_zero_window_probe+0x72>
 801da9a:	6a3b      	ldr	r3, [r7, #32]
 801da9c:	891b      	ldrh	r3, [r3, #8]
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	d101      	bne.n	801daa6 <tcp_zero_window_probe+0x72>
 801daa2:	2301      	movs	r3, #1
 801daa4:	e000      	b.n	801daa8 <tcp_zero_window_probe+0x74>
 801daa6:	2300      	movs	r3, #0
 801daa8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801daaa:	7ffb      	ldrb	r3, [r7, #31]
 801daac:	2b00      	cmp	r3, #0
 801daae:	bf0c      	ite	eq
 801dab0:	2301      	moveq	r3, #1
 801dab2:	2300      	movne	r3, #0
 801dab4:	b2db      	uxtb	r3, r3
 801dab6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801dab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dabc:	b299      	uxth	r1, r3
 801dabe:	6a3b      	ldr	r3, [r7, #32]
 801dac0:	68db      	ldr	r3, [r3, #12]
 801dac2:	685b      	ldr	r3, [r3, #4]
 801dac4:	8bba      	ldrh	r2, [r7, #28]
 801dac6:	6878      	ldr	r0, [r7, #4]
 801dac8:	f7ff fdf8 	bl	801d6bc <tcp_output_alloc_header>
 801dacc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801dace:	69bb      	ldr	r3, [r7, #24]
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d102      	bne.n	801dada <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801dad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dad8:	e04c      	b.n	801db74 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801dada:	69bb      	ldr	r3, [r7, #24]
 801dadc:	685b      	ldr	r3, [r3, #4]
 801dade:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801dae0:	7ffb      	ldrb	r3, [r7, #31]
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	d011      	beq.n	801db0a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801dae6:	697b      	ldr	r3, [r7, #20]
 801dae8:	899b      	ldrh	r3, [r3, #12]
 801daea:	b29b      	uxth	r3, r3
 801daec:	b21b      	sxth	r3, r3
 801daee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801daf2:	b21c      	sxth	r4, r3
 801daf4:	2011      	movs	r0, #17
 801daf6:	f7f8 f831 	bl	8015b5c <lwip_htons>
 801dafa:	4603      	mov	r3, r0
 801dafc:	b21b      	sxth	r3, r3
 801dafe:	4323      	orrs	r3, r4
 801db00:	b21b      	sxth	r3, r3
 801db02:	b29a      	uxth	r2, r3
 801db04:	697b      	ldr	r3, [r7, #20]
 801db06:	819a      	strh	r2, [r3, #12]
 801db08:	e010      	b.n	801db2c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801db0a:	69bb      	ldr	r3, [r7, #24]
 801db0c:	685b      	ldr	r3, [r3, #4]
 801db0e:	3314      	adds	r3, #20
 801db10:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801db12:	6a3b      	ldr	r3, [r7, #32]
 801db14:	6858      	ldr	r0, [r3, #4]
 801db16:	6a3b      	ldr	r3, [r7, #32]
 801db18:	685b      	ldr	r3, [r3, #4]
 801db1a:	891a      	ldrh	r2, [r3, #8]
 801db1c:	6a3b      	ldr	r3, [r7, #32]
 801db1e:	891b      	ldrh	r3, [r3, #8]
 801db20:	1ad3      	subs	r3, r2, r3
 801db22:	b29b      	uxth	r3, r3
 801db24:	2201      	movs	r2, #1
 801db26:	6939      	ldr	r1, [r7, #16]
 801db28:	f7f9 fe10 	bl	801774c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801db2c:	6a3b      	ldr	r3, [r7, #32]
 801db2e:	68db      	ldr	r3, [r3, #12]
 801db30:	685b      	ldr	r3, [r3, #4]
 801db32:	4618      	mov	r0, r3
 801db34:	f7f8 f827 	bl	8015b86 <lwip_htonl>
 801db38:	4603      	mov	r3, r0
 801db3a:	3301      	adds	r3, #1
 801db3c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801db42:	68fb      	ldr	r3, [r7, #12]
 801db44:	1ad3      	subs	r3, r2, r3
 801db46:	2b00      	cmp	r3, #0
 801db48:	da02      	bge.n	801db50 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	68fa      	ldr	r2, [r7, #12]
 801db4e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801db50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801db54:	2200      	movs	r2, #0
 801db56:	69b9      	ldr	r1, [r7, #24]
 801db58:	6878      	ldr	r0, [r7, #4]
 801db5a:	f7ff fded 	bl	801d738 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801db5e:	687a      	ldr	r2, [r7, #4]
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	3304      	adds	r3, #4
 801db64:	69b9      	ldr	r1, [r7, #24]
 801db66:	6878      	ldr	r0, [r7, #4]
 801db68:	f7ff fe26 	bl	801d7b8 <tcp_output_control_segment>
 801db6c:	4603      	mov	r3, r0
 801db6e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801db70:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801db74:	4618      	mov	r0, r3
 801db76:	372c      	adds	r7, #44	; 0x2c
 801db78:	46bd      	mov	sp, r7
 801db7a:	bd90      	pop	{r4, r7, pc}
 801db7c:	08025ee4 	.word	0x08025ee4
 801db80:	080266dc 	.word	0x080266dc
 801db84:	08025f38 	.word	0x08025f38

0801db88 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801db88:	b580      	push	{r7, lr}
 801db8a:	b082      	sub	sp, #8
 801db8c:	af00      	add	r7, sp, #0
 801db8e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801db90:	f7f9 feca 	bl	8017928 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801db94:	4b0a      	ldr	r3, [pc, #40]	; (801dbc0 <tcpip_tcp_timer+0x38>)
 801db96:	681b      	ldr	r3, [r3, #0]
 801db98:	2b00      	cmp	r3, #0
 801db9a:	d103      	bne.n	801dba4 <tcpip_tcp_timer+0x1c>
 801db9c:	4b09      	ldr	r3, [pc, #36]	; (801dbc4 <tcpip_tcp_timer+0x3c>)
 801db9e:	681b      	ldr	r3, [r3, #0]
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d005      	beq.n	801dbb0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801dba4:	2200      	movs	r2, #0
 801dba6:	4908      	ldr	r1, [pc, #32]	; (801dbc8 <tcpip_tcp_timer+0x40>)
 801dba8:	20fa      	movs	r0, #250	; 0xfa
 801dbaa:	f000 f8f3 	bl	801dd94 <sys_timeout>
 801dbae:	e003      	b.n	801dbb8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801dbb0:	4b06      	ldr	r3, [pc, #24]	; (801dbcc <tcpip_tcp_timer+0x44>)
 801dbb2:	2200      	movs	r2, #0
 801dbb4:	601a      	str	r2, [r3, #0]
  }
}
 801dbb6:	bf00      	nop
 801dbb8:	bf00      	nop
 801dbba:	3708      	adds	r7, #8
 801dbbc:	46bd      	mov	sp, r7
 801dbbe:	bd80      	pop	{r7, pc}
 801dbc0:	2000bfc0 	.word	0x2000bfc0
 801dbc4:	2000bfc4 	.word	0x2000bfc4
 801dbc8:	0801db89 	.word	0x0801db89
 801dbcc:	2000c00c 	.word	0x2000c00c

0801dbd0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801dbd0:	b580      	push	{r7, lr}
 801dbd2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801dbd4:	4b0a      	ldr	r3, [pc, #40]	; (801dc00 <tcp_timer_needed+0x30>)
 801dbd6:	681b      	ldr	r3, [r3, #0]
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	d10f      	bne.n	801dbfc <tcp_timer_needed+0x2c>
 801dbdc:	4b09      	ldr	r3, [pc, #36]	; (801dc04 <tcp_timer_needed+0x34>)
 801dbde:	681b      	ldr	r3, [r3, #0]
 801dbe0:	2b00      	cmp	r3, #0
 801dbe2:	d103      	bne.n	801dbec <tcp_timer_needed+0x1c>
 801dbe4:	4b08      	ldr	r3, [pc, #32]	; (801dc08 <tcp_timer_needed+0x38>)
 801dbe6:	681b      	ldr	r3, [r3, #0]
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d007      	beq.n	801dbfc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801dbec:	4b04      	ldr	r3, [pc, #16]	; (801dc00 <tcp_timer_needed+0x30>)
 801dbee:	2201      	movs	r2, #1
 801dbf0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801dbf2:	2200      	movs	r2, #0
 801dbf4:	4905      	ldr	r1, [pc, #20]	; (801dc0c <tcp_timer_needed+0x3c>)
 801dbf6:	20fa      	movs	r0, #250	; 0xfa
 801dbf8:	f000 f8cc 	bl	801dd94 <sys_timeout>
  }
}
 801dbfc:	bf00      	nop
 801dbfe:	bd80      	pop	{r7, pc}
 801dc00:	2000c00c 	.word	0x2000c00c
 801dc04:	2000bfc0 	.word	0x2000bfc0
 801dc08:	2000bfc4 	.word	0x2000bfc4
 801dc0c:	0801db89 	.word	0x0801db89

0801dc10 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801dc10:	b580      	push	{r7, lr}
 801dc12:	b086      	sub	sp, #24
 801dc14:	af00      	add	r7, sp, #0
 801dc16:	60f8      	str	r0, [r7, #12]
 801dc18:	60b9      	str	r1, [r7, #8]
 801dc1a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801dc1c:	200a      	movs	r0, #10
 801dc1e:	f7f8 fc75 	bl	801650c <memp_malloc>
 801dc22:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801dc24:	693b      	ldr	r3, [r7, #16]
 801dc26:	2b00      	cmp	r3, #0
 801dc28:	d109      	bne.n	801dc3e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801dc2a:	693b      	ldr	r3, [r7, #16]
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	d151      	bne.n	801dcd4 <sys_timeout_abs+0xc4>
 801dc30:	4b2a      	ldr	r3, [pc, #168]	; (801dcdc <sys_timeout_abs+0xcc>)
 801dc32:	22be      	movs	r2, #190	; 0xbe
 801dc34:	492a      	ldr	r1, [pc, #168]	; (801dce0 <sys_timeout_abs+0xd0>)
 801dc36:	482b      	ldr	r0, [pc, #172]	; (801dce4 <sys_timeout_abs+0xd4>)
 801dc38:	f004 fdba 	bl	80227b0 <iprintf>
    return;
 801dc3c:	e04a      	b.n	801dcd4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801dc3e:	693b      	ldr	r3, [r7, #16]
 801dc40:	2200      	movs	r2, #0
 801dc42:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801dc44:	693b      	ldr	r3, [r7, #16]
 801dc46:	68ba      	ldr	r2, [r7, #8]
 801dc48:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801dc4a:	693b      	ldr	r3, [r7, #16]
 801dc4c:	687a      	ldr	r2, [r7, #4]
 801dc4e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801dc50:	693b      	ldr	r3, [r7, #16]
 801dc52:	68fa      	ldr	r2, [r7, #12]
 801dc54:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801dc56:	4b24      	ldr	r3, [pc, #144]	; (801dce8 <sys_timeout_abs+0xd8>)
 801dc58:	681b      	ldr	r3, [r3, #0]
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	d103      	bne.n	801dc66 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801dc5e:	4a22      	ldr	r2, [pc, #136]	; (801dce8 <sys_timeout_abs+0xd8>)
 801dc60:	693b      	ldr	r3, [r7, #16]
 801dc62:	6013      	str	r3, [r2, #0]
    return;
 801dc64:	e037      	b.n	801dcd6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801dc66:	693b      	ldr	r3, [r7, #16]
 801dc68:	685a      	ldr	r2, [r3, #4]
 801dc6a:	4b1f      	ldr	r3, [pc, #124]	; (801dce8 <sys_timeout_abs+0xd8>)
 801dc6c:	681b      	ldr	r3, [r3, #0]
 801dc6e:	685b      	ldr	r3, [r3, #4]
 801dc70:	1ad3      	subs	r3, r2, r3
 801dc72:	0fdb      	lsrs	r3, r3, #31
 801dc74:	f003 0301 	and.w	r3, r3, #1
 801dc78:	b2db      	uxtb	r3, r3
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d007      	beq.n	801dc8e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801dc7e:	4b1a      	ldr	r3, [pc, #104]	; (801dce8 <sys_timeout_abs+0xd8>)
 801dc80:	681a      	ldr	r2, [r3, #0]
 801dc82:	693b      	ldr	r3, [r7, #16]
 801dc84:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801dc86:	4a18      	ldr	r2, [pc, #96]	; (801dce8 <sys_timeout_abs+0xd8>)
 801dc88:	693b      	ldr	r3, [r7, #16]
 801dc8a:	6013      	str	r3, [r2, #0]
 801dc8c:	e023      	b.n	801dcd6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801dc8e:	4b16      	ldr	r3, [pc, #88]	; (801dce8 <sys_timeout_abs+0xd8>)
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	617b      	str	r3, [r7, #20]
 801dc94:	e01a      	b.n	801dccc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801dc96:	697b      	ldr	r3, [r7, #20]
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	2b00      	cmp	r3, #0
 801dc9c:	d00b      	beq.n	801dcb6 <sys_timeout_abs+0xa6>
 801dc9e:	693b      	ldr	r3, [r7, #16]
 801dca0:	685a      	ldr	r2, [r3, #4]
 801dca2:	697b      	ldr	r3, [r7, #20]
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	685b      	ldr	r3, [r3, #4]
 801dca8:	1ad3      	subs	r3, r2, r3
 801dcaa:	0fdb      	lsrs	r3, r3, #31
 801dcac:	f003 0301 	and.w	r3, r3, #1
 801dcb0:	b2db      	uxtb	r3, r3
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d007      	beq.n	801dcc6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801dcb6:	697b      	ldr	r3, [r7, #20]
 801dcb8:	681a      	ldr	r2, [r3, #0]
 801dcba:	693b      	ldr	r3, [r7, #16]
 801dcbc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801dcbe:	697b      	ldr	r3, [r7, #20]
 801dcc0:	693a      	ldr	r2, [r7, #16]
 801dcc2:	601a      	str	r2, [r3, #0]
        break;
 801dcc4:	e007      	b.n	801dcd6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801dcc6:	697b      	ldr	r3, [r7, #20]
 801dcc8:	681b      	ldr	r3, [r3, #0]
 801dcca:	617b      	str	r3, [r7, #20]
 801dccc:	697b      	ldr	r3, [r7, #20]
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d1e1      	bne.n	801dc96 <sys_timeout_abs+0x86>
 801dcd2:	e000      	b.n	801dcd6 <sys_timeout_abs+0xc6>
    return;
 801dcd4:	bf00      	nop
      }
    }
  }
}
 801dcd6:	3718      	adds	r7, #24
 801dcd8:	46bd      	mov	sp, r7
 801dcda:	bd80      	pop	{r7, pc}
 801dcdc:	08026700 	.word	0x08026700
 801dce0:	08026734 	.word	0x08026734
 801dce4:	08026774 	.word	0x08026774
 801dce8:	2000c004 	.word	0x2000c004

0801dcec <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801dcec:	b580      	push	{r7, lr}
 801dcee:	b086      	sub	sp, #24
 801dcf0:	af00      	add	r7, sp, #0
 801dcf2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801dcf8:	697b      	ldr	r3, [r7, #20]
 801dcfa:	685b      	ldr	r3, [r3, #4]
 801dcfc:	4798      	blx	r3

  now = sys_now();
 801dcfe:	f7f2 f859 	bl	800fdb4 <sys_now>
 801dd02:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801dd04:	697b      	ldr	r3, [r7, #20]
 801dd06:	681a      	ldr	r2, [r3, #0]
 801dd08:	4b0f      	ldr	r3, [pc, #60]	; (801dd48 <lwip_cyclic_timer+0x5c>)
 801dd0a:	681b      	ldr	r3, [r3, #0]
 801dd0c:	4413      	add	r3, r2
 801dd0e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801dd10:	68fa      	ldr	r2, [r7, #12]
 801dd12:	693b      	ldr	r3, [r7, #16]
 801dd14:	1ad3      	subs	r3, r2, r3
 801dd16:	0fdb      	lsrs	r3, r3, #31
 801dd18:	f003 0301 	and.w	r3, r3, #1
 801dd1c:	b2db      	uxtb	r3, r3
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	d009      	beq.n	801dd36 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801dd22:	697b      	ldr	r3, [r7, #20]
 801dd24:	681a      	ldr	r2, [r3, #0]
 801dd26:	693b      	ldr	r3, [r7, #16]
 801dd28:	4413      	add	r3, r2
 801dd2a:	687a      	ldr	r2, [r7, #4]
 801dd2c:	4907      	ldr	r1, [pc, #28]	; (801dd4c <lwip_cyclic_timer+0x60>)
 801dd2e:	4618      	mov	r0, r3
 801dd30:	f7ff ff6e 	bl	801dc10 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801dd34:	e004      	b.n	801dd40 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801dd36:	687a      	ldr	r2, [r7, #4]
 801dd38:	4904      	ldr	r1, [pc, #16]	; (801dd4c <lwip_cyclic_timer+0x60>)
 801dd3a:	68f8      	ldr	r0, [r7, #12]
 801dd3c:	f7ff ff68 	bl	801dc10 <sys_timeout_abs>
}
 801dd40:	bf00      	nop
 801dd42:	3718      	adds	r7, #24
 801dd44:	46bd      	mov	sp, r7
 801dd46:	bd80      	pop	{r7, pc}
 801dd48:	2000c008 	.word	0x2000c008
 801dd4c:	0801dced 	.word	0x0801dced

0801dd50 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801dd50:	b580      	push	{r7, lr}
 801dd52:	b082      	sub	sp, #8
 801dd54:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801dd56:	2301      	movs	r3, #1
 801dd58:	607b      	str	r3, [r7, #4]
 801dd5a:	e00e      	b.n	801dd7a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801dd5c:	4a0b      	ldr	r2, [pc, #44]	; (801dd8c <sys_timeouts_init+0x3c>)
 801dd5e:	687b      	ldr	r3, [r7, #4]
 801dd60:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	00db      	lsls	r3, r3, #3
 801dd68:	4a08      	ldr	r2, [pc, #32]	; (801dd8c <sys_timeouts_init+0x3c>)
 801dd6a:	4413      	add	r3, r2
 801dd6c:	461a      	mov	r2, r3
 801dd6e:	4908      	ldr	r1, [pc, #32]	; (801dd90 <sys_timeouts_init+0x40>)
 801dd70:	f000 f810 	bl	801dd94 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801dd74:	687b      	ldr	r3, [r7, #4]
 801dd76:	3301      	adds	r3, #1
 801dd78:	607b      	str	r3, [r7, #4]
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	2b02      	cmp	r3, #2
 801dd7e:	d9ed      	bls.n	801dd5c <sys_timeouts_init+0xc>
  }
}
 801dd80:	bf00      	nop
 801dd82:	bf00      	nop
 801dd84:	3708      	adds	r7, #8
 801dd86:	46bd      	mov	sp, r7
 801dd88:	bd80      	pop	{r7, pc}
 801dd8a:	bf00      	nop
 801dd8c:	08027380 	.word	0x08027380
 801dd90:	0801dced 	.word	0x0801dced

0801dd94 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801dd94:	b580      	push	{r7, lr}
 801dd96:	b086      	sub	sp, #24
 801dd98:	af00      	add	r7, sp, #0
 801dd9a:	60f8      	str	r0, [r7, #12]
 801dd9c:	60b9      	str	r1, [r7, #8]
 801dd9e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801dda0:	68fb      	ldr	r3, [r7, #12]
 801dda2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801dda6:	d306      	bcc.n	801ddb6 <sys_timeout+0x22>
 801dda8:	4b0a      	ldr	r3, [pc, #40]	; (801ddd4 <sys_timeout+0x40>)
 801ddaa:	f240 1229 	movw	r2, #297	; 0x129
 801ddae:	490a      	ldr	r1, [pc, #40]	; (801ddd8 <sys_timeout+0x44>)
 801ddb0:	480a      	ldr	r0, [pc, #40]	; (801dddc <sys_timeout+0x48>)
 801ddb2:	f004 fcfd 	bl	80227b0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ddb6:	f7f1 fffd 	bl	800fdb4 <sys_now>
 801ddba:	4602      	mov	r2, r0
 801ddbc:	68fb      	ldr	r3, [r7, #12]
 801ddbe:	4413      	add	r3, r2
 801ddc0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ddc2:	687a      	ldr	r2, [r7, #4]
 801ddc4:	68b9      	ldr	r1, [r7, #8]
 801ddc6:	6978      	ldr	r0, [r7, #20]
 801ddc8:	f7ff ff22 	bl	801dc10 <sys_timeout_abs>
#endif
}
 801ddcc:	bf00      	nop
 801ddce:	3718      	adds	r7, #24
 801ddd0:	46bd      	mov	sp, r7
 801ddd2:	bd80      	pop	{r7, pc}
 801ddd4:	08026700 	.word	0x08026700
 801ddd8:	0802679c 	.word	0x0802679c
 801dddc:	08026774 	.word	0x08026774

0801dde0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801dde0:	b580      	push	{r7, lr}
 801dde2:	b084      	sub	sp, #16
 801dde4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801dde6:	f7f1 ffe5 	bl	800fdb4 <sys_now>
 801ddea:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801ddec:	4b17      	ldr	r3, [pc, #92]	; (801de4c <sys_check_timeouts+0x6c>)
 801ddee:	681b      	ldr	r3, [r3, #0]
 801ddf0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801ddf2:	68bb      	ldr	r3, [r7, #8]
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	d022      	beq.n	801de3e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801ddf8:	68bb      	ldr	r3, [r7, #8]
 801ddfa:	685b      	ldr	r3, [r3, #4]
 801ddfc:	68fa      	ldr	r2, [r7, #12]
 801ddfe:	1ad3      	subs	r3, r2, r3
 801de00:	0fdb      	lsrs	r3, r3, #31
 801de02:	f003 0301 	and.w	r3, r3, #1
 801de06:	b2db      	uxtb	r3, r3
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d11a      	bne.n	801de42 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801de0c:	68bb      	ldr	r3, [r7, #8]
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	4a0e      	ldr	r2, [pc, #56]	; (801de4c <sys_check_timeouts+0x6c>)
 801de12:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801de14:	68bb      	ldr	r3, [r7, #8]
 801de16:	689b      	ldr	r3, [r3, #8]
 801de18:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801de1a:	68bb      	ldr	r3, [r7, #8]
 801de1c:	68db      	ldr	r3, [r3, #12]
 801de1e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801de20:	68bb      	ldr	r3, [r7, #8]
 801de22:	685b      	ldr	r3, [r3, #4]
 801de24:	4a0a      	ldr	r2, [pc, #40]	; (801de50 <sys_check_timeouts+0x70>)
 801de26:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801de28:	68b9      	ldr	r1, [r7, #8]
 801de2a:	200a      	movs	r0, #10
 801de2c:	f7f8 fbe4 	bl	80165f8 <memp_free>
    if (handler != NULL) {
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	2b00      	cmp	r3, #0
 801de34:	d0da      	beq.n	801ddec <sys_check_timeouts+0xc>
      handler(arg);
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	6838      	ldr	r0, [r7, #0]
 801de3a:	4798      	blx	r3
  do {
 801de3c:	e7d6      	b.n	801ddec <sys_check_timeouts+0xc>
      return;
 801de3e:	bf00      	nop
 801de40:	e000      	b.n	801de44 <sys_check_timeouts+0x64>
      return;
 801de42:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801de44:	3710      	adds	r7, #16
 801de46:	46bd      	mov	sp, r7
 801de48:	bd80      	pop	{r7, pc}
 801de4a:	bf00      	nop
 801de4c:	2000c004 	.word	0x2000c004
 801de50:	2000c008 	.word	0x2000c008

0801de54 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801de54:	b580      	push	{r7, lr}
 801de56:	b082      	sub	sp, #8
 801de58:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801de5a:	4b16      	ldr	r3, [pc, #88]	; (801deb4 <sys_timeouts_sleeptime+0x60>)
 801de5c:	681b      	ldr	r3, [r3, #0]
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d102      	bne.n	801de68 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801de62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801de66:	e020      	b.n	801deaa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801de68:	f7f1 ffa4 	bl	800fdb4 <sys_now>
 801de6c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801de6e:	4b11      	ldr	r3, [pc, #68]	; (801deb4 <sys_timeouts_sleeptime+0x60>)
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	685a      	ldr	r2, [r3, #4]
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	1ad3      	subs	r3, r2, r3
 801de78:	0fdb      	lsrs	r3, r3, #31
 801de7a:	f003 0301 	and.w	r3, r3, #1
 801de7e:	b2db      	uxtb	r3, r3
 801de80:	2b00      	cmp	r3, #0
 801de82:	d001      	beq.n	801de88 <sys_timeouts_sleeptime+0x34>
    return 0;
 801de84:	2300      	movs	r3, #0
 801de86:	e010      	b.n	801deaa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801de88:	4b0a      	ldr	r3, [pc, #40]	; (801deb4 <sys_timeouts_sleeptime+0x60>)
 801de8a:	681b      	ldr	r3, [r3, #0]
 801de8c:	685a      	ldr	r2, [r3, #4]
 801de8e:	687b      	ldr	r3, [r7, #4]
 801de90:	1ad3      	subs	r3, r2, r3
 801de92:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801de94:	683b      	ldr	r3, [r7, #0]
 801de96:	2b00      	cmp	r3, #0
 801de98:	da06      	bge.n	801dea8 <sys_timeouts_sleeptime+0x54>
 801de9a:	4b07      	ldr	r3, [pc, #28]	; (801deb8 <sys_timeouts_sleeptime+0x64>)
 801de9c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801dea0:	4906      	ldr	r1, [pc, #24]	; (801debc <sys_timeouts_sleeptime+0x68>)
 801dea2:	4807      	ldr	r0, [pc, #28]	; (801dec0 <sys_timeouts_sleeptime+0x6c>)
 801dea4:	f004 fc84 	bl	80227b0 <iprintf>
    return ret;
 801dea8:	683b      	ldr	r3, [r7, #0]
  }
}
 801deaa:	4618      	mov	r0, r3
 801deac:	3708      	adds	r7, #8
 801deae:	46bd      	mov	sp, r7
 801deb0:	bd80      	pop	{r7, pc}
 801deb2:	bf00      	nop
 801deb4:	2000c004 	.word	0x2000c004
 801deb8:	08026700 	.word	0x08026700
 801debc:	080267d4 	.word	0x080267d4
 801dec0:	08026774 	.word	0x08026774

0801dec4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801dec4:	b580      	push	{r7, lr}
 801dec6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801dec8:	f004 fc8a 	bl	80227e0 <rand>
 801decc:	4603      	mov	r3, r0
 801dece:	b29b      	uxth	r3, r3
 801ded0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ded4:	b29b      	uxth	r3, r3
 801ded6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801deda:	b29a      	uxth	r2, r3
 801dedc:	4b01      	ldr	r3, [pc, #4]	; (801dee4 <udp_init+0x20>)
 801dede:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801dee0:	bf00      	nop
 801dee2:	bd80      	pop	{r7, pc}
 801dee4:	20000030 	.word	0x20000030

0801dee8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801dee8:	b480      	push	{r7}
 801deea:	b083      	sub	sp, #12
 801deec:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801deee:	2300      	movs	r3, #0
 801def0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801def2:	4b17      	ldr	r3, [pc, #92]	; (801df50 <udp_new_port+0x68>)
 801def4:	881b      	ldrh	r3, [r3, #0]
 801def6:	1c5a      	adds	r2, r3, #1
 801def8:	b291      	uxth	r1, r2
 801defa:	4a15      	ldr	r2, [pc, #84]	; (801df50 <udp_new_port+0x68>)
 801defc:	8011      	strh	r1, [r2, #0]
 801defe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801df02:	4293      	cmp	r3, r2
 801df04:	d103      	bne.n	801df0e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801df06:	4b12      	ldr	r3, [pc, #72]	; (801df50 <udp_new_port+0x68>)
 801df08:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801df0c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801df0e:	4b11      	ldr	r3, [pc, #68]	; (801df54 <udp_new_port+0x6c>)
 801df10:	681b      	ldr	r3, [r3, #0]
 801df12:	603b      	str	r3, [r7, #0]
 801df14:	e011      	b.n	801df3a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801df16:	683b      	ldr	r3, [r7, #0]
 801df18:	8a5a      	ldrh	r2, [r3, #18]
 801df1a:	4b0d      	ldr	r3, [pc, #52]	; (801df50 <udp_new_port+0x68>)
 801df1c:	881b      	ldrh	r3, [r3, #0]
 801df1e:	429a      	cmp	r2, r3
 801df20:	d108      	bne.n	801df34 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801df22:	88fb      	ldrh	r3, [r7, #6]
 801df24:	3301      	adds	r3, #1
 801df26:	80fb      	strh	r3, [r7, #6]
 801df28:	88fb      	ldrh	r3, [r7, #6]
 801df2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801df2e:	d3e0      	bcc.n	801def2 <udp_new_port+0xa>
        return 0;
 801df30:	2300      	movs	r3, #0
 801df32:	e007      	b.n	801df44 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801df34:	683b      	ldr	r3, [r7, #0]
 801df36:	68db      	ldr	r3, [r3, #12]
 801df38:	603b      	str	r3, [r7, #0]
 801df3a:	683b      	ldr	r3, [r7, #0]
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	d1ea      	bne.n	801df16 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801df40:	4b03      	ldr	r3, [pc, #12]	; (801df50 <udp_new_port+0x68>)
 801df42:	881b      	ldrh	r3, [r3, #0]
}
 801df44:	4618      	mov	r0, r3
 801df46:	370c      	adds	r7, #12
 801df48:	46bd      	mov	sp, r7
 801df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df4e:	4770      	bx	lr
 801df50:	20000030 	.word	0x20000030
 801df54:	2000c010 	.word	0x2000c010

0801df58 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801df58:	b580      	push	{r7, lr}
 801df5a:	b084      	sub	sp, #16
 801df5c:	af00      	add	r7, sp, #0
 801df5e:	60f8      	str	r0, [r7, #12]
 801df60:	60b9      	str	r1, [r7, #8]
 801df62:	4613      	mov	r3, r2
 801df64:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801df66:	68fb      	ldr	r3, [r7, #12]
 801df68:	2b00      	cmp	r3, #0
 801df6a:	d105      	bne.n	801df78 <udp_input_local_match+0x20>
 801df6c:	4b27      	ldr	r3, [pc, #156]	; (801e00c <udp_input_local_match+0xb4>)
 801df6e:	2287      	movs	r2, #135	; 0x87
 801df70:	4927      	ldr	r1, [pc, #156]	; (801e010 <udp_input_local_match+0xb8>)
 801df72:	4828      	ldr	r0, [pc, #160]	; (801e014 <udp_input_local_match+0xbc>)
 801df74:	f004 fc1c 	bl	80227b0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801df78:	68bb      	ldr	r3, [r7, #8]
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	d105      	bne.n	801df8a <udp_input_local_match+0x32>
 801df7e:	4b23      	ldr	r3, [pc, #140]	; (801e00c <udp_input_local_match+0xb4>)
 801df80:	2288      	movs	r2, #136	; 0x88
 801df82:	4925      	ldr	r1, [pc, #148]	; (801e018 <udp_input_local_match+0xc0>)
 801df84:	4823      	ldr	r0, [pc, #140]	; (801e014 <udp_input_local_match+0xbc>)
 801df86:	f004 fc13 	bl	80227b0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801df8a:	68fb      	ldr	r3, [r7, #12]
 801df8c:	7a1b      	ldrb	r3, [r3, #8]
 801df8e:	2b00      	cmp	r3, #0
 801df90:	d00b      	beq.n	801dfaa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801df92:	68fb      	ldr	r3, [r7, #12]
 801df94:	7a1a      	ldrb	r2, [r3, #8]
 801df96:	4b21      	ldr	r3, [pc, #132]	; (801e01c <udp_input_local_match+0xc4>)
 801df98:	685b      	ldr	r3, [r3, #4]
 801df9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801df9e:	3301      	adds	r3, #1
 801dfa0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801dfa2:	429a      	cmp	r2, r3
 801dfa4:	d001      	beq.n	801dfaa <udp_input_local_match+0x52>
    return 0;
 801dfa6:	2300      	movs	r3, #0
 801dfa8:	e02b      	b.n	801e002 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801dfaa:	79fb      	ldrb	r3, [r7, #7]
 801dfac:	2b00      	cmp	r3, #0
 801dfae:	d018      	beq.n	801dfe2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801dfb0:	68fb      	ldr	r3, [r7, #12]
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d013      	beq.n	801dfde <udp_input_local_match+0x86>
 801dfb6:	68fb      	ldr	r3, [r7, #12]
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	2b00      	cmp	r3, #0
 801dfbc:	d00f      	beq.n	801dfde <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801dfbe:	4b17      	ldr	r3, [pc, #92]	; (801e01c <udp_input_local_match+0xc4>)
 801dfc0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801dfc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801dfc6:	d00a      	beq.n	801dfde <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801dfc8:	68fb      	ldr	r3, [r7, #12]
 801dfca:	681a      	ldr	r2, [r3, #0]
 801dfcc:	4b13      	ldr	r3, [pc, #76]	; (801e01c <udp_input_local_match+0xc4>)
 801dfce:	695b      	ldr	r3, [r3, #20]
 801dfd0:	405a      	eors	r2, r3
 801dfd2:	68bb      	ldr	r3, [r7, #8]
 801dfd4:	3308      	adds	r3, #8
 801dfd6:	681b      	ldr	r3, [r3, #0]
 801dfd8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	d110      	bne.n	801e000 <udp_input_local_match+0xa8>
          return 1;
 801dfde:	2301      	movs	r3, #1
 801dfe0:	e00f      	b.n	801e002 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801dfe2:	68fb      	ldr	r3, [r7, #12]
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	d009      	beq.n	801dffc <udp_input_local_match+0xa4>
 801dfe8:	68fb      	ldr	r3, [r7, #12]
 801dfea:	681b      	ldr	r3, [r3, #0]
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d005      	beq.n	801dffc <udp_input_local_match+0xa4>
 801dff0:	68fb      	ldr	r3, [r7, #12]
 801dff2:	681a      	ldr	r2, [r3, #0]
 801dff4:	4b09      	ldr	r3, [pc, #36]	; (801e01c <udp_input_local_match+0xc4>)
 801dff6:	695b      	ldr	r3, [r3, #20]
 801dff8:	429a      	cmp	r2, r3
 801dffa:	d101      	bne.n	801e000 <udp_input_local_match+0xa8>
        return 1;
 801dffc:	2301      	movs	r3, #1
 801dffe:	e000      	b.n	801e002 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801e000:	2300      	movs	r3, #0
}
 801e002:	4618      	mov	r0, r3
 801e004:	3710      	adds	r7, #16
 801e006:	46bd      	mov	sp, r7
 801e008:	bd80      	pop	{r7, pc}
 801e00a:	bf00      	nop
 801e00c:	080267e8 	.word	0x080267e8
 801e010:	08026818 	.word	0x08026818
 801e014:	0802683c 	.word	0x0802683c
 801e018:	08026864 	.word	0x08026864
 801e01c:	200066a0 	.word	0x200066a0

0801e020 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801e020:	b590      	push	{r4, r7, lr}
 801e022:	b08d      	sub	sp, #52	; 0x34
 801e024:	af02      	add	r7, sp, #8
 801e026:	6078      	str	r0, [r7, #4]
 801e028:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801e02a:	2300      	movs	r3, #0
 801e02c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801e02e:	687b      	ldr	r3, [r7, #4]
 801e030:	2b00      	cmp	r3, #0
 801e032:	d105      	bne.n	801e040 <udp_input+0x20>
 801e034:	4b7c      	ldr	r3, [pc, #496]	; (801e228 <udp_input+0x208>)
 801e036:	22cf      	movs	r2, #207	; 0xcf
 801e038:	497c      	ldr	r1, [pc, #496]	; (801e22c <udp_input+0x20c>)
 801e03a:	487d      	ldr	r0, [pc, #500]	; (801e230 <udp_input+0x210>)
 801e03c:	f004 fbb8 	bl	80227b0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801e040:	683b      	ldr	r3, [r7, #0]
 801e042:	2b00      	cmp	r3, #0
 801e044:	d105      	bne.n	801e052 <udp_input+0x32>
 801e046:	4b78      	ldr	r3, [pc, #480]	; (801e228 <udp_input+0x208>)
 801e048:	22d0      	movs	r2, #208	; 0xd0
 801e04a:	497a      	ldr	r1, [pc, #488]	; (801e234 <udp_input+0x214>)
 801e04c:	4878      	ldr	r0, [pc, #480]	; (801e230 <udp_input+0x210>)
 801e04e:	f004 fbaf 	bl	80227b0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	895b      	ldrh	r3, [r3, #10]
 801e056:	2b07      	cmp	r3, #7
 801e058:	d803      	bhi.n	801e062 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801e05a:	6878      	ldr	r0, [r7, #4]
 801e05c:	f7f9 f970 	bl	8017340 <pbuf_free>
    goto end;
 801e060:	e0de      	b.n	801e220 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801e062:	687b      	ldr	r3, [r7, #4]
 801e064:	685b      	ldr	r3, [r3, #4]
 801e066:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801e068:	4b73      	ldr	r3, [pc, #460]	; (801e238 <udp_input+0x218>)
 801e06a:	695b      	ldr	r3, [r3, #20]
 801e06c:	4a72      	ldr	r2, [pc, #456]	; (801e238 <udp_input+0x218>)
 801e06e:	6812      	ldr	r2, [r2, #0]
 801e070:	4611      	mov	r1, r2
 801e072:	4618      	mov	r0, r3
 801e074:	f001 ffee 	bl	8020054 <ip4_addr_isbroadcast_u32>
 801e078:	4603      	mov	r3, r0
 801e07a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801e07c:	697b      	ldr	r3, [r7, #20]
 801e07e:	881b      	ldrh	r3, [r3, #0]
 801e080:	b29b      	uxth	r3, r3
 801e082:	4618      	mov	r0, r3
 801e084:	f7f7 fd6a 	bl	8015b5c <lwip_htons>
 801e088:	4603      	mov	r3, r0
 801e08a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801e08c:	697b      	ldr	r3, [r7, #20]
 801e08e:	885b      	ldrh	r3, [r3, #2]
 801e090:	b29b      	uxth	r3, r3
 801e092:	4618      	mov	r0, r3
 801e094:	f7f7 fd62 	bl	8015b5c <lwip_htons>
 801e098:	4603      	mov	r3, r0
 801e09a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801e09c:	2300      	movs	r3, #0
 801e09e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801e0a0:	2300      	movs	r3, #0
 801e0a2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801e0a4:	2300      	movs	r3, #0
 801e0a6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801e0a8:	4b64      	ldr	r3, [pc, #400]	; (801e23c <udp_input+0x21c>)
 801e0aa:	681b      	ldr	r3, [r3, #0]
 801e0ac:	627b      	str	r3, [r7, #36]	; 0x24
 801e0ae:	e054      	b.n	801e15a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0b2:	8a5b      	ldrh	r3, [r3, #18]
 801e0b4:	89fa      	ldrh	r2, [r7, #14]
 801e0b6:	429a      	cmp	r2, r3
 801e0b8:	d14a      	bne.n	801e150 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801e0ba:	7cfb      	ldrb	r3, [r7, #19]
 801e0bc:	461a      	mov	r2, r3
 801e0be:	6839      	ldr	r1, [r7, #0]
 801e0c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e0c2:	f7ff ff49 	bl	801df58 <udp_input_local_match>
 801e0c6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d041      	beq.n	801e150 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801e0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0ce:	7c1b      	ldrb	r3, [r3, #16]
 801e0d0:	f003 0304 	and.w	r3, r3, #4
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	d11d      	bne.n	801e114 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801e0d8:	69fb      	ldr	r3, [r7, #28]
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d102      	bne.n	801e0e4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801e0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0e0:	61fb      	str	r3, [r7, #28]
 801e0e2:	e017      	b.n	801e114 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801e0e4:	7cfb      	ldrb	r3, [r7, #19]
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d014      	beq.n	801e114 <udp_input+0xf4>
 801e0ea:	4b53      	ldr	r3, [pc, #332]	; (801e238 <udp_input+0x218>)
 801e0ec:	695b      	ldr	r3, [r3, #20]
 801e0ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e0f2:	d10f      	bne.n	801e114 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801e0f4:	69fb      	ldr	r3, [r7, #28]
 801e0f6:	681a      	ldr	r2, [r3, #0]
 801e0f8:	683b      	ldr	r3, [r7, #0]
 801e0fa:	3304      	adds	r3, #4
 801e0fc:	681b      	ldr	r3, [r3, #0]
 801e0fe:	429a      	cmp	r2, r3
 801e100:	d008      	beq.n	801e114 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801e102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e104:	681a      	ldr	r2, [r3, #0]
 801e106:	683b      	ldr	r3, [r7, #0]
 801e108:	3304      	adds	r3, #4
 801e10a:	681b      	ldr	r3, [r3, #0]
 801e10c:	429a      	cmp	r2, r3
 801e10e:	d101      	bne.n	801e114 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801e110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e112:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801e114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e116:	8a9b      	ldrh	r3, [r3, #20]
 801e118:	8a3a      	ldrh	r2, [r7, #16]
 801e11a:	429a      	cmp	r2, r3
 801e11c:	d118      	bne.n	801e150 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801e11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e120:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801e122:	2b00      	cmp	r3, #0
 801e124:	d005      	beq.n	801e132 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801e126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e128:	685a      	ldr	r2, [r3, #4]
 801e12a:	4b43      	ldr	r3, [pc, #268]	; (801e238 <udp_input+0x218>)
 801e12c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801e12e:	429a      	cmp	r2, r3
 801e130:	d10e      	bne.n	801e150 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801e132:	6a3b      	ldr	r3, [r7, #32]
 801e134:	2b00      	cmp	r3, #0
 801e136:	d014      	beq.n	801e162 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801e138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e13a:	68da      	ldr	r2, [r3, #12]
 801e13c:	6a3b      	ldr	r3, [r7, #32]
 801e13e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801e140:	4b3e      	ldr	r3, [pc, #248]	; (801e23c <udp_input+0x21c>)
 801e142:	681a      	ldr	r2, [r3, #0]
 801e144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e146:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801e148:	4a3c      	ldr	r2, [pc, #240]	; (801e23c <udp_input+0x21c>)
 801e14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e14c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801e14e:	e008      	b.n	801e162 <udp_input+0x142>
      }
    }

    prev = pcb;
 801e150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e152:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801e154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e156:	68db      	ldr	r3, [r3, #12]
 801e158:	627b      	str	r3, [r7, #36]	; 0x24
 801e15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e15c:	2b00      	cmp	r3, #0
 801e15e:	d1a7      	bne.n	801e0b0 <udp_input+0x90>
 801e160:	e000      	b.n	801e164 <udp_input+0x144>
        break;
 801e162:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e166:	2b00      	cmp	r3, #0
 801e168:	d101      	bne.n	801e16e <udp_input+0x14e>
    pcb = uncon_pcb;
 801e16a:	69fb      	ldr	r3, [r7, #28]
 801e16c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801e16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e170:	2b00      	cmp	r3, #0
 801e172:	d002      	beq.n	801e17a <udp_input+0x15a>
    for_us = 1;
 801e174:	2301      	movs	r3, #1
 801e176:	76fb      	strb	r3, [r7, #27]
 801e178:	e00a      	b.n	801e190 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801e17a:	683b      	ldr	r3, [r7, #0]
 801e17c:	3304      	adds	r3, #4
 801e17e:	681a      	ldr	r2, [r3, #0]
 801e180:	4b2d      	ldr	r3, [pc, #180]	; (801e238 <udp_input+0x218>)
 801e182:	695b      	ldr	r3, [r3, #20]
 801e184:	429a      	cmp	r2, r3
 801e186:	bf0c      	ite	eq
 801e188:	2301      	moveq	r3, #1
 801e18a:	2300      	movne	r3, #0
 801e18c:	b2db      	uxtb	r3, r3
 801e18e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801e190:	7efb      	ldrb	r3, [r7, #27]
 801e192:	2b00      	cmp	r3, #0
 801e194:	d041      	beq.n	801e21a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801e196:	2108      	movs	r1, #8
 801e198:	6878      	ldr	r0, [r7, #4]
 801e19a:	f7f9 f84b 	bl	8017234 <pbuf_remove_header>
 801e19e:	4603      	mov	r3, r0
 801e1a0:	2b00      	cmp	r3, #0
 801e1a2:	d00a      	beq.n	801e1ba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801e1a4:	4b20      	ldr	r3, [pc, #128]	; (801e228 <udp_input+0x208>)
 801e1a6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801e1aa:	4925      	ldr	r1, [pc, #148]	; (801e240 <udp_input+0x220>)
 801e1ac:	4820      	ldr	r0, [pc, #128]	; (801e230 <udp_input+0x210>)
 801e1ae:	f004 faff 	bl	80227b0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801e1b2:	6878      	ldr	r0, [r7, #4]
 801e1b4:	f7f9 f8c4 	bl	8017340 <pbuf_free>
      goto end;
 801e1b8:	e032      	b.n	801e220 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801e1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d012      	beq.n	801e1e6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1c2:	699b      	ldr	r3, [r3, #24]
 801e1c4:	2b00      	cmp	r3, #0
 801e1c6:	d00a      	beq.n	801e1de <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801e1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1ca:	699c      	ldr	r4, [r3, #24]
 801e1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1ce:	69d8      	ldr	r0, [r3, #28]
 801e1d0:	8a3b      	ldrh	r3, [r7, #16]
 801e1d2:	9300      	str	r3, [sp, #0]
 801e1d4:	4b1b      	ldr	r3, [pc, #108]	; (801e244 <udp_input+0x224>)
 801e1d6:	687a      	ldr	r2, [r7, #4]
 801e1d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e1da:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801e1dc:	e021      	b.n	801e222 <udp_input+0x202>
        pbuf_free(p);
 801e1de:	6878      	ldr	r0, [r7, #4]
 801e1e0:	f7f9 f8ae 	bl	8017340 <pbuf_free>
        goto end;
 801e1e4:	e01c      	b.n	801e220 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801e1e6:	7cfb      	ldrb	r3, [r7, #19]
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	d112      	bne.n	801e212 <udp_input+0x1f2>
 801e1ec:	4b12      	ldr	r3, [pc, #72]	; (801e238 <udp_input+0x218>)
 801e1ee:	695b      	ldr	r3, [r3, #20]
 801e1f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e1f4:	2be0      	cmp	r3, #224	; 0xe0
 801e1f6:	d00c      	beq.n	801e212 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801e1f8:	4b0f      	ldr	r3, [pc, #60]	; (801e238 <udp_input+0x218>)
 801e1fa:	899b      	ldrh	r3, [r3, #12]
 801e1fc:	3308      	adds	r3, #8
 801e1fe:	b29b      	uxth	r3, r3
 801e200:	b21b      	sxth	r3, r3
 801e202:	4619      	mov	r1, r3
 801e204:	6878      	ldr	r0, [r7, #4]
 801e206:	f7f9 f888 	bl	801731a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801e20a:	2103      	movs	r1, #3
 801e20c:	6878      	ldr	r0, [r7, #4]
 801e20e:	f001 fc01 	bl	801fa14 <icmp_dest_unreach>
      pbuf_free(p);
 801e212:	6878      	ldr	r0, [r7, #4]
 801e214:	f7f9 f894 	bl	8017340 <pbuf_free>
  return;
 801e218:	e003      	b.n	801e222 <udp_input+0x202>
    pbuf_free(p);
 801e21a:	6878      	ldr	r0, [r7, #4]
 801e21c:	f7f9 f890 	bl	8017340 <pbuf_free>
  return;
 801e220:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801e222:	372c      	adds	r7, #44	; 0x2c
 801e224:	46bd      	mov	sp, r7
 801e226:	bd90      	pop	{r4, r7, pc}
 801e228:	080267e8 	.word	0x080267e8
 801e22c:	0802688c 	.word	0x0802688c
 801e230:	0802683c 	.word	0x0802683c
 801e234:	080268a4 	.word	0x080268a4
 801e238:	200066a0 	.word	0x200066a0
 801e23c:	2000c010 	.word	0x2000c010
 801e240:	080268c0 	.word	0x080268c0
 801e244:	200066b0 	.word	0x200066b0

0801e248 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801e248:	b580      	push	{r7, lr}
 801e24a:	b082      	sub	sp, #8
 801e24c:	af00      	add	r7, sp, #0
 801e24e:	6078      	str	r0, [r7, #4]
 801e250:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	2b00      	cmp	r3, #0
 801e256:	d109      	bne.n	801e26c <udp_send+0x24>
 801e258:	4b11      	ldr	r3, [pc, #68]	; (801e2a0 <udp_send+0x58>)
 801e25a:	f240 12d5 	movw	r2, #469	; 0x1d5
 801e25e:	4911      	ldr	r1, [pc, #68]	; (801e2a4 <udp_send+0x5c>)
 801e260:	4811      	ldr	r0, [pc, #68]	; (801e2a8 <udp_send+0x60>)
 801e262:	f004 faa5 	bl	80227b0 <iprintf>
 801e266:	f06f 030f 	mvn.w	r3, #15
 801e26a:	e015      	b.n	801e298 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801e26c:	683b      	ldr	r3, [r7, #0]
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d109      	bne.n	801e286 <udp_send+0x3e>
 801e272:	4b0b      	ldr	r3, [pc, #44]	; (801e2a0 <udp_send+0x58>)
 801e274:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801e278:	490c      	ldr	r1, [pc, #48]	; (801e2ac <udp_send+0x64>)
 801e27a:	480b      	ldr	r0, [pc, #44]	; (801e2a8 <udp_send+0x60>)
 801e27c:	f004 fa98 	bl	80227b0 <iprintf>
 801e280:	f06f 030f 	mvn.w	r3, #15
 801e284:	e008      	b.n	801e298 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	1d1a      	adds	r2, r3, #4
 801e28a:	687b      	ldr	r3, [r7, #4]
 801e28c:	8a9b      	ldrh	r3, [r3, #20]
 801e28e:	6839      	ldr	r1, [r7, #0]
 801e290:	6878      	ldr	r0, [r7, #4]
 801e292:	f000 f80d 	bl	801e2b0 <udp_sendto>
 801e296:	4603      	mov	r3, r0
}
 801e298:	4618      	mov	r0, r3
 801e29a:	3708      	adds	r7, #8
 801e29c:	46bd      	mov	sp, r7
 801e29e:	bd80      	pop	{r7, pc}
 801e2a0:	080267e8 	.word	0x080267e8
 801e2a4:	080268dc 	.word	0x080268dc
 801e2a8:	0802683c 	.word	0x0802683c
 801e2ac:	080268f4 	.word	0x080268f4

0801e2b0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801e2b0:	b580      	push	{r7, lr}
 801e2b2:	b088      	sub	sp, #32
 801e2b4:	af02      	add	r7, sp, #8
 801e2b6:	60f8      	str	r0, [r7, #12]
 801e2b8:	60b9      	str	r1, [r7, #8]
 801e2ba:	607a      	str	r2, [r7, #4]
 801e2bc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801e2be:	68fb      	ldr	r3, [r7, #12]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d109      	bne.n	801e2d8 <udp_sendto+0x28>
 801e2c4:	4b23      	ldr	r3, [pc, #140]	; (801e354 <udp_sendto+0xa4>)
 801e2c6:	f44f 7206 	mov.w	r2, #536	; 0x218
 801e2ca:	4923      	ldr	r1, [pc, #140]	; (801e358 <udp_sendto+0xa8>)
 801e2cc:	4823      	ldr	r0, [pc, #140]	; (801e35c <udp_sendto+0xac>)
 801e2ce:	f004 fa6f 	bl	80227b0 <iprintf>
 801e2d2:	f06f 030f 	mvn.w	r3, #15
 801e2d6:	e038      	b.n	801e34a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801e2d8:	68bb      	ldr	r3, [r7, #8]
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	d109      	bne.n	801e2f2 <udp_sendto+0x42>
 801e2de:	4b1d      	ldr	r3, [pc, #116]	; (801e354 <udp_sendto+0xa4>)
 801e2e0:	f240 2219 	movw	r2, #537	; 0x219
 801e2e4:	491e      	ldr	r1, [pc, #120]	; (801e360 <udp_sendto+0xb0>)
 801e2e6:	481d      	ldr	r0, [pc, #116]	; (801e35c <udp_sendto+0xac>)
 801e2e8:	f004 fa62 	bl	80227b0 <iprintf>
 801e2ec:	f06f 030f 	mvn.w	r3, #15
 801e2f0:	e02b      	b.n	801e34a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	2b00      	cmp	r3, #0
 801e2f6:	d109      	bne.n	801e30c <udp_sendto+0x5c>
 801e2f8:	4b16      	ldr	r3, [pc, #88]	; (801e354 <udp_sendto+0xa4>)
 801e2fa:	f240 221a 	movw	r2, #538	; 0x21a
 801e2fe:	4919      	ldr	r1, [pc, #100]	; (801e364 <udp_sendto+0xb4>)
 801e300:	4816      	ldr	r0, [pc, #88]	; (801e35c <udp_sendto+0xac>)
 801e302:	f004 fa55 	bl	80227b0 <iprintf>
 801e306:	f06f 030f 	mvn.w	r3, #15
 801e30a:	e01e      	b.n	801e34a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801e30c:	68fb      	ldr	r3, [r7, #12]
 801e30e:	7a1b      	ldrb	r3, [r3, #8]
 801e310:	2b00      	cmp	r3, #0
 801e312:	d006      	beq.n	801e322 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801e314:	68fb      	ldr	r3, [r7, #12]
 801e316:	7a1b      	ldrb	r3, [r3, #8]
 801e318:	4618      	mov	r0, r3
 801e31a:	f7f8 fc83 	bl	8016c24 <netif_get_by_index>
 801e31e:	6178      	str	r0, [r7, #20]
 801e320:	e003      	b.n	801e32a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801e322:	6878      	ldr	r0, [r7, #4]
 801e324:	f001 fc00 	bl	801fb28 <ip4_route>
 801e328:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801e32a:	697b      	ldr	r3, [r7, #20]
 801e32c:	2b00      	cmp	r3, #0
 801e32e:	d102      	bne.n	801e336 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801e330:	f06f 0303 	mvn.w	r3, #3
 801e334:	e009      	b.n	801e34a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801e336:	887a      	ldrh	r2, [r7, #2]
 801e338:	697b      	ldr	r3, [r7, #20]
 801e33a:	9300      	str	r3, [sp, #0]
 801e33c:	4613      	mov	r3, r2
 801e33e:	687a      	ldr	r2, [r7, #4]
 801e340:	68b9      	ldr	r1, [r7, #8]
 801e342:	68f8      	ldr	r0, [r7, #12]
 801e344:	f000 f810 	bl	801e368 <udp_sendto_if>
 801e348:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801e34a:	4618      	mov	r0, r3
 801e34c:	3718      	adds	r7, #24
 801e34e:	46bd      	mov	sp, r7
 801e350:	bd80      	pop	{r7, pc}
 801e352:	bf00      	nop
 801e354:	080267e8 	.word	0x080267e8
 801e358:	0802690c 	.word	0x0802690c
 801e35c:	0802683c 	.word	0x0802683c
 801e360:	08026924 	.word	0x08026924
 801e364:	08026940 	.word	0x08026940

0801e368 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801e368:	b580      	push	{r7, lr}
 801e36a:	b088      	sub	sp, #32
 801e36c:	af02      	add	r7, sp, #8
 801e36e:	60f8      	str	r0, [r7, #12]
 801e370:	60b9      	str	r1, [r7, #8]
 801e372:	607a      	str	r2, [r7, #4]
 801e374:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801e376:	68fb      	ldr	r3, [r7, #12]
 801e378:	2b00      	cmp	r3, #0
 801e37a:	d109      	bne.n	801e390 <udp_sendto_if+0x28>
 801e37c:	4b2e      	ldr	r3, [pc, #184]	; (801e438 <udp_sendto_if+0xd0>)
 801e37e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e382:	492e      	ldr	r1, [pc, #184]	; (801e43c <udp_sendto_if+0xd4>)
 801e384:	482e      	ldr	r0, [pc, #184]	; (801e440 <udp_sendto_if+0xd8>)
 801e386:	f004 fa13 	bl	80227b0 <iprintf>
 801e38a:	f06f 030f 	mvn.w	r3, #15
 801e38e:	e04f      	b.n	801e430 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801e390:	68bb      	ldr	r3, [r7, #8]
 801e392:	2b00      	cmp	r3, #0
 801e394:	d109      	bne.n	801e3aa <udp_sendto_if+0x42>
 801e396:	4b28      	ldr	r3, [pc, #160]	; (801e438 <udp_sendto_if+0xd0>)
 801e398:	f240 2281 	movw	r2, #641	; 0x281
 801e39c:	4929      	ldr	r1, [pc, #164]	; (801e444 <udp_sendto_if+0xdc>)
 801e39e:	4828      	ldr	r0, [pc, #160]	; (801e440 <udp_sendto_if+0xd8>)
 801e3a0:	f004 fa06 	bl	80227b0 <iprintf>
 801e3a4:	f06f 030f 	mvn.w	r3, #15
 801e3a8:	e042      	b.n	801e430 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	2b00      	cmp	r3, #0
 801e3ae:	d109      	bne.n	801e3c4 <udp_sendto_if+0x5c>
 801e3b0:	4b21      	ldr	r3, [pc, #132]	; (801e438 <udp_sendto_if+0xd0>)
 801e3b2:	f240 2282 	movw	r2, #642	; 0x282
 801e3b6:	4924      	ldr	r1, [pc, #144]	; (801e448 <udp_sendto_if+0xe0>)
 801e3b8:	4821      	ldr	r0, [pc, #132]	; (801e440 <udp_sendto_if+0xd8>)
 801e3ba:	f004 f9f9 	bl	80227b0 <iprintf>
 801e3be:	f06f 030f 	mvn.w	r3, #15
 801e3c2:	e035      	b.n	801e430 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801e3c4:	6a3b      	ldr	r3, [r7, #32]
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	d109      	bne.n	801e3de <udp_sendto_if+0x76>
 801e3ca:	4b1b      	ldr	r3, [pc, #108]	; (801e438 <udp_sendto_if+0xd0>)
 801e3cc:	f240 2283 	movw	r2, #643	; 0x283
 801e3d0:	491e      	ldr	r1, [pc, #120]	; (801e44c <udp_sendto_if+0xe4>)
 801e3d2:	481b      	ldr	r0, [pc, #108]	; (801e440 <udp_sendto_if+0xd8>)
 801e3d4:	f004 f9ec 	bl	80227b0 <iprintf>
 801e3d8:	f06f 030f 	mvn.w	r3, #15
 801e3dc:	e028      	b.n	801e430 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801e3de:	68fb      	ldr	r3, [r7, #12]
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	d009      	beq.n	801e3f8 <udp_sendto_if+0x90>
 801e3e4:	68fb      	ldr	r3, [r7, #12]
 801e3e6:	681b      	ldr	r3, [r3, #0]
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	d005      	beq.n	801e3f8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801e3ec:	68fb      	ldr	r3, [r7, #12]
 801e3ee:	681b      	ldr	r3, [r3, #0]
 801e3f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801e3f4:	2be0      	cmp	r3, #224	; 0xe0
 801e3f6:	d103      	bne.n	801e400 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801e3f8:	6a3b      	ldr	r3, [r7, #32]
 801e3fa:	3304      	adds	r3, #4
 801e3fc:	617b      	str	r3, [r7, #20]
 801e3fe:	e00b      	b.n	801e418 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801e400:	68fb      	ldr	r3, [r7, #12]
 801e402:	681a      	ldr	r2, [r3, #0]
 801e404:	6a3b      	ldr	r3, [r7, #32]
 801e406:	3304      	adds	r3, #4
 801e408:	681b      	ldr	r3, [r3, #0]
 801e40a:	429a      	cmp	r2, r3
 801e40c:	d002      	beq.n	801e414 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801e40e:	f06f 0303 	mvn.w	r3, #3
 801e412:	e00d      	b.n	801e430 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801e414:	68fb      	ldr	r3, [r7, #12]
 801e416:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801e418:	887a      	ldrh	r2, [r7, #2]
 801e41a:	697b      	ldr	r3, [r7, #20]
 801e41c:	9301      	str	r3, [sp, #4]
 801e41e:	6a3b      	ldr	r3, [r7, #32]
 801e420:	9300      	str	r3, [sp, #0]
 801e422:	4613      	mov	r3, r2
 801e424:	687a      	ldr	r2, [r7, #4]
 801e426:	68b9      	ldr	r1, [r7, #8]
 801e428:	68f8      	ldr	r0, [r7, #12]
 801e42a:	f000 f811 	bl	801e450 <udp_sendto_if_src>
 801e42e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801e430:	4618      	mov	r0, r3
 801e432:	3718      	adds	r7, #24
 801e434:	46bd      	mov	sp, r7
 801e436:	bd80      	pop	{r7, pc}
 801e438:	080267e8 	.word	0x080267e8
 801e43c:	0802695c 	.word	0x0802695c
 801e440:	0802683c 	.word	0x0802683c
 801e444:	08026978 	.word	0x08026978
 801e448:	08026994 	.word	0x08026994
 801e44c:	080269b4 	.word	0x080269b4

0801e450 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801e450:	b580      	push	{r7, lr}
 801e452:	b08c      	sub	sp, #48	; 0x30
 801e454:	af04      	add	r7, sp, #16
 801e456:	60f8      	str	r0, [r7, #12]
 801e458:	60b9      	str	r1, [r7, #8]
 801e45a:	607a      	str	r2, [r7, #4]
 801e45c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801e45e:	68fb      	ldr	r3, [r7, #12]
 801e460:	2b00      	cmp	r3, #0
 801e462:	d109      	bne.n	801e478 <udp_sendto_if_src+0x28>
 801e464:	4b65      	ldr	r3, [pc, #404]	; (801e5fc <udp_sendto_if_src+0x1ac>)
 801e466:	f240 22d1 	movw	r2, #721	; 0x2d1
 801e46a:	4965      	ldr	r1, [pc, #404]	; (801e600 <udp_sendto_if_src+0x1b0>)
 801e46c:	4865      	ldr	r0, [pc, #404]	; (801e604 <udp_sendto_if_src+0x1b4>)
 801e46e:	f004 f99f 	bl	80227b0 <iprintf>
 801e472:	f06f 030f 	mvn.w	r3, #15
 801e476:	e0bc      	b.n	801e5f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801e478:	68bb      	ldr	r3, [r7, #8]
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	d109      	bne.n	801e492 <udp_sendto_if_src+0x42>
 801e47e:	4b5f      	ldr	r3, [pc, #380]	; (801e5fc <udp_sendto_if_src+0x1ac>)
 801e480:	f240 22d2 	movw	r2, #722	; 0x2d2
 801e484:	4960      	ldr	r1, [pc, #384]	; (801e608 <udp_sendto_if_src+0x1b8>)
 801e486:	485f      	ldr	r0, [pc, #380]	; (801e604 <udp_sendto_if_src+0x1b4>)
 801e488:	f004 f992 	bl	80227b0 <iprintf>
 801e48c:	f06f 030f 	mvn.w	r3, #15
 801e490:	e0af      	b.n	801e5f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	2b00      	cmp	r3, #0
 801e496:	d109      	bne.n	801e4ac <udp_sendto_if_src+0x5c>
 801e498:	4b58      	ldr	r3, [pc, #352]	; (801e5fc <udp_sendto_if_src+0x1ac>)
 801e49a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801e49e:	495b      	ldr	r1, [pc, #364]	; (801e60c <udp_sendto_if_src+0x1bc>)
 801e4a0:	4858      	ldr	r0, [pc, #352]	; (801e604 <udp_sendto_if_src+0x1b4>)
 801e4a2:	f004 f985 	bl	80227b0 <iprintf>
 801e4a6:	f06f 030f 	mvn.w	r3, #15
 801e4aa:	e0a2      	b.n	801e5f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801e4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4ae:	2b00      	cmp	r3, #0
 801e4b0:	d109      	bne.n	801e4c6 <udp_sendto_if_src+0x76>
 801e4b2:	4b52      	ldr	r3, [pc, #328]	; (801e5fc <udp_sendto_if_src+0x1ac>)
 801e4b4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801e4b8:	4955      	ldr	r1, [pc, #340]	; (801e610 <udp_sendto_if_src+0x1c0>)
 801e4ba:	4852      	ldr	r0, [pc, #328]	; (801e604 <udp_sendto_if_src+0x1b4>)
 801e4bc:	f004 f978 	bl	80227b0 <iprintf>
 801e4c0:	f06f 030f 	mvn.w	r3, #15
 801e4c4:	e095      	b.n	801e5f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801e4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	d109      	bne.n	801e4e0 <udp_sendto_if_src+0x90>
 801e4cc:	4b4b      	ldr	r3, [pc, #300]	; (801e5fc <udp_sendto_if_src+0x1ac>)
 801e4ce:	f240 22d5 	movw	r2, #725	; 0x2d5
 801e4d2:	4950      	ldr	r1, [pc, #320]	; (801e614 <udp_sendto_if_src+0x1c4>)
 801e4d4:	484b      	ldr	r0, [pc, #300]	; (801e604 <udp_sendto_if_src+0x1b4>)
 801e4d6:	f004 f96b 	bl	80227b0 <iprintf>
 801e4da:	f06f 030f 	mvn.w	r3, #15
 801e4de:	e088      	b.n	801e5f2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801e4e0:	68fb      	ldr	r3, [r7, #12]
 801e4e2:	8a5b      	ldrh	r3, [r3, #18]
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	d10f      	bne.n	801e508 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801e4e8:	68f9      	ldr	r1, [r7, #12]
 801e4ea:	68fb      	ldr	r3, [r7, #12]
 801e4ec:	8a5b      	ldrh	r3, [r3, #18]
 801e4ee:	461a      	mov	r2, r3
 801e4f0:	68f8      	ldr	r0, [r7, #12]
 801e4f2:	f000 f893 	bl	801e61c <udp_bind>
 801e4f6:	4603      	mov	r3, r0
 801e4f8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801e4fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801e4fe:	2b00      	cmp	r3, #0
 801e500:	d002      	beq.n	801e508 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801e502:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801e506:	e074      	b.n	801e5f2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801e508:	68bb      	ldr	r3, [r7, #8]
 801e50a:	891b      	ldrh	r3, [r3, #8]
 801e50c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801e510:	4293      	cmp	r3, r2
 801e512:	d902      	bls.n	801e51a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801e514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e518:	e06b      	b.n	801e5f2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801e51a:	2108      	movs	r1, #8
 801e51c:	68b8      	ldr	r0, [r7, #8]
 801e51e:	f7f8 fe79 	bl	8017214 <pbuf_add_header>
 801e522:	4603      	mov	r3, r0
 801e524:	2b00      	cmp	r3, #0
 801e526:	d015      	beq.n	801e554 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801e528:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e52c:	2108      	movs	r1, #8
 801e52e:	2022      	movs	r0, #34	; 0x22
 801e530:	f7f8 fc22 	bl	8016d78 <pbuf_alloc>
 801e534:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801e536:	69fb      	ldr	r3, [r7, #28]
 801e538:	2b00      	cmp	r3, #0
 801e53a:	d102      	bne.n	801e542 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801e53c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e540:	e057      	b.n	801e5f2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801e542:	68bb      	ldr	r3, [r7, #8]
 801e544:	891b      	ldrh	r3, [r3, #8]
 801e546:	2b00      	cmp	r3, #0
 801e548:	d006      	beq.n	801e558 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801e54a:	68b9      	ldr	r1, [r7, #8]
 801e54c:	69f8      	ldr	r0, [r7, #28]
 801e54e:	f7f9 f81b 	bl	8017588 <pbuf_chain>
 801e552:	e001      	b.n	801e558 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801e554:	68bb      	ldr	r3, [r7, #8]
 801e556:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801e558:	69fb      	ldr	r3, [r7, #28]
 801e55a:	895b      	ldrh	r3, [r3, #10]
 801e55c:	2b07      	cmp	r3, #7
 801e55e:	d806      	bhi.n	801e56e <udp_sendto_if_src+0x11e>
 801e560:	4b26      	ldr	r3, [pc, #152]	; (801e5fc <udp_sendto_if_src+0x1ac>)
 801e562:	f240 320d 	movw	r2, #781	; 0x30d
 801e566:	492c      	ldr	r1, [pc, #176]	; (801e618 <udp_sendto_if_src+0x1c8>)
 801e568:	4826      	ldr	r0, [pc, #152]	; (801e604 <udp_sendto_if_src+0x1b4>)
 801e56a:	f004 f921 	bl	80227b0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801e56e:	69fb      	ldr	r3, [r7, #28]
 801e570:	685b      	ldr	r3, [r3, #4]
 801e572:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801e574:	68fb      	ldr	r3, [r7, #12]
 801e576:	8a5b      	ldrh	r3, [r3, #18]
 801e578:	4618      	mov	r0, r3
 801e57a:	f7f7 faef 	bl	8015b5c <lwip_htons>
 801e57e:	4603      	mov	r3, r0
 801e580:	461a      	mov	r2, r3
 801e582:	697b      	ldr	r3, [r7, #20]
 801e584:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801e586:	887b      	ldrh	r3, [r7, #2]
 801e588:	4618      	mov	r0, r3
 801e58a:	f7f7 fae7 	bl	8015b5c <lwip_htons>
 801e58e:	4603      	mov	r3, r0
 801e590:	461a      	mov	r2, r3
 801e592:	697b      	ldr	r3, [r7, #20]
 801e594:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801e596:	697b      	ldr	r3, [r7, #20]
 801e598:	2200      	movs	r2, #0
 801e59a:	719a      	strb	r2, [r3, #6]
 801e59c:	2200      	movs	r2, #0
 801e59e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801e5a0:	69fb      	ldr	r3, [r7, #28]
 801e5a2:	891b      	ldrh	r3, [r3, #8]
 801e5a4:	4618      	mov	r0, r3
 801e5a6:	f7f7 fad9 	bl	8015b5c <lwip_htons>
 801e5aa:	4603      	mov	r3, r0
 801e5ac:	461a      	mov	r2, r3
 801e5ae:	697b      	ldr	r3, [r7, #20]
 801e5b0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801e5b2:	2311      	movs	r3, #17
 801e5b4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801e5b6:	68fb      	ldr	r3, [r7, #12]
 801e5b8:	7adb      	ldrb	r3, [r3, #11]
 801e5ba:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801e5bc:	68fb      	ldr	r3, [r7, #12]
 801e5be:	7a9b      	ldrb	r3, [r3, #10]
 801e5c0:	7cb9      	ldrb	r1, [r7, #18]
 801e5c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e5c4:	9202      	str	r2, [sp, #8]
 801e5c6:	7cfa      	ldrb	r2, [r7, #19]
 801e5c8:	9201      	str	r2, [sp, #4]
 801e5ca:	9300      	str	r3, [sp, #0]
 801e5cc:	460b      	mov	r3, r1
 801e5ce:	687a      	ldr	r2, [r7, #4]
 801e5d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e5d2:	69f8      	ldr	r0, [r7, #28]
 801e5d4:	f001 fc90 	bl	801fef8 <ip4_output_if_src>
 801e5d8:	4603      	mov	r3, r0
 801e5da:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801e5dc:	69fa      	ldr	r2, [r7, #28]
 801e5de:	68bb      	ldr	r3, [r7, #8]
 801e5e0:	429a      	cmp	r2, r3
 801e5e2:	d004      	beq.n	801e5ee <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801e5e4:	69f8      	ldr	r0, [r7, #28]
 801e5e6:	f7f8 feab 	bl	8017340 <pbuf_free>
    q = NULL;
 801e5ea:	2300      	movs	r3, #0
 801e5ec:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801e5ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801e5f2:	4618      	mov	r0, r3
 801e5f4:	3720      	adds	r7, #32
 801e5f6:	46bd      	mov	sp, r7
 801e5f8:	bd80      	pop	{r7, pc}
 801e5fa:	bf00      	nop
 801e5fc:	080267e8 	.word	0x080267e8
 801e600:	080269d4 	.word	0x080269d4
 801e604:	0802683c 	.word	0x0802683c
 801e608:	080269f4 	.word	0x080269f4
 801e60c:	08026a14 	.word	0x08026a14
 801e610:	08026a38 	.word	0x08026a38
 801e614:	08026a5c 	.word	0x08026a5c
 801e618:	08026a80 	.word	0x08026a80

0801e61c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801e61c:	b580      	push	{r7, lr}
 801e61e:	b086      	sub	sp, #24
 801e620:	af00      	add	r7, sp, #0
 801e622:	60f8      	str	r0, [r7, #12]
 801e624:	60b9      	str	r1, [r7, #8]
 801e626:	4613      	mov	r3, r2
 801e628:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801e62a:	68bb      	ldr	r3, [r7, #8]
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	d101      	bne.n	801e634 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801e630:	4b39      	ldr	r3, [pc, #228]	; (801e718 <udp_bind+0xfc>)
 801e632:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801e634:	68fb      	ldr	r3, [r7, #12]
 801e636:	2b00      	cmp	r3, #0
 801e638:	d109      	bne.n	801e64e <udp_bind+0x32>
 801e63a:	4b38      	ldr	r3, [pc, #224]	; (801e71c <udp_bind+0x100>)
 801e63c:	f240 32b7 	movw	r2, #951	; 0x3b7
 801e640:	4937      	ldr	r1, [pc, #220]	; (801e720 <udp_bind+0x104>)
 801e642:	4838      	ldr	r0, [pc, #224]	; (801e724 <udp_bind+0x108>)
 801e644:	f004 f8b4 	bl	80227b0 <iprintf>
 801e648:	f06f 030f 	mvn.w	r3, #15
 801e64c:	e060      	b.n	801e710 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801e64e:	2300      	movs	r3, #0
 801e650:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e652:	4b35      	ldr	r3, [pc, #212]	; (801e728 <udp_bind+0x10c>)
 801e654:	681b      	ldr	r3, [r3, #0]
 801e656:	617b      	str	r3, [r7, #20]
 801e658:	e009      	b.n	801e66e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801e65a:	68fa      	ldr	r2, [r7, #12]
 801e65c:	697b      	ldr	r3, [r7, #20]
 801e65e:	429a      	cmp	r2, r3
 801e660:	d102      	bne.n	801e668 <udp_bind+0x4c>
      rebind = 1;
 801e662:	2301      	movs	r3, #1
 801e664:	74fb      	strb	r3, [r7, #19]
      break;
 801e666:	e005      	b.n	801e674 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e668:	697b      	ldr	r3, [r7, #20]
 801e66a:	68db      	ldr	r3, [r3, #12]
 801e66c:	617b      	str	r3, [r7, #20]
 801e66e:	697b      	ldr	r3, [r7, #20]
 801e670:	2b00      	cmp	r3, #0
 801e672:	d1f2      	bne.n	801e65a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801e674:	88fb      	ldrh	r3, [r7, #6]
 801e676:	2b00      	cmp	r3, #0
 801e678:	d109      	bne.n	801e68e <udp_bind+0x72>
    port = udp_new_port();
 801e67a:	f7ff fc35 	bl	801dee8 <udp_new_port>
 801e67e:	4603      	mov	r3, r0
 801e680:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801e682:	88fb      	ldrh	r3, [r7, #6]
 801e684:	2b00      	cmp	r3, #0
 801e686:	d12c      	bne.n	801e6e2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801e688:	f06f 0307 	mvn.w	r3, #7
 801e68c:	e040      	b.n	801e710 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e68e:	4b26      	ldr	r3, [pc, #152]	; (801e728 <udp_bind+0x10c>)
 801e690:	681b      	ldr	r3, [r3, #0]
 801e692:	617b      	str	r3, [r7, #20]
 801e694:	e022      	b.n	801e6dc <udp_bind+0xc0>
      if (pcb != ipcb) {
 801e696:	68fa      	ldr	r2, [r7, #12]
 801e698:	697b      	ldr	r3, [r7, #20]
 801e69a:	429a      	cmp	r2, r3
 801e69c:	d01b      	beq.n	801e6d6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801e69e:	697b      	ldr	r3, [r7, #20]
 801e6a0:	8a5b      	ldrh	r3, [r3, #18]
 801e6a2:	88fa      	ldrh	r2, [r7, #6]
 801e6a4:	429a      	cmp	r2, r3
 801e6a6:	d116      	bne.n	801e6d6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801e6a8:	697b      	ldr	r3, [r7, #20]
 801e6aa:	681a      	ldr	r2, [r3, #0]
 801e6ac:	68bb      	ldr	r3, [r7, #8]
 801e6ae:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801e6b0:	429a      	cmp	r2, r3
 801e6b2:	d00d      	beq.n	801e6d0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801e6b4:	68bb      	ldr	r3, [r7, #8]
 801e6b6:	2b00      	cmp	r3, #0
 801e6b8:	d00a      	beq.n	801e6d0 <udp_bind+0xb4>
 801e6ba:	68bb      	ldr	r3, [r7, #8]
 801e6bc:	681b      	ldr	r3, [r3, #0]
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	d006      	beq.n	801e6d0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801e6c2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801e6c4:	2b00      	cmp	r3, #0
 801e6c6:	d003      	beq.n	801e6d0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801e6c8:	697b      	ldr	r3, [r7, #20]
 801e6ca:	681b      	ldr	r3, [r3, #0]
 801e6cc:	2b00      	cmp	r3, #0
 801e6ce:	d102      	bne.n	801e6d6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801e6d0:	f06f 0307 	mvn.w	r3, #7
 801e6d4:	e01c      	b.n	801e710 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e6d6:	697b      	ldr	r3, [r7, #20]
 801e6d8:	68db      	ldr	r3, [r3, #12]
 801e6da:	617b      	str	r3, [r7, #20]
 801e6dc:	697b      	ldr	r3, [r7, #20]
 801e6de:	2b00      	cmp	r3, #0
 801e6e0:	d1d9      	bne.n	801e696 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801e6e2:	68bb      	ldr	r3, [r7, #8]
 801e6e4:	2b00      	cmp	r3, #0
 801e6e6:	d002      	beq.n	801e6ee <udp_bind+0xd2>
 801e6e8:	68bb      	ldr	r3, [r7, #8]
 801e6ea:	681b      	ldr	r3, [r3, #0]
 801e6ec:	e000      	b.n	801e6f0 <udp_bind+0xd4>
 801e6ee:	2300      	movs	r3, #0
 801e6f0:	68fa      	ldr	r2, [r7, #12]
 801e6f2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801e6f4:	68fb      	ldr	r3, [r7, #12]
 801e6f6:	88fa      	ldrh	r2, [r7, #6]
 801e6f8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801e6fa:	7cfb      	ldrb	r3, [r7, #19]
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d106      	bne.n	801e70e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801e700:	4b09      	ldr	r3, [pc, #36]	; (801e728 <udp_bind+0x10c>)
 801e702:	681a      	ldr	r2, [r3, #0]
 801e704:	68fb      	ldr	r3, [r7, #12]
 801e706:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801e708:	4a07      	ldr	r2, [pc, #28]	; (801e728 <udp_bind+0x10c>)
 801e70a:	68fb      	ldr	r3, [r7, #12]
 801e70c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801e70e:	2300      	movs	r3, #0
}
 801e710:	4618      	mov	r0, r3
 801e712:	3718      	adds	r7, #24
 801e714:	46bd      	mov	sp, r7
 801e716:	bd80      	pop	{r7, pc}
 801e718:	08027398 	.word	0x08027398
 801e71c:	080267e8 	.word	0x080267e8
 801e720:	08026ab0 	.word	0x08026ab0
 801e724:	0802683c 	.word	0x0802683c
 801e728:	2000c010 	.word	0x2000c010

0801e72c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801e72c:	b580      	push	{r7, lr}
 801e72e:	b086      	sub	sp, #24
 801e730:	af00      	add	r7, sp, #0
 801e732:	60f8      	str	r0, [r7, #12]
 801e734:	60b9      	str	r1, [r7, #8]
 801e736:	4613      	mov	r3, r2
 801e738:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801e73a:	68fb      	ldr	r3, [r7, #12]
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	d109      	bne.n	801e754 <udp_connect+0x28>
 801e740:	4b2c      	ldr	r3, [pc, #176]	; (801e7f4 <udp_connect+0xc8>)
 801e742:	f240 4235 	movw	r2, #1077	; 0x435
 801e746:	492c      	ldr	r1, [pc, #176]	; (801e7f8 <udp_connect+0xcc>)
 801e748:	482c      	ldr	r0, [pc, #176]	; (801e7fc <udp_connect+0xd0>)
 801e74a:	f004 f831 	bl	80227b0 <iprintf>
 801e74e:	f06f 030f 	mvn.w	r3, #15
 801e752:	e04b      	b.n	801e7ec <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801e754:	68bb      	ldr	r3, [r7, #8]
 801e756:	2b00      	cmp	r3, #0
 801e758:	d109      	bne.n	801e76e <udp_connect+0x42>
 801e75a:	4b26      	ldr	r3, [pc, #152]	; (801e7f4 <udp_connect+0xc8>)
 801e75c:	f240 4236 	movw	r2, #1078	; 0x436
 801e760:	4927      	ldr	r1, [pc, #156]	; (801e800 <udp_connect+0xd4>)
 801e762:	4826      	ldr	r0, [pc, #152]	; (801e7fc <udp_connect+0xd0>)
 801e764:	f004 f824 	bl	80227b0 <iprintf>
 801e768:	f06f 030f 	mvn.w	r3, #15
 801e76c:	e03e      	b.n	801e7ec <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801e76e:	68fb      	ldr	r3, [r7, #12]
 801e770:	8a5b      	ldrh	r3, [r3, #18]
 801e772:	2b00      	cmp	r3, #0
 801e774:	d10f      	bne.n	801e796 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801e776:	68f9      	ldr	r1, [r7, #12]
 801e778:	68fb      	ldr	r3, [r7, #12]
 801e77a:	8a5b      	ldrh	r3, [r3, #18]
 801e77c:	461a      	mov	r2, r3
 801e77e:	68f8      	ldr	r0, [r7, #12]
 801e780:	f7ff ff4c 	bl	801e61c <udp_bind>
 801e784:	4603      	mov	r3, r0
 801e786:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801e788:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	d002      	beq.n	801e796 <udp_connect+0x6a>
      return err;
 801e790:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801e794:	e02a      	b.n	801e7ec <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801e796:	68bb      	ldr	r3, [r7, #8]
 801e798:	2b00      	cmp	r3, #0
 801e79a:	d002      	beq.n	801e7a2 <udp_connect+0x76>
 801e79c:	68bb      	ldr	r3, [r7, #8]
 801e79e:	681b      	ldr	r3, [r3, #0]
 801e7a0:	e000      	b.n	801e7a4 <udp_connect+0x78>
 801e7a2:	2300      	movs	r3, #0
 801e7a4:	68fa      	ldr	r2, [r7, #12]
 801e7a6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801e7a8:	68fb      	ldr	r3, [r7, #12]
 801e7aa:	88fa      	ldrh	r2, [r7, #6]
 801e7ac:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801e7ae:	68fb      	ldr	r3, [r7, #12]
 801e7b0:	7c1b      	ldrb	r3, [r3, #16]
 801e7b2:	f043 0304 	orr.w	r3, r3, #4
 801e7b6:	b2da      	uxtb	r2, r3
 801e7b8:	68fb      	ldr	r3, [r7, #12]
 801e7ba:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e7bc:	4b11      	ldr	r3, [pc, #68]	; (801e804 <udp_connect+0xd8>)
 801e7be:	681b      	ldr	r3, [r3, #0]
 801e7c0:	617b      	str	r3, [r7, #20]
 801e7c2:	e008      	b.n	801e7d6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801e7c4:	68fa      	ldr	r2, [r7, #12]
 801e7c6:	697b      	ldr	r3, [r7, #20]
 801e7c8:	429a      	cmp	r2, r3
 801e7ca:	d101      	bne.n	801e7d0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801e7cc:	2300      	movs	r3, #0
 801e7ce:	e00d      	b.n	801e7ec <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e7d0:	697b      	ldr	r3, [r7, #20]
 801e7d2:	68db      	ldr	r3, [r3, #12]
 801e7d4:	617b      	str	r3, [r7, #20]
 801e7d6:	697b      	ldr	r3, [r7, #20]
 801e7d8:	2b00      	cmp	r3, #0
 801e7da:	d1f3      	bne.n	801e7c4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801e7dc:	4b09      	ldr	r3, [pc, #36]	; (801e804 <udp_connect+0xd8>)
 801e7de:	681a      	ldr	r2, [r3, #0]
 801e7e0:	68fb      	ldr	r3, [r7, #12]
 801e7e2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801e7e4:	4a07      	ldr	r2, [pc, #28]	; (801e804 <udp_connect+0xd8>)
 801e7e6:	68fb      	ldr	r3, [r7, #12]
 801e7e8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801e7ea:	2300      	movs	r3, #0
}
 801e7ec:	4618      	mov	r0, r3
 801e7ee:	3718      	adds	r7, #24
 801e7f0:	46bd      	mov	sp, r7
 801e7f2:	bd80      	pop	{r7, pc}
 801e7f4:	080267e8 	.word	0x080267e8
 801e7f8:	08026ac8 	.word	0x08026ac8
 801e7fc:	0802683c 	.word	0x0802683c
 801e800:	08026ae4 	.word	0x08026ae4
 801e804:	2000c010 	.word	0x2000c010

0801e808 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801e808:	b580      	push	{r7, lr}
 801e80a:	b084      	sub	sp, #16
 801e80c:	af00      	add	r7, sp, #0
 801e80e:	60f8      	str	r0, [r7, #12]
 801e810:	60b9      	str	r1, [r7, #8]
 801e812:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801e814:	68fb      	ldr	r3, [r7, #12]
 801e816:	2b00      	cmp	r3, #0
 801e818:	d107      	bne.n	801e82a <udp_recv+0x22>
 801e81a:	4b08      	ldr	r3, [pc, #32]	; (801e83c <udp_recv+0x34>)
 801e81c:	f240 428a 	movw	r2, #1162	; 0x48a
 801e820:	4907      	ldr	r1, [pc, #28]	; (801e840 <udp_recv+0x38>)
 801e822:	4808      	ldr	r0, [pc, #32]	; (801e844 <udp_recv+0x3c>)
 801e824:	f003 ffc4 	bl	80227b0 <iprintf>
 801e828:	e005      	b.n	801e836 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801e82a:	68fb      	ldr	r3, [r7, #12]
 801e82c:	68ba      	ldr	r2, [r7, #8]
 801e82e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	687a      	ldr	r2, [r7, #4]
 801e834:	61da      	str	r2, [r3, #28]
}
 801e836:	3710      	adds	r7, #16
 801e838:	46bd      	mov	sp, r7
 801e83a:	bd80      	pop	{r7, pc}
 801e83c:	080267e8 	.word	0x080267e8
 801e840:	08026b1c 	.word	0x08026b1c
 801e844:	0802683c 	.word	0x0802683c

0801e848 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801e848:	b580      	push	{r7, lr}
 801e84a:	b084      	sub	sp, #16
 801e84c:	af00      	add	r7, sp, #0
 801e84e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801e850:	687b      	ldr	r3, [r7, #4]
 801e852:	2b00      	cmp	r3, #0
 801e854:	d107      	bne.n	801e866 <udp_remove+0x1e>
 801e856:	4b19      	ldr	r3, [pc, #100]	; (801e8bc <udp_remove+0x74>)
 801e858:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801e85c:	4918      	ldr	r1, [pc, #96]	; (801e8c0 <udp_remove+0x78>)
 801e85e:	4819      	ldr	r0, [pc, #100]	; (801e8c4 <udp_remove+0x7c>)
 801e860:	f003 ffa6 	bl	80227b0 <iprintf>
 801e864:	e026      	b.n	801e8b4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801e866:	4b18      	ldr	r3, [pc, #96]	; (801e8c8 <udp_remove+0x80>)
 801e868:	681b      	ldr	r3, [r3, #0]
 801e86a:	687a      	ldr	r2, [r7, #4]
 801e86c:	429a      	cmp	r2, r3
 801e86e:	d105      	bne.n	801e87c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801e870:	4b15      	ldr	r3, [pc, #84]	; (801e8c8 <udp_remove+0x80>)
 801e872:	681b      	ldr	r3, [r3, #0]
 801e874:	68db      	ldr	r3, [r3, #12]
 801e876:	4a14      	ldr	r2, [pc, #80]	; (801e8c8 <udp_remove+0x80>)
 801e878:	6013      	str	r3, [r2, #0]
 801e87a:	e017      	b.n	801e8ac <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801e87c:	4b12      	ldr	r3, [pc, #72]	; (801e8c8 <udp_remove+0x80>)
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	60fb      	str	r3, [r7, #12]
 801e882:	e010      	b.n	801e8a6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801e884:	68fb      	ldr	r3, [r7, #12]
 801e886:	68db      	ldr	r3, [r3, #12]
 801e888:	2b00      	cmp	r3, #0
 801e88a:	d009      	beq.n	801e8a0 <udp_remove+0x58>
 801e88c:	68fb      	ldr	r3, [r7, #12]
 801e88e:	68db      	ldr	r3, [r3, #12]
 801e890:	687a      	ldr	r2, [r7, #4]
 801e892:	429a      	cmp	r2, r3
 801e894:	d104      	bne.n	801e8a0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801e896:	687b      	ldr	r3, [r7, #4]
 801e898:	68da      	ldr	r2, [r3, #12]
 801e89a:	68fb      	ldr	r3, [r7, #12]
 801e89c:	60da      	str	r2, [r3, #12]
        break;
 801e89e:	e005      	b.n	801e8ac <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801e8a0:	68fb      	ldr	r3, [r7, #12]
 801e8a2:	68db      	ldr	r3, [r3, #12]
 801e8a4:	60fb      	str	r3, [r7, #12]
 801e8a6:	68fb      	ldr	r3, [r7, #12]
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	d1eb      	bne.n	801e884 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801e8ac:	6879      	ldr	r1, [r7, #4]
 801e8ae:	2000      	movs	r0, #0
 801e8b0:	f7f7 fea2 	bl	80165f8 <memp_free>
}
 801e8b4:	3710      	adds	r7, #16
 801e8b6:	46bd      	mov	sp, r7
 801e8b8:	bd80      	pop	{r7, pc}
 801e8ba:	bf00      	nop
 801e8bc:	080267e8 	.word	0x080267e8
 801e8c0:	08026b34 	.word	0x08026b34
 801e8c4:	0802683c 	.word	0x0802683c
 801e8c8:	2000c010 	.word	0x2000c010

0801e8cc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801e8cc:	b580      	push	{r7, lr}
 801e8ce:	b082      	sub	sp, #8
 801e8d0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801e8d2:	2000      	movs	r0, #0
 801e8d4:	f7f7 fe1a 	bl	801650c <memp_malloc>
 801e8d8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d007      	beq.n	801e8f0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801e8e0:	2220      	movs	r2, #32
 801e8e2:	2100      	movs	r1, #0
 801e8e4:	6878      	ldr	r0, [r7, #4]
 801e8e6:	f003 fe7b 	bl	80225e0 <memset>
    pcb->ttl = UDP_TTL;
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	22ff      	movs	r2, #255	; 0xff
 801e8ee:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801e8f0:	687b      	ldr	r3, [r7, #4]
}
 801e8f2:	4618      	mov	r0, r3
 801e8f4:	3708      	adds	r7, #8
 801e8f6:	46bd      	mov	sp, r7
 801e8f8:	bd80      	pop	{r7, pc}

0801e8fa <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801e8fa:	b580      	push	{r7, lr}
 801e8fc:	b084      	sub	sp, #16
 801e8fe:	af00      	add	r7, sp, #0
 801e900:	4603      	mov	r3, r0
 801e902:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801e904:	f7ff ffe2 	bl	801e8cc <udp_new>
 801e908:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801e90a:	68fb      	ldr	r3, [r7, #12]
}
 801e90c:	4618      	mov	r0, r3
 801e90e:	3710      	adds	r7, #16
 801e910:	46bd      	mov	sp, r7
 801e912:	bd80      	pop	{r7, pc}

0801e914 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801e914:	b480      	push	{r7}
 801e916:	b085      	sub	sp, #20
 801e918:	af00      	add	r7, sp, #0
 801e91a:	6078      	str	r0, [r7, #4]
 801e91c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801e91e:	687b      	ldr	r3, [r7, #4]
 801e920:	2b00      	cmp	r3, #0
 801e922:	d01e      	beq.n	801e962 <udp_netif_ip_addr_changed+0x4e>
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	681b      	ldr	r3, [r3, #0]
 801e928:	2b00      	cmp	r3, #0
 801e92a:	d01a      	beq.n	801e962 <udp_netif_ip_addr_changed+0x4e>
 801e92c:	683b      	ldr	r3, [r7, #0]
 801e92e:	2b00      	cmp	r3, #0
 801e930:	d017      	beq.n	801e962 <udp_netif_ip_addr_changed+0x4e>
 801e932:	683b      	ldr	r3, [r7, #0]
 801e934:	681b      	ldr	r3, [r3, #0]
 801e936:	2b00      	cmp	r3, #0
 801e938:	d013      	beq.n	801e962 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801e93a:	4b0d      	ldr	r3, [pc, #52]	; (801e970 <udp_netif_ip_addr_changed+0x5c>)
 801e93c:	681b      	ldr	r3, [r3, #0]
 801e93e:	60fb      	str	r3, [r7, #12]
 801e940:	e00c      	b.n	801e95c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801e942:	68fb      	ldr	r3, [r7, #12]
 801e944:	681a      	ldr	r2, [r3, #0]
 801e946:	687b      	ldr	r3, [r7, #4]
 801e948:	681b      	ldr	r3, [r3, #0]
 801e94a:	429a      	cmp	r2, r3
 801e94c:	d103      	bne.n	801e956 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801e94e:	683b      	ldr	r3, [r7, #0]
 801e950:	681a      	ldr	r2, [r3, #0]
 801e952:	68fb      	ldr	r3, [r7, #12]
 801e954:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801e956:	68fb      	ldr	r3, [r7, #12]
 801e958:	68db      	ldr	r3, [r3, #12]
 801e95a:	60fb      	str	r3, [r7, #12]
 801e95c:	68fb      	ldr	r3, [r7, #12]
 801e95e:	2b00      	cmp	r3, #0
 801e960:	d1ef      	bne.n	801e942 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801e962:	bf00      	nop
 801e964:	3714      	adds	r7, #20
 801e966:	46bd      	mov	sp, r7
 801e968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e96c:	4770      	bx	lr
 801e96e:	bf00      	nop
 801e970:	2000c010 	.word	0x2000c010

0801e974 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801e974:	b580      	push	{r7, lr}
 801e976:	b082      	sub	sp, #8
 801e978:	af00      	add	r7, sp, #0
 801e97a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801e97c:	4915      	ldr	r1, [pc, #84]	; (801e9d4 <etharp_free_entry+0x60>)
 801e97e:	687a      	ldr	r2, [r7, #4]
 801e980:	4613      	mov	r3, r2
 801e982:	005b      	lsls	r3, r3, #1
 801e984:	4413      	add	r3, r2
 801e986:	00db      	lsls	r3, r3, #3
 801e988:	440b      	add	r3, r1
 801e98a:	681b      	ldr	r3, [r3, #0]
 801e98c:	2b00      	cmp	r3, #0
 801e98e:	d013      	beq.n	801e9b8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801e990:	4910      	ldr	r1, [pc, #64]	; (801e9d4 <etharp_free_entry+0x60>)
 801e992:	687a      	ldr	r2, [r7, #4]
 801e994:	4613      	mov	r3, r2
 801e996:	005b      	lsls	r3, r3, #1
 801e998:	4413      	add	r3, r2
 801e99a:	00db      	lsls	r3, r3, #3
 801e99c:	440b      	add	r3, r1
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	4618      	mov	r0, r3
 801e9a2:	f7f8 fccd 	bl	8017340 <pbuf_free>
    arp_table[i].q = NULL;
 801e9a6:	490b      	ldr	r1, [pc, #44]	; (801e9d4 <etharp_free_entry+0x60>)
 801e9a8:	687a      	ldr	r2, [r7, #4]
 801e9aa:	4613      	mov	r3, r2
 801e9ac:	005b      	lsls	r3, r3, #1
 801e9ae:	4413      	add	r3, r2
 801e9b0:	00db      	lsls	r3, r3, #3
 801e9b2:	440b      	add	r3, r1
 801e9b4:	2200      	movs	r2, #0
 801e9b6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e9b8:	4906      	ldr	r1, [pc, #24]	; (801e9d4 <etharp_free_entry+0x60>)
 801e9ba:	687a      	ldr	r2, [r7, #4]
 801e9bc:	4613      	mov	r3, r2
 801e9be:	005b      	lsls	r3, r3, #1
 801e9c0:	4413      	add	r3, r2
 801e9c2:	00db      	lsls	r3, r3, #3
 801e9c4:	440b      	add	r3, r1
 801e9c6:	3314      	adds	r3, #20
 801e9c8:	2200      	movs	r2, #0
 801e9ca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801e9cc:	bf00      	nop
 801e9ce:	3708      	adds	r7, #8
 801e9d0:	46bd      	mov	sp, r7
 801e9d2:	bd80      	pop	{r7, pc}
 801e9d4:	2000c014 	.word	0x2000c014

0801e9d8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801e9d8:	b580      	push	{r7, lr}
 801e9da:	b082      	sub	sp, #8
 801e9dc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e9de:	2300      	movs	r3, #0
 801e9e0:	607b      	str	r3, [r7, #4]
 801e9e2:	e096      	b.n	801eb12 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801e9e4:	494f      	ldr	r1, [pc, #316]	; (801eb24 <etharp_tmr+0x14c>)
 801e9e6:	687a      	ldr	r2, [r7, #4]
 801e9e8:	4613      	mov	r3, r2
 801e9ea:	005b      	lsls	r3, r3, #1
 801e9ec:	4413      	add	r3, r2
 801e9ee:	00db      	lsls	r3, r3, #3
 801e9f0:	440b      	add	r3, r1
 801e9f2:	3314      	adds	r3, #20
 801e9f4:	781b      	ldrb	r3, [r3, #0]
 801e9f6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801e9f8:	78fb      	ldrb	r3, [r7, #3]
 801e9fa:	2b00      	cmp	r3, #0
 801e9fc:	f000 8086 	beq.w	801eb0c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801ea00:	4948      	ldr	r1, [pc, #288]	; (801eb24 <etharp_tmr+0x14c>)
 801ea02:	687a      	ldr	r2, [r7, #4]
 801ea04:	4613      	mov	r3, r2
 801ea06:	005b      	lsls	r3, r3, #1
 801ea08:	4413      	add	r3, r2
 801ea0a:	00db      	lsls	r3, r3, #3
 801ea0c:	440b      	add	r3, r1
 801ea0e:	3312      	adds	r3, #18
 801ea10:	881b      	ldrh	r3, [r3, #0]
 801ea12:	3301      	adds	r3, #1
 801ea14:	b298      	uxth	r0, r3
 801ea16:	4943      	ldr	r1, [pc, #268]	; (801eb24 <etharp_tmr+0x14c>)
 801ea18:	687a      	ldr	r2, [r7, #4]
 801ea1a:	4613      	mov	r3, r2
 801ea1c:	005b      	lsls	r3, r3, #1
 801ea1e:	4413      	add	r3, r2
 801ea20:	00db      	lsls	r3, r3, #3
 801ea22:	440b      	add	r3, r1
 801ea24:	3312      	adds	r3, #18
 801ea26:	4602      	mov	r2, r0
 801ea28:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ea2a:	493e      	ldr	r1, [pc, #248]	; (801eb24 <etharp_tmr+0x14c>)
 801ea2c:	687a      	ldr	r2, [r7, #4]
 801ea2e:	4613      	mov	r3, r2
 801ea30:	005b      	lsls	r3, r3, #1
 801ea32:	4413      	add	r3, r2
 801ea34:	00db      	lsls	r3, r3, #3
 801ea36:	440b      	add	r3, r1
 801ea38:	3312      	adds	r3, #18
 801ea3a:	881b      	ldrh	r3, [r3, #0]
 801ea3c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801ea40:	d215      	bcs.n	801ea6e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ea42:	4938      	ldr	r1, [pc, #224]	; (801eb24 <etharp_tmr+0x14c>)
 801ea44:	687a      	ldr	r2, [r7, #4]
 801ea46:	4613      	mov	r3, r2
 801ea48:	005b      	lsls	r3, r3, #1
 801ea4a:	4413      	add	r3, r2
 801ea4c:	00db      	lsls	r3, r3, #3
 801ea4e:	440b      	add	r3, r1
 801ea50:	3314      	adds	r3, #20
 801ea52:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ea54:	2b01      	cmp	r3, #1
 801ea56:	d10e      	bne.n	801ea76 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801ea58:	4932      	ldr	r1, [pc, #200]	; (801eb24 <etharp_tmr+0x14c>)
 801ea5a:	687a      	ldr	r2, [r7, #4]
 801ea5c:	4613      	mov	r3, r2
 801ea5e:	005b      	lsls	r3, r3, #1
 801ea60:	4413      	add	r3, r2
 801ea62:	00db      	lsls	r3, r3, #3
 801ea64:	440b      	add	r3, r1
 801ea66:	3312      	adds	r3, #18
 801ea68:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ea6a:	2b04      	cmp	r3, #4
 801ea6c:	d903      	bls.n	801ea76 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801ea6e:	6878      	ldr	r0, [r7, #4]
 801ea70:	f7ff ff80 	bl	801e974 <etharp_free_entry>
 801ea74:	e04a      	b.n	801eb0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ea76:	492b      	ldr	r1, [pc, #172]	; (801eb24 <etharp_tmr+0x14c>)
 801ea78:	687a      	ldr	r2, [r7, #4]
 801ea7a:	4613      	mov	r3, r2
 801ea7c:	005b      	lsls	r3, r3, #1
 801ea7e:	4413      	add	r3, r2
 801ea80:	00db      	lsls	r3, r3, #3
 801ea82:	440b      	add	r3, r1
 801ea84:	3314      	adds	r3, #20
 801ea86:	781b      	ldrb	r3, [r3, #0]
 801ea88:	2b03      	cmp	r3, #3
 801ea8a:	d10a      	bne.n	801eaa2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801ea8c:	4925      	ldr	r1, [pc, #148]	; (801eb24 <etharp_tmr+0x14c>)
 801ea8e:	687a      	ldr	r2, [r7, #4]
 801ea90:	4613      	mov	r3, r2
 801ea92:	005b      	lsls	r3, r3, #1
 801ea94:	4413      	add	r3, r2
 801ea96:	00db      	lsls	r3, r3, #3
 801ea98:	440b      	add	r3, r1
 801ea9a:	3314      	adds	r3, #20
 801ea9c:	2204      	movs	r2, #4
 801ea9e:	701a      	strb	r2, [r3, #0]
 801eaa0:	e034      	b.n	801eb0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801eaa2:	4920      	ldr	r1, [pc, #128]	; (801eb24 <etharp_tmr+0x14c>)
 801eaa4:	687a      	ldr	r2, [r7, #4]
 801eaa6:	4613      	mov	r3, r2
 801eaa8:	005b      	lsls	r3, r3, #1
 801eaaa:	4413      	add	r3, r2
 801eaac:	00db      	lsls	r3, r3, #3
 801eaae:	440b      	add	r3, r1
 801eab0:	3314      	adds	r3, #20
 801eab2:	781b      	ldrb	r3, [r3, #0]
 801eab4:	2b04      	cmp	r3, #4
 801eab6:	d10a      	bne.n	801eace <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801eab8:	491a      	ldr	r1, [pc, #104]	; (801eb24 <etharp_tmr+0x14c>)
 801eaba:	687a      	ldr	r2, [r7, #4]
 801eabc:	4613      	mov	r3, r2
 801eabe:	005b      	lsls	r3, r3, #1
 801eac0:	4413      	add	r3, r2
 801eac2:	00db      	lsls	r3, r3, #3
 801eac4:	440b      	add	r3, r1
 801eac6:	3314      	adds	r3, #20
 801eac8:	2202      	movs	r2, #2
 801eaca:	701a      	strb	r2, [r3, #0]
 801eacc:	e01e      	b.n	801eb0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801eace:	4915      	ldr	r1, [pc, #84]	; (801eb24 <etharp_tmr+0x14c>)
 801ead0:	687a      	ldr	r2, [r7, #4]
 801ead2:	4613      	mov	r3, r2
 801ead4:	005b      	lsls	r3, r3, #1
 801ead6:	4413      	add	r3, r2
 801ead8:	00db      	lsls	r3, r3, #3
 801eada:	440b      	add	r3, r1
 801eadc:	3314      	adds	r3, #20
 801eade:	781b      	ldrb	r3, [r3, #0]
 801eae0:	2b01      	cmp	r3, #1
 801eae2:	d113      	bne.n	801eb0c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801eae4:	490f      	ldr	r1, [pc, #60]	; (801eb24 <etharp_tmr+0x14c>)
 801eae6:	687a      	ldr	r2, [r7, #4]
 801eae8:	4613      	mov	r3, r2
 801eaea:	005b      	lsls	r3, r3, #1
 801eaec:	4413      	add	r3, r2
 801eaee:	00db      	lsls	r3, r3, #3
 801eaf0:	440b      	add	r3, r1
 801eaf2:	3308      	adds	r3, #8
 801eaf4:	6818      	ldr	r0, [r3, #0]
 801eaf6:	687a      	ldr	r2, [r7, #4]
 801eaf8:	4613      	mov	r3, r2
 801eafa:	005b      	lsls	r3, r3, #1
 801eafc:	4413      	add	r3, r2
 801eafe:	00db      	lsls	r3, r3, #3
 801eb00:	4a08      	ldr	r2, [pc, #32]	; (801eb24 <etharp_tmr+0x14c>)
 801eb02:	4413      	add	r3, r2
 801eb04:	3304      	adds	r3, #4
 801eb06:	4619      	mov	r1, r3
 801eb08:	f000 fe6e 	bl	801f7e8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	3301      	adds	r3, #1
 801eb10:	607b      	str	r3, [r7, #4]
 801eb12:	687b      	ldr	r3, [r7, #4]
 801eb14:	2b09      	cmp	r3, #9
 801eb16:	f77f af65 	ble.w	801e9e4 <etharp_tmr+0xc>
      }
    }
  }
}
 801eb1a:	bf00      	nop
 801eb1c:	bf00      	nop
 801eb1e:	3708      	adds	r7, #8
 801eb20:	46bd      	mov	sp, r7
 801eb22:	bd80      	pop	{r7, pc}
 801eb24:	2000c014 	.word	0x2000c014

0801eb28 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801eb28:	b580      	push	{r7, lr}
 801eb2a:	b08a      	sub	sp, #40	; 0x28
 801eb2c:	af00      	add	r7, sp, #0
 801eb2e:	60f8      	str	r0, [r7, #12]
 801eb30:	460b      	mov	r3, r1
 801eb32:	607a      	str	r2, [r7, #4]
 801eb34:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801eb36:	230a      	movs	r3, #10
 801eb38:	84fb      	strh	r3, [r7, #38]	; 0x26
 801eb3a:	230a      	movs	r3, #10
 801eb3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801eb3e:	230a      	movs	r3, #10
 801eb40:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801eb42:	2300      	movs	r3, #0
 801eb44:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801eb46:	230a      	movs	r3, #10
 801eb48:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801eb4a:	2300      	movs	r3, #0
 801eb4c:	83bb      	strh	r3, [r7, #28]
 801eb4e:	2300      	movs	r3, #0
 801eb50:	837b      	strh	r3, [r7, #26]
 801eb52:	2300      	movs	r3, #0
 801eb54:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801eb56:	2300      	movs	r3, #0
 801eb58:	843b      	strh	r3, [r7, #32]
 801eb5a:	e0ae      	b.n	801ecba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801eb5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801eb60:	49a6      	ldr	r1, [pc, #664]	; (801edfc <etharp_find_entry+0x2d4>)
 801eb62:	4613      	mov	r3, r2
 801eb64:	005b      	lsls	r3, r3, #1
 801eb66:	4413      	add	r3, r2
 801eb68:	00db      	lsls	r3, r3, #3
 801eb6a:	440b      	add	r3, r1
 801eb6c:	3314      	adds	r3, #20
 801eb6e:	781b      	ldrb	r3, [r3, #0]
 801eb70:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801eb72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801eb76:	2b0a      	cmp	r3, #10
 801eb78:	d105      	bne.n	801eb86 <etharp_find_entry+0x5e>
 801eb7a:	7dfb      	ldrb	r3, [r7, #23]
 801eb7c:	2b00      	cmp	r3, #0
 801eb7e:	d102      	bne.n	801eb86 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801eb80:	8c3b      	ldrh	r3, [r7, #32]
 801eb82:	847b      	strh	r3, [r7, #34]	; 0x22
 801eb84:	e095      	b.n	801ecb2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801eb86:	7dfb      	ldrb	r3, [r7, #23]
 801eb88:	2b00      	cmp	r3, #0
 801eb8a:	f000 8092 	beq.w	801ecb2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801eb8e:	7dfb      	ldrb	r3, [r7, #23]
 801eb90:	2b01      	cmp	r3, #1
 801eb92:	d009      	beq.n	801eba8 <etharp_find_entry+0x80>
 801eb94:	7dfb      	ldrb	r3, [r7, #23]
 801eb96:	2b01      	cmp	r3, #1
 801eb98:	d806      	bhi.n	801eba8 <etharp_find_entry+0x80>
 801eb9a:	4b99      	ldr	r3, [pc, #612]	; (801ee00 <etharp_find_entry+0x2d8>)
 801eb9c:	f240 1223 	movw	r2, #291	; 0x123
 801eba0:	4998      	ldr	r1, [pc, #608]	; (801ee04 <etharp_find_entry+0x2dc>)
 801eba2:	4899      	ldr	r0, [pc, #612]	; (801ee08 <etharp_find_entry+0x2e0>)
 801eba4:	f003 fe04 	bl	80227b0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801eba8:	68fb      	ldr	r3, [r7, #12]
 801ebaa:	2b00      	cmp	r3, #0
 801ebac:	d020      	beq.n	801ebf0 <etharp_find_entry+0xc8>
 801ebae:	68fb      	ldr	r3, [r7, #12]
 801ebb0:	6819      	ldr	r1, [r3, #0]
 801ebb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ebb6:	4891      	ldr	r0, [pc, #580]	; (801edfc <etharp_find_entry+0x2d4>)
 801ebb8:	4613      	mov	r3, r2
 801ebba:	005b      	lsls	r3, r3, #1
 801ebbc:	4413      	add	r3, r2
 801ebbe:	00db      	lsls	r3, r3, #3
 801ebc0:	4403      	add	r3, r0
 801ebc2:	3304      	adds	r3, #4
 801ebc4:	681b      	ldr	r3, [r3, #0]
 801ebc6:	4299      	cmp	r1, r3
 801ebc8:	d112      	bne.n	801ebf0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801ebca:	687b      	ldr	r3, [r7, #4]
 801ebcc:	2b00      	cmp	r3, #0
 801ebce:	d00c      	beq.n	801ebea <etharp_find_entry+0xc2>
 801ebd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ebd4:	4989      	ldr	r1, [pc, #548]	; (801edfc <etharp_find_entry+0x2d4>)
 801ebd6:	4613      	mov	r3, r2
 801ebd8:	005b      	lsls	r3, r3, #1
 801ebda:	4413      	add	r3, r2
 801ebdc:	00db      	lsls	r3, r3, #3
 801ebde:	440b      	add	r3, r1
 801ebe0:	3308      	adds	r3, #8
 801ebe2:	681b      	ldr	r3, [r3, #0]
 801ebe4:	687a      	ldr	r2, [r7, #4]
 801ebe6:	429a      	cmp	r2, r3
 801ebe8:	d102      	bne.n	801ebf0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801ebea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ebee:	e100      	b.n	801edf2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801ebf0:	7dfb      	ldrb	r3, [r7, #23]
 801ebf2:	2b01      	cmp	r3, #1
 801ebf4:	d140      	bne.n	801ec78 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801ebf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ebfa:	4980      	ldr	r1, [pc, #512]	; (801edfc <etharp_find_entry+0x2d4>)
 801ebfc:	4613      	mov	r3, r2
 801ebfe:	005b      	lsls	r3, r3, #1
 801ec00:	4413      	add	r3, r2
 801ec02:	00db      	lsls	r3, r3, #3
 801ec04:	440b      	add	r3, r1
 801ec06:	681b      	ldr	r3, [r3, #0]
 801ec08:	2b00      	cmp	r3, #0
 801ec0a:	d01a      	beq.n	801ec42 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801ec0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ec10:	497a      	ldr	r1, [pc, #488]	; (801edfc <etharp_find_entry+0x2d4>)
 801ec12:	4613      	mov	r3, r2
 801ec14:	005b      	lsls	r3, r3, #1
 801ec16:	4413      	add	r3, r2
 801ec18:	00db      	lsls	r3, r3, #3
 801ec1a:	440b      	add	r3, r1
 801ec1c:	3312      	adds	r3, #18
 801ec1e:	881b      	ldrh	r3, [r3, #0]
 801ec20:	8bba      	ldrh	r2, [r7, #28]
 801ec22:	429a      	cmp	r2, r3
 801ec24:	d845      	bhi.n	801ecb2 <etharp_find_entry+0x18a>
            old_queue = i;
 801ec26:	8c3b      	ldrh	r3, [r7, #32]
 801ec28:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ec2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ec2e:	4973      	ldr	r1, [pc, #460]	; (801edfc <etharp_find_entry+0x2d4>)
 801ec30:	4613      	mov	r3, r2
 801ec32:	005b      	lsls	r3, r3, #1
 801ec34:	4413      	add	r3, r2
 801ec36:	00db      	lsls	r3, r3, #3
 801ec38:	440b      	add	r3, r1
 801ec3a:	3312      	adds	r3, #18
 801ec3c:	881b      	ldrh	r3, [r3, #0]
 801ec3e:	83bb      	strh	r3, [r7, #28]
 801ec40:	e037      	b.n	801ecb2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ec42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ec46:	496d      	ldr	r1, [pc, #436]	; (801edfc <etharp_find_entry+0x2d4>)
 801ec48:	4613      	mov	r3, r2
 801ec4a:	005b      	lsls	r3, r3, #1
 801ec4c:	4413      	add	r3, r2
 801ec4e:	00db      	lsls	r3, r3, #3
 801ec50:	440b      	add	r3, r1
 801ec52:	3312      	adds	r3, #18
 801ec54:	881b      	ldrh	r3, [r3, #0]
 801ec56:	8b7a      	ldrh	r2, [r7, #26]
 801ec58:	429a      	cmp	r2, r3
 801ec5a:	d82a      	bhi.n	801ecb2 <etharp_find_entry+0x18a>
            old_pending = i;
 801ec5c:	8c3b      	ldrh	r3, [r7, #32]
 801ec5e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801ec60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ec64:	4965      	ldr	r1, [pc, #404]	; (801edfc <etharp_find_entry+0x2d4>)
 801ec66:	4613      	mov	r3, r2
 801ec68:	005b      	lsls	r3, r3, #1
 801ec6a:	4413      	add	r3, r2
 801ec6c:	00db      	lsls	r3, r3, #3
 801ec6e:	440b      	add	r3, r1
 801ec70:	3312      	adds	r3, #18
 801ec72:	881b      	ldrh	r3, [r3, #0]
 801ec74:	837b      	strh	r3, [r7, #26]
 801ec76:	e01c      	b.n	801ecb2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801ec78:	7dfb      	ldrb	r3, [r7, #23]
 801ec7a:	2b01      	cmp	r3, #1
 801ec7c:	d919      	bls.n	801ecb2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ec7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ec82:	495e      	ldr	r1, [pc, #376]	; (801edfc <etharp_find_entry+0x2d4>)
 801ec84:	4613      	mov	r3, r2
 801ec86:	005b      	lsls	r3, r3, #1
 801ec88:	4413      	add	r3, r2
 801ec8a:	00db      	lsls	r3, r3, #3
 801ec8c:	440b      	add	r3, r1
 801ec8e:	3312      	adds	r3, #18
 801ec90:	881b      	ldrh	r3, [r3, #0]
 801ec92:	8b3a      	ldrh	r2, [r7, #24]
 801ec94:	429a      	cmp	r2, r3
 801ec96:	d80c      	bhi.n	801ecb2 <etharp_find_entry+0x18a>
            old_stable = i;
 801ec98:	8c3b      	ldrh	r3, [r7, #32]
 801ec9a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801ec9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801eca0:	4956      	ldr	r1, [pc, #344]	; (801edfc <etharp_find_entry+0x2d4>)
 801eca2:	4613      	mov	r3, r2
 801eca4:	005b      	lsls	r3, r3, #1
 801eca6:	4413      	add	r3, r2
 801eca8:	00db      	lsls	r3, r3, #3
 801ecaa:	440b      	add	r3, r1
 801ecac:	3312      	adds	r3, #18
 801ecae:	881b      	ldrh	r3, [r3, #0]
 801ecb0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ecb2:	8c3b      	ldrh	r3, [r7, #32]
 801ecb4:	3301      	adds	r3, #1
 801ecb6:	b29b      	uxth	r3, r3
 801ecb8:	843b      	strh	r3, [r7, #32]
 801ecba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ecbe:	2b09      	cmp	r3, #9
 801ecc0:	f77f af4c 	ble.w	801eb5c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801ecc4:	7afb      	ldrb	r3, [r7, #11]
 801ecc6:	f003 0302 	and.w	r3, r3, #2
 801ecca:	2b00      	cmp	r3, #0
 801eccc:	d108      	bne.n	801ece0 <etharp_find_entry+0x1b8>
 801ecce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ecd2:	2b0a      	cmp	r3, #10
 801ecd4:	d107      	bne.n	801ece6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801ecd6:	7afb      	ldrb	r3, [r7, #11]
 801ecd8:	f003 0301 	and.w	r3, r3, #1
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d102      	bne.n	801ece6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801ece0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ece4:	e085      	b.n	801edf2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801ece6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ecea:	2b09      	cmp	r3, #9
 801ecec:	dc02      	bgt.n	801ecf4 <etharp_find_entry+0x1cc>
    i = empty;
 801ecee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ecf0:	843b      	strh	r3, [r7, #32]
 801ecf2:	e039      	b.n	801ed68 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801ecf4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801ecf8:	2b09      	cmp	r3, #9
 801ecfa:	dc14      	bgt.n	801ed26 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801ecfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ecfe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801ed00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ed04:	493d      	ldr	r1, [pc, #244]	; (801edfc <etharp_find_entry+0x2d4>)
 801ed06:	4613      	mov	r3, r2
 801ed08:	005b      	lsls	r3, r3, #1
 801ed0a:	4413      	add	r3, r2
 801ed0c:	00db      	lsls	r3, r3, #3
 801ed0e:	440b      	add	r3, r1
 801ed10:	681b      	ldr	r3, [r3, #0]
 801ed12:	2b00      	cmp	r3, #0
 801ed14:	d018      	beq.n	801ed48 <etharp_find_entry+0x220>
 801ed16:	4b3a      	ldr	r3, [pc, #232]	; (801ee00 <etharp_find_entry+0x2d8>)
 801ed18:	f240 126d 	movw	r2, #365	; 0x16d
 801ed1c:	493b      	ldr	r1, [pc, #236]	; (801ee0c <etharp_find_entry+0x2e4>)
 801ed1e:	483a      	ldr	r0, [pc, #232]	; (801ee08 <etharp_find_entry+0x2e0>)
 801ed20:	f003 fd46 	bl	80227b0 <iprintf>
 801ed24:	e010      	b.n	801ed48 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ed26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ed2a:	2b09      	cmp	r3, #9
 801ed2c:	dc02      	bgt.n	801ed34 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801ed2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ed30:	843b      	strh	r3, [r7, #32]
 801ed32:	e009      	b.n	801ed48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ed34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ed38:	2b09      	cmp	r3, #9
 801ed3a:	dc02      	bgt.n	801ed42 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ed3c:	8bfb      	ldrh	r3, [r7, #30]
 801ed3e:	843b      	strh	r3, [r7, #32]
 801ed40:	e002      	b.n	801ed48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801ed42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ed46:	e054      	b.n	801edf2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ed48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ed4c:	2b09      	cmp	r3, #9
 801ed4e:	dd06      	ble.n	801ed5e <etharp_find_entry+0x236>
 801ed50:	4b2b      	ldr	r3, [pc, #172]	; (801ee00 <etharp_find_entry+0x2d8>)
 801ed52:	f240 127f 	movw	r2, #383	; 0x17f
 801ed56:	492e      	ldr	r1, [pc, #184]	; (801ee10 <etharp_find_entry+0x2e8>)
 801ed58:	482b      	ldr	r0, [pc, #172]	; (801ee08 <etharp_find_entry+0x2e0>)
 801ed5a:	f003 fd29 	bl	80227b0 <iprintf>
    etharp_free_entry(i);
 801ed5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ed62:	4618      	mov	r0, r3
 801ed64:	f7ff fe06 	bl	801e974 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ed68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ed6c:	2b09      	cmp	r3, #9
 801ed6e:	dd06      	ble.n	801ed7e <etharp_find_entry+0x256>
 801ed70:	4b23      	ldr	r3, [pc, #140]	; (801ee00 <etharp_find_entry+0x2d8>)
 801ed72:	f240 1283 	movw	r2, #387	; 0x183
 801ed76:	4926      	ldr	r1, [pc, #152]	; (801ee10 <etharp_find_entry+0x2e8>)
 801ed78:	4823      	ldr	r0, [pc, #140]	; (801ee08 <etharp_find_entry+0x2e0>)
 801ed7a:	f003 fd19 	bl	80227b0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801ed7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ed82:	491e      	ldr	r1, [pc, #120]	; (801edfc <etharp_find_entry+0x2d4>)
 801ed84:	4613      	mov	r3, r2
 801ed86:	005b      	lsls	r3, r3, #1
 801ed88:	4413      	add	r3, r2
 801ed8a:	00db      	lsls	r3, r3, #3
 801ed8c:	440b      	add	r3, r1
 801ed8e:	3314      	adds	r3, #20
 801ed90:	781b      	ldrb	r3, [r3, #0]
 801ed92:	2b00      	cmp	r3, #0
 801ed94:	d006      	beq.n	801eda4 <etharp_find_entry+0x27c>
 801ed96:	4b1a      	ldr	r3, [pc, #104]	; (801ee00 <etharp_find_entry+0x2d8>)
 801ed98:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801ed9c:	491d      	ldr	r1, [pc, #116]	; (801ee14 <etharp_find_entry+0x2ec>)
 801ed9e:	481a      	ldr	r0, [pc, #104]	; (801ee08 <etharp_find_entry+0x2e0>)
 801eda0:	f003 fd06 	bl	80227b0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801eda4:	68fb      	ldr	r3, [r7, #12]
 801eda6:	2b00      	cmp	r3, #0
 801eda8:	d00b      	beq.n	801edc2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801edaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801edae:	68fb      	ldr	r3, [r7, #12]
 801edb0:	6819      	ldr	r1, [r3, #0]
 801edb2:	4812      	ldr	r0, [pc, #72]	; (801edfc <etharp_find_entry+0x2d4>)
 801edb4:	4613      	mov	r3, r2
 801edb6:	005b      	lsls	r3, r3, #1
 801edb8:	4413      	add	r3, r2
 801edba:	00db      	lsls	r3, r3, #3
 801edbc:	4403      	add	r3, r0
 801edbe:	3304      	adds	r3, #4
 801edc0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801edc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801edc6:	490d      	ldr	r1, [pc, #52]	; (801edfc <etharp_find_entry+0x2d4>)
 801edc8:	4613      	mov	r3, r2
 801edca:	005b      	lsls	r3, r3, #1
 801edcc:	4413      	add	r3, r2
 801edce:	00db      	lsls	r3, r3, #3
 801edd0:	440b      	add	r3, r1
 801edd2:	3312      	adds	r3, #18
 801edd4:	2200      	movs	r2, #0
 801edd6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801edd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801eddc:	4907      	ldr	r1, [pc, #28]	; (801edfc <etharp_find_entry+0x2d4>)
 801edde:	4613      	mov	r3, r2
 801ede0:	005b      	lsls	r3, r3, #1
 801ede2:	4413      	add	r3, r2
 801ede4:	00db      	lsls	r3, r3, #3
 801ede6:	440b      	add	r3, r1
 801ede8:	3308      	adds	r3, #8
 801edea:	687a      	ldr	r2, [r7, #4]
 801edec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801edee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801edf2:	4618      	mov	r0, r3
 801edf4:	3728      	adds	r7, #40	; 0x28
 801edf6:	46bd      	mov	sp, r7
 801edf8:	bd80      	pop	{r7, pc}
 801edfa:	bf00      	nop
 801edfc:	2000c014 	.word	0x2000c014
 801ee00:	08026b4c 	.word	0x08026b4c
 801ee04:	08026b84 	.word	0x08026b84
 801ee08:	08026bc4 	.word	0x08026bc4
 801ee0c:	08026bec 	.word	0x08026bec
 801ee10:	08026c04 	.word	0x08026c04
 801ee14:	08026c18 	.word	0x08026c18

0801ee18 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801ee18:	b580      	push	{r7, lr}
 801ee1a:	b088      	sub	sp, #32
 801ee1c:	af02      	add	r7, sp, #8
 801ee1e:	60f8      	str	r0, [r7, #12]
 801ee20:	60b9      	str	r1, [r7, #8]
 801ee22:	607a      	str	r2, [r7, #4]
 801ee24:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801ee26:	68fb      	ldr	r3, [r7, #12]
 801ee28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ee2c:	2b06      	cmp	r3, #6
 801ee2e:	d006      	beq.n	801ee3e <etharp_update_arp_entry+0x26>
 801ee30:	4b48      	ldr	r3, [pc, #288]	; (801ef54 <etharp_update_arp_entry+0x13c>)
 801ee32:	f240 12a9 	movw	r2, #425	; 0x1a9
 801ee36:	4948      	ldr	r1, [pc, #288]	; (801ef58 <etharp_update_arp_entry+0x140>)
 801ee38:	4848      	ldr	r0, [pc, #288]	; (801ef5c <etharp_update_arp_entry+0x144>)
 801ee3a:	f003 fcb9 	bl	80227b0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801ee3e:	68bb      	ldr	r3, [r7, #8]
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	d012      	beq.n	801ee6a <etharp_update_arp_entry+0x52>
 801ee44:	68bb      	ldr	r3, [r7, #8]
 801ee46:	681b      	ldr	r3, [r3, #0]
 801ee48:	2b00      	cmp	r3, #0
 801ee4a:	d00e      	beq.n	801ee6a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ee4c:	68bb      	ldr	r3, [r7, #8]
 801ee4e:	681b      	ldr	r3, [r3, #0]
 801ee50:	68f9      	ldr	r1, [r7, #12]
 801ee52:	4618      	mov	r0, r3
 801ee54:	f001 f8fe 	bl	8020054 <ip4_addr_isbroadcast_u32>
 801ee58:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801ee5a:	2b00      	cmp	r3, #0
 801ee5c:	d105      	bne.n	801ee6a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801ee5e:	68bb      	ldr	r3, [r7, #8]
 801ee60:	681b      	ldr	r3, [r3, #0]
 801ee62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ee66:	2be0      	cmp	r3, #224	; 0xe0
 801ee68:	d102      	bne.n	801ee70 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ee6a:	f06f 030f 	mvn.w	r3, #15
 801ee6e:	e06c      	b.n	801ef4a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801ee70:	78fb      	ldrb	r3, [r7, #3]
 801ee72:	68fa      	ldr	r2, [r7, #12]
 801ee74:	4619      	mov	r1, r3
 801ee76:	68b8      	ldr	r0, [r7, #8]
 801ee78:	f7ff fe56 	bl	801eb28 <etharp_find_entry>
 801ee7c:	4603      	mov	r3, r0
 801ee7e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801ee80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ee84:	2b00      	cmp	r3, #0
 801ee86:	da02      	bge.n	801ee8e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801ee88:	8afb      	ldrh	r3, [r7, #22]
 801ee8a:	b25b      	sxtb	r3, r3
 801ee8c:	e05d      	b.n	801ef4a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801ee8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ee92:	4933      	ldr	r1, [pc, #204]	; (801ef60 <etharp_update_arp_entry+0x148>)
 801ee94:	4613      	mov	r3, r2
 801ee96:	005b      	lsls	r3, r3, #1
 801ee98:	4413      	add	r3, r2
 801ee9a:	00db      	lsls	r3, r3, #3
 801ee9c:	440b      	add	r3, r1
 801ee9e:	3314      	adds	r3, #20
 801eea0:	2202      	movs	r2, #2
 801eea2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801eea4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801eea8:	492d      	ldr	r1, [pc, #180]	; (801ef60 <etharp_update_arp_entry+0x148>)
 801eeaa:	4613      	mov	r3, r2
 801eeac:	005b      	lsls	r3, r3, #1
 801eeae:	4413      	add	r3, r2
 801eeb0:	00db      	lsls	r3, r3, #3
 801eeb2:	440b      	add	r3, r1
 801eeb4:	3308      	adds	r3, #8
 801eeb6:	68fa      	ldr	r2, [r7, #12]
 801eeb8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801eeba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801eebe:	4613      	mov	r3, r2
 801eec0:	005b      	lsls	r3, r3, #1
 801eec2:	4413      	add	r3, r2
 801eec4:	00db      	lsls	r3, r3, #3
 801eec6:	3308      	adds	r3, #8
 801eec8:	4a25      	ldr	r2, [pc, #148]	; (801ef60 <etharp_update_arp_entry+0x148>)
 801eeca:	4413      	add	r3, r2
 801eecc:	3304      	adds	r3, #4
 801eece:	2206      	movs	r2, #6
 801eed0:	6879      	ldr	r1, [r7, #4]
 801eed2:	4618      	mov	r0, r3
 801eed4:	f003 fb5c 	bl	8022590 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801eed8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801eedc:	4920      	ldr	r1, [pc, #128]	; (801ef60 <etharp_update_arp_entry+0x148>)
 801eede:	4613      	mov	r3, r2
 801eee0:	005b      	lsls	r3, r3, #1
 801eee2:	4413      	add	r3, r2
 801eee4:	00db      	lsls	r3, r3, #3
 801eee6:	440b      	add	r3, r1
 801eee8:	3312      	adds	r3, #18
 801eeea:	2200      	movs	r2, #0
 801eeec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801eeee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801eef2:	491b      	ldr	r1, [pc, #108]	; (801ef60 <etharp_update_arp_entry+0x148>)
 801eef4:	4613      	mov	r3, r2
 801eef6:	005b      	lsls	r3, r3, #1
 801eef8:	4413      	add	r3, r2
 801eefa:	00db      	lsls	r3, r3, #3
 801eefc:	440b      	add	r3, r1
 801eefe:	681b      	ldr	r3, [r3, #0]
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d021      	beq.n	801ef48 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801ef04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ef08:	4915      	ldr	r1, [pc, #84]	; (801ef60 <etharp_update_arp_entry+0x148>)
 801ef0a:	4613      	mov	r3, r2
 801ef0c:	005b      	lsls	r3, r3, #1
 801ef0e:	4413      	add	r3, r2
 801ef10:	00db      	lsls	r3, r3, #3
 801ef12:	440b      	add	r3, r1
 801ef14:	681b      	ldr	r3, [r3, #0]
 801ef16:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801ef18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ef1c:	4910      	ldr	r1, [pc, #64]	; (801ef60 <etharp_update_arp_entry+0x148>)
 801ef1e:	4613      	mov	r3, r2
 801ef20:	005b      	lsls	r3, r3, #1
 801ef22:	4413      	add	r3, r2
 801ef24:	00db      	lsls	r3, r3, #3
 801ef26:	440b      	add	r3, r1
 801ef28:	2200      	movs	r2, #0
 801ef2a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801ef2c:	68fb      	ldr	r3, [r7, #12]
 801ef2e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801ef32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ef36:	9300      	str	r3, [sp, #0]
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	6939      	ldr	r1, [r7, #16]
 801ef3c:	68f8      	ldr	r0, [r7, #12]
 801ef3e:	f001 ff97 	bl	8020e70 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801ef42:	6938      	ldr	r0, [r7, #16]
 801ef44:	f7f8 f9fc 	bl	8017340 <pbuf_free>
  }
  return ERR_OK;
 801ef48:	2300      	movs	r3, #0
}
 801ef4a:	4618      	mov	r0, r3
 801ef4c:	3718      	adds	r7, #24
 801ef4e:	46bd      	mov	sp, r7
 801ef50:	bd80      	pop	{r7, pc}
 801ef52:	bf00      	nop
 801ef54:	08026b4c 	.word	0x08026b4c
 801ef58:	08026c44 	.word	0x08026c44
 801ef5c:	08026bc4 	.word	0x08026bc4
 801ef60:	2000c014 	.word	0x2000c014

0801ef64 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801ef64:	b580      	push	{r7, lr}
 801ef66:	b084      	sub	sp, #16
 801ef68:	af00      	add	r7, sp, #0
 801ef6a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ef6c:	2300      	movs	r3, #0
 801ef6e:	60fb      	str	r3, [r7, #12]
 801ef70:	e01e      	b.n	801efb0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801ef72:	4913      	ldr	r1, [pc, #76]	; (801efc0 <etharp_cleanup_netif+0x5c>)
 801ef74:	68fa      	ldr	r2, [r7, #12]
 801ef76:	4613      	mov	r3, r2
 801ef78:	005b      	lsls	r3, r3, #1
 801ef7a:	4413      	add	r3, r2
 801ef7c:	00db      	lsls	r3, r3, #3
 801ef7e:	440b      	add	r3, r1
 801ef80:	3314      	adds	r3, #20
 801ef82:	781b      	ldrb	r3, [r3, #0]
 801ef84:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801ef86:	7afb      	ldrb	r3, [r7, #11]
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	d00e      	beq.n	801efaa <etharp_cleanup_netif+0x46>
 801ef8c:	490c      	ldr	r1, [pc, #48]	; (801efc0 <etharp_cleanup_netif+0x5c>)
 801ef8e:	68fa      	ldr	r2, [r7, #12]
 801ef90:	4613      	mov	r3, r2
 801ef92:	005b      	lsls	r3, r3, #1
 801ef94:	4413      	add	r3, r2
 801ef96:	00db      	lsls	r3, r3, #3
 801ef98:	440b      	add	r3, r1
 801ef9a:	3308      	adds	r3, #8
 801ef9c:	681b      	ldr	r3, [r3, #0]
 801ef9e:	687a      	ldr	r2, [r7, #4]
 801efa0:	429a      	cmp	r2, r3
 801efa2:	d102      	bne.n	801efaa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801efa4:	68f8      	ldr	r0, [r7, #12]
 801efa6:	f7ff fce5 	bl	801e974 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801efaa:	68fb      	ldr	r3, [r7, #12]
 801efac:	3301      	adds	r3, #1
 801efae:	60fb      	str	r3, [r7, #12]
 801efb0:	68fb      	ldr	r3, [r7, #12]
 801efb2:	2b09      	cmp	r3, #9
 801efb4:	dddd      	ble.n	801ef72 <etharp_cleanup_netif+0xe>
    }
  }
}
 801efb6:	bf00      	nop
 801efb8:	bf00      	nop
 801efba:	3710      	adds	r7, #16
 801efbc:	46bd      	mov	sp, r7
 801efbe:	bd80      	pop	{r7, pc}
 801efc0:	2000c014 	.word	0x2000c014

0801efc4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801efc4:	b5b0      	push	{r4, r5, r7, lr}
 801efc6:	b08a      	sub	sp, #40	; 0x28
 801efc8:	af04      	add	r7, sp, #16
 801efca:	6078      	str	r0, [r7, #4]
 801efcc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801efce:	683b      	ldr	r3, [r7, #0]
 801efd0:	2b00      	cmp	r3, #0
 801efd2:	d107      	bne.n	801efe4 <etharp_input+0x20>
 801efd4:	4b3d      	ldr	r3, [pc, #244]	; (801f0cc <etharp_input+0x108>)
 801efd6:	f240 228a 	movw	r2, #650	; 0x28a
 801efda:	493d      	ldr	r1, [pc, #244]	; (801f0d0 <etharp_input+0x10c>)
 801efdc:	483d      	ldr	r0, [pc, #244]	; (801f0d4 <etharp_input+0x110>)
 801efde:	f003 fbe7 	bl	80227b0 <iprintf>
 801efe2:	e06f      	b.n	801f0c4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801efe4:	687b      	ldr	r3, [r7, #4]
 801efe6:	685b      	ldr	r3, [r3, #4]
 801efe8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801efea:	693b      	ldr	r3, [r7, #16]
 801efec:	881b      	ldrh	r3, [r3, #0]
 801efee:	b29b      	uxth	r3, r3
 801eff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801eff4:	d10c      	bne.n	801f010 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801eff6:	693b      	ldr	r3, [r7, #16]
 801eff8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801effa:	2b06      	cmp	r3, #6
 801effc:	d108      	bne.n	801f010 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801effe:	693b      	ldr	r3, [r7, #16]
 801f000:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801f002:	2b04      	cmp	r3, #4
 801f004:	d104      	bne.n	801f010 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801f006:	693b      	ldr	r3, [r7, #16]
 801f008:	885b      	ldrh	r3, [r3, #2]
 801f00a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801f00c:	2b08      	cmp	r3, #8
 801f00e:	d003      	beq.n	801f018 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801f010:	6878      	ldr	r0, [r7, #4]
 801f012:	f7f8 f995 	bl	8017340 <pbuf_free>
    return;
 801f016:	e055      	b.n	801f0c4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801f018:	693b      	ldr	r3, [r7, #16]
 801f01a:	330e      	adds	r3, #14
 801f01c:	681b      	ldr	r3, [r3, #0]
 801f01e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801f020:	693b      	ldr	r3, [r7, #16]
 801f022:	3318      	adds	r3, #24
 801f024:	681b      	ldr	r3, [r3, #0]
 801f026:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801f028:	683b      	ldr	r3, [r7, #0]
 801f02a:	3304      	adds	r3, #4
 801f02c:	681b      	ldr	r3, [r3, #0]
 801f02e:	2b00      	cmp	r3, #0
 801f030:	d102      	bne.n	801f038 <etharp_input+0x74>
    for_us = 0;
 801f032:	2300      	movs	r3, #0
 801f034:	75fb      	strb	r3, [r7, #23]
 801f036:	e009      	b.n	801f04c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801f038:	68ba      	ldr	r2, [r7, #8]
 801f03a:	683b      	ldr	r3, [r7, #0]
 801f03c:	3304      	adds	r3, #4
 801f03e:	681b      	ldr	r3, [r3, #0]
 801f040:	429a      	cmp	r2, r3
 801f042:	bf0c      	ite	eq
 801f044:	2301      	moveq	r3, #1
 801f046:	2300      	movne	r3, #0
 801f048:	b2db      	uxtb	r3, r3
 801f04a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801f04c:	693b      	ldr	r3, [r7, #16]
 801f04e:	f103 0208 	add.w	r2, r3, #8
 801f052:	7dfb      	ldrb	r3, [r7, #23]
 801f054:	2b00      	cmp	r3, #0
 801f056:	d001      	beq.n	801f05c <etharp_input+0x98>
 801f058:	2301      	movs	r3, #1
 801f05a:	e000      	b.n	801f05e <etharp_input+0x9a>
 801f05c:	2302      	movs	r3, #2
 801f05e:	f107 010c 	add.w	r1, r7, #12
 801f062:	6838      	ldr	r0, [r7, #0]
 801f064:	f7ff fed8 	bl	801ee18 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801f068:	693b      	ldr	r3, [r7, #16]
 801f06a:	88db      	ldrh	r3, [r3, #6]
 801f06c:	b29b      	uxth	r3, r3
 801f06e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f072:	d003      	beq.n	801f07c <etharp_input+0xb8>
 801f074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f078:	d01e      	beq.n	801f0b8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801f07a:	e020      	b.n	801f0be <etharp_input+0xfa>
      if (for_us) {
 801f07c:	7dfb      	ldrb	r3, [r7, #23]
 801f07e:	2b00      	cmp	r3, #0
 801f080:	d01c      	beq.n	801f0bc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801f082:	683b      	ldr	r3, [r7, #0]
 801f084:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801f088:	693b      	ldr	r3, [r7, #16]
 801f08a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801f08e:	683b      	ldr	r3, [r7, #0]
 801f090:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801f094:	683b      	ldr	r3, [r7, #0]
 801f096:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801f098:	693a      	ldr	r2, [r7, #16]
 801f09a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801f09c:	2102      	movs	r1, #2
 801f09e:	9103      	str	r1, [sp, #12]
 801f0a0:	f107 010c 	add.w	r1, r7, #12
 801f0a4:	9102      	str	r1, [sp, #8]
 801f0a6:	9201      	str	r2, [sp, #4]
 801f0a8:	9300      	str	r3, [sp, #0]
 801f0aa:	462b      	mov	r3, r5
 801f0ac:	4622      	mov	r2, r4
 801f0ae:	4601      	mov	r1, r0
 801f0b0:	6838      	ldr	r0, [r7, #0]
 801f0b2:	f000 faeb 	bl	801f68c <etharp_raw>
      break;
 801f0b6:	e001      	b.n	801f0bc <etharp_input+0xf8>
      break;
 801f0b8:	bf00      	nop
 801f0ba:	e000      	b.n	801f0be <etharp_input+0xfa>
      break;
 801f0bc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801f0be:	6878      	ldr	r0, [r7, #4]
 801f0c0:	f7f8 f93e 	bl	8017340 <pbuf_free>
}
 801f0c4:	3718      	adds	r7, #24
 801f0c6:	46bd      	mov	sp, r7
 801f0c8:	bdb0      	pop	{r4, r5, r7, pc}
 801f0ca:	bf00      	nop
 801f0cc:	08026b4c 	.word	0x08026b4c
 801f0d0:	08026c9c 	.word	0x08026c9c
 801f0d4:	08026bc4 	.word	0x08026bc4

0801f0d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801f0d8:	b580      	push	{r7, lr}
 801f0da:	b086      	sub	sp, #24
 801f0dc:	af02      	add	r7, sp, #8
 801f0de:	60f8      	str	r0, [r7, #12]
 801f0e0:	60b9      	str	r1, [r7, #8]
 801f0e2:	4613      	mov	r3, r2
 801f0e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801f0e6:	79fa      	ldrb	r2, [r7, #7]
 801f0e8:	4944      	ldr	r1, [pc, #272]	; (801f1fc <etharp_output_to_arp_index+0x124>)
 801f0ea:	4613      	mov	r3, r2
 801f0ec:	005b      	lsls	r3, r3, #1
 801f0ee:	4413      	add	r3, r2
 801f0f0:	00db      	lsls	r3, r3, #3
 801f0f2:	440b      	add	r3, r1
 801f0f4:	3314      	adds	r3, #20
 801f0f6:	781b      	ldrb	r3, [r3, #0]
 801f0f8:	2b01      	cmp	r3, #1
 801f0fa:	d806      	bhi.n	801f10a <etharp_output_to_arp_index+0x32>
 801f0fc:	4b40      	ldr	r3, [pc, #256]	; (801f200 <etharp_output_to_arp_index+0x128>)
 801f0fe:	f240 22ee 	movw	r2, #750	; 0x2ee
 801f102:	4940      	ldr	r1, [pc, #256]	; (801f204 <etharp_output_to_arp_index+0x12c>)
 801f104:	4840      	ldr	r0, [pc, #256]	; (801f208 <etharp_output_to_arp_index+0x130>)
 801f106:	f003 fb53 	bl	80227b0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801f10a:	79fa      	ldrb	r2, [r7, #7]
 801f10c:	493b      	ldr	r1, [pc, #236]	; (801f1fc <etharp_output_to_arp_index+0x124>)
 801f10e:	4613      	mov	r3, r2
 801f110:	005b      	lsls	r3, r3, #1
 801f112:	4413      	add	r3, r2
 801f114:	00db      	lsls	r3, r3, #3
 801f116:	440b      	add	r3, r1
 801f118:	3314      	adds	r3, #20
 801f11a:	781b      	ldrb	r3, [r3, #0]
 801f11c:	2b02      	cmp	r3, #2
 801f11e:	d153      	bne.n	801f1c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801f120:	79fa      	ldrb	r2, [r7, #7]
 801f122:	4936      	ldr	r1, [pc, #216]	; (801f1fc <etharp_output_to_arp_index+0x124>)
 801f124:	4613      	mov	r3, r2
 801f126:	005b      	lsls	r3, r3, #1
 801f128:	4413      	add	r3, r2
 801f12a:	00db      	lsls	r3, r3, #3
 801f12c:	440b      	add	r3, r1
 801f12e:	3312      	adds	r3, #18
 801f130:	881b      	ldrh	r3, [r3, #0]
 801f132:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801f136:	d919      	bls.n	801f16c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801f138:	79fa      	ldrb	r2, [r7, #7]
 801f13a:	4613      	mov	r3, r2
 801f13c:	005b      	lsls	r3, r3, #1
 801f13e:	4413      	add	r3, r2
 801f140:	00db      	lsls	r3, r3, #3
 801f142:	4a2e      	ldr	r2, [pc, #184]	; (801f1fc <etharp_output_to_arp_index+0x124>)
 801f144:	4413      	add	r3, r2
 801f146:	3304      	adds	r3, #4
 801f148:	4619      	mov	r1, r3
 801f14a:	68f8      	ldr	r0, [r7, #12]
 801f14c:	f000 fb4c 	bl	801f7e8 <etharp_request>
 801f150:	4603      	mov	r3, r0
 801f152:	2b00      	cmp	r3, #0
 801f154:	d138      	bne.n	801f1c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801f156:	79fa      	ldrb	r2, [r7, #7]
 801f158:	4928      	ldr	r1, [pc, #160]	; (801f1fc <etharp_output_to_arp_index+0x124>)
 801f15a:	4613      	mov	r3, r2
 801f15c:	005b      	lsls	r3, r3, #1
 801f15e:	4413      	add	r3, r2
 801f160:	00db      	lsls	r3, r3, #3
 801f162:	440b      	add	r3, r1
 801f164:	3314      	adds	r3, #20
 801f166:	2203      	movs	r2, #3
 801f168:	701a      	strb	r2, [r3, #0]
 801f16a:	e02d      	b.n	801f1c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801f16c:	79fa      	ldrb	r2, [r7, #7]
 801f16e:	4923      	ldr	r1, [pc, #140]	; (801f1fc <etharp_output_to_arp_index+0x124>)
 801f170:	4613      	mov	r3, r2
 801f172:	005b      	lsls	r3, r3, #1
 801f174:	4413      	add	r3, r2
 801f176:	00db      	lsls	r3, r3, #3
 801f178:	440b      	add	r3, r1
 801f17a:	3312      	adds	r3, #18
 801f17c:	881b      	ldrh	r3, [r3, #0]
 801f17e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801f182:	d321      	bcc.n	801f1c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801f184:	79fa      	ldrb	r2, [r7, #7]
 801f186:	4613      	mov	r3, r2
 801f188:	005b      	lsls	r3, r3, #1
 801f18a:	4413      	add	r3, r2
 801f18c:	00db      	lsls	r3, r3, #3
 801f18e:	4a1b      	ldr	r2, [pc, #108]	; (801f1fc <etharp_output_to_arp_index+0x124>)
 801f190:	4413      	add	r3, r2
 801f192:	1d19      	adds	r1, r3, #4
 801f194:	79fa      	ldrb	r2, [r7, #7]
 801f196:	4613      	mov	r3, r2
 801f198:	005b      	lsls	r3, r3, #1
 801f19a:	4413      	add	r3, r2
 801f19c:	00db      	lsls	r3, r3, #3
 801f19e:	3308      	adds	r3, #8
 801f1a0:	4a16      	ldr	r2, [pc, #88]	; (801f1fc <etharp_output_to_arp_index+0x124>)
 801f1a2:	4413      	add	r3, r2
 801f1a4:	3304      	adds	r3, #4
 801f1a6:	461a      	mov	r2, r3
 801f1a8:	68f8      	ldr	r0, [r7, #12]
 801f1aa:	f000 fafb 	bl	801f7a4 <etharp_request_dst>
 801f1ae:	4603      	mov	r3, r0
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	d109      	bne.n	801f1c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801f1b4:	79fa      	ldrb	r2, [r7, #7]
 801f1b6:	4911      	ldr	r1, [pc, #68]	; (801f1fc <etharp_output_to_arp_index+0x124>)
 801f1b8:	4613      	mov	r3, r2
 801f1ba:	005b      	lsls	r3, r3, #1
 801f1bc:	4413      	add	r3, r2
 801f1be:	00db      	lsls	r3, r3, #3
 801f1c0:	440b      	add	r3, r1
 801f1c2:	3314      	adds	r3, #20
 801f1c4:	2203      	movs	r2, #3
 801f1c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801f1c8:	68fb      	ldr	r3, [r7, #12]
 801f1ca:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801f1ce:	79fa      	ldrb	r2, [r7, #7]
 801f1d0:	4613      	mov	r3, r2
 801f1d2:	005b      	lsls	r3, r3, #1
 801f1d4:	4413      	add	r3, r2
 801f1d6:	00db      	lsls	r3, r3, #3
 801f1d8:	3308      	adds	r3, #8
 801f1da:	4a08      	ldr	r2, [pc, #32]	; (801f1fc <etharp_output_to_arp_index+0x124>)
 801f1dc:	4413      	add	r3, r2
 801f1de:	3304      	adds	r3, #4
 801f1e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f1e4:	9200      	str	r2, [sp, #0]
 801f1e6:	460a      	mov	r2, r1
 801f1e8:	68b9      	ldr	r1, [r7, #8]
 801f1ea:	68f8      	ldr	r0, [r7, #12]
 801f1ec:	f001 fe40 	bl	8020e70 <ethernet_output>
 801f1f0:	4603      	mov	r3, r0
}
 801f1f2:	4618      	mov	r0, r3
 801f1f4:	3710      	adds	r7, #16
 801f1f6:	46bd      	mov	sp, r7
 801f1f8:	bd80      	pop	{r7, pc}
 801f1fa:	bf00      	nop
 801f1fc:	2000c014 	.word	0x2000c014
 801f200:	08026b4c 	.word	0x08026b4c
 801f204:	08026cbc 	.word	0x08026cbc
 801f208:	08026bc4 	.word	0x08026bc4

0801f20c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801f20c:	b580      	push	{r7, lr}
 801f20e:	b08a      	sub	sp, #40	; 0x28
 801f210:	af02      	add	r7, sp, #8
 801f212:	60f8      	str	r0, [r7, #12]
 801f214:	60b9      	str	r1, [r7, #8]
 801f216:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801f218:	687b      	ldr	r3, [r7, #4]
 801f21a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f21c:	68fb      	ldr	r3, [r7, #12]
 801f21e:	2b00      	cmp	r3, #0
 801f220:	d106      	bne.n	801f230 <etharp_output+0x24>
 801f222:	4b73      	ldr	r3, [pc, #460]	; (801f3f0 <etharp_output+0x1e4>)
 801f224:	f240 321e 	movw	r2, #798	; 0x31e
 801f228:	4972      	ldr	r1, [pc, #456]	; (801f3f4 <etharp_output+0x1e8>)
 801f22a:	4873      	ldr	r0, [pc, #460]	; (801f3f8 <etharp_output+0x1ec>)
 801f22c:	f003 fac0 	bl	80227b0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801f230:	68bb      	ldr	r3, [r7, #8]
 801f232:	2b00      	cmp	r3, #0
 801f234:	d106      	bne.n	801f244 <etharp_output+0x38>
 801f236:	4b6e      	ldr	r3, [pc, #440]	; (801f3f0 <etharp_output+0x1e4>)
 801f238:	f240 321f 	movw	r2, #799	; 0x31f
 801f23c:	496f      	ldr	r1, [pc, #444]	; (801f3fc <etharp_output+0x1f0>)
 801f23e:	486e      	ldr	r0, [pc, #440]	; (801f3f8 <etharp_output+0x1ec>)
 801f240:	f003 fab6 	bl	80227b0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	2b00      	cmp	r3, #0
 801f248:	d106      	bne.n	801f258 <etharp_output+0x4c>
 801f24a:	4b69      	ldr	r3, [pc, #420]	; (801f3f0 <etharp_output+0x1e4>)
 801f24c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801f250:	496b      	ldr	r1, [pc, #428]	; (801f400 <etharp_output+0x1f4>)
 801f252:	4869      	ldr	r0, [pc, #420]	; (801f3f8 <etharp_output+0x1ec>)
 801f254:	f003 faac 	bl	80227b0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801f258:	687b      	ldr	r3, [r7, #4]
 801f25a:	681b      	ldr	r3, [r3, #0]
 801f25c:	68f9      	ldr	r1, [r7, #12]
 801f25e:	4618      	mov	r0, r3
 801f260:	f000 fef8 	bl	8020054 <ip4_addr_isbroadcast_u32>
 801f264:	4603      	mov	r3, r0
 801f266:	2b00      	cmp	r3, #0
 801f268:	d002      	beq.n	801f270 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801f26a:	4b66      	ldr	r3, [pc, #408]	; (801f404 <etharp_output+0x1f8>)
 801f26c:	61fb      	str	r3, [r7, #28]
 801f26e:	e0af      	b.n	801f3d0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801f270:	687b      	ldr	r3, [r7, #4]
 801f272:	681b      	ldr	r3, [r3, #0]
 801f274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f278:	2be0      	cmp	r3, #224	; 0xe0
 801f27a:	d118      	bne.n	801f2ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801f27c:	2301      	movs	r3, #1
 801f27e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801f280:	2300      	movs	r3, #0
 801f282:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801f284:	235e      	movs	r3, #94	; 0x5e
 801f286:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801f288:	687b      	ldr	r3, [r7, #4]
 801f28a:	3301      	adds	r3, #1
 801f28c:	781b      	ldrb	r3, [r3, #0]
 801f28e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801f292:	b2db      	uxtb	r3, r3
 801f294:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801f296:	687b      	ldr	r3, [r7, #4]
 801f298:	3302      	adds	r3, #2
 801f29a:	781b      	ldrb	r3, [r3, #0]
 801f29c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801f29e:	687b      	ldr	r3, [r7, #4]
 801f2a0:	3303      	adds	r3, #3
 801f2a2:	781b      	ldrb	r3, [r3, #0]
 801f2a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801f2a6:	f107 0310 	add.w	r3, r7, #16
 801f2aa:	61fb      	str	r3, [r7, #28]
 801f2ac:	e090      	b.n	801f3d0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	681a      	ldr	r2, [r3, #0]
 801f2b2:	68fb      	ldr	r3, [r7, #12]
 801f2b4:	3304      	adds	r3, #4
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	405a      	eors	r2, r3
 801f2ba:	68fb      	ldr	r3, [r7, #12]
 801f2bc:	3308      	adds	r3, #8
 801f2be:	681b      	ldr	r3, [r3, #0]
 801f2c0:	4013      	ands	r3, r2
 801f2c2:	2b00      	cmp	r3, #0
 801f2c4:	d012      	beq.n	801f2ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801f2c6:	687b      	ldr	r3, [r7, #4]
 801f2c8:	681b      	ldr	r3, [r3, #0]
 801f2ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801f2cc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801f2d0:	4293      	cmp	r3, r2
 801f2d2:	d00b      	beq.n	801f2ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801f2d4:	68fb      	ldr	r3, [r7, #12]
 801f2d6:	330c      	adds	r3, #12
 801f2d8:	681b      	ldr	r3, [r3, #0]
 801f2da:	2b00      	cmp	r3, #0
 801f2dc:	d003      	beq.n	801f2e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801f2de:	68fb      	ldr	r3, [r7, #12]
 801f2e0:	330c      	adds	r3, #12
 801f2e2:	61bb      	str	r3, [r7, #24]
 801f2e4:	e002      	b.n	801f2ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801f2e6:	f06f 0303 	mvn.w	r3, #3
 801f2ea:	e07d      	b.n	801f3e8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801f2ec:	4b46      	ldr	r3, [pc, #280]	; (801f408 <etharp_output+0x1fc>)
 801f2ee:	781b      	ldrb	r3, [r3, #0]
 801f2f0:	4619      	mov	r1, r3
 801f2f2:	4a46      	ldr	r2, [pc, #280]	; (801f40c <etharp_output+0x200>)
 801f2f4:	460b      	mov	r3, r1
 801f2f6:	005b      	lsls	r3, r3, #1
 801f2f8:	440b      	add	r3, r1
 801f2fa:	00db      	lsls	r3, r3, #3
 801f2fc:	4413      	add	r3, r2
 801f2fe:	3314      	adds	r3, #20
 801f300:	781b      	ldrb	r3, [r3, #0]
 801f302:	2b01      	cmp	r3, #1
 801f304:	d925      	bls.n	801f352 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801f306:	4b40      	ldr	r3, [pc, #256]	; (801f408 <etharp_output+0x1fc>)
 801f308:	781b      	ldrb	r3, [r3, #0]
 801f30a:	4619      	mov	r1, r3
 801f30c:	4a3f      	ldr	r2, [pc, #252]	; (801f40c <etharp_output+0x200>)
 801f30e:	460b      	mov	r3, r1
 801f310:	005b      	lsls	r3, r3, #1
 801f312:	440b      	add	r3, r1
 801f314:	00db      	lsls	r3, r3, #3
 801f316:	4413      	add	r3, r2
 801f318:	3308      	adds	r3, #8
 801f31a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801f31c:	68fa      	ldr	r2, [r7, #12]
 801f31e:	429a      	cmp	r2, r3
 801f320:	d117      	bne.n	801f352 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801f322:	69bb      	ldr	r3, [r7, #24]
 801f324:	681a      	ldr	r2, [r3, #0]
 801f326:	4b38      	ldr	r3, [pc, #224]	; (801f408 <etharp_output+0x1fc>)
 801f328:	781b      	ldrb	r3, [r3, #0]
 801f32a:	4618      	mov	r0, r3
 801f32c:	4937      	ldr	r1, [pc, #220]	; (801f40c <etharp_output+0x200>)
 801f32e:	4603      	mov	r3, r0
 801f330:	005b      	lsls	r3, r3, #1
 801f332:	4403      	add	r3, r0
 801f334:	00db      	lsls	r3, r3, #3
 801f336:	440b      	add	r3, r1
 801f338:	3304      	adds	r3, #4
 801f33a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801f33c:	429a      	cmp	r2, r3
 801f33e:	d108      	bne.n	801f352 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801f340:	4b31      	ldr	r3, [pc, #196]	; (801f408 <etharp_output+0x1fc>)
 801f342:	781b      	ldrb	r3, [r3, #0]
 801f344:	461a      	mov	r2, r3
 801f346:	68b9      	ldr	r1, [r7, #8]
 801f348:	68f8      	ldr	r0, [r7, #12]
 801f34a:	f7ff fec5 	bl	801f0d8 <etharp_output_to_arp_index>
 801f34e:	4603      	mov	r3, r0
 801f350:	e04a      	b.n	801f3e8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801f352:	2300      	movs	r3, #0
 801f354:	75fb      	strb	r3, [r7, #23]
 801f356:	e031      	b.n	801f3bc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801f358:	7dfa      	ldrb	r2, [r7, #23]
 801f35a:	492c      	ldr	r1, [pc, #176]	; (801f40c <etharp_output+0x200>)
 801f35c:	4613      	mov	r3, r2
 801f35e:	005b      	lsls	r3, r3, #1
 801f360:	4413      	add	r3, r2
 801f362:	00db      	lsls	r3, r3, #3
 801f364:	440b      	add	r3, r1
 801f366:	3314      	adds	r3, #20
 801f368:	781b      	ldrb	r3, [r3, #0]
 801f36a:	2b01      	cmp	r3, #1
 801f36c:	d923      	bls.n	801f3b6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801f36e:	7dfa      	ldrb	r2, [r7, #23]
 801f370:	4926      	ldr	r1, [pc, #152]	; (801f40c <etharp_output+0x200>)
 801f372:	4613      	mov	r3, r2
 801f374:	005b      	lsls	r3, r3, #1
 801f376:	4413      	add	r3, r2
 801f378:	00db      	lsls	r3, r3, #3
 801f37a:	440b      	add	r3, r1
 801f37c:	3308      	adds	r3, #8
 801f37e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801f380:	68fa      	ldr	r2, [r7, #12]
 801f382:	429a      	cmp	r2, r3
 801f384:	d117      	bne.n	801f3b6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801f386:	69bb      	ldr	r3, [r7, #24]
 801f388:	6819      	ldr	r1, [r3, #0]
 801f38a:	7dfa      	ldrb	r2, [r7, #23]
 801f38c:	481f      	ldr	r0, [pc, #124]	; (801f40c <etharp_output+0x200>)
 801f38e:	4613      	mov	r3, r2
 801f390:	005b      	lsls	r3, r3, #1
 801f392:	4413      	add	r3, r2
 801f394:	00db      	lsls	r3, r3, #3
 801f396:	4403      	add	r3, r0
 801f398:	3304      	adds	r3, #4
 801f39a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801f39c:	4299      	cmp	r1, r3
 801f39e:	d10a      	bne.n	801f3b6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801f3a0:	4a19      	ldr	r2, [pc, #100]	; (801f408 <etharp_output+0x1fc>)
 801f3a2:	7dfb      	ldrb	r3, [r7, #23]
 801f3a4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801f3a6:	7dfb      	ldrb	r3, [r7, #23]
 801f3a8:	461a      	mov	r2, r3
 801f3aa:	68b9      	ldr	r1, [r7, #8]
 801f3ac:	68f8      	ldr	r0, [r7, #12]
 801f3ae:	f7ff fe93 	bl	801f0d8 <etharp_output_to_arp_index>
 801f3b2:	4603      	mov	r3, r0
 801f3b4:	e018      	b.n	801f3e8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801f3b6:	7dfb      	ldrb	r3, [r7, #23]
 801f3b8:	3301      	adds	r3, #1
 801f3ba:	75fb      	strb	r3, [r7, #23]
 801f3bc:	7dfb      	ldrb	r3, [r7, #23]
 801f3be:	2b09      	cmp	r3, #9
 801f3c0:	d9ca      	bls.n	801f358 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801f3c2:	68ba      	ldr	r2, [r7, #8]
 801f3c4:	69b9      	ldr	r1, [r7, #24]
 801f3c6:	68f8      	ldr	r0, [r7, #12]
 801f3c8:	f000 f822 	bl	801f410 <etharp_query>
 801f3cc:	4603      	mov	r3, r0
 801f3ce:	e00b      	b.n	801f3e8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801f3d0:	68fb      	ldr	r3, [r7, #12]
 801f3d2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801f3d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f3da:	9300      	str	r3, [sp, #0]
 801f3dc:	69fb      	ldr	r3, [r7, #28]
 801f3de:	68b9      	ldr	r1, [r7, #8]
 801f3e0:	68f8      	ldr	r0, [r7, #12]
 801f3e2:	f001 fd45 	bl	8020e70 <ethernet_output>
 801f3e6:	4603      	mov	r3, r0
}
 801f3e8:	4618      	mov	r0, r3
 801f3ea:	3720      	adds	r7, #32
 801f3ec:	46bd      	mov	sp, r7
 801f3ee:	bd80      	pop	{r7, pc}
 801f3f0:	08026b4c 	.word	0x08026b4c
 801f3f4:	08026c9c 	.word	0x08026c9c
 801f3f8:	08026bc4 	.word	0x08026bc4
 801f3fc:	08026cec 	.word	0x08026cec
 801f400:	08026c8c 	.word	0x08026c8c
 801f404:	0802739c 	.word	0x0802739c
 801f408:	2000c104 	.word	0x2000c104
 801f40c:	2000c014 	.word	0x2000c014

0801f410 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801f410:	b580      	push	{r7, lr}
 801f412:	b08c      	sub	sp, #48	; 0x30
 801f414:	af02      	add	r7, sp, #8
 801f416:	60f8      	str	r0, [r7, #12]
 801f418:	60b9      	str	r1, [r7, #8]
 801f41a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801f41c:	68fb      	ldr	r3, [r7, #12]
 801f41e:	3326      	adds	r3, #38	; 0x26
 801f420:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801f422:	23ff      	movs	r3, #255	; 0xff
 801f424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801f428:	2300      	movs	r3, #0
 801f42a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801f42c:	68bb      	ldr	r3, [r7, #8]
 801f42e:	681b      	ldr	r3, [r3, #0]
 801f430:	68f9      	ldr	r1, [r7, #12]
 801f432:	4618      	mov	r0, r3
 801f434:	f000 fe0e 	bl	8020054 <ip4_addr_isbroadcast_u32>
 801f438:	4603      	mov	r3, r0
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	d10c      	bne.n	801f458 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801f43e:	68bb      	ldr	r3, [r7, #8]
 801f440:	681b      	ldr	r3, [r3, #0]
 801f442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801f446:	2be0      	cmp	r3, #224	; 0xe0
 801f448:	d006      	beq.n	801f458 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801f44a:	68bb      	ldr	r3, [r7, #8]
 801f44c:	2b00      	cmp	r3, #0
 801f44e:	d003      	beq.n	801f458 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801f450:	68bb      	ldr	r3, [r7, #8]
 801f452:	681b      	ldr	r3, [r3, #0]
 801f454:	2b00      	cmp	r3, #0
 801f456:	d102      	bne.n	801f45e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801f458:	f06f 030f 	mvn.w	r3, #15
 801f45c:	e101      	b.n	801f662 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801f45e:	68fa      	ldr	r2, [r7, #12]
 801f460:	2101      	movs	r1, #1
 801f462:	68b8      	ldr	r0, [r7, #8]
 801f464:	f7ff fb60 	bl	801eb28 <etharp_find_entry>
 801f468:	4603      	mov	r3, r0
 801f46a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801f46c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801f470:	2b00      	cmp	r3, #0
 801f472:	da02      	bge.n	801f47a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801f474:	8a7b      	ldrh	r3, [r7, #18]
 801f476:	b25b      	sxtb	r3, r3
 801f478:	e0f3      	b.n	801f662 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801f47a:	8a7b      	ldrh	r3, [r7, #18]
 801f47c:	2b7e      	cmp	r3, #126	; 0x7e
 801f47e:	d906      	bls.n	801f48e <etharp_query+0x7e>
 801f480:	4b7a      	ldr	r3, [pc, #488]	; (801f66c <etharp_query+0x25c>)
 801f482:	f240 32c1 	movw	r2, #961	; 0x3c1
 801f486:	497a      	ldr	r1, [pc, #488]	; (801f670 <etharp_query+0x260>)
 801f488:	487a      	ldr	r0, [pc, #488]	; (801f674 <etharp_query+0x264>)
 801f48a:	f003 f991 	bl	80227b0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801f48e:	8a7b      	ldrh	r3, [r7, #18]
 801f490:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801f492:	7c7a      	ldrb	r2, [r7, #17]
 801f494:	4978      	ldr	r1, [pc, #480]	; (801f678 <etharp_query+0x268>)
 801f496:	4613      	mov	r3, r2
 801f498:	005b      	lsls	r3, r3, #1
 801f49a:	4413      	add	r3, r2
 801f49c:	00db      	lsls	r3, r3, #3
 801f49e:	440b      	add	r3, r1
 801f4a0:	3314      	adds	r3, #20
 801f4a2:	781b      	ldrb	r3, [r3, #0]
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	d115      	bne.n	801f4d4 <etharp_query+0xc4>
    is_new_entry = 1;
 801f4a8:	2301      	movs	r3, #1
 801f4aa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801f4ac:	7c7a      	ldrb	r2, [r7, #17]
 801f4ae:	4972      	ldr	r1, [pc, #456]	; (801f678 <etharp_query+0x268>)
 801f4b0:	4613      	mov	r3, r2
 801f4b2:	005b      	lsls	r3, r3, #1
 801f4b4:	4413      	add	r3, r2
 801f4b6:	00db      	lsls	r3, r3, #3
 801f4b8:	440b      	add	r3, r1
 801f4ba:	3314      	adds	r3, #20
 801f4bc:	2201      	movs	r2, #1
 801f4be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801f4c0:	7c7a      	ldrb	r2, [r7, #17]
 801f4c2:	496d      	ldr	r1, [pc, #436]	; (801f678 <etharp_query+0x268>)
 801f4c4:	4613      	mov	r3, r2
 801f4c6:	005b      	lsls	r3, r3, #1
 801f4c8:	4413      	add	r3, r2
 801f4ca:	00db      	lsls	r3, r3, #3
 801f4cc:	440b      	add	r3, r1
 801f4ce:	3308      	adds	r3, #8
 801f4d0:	68fa      	ldr	r2, [r7, #12]
 801f4d2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801f4d4:	7c7a      	ldrb	r2, [r7, #17]
 801f4d6:	4968      	ldr	r1, [pc, #416]	; (801f678 <etharp_query+0x268>)
 801f4d8:	4613      	mov	r3, r2
 801f4da:	005b      	lsls	r3, r3, #1
 801f4dc:	4413      	add	r3, r2
 801f4de:	00db      	lsls	r3, r3, #3
 801f4e0:	440b      	add	r3, r1
 801f4e2:	3314      	adds	r3, #20
 801f4e4:	781b      	ldrb	r3, [r3, #0]
 801f4e6:	2b01      	cmp	r3, #1
 801f4e8:	d011      	beq.n	801f50e <etharp_query+0xfe>
 801f4ea:	7c7a      	ldrb	r2, [r7, #17]
 801f4ec:	4962      	ldr	r1, [pc, #392]	; (801f678 <etharp_query+0x268>)
 801f4ee:	4613      	mov	r3, r2
 801f4f0:	005b      	lsls	r3, r3, #1
 801f4f2:	4413      	add	r3, r2
 801f4f4:	00db      	lsls	r3, r3, #3
 801f4f6:	440b      	add	r3, r1
 801f4f8:	3314      	adds	r3, #20
 801f4fa:	781b      	ldrb	r3, [r3, #0]
 801f4fc:	2b01      	cmp	r3, #1
 801f4fe:	d806      	bhi.n	801f50e <etharp_query+0xfe>
 801f500:	4b5a      	ldr	r3, [pc, #360]	; (801f66c <etharp_query+0x25c>)
 801f502:	f240 32cd 	movw	r2, #973	; 0x3cd
 801f506:	495d      	ldr	r1, [pc, #372]	; (801f67c <etharp_query+0x26c>)
 801f508:	485a      	ldr	r0, [pc, #360]	; (801f674 <etharp_query+0x264>)
 801f50a:	f003 f951 	bl	80227b0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801f50e:	6a3b      	ldr	r3, [r7, #32]
 801f510:	2b00      	cmp	r3, #0
 801f512:	d102      	bne.n	801f51a <etharp_query+0x10a>
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	2b00      	cmp	r3, #0
 801f518:	d10c      	bne.n	801f534 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801f51a:	68b9      	ldr	r1, [r7, #8]
 801f51c:	68f8      	ldr	r0, [r7, #12]
 801f51e:	f000 f963 	bl	801f7e8 <etharp_request>
 801f522:	4603      	mov	r3, r0
 801f524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801f528:	687b      	ldr	r3, [r7, #4]
 801f52a:	2b00      	cmp	r3, #0
 801f52c:	d102      	bne.n	801f534 <etharp_query+0x124>
      return result;
 801f52e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801f532:	e096      	b.n	801f662 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801f534:	687b      	ldr	r3, [r7, #4]
 801f536:	2b00      	cmp	r3, #0
 801f538:	d106      	bne.n	801f548 <etharp_query+0x138>
 801f53a:	4b4c      	ldr	r3, [pc, #304]	; (801f66c <etharp_query+0x25c>)
 801f53c:	f240 32e1 	movw	r2, #993	; 0x3e1
 801f540:	494f      	ldr	r1, [pc, #316]	; (801f680 <etharp_query+0x270>)
 801f542:	484c      	ldr	r0, [pc, #304]	; (801f674 <etharp_query+0x264>)
 801f544:	f003 f934 	bl	80227b0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801f548:	7c7a      	ldrb	r2, [r7, #17]
 801f54a:	494b      	ldr	r1, [pc, #300]	; (801f678 <etharp_query+0x268>)
 801f54c:	4613      	mov	r3, r2
 801f54e:	005b      	lsls	r3, r3, #1
 801f550:	4413      	add	r3, r2
 801f552:	00db      	lsls	r3, r3, #3
 801f554:	440b      	add	r3, r1
 801f556:	3314      	adds	r3, #20
 801f558:	781b      	ldrb	r3, [r3, #0]
 801f55a:	2b01      	cmp	r3, #1
 801f55c:	d917      	bls.n	801f58e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801f55e:	4a49      	ldr	r2, [pc, #292]	; (801f684 <etharp_query+0x274>)
 801f560:	7c7b      	ldrb	r3, [r7, #17]
 801f562:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801f564:	7c7a      	ldrb	r2, [r7, #17]
 801f566:	4613      	mov	r3, r2
 801f568:	005b      	lsls	r3, r3, #1
 801f56a:	4413      	add	r3, r2
 801f56c:	00db      	lsls	r3, r3, #3
 801f56e:	3308      	adds	r3, #8
 801f570:	4a41      	ldr	r2, [pc, #260]	; (801f678 <etharp_query+0x268>)
 801f572:	4413      	add	r3, r2
 801f574:	3304      	adds	r3, #4
 801f576:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f57a:	9200      	str	r2, [sp, #0]
 801f57c:	697a      	ldr	r2, [r7, #20]
 801f57e:	6879      	ldr	r1, [r7, #4]
 801f580:	68f8      	ldr	r0, [r7, #12]
 801f582:	f001 fc75 	bl	8020e70 <ethernet_output>
 801f586:	4603      	mov	r3, r0
 801f588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f58c:	e067      	b.n	801f65e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801f58e:	7c7a      	ldrb	r2, [r7, #17]
 801f590:	4939      	ldr	r1, [pc, #228]	; (801f678 <etharp_query+0x268>)
 801f592:	4613      	mov	r3, r2
 801f594:	005b      	lsls	r3, r3, #1
 801f596:	4413      	add	r3, r2
 801f598:	00db      	lsls	r3, r3, #3
 801f59a:	440b      	add	r3, r1
 801f59c:	3314      	adds	r3, #20
 801f59e:	781b      	ldrb	r3, [r3, #0]
 801f5a0:	2b01      	cmp	r3, #1
 801f5a2:	d15c      	bne.n	801f65e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801f5a4:	2300      	movs	r3, #0
 801f5a6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801f5a8:	687b      	ldr	r3, [r7, #4]
 801f5aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 801f5ac:	e01c      	b.n	801f5e8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801f5ae:	69fb      	ldr	r3, [r7, #28]
 801f5b0:	895a      	ldrh	r2, [r3, #10]
 801f5b2:	69fb      	ldr	r3, [r7, #28]
 801f5b4:	891b      	ldrh	r3, [r3, #8]
 801f5b6:	429a      	cmp	r2, r3
 801f5b8:	d10a      	bne.n	801f5d0 <etharp_query+0x1c0>
 801f5ba:	69fb      	ldr	r3, [r7, #28]
 801f5bc:	681b      	ldr	r3, [r3, #0]
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	d006      	beq.n	801f5d0 <etharp_query+0x1c0>
 801f5c2:	4b2a      	ldr	r3, [pc, #168]	; (801f66c <etharp_query+0x25c>)
 801f5c4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801f5c8:	492f      	ldr	r1, [pc, #188]	; (801f688 <etharp_query+0x278>)
 801f5ca:	482a      	ldr	r0, [pc, #168]	; (801f674 <etharp_query+0x264>)
 801f5cc:	f003 f8f0 	bl	80227b0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801f5d0:	69fb      	ldr	r3, [r7, #28]
 801f5d2:	7b1b      	ldrb	r3, [r3, #12]
 801f5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	d002      	beq.n	801f5e2 <etharp_query+0x1d2>
        copy_needed = 1;
 801f5dc:	2301      	movs	r3, #1
 801f5de:	61bb      	str	r3, [r7, #24]
        break;
 801f5e0:	e005      	b.n	801f5ee <etharp_query+0x1de>
      }
      p = p->next;
 801f5e2:	69fb      	ldr	r3, [r7, #28]
 801f5e4:	681b      	ldr	r3, [r3, #0]
 801f5e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801f5e8:	69fb      	ldr	r3, [r7, #28]
 801f5ea:	2b00      	cmp	r3, #0
 801f5ec:	d1df      	bne.n	801f5ae <etharp_query+0x19e>
    }
    if (copy_needed) {
 801f5ee:	69bb      	ldr	r3, [r7, #24]
 801f5f0:	2b00      	cmp	r3, #0
 801f5f2:	d007      	beq.n	801f604 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801f5f4:	687a      	ldr	r2, [r7, #4]
 801f5f6:	f44f 7120 	mov.w	r1, #640	; 0x280
 801f5fa:	200e      	movs	r0, #14
 801f5fc:	f7f8 f918 	bl	8017830 <pbuf_clone>
 801f600:	61f8      	str	r0, [r7, #28]
 801f602:	e004      	b.n	801f60e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801f604:	687b      	ldr	r3, [r7, #4]
 801f606:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801f608:	69f8      	ldr	r0, [r7, #28]
 801f60a:	f7f7 ff3f 	bl	801748c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801f60e:	69fb      	ldr	r3, [r7, #28]
 801f610:	2b00      	cmp	r3, #0
 801f612:	d021      	beq.n	801f658 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801f614:	7c7a      	ldrb	r2, [r7, #17]
 801f616:	4918      	ldr	r1, [pc, #96]	; (801f678 <etharp_query+0x268>)
 801f618:	4613      	mov	r3, r2
 801f61a:	005b      	lsls	r3, r3, #1
 801f61c:	4413      	add	r3, r2
 801f61e:	00db      	lsls	r3, r3, #3
 801f620:	440b      	add	r3, r1
 801f622:	681b      	ldr	r3, [r3, #0]
 801f624:	2b00      	cmp	r3, #0
 801f626:	d00a      	beq.n	801f63e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801f628:	7c7a      	ldrb	r2, [r7, #17]
 801f62a:	4913      	ldr	r1, [pc, #76]	; (801f678 <etharp_query+0x268>)
 801f62c:	4613      	mov	r3, r2
 801f62e:	005b      	lsls	r3, r3, #1
 801f630:	4413      	add	r3, r2
 801f632:	00db      	lsls	r3, r3, #3
 801f634:	440b      	add	r3, r1
 801f636:	681b      	ldr	r3, [r3, #0]
 801f638:	4618      	mov	r0, r3
 801f63a:	f7f7 fe81 	bl	8017340 <pbuf_free>
      }
      arp_table[i].q = p;
 801f63e:	7c7a      	ldrb	r2, [r7, #17]
 801f640:	490d      	ldr	r1, [pc, #52]	; (801f678 <etharp_query+0x268>)
 801f642:	4613      	mov	r3, r2
 801f644:	005b      	lsls	r3, r3, #1
 801f646:	4413      	add	r3, r2
 801f648:	00db      	lsls	r3, r3, #3
 801f64a:	440b      	add	r3, r1
 801f64c:	69fa      	ldr	r2, [r7, #28]
 801f64e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801f650:	2300      	movs	r3, #0
 801f652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f656:	e002      	b.n	801f65e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801f658:	23ff      	movs	r3, #255	; 0xff
 801f65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801f65e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801f662:	4618      	mov	r0, r3
 801f664:	3728      	adds	r7, #40	; 0x28
 801f666:	46bd      	mov	sp, r7
 801f668:	bd80      	pop	{r7, pc}
 801f66a:	bf00      	nop
 801f66c:	08026b4c 	.word	0x08026b4c
 801f670:	08026cf8 	.word	0x08026cf8
 801f674:	08026bc4 	.word	0x08026bc4
 801f678:	2000c014 	.word	0x2000c014
 801f67c:	08026d08 	.word	0x08026d08
 801f680:	08026cec 	.word	0x08026cec
 801f684:	2000c104 	.word	0x2000c104
 801f688:	08026d30 	.word	0x08026d30

0801f68c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801f68c:	b580      	push	{r7, lr}
 801f68e:	b08a      	sub	sp, #40	; 0x28
 801f690:	af02      	add	r7, sp, #8
 801f692:	60f8      	str	r0, [r7, #12]
 801f694:	60b9      	str	r1, [r7, #8]
 801f696:	607a      	str	r2, [r7, #4]
 801f698:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801f69a:	2300      	movs	r3, #0
 801f69c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f69e:	68fb      	ldr	r3, [r7, #12]
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	d106      	bne.n	801f6b2 <etharp_raw+0x26>
 801f6a4:	4b3a      	ldr	r3, [pc, #232]	; (801f790 <etharp_raw+0x104>)
 801f6a6:	f240 4257 	movw	r2, #1111	; 0x457
 801f6aa:	493a      	ldr	r1, [pc, #232]	; (801f794 <etharp_raw+0x108>)
 801f6ac:	483a      	ldr	r0, [pc, #232]	; (801f798 <etharp_raw+0x10c>)
 801f6ae:	f003 f87f 	bl	80227b0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801f6b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f6b6:	211c      	movs	r1, #28
 801f6b8:	200e      	movs	r0, #14
 801f6ba:	f7f7 fb5d 	bl	8016d78 <pbuf_alloc>
 801f6be:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801f6c0:	69bb      	ldr	r3, [r7, #24]
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d102      	bne.n	801f6cc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801f6c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f6ca:	e05d      	b.n	801f788 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801f6cc:	69bb      	ldr	r3, [r7, #24]
 801f6ce:	895b      	ldrh	r3, [r3, #10]
 801f6d0:	2b1b      	cmp	r3, #27
 801f6d2:	d806      	bhi.n	801f6e2 <etharp_raw+0x56>
 801f6d4:	4b2e      	ldr	r3, [pc, #184]	; (801f790 <etharp_raw+0x104>)
 801f6d6:	f240 4262 	movw	r2, #1122	; 0x462
 801f6da:	4930      	ldr	r1, [pc, #192]	; (801f79c <etharp_raw+0x110>)
 801f6dc:	482e      	ldr	r0, [pc, #184]	; (801f798 <etharp_raw+0x10c>)
 801f6de:	f003 f867 	bl	80227b0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801f6e2:	69bb      	ldr	r3, [r7, #24]
 801f6e4:	685b      	ldr	r3, [r3, #4]
 801f6e6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801f6e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801f6ea:	4618      	mov	r0, r3
 801f6ec:	f7f6 fa36 	bl	8015b5c <lwip_htons>
 801f6f0:	4603      	mov	r3, r0
 801f6f2:	461a      	mov	r2, r3
 801f6f4:	697b      	ldr	r3, [r7, #20]
 801f6f6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801f6f8:	68fb      	ldr	r3, [r7, #12]
 801f6fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801f6fe:	2b06      	cmp	r3, #6
 801f700:	d006      	beq.n	801f710 <etharp_raw+0x84>
 801f702:	4b23      	ldr	r3, [pc, #140]	; (801f790 <etharp_raw+0x104>)
 801f704:	f240 4269 	movw	r2, #1129	; 0x469
 801f708:	4925      	ldr	r1, [pc, #148]	; (801f7a0 <etharp_raw+0x114>)
 801f70a:	4823      	ldr	r0, [pc, #140]	; (801f798 <etharp_raw+0x10c>)
 801f70c:	f003 f850 	bl	80227b0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801f710:	697b      	ldr	r3, [r7, #20]
 801f712:	3308      	adds	r3, #8
 801f714:	2206      	movs	r2, #6
 801f716:	6839      	ldr	r1, [r7, #0]
 801f718:	4618      	mov	r0, r3
 801f71a:	f002 ff39 	bl	8022590 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801f71e:	697b      	ldr	r3, [r7, #20]
 801f720:	3312      	adds	r3, #18
 801f722:	2206      	movs	r2, #6
 801f724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f726:	4618      	mov	r0, r3
 801f728:	f002 ff32 	bl	8022590 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801f72c:	697b      	ldr	r3, [r7, #20]
 801f72e:	330e      	adds	r3, #14
 801f730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f732:	6812      	ldr	r2, [r2, #0]
 801f734:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801f736:	697b      	ldr	r3, [r7, #20]
 801f738:	3318      	adds	r3, #24
 801f73a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f73c:	6812      	ldr	r2, [r2, #0]
 801f73e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801f740:	697b      	ldr	r3, [r7, #20]
 801f742:	2200      	movs	r2, #0
 801f744:	701a      	strb	r2, [r3, #0]
 801f746:	2200      	movs	r2, #0
 801f748:	f042 0201 	orr.w	r2, r2, #1
 801f74c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801f74e:	697b      	ldr	r3, [r7, #20]
 801f750:	2200      	movs	r2, #0
 801f752:	f042 0208 	orr.w	r2, r2, #8
 801f756:	709a      	strb	r2, [r3, #2]
 801f758:	2200      	movs	r2, #0
 801f75a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801f75c:	697b      	ldr	r3, [r7, #20]
 801f75e:	2206      	movs	r2, #6
 801f760:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801f762:	697b      	ldr	r3, [r7, #20]
 801f764:	2204      	movs	r2, #4
 801f766:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801f768:	f640 0306 	movw	r3, #2054	; 0x806
 801f76c:	9300      	str	r3, [sp, #0]
 801f76e:	687b      	ldr	r3, [r7, #4]
 801f770:	68ba      	ldr	r2, [r7, #8]
 801f772:	69b9      	ldr	r1, [r7, #24]
 801f774:	68f8      	ldr	r0, [r7, #12]
 801f776:	f001 fb7b 	bl	8020e70 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801f77a:	69b8      	ldr	r0, [r7, #24]
 801f77c:	f7f7 fde0 	bl	8017340 <pbuf_free>
  p = NULL;
 801f780:	2300      	movs	r3, #0
 801f782:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801f784:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801f788:	4618      	mov	r0, r3
 801f78a:	3720      	adds	r7, #32
 801f78c:	46bd      	mov	sp, r7
 801f78e:	bd80      	pop	{r7, pc}
 801f790:	08026b4c 	.word	0x08026b4c
 801f794:	08026c9c 	.word	0x08026c9c
 801f798:	08026bc4 	.word	0x08026bc4
 801f79c:	08026d4c 	.word	0x08026d4c
 801f7a0:	08026d80 	.word	0x08026d80

0801f7a4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801f7a4:	b580      	push	{r7, lr}
 801f7a6:	b088      	sub	sp, #32
 801f7a8:	af04      	add	r7, sp, #16
 801f7aa:	60f8      	str	r0, [r7, #12]
 801f7ac:	60b9      	str	r1, [r7, #8]
 801f7ae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f7b0:	68fb      	ldr	r3, [r7, #12]
 801f7b2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801f7b6:	68fb      	ldr	r3, [r7, #12]
 801f7b8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801f7bc:	68fb      	ldr	r3, [r7, #12]
 801f7be:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f7c0:	2201      	movs	r2, #1
 801f7c2:	9203      	str	r2, [sp, #12]
 801f7c4:	68ba      	ldr	r2, [r7, #8]
 801f7c6:	9202      	str	r2, [sp, #8]
 801f7c8:	4a06      	ldr	r2, [pc, #24]	; (801f7e4 <etharp_request_dst+0x40>)
 801f7ca:	9201      	str	r2, [sp, #4]
 801f7cc:	9300      	str	r3, [sp, #0]
 801f7ce:	4603      	mov	r3, r0
 801f7d0:	687a      	ldr	r2, [r7, #4]
 801f7d2:	68f8      	ldr	r0, [r7, #12]
 801f7d4:	f7ff ff5a 	bl	801f68c <etharp_raw>
 801f7d8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801f7da:	4618      	mov	r0, r3
 801f7dc:	3710      	adds	r7, #16
 801f7de:	46bd      	mov	sp, r7
 801f7e0:	bd80      	pop	{r7, pc}
 801f7e2:	bf00      	nop
 801f7e4:	080273a4 	.word	0x080273a4

0801f7e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801f7e8:	b580      	push	{r7, lr}
 801f7ea:	b082      	sub	sp, #8
 801f7ec:	af00      	add	r7, sp, #0
 801f7ee:	6078      	str	r0, [r7, #4]
 801f7f0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801f7f2:	4a05      	ldr	r2, [pc, #20]	; (801f808 <etharp_request+0x20>)
 801f7f4:	6839      	ldr	r1, [r7, #0]
 801f7f6:	6878      	ldr	r0, [r7, #4]
 801f7f8:	f7ff ffd4 	bl	801f7a4 <etharp_request_dst>
 801f7fc:	4603      	mov	r3, r0
}
 801f7fe:	4618      	mov	r0, r3
 801f800:	3708      	adds	r7, #8
 801f802:	46bd      	mov	sp, r7
 801f804:	bd80      	pop	{r7, pc}
 801f806:	bf00      	nop
 801f808:	0802739c 	.word	0x0802739c

0801f80c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801f80c:	b580      	push	{r7, lr}
 801f80e:	b08e      	sub	sp, #56	; 0x38
 801f810:	af04      	add	r7, sp, #16
 801f812:	6078      	str	r0, [r7, #4]
 801f814:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801f816:	4b79      	ldr	r3, [pc, #484]	; (801f9fc <icmp_input+0x1f0>)
 801f818:	689b      	ldr	r3, [r3, #8]
 801f81a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801f81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f81e:	781b      	ldrb	r3, [r3, #0]
 801f820:	f003 030f 	and.w	r3, r3, #15
 801f824:	b2db      	uxtb	r3, r3
 801f826:	009b      	lsls	r3, r3, #2
 801f828:	b2db      	uxtb	r3, r3
 801f82a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801f82c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f82e:	2b13      	cmp	r3, #19
 801f830:	f240 80cd 	bls.w	801f9ce <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801f834:	687b      	ldr	r3, [r7, #4]
 801f836:	895b      	ldrh	r3, [r3, #10]
 801f838:	2b03      	cmp	r3, #3
 801f83a:	f240 80ca 	bls.w	801f9d2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801f83e:	687b      	ldr	r3, [r7, #4]
 801f840:	685b      	ldr	r3, [r3, #4]
 801f842:	781b      	ldrb	r3, [r3, #0]
 801f844:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801f848:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	f000 80b7 	beq.w	801f9c0 <icmp_input+0x1b4>
 801f852:	2b08      	cmp	r3, #8
 801f854:	f040 80b7 	bne.w	801f9c6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801f858:	4b69      	ldr	r3, [pc, #420]	; (801fa00 <icmp_input+0x1f4>)
 801f85a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f85c:	4b67      	ldr	r3, [pc, #412]	; (801f9fc <icmp_input+0x1f0>)
 801f85e:	695b      	ldr	r3, [r3, #20]
 801f860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f864:	2be0      	cmp	r3, #224	; 0xe0
 801f866:	f000 80bb 	beq.w	801f9e0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801f86a:	4b64      	ldr	r3, [pc, #400]	; (801f9fc <icmp_input+0x1f0>)
 801f86c:	695b      	ldr	r3, [r3, #20]
 801f86e:	4a63      	ldr	r2, [pc, #396]	; (801f9fc <icmp_input+0x1f0>)
 801f870:	6812      	ldr	r2, [r2, #0]
 801f872:	4611      	mov	r1, r2
 801f874:	4618      	mov	r0, r3
 801f876:	f000 fbed 	bl	8020054 <ip4_addr_isbroadcast_u32>
 801f87a:	4603      	mov	r3, r0
 801f87c:	2b00      	cmp	r3, #0
 801f87e:	f040 80b1 	bne.w	801f9e4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801f882:	687b      	ldr	r3, [r7, #4]
 801f884:	891b      	ldrh	r3, [r3, #8]
 801f886:	2b07      	cmp	r3, #7
 801f888:	f240 80a5 	bls.w	801f9d6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801f88c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f88e:	330e      	adds	r3, #14
 801f890:	4619      	mov	r1, r3
 801f892:	6878      	ldr	r0, [r7, #4]
 801f894:	f7f7 fcbe 	bl	8017214 <pbuf_add_header>
 801f898:	4603      	mov	r3, r0
 801f89a:	2b00      	cmp	r3, #0
 801f89c:	d04b      	beq.n	801f936 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801f89e:	687b      	ldr	r3, [r7, #4]
 801f8a0:	891a      	ldrh	r2, [r3, #8]
 801f8a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f8a4:	4413      	add	r3, r2
 801f8a6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801f8a8:	687b      	ldr	r3, [r7, #4]
 801f8aa:	891b      	ldrh	r3, [r3, #8]
 801f8ac:	8b7a      	ldrh	r2, [r7, #26]
 801f8ae:	429a      	cmp	r2, r3
 801f8b0:	f0c0 809a 	bcc.w	801f9e8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801f8b4:	8b7b      	ldrh	r3, [r7, #26]
 801f8b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f8ba:	4619      	mov	r1, r3
 801f8bc:	200e      	movs	r0, #14
 801f8be:	f7f7 fa5b 	bl	8016d78 <pbuf_alloc>
 801f8c2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801f8c4:	697b      	ldr	r3, [r7, #20]
 801f8c6:	2b00      	cmp	r3, #0
 801f8c8:	f000 8090 	beq.w	801f9ec <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801f8cc:	697b      	ldr	r3, [r7, #20]
 801f8ce:	895b      	ldrh	r3, [r3, #10]
 801f8d0:	461a      	mov	r2, r3
 801f8d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f8d4:	3308      	adds	r3, #8
 801f8d6:	429a      	cmp	r2, r3
 801f8d8:	d203      	bcs.n	801f8e2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801f8da:	6978      	ldr	r0, [r7, #20]
 801f8dc:	f7f7 fd30 	bl	8017340 <pbuf_free>
          goto icmperr;
 801f8e0:	e085      	b.n	801f9ee <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801f8e2:	697b      	ldr	r3, [r7, #20]
 801f8e4:	685b      	ldr	r3, [r3, #4]
 801f8e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801f8e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f8ea:	4618      	mov	r0, r3
 801f8ec:	f002 fe50 	bl	8022590 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801f8f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f8f2:	4619      	mov	r1, r3
 801f8f4:	6978      	ldr	r0, [r7, #20]
 801f8f6:	f7f7 fc9d 	bl	8017234 <pbuf_remove_header>
 801f8fa:	4603      	mov	r3, r0
 801f8fc:	2b00      	cmp	r3, #0
 801f8fe:	d009      	beq.n	801f914 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801f900:	4b40      	ldr	r3, [pc, #256]	; (801fa04 <icmp_input+0x1f8>)
 801f902:	22b6      	movs	r2, #182	; 0xb6
 801f904:	4940      	ldr	r1, [pc, #256]	; (801fa08 <icmp_input+0x1fc>)
 801f906:	4841      	ldr	r0, [pc, #260]	; (801fa0c <icmp_input+0x200>)
 801f908:	f002 ff52 	bl	80227b0 <iprintf>
          pbuf_free(r);
 801f90c:	6978      	ldr	r0, [r7, #20]
 801f90e:	f7f7 fd17 	bl	8017340 <pbuf_free>
          goto icmperr;
 801f912:	e06c      	b.n	801f9ee <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801f914:	6879      	ldr	r1, [r7, #4]
 801f916:	6978      	ldr	r0, [r7, #20]
 801f918:	f7f7 fe46 	bl	80175a8 <pbuf_copy>
 801f91c:	4603      	mov	r3, r0
 801f91e:	2b00      	cmp	r3, #0
 801f920:	d003      	beq.n	801f92a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801f922:	6978      	ldr	r0, [r7, #20]
 801f924:	f7f7 fd0c 	bl	8017340 <pbuf_free>
          goto icmperr;
 801f928:	e061      	b.n	801f9ee <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801f92a:	6878      	ldr	r0, [r7, #4]
 801f92c:	f7f7 fd08 	bl	8017340 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801f930:	697b      	ldr	r3, [r7, #20]
 801f932:	607b      	str	r3, [r7, #4]
 801f934:	e00f      	b.n	801f956 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801f936:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f938:	330e      	adds	r3, #14
 801f93a:	4619      	mov	r1, r3
 801f93c:	6878      	ldr	r0, [r7, #4]
 801f93e:	f7f7 fc79 	bl	8017234 <pbuf_remove_header>
 801f942:	4603      	mov	r3, r0
 801f944:	2b00      	cmp	r3, #0
 801f946:	d006      	beq.n	801f956 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801f948:	4b2e      	ldr	r3, [pc, #184]	; (801fa04 <icmp_input+0x1f8>)
 801f94a:	22c7      	movs	r2, #199	; 0xc7
 801f94c:	4930      	ldr	r1, [pc, #192]	; (801fa10 <icmp_input+0x204>)
 801f94e:	482f      	ldr	r0, [pc, #188]	; (801fa0c <icmp_input+0x200>)
 801f950:	f002 ff2e 	bl	80227b0 <iprintf>
          goto icmperr;
 801f954:	e04b      	b.n	801f9ee <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	685b      	ldr	r3, [r3, #4]
 801f95a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801f95c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f95e:	4619      	mov	r1, r3
 801f960:	6878      	ldr	r0, [r7, #4]
 801f962:	f7f7 fc57 	bl	8017214 <pbuf_add_header>
 801f966:	4603      	mov	r3, r0
 801f968:	2b00      	cmp	r3, #0
 801f96a:	d12b      	bne.n	801f9c4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	685b      	ldr	r3, [r3, #4]
 801f970:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801f972:	69fb      	ldr	r3, [r7, #28]
 801f974:	681a      	ldr	r2, [r3, #0]
 801f976:	68fb      	ldr	r3, [r7, #12]
 801f978:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801f97a:	4b20      	ldr	r3, [pc, #128]	; (801f9fc <icmp_input+0x1f0>)
 801f97c:	691a      	ldr	r2, [r3, #16]
 801f97e:	68fb      	ldr	r3, [r7, #12]
 801f980:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801f982:	693b      	ldr	r3, [r7, #16]
 801f984:	2200      	movs	r2, #0
 801f986:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801f988:	693b      	ldr	r3, [r7, #16]
 801f98a:	2200      	movs	r2, #0
 801f98c:	709a      	strb	r2, [r3, #2]
 801f98e:	2200      	movs	r2, #0
 801f990:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801f992:	68fb      	ldr	r3, [r7, #12]
 801f994:	22ff      	movs	r2, #255	; 0xff
 801f996:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801f998:	68fb      	ldr	r3, [r7, #12]
 801f99a:	2200      	movs	r2, #0
 801f99c:	729a      	strb	r2, [r3, #10]
 801f99e:	2200      	movs	r2, #0
 801f9a0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801f9a2:	683b      	ldr	r3, [r7, #0]
 801f9a4:	9302      	str	r3, [sp, #8]
 801f9a6:	2301      	movs	r3, #1
 801f9a8:	9301      	str	r3, [sp, #4]
 801f9aa:	2300      	movs	r3, #0
 801f9ac:	9300      	str	r3, [sp, #0]
 801f9ae:	23ff      	movs	r3, #255	; 0xff
 801f9b0:	2200      	movs	r2, #0
 801f9b2:	69f9      	ldr	r1, [r7, #28]
 801f9b4:	6878      	ldr	r0, [r7, #4]
 801f9b6:	f000 fa75 	bl	801fea4 <ip4_output_if>
 801f9ba:	4603      	mov	r3, r0
 801f9bc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801f9be:	e001      	b.n	801f9c4 <icmp_input+0x1b8>
      break;
 801f9c0:	bf00      	nop
 801f9c2:	e000      	b.n	801f9c6 <icmp_input+0x1ba>
      break;
 801f9c4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801f9c6:	6878      	ldr	r0, [r7, #4]
 801f9c8:	f7f7 fcba 	bl	8017340 <pbuf_free>
  return;
 801f9cc:	e013      	b.n	801f9f6 <icmp_input+0x1ea>
    goto lenerr;
 801f9ce:	bf00      	nop
 801f9d0:	e002      	b.n	801f9d8 <icmp_input+0x1cc>
    goto lenerr;
 801f9d2:	bf00      	nop
 801f9d4:	e000      	b.n	801f9d8 <icmp_input+0x1cc>
        goto lenerr;
 801f9d6:	bf00      	nop
lenerr:
  pbuf_free(p);
 801f9d8:	6878      	ldr	r0, [r7, #4]
 801f9da:	f7f7 fcb1 	bl	8017340 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801f9de:	e00a      	b.n	801f9f6 <icmp_input+0x1ea>
        goto icmperr;
 801f9e0:	bf00      	nop
 801f9e2:	e004      	b.n	801f9ee <icmp_input+0x1e2>
        goto icmperr;
 801f9e4:	bf00      	nop
 801f9e6:	e002      	b.n	801f9ee <icmp_input+0x1e2>
          goto icmperr;
 801f9e8:	bf00      	nop
 801f9ea:	e000      	b.n	801f9ee <icmp_input+0x1e2>
          goto icmperr;
 801f9ec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801f9ee:	6878      	ldr	r0, [r7, #4]
 801f9f0:	f7f7 fca6 	bl	8017340 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801f9f4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801f9f6:	3728      	adds	r7, #40	; 0x28
 801f9f8:	46bd      	mov	sp, r7
 801f9fa:	bd80      	pop	{r7, pc}
 801f9fc:	200066a0 	.word	0x200066a0
 801fa00:	200066b4 	.word	0x200066b4
 801fa04:	08026dc4 	.word	0x08026dc4
 801fa08:	08026dfc 	.word	0x08026dfc
 801fa0c:	08026e34 	.word	0x08026e34
 801fa10:	08026e5c 	.word	0x08026e5c

0801fa14 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801fa14:	b580      	push	{r7, lr}
 801fa16:	b082      	sub	sp, #8
 801fa18:	af00      	add	r7, sp, #0
 801fa1a:	6078      	str	r0, [r7, #4]
 801fa1c:	460b      	mov	r3, r1
 801fa1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801fa20:	78fb      	ldrb	r3, [r7, #3]
 801fa22:	461a      	mov	r2, r3
 801fa24:	2103      	movs	r1, #3
 801fa26:	6878      	ldr	r0, [r7, #4]
 801fa28:	f000 f814 	bl	801fa54 <icmp_send_response>
}
 801fa2c:	bf00      	nop
 801fa2e:	3708      	adds	r7, #8
 801fa30:	46bd      	mov	sp, r7
 801fa32:	bd80      	pop	{r7, pc}

0801fa34 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801fa34:	b580      	push	{r7, lr}
 801fa36:	b082      	sub	sp, #8
 801fa38:	af00      	add	r7, sp, #0
 801fa3a:	6078      	str	r0, [r7, #4]
 801fa3c:	460b      	mov	r3, r1
 801fa3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801fa40:	78fb      	ldrb	r3, [r7, #3]
 801fa42:	461a      	mov	r2, r3
 801fa44:	210b      	movs	r1, #11
 801fa46:	6878      	ldr	r0, [r7, #4]
 801fa48:	f000 f804 	bl	801fa54 <icmp_send_response>
}
 801fa4c:	bf00      	nop
 801fa4e:	3708      	adds	r7, #8
 801fa50:	46bd      	mov	sp, r7
 801fa52:	bd80      	pop	{r7, pc}

0801fa54 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801fa54:	b580      	push	{r7, lr}
 801fa56:	b08c      	sub	sp, #48	; 0x30
 801fa58:	af04      	add	r7, sp, #16
 801fa5a:	6078      	str	r0, [r7, #4]
 801fa5c:	460b      	mov	r3, r1
 801fa5e:	70fb      	strb	r3, [r7, #3]
 801fa60:	4613      	mov	r3, r2
 801fa62:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801fa64:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fa68:	2124      	movs	r1, #36	; 0x24
 801fa6a:	2022      	movs	r0, #34	; 0x22
 801fa6c:	f7f7 f984 	bl	8016d78 <pbuf_alloc>
 801fa70:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801fa72:	69fb      	ldr	r3, [r7, #28]
 801fa74:	2b00      	cmp	r3, #0
 801fa76:	d04c      	beq.n	801fb12 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801fa78:	69fb      	ldr	r3, [r7, #28]
 801fa7a:	895b      	ldrh	r3, [r3, #10]
 801fa7c:	2b23      	cmp	r3, #35	; 0x23
 801fa7e:	d806      	bhi.n	801fa8e <icmp_send_response+0x3a>
 801fa80:	4b26      	ldr	r3, [pc, #152]	; (801fb1c <icmp_send_response+0xc8>)
 801fa82:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801fa86:	4926      	ldr	r1, [pc, #152]	; (801fb20 <icmp_send_response+0xcc>)
 801fa88:	4826      	ldr	r0, [pc, #152]	; (801fb24 <icmp_send_response+0xd0>)
 801fa8a:	f002 fe91 	bl	80227b0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801fa8e:	687b      	ldr	r3, [r7, #4]
 801fa90:	685b      	ldr	r3, [r3, #4]
 801fa92:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801fa94:	69fb      	ldr	r3, [r7, #28]
 801fa96:	685b      	ldr	r3, [r3, #4]
 801fa98:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801fa9a:	697b      	ldr	r3, [r7, #20]
 801fa9c:	78fa      	ldrb	r2, [r7, #3]
 801fa9e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801faa0:	697b      	ldr	r3, [r7, #20]
 801faa2:	78ba      	ldrb	r2, [r7, #2]
 801faa4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801faa6:	697b      	ldr	r3, [r7, #20]
 801faa8:	2200      	movs	r2, #0
 801faaa:	711a      	strb	r2, [r3, #4]
 801faac:	2200      	movs	r2, #0
 801faae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801fab0:	697b      	ldr	r3, [r7, #20]
 801fab2:	2200      	movs	r2, #0
 801fab4:	719a      	strb	r2, [r3, #6]
 801fab6:	2200      	movs	r2, #0
 801fab8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801faba:	69fb      	ldr	r3, [r7, #28]
 801fabc:	685b      	ldr	r3, [r3, #4]
 801fabe:	f103 0008 	add.w	r0, r3, #8
 801fac2:	687b      	ldr	r3, [r7, #4]
 801fac4:	685b      	ldr	r3, [r3, #4]
 801fac6:	221c      	movs	r2, #28
 801fac8:	4619      	mov	r1, r3
 801faca:	f002 fd61 	bl	8022590 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801face:	69bb      	ldr	r3, [r7, #24]
 801fad0:	68db      	ldr	r3, [r3, #12]
 801fad2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801fad4:	f107 030c 	add.w	r3, r7, #12
 801fad8:	4618      	mov	r0, r3
 801fada:	f000 f825 	bl	801fb28 <ip4_route>
 801fade:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801fae0:	693b      	ldr	r3, [r7, #16]
 801fae2:	2b00      	cmp	r3, #0
 801fae4:	d011      	beq.n	801fb0a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801fae6:	697b      	ldr	r3, [r7, #20]
 801fae8:	2200      	movs	r2, #0
 801faea:	709a      	strb	r2, [r3, #2]
 801faec:	2200      	movs	r2, #0
 801faee:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801faf0:	f107 020c 	add.w	r2, r7, #12
 801faf4:	693b      	ldr	r3, [r7, #16]
 801faf6:	9302      	str	r3, [sp, #8]
 801faf8:	2301      	movs	r3, #1
 801fafa:	9301      	str	r3, [sp, #4]
 801fafc:	2300      	movs	r3, #0
 801fafe:	9300      	str	r3, [sp, #0]
 801fb00:	23ff      	movs	r3, #255	; 0xff
 801fb02:	2100      	movs	r1, #0
 801fb04:	69f8      	ldr	r0, [r7, #28]
 801fb06:	f000 f9cd 	bl	801fea4 <ip4_output_if>
  }
  pbuf_free(q);
 801fb0a:	69f8      	ldr	r0, [r7, #28]
 801fb0c:	f7f7 fc18 	bl	8017340 <pbuf_free>
 801fb10:	e000      	b.n	801fb14 <icmp_send_response+0xc0>
    return;
 801fb12:	bf00      	nop
}
 801fb14:	3720      	adds	r7, #32
 801fb16:	46bd      	mov	sp, r7
 801fb18:	bd80      	pop	{r7, pc}
 801fb1a:	bf00      	nop
 801fb1c:	08026dc4 	.word	0x08026dc4
 801fb20:	08026e90 	.word	0x08026e90
 801fb24:	08026e34 	.word	0x08026e34

0801fb28 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801fb28:	b480      	push	{r7}
 801fb2a:	b085      	sub	sp, #20
 801fb2c:	af00      	add	r7, sp, #0
 801fb2e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801fb30:	4b33      	ldr	r3, [pc, #204]	; (801fc00 <ip4_route+0xd8>)
 801fb32:	681b      	ldr	r3, [r3, #0]
 801fb34:	60fb      	str	r3, [r7, #12]
 801fb36:	e036      	b.n	801fba6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801fb38:	68fb      	ldr	r3, [r7, #12]
 801fb3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801fb3e:	f003 0301 	and.w	r3, r3, #1
 801fb42:	b2db      	uxtb	r3, r3
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	d02b      	beq.n	801fba0 <ip4_route+0x78>
 801fb48:	68fb      	ldr	r3, [r7, #12]
 801fb4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801fb4e:	089b      	lsrs	r3, r3, #2
 801fb50:	f003 0301 	and.w	r3, r3, #1
 801fb54:	b2db      	uxtb	r3, r3
 801fb56:	2b00      	cmp	r3, #0
 801fb58:	d022      	beq.n	801fba0 <ip4_route+0x78>
 801fb5a:	68fb      	ldr	r3, [r7, #12]
 801fb5c:	3304      	adds	r3, #4
 801fb5e:	681b      	ldr	r3, [r3, #0]
 801fb60:	2b00      	cmp	r3, #0
 801fb62:	d01d      	beq.n	801fba0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801fb64:	687b      	ldr	r3, [r7, #4]
 801fb66:	681a      	ldr	r2, [r3, #0]
 801fb68:	68fb      	ldr	r3, [r7, #12]
 801fb6a:	3304      	adds	r3, #4
 801fb6c:	681b      	ldr	r3, [r3, #0]
 801fb6e:	405a      	eors	r2, r3
 801fb70:	68fb      	ldr	r3, [r7, #12]
 801fb72:	3308      	adds	r3, #8
 801fb74:	681b      	ldr	r3, [r3, #0]
 801fb76:	4013      	ands	r3, r2
 801fb78:	2b00      	cmp	r3, #0
 801fb7a:	d101      	bne.n	801fb80 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801fb7c:	68fb      	ldr	r3, [r7, #12]
 801fb7e:	e038      	b.n	801fbf2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801fb80:	68fb      	ldr	r3, [r7, #12]
 801fb82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801fb86:	f003 0302 	and.w	r3, r3, #2
 801fb8a:	2b00      	cmp	r3, #0
 801fb8c:	d108      	bne.n	801fba0 <ip4_route+0x78>
 801fb8e:	687b      	ldr	r3, [r7, #4]
 801fb90:	681a      	ldr	r2, [r3, #0]
 801fb92:	68fb      	ldr	r3, [r7, #12]
 801fb94:	330c      	adds	r3, #12
 801fb96:	681b      	ldr	r3, [r3, #0]
 801fb98:	429a      	cmp	r2, r3
 801fb9a:	d101      	bne.n	801fba0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801fb9c:	68fb      	ldr	r3, [r7, #12]
 801fb9e:	e028      	b.n	801fbf2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801fba0:	68fb      	ldr	r3, [r7, #12]
 801fba2:	681b      	ldr	r3, [r3, #0]
 801fba4:	60fb      	str	r3, [r7, #12]
 801fba6:	68fb      	ldr	r3, [r7, #12]
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	d1c5      	bne.n	801fb38 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801fbac:	4b15      	ldr	r3, [pc, #84]	; (801fc04 <ip4_route+0xdc>)
 801fbae:	681b      	ldr	r3, [r3, #0]
 801fbb0:	2b00      	cmp	r3, #0
 801fbb2:	d01a      	beq.n	801fbea <ip4_route+0xc2>
 801fbb4:	4b13      	ldr	r3, [pc, #76]	; (801fc04 <ip4_route+0xdc>)
 801fbb6:	681b      	ldr	r3, [r3, #0]
 801fbb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801fbbc:	f003 0301 	and.w	r3, r3, #1
 801fbc0:	2b00      	cmp	r3, #0
 801fbc2:	d012      	beq.n	801fbea <ip4_route+0xc2>
 801fbc4:	4b0f      	ldr	r3, [pc, #60]	; (801fc04 <ip4_route+0xdc>)
 801fbc6:	681b      	ldr	r3, [r3, #0]
 801fbc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801fbcc:	f003 0304 	and.w	r3, r3, #4
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	d00a      	beq.n	801fbea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801fbd4:	4b0b      	ldr	r3, [pc, #44]	; (801fc04 <ip4_route+0xdc>)
 801fbd6:	681b      	ldr	r3, [r3, #0]
 801fbd8:	3304      	adds	r3, #4
 801fbda:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801fbdc:	2b00      	cmp	r3, #0
 801fbde:	d004      	beq.n	801fbea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801fbe0:	687b      	ldr	r3, [r7, #4]
 801fbe2:	681b      	ldr	r3, [r3, #0]
 801fbe4:	b2db      	uxtb	r3, r3
 801fbe6:	2b7f      	cmp	r3, #127	; 0x7f
 801fbe8:	d101      	bne.n	801fbee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801fbea:	2300      	movs	r3, #0
 801fbec:	e001      	b.n	801fbf2 <ip4_route+0xca>
  }

  return netif_default;
 801fbee:	4b05      	ldr	r3, [pc, #20]	; (801fc04 <ip4_route+0xdc>)
 801fbf0:	681b      	ldr	r3, [r3, #0]
}
 801fbf2:	4618      	mov	r0, r3
 801fbf4:	3714      	adds	r7, #20
 801fbf6:	46bd      	mov	sp, r7
 801fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbfc:	4770      	bx	lr
 801fbfe:	bf00      	nop
 801fc00:	2000bfa8 	.word	0x2000bfa8
 801fc04:	2000bfac 	.word	0x2000bfac

0801fc08 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801fc08:	b580      	push	{r7, lr}
 801fc0a:	b082      	sub	sp, #8
 801fc0c:	af00      	add	r7, sp, #0
 801fc0e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801fc10:	687b      	ldr	r3, [r7, #4]
 801fc12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801fc16:	f003 0301 	and.w	r3, r3, #1
 801fc1a:	b2db      	uxtb	r3, r3
 801fc1c:	2b00      	cmp	r3, #0
 801fc1e:	d016      	beq.n	801fc4e <ip4_input_accept+0x46>
 801fc20:	687b      	ldr	r3, [r7, #4]
 801fc22:	3304      	adds	r3, #4
 801fc24:	681b      	ldr	r3, [r3, #0]
 801fc26:	2b00      	cmp	r3, #0
 801fc28:	d011      	beq.n	801fc4e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801fc2a:	4b0b      	ldr	r3, [pc, #44]	; (801fc58 <ip4_input_accept+0x50>)
 801fc2c:	695a      	ldr	r2, [r3, #20]
 801fc2e:	687b      	ldr	r3, [r7, #4]
 801fc30:	3304      	adds	r3, #4
 801fc32:	681b      	ldr	r3, [r3, #0]
 801fc34:	429a      	cmp	r2, r3
 801fc36:	d008      	beq.n	801fc4a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801fc38:	4b07      	ldr	r3, [pc, #28]	; (801fc58 <ip4_input_accept+0x50>)
 801fc3a:	695b      	ldr	r3, [r3, #20]
 801fc3c:	6879      	ldr	r1, [r7, #4]
 801fc3e:	4618      	mov	r0, r3
 801fc40:	f000 fa08 	bl	8020054 <ip4_addr_isbroadcast_u32>
 801fc44:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d001      	beq.n	801fc4e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801fc4a:	2301      	movs	r3, #1
 801fc4c:	e000      	b.n	801fc50 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801fc4e:	2300      	movs	r3, #0
}
 801fc50:	4618      	mov	r0, r3
 801fc52:	3708      	adds	r7, #8
 801fc54:	46bd      	mov	sp, r7
 801fc56:	bd80      	pop	{r7, pc}
 801fc58:	200066a0 	.word	0x200066a0

0801fc5c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801fc5c:	b580      	push	{r7, lr}
 801fc5e:	b086      	sub	sp, #24
 801fc60:	af00      	add	r7, sp, #0
 801fc62:	6078      	str	r0, [r7, #4]
 801fc64:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	685b      	ldr	r3, [r3, #4]
 801fc6a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801fc6c:	697b      	ldr	r3, [r7, #20]
 801fc6e:	781b      	ldrb	r3, [r3, #0]
 801fc70:	091b      	lsrs	r3, r3, #4
 801fc72:	b2db      	uxtb	r3, r3
 801fc74:	2b04      	cmp	r3, #4
 801fc76:	d004      	beq.n	801fc82 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801fc78:	6878      	ldr	r0, [r7, #4]
 801fc7a:	f7f7 fb61 	bl	8017340 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801fc7e:	2300      	movs	r3, #0
 801fc80:	e107      	b.n	801fe92 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801fc82:	697b      	ldr	r3, [r7, #20]
 801fc84:	781b      	ldrb	r3, [r3, #0]
 801fc86:	f003 030f 	and.w	r3, r3, #15
 801fc8a:	b2db      	uxtb	r3, r3
 801fc8c:	009b      	lsls	r3, r3, #2
 801fc8e:	b2db      	uxtb	r3, r3
 801fc90:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801fc92:	697b      	ldr	r3, [r7, #20]
 801fc94:	885b      	ldrh	r3, [r3, #2]
 801fc96:	b29b      	uxth	r3, r3
 801fc98:	4618      	mov	r0, r3
 801fc9a:	f7f5 ff5f 	bl	8015b5c <lwip_htons>
 801fc9e:	4603      	mov	r3, r0
 801fca0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801fca2:	687b      	ldr	r3, [r7, #4]
 801fca4:	891b      	ldrh	r3, [r3, #8]
 801fca6:	89ba      	ldrh	r2, [r7, #12]
 801fca8:	429a      	cmp	r2, r3
 801fcaa:	d204      	bcs.n	801fcb6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801fcac:	89bb      	ldrh	r3, [r7, #12]
 801fcae:	4619      	mov	r1, r3
 801fcb0:	6878      	ldr	r0, [r7, #4]
 801fcb2:	f7f7 f9bf 	bl	8017034 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801fcb6:	687b      	ldr	r3, [r7, #4]
 801fcb8:	895b      	ldrh	r3, [r3, #10]
 801fcba:	89fa      	ldrh	r2, [r7, #14]
 801fcbc:	429a      	cmp	r2, r3
 801fcbe:	d807      	bhi.n	801fcd0 <ip4_input+0x74>
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	891b      	ldrh	r3, [r3, #8]
 801fcc4:	89ba      	ldrh	r2, [r7, #12]
 801fcc6:	429a      	cmp	r2, r3
 801fcc8:	d802      	bhi.n	801fcd0 <ip4_input+0x74>
 801fcca:	89fb      	ldrh	r3, [r7, #14]
 801fccc:	2b13      	cmp	r3, #19
 801fcce:	d804      	bhi.n	801fcda <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801fcd0:	6878      	ldr	r0, [r7, #4]
 801fcd2:	f7f7 fb35 	bl	8017340 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801fcd6:	2300      	movs	r3, #0
 801fcd8:	e0db      	b.n	801fe92 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801fcda:	697b      	ldr	r3, [r7, #20]
 801fcdc:	691b      	ldr	r3, [r3, #16]
 801fcde:	4a6f      	ldr	r2, [pc, #444]	; (801fe9c <ip4_input+0x240>)
 801fce0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801fce2:	697b      	ldr	r3, [r7, #20]
 801fce4:	68db      	ldr	r3, [r3, #12]
 801fce6:	4a6d      	ldr	r2, [pc, #436]	; (801fe9c <ip4_input+0x240>)
 801fce8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801fcea:	4b6c      	ldr	r3, [pc, #432]	; (801fe9c <ip4_input+0x240>)
 801fcec:	695b      	ldr	r3, [r3, #20]
 801fcee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801fcf2:	2be0      	cmp	r3, #224	; 0xe0
 801fcf4:	d112      	bne.n	801fd1c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801fcf6:	683b      	ldr	r3, [r7, #0]
 801fcf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801fcfc:	f003 0301 	and.w	r3, r3, #1
 801fd00:	b2db      	uxtb	r3, r3
 801fd02:	2b00      	cmp	r3, #0
 801fd04:	d007      	beq.n	801fd16 <ip4_input+0xba>
 801fd06:	683b      	ldr	r3, [r7, #0]
 801fd08:	3304      	adds	r3, #4
 801fd0a:	681b      	ldr	r3, [r3, #0]
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	d002      	beq.n	801fd16 <ip4_input+0xba>
      netif = inp;
 801fd10:	683b      	ldr	r3, [r7, #0]
 801fd12:	613b      	str	r3, [r7, #16]
 801fd14:	e02a      	b.n	801fd6c <ip4_input+0x110>
    } else {
      netif = NULL;
 801fd16:	2300      	movs	r3, #0
 801fd18:	613b      	str	r3, [r7, #16]
 801fd1a:	e027      	b.n	801fd6c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801fd1c:	6838      	ldr	r0, [r7, #0]
 801fd1e:	f7ff ff73 	bl	801fc08 <ip4_input_accept>
 801fd22:	4603      	mov	r3, r0
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	d002      	beq.n	801fd2e <ip4_input+0xd2>
      netif = inp;
 801fd28:	683b      	ldr	r3, [r7, #0]
 801fd2a:	613b      	str	r3, [r7, #16]
 801fd2c:	e01e      	b.n	801fd6c <ip4_input+0x110>
    } else {
      netif = NULL;
 801fd2e:	2300      	movs	r3, #0
 801fd30:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801fd32:	4b5a      	ldr	r3, [pc, #360]	; (801fe9c <ip4_input+0x240>)
 801fd34:	695b      	ldr	r3, [r3, #20]
 801fd36:	b2db      	uxtb	r3, r3
 801fd38:	2b7f      	cmp	r3, #127	; 0x7f
 801fd3a:	d017      	beq.n	801fd6c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801fd3c:	4b58      	ldr	r3, [pc, #352]	; (801fea0 <ip4_input+0x244>)
 801fd3e:	681b      	ldr	r3, [r3, #0]
 801fd40:	613b      	str	r3, [r7, #16]
 801fd42:	e00e      	b.n	801fd62 <ip4_input+0x106>
          if (netif == inp) {
 801fd44:	693a      	ldr	r2, [r7, #16]
 801fd46:	683b      	ldr	r3, [r7, #0]
 801fd48:	429a      	cmp	r2, r3
 801fd4a:	d006      	beq.n	801fd5a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801fd4c:	6938      	ldr	r0, [r7, #16]
 801fd4e:	f7ff ff5b 	bl	801fc08 <ip4_input_accept>
 801fd52:	4603      	mov	r3, r0
 801fd54:	2b00      	cmp	r3, #0
 801fd56:	d108      	bne.n	801fd6a <ip4_input+0x10e>
 801fd58:	e000      	b.n	801fd5c <ip4_input+0x100>
            continue;
 801fd5a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801fd5c:	693b      	ldr	r3, [r7, #16]
 801fd5e:	681b      	ldr	r3, [r3, #0]
 801fd60:	613b      	str	r3, [r7, #16]
 801fd62:	693b      	ldr	r3, [r7, #16]
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	d1ed      	bne.n	801fd44 <ip4_input+0xe8>
 801fd68:	e000      	b.n	801fd6c <ip4_input+0x110>
            break;
 801fd6a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801fd6c:	4b4b      	ldr	r3, [pc, #300]	; (801fe9c <ip4_input+0x240>)
 801fd6e:	691b      	ldr	r3, [r3, #16]
 801fd70:	6839      	ldr	r1, [r7, #0]
 801fd72:	4618      	mov	r0, r3
 801fd74:	f000 f96e 	bl	8020054 <ip4_addr_isbroadcast_u32>
 801fd78:	4603      	mov	r3, r0
 801fd7a:	2b00      	cmp	r3, #0
 801fd7c:	d105      	bne.n	801fd8a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801fd7e:	4b47      	ldr	r3, [pc, #284]	; (801fe9c <ip4_input+0x240>)
 801fd80:	691b      	ldr	r3, [r3, #16]
 801fd82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801fd86:	2be0      	cmp	r3, #224	; 0xe0
 801fd88:	d104      	bne.n	801fd94 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801fd8a:	6878      	ldr	r0, [r7, #4]
 801fd8c:	f7f7 fad8 	bl	8017340 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801fd90:	2300      	movs	r3, #0
 801fd92:	e07e      	b.n	801fe92 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801fd94:	693b      	ldr	r3, [r7, #16]
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d104      	bne.n	801fda4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801fd9a:	6878      	ldr	r0, [r7, #4]
 801fd9c:	f7f7 fad0 	bl	8017340 <pbuf_free>
    return ERR_OK;
 801fda0:	2300      	movs	r3, #0
 801fda2:	e076      	b.n	801fe92 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801fda4:	697b      	ldr	r3, [r7, #20]
 801fda6:	88db      	ldrh	r3, [r3, #6]
 801fda8:	b29b      	uxth	r3, r3
 801fdaa:	461a      	mov	r2, r3
 801fdac:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801fdb0:	4013      	ands	r3, r2
 801fdb2:	2b00      	cmp	r3, #0
 801fdb4:	d00b      	beq.n	801fdce <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801fdb6:	6878      	ldr	r0, [r7, #4]
 801fdb8:	f000 fc92 	bl	80206e0 <ip4_reass>
 801fdbc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801fdbe:	687b      	ldr	r3, [r7, #4]
 801fdc0:	2b00      	cmp	r3, #0
 801fdc2:	d101      	bne.n	801fdc8 <ip4_input+0x16c>
      return ERR_OK;
 801fdc4:	2300      	movs	r3, #0
 801fdc6:	e064      	b.n	801fe92 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801fdc8:	687b      	ldr	r3, [r7, #4]
 801fdca:	685b      	ldr	r3, [r3, #4]
 801fdcc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801fdce:	4a33      	ldr	r2, [pc, #204]	; (801fe9c <ip4_input+0x240>)
 801fdd0:	693b      	ldr	r3, [r7, #16]
 801fdd2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801fdd4:	4a31      	ldr	r2, [pc, #196]	; (801fe9c <ip4_input+0x240>)
 801fdd6:	683b      	ldr	r3, [r7, #0]
 801fdd8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801fdda:	4a30      	ldr	r2, [pc, #192]	; (801fe9c <ip4_input+0x240>)
 801fddc:	697b      	ldr	r3, [r7, #20]
 801fdde:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801fde0:	697b      	ldr	r3, [r7, #20]
 801fde2:	781b      	ldrb	r3, [r3, #0]
 801fde4:	f003 030f 	and.w	r3, r3, #15
 801fde8:	b2db      	uxtb	r3, r3
 801fdea:	009b      	lsls	r3, r3, #2
 801fdec:	b2db      	uxtb	r3, r3
 801fdee:	b29a      	uxth	r2, r3
 801fdf0:	4b2a      	ldr	r3, [pc, #168]	; (801fe9c <ip4_input+0x240>)
 801fdf2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801fdf4:	89fb      	ldrh	r3, [r7, #14]
 801fdf6:	4619      	mov	r1, r3
 801fdf8:	6878      	ldr	r0, [r7, #4]
 801fdfa:	f7f7 fa1b 	bl	8017234 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801fdfe:	697b      	ldr	r3, [r7, #20]
 801fe00:	7a5b      	ldrb	r3, [r3, #9]
 801fe02:	2b11      	cmp	r3, #17
 801fe04:	d006      	beq.n	801fe14 <ip4_input+0x1b8>
 801fe06:	2b11      	cmp	r3, #17
 801fe08:	dc13      	bgt.n	801fe32 <ip4_input+0x1d6>
 801fe0a:	2b01      	cmp	r3, #1
 801fe0c:	d00c      	beq.n	801fe28 <ip4_input+0x1cc>
 801fe0e:	2b06      	cmp	r3, #6
 801fe10:	d005      	beq.n	801fe1e <ip4_input+0x1c2>
 801fe12:	e00e      	b.n	801fe32 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801fe14:	6839      	ldr	r1, [r7, #0]
 801fe16:	6878      	ldr	r0, [r7, #4]
 801fe18:	f7fe f902 	bl	801e020 <udp_input>
        break;
 801fe1c:	e026      	b.n	801fe6c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801fe1e:	6839      	ldr	r1, [r7, #0]
 801fe20:	6878      	ldr	r0, [r7, #4]
 801fe22:	f7f9 fcbb 	bl	801979c <tcp_input>
        break;
 801fe26:	e021      	b.n	801fe6c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801fe28:	6839      	ldr	r1, [r7, #0]
 801fe2a:	6878      	ldr	r0, [r7, #4]
 801fe2c:	f7ff fcee 	bl	801f80c <icmp_input>
        break;
 801fe30:	e01c      	b.n	801fe6c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801fe32:	4b1a      	ldr	r3, [pc, #104]	; (801fe9c <ip4_input+0x240>)
 801fe34:	695b      	ldr	r3, [r3, #20]
 801fe36:	6939      	ldr	r1, [r7, #16]
 801fe38:	4618      	mov	r0, r3
 801fe3a:	f000 f90b 	bl	8020054 <ip4_addr_isbroadcast_u32>
 801fe3e:	4603      	mov	r3, r0
 801fe40:	2b00      	cmp	r3, #0
 801fe42:	d10f      	bne.n	801fe64 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801fe44:	4b15      	ldr	r3, [pc, #84]	; (801fe9c <ip4_input+0x240>)
 801fe46:	695b      	ldr	r3, [r3, #20]
 801fe48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801fe4c:	2be0      	cmp	r3, #224	; 0xe0
 801fe4e:	d009      	beq.n	801fe64 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801fe50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801fe54:	4619      	mov	r1, r3
 801fe56:	6878      	ldr	r0, [r7, #4]
 801fe58:	f7f7 fa5f 	bl	801731a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801fe5c:	2102      	movs	r1, #2
 801fe5e:	6878      	ldr	r0, [r7, #4]
 801fe60:	f7ff fdd8 	bl	801fa14 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801fe64:	6878      	ldr	r0, [r7, #4]
 801fe66:	f7f7 fa6b 	bl	8017340 <pbuf_free>
        break;
 801fe6a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801fe6c:	4b0b      	ldr	r3, [pc, #44]	; (801fe9c <ip4_input+0x240>)
 801fe6e:	2200      	movs	r2, #0
 801fe70:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801fe72:	4b0a      	ldr	r3, [pc, #40]	; (801fe9c <ip4_input+0x240>)
 801fe74:	2200      	movs	r2, #0
 801fe76:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801fe78:	4b08      	ldr	r3, [pc, #32]	; (801fe9c <ip4_input+0x240>)
 801fe7a:	2200      	movs	r2, #0
 801fe7c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801fe7e:	4b07      	ldr	r3, [pc, #28]	; (801fe9c <ip4_input+0x240>)
 801fe80:	2200      	movs	r2, #0
 801fe82:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801fe84:	4b05      	ldr	r3, [pc, #20]	; (801fe9c <ip4_input+0x240>)
 801fe86:	2200      	movs	r2, #0
 801fe88:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801fe8a:	4b04      	ldr	r3, [pc, #16]	; (801fe9c <ip4_input+0x240>)
 801fe8c:	2200      	movs	r2, #0
 801fe8e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801fe90:	2300      	movs	r3, #0
}
 801fe92:	4618      	mov	r0, r3
 801fe94:	3718      	adds	r7, #24
 801fe96:	46bd      	mov	sp, r7
 801fe98:	bd80      	pop	{r7, pc}
 801fe9a:	bf00      	nop
 801fe9c:	200066a0 	.word	0x200066a0
 801fea0:	2000bfa8 	.word	0x2000bfa8

0801fea4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801fea4:	b580      	push	{r7, lr}
 801fea6:	b08a      	sub	sp, #40	; 0x28
 801fea8:	af04      	add	r7, sp, #16
 801feaa:	60f8      	str	r0, [r7, #12]
 801feac:	60b9      	str	r1, [r7, #8]
 801feae:	607a      	str	r2, [r7, #4]
 801feb0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801feb2:	68bb      	ldr	r3, [r7, #8]
 801feb4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	2b00      	cmp	r3, #0
 801feba:	d009      	beq.n	801fed0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801febc:	68bb      	ldr	r3, [r7, #8]
 801febe:	2b00      	cmp	r3, #0
 801fec0:	d003      	beq.n	801feca <ip4_output_if+0x26>
 801fec2:	68bb      	ldr	r3, [r7, #8]
 801fec4:	681b      	ldr	r3, [r3, #0]
 801fec6:	2b00      	cmp	r3, #0
 801fec8:	d102      	bne.n	801fed0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801feca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fecc:	3304      	adds	r3, #4
 801fece:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801fed0:	78fa      	ldrb	r2, [r7, #3]
 801fed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fed4:	9302      	str	r3, [sp, #8]
 801fed6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801feda:	9301      	str	r3, [sp, #4]
 801fedc:	f897 3020 	ldrb.w	r3, [r7, #32]
 801fee0:	9300      	str	r3, [sp, #0]
 801fee2:	4613      	mov	r3, r2
 801fee4:	687a      	ldr	r2, [r7, #4]
 801fee6:	6979      	ldr	r1, [r7, #20]
 801fee8:	68f8      	ldr	r0, [r7, #12]
 801feea:	f000 f805 	bl	801fef8 <ip4_output_if_src>
 801feee:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801fef0:	4618      	mov	r0, r3
 801fef2:	3718      	adds	r7, #24
 801fef4:	46bd      	mov	sp, r7
 801fef6:	bd80      	pop	{r7, pc}

0801fef8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801fef8:	b580      	push	{r7, lr}
 801fefa:	b088      	sub	sp, #32
 801fefc:	af00      	add	r7, sp, #0
 801fefe:	60f8      	str	r0, [r7, #12]
 801ff00:	60b9      	str	r1, [r7, #8]
 801ff02:	607a      	str	r2, [r7, #4]
 801ff04:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801ff06:	68fb      	ldr	r3, [r7, #12]
 801ff08:	7b9b      	ldrb	r3, [r3, #14]
 801ff0a:	2b01      	cmp	r3, #1
 801ff0c:	d006      	beq.n	801ff1c <ip4_output_if_src+0x24>
 801ff0e:	4b4b      	ldr	r3, [pc, #300]	; (802003c <ip4_output_if_src+0x144>)
 801ff10:	f44f 7255 	mov.w	r2, #852	; 0x354
 801ff14:	494a      	ldr	r1, [pc, #296]	; (8020040 <ip4_output_if_src+0x148>)
 801ff16:	484b      	ldr	r0, [pc, #300]	; (8020044 <ip4_output_if_src+0x14c>)
 801ff18:	f002 fc4a 	bl	80227b0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801ff1c:	687b      	ldr	r3, [r7, #4]
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	d060      	beq.n	801ffe4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801ff22:	2314      	movs	r3, #20
 801ff24:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801ff26:	2114      	movs	r1, #20
 801ff28:	68f8      	ldr	r0, [r7, #12]
 801ff2a:	f7f7 f973 	bl	8017214 <pbuf_add_header>
 801ff2e:	4603      	mov	r3, r0
 801ff30:	2b00      	cmp	r3, #0
 801ff32:	d002      	beq.n	801ff3a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ff34:	f06f 0301 	mvn.w	r3, #1
 801ff38:	e07c      	b.n	8020034 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801ff3a:	68fb      	ldr	r3, [r7, #12]
 801ff3c:	685b      	ldr	r3, [r3, #4]
 801ff3e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801ff40:	68fb      	ldr	r3, [r7, #12]
 801ff42:	895b      	ldrh	r3, [r3, #10]
 801ff44:	2b13      	cmp	r3, #19
 801ff46:	d806      	bhi.n	801ff56 <ip4_output_if_src+0x5e>
 801ff48:	4b3c      	ldr	r3, [pc, #240]	; (802003c <ip4_output_if_src+0x144>)
 801ff4a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801ff4e:	493e      	ldr	r1, [pc, #248]	; (8020048 <ip4_output_if_src+0x150>)
 801ff50:	483c      	ldr	r0, [pc, #240]	; (8020044 <ip4_output_if_src+0x14c>)
 801ff52:	f002 fc2d 	bl	80227b0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801ff56:	69fb      	ldr	r3, [r7, #28]
 801ff58:	78fa      	ldrb	r2, [r7, #3]
 801ff5a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801ff5c:	69fb      	ldr	r3, [r7, #28]
 801ff5e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801ff62:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801ff64:	687b      	ldr	r3, [r7, #4]
 801ff66:	681a      	ldr	r2, [r3, #0]
 801ff68:	69fb      	ldr	r3, [r7, #28]
 801ff6a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801ff6c:	8b7b      	ldrh	r3, [r7, #26]
 801ff6e:	089b      	lsrs	r3, r3, #2
 801ff70:	b29b      	uxth	r3, r3
 801ff72:	b2db      	uxtb	r3, r3
 801ff74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ff78:	b2da      	uxtb	r2, r3
 801ff7a:	69fb      	ldr	r3, [r7, #28]
 801ff7c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801ff7e:	69fb      	ldr	r3, [r7, #28]
 801ff80:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801ff84:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801ff86:	68fb      	ldr	r3, [r7, #12]
 801ff88:	891b      	ldrh	r3, [r3, #8]
 801ff8a:	4618      	mov	r0, r3
 801ff8c:	f7f5 fde6 	bl	8015b5c <lwip_htons>
 801ff90:	4603      	mov	r3, r0
 801ff92:	461a      	mov	r2, r3
 801ff94:	69fb      	ldr	r3, [r7, #28]
 801ff96:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801ff98:	69fb      	ldr	r3, [r7, #28]
 801ff9a:	2200      	movs	r2, #0
 801ff9c:	719a      	strb	r2, [r3, #6]
 801ff9e:	2200      	movs	r2, #0
 801ffa0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801ffa2:	4b2a      	ldr	r3, [pc, #168]	; (802004c <ip4_output_if_src+0x154>)
 801ffa4:	881b      	ldrh	r3, [r3, #0]
 801ffa6:	4618      	mov	r0, r3
 801ffa8:	f7f5 fdd8 	bl	8015b5c <lwip_htons>
 801ffac:	4603      	mov	r3, r0
 801ffae:	461a      	mov	r2, r3
 801ffb0:	69fb      	ldr	r3, [r7, #28]
 801ffb2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801ffb4:	4b25      	ldr	r3, [pc, #148]	; (802004c <ip4_output_if_src+0x154>)
 801ffb6:	881b      	ldrh	r3, [r3, #0]
 801ffb8:	3301      	adds	r3, #1
 801ffba:	b29a      	uxth	r2, r3
 801ffbc:	4b23      	ldr	r3, [pc, #140]	; (802004c <ip4_output_if_src+0x154>)
 801ffbe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801ffc0:	68bb      	ldr	r3, [r7, #8]
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	d104      	bne.n	801ffd0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801ffc6:	4b22      	ldr	r3, [pc, #136]	; (8020050 <ip4_output_if_src+0x158>)
 801ffc8:	681a      	ldr	r2, [r3, #0]
 801ffca:	69fb      	ldr	r3, [r7, #28]
 801ffcc:	60da      	str	r2, [r3, #12]
 801ffce:	e003      	b.n	801ffd8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801ffd0:	68bb      	ldr	r3, [r7, #8]
 801ffd2:	681a      	ldr	r2, [r3, #0]
 801ffd4:	69fb      	ldr	r3, [r7, #28]
 801ffd6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801ffd8:	69fb      	ldr	r3, [r7, #28]
 801ffda:	2200      	movs	r2, #0
 801ffdc:	729a      	strb	r2, [r3, #10]
 801ffde:	2200      	movs	r2, #0
 801ffe0:	72da      	strb	r2, [r3, #11]
 801ffe2:	e00f      	b.n	8020004 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801ffe4:	68fb      	ldr	r3, [r7, #12]
 801ffe6:	895b      	ldrh	r3, [r3, #10]
 801ffe8:	2b13      	cmp	r3, #19
 801ffea:	d802      	bhi.n	801fff2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ffec:	f06f 0301 	mvn.w	r3, #1
 801fff0:	e020      	b.n	8020034 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801fff2:	68fb      	ldr	r3, [r7, #12]
 801fff4:	685b      	ldr	r3, [r3, #4]
 801fff6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801fff8:	69fb      	ldr	r3, [r7, #28]
 801fffa:	691b      	ldr	r3, [r3, #16]
 801fffc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801fffe:	f107 0314 	add.w	r3, r7, #20
 8020002:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8020004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020006:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8020008:	2b00      	cmp	r3, #0
 802000a:	d00c      	beq.n	8020026 <ip4_output_if_src+0x12e>
 802000c:	68fb      	ldr	r3, [r7, #12]
 802000e:	891a      	ldrh	r2, [r3, #8]
 8020010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020012:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8020014:	429a      	cmp	r2, r3
 8020016:	d906      	bls.n	8020026 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8020018:	687a      	ldr	r2, [r7, #4]
 802001a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802001c:	68f8      	ldr	r0, [r7, #12]
 802001e:	f000 fd53 	bl	8020ac8 <ip4_frag>
 8020022:	4603      	mov	r3, r0
 8020024:	e006      	b.n	8020034 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8020026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020028:	695b      	ldr	r3, [r3, #20]
 802002a:	687a      	ldr	r2, [r7, #4]
 802002c:	68f9      	ldr	r1, [r7, #12]
 802002e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020030:	4798      	blx	r3
 8020032:	4603      	mov	r3, r0
}
 8020034:	4618      	mov	r0, r3
 8020036:	3720      	adds	r7, #32
 8020038:	46bd      	mov	sp, r7
 802003a:	bd80      	pop	{r7, pc}
 802003c:	08026ebc 	.word	0x08026ebc
 8020040:	08026ef0 	.word	0x08026ef0
 8020044:	08026efc 	.word	0x08026efc
 8020048:	08026f24 	.word	0x08026f24
 802004c:	2000c106 	.word	0x2000c106
 8020050:	08027398 	.word	0x08027398

08020054 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8020054:	b480      	push	{r7}
 8020056:	b085      	sub	sp, #20
 8020058:	af00      	add	r7, sp, #0
 802005a:	6078      	str	r0, [r7, #4]
 802005c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 802005e:	687b      	ldr	r3, [r7, #4]
 8020060:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8020062:	687b      	ldr	r3, [r7, #4]
 8020064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020068:	d002      	beq.n	8020070 <ip4_addr_isbroadcast_u32+0x1c>
 802006a:	687b      	ldr	r3, [r7, #4]
 802006c:	2b00      	cmp	r3, #0
 802006e:	d101      	bne.n	8020074 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8020070:	2301      	movs	r3, #1
 8020072:	e02a      	b.n	80200ca <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8020074:	683b      	ldr	r3, [r7, #0]
 8020076:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802007a:	f003 0302 	and.w	r3, r3, #2
 802007e:	2b00      	cmp	r3, #0
 8020080:	d101      	bne.n	8020086 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8020082:	2300      	movs	r3, #0
 8020084:	e021      	b.n	80200ca <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8020086:	683b      	ldr	r3, [r7, #0]
 8020088:	3304      	adds	r3, #4
 802008a:	681b      	ldr	r3, [r3, #0]
 802008c:	687a      	ldr	r2, [r7, #4]
 802008e:	429a      	cmp	r2, r3
 8020090:	d101      	bne.n	8020096 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8020092:	2300      	movs	r3, #0
 8020094:	e019      	b.n	80200ca <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8020096:	68fa      	ldr	r2, [r7, #12]
 8020098:	683b      	ldr	r3, [r7, #0]
 802009a:	3304      	adds	r3, #4
 802009c:	681b      	ldr	r3, [r3, #0]
 802009e:	405a      	eors	r2, r3
 80200a0:	683b      	ldr	r3, [r7, #0]
 80200a2:	3308      	adds	r3, #8
 80200a4:	681b      	ldr	r3, [r3, #0]
 80200a6:	4013      	ands	r3, r2
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	d10d      	bne.n	80200c8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80200ac:	683b      	ldr	r3, [r7, #0]
 80200ae:	3308      	adds	r3, #8
 80200b0:	681b      	ldr	r3, [r3, #0]
 80200b2:	43da      	mvns	r2, r3
 80200b4:	687b      	ldr	r3, [r7, #4]
 80200b6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80200b8:	683b      	ldr	r3, [r7, #0]
 80200ba:	3308      	adds	r3, #8
 80200bc:	681b      	ldr	r3, [r3, #0]
 80200be:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80200c0:	429a      	cmp	r2, r3
 80200c2:	d101      	bne.n	80200c8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80200c4:	2301      	movs	r3, #1
 80200c6:	e000      	b.n	80200ca <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80200c8:	2300      	movs	r3, #0
  }
}
 80200ca:	4618      	mov	r0, r3
 80200cc:	3714      	adds	r7, #20
 80200ce:	46bd      	mov	sp, r7
 80200d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200d4:	4770      	bx	lr
	...

080200d8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80200d8:	b580      	push	{r7, lr}
 80200da:	b084      	sub	sp, #16
 80200dc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80200de:	2300      	movs	r3, #0
 80200e0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80200e2:	4b12      	ldr	r3, [pc, #72]	; (802012c <ip_reass_tmr+0x54>)
 80200e4:	681b      	ldr	r3, [r3, #0]
 80200e6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80200e8:	e018      	b.n	802011c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80200ea:	68fb      	ldr	r3, [r7, #12]
 80200ec:	7fdb      	ldrb	r3, [r3, #31]
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	d00b      	beq.n	802010a <ip_reass_tmr+0x32>
      r->timer--;
 80200f2:	68fb      	ldr	r3, [r7, #12]
 80200f4:	7fdb      	ldrb	r3, [r3, #31]
 80200f6:	3b01      	subs	r3, #1
 80200f8:	b2da      	uxtb	r2, r3
 80200fa:	68fb      	ldr	r3, [r7, #12]
 80200fc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80200fe:	68fb      	ldr	r3, [r7, #12]
 8020100:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8020102:	68fb      	ldr	r3, [r7, #12]
 8020104:	681b      	ldr	r3, [r3, #0]
 8020106:	60fb      	str	r3, [r7, #12]
 8020108:	e008      	b.n	802011c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 802010a:	68fb      	ldr	r3, [r7, #12]
 802010c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 802010e:	68fb      	ldr	r3, [r7, #12]
 8020110:	681b      	ldr	r3, [r3, #0]
 8020112:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8020114:	68b9      	ldr	r1, [r7, #8]
 8020116:	6878      	ldr	r0, [r7, #4]
 8020118:	f000 f80a 	bl	8020130 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 802011c:	68fb      	ldr	r3, [r7, #12]
 802011e:	2b00      	cmp	r3, #0
 8020120:	d1e3      	bne.n	80200ea <ip_reass_tmr+0x12>
    }
  }
}
 8020122:	bf00      	nop
 8020124:	bf00      	nop
 8020126:	3710      	adds	r7, #16
 8020128:	46bd      	mov	sp, r7
 802012a:	bd80      	pop	{r7, pc}
 802012c:	2000c108 	.word	0x2000c108

08020130 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020130:	b580      	push	{r7, lr}
 8020132:	b088      	sub	sp, #32
 8020134:	af00      	add	r7, sp, #0
 8020136:	6078      	str	r0, [r7, #4]
 8020138:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 802013a:	2300      	movs	r3, #0
 802013c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 802013e:	683a      	ldr	r2, [r7, #0]
 8020140:	687b      	ldr	r3, [r7, #4]
 8020142:	429a      	cmp	r2, r3
 8020144:	d105      	bne.n	8020152 <ip_reass_free_complete_datagram+0x22>
 8020146:	4b45      	ldr	r3, [pc, #276]	; (802025c <ip_reass_free_complete_datagram+0x12c>)
 8020148:	22ab      	movs	r2, #171	; 0xab
 802014a:	4945      	ldr	r1, [pc, #276]	; (8020260 <ip_reass_free_complete_datagram+0x130>)
 802014c:	4845      	ldr	r0, [pc, #276]	; (8020264 <ip_reass_free_complete_datagram+0x134>)
 802014e:	f002 fb2f 	bl	80227b0 <iprintf>
  if (prev != NULL) {
 8020152:	683b      	ldr	r3, [r7, #0]
 8020154:	2b00      	cmp	r3, #0
 8020156:	d00a      	beq.n	802016e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8020158:	683b      	ldr	r3, [r7, #0]
 802015a:	681b      	ldr	r3, [r3, #0]
 802015c:	687a      	ldr	r2, [r7, #4]
 802015e:	429a      	cmp	r2, r3
 8020160:	d005      	beq.n	802016e <ip_reass_free_complete_datagram+0x3e>
 8020162:	4b3e      	ldr	r3, [pc, #248]	; (802025c <ip_reass_free_complete_datagram+0x12c>)
 8020164:	22ad      	movs	r2, #173	; 0xad
 8020166:	4940      	ldr	r1, [pc, #256]	; (8020268 <ip_reass_free_complete_datagram+0x138>)
 8020168:	483e      	ldr	r0, [pc, #248]	; (8020264 <ip_reass_free_complete_datagram+0x134>)
 802016a:	f002 fb21 	bl	80227b0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 802016e:	687b      	ldr	r3, [r7, #4]
 8020170:	685b      	ldr	r3, [r3, #4]
 8020172:	685b      	ldr	r3, [r3, #4]
 8020174:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8020176:	697b      	ldr	r3, [r7, #20]
 8020178:	889b      	ldrh	r3, [r3, #4]
 802017a:	b29b      	uxth	r3, r3
 802017c:	2b00      	cmp	r3, #0
 802017e:	d12a      	bne.n	80201d6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8020180:	687b      	ldr	r3, [r7, #4]
 8020182:	685b      	ldr	r3, [r3, #4]
 8020184:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8020186:	697b      	ldr	r3, [r7, #20]
 8020188:	681a      	ldr	r2, [r3, #0]
 802018a:	687b      	ldr	r3, [r7, #4]
 802018c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 802018e:	69bb      	ldr	r3, [r7, #24]
 8020190:	6858      	ldr	r0, [r3, #4]
 8020192:	687b      	ldr	r3, [r7, #4]
 8020194:	3308      	adds	r3, #8
 8020196:	2214      	movs	r2, #20
 8020198:	4619      	mov	r1, r3
 802019a:	f002 f9f9 	bl	8022590 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802019e:	2101      	movs	r1, #1
 80201a0:	69b8      	ldr	r0, [r7, #24]
 80201a2:	f7ff fc47 	bl	801fa34 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80201a6:	69b8      	ldr	r0, [r7, #24]
 80201a8:	f7f7 f958 	bl	801745c <pbuf_clen>
 80201ac:	4603      	mov	r3, r0
 80201ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80201b0:	8bfa      	ldrh	r2, [r7, #30]
 80201b2:	8a7b      	ldrh	r3, [r7, #18]
 80201b4:	4413      	add	r3, r2
 80201b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80201ba:	db05      	blt.n	80201c8 <ip_reass_free_complete_datagram+0x98>
 80201bc:	4b27      	ldr	r3, [pc, #156]	; (802025c <ip_reass_free_complete_datagram+0x12c>)
 80201be:	22bc      	movs	r2, #188	; 0xbc
 80201c0:	492a      	ldr	r1, [pc, #168]	; (802026c <ip_reass_free_complete_datagram+0x13c>)
 80201c2:	4828      	ldr	r0, [pc, #160]	; (8020264 <ip_reass_free_complete_datagram+0x134>)
 80201c4:	f002 faf4 	bl	80227b0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80201c8:	8bfa      	ldrh	r2, [r7, #30]
 80201ca:	8a7b      	ldrh	r3, [r7, #18]
 80201cc:	4413      	add	r3, r2
 80201ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80201d0:	69b8      	ldr	r0, [r7, #24]
 80201d2:	f7f7 f8b5 	bl	8017340 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80201d6:	687b      	ldr	r3, [r7, #4]
 80201d8:	685b      	ldr	r3, [r3, #4]
 80201da:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80201dc:	e01f      	b.n	802021e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80201de:	69bb      	ldr	r3, [r7, #24]
 80201e0:	685b      	ldr	r3, [r3, #4]
 80201e2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80201e4:	69bb      	ldr	r3, [r7, #24]
 80201e6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80201e8:	697b      	ldr	r3, [r7, #20]
 80201ea:	681b      	ldr	r3, [r3, #0]
 80201ec:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80201ee:	68f8      	ldr	r0, [r7, #12]
 80201f0:	f7f7 f934 	bl	801745c <pbuf_clen>
 80201f4:	4603      	mov	r3, r0
 80201f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80201f8:	8bfa      	ldrh	r2, [r7, #30]
 80201fa:	8a7b      	ldrh	r3, [r7, #18]
 80201fc:	4413      	add	r3, r2
 80201fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020202:	db05      	blt.n	8020210 <ip_reass_free_complete_datagram+0xe0>
 8020204:	4b15      	ldr	r3, [pc, #84]	; (802025c <ip_reass_free_complete_datagram+0x12c>)
 8020206:	22cc      	movs	r2, #204	; 0xcc
 8020208:	4918      	ldr	r1, [pc, #96]	; (802026c <ip_reass_free_complete_datagram+0x13c>)
 802020a:	4816      	ldr	r0, [pc, #88]	; (8020264 <ip_reass_free_complete_datagram+0x134>)
 802020c:	f002 fad0 	bl	80227b0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8020210:	8bfa      	ldrh	r2, [r7, #30]
 8020212:	8a7b      	ldrh	r3, [r7, #18]
 8020214:	4413      	add	r3, r2
 8020216:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8020218:	68f8      	ldr	r0, [r7, #12]
 802021a:	f7f7 f891 	bl	8017340 <pbuf_free>
  while (p != NULL) {
 802021e:	69bb      	ldr	r3, [r7, #24]
 8020220:	2b00      	cmp	r3, #0
 8020222:	d1dc      	bne.n	80201de <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8020224:	6839      	ldr	r1, [r7, #0]
 8020226:	6878      	ldr	r0, [r7, #4]
 8020228:	f000 f8c2 	bl	80203b0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 802022c:	4b10      	ldr	r3, [pc, #64]	; (8020270 <ip_reass_free_complete_datagram+0x140>)
 802022e:	881b      	ldrh	r3, [r3, #0]
 8020230:	8bfa      	ldrh	r2, [r7, #30]
 8020232:	429a      	cmp	r2, r3
 8020234:	d905      	bls.n	8020242 <ip_reass_free_complete_datagram+0x112>
 8020236:	4b09      	ldr	r3, [pc, #36]	; (802025c <ip_reass_free_complete_datagram+0x12c>)
 8020238:	22d2      	movs	r2, #210	; 0xd2
 802023a:	490e      	ldr	r1, [pc, #56]	; (8020274 <ip_reass_free_complete_datagram+0x144>)
 802023c:	4809      	ldr	r0, [pc, #36]	; (8020264 <ip_reass_free_complete_datagram+0x134>)
 802023e:	f002 fab7 	bl	80227b0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8020242:	4b0b      	ldr	r3, [pc, #44]	; (8020270 <ip_reass_free_complete_datagram+0x140>)
 8020244:	881a      	ldrh	r2, [r3, #0]
 8020246:	8bfb      	ldrh	r3, [r7, #30]
 8020248:	1ad3      	subs	r3, r2, r3
 802024a:	b29a      	uxth	r2, r3
 802024c:	4b08      	ldr	r3, [pc, #32]	; (8020270 <ip_reass_free_complete_datagram+0x140>)
 802024e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8020250:	8bfb      	ldrh	r3, [r7, #30]
}
 8020252:	4618      	mov	r0, r3
 8020254:	3720      	adds	r7, #32
 8020256:	46bd      	mov	sp, r7
 8020258:	bd80      	pop	{r7, pc}
 802025a:	bf00      	nop
 802025c:	08026f54 	.word	0x08026f54
 8020260:	08026f90 	.word	0x08026f90
 8020264:	08026f9c 	.word	0x08026f9c
 8020268:	08026fc4 	.word	0x08026fc4
 802026c:	08026fd8 	.word	0x08026fd8
 8020270:	2000c10c 	.word	0x2000c10c
 8020274:	08026ff8 	.word	0x08026ff8

08020278 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8020278:	b580      	push	{r7, lr}
 802027a:	b08a      	sub	sp, #40	; 0x28
 802027c:	af00      	add	r7, sp, #0
 802027e:	6078      	str	r0, [r7, #4]
 8020280:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8020282:	2300      	movs	r3, #0
 8020284:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8020286:	2300      	movs	r3, #0
 8020288:	623b      	str	r3, [r7, #32]
    prev = NULL;
 802028a:	2300      	movs	r3, #0
 802028c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 802028e:	2300      	movs	r3, #0
 8020290:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8020292:	2300      	movs	r3, #0
 8020294:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8020296:	4b28      	ldr	r3, [pc, #160]	; (8020338 <ip_reass_remove_oldest_datagram+0xc0>)
 8020298:	681b      	ldr	r3, [r3, #0]
 802029a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 802029c:	e030      	b.n	8020300 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802029e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202a0:	695a      	ldr	r2, [r3, #20]
 80202a2:	687b      	ldr	r3, [r7, #4]
 80202a4:	68db      	ldr	r3, [r3, #12]
 80202a6:	429a      	cmp	r2, r3
 80202a8:	d10c      	bne.n	80202c4 <ip_reass_remove_oldest_datagram+0x4c>
 80202aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202ac:	699a      	ldr	r2, [r3, #24]
 80202ae:	687b      	ldr	r3, [r7, #4]
 80202b0:	691b      	ldr	r3, [r3, #16]
 80202b2:	429a      	cmp	r2, r3
 80202b4:	d106      	bne.n	80202c4 <ip_reass_remove_oldest_datagram+0x4c>
 80202b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202b8:	899a      	ldrh	r2, [r3, #12]
 80202ba:	687b      	ldr	r3, [r7, #4]
 80202bc:	889b      	ldrh	r3, [r3, #4]
 80202be:	b29b      	uxth	r3, r3
 80202c0:	429a      	cmp	r2, r3
 80202c2:	d014      	beq.n	80202ee <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80202c4:	693b      	ldr	r3, [r7, #16]
 80202c6:	3301      	adds	r3, #1
 80202c8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80202ca:	6a3b      	ldr	r3, [r7, #32]
 80202cc:	2b00      	cmp	r3, #0
 80202ce:	d104      	bne.n	80202da <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80202d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202d2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80202d4:	69fb      	ldr	r3, [r7, #28]
 80202d6:	61bb      	str	r3, [r7, #24]
 80202d8:	e009      	b.n	80202ee <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80202da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202dc:	7fda      	ldrb	r2, [r3, #31]
 80202de:	6a3b      	ldr	r3, [r7, #32]
 80202e0:	7fdb      	ldrb	r3, [r3, #31]
 80202e2:	429a      	cmp	r2, r3
 80202e4:	d803      	bhi.n	80202ee <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80202e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202e8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80202ea:	69fb      	ldr	r3, [r7, #28]
 80202ec:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80202ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202f0:	681b      	ldr	r3, [r3, #0]
 80202f2:	2b00      	cmp	r3, #0
 80202f4:	d001      	beq.n	80202fa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80202f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202f8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80202fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202fc:	681b      	ldr	r3, [r3, #0]
 80202fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8020300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020302:	2b00      	cmp	r3, #0
 8020304:	d1cb      	bne.n	802029e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8020306:	6a3b      	ldr	r3, [r7, #32]
 8020308:	2b00      	cmp	r3, #0
 802030a:	d008      	beq.n	802031e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 802030c:	69b9      	ldr	r1, [r7, #24]
 802030e:	6a38      	ldr	r0, [r7, #32]
 8020310:	f7ff ff0e 	bl	8020130 <ip_reass_free_complete_datagram>
 8020314:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8020316:	697a      	ldr	r2, [r7, #20]
 8020318:	68fb      	ldr	r3, [r7, #12]
 802031a:	4413      	add	r3, r2
 802031c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 802031e:	697a      	ldr	r2, [r7, #20]
 8020320:	683b      	ldr	r3, [r7, #0]
 8020322:	429a      	cmp	r2, r3
 8020324:	da02      	bge.n	802032c <ip_reass_remove_oldest_datagram+0xb4>
 8020326:	693b      	ldr	r3, [r7, #16]
 8020328:	2b01      	cmp	r3, #1
 802032a:	dcac      	bgt.n	8020286 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 802032c:	697b      	ldr	r3, [r7, #20]
}
 802032e:	4618      	mov	r0, r3
 8020330:	3728      	adds	r7, #40	; 0x28
 8020332:	46bd      	mov	sp, r7
 8020334:	bd80      	pop	{r7, pc}
 8020336:	bf00      	nop
 8020338:	2000c108 	.word	0x2000c108

0802033c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 802033c:	b580      	push	{r7, lr}
 802033e:	b084      	sub	sp, #16
 8020340:	af00      	add	r7, sp, #0
 8020342:	6078      	str	r0, [r7, #4]
 8020344:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8020346:	2004      	movs	r0, #4
 8020348:	f7f6 f8e0 	bl	801650c <memp_malloc>
 802034c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 802034e:	68fb      	ldr	r3, [r7, #12]
 8020350:	2b00      	cmp	r3, #0
 8020352:	d110      	bne.n	8020376 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8020354:	6839      	ldr	r1, [r7, #0]
 8020356:	6878      	ldr	r0, [r7, #4]
 8020358:	f7ff ff8e 	bl	8020278 <ip_reass_remove_oldest_datagram>
 802035c:	4602      	mov	r2, r0
 802035e:	683b      	ldr	r3, [r7, #0]
 8020360:	4293      	cmp	r3, r2
 8020362:	dc03      	bgt.n	802036c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8020364:	2004      	movs	r0, #4
 8020366:	f7f6 f8d1 	bl	801650c <memp_malloc>
 802036a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 802036c:	68fb      	ldr	r3, [r7, #12]
 802036e:	2b00      	cmp	r3, #0
 8020370:	d101      	bne.n	8020376 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8020372:	2300      	movs	r3, #0
 8020374:	e016      	b.n	80203a4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8020376:	2220      	movs	r2, #32
 8020378:	2100      	movs	r1, #0
 802037a:	68f8      	ldr	r0, [r7, #12]
 802037c:	f002 f930 	bl	80225e0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8020380:	68fb      	ldr	r3, [r7, #12]
 8020382:	220f      	movs	r2, #15
 8020384:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8020386:	4b09      	ldr	r3, [pc, #36]	; (80203ac <ip_reass_enqueue_new_datagram+0x70>)
 8020388:	681a      	ldr	r2, [r3, #0]
 802038a:	68fb      	ldr	r3, [r7, #12]
 802038c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 802038e:	4a07      	ldr	r2, [pc, #28]	; (80203ac <ip_reass_enqueue_new_datagram+0x70>)
 8020390:	68fb      	ldr	r3, [r7, #12]
 8020392:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8020394:	68fb      	ldr	r3, [r7, #12]
 8020396:	3308      	adds	r3, #8
 8020398:	2214      	movs	r2, #20
 802039a:	6879      	ldr	r1, [r7, #4]
 802039c:	4618      	mov	r0, r3
 802039e:	f002 f8f7 	bl	8022590 <memcpy>
  return ipr;
 80203a2:	68fb      	ldr	r3, [r7, #12]
}
 80203a4:	4618      	mov	r0, r3
 80203a6:	3710      	adds	r7, #16
 80203a8:	46bd      	mov	sp, r7
 80203aa:	bd80      	pop	{r7, pc}
 80203ac:	2000c108 	.word	0x2000c108

080203b0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80203b0:	b580      	push	{r7, lr}
 80203b2:	b082      	sub	sp, #8
 80203b4:	af00      	add	r7, sp, #0
 80203b6:	6078      	str	r0, [r7, #4]
 80203b8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80203ba:	4b10      	ldr	r3, [pc, #64]	; (80203fc <ip_reass_dequeue_datagram+0x4c>)
 80203bc:	681b      	ldr	r3, [r3, #0]
 80203be:	687a      	ldr	r2, [r7, #4]
 80203c0:	429a      	cmp	r2, r3
 80203c2:	d104      	bne.n	80203ce <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	681b      	ldr	r3, [r3, #0]
 80203c8:	4a0c      	ldr	r2, [pc, #48]	; (80203fc <ip_reass_dequeue_datagram+0x4c>)
 80203ca:	6013      	str	r3, [r2, #0]
 80203cc:	e00d      	b.n	80203ea <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80203ce:	683b      	ldr	r3, [r7, #0]
 80203d0:	2b00      	cmp	r3, #0
 80203d2:	d106      	bne.n	80203e2 <ip_reass_dequeue_datagram+0x32>
 80203d4:	4b0a      	ldr	r3, [pc, #40]	; (8020400 <ip_reass_dequeue_datagram+0x50>)
 80203d6:	f240 1245 	movw	r2, #325	; 0x145
 80203da:	490a      	ldr	r1, [pc, #40]	; (8020404 <ip_reass_dequeue_datagram+0x54>)
 80203dc:	480a      	ldr	r0, [pc, #40]	; (8020408 <ip_reass_dequeue_datagram+0x58>)
 80203de:	f002 f9e7 	bl	80227b0 <iprintf>
    prev->next = ipr->next;
 80203e2:	687b      	ldr	r3, [r7, #4]
 80203e4:	681a      	ldr	r2, [r3, #0]
 80203e6:	683b      	ldr	r3, [r7, #0]
 80203e8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80203ea:	6879      	ldr	r1, [r7, #4]
 80203ec:	2004      	movs	r0, #4
 80203ee:	f7f6 f903 	bl	80165f8 <memp_free>
}
 80203f2:	bf00      	nop
 80203f4:	3708      	adds	r7, #8
 80203f6:	46bd      	mov	sp, r7
 80203f8:	bd80      	pop	{r7, pc}
 80203fa:	bf00      	nop
 80203fc:	2000c108 	.word	0x2000c108
 8020400:	08026f54 	.word	0x08026f54
 8020404:	0802701c 	.word	0x0802701c
 8020408:	08026f9c 	.word	0x08026f9c

0802040c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 802040c:	b580      	push	{r7, lr}
 802040e:	b08c      	sub	sp, #48	; 0x30
 8020410:	af00      	add	r7, sp, #0
 8020412:	60f8      	str	r0, [r7, #12]
 8020414:	60b9      	str	r1, [r7, #8]
 8020416:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8020418:	2300      	movs	r3, #0
 802041a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 802041c:	2301      	movs	r3, #1
 802041e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8020420:	68bb      	ldr	r3, [r7, #8]
 8020422:	685b      	ldr	r3, [r3, #4]
 8020424:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8020426:	69fb      	ldr	r3, [r7, #28]
 8020428:	885b      	ldrh	r3, [r3, #2]
 802042a:	b29b      	uxth	r3, r3
 802042c:	4618      	mov	r0, r3
 802042e:	f7f5 fb95 	bl	8015b5c <lwip_htons>
 8020432:	4603      	mov	r3, r0
 8020434:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8020436:	69fb      	ldr	r3, [r7, #28]
 8020438:	781b      	ldrb	r3, [r3, #0]
 802043a:	f003 030f 	and.w	r3, r3, #15
 802043e:	b2db      	uxtb	r3, r3
 8020440:	009b      	lsls	r3, r3, #2
 8020442:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8020444:	7e7b      	ldrb	r3, [r7, #25]
 8020446:	b29b      	uxth	r3, r3
 8020448:	8b7a      	ldrh	r2, [r7, #26]
 802044a:	429a      	cmp	r2, r3
 802044c:	d202      	bcs.n	8020454 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 802044e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020452:	e135      	b.n	80206c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8020454:	7e7b      	ldrb	r3, [r7, #25]
 8020456:	b29b      	uxth	r3, r3
 8020458:	8b7a      	ldrh	r2, [r7, #26]
 802045a:	1ad3      	subs	r3, r2, r3
 802045c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802045e:	69fb      	ldr	r3, [r7, #28]
 8020460:	88db      	ldrh	r3, [r3, #6]
 8020462:	b29b      	uxth	r3, r3
 8020464:	4618      	mov	r0, r3
 8020466:	f7f5 fb79 	bl	8015b5c <lwip_htons>
 802046a:	4603      	mov	r3, r0
 802046c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020470:	b29b      	uxth	r3, r3
 8020472:	00db      	lsls	r3, r3, #3
 8020474:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8020476:	68bb      	ldr	r3, [r7, #8]
 8020478:	685b      	ldr	r3, [r3, #4]
 802047a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 802047c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802047e:	2200      	movs	r2, #0
 8020480:	701a      	strb	r2, [r3, #0]
 8020482:	2200      	movs	r2, #0
 8020484:	705a      	strb	r2, [r3, #1]
 8020486:	2200      	movs	r2, #0
 8020488:	709a      	strb	r2, [r3, #2]
 802048a:	2200      	movs	r2, #0
 802048c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 802048e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020490:	8afa      	ldrh	r2, [r7, #22]
 8020492:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8020494:	8afa      	ldrh	r2, [r7, #22]
 8020496:	8b7b      	ldrh	r3, [r7, #26]
 8020498:	4413      	add	r3, r2
 802049a:	b29a      	uxth	r2, r3
 802049c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802049e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80204a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204a2:	88db      	ldrh	r3, [r3, #6]
 80204a4:	b29b      	uxth	r3, r3
 80204a6:	8afa      	ldrh	r2, [r7, #22]
 80204a8:	429a      	cmp	r2, r3
 80204aa:	d902      	bls.n	80204b2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80204ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80204b0:	e106      	b.n	80206c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80204b2:	68fb      	ldr	r3, [r7, #12]
 80204b4:	685b      	ldr	r3, [r3, #4]
 80204b6:	627b      	str	r3, [r7, #36]	; 0x24
 80204b8:	e068      	b.n	802058c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80204ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204bc:	685b      	ldr	r3, [r3, #4]
 80204be:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80204c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204c2:	889b      	ldrh	r3, [r3, #4]
 80204c4:	b29a      	uxth	r2, r3
 80204c6:	693b      	ldr	r3, [r7, #16]
 80204c8:	889b      	ldrh	r3, [r3, #4]
 80204ca:	b29b      	uxth	r3, r3
 80204cc:	429a      	cmp	r2, r3
 80204ce:	d235      	bcs.n	802053c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80204d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80204d4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80204d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204d8:	2b00      	cmp	r3, #0
 80204da:	d020      	beq.n	802051e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80204dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204de:	889b      	ldrh	r3, [r3, #4]
 80204e0:	b29a      	uxth	r2, r3
 80204e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204e4:	88db      	ldrh	r3, [r3, #6]
 80204e6:	b29b      	uxth	r3, r3
 80204e8:	429a      	cmp	r2, r3
 80204ea:	d307      	bcc.n	80204fc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80204ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204ee:	88db      	ldrh	r3, [r3, #6]
 80204f0:	b29a      	uxth	r2, r3
 80204f2:	693b      	ldr	r3, [r7, #16]
 80204f4:	889b      	ldrh	r3, [r3, #4]
 80204f6:	b29b      	uxth	r3, r3
 80204f8:	429a      	cmp	r2, r3
 80204fa:	d902      	bls.n	8020502 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80204fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020500:	e0de      	b.n	80206c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8020502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020504:	68ba      	ldr	r2, [r7, #8]
 8020506:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8020508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802050a:	88db      	ldrh	r3, [r3, #6]
 802050c:	b29a      	uxth	r2, r3
 802050e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020510:	889b      	ldrh	r3, [r3, #4]
 8020512:	b29b      	uxth	r3, r3
 8020514:	429a      	cmp	r2, r3
 8020516:	d03d      	beq.n	8020594 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8020518:	2300      	movs	r3, #0
 802051a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 802051c:	e03a      	b.n	8020594 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 802051e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020520:	88db      	ldrh	r3, [r3, #6]
 8020522:	b29a      	uxth	r2, r3
 8020524:	693b      	ldr	r3, [r7, #16]
 8020526:	889b      	ldrh	r3, [r3, #4]
 8020528:	b29b      	uxth	r3, r3
 802052a:	429a      	cmp	r2, r3
 802052c:	d902      	bls.n	8020534 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 802052e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020532:	e0c5      	b.n	80206c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8020534:	68fb      	ldr	r3, [r7, #12]
 8020536:	68ba      	ldr	r2, [r7, #8]
 8020538:	605a      	str	r2, [r3, #4]
      break;
 802053a:	e02b      	b.n	8020594 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 802053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802053e:	889b      	ldrh	r3, [r3, #4]
 8020540:	b29a      	uxth	r2, r3
 8020542:	693b      	ldr	r3, [r7, #16]
 8020544:	889b      	ldrh	r3, [r3, #4]
 8020546:	b29b      	uxth	r3, r3
 8020548:	429a      	cmp	r2, r3
 802054a:	d102      	bne.n	8020552 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802054c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020550:	e0b6      	b.n	80206c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8020552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020554:	889b      	ldrh	r3, [r3, #4]
 8020556:	b29a      	uxth	r2, r3
 8020558:	693b      	ldr	r3, [r7, #16]
 802055a:	88db      	ldrh	r3, [r3, #6]
 802055c:	b29b      	uxth	r3, r3
 802055e:	429a      	cmp	r2, r3
 8020560:	d202      	bcs.n	8020568 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020566:	e0ab      	b.n	80206c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8020568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802056a:	2b00      	cmp	r3, #0
 802056c:	d009      	beq.n	8020582 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 802056e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020570:	88db      	ldrh	r3, [r3, #6]
 8020572:	b29a      	uxth	r2, r3
 8020574:	693b      	ldr	r3, [r7, #16]
 8020576:	889b      	ldrh	r3, [r3, #4]
 8020578:	b29b      	uxth	r3, r3
 802057a:	429a      	cmp	r2, r3
 802057c:	d001      	beq.n	8020582 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 802057e:	2300      	movs	r3, #0
 8020580:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8020582:	693b      	ldr	r3, [r7, #16]
 8020584:	681b      	ldr	r3, [r3, #0]
 8020586:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8020588:	693b      	ldr	r3, [r7, #16]
 802058a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 802058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802058e:	2b00      	cmp	r3, #0
 8020590:	d193      	bne.n	80204ba <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8020592:	e000      	b.n	8020596 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8020594:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8020596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020598:	2b00      	cmp	r3, #0
 802059a:	d12d      	bne.n	80205f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 802059c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802059e:	2b00      	cmp	r3, #0
 80205a0:	d01c      	beq.n	80205dc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80205a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205a4:	88db      	ldrh	r3, [r3, #6]
 80205a6:	b29a      	uxth	r2, r3
 80205a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205aa:	889b      	ldrh	r3, [r3, #4]
 80205ac:	b29b      	uxth	r3, r3
 80205ae:	429a      	cmp	r2, r3
 80205b0:	d906      	bls.n	80205c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80205b2:	4b45      	ldr	r3, [pc, #276]	; (80206c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80205b4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80205b8:	4944      	ldr	r1, [pc, #272]	; (80206cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80205ba:	4845      	ldr	r0, [pc, #276]	; (80206d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80205bc:	f002 f8f8 	bl	80227b0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80205c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205c2:	68ba      	ldr	r2, [r7, #8]
 80205c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80205c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205c8:	88db      	ldrh	r3, [r3, #6]
 80205ca:	b29a      	uxth	r2, r3
 80205cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205ce:	889b      	ldrh	r3, [r3, #4]
 80205d0:	b29b      	uxth	r3, r3
 80205d2:	429a      	cmp	r2, r3
 80205d4:	d010      	beq.n	80205f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80205d6:	2300      	movs	r3, #0
 80205d8:	623b      	str	r3, [r7, #32]
 80205da:	e00d      	b.n	80205f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80205dc:	68fb      	ldr	r3, [r7, #12]
 80205de:	685b      	ldr	r3, [r3, #4]
 80205e0:	2b00      	cmp	r3, #0
 80205e2:	d006      	beq.n	80205f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80205e4:	4b38      	ldr	r3, [pc, #224]	; (80206c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80205e6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80205ea:	493a      	ldr	r1, [pc, #232]	; (80206d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80205ec:	4838      	ldr	r0, [pc, #224]	; (80206d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80205ee:	f002 f8df 	bl	80227b0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80205f2:	68fb      	ldr	r3, [r7, #12]
 80205f4:	68ba      	ldr	r2, [r7, #8]
 80205f6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80205f8:	687b      	ldr	r3, [r7, #4]
 80205fa:	2b00      	cmp	r3, #0
 80205fc:	d105      	bne.n	802060a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80205fe:	68fb      	ldr	r3, [r7, #12]
 8020600:	7f9b      	ldrb	r3, [r3, #30]
 8020602:	f003 0301 	and.w	r3, r3, #1
 8020606:	2b00      	cmp	r3, #0
 8020608:	d059      	beq.n	80206be <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 802060a:	6a3b      	ldr	r3, [r7, #32]
 802060c:	2b00      	cmp	r3, #0
 802060e:	d04f      	beq.n	80206b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8020610:	68fb      	ldr	r3, [r7, #12]
 8020612:	685b      	ldr	r3, [r3, #4]
 8020614:	2b00      	cmp	r3, #0
 8020616:	d006      	beq.n	8020626 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8020618:	68fb      	ldr	r3, [r7, #12]
 802061a:	685b      	ldr	r3, [r3, #4]
 802061c:	685b      	ldr	r3, [r3, #4]
 802061e:	889b      	ldrh	r3, [r3, #4]
 8020620:	b29b      	uxth	r3, r3
 8020622:	2b00      	cmp	r3, #0
 8020624:	d002      	beq.n	802062c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8020626:	2300      	movs	r3, #0
 8020628:	623b      	str	r3, [r7, #32]
 802062a:	e041      	b.n	80206b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 802062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802062e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8020630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020632:	681b      	ldr	r3, [r3, #0]
 8020634:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8020636:	e012      	b.n	802065e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8020638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802063a:	685b      	ldr	r3, [r3, #4]
 802063c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 802063e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020640:	88db      	ldrh	r3, [r3, #6]
 8020642:	b29a      	uxth	r2, r3
 8020644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020646:	889b      	ldrh	r3, [r3, #4]
 8020648:	b29b      	uxth	r3, r3
 802064a:	429a      	cmp	r2, r3
 802064c:	d002      	beq.n	8020654 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 802064e:	2300      	movs	r3, #0
 8020650:	623b      	str	r3, [r7, #32]
            break;
 8020652:	e007      	b.n	8020664 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8020654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020656:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8020658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802065a:	681b      	ldr	r3, [r3, #0]
 802065c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020660:	2b00      	cmp	r3, #0
 8020662:	d1e9      	bne.n	8020638 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8020664:	6a3b      	ldr	r3, [r7, #32]
 8020666:	2b00      	cmp	r3, #0
 8020668:	d022      	beq.n	80206b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 802066a:	68fb      	ldr	r3, [r7, #12]
 802066c:	685b      	ldr	r3, [r3, #4]
 802066e:	2b00      	cmp	r3, #0
 8020670:	d106      	bne.n	8020680 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8020672:	4b15      	ldr	r3, [pc, #84]	; (80206c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020674:	f240 12df 	movw	r2, #479	; 0x1df
 8020678:	4917      	ldr	r1, [pc, #92]	; (80206d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 802067a:	4815      	ldr	r0, [pc, #84]	; (80206d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802067c:	f002 f898 	bl	80227b0 <iprintf>
          LWIP_ASSERT("sanity check",
 8020680:	68fb      	ldr	r3, [r7, #12]
 8020682:	685b      	ldr	r3, [r3, #4]
 8020684:	685b      	ldr	r3, [r3, #4]
 8020686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020688:	429a      	cmp	r2, r3
 802068a:	d106      	bne.n	802069a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 802068c:	4b0e      	ldr	r3, [pc, #56]	; (80206c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802068e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8020692:	4911      	ldr	r1, [pc, #68]	; (80206d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8020694:	480e      	ldr	r0, [pc, #56]	; (80206d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8020696:	f002 f88b 	bl	80227b0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 802069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802069c:	681b      	ldr	r3, [r3, #0]
 802069e:	2b00      	cmp	r3, #0
 80206a0:	d006      	beq.n	80206b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80206a2:	4b09      	ldr	r3, [pc, #36]	; (80206c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80206a4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80206a8:	490c      	ldr	r1, [pc, #48]	; (80206dc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80206aa:	4809      	ldr	r0, [pc, #36]	; (80206d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80206ac:	f002 f880 	bl	80227b0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80206b0:	6a3b      	ldr	r3, [r7, #32]
 80206b2:	2b00      	cmp	r3, #0
 80206b4:	bf14      	ite	ne
 80206b6:	2301      	movne	r3, #1
 80206b8:	2300      	moveq	r3, #0
 80206ba:	b2db      	uxtb	r3, r3
 80206bc:	e000      	b.n	80206c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80206be:	2300      	movs	r3, #0
}
 80206c0:	4618      	mov	r0, r3
 80206c2:	3730      	adds	r7, #48	; 0x30
 80206c4:	46bd      	mov	sp, r7
 80206c6:	bd80      	pop	{r7, pc}
 80206c8:	08026f54 	.word	0x08026f54
 80206cc:	08027038 	.word	0x08027038
 80206d0:	08026f9c 	.word	0x08026f9c
 80206d4:	08027058 	.word	0x08027058
 80206d8:	08027090 	.word	0x08027090
 80206dc:	080270a0 	.word	0x080270a0

080206e0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80206e0:	b580      	push	{r7, lr}
 80206e2:	b08e      	sub	sp, #56	; 0x38
 80206e4:	af00      	add	r7, sp, #0
 80206e6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80206e8:	687b      	ldr	r3, [r7, #4]
 80206ea:	685b      	ldr	r3, [r3, #4]
 80206ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80206ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206f0:	781b      	ldrb	r3, [r3, #0]
 80206f2:	f003 030f 	and.w	r3, r3, #15
 80206f6:	b2db      	uxtb	r3, r3
 80206f8:	009b      	lsls	r3, r3, #2
 80206fa:	b2db      	uxtb	r3, r3
 80206fc:	2b14      	cmp	r3, #20
 80206fe:	f040 8171 	bne.w	80209e4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8020702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020704:	88db      	ldrh	r3, [r3, #6]
 8020706:	b29b      	uxth	r3, r3
 8020708:	4618      	mov	r0, r3
 802070a:	f7f5 fa27 	bl	8015b5c <lwip_htons>
 802070e:	4603      	mov	r3, r0
 8020710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020714:	b29b      	uxth	r3, r3
 8020716:	00db      	lsls	r3, r3, #3
 8020718:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802071a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802071c:	885b      	ldrh	r3, [r3, #2]
 802071e:	b29b      	uxth	r3, r3
 8020720:	4618      	mov	r0, r3
 8020722:	f7f5 fa1b 	bl	8015b5c <lwip_htons>
 8020726:	4603      	mov	r3, r0
 8020728:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 802072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802072c:	781b      	ldrb	r3, [r3, #0]
 802072e:	f003 030f 	and.w	r3, r3, #15
 8020732:	b2db      	uxtb	r3, r3
 8020734:	009b      	lsls	r3, r3, #2
 8020736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 802073a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802073e:	b29b      	uxth	r3, r3
 8020740:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8020742:	429a      	cmp	r2, r3
 8020744:	f0c0 8150 	bcc.w	80209e8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8020748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802074c:	b29b      	uxth	r3, r3
 802074e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8020750:	1ad3      	subs	r3, r2, r3
 8020752:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8020754:	6878      	ldr	r0, [r7, #4]
 8020756:	f7f6 fe81 	bl	801745c <pbuf_clen>
 802075a:	4603      	mov	r3, r0
 802075c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802075e:	4b8c      	ldr	r3, [pc, #560]	; (8020990 <ip4_reass+0x2b0>)
 8020760:	881b      	ldrh	r3, [r3, #0]
 8020762:	461a      	mov	r2, r3
 8020764:	8c3b      	ldrh	r3, [r7, #32]
 8020766:	4413      	add	r3, r2
 8020768:	2b0a      	cmp	r3, #10
 802076a:	dd10      	ble.n	802078e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802076c:	8c3b      	ldrh	r3, [r7, #32]
 802076e:	4619      	mov	r1, r3
 8020770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020772:	f7ff fd81 	bl	8020278 <ip_reass_remove_oldest_datagram>
 8020776:	4603      	mov	r3, r0
 8020778:	2b00      	cmp	r3, #0
 802077a:	f000 8137 	beq.w	80209ec <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802077e:	4b84      	ldr	r3, [pc, #528]	; (8020990 <ip4_reass+0x2b0>)
 8020780:	881b      	ldrh	r3, [r3, #0]
 8020782:	461a      	mov	r2, r3
 8020784:	8c3b      	ldrh	r3, [r7, #32]
 8020786:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8020788:	2b0a      	cmp	r3, #10
 802078a:	f300 812f 	bgt.w	80209ec <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 802078e:	4b81      	ldr	r3, [pc, #516]	; (8020994 <ip4_reass+0x2b4>)
 8020790:	681b      	ldr	r3, [r3, #0]
 8020792:	633b      	str	r3, [r7, #48]	; 0x30
 8020794:	e015      	b.n	80207c2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8020796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020798:	695a      	ldr	r2, [r3, #20]
 802079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802079c:	68db      	ldr	r3, [r3, #12]
 802079e:	429a      	cmp	r2, r3
 80207a0:	d10c      	bne.n	80207bc <ip4_reass+0xdc>
 80207a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207a4:	699a      	ldr	r2, [r3, #24]
 80207a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207a8:	691b      	ldr	r3, [r3, #16]
 80207aa:	429a      	cmp	r2, r3
 80207ac:	d106      	bne.n	80207bc <ip4_reass+0xdc>
 80207ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207b0:	899a      	ldrh	r2, [r3, #12]
 80207b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207b4:	889b      	ldrh	r3, [r3, #4]
 80207b6:	b29b      	uxth	r3, r3
 80207b8:	429a      	cmp	r2, r3
 80207ba:	d006      	beq.n	80207ca <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80207bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207be:	681b      	ldr	r3, [r3, #0]
 80207c0:	633b      	str	r3, [r7, #48]	; 0x30
 80207c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207c4:	2b00      	cmp	r3, #0
 80207c6:	d1e6      	bne.n	8020796 <ip4_reass+0xb6>
 80207c8:	e000      	b.n	80207cc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80207ca:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80207cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207ce:	2b00      	cmp	r3, #0
 80207d0:	d109      	bne.n	80207e6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80207d2:	8c3b      	ldrh	r3, [r7, #32]
 80207d4:	4619      	mov	r1, r3
 80207d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80207d8:	f7ff fdb0 	bl	802033c <ip_reass_enqueue_new_datagram>
 80207dc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80207de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	d11c      	bne.n	802081e <ip4_reass+0x13e>
      goto nullreturn;
 80207e4:	e105      	b.n	80209f2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80207e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207e8:	88db      	ldrh	r3, [r3, #6]
 80207ea:	b29b      	uxth	r3, r3
 80207ec:	4618      	mov	r0, r3
 80207ee:	f7f5 f9b5 	bl	8015b5c <lwip_htons>
 80207f2:	4603      	mov	r3, r0
 80207f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80207f8:	2b00      	cmp	r3, #0
 80207fa:	d110      	bne.n	802081e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80207fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207fe:	89db      	ldrh	r3, [r3, #14]
 8020800:	4618      	mov	r0, r3
 8020802:	f7f5 f9ab 	bl	8015b5c <lwip_htons>
 8020806:	4603      	mov	r3, r0
 8020808:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802080c:	2b00      	cmp	r3, #0
 802080e:	d006      	beq.n	802081e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8020810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020812:	3308      	adds	r3, #8
 8020814:	2214      	movs	r2, #20
 8020816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020818:	4618      	mov	r0, r3
 802081a:	f001 feb9 	bl	8022590 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802081e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020820:	88db      	ldrh	r3, [r3, #6]
 8020822:	b29b      	uxth	r3, r3
 8020824:	f003 0320 	and.w	r3, r3, #32
 8020828:	2b00      	cmp	r3, #0
 802082a:	bf0c      	ite	eq
 802082c:	2301      	moveq	r3, #1
 802082e:	2300      	movne	r3, #0
 8020830:	b2db      	uxtb	r3, r3
 8020832:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8020834:	69fb      	ldr	r3, [r7, #28]
 8020836:	2b00      	cmp	r3, #0
 8020838:	d00e      	beq.n	8020858 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 802083a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802083c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802083e:	4413      	add	r3, r2
 8020840:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8020842:	8b7a      	ldrh	r2, [r7, #26]
 8020844:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020846:	429a      	cmp	r2, r3
 8020848:	f0c0 80a0 	bcc.w	802098c <ip4_reass+0x2ac>
 802084c:	8b7b      	ldrh	r3, [r7, #26]
 802084e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8020852:	4293      	cmp	r3, r2
 8020854:	f200 809a 	bhi.w	802098c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8020858:	69fa      	ldr	r2, [r7, #28]
 802085a:	6879      	ldr	r1, [r7, #4]
 802085c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802085e:	f7ff fdd5 	bl	802040c <ip_reass_chain_frag_into_datagram_and_validate>
 8020862:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8020864:	697b      	ldr	r3, [r7, #20]
 8020866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802086a:	f000 809b 	beq.w	80209a4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802086e:	4b48      	ldr	r3, [pc, #288]	; (8020990 <ip4_reass+0x2b0>)
 8020870:	881a      	ldrh	r2, [r3, #0]
 8020872:	8c3b      	ldrh	r3, [r7, #32]
 8020874:	4413      	add	r3, r2
 8020876:	b29a      	uxth	r2, r3
 8020878:	4b45      	ldr	r3, [pc, #276]	; (8020990 <ip4_reass+0x2b0>)
 802087a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 802087c:	69fb      	ldr	r3, [r7, #28]
 802087e:	2b00      	cmp	r3, #0
 8020880:	d00d      	beq.n	802089e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8020882:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8020884:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020886:	4413      	add	r3, r2
 8020888:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 802088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802088c:	8a7a      	ldrh	r2, [r7, #18]
 802088e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8020890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020892:	7f9b      	ldrb	r3, [r3, #30]
 8020894:	f043 0301 	orr.w	r3, r3, #1
 8020898:	b2da      	uxtb	r2, r3
 802089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802089c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802089e:	697b      	ldr	r3, [r7, #20]
 80208a0:	2b01      	cmp	r3, #1
 80208a2:	d171      	bne.n	8020988 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80208a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208a6:	8b9b      	ldrh	r3, [r3, #28]
 80208a8:	3314      	adds	r3, #20
 80208aa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80208ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208ae:	685b      	ldr	r3, [r3, #4]
 80208b0:	685b      	ldr	r3, [r3, #4]
 80208b2:	681b      	ldr	r3, [r3, #0]
 80208b4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80208b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208b8:	685b      	ldr	r3, [r3, #4]
 80208ba:	685b      	ldr	r3, [r3, #4]
 80208bc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80208be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208c0:	3308      	adds	r3, #8
 80208c2:	2214      	movs	r2, #20
 80208c4:	4619      	mov	r1, r3
 80208c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80208c8:	f001 fe62 	bl	8022590 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80208cc:	8a3b      	ldrh	r3, [r7, #16]
 80208ce:	4618      	mov	r0, r3
 80208d0:	f7f5 f944 	bl	8015b5c <lwip_htons>
 80208d4:	4603      	mov	r3, r0
 80208d6:	461a      	mov	r2, r3
 80208d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208da:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80208dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208de:	2200      	movs	r2, #0
 80208e0:	719a      	strb	r2, [r3, #6]
 80208e2:	2200      	movs	r2, #0
 80208e4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80208e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208e8:	2200      	movs	r2, #0
 80208ea:	729a      	strb	r2, [r3, #10]
 80208ec:	2200      	movs	r2, #0
 80208ee:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80208f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80208f2:	685b      	ldr	r3, [r3, #4]
 80208f4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80208f6:	e00d      	b.n	8020914 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80208f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80208fa:	685b      	ldr	r3, [r3, #4]
 80208fc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80208fe:	2114      	movs	r1, #20
 8020900:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8020902:	f7f6 fc97 	bl	8017234 <pbuf_remove_header>
      pbuf_cat(p, r);
 8020906:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8020908:	6878      	ldr	r0, [r7, #4]
 802090a:	f7f6 fde7 	bl	80174dc <pbuf_cat>
      r = iprh->next_pbuf;
 802090e:	68fb      	ldr	r3, [r7, #12]
 8020910:	681b      	ldr	r3, [r3, #0]
 8020912:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8020914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020916:	2b00      	cmp	r3, #0
 8020918:	d1ee      	bne.n	80208f8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802091a:	4b1e      	ldr	r3, [pc, #120]	; (8020994 <ip4_reass+0x2b4>)
 802091c:	681b      	ldr	r3, [r3, #0]
 802091e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020920:	429a      	cmp	r2, r3
 8020922:	d102      	bne.n	802092a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8020924:	2300      	movs	r3, #0
 8020926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020928:	e010      	b.n	802094c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802092a:	4b1a      	ldr	r3, [pc, #104]	; (8020994 <ip4_reass+0x2b4>)
 802092c:	681b      	ldr	r3, [r3, #0]
 802092e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020930:	e007      	b.n	8020942 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8020932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020934:	681b      	ldr	r3, [r3, #0]
 8020936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020938:	429a      	cmp	r2, r3
 802093a:	d006      	beq.n	802094a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802093e:	681b      	ldr	r3, [r3, #0]
 8020940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020944:	2b00      	cmp	r3, #0
 8020946:	d1f4      	bne.n	8020932 <ip4_reass+0x252>
 8020948:	e000      	b.n	802094c <ip4_reass+0x26c>
          break;
 802094a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 802094c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802094e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020950:	f7ff fd2e 	bl	80203b0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8020954:	6878      	ldr	r0, [r7, #4]
 8020956:	f7f6 fd81 	bl	801745c <pbuf_clen>
 802095a:	4603      	mov	r3, r0
 802095c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802095e:	4b0c      	ldr	r3, [pc, #48]	; (8020990 <ip4_reass+0x2b0>)
 8020960:	881b      	ldrh	r3, [r3, #0]
 8020962:	8c3a      	ldrh	r2, [r7, #32]
 8020964:	429a      	cmp	r2, r3
 8020966:	d906      	bls.n	8020976 <ip4_reass+0x296>
 8020968:	4b0b      	ldr	r3, [pc, #44]	; (8020998 <ip4_reass+0x2b8>)
 802096a:	f240 229b 	movw	r2, #667	; 0x29b
 802096e:	490b      	ldr	r1, [pc, #44]	; (802099c <ip4_reass+0x2bc>)
 8020970:	480b      	ldr	r0, [pc, #44]	; (80209a0 <ip4_reass+0x2c0>)
 8020972:	f001 ff1d 	bl	80227b0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8020976:	4b06      	ldr	r3, [pc, #24]	; (8020990 <ip4_reass+0x2b0>)
 8020978:	881a      	ldrh	r2, [r3, #0]
 802097a:	8c3b      	ldrh	r3, [r7, #32]
 802097c:	1ad3      	subs	r3, r2, r3
 802097e:	b29a      	uxth	r2, r3
 8020980:	4b03      	ldr	r3, [pc, #12]	; (8020990 <ip4_reass+0x2b0>)
 8020982:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8020984:	687b      	ldr	r3, [r7, #4]
 8020986:	e038      	b.n	80209fa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8020988:	2300      	movs	r3, #0
 802098a:	e036      	b.n	80209fa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 802098c:	bf00      	nop
 802098e:	e00a      	b.n	80209a6 <ip4_reass+0x2c6>
 8020990:	2000c10c 	.word	0x2000c10c
 8020994:	2000c108 	.word	0x2000c108
 8020998:	08026f54 	.word	0x08026f54
 802099c:	080270c4 	.word	0x080270c4
 80209a0:	08026f9c 	.word	0x08026f9c
    goto nullreturn_ipr;
 80209a4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80209a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	d106      	bne.n	80209ba <ip4_reass+0x2da>
 80209ac:	4b15      	ldr	r3, [pc, #84]	; (8020a04 <ip4_reass+0x324>)
 80209ae:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80209b2:	4915      	ldr	r1, [pc, #84]	; (8020a08 <ip4_reass+0x328>)
 80209b4:	4815      	ldr	r0, [pc, #84]	; (8020a0c <ip4_reass+0x32c>)
 80209b6:	f001 fefb 	bl	80227b0 <iprintf>
  if (ipr->p == NULL) {
 80209ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80209bc:	685b      	ldr	r3, [r3, #4]
 80209be:	2b00      	cmp	r3, #0
 80209c0:	d116      	bne.n	80209f0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80209c2:	4b13      	ldr	r3, [pc, #76]	; (8020a10 <ip4_reass+0x330>)
 80209c4:	681b      	ldr	r3, [r3, #0]
 80209c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80209c8:	429a      	cmp	r2, r3
 80209ca:	d006      	beq.n	80209da <ip4_reass+0x2fa>
 80209cc:	4b0d      	ldr	r3, [pc, #52]	; (8020a04 <ip4_reass+0x324>)
 80209ce:	f240 22ab 	movw	r2, #683	; 0x2ab
 80209d2:	4910      	ldr	r1, [pc, #64]	; (8020a14 <ip4_reass+0x334>)
 80209d4:	480d      	ldr	r0, [pc, #52]	; (8020a0c <ip4_reass+0x32c>)
 80209d6:	f001 feeb 	bl	80227b0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80209da:	2100      	movs	r1, #0
 80209dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80209de:	f7ff fce7 	bl	80203b0 <ip_reass_dequeue_datagram>
 80209e2:	e006      	b.n	80209f2 <ip4_reass+0x312>
    goto nullreturn;
 80209e4:	bf00      	nop
 80209e6:	e004      	b.n	80209f2 <ip4_reass+0x312>
    goto nullreturn;
 80209e8:	bf00      	nop
 80209ea:	e002      	b.n	80209f2 <ip4_reass+0x312>
      goto nullreturn;
 80209ec:	bf00      	nop
 80209ee:	e000      	b.n	80209f2 <ip4_reass+0x312>
  }

nullreturn:
 80209f0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80209f2:	6878      	ldr	r0, [r7, #4]
 80209f4:	f7f6 fca4 	bl	8017340 <pbuf_free>
  return NULL;
 80209f8:	2300      	movs	r3, #0
}
 80209fa:	4618      	mov	r0, r3
 80209fc:	3738      	adds	r7, #56	; 0x38
 80209fe:	46bd      	mov	sp, r7
 8020a00:	bd80      	pop	{r7, pc}
 8020a02:	bf00      	nop
 8020a04:	08026f54 	.word	0x08026f54
 8020a08:	080270e0 	.word	0x080270e0
 8020a0c:	08026f9c 	.word	0x08026f9c
 8020a10:	2000c108 	.word	0x2000c108
 8020a14:	080270ec 	.word	0x080270ec

08020a18 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8020a18:	b580      	push	{r7, lr}
 8020a1a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8020a1c:	2005      	movs	r0, #5
 8020a1e:	f7f5 fd75 	bl	801650c <memp_malloc>
 8020a22:	4603      	mov	r3, r0
}
 8020a24:	4618      	mov	r0, r3
 8020a26:	bd80      	pop	{r7, pc}

08020a28 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8020a28:	b580      	push	{r7, lr}
 8020a2a:	b082      	sub	sp, #8
 8020a2c:	af00      	add	r7, sp, #0
 8020a2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8020a30:	687b      	ldr	r3, [r7, #4]
 8020a32:	2b00      	cmp	r3, #0
 8020a34:	d106      	bne.n	8020a44 <ip_frag_free_pbuf_custom_ref+0x1c>
 8020a36:	4b07      	ldr	r3, [pc, #28]	; (8020a54 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8020a38:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8020a3c:	4906      	ldr	r1, [pc, #24]	; (8020a58 <ip_frag_free_pbuf_custom_ref+0x30>)
 8020a3e:	4807      	ldr	r0, [pc, #28]	; (8020a5c <ip_frag_free_pbuf_custom_ref+0x34>)
 8020a40:	f001 feb6 	bl	80227b0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8020a44:	6879      	ldr	r1, [r7, #4]
 8020a46:	2005      	movs	r0, #5
 8020a48:	f7f5 fdd6 	bl	80165f8 <memp_free>
}
 8020a4c:	bf00      	nop
 8020a4e:	3708      	adds	r7, #8
 8020a50:	46bd      	mov	sp, r7
 8020a52:	bd80      	pop	{r7, pc}
 8020a54:	08026f54 	.word	0x08026f54
 8020a58:	0802710c 	.word	0x0802710c
 8020a5c:	08026f9c 	.word	0x08026f9c

08020a60 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8020a60:	b580      	push	{r7, lr}
 8020a62:	b084      	sub	sp, #16
 8020a64:	af00      	add	r7, sp, #0
 8020a66:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8020a68:	687b      	ldr	r3, [r7, #4]
 8020a6a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8020a6c:	68fb      	ldr	r3, [r7, #12]
 8020a6e:	2b00      	cmp	r3, #0
 8020a70:	d106      	bne.n	8020a80 <ipfrag_free_pbuf_custom+0x20>
 8020a72:	4b11      	ldr	r3, [pc, #68]	; (8020ab8 <ipfrag_free_pbuf_custom+0x58>)
 8020a74:	f240 22ce 	movw	r2, #718	; 0x2ce
 8020a78:	4910      	ldr	r1, [pc, #64]	; (8020abc <ipfrag_free_pbuf_custom+0x5c>)
 8020a7a:	4811      	ldr	r0, [pc, #68]	; (8020ac0 <ipfrag_free_pbuf_custom+0x60>)
 8020a7c:	f001 fe98 	bl	80227b0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8020a80:	68fa      	ldr	r2, [r7, #12]
 8020a82:	687b      	ldr	r3, [r7, #4]
 8020a84:	429a      	cmp	r2, r3
 8020a86:	d006      	beq.n	8020a96 <ipfrag_free_pbuf_custom+0x36>
 8020a88:	4b0b      	ldr	r3, [pc, #44]	; (8020ab8 <ipfrag_free_pbuf_custom+0x58>)
 8020a8a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8020a8e:	490d      	ldr	r1, [pc, #52]	; (8020ac4 <ipfrag_free_pbuf_custom+0x64>)
 8020a90:	480b      	ldr	r0, [pc, #44]	; (8020ac0 <ipfrag_free_pbuf_custom+0x60>)
 8020a92:	f001 fe8d 	bl	80227b0 <iprintf>
  if (pcr->original != NULL) {
 8020a96:	68fb      	ldr	r3, [r7, #12]
 8020a98:	695b      	ldr	r3, [r3, #20]
 8020a9a:	2b00      	cmp	r3, #0
 8020a9c:	d004      	beq.n	8020aa8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8020a9e:	68fb      	ldr	r3, [r7, #12]
 8020aa0:	695b      	ldr	r3, [r3, #20]
 8020aa2:	4618      	mov	r0, r3
 8020aa4:	f7f6 fc4c 	bl	8017340 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8020aa8:	68f8      	ldr	r0, [r7, #12]
 8020aaa:	f7ff ffbd 	bl	8020a28 <ip_frag_free_pbuf_custom_ref>
}
 8020aae:	bf00      	nop
 8020ab0:	3710      	adds	r7, #16
 8020ab2:	46bd      	mov	sp, r7
 8020ab4:	bd80      	pop	{r7, pc}
 8020ab6:	bf00      	nop
 8020ab8:	08026f54 	.word	0x08026f54
 8020abc:	08027118 	.word	0x08027118
 8020ac0:	08026f9c 	.word	0x08026f9c
 8020ac4:	08027124 	.word	0x08027124

08020ac8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8020ac8:	b580      	push	{r7, lr}
 8020aca:	b094      	sub	sp, #80	; 0x50
 8020acc:	af02      	add	r7, sp, #8
 8020ace:	60f8      	str	r0, [r7, #12]
 8020ad0:	60b9      	str	r1, [r7, #8]
 8020ad2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8020ad4:	2300      	movs	r3, #0
 8020ad6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8020ada:	68bb      	ldr	r3, [r7, #8]
 8020adc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8020ade:	3b14      	subs	r3, #20
 8020ae0:	2b00      	cmp	r3, #0
 8020ae2:	da00      	bge.n	8020ae6 <ip4_frag+0x1e>
 8020ae4:	3307      	adds	r3, #7
 8020ae6:	10db      	asrs	r3, r3, #3
 8020ae8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8020aea:	2314      	movs	r3, #20
 8020aec:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8020aee:	68fb      	ldr	r3, [r7, #12]
 8020af0:	685b      	ldr	r3, [r3, #4]
 8020af2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8020af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020af6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8020af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020afa:	781b      	ldrb	r3, [r3, #0]
 8020afc:	f003 030f 	and.w	r3, r3, #15
 8020b00:	b2db      	uxtb	r3, r3
 8020b02:	009b      	lsls	r3, r3, #2
 8020b04:	b2db      	uxtb	r3, r3
 8020b06:	2b14      	cmp	r3, #20
 8020b08:	d002      	beq.n	8020b10 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8020b0a:	f06f 0305 	mvn.w	r3, #5
 8020b0e:	e110      	b.n	8020d32 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8020b10:	68fb      	ldr	r3, [r7, #12]
 8020b12:	895b      	ldrh	r3, [r3, #10]
 8020b14:	2b13      	cmp	r3, #19
 8020b16:	d809      	bhi.n	8020b2c <ip4_frag+0x64>
 8020b18:	4b88      	ldr	r3, [pc, #544]	; (8020d3c <ip4_frag+0x274>)
 8020b1a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8020b1e:	4988      	ldr	r1, [pc, #544]	; (8020d40 <ip4_frag+0x278>)
 8020b20:	4888      	ldr	r0, [pc, #544]	; (8020d44 <ip4_frag+0x27c>)
 8020b22:	f001 fe45 	bl	80227b0 <iprintf>
 8020b26:	f06f 0305 	mvn.w	r3, #5
 8020b2a:	e102      	b.n	8020d32 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8020b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b2e:	88db      	ldrh	r3, [r3, #6]
 8020b30:	b29b      	uxth	r3, r3
 8020b32:	4618      	mov	r0, r3
 8020b34:	f7f5 f812 	bl	8015b5c <lwip_htons>
 8020b38:	4603      	mov	r3, r0
 8020b3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8020b3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020b3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020b42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8020b46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8020b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8020b4e:	68fb      	ldr	r3, [r7, #12]
 8020b50:	891b      	ldrh	r3, [r3, #8]
 8020b52:	3b14      	subs	r3, #20
 8020b54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8020b58:	e0e1      	b.n	8020d1e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8020b5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020b5c:	00db      	lsls	r3, r3, #3
 8020b5e:	b29b      	uxth	r3, r3
 8020b60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020b64:	4293      	cmp	r3, r2
 8020b66:	bf28      	it	cs
 8020b68:	4613      	movcs	r3, r2
 8020b6a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8020b6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020b70:	2114      	movs	r1, #20
 8020b72:	200e      	movs	r0, #14
 8020b74:	f7f6 f900 	bl	8016d78 <pbuf_alloc>
 8020b78:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8020b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b7c:	2b00      	cmp	r3, #0
 8020b7e:	f000 80d5 	beq.w	8020d2c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8020b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b84:	895b      	ldrh	r3, [r3, #10]
 8020b86:	2b13      	cmp	r3, #19
 8020b88:	d806      	bhi.n	8020b98 <ip4_frag+0xd0>
 8020b8a:	4b6c      	ldr	r3, [pc, #432]	; (8020d3c <ip4_frag+0x274>)
 8020b8c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8020b90:	496d      	ldr	r1, [pc, #436]	; (8020d48 <ip4_frag+0x280>)
 8020b92:	486c      	ldr	r0, [pc, #432]	; (8020d44 <ip4_frag+0x27c>)
 8020b94:	f001 fe0c 	bl	80227b0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8020b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b9a:	685b      	ldr	r3, [r3, #4]
 8020b9c:	2214      	movs	r2, #20
 8020b9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8020ba0:	4618      	mov	r0, r3
 8020ba2:	f001 fcf5 	bl	8022590 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8020ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ba8:	685b      	ldr	r3, [r3, #4]
 8020baa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8020bac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8020bae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8020bb2:	e064      	b.n	8020c7e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8020bb4:	68fb      	ldr	r3, [r7, #12]
 8020bb6:	895a      	ldrh	r2, [r3, #10]
 8020bb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8020bba:	1ad3      	subs	r3, r2, r3
 8020bbc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8020bbe:	68fb      	ldr	r3, [r7, #12]
 8020bc0:	895b      	ldrh	r3, [r3, #10]
 8020bc2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8020bc4:	429a      	cmp	r2, r3
 8020bc6:	d906      	bls.n	8020bd6 <ip4_frag+0x10e>
 8020bc8:	4b5c      	ldr	r3, [pc, #368]	; (8020d3c <ip4_frag+0x274>)
 8020bca:	f240 322d 	movw	r2, #813	; 0x32d
 8020bce:	495f      	ldr	r1, [pc, #380]	; (8020d4c <ip4_frag+0x284>)
 8020bd0:	485c      	ldr	r0, [pc, #368]	; (8020d44 <ip4_frag+0x27c>)
 8020bd2:	f001 fded 	bl	80227b0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8020bd6:	8bfa      	ldrh	r2, [r7, #30]
 8020bd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8020bdc:	4293      	cmp	r3, r2
 8020bde:	bf28      	it	cs
 8020be0:	4613      	movcs	r3, r2
 8020be2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8020be6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8020bea:	2b00      	cmp	r3, #0
 8020bec:	d105      	bne.n	8020bfa <ip4_frag+0x132>
        poff = 0;
 8020bee:	2300      	movs	r3, #0
 8020bf0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8020bf2:	68fb      	ldr	r3, [r7, #12]
 8020bf4:	681b      	ldr	r3, [r3, #0]
 8020bf6:	60fb      	str	r3, [r7, #12]
        continue;
 8020bf8:	e041      	b.n	8020c7e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8020bfa:	f7ff ff0d 	bl	8020a18 <ip_frag_alloc_pbuf_custom_ref>
 8020bfe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8020c00:	69bb      	ldr	r3, [r7, #24]
 8020c02:	2b00      	cmp	r3, #0
 8020c04:	d103      	bne.n	8020c0e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8020c06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020c08:	f7f6 fb9a 	bl	8017340 <pbuf_free>
        goto memerr;
 8020c0c:	e08f      	b.n	8020d2e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8020c0e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8020c10:	68fb      	ldr	r3, [r7, #12]
 8020c12:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8020c14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8020c16:	4413      	add	r3, r2
 8020c18:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8020c1c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8020c20:	9201      	str	r2, [sp, #4]
 8020c22:	9300      	str	r3, [sp, #0]
 8020c24:	4603      	mov	r3, r0
 8020c26:	2241      	movs	r2, #65	; 0x41
 8020c28:	2000      	movs	r0, #0
 8020c2a:	f7f6 f9cf 	bl	8016fcc <pbuf_alloced_custom>
 8020c2e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8020c30:	697b      	ldr	r3, [r7, #20]
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	d106      	bne.n	8020c44 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8020c36:	69b8      	ldr	r0, [r7, #24]
 8020c38:	f7ff fef6 	bl	8020a28 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8020c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020c3e:	f7f6 fb7f 	bl	8017340 <pbuf_free>
        goto memerr;
 8020c42:	e074      	b.n	8020d2e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8020c44:	68f8      	ldr	r0, [r7, #12]
 8020c46:	f7f6 fc21 	bl	801748c <pbuf_ref>
      pcr->original = p;
 8020c4a:	69bb      	ldr	r3, [r7, #24]
 8020c4c:	68fa      	ldr	r2, [r7, #12]
 8020c4e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8020c50:	69bb      	ldr	r3, [r7, #24]
 8020c52:	4a3f      	ldr	r2, [pc, #252]	; (8020d50 <ip4_frag+0x288>)
 8020c54:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8020c56:	6979      	ldr	r1, [r7, #20]
 8020c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020c5a:	f7f6 fc3f 	bl	80174dc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8020c5e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8020c62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8020c66:	1ad3      	subs	r3, r2, r3
 8020c68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8020c6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8020c70:	2b00      	cmp	r3, #0
 8020c72:	d004      	beq.n	8020c7e <ip4_frag+0x1b6>
        poff = 0;
 8020c74:	2300      	movs	r3, #0
 8020c76:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8020c78:	68fb      	ldr	r3, [r7, #12]
 8020c7a:	681b      	ldr	r3, [r3, #0]
 8020c7c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8020c7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	d196      	bne.n	8020bb4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8020c86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8020c88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8020c8c:	4413      	add	r3, r2
 8020c8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8020c90:	68bb      	ldr	r3, [r7, #8]
 8020c92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8020c94:	f1a3 0213 	sub.w	r2, r3, #19
 8020c98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020c9c:	429a      	cmp	r2, r3
 8020c9e:	bfcc      	ite	gt
 8020ca0:	2301      	movgt	r3, #1
 8020ca2:	2300      	movle	r3, #0
 8020ca4:	b2db      	uxtb	r3, r3
 8020ca6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8020ca8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8020cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020cb0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8020cb2:	6a3b      	ldr	r3, [r7, #32]
 8020cb4:	2b00      	cmp	r3, #0
 8020cb6:	d002      	beq.n	8020cbe <ip4_frag+0x1f6>
 8020cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020cba:	2b00      	cmp	r3, #0
 8020cbc:	d003      	beq.n	8020cc6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8020cbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020cc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8020cc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8020cc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020cc8:	4618      	mov	r0, r3
 8020cca:	f7f4 ff47 	bl	8015b5c <lwip_htons>
 8020cce:	4603      	mov	r3, r0
 8020cd0:	461a      	mov	r2, r3
 8020cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020cd4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8020cd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8020cd8:	3314      	adds	r3, #20
 8020cda:	b29b      	uxth	r3, r3
 8020cdc:	4618      	mov	r0, r3
 8020cde:	f7f4 ff3d 	bl	8015b5c <lwip_htons>
 8020ce2:	4603      	mov	r3, r0
 8020ce4:	461a      	mov	r2, r3
 8020ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ce8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8020cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020cec:	2200      	movs	r2, #0
 8020cee:	729a      	strb	r2, [r3, #10]
 8020cf0:	2200      	movs	r2, #0
 8020cf2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8020cf4:	68bb      	ldr	r3, [r7, #8]
 8020cf6:	695b      	ldr	r3, [r3, #20]
 8020cf8:	687a      	ldr	r2, [r7, #4]
 8020cfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020cfc:	68b8      	ldr	r0, [r7, #8]
 8020cfe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8020d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020d02:	f7f6 fb1d 	bl	8017340 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8020d06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020d0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8020d0c:	1ad3      	subs	r3, r2, r3
 8020d0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8020d12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8020d16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020d18:	4413      	add	r3, r2
 8020d1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8020d1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	f47f af19 	bne.w	8020b5a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8020d28:	2300      	movs	r3, #0
 8020d2a:	e002      	b.n	8020d32 <ip4_frag+0x26a>
      goto memerr;
 8020d2c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8020d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8020d32:	4618      	mov	r0, r3
 8020d34:	3748      	adds	r7, #72	; 0x48
 8020d36:	46bd      	mov	sp, r7
 8020d38:	bd80      	pop	{r7, pc}
 8020d3a:	bf00      	nop
 8020d3c:	08026f54 	.word	0x08026f54
 8020d40:	08027130 	.word	0x08027130
 8020d44:	08026f9c 	.word	0x08026f9c
 8020d48:	0802714c 	.word	0x0802714c
 8020d4c:	0802716c 	.word	0x0802716c
 8020d50:	08020a61 	.word	0x08020a61

08020d54 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8020d54:	b580      	push	{r7, lr}
 8020d56:	b086      	sub	sp, #24
 8020d58:	af00      	add	r7, sp, #0
 8020d5a:	6078      	str	r0, [r7, #4]
 8020d5c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8020d5e:	230e      	movs	r3, #14
 8020d60:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8020d62:	687b      	ldr	r3, [r7, #4]
 8020d64:	895b      	ldrh	r3, [r3, #10]
 8020d66:	2b0e      	cmp	r3, #14
 8020d68:	d96e      	bls.n	8020e48 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8020d6a:	687b      	ldr	r3, [r7, #4]
 8020d6c:	7bdb      	ldrb	r3, [r3, #15]
 8020d6e:	2b00      	cmp	r3, #0
 8020d70:	d106      	bne.n	8020d80 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8020d72:	683b      	ldr	r3, [r7, #0]
 8020d74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8020d78:	3301      	adds	r3, #1
 8020d7a:	b2da      	uxtb	r2, r3
 8020d7c:	687b      	ldr	r3, [r7, #4]
 8020d7e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8020d80:	687b      	ldr	r3, [r7, #4]
 8020d82:	685b      	ldr	r3, [r3, #4]
 8020d84:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8020d86:	693b      	ldr	r3, [r7, #16]
 8020d88:	7b1a      	ldrb	r2, [r3, #12]
 8020d8a:	7b5b      	ldrb	r3, [r3, #13]
 8020d8c:	021b      	lsls	r3, r3, #8
 8020d8e:	4313      	orrs	r3, r2
 8020d90:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8020d92:	693b      	ldr	r3, [r7, #16]
 8020d94:	781b      	ldrb	r3, [r3, #0]
 8020d96:	f003 0301 	and.w	r3, r3, #1
 8020d9a:	2b00      	cmp	r3, #0
 8020d9c:	d023      	beq.n	8020de6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8020d9e:	693b      	ldr	r3, [r7, #16]
 8020da0:	781b      	ldrb	r3, [r3, #0]
 8020da2:	2b01      	cmp	r3, #1
 8020da4:	d10f      	bne.n	8020dc6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020da6:	693b      	ldr	r3, [r7, #16]
 8020da8:	785b      	ldrb	r3, [r3, #1]
 8020daa:	2b00      	cmp	r3, #0
 8020dac:	d11b      	bne.n	8020de6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8020dae:	693b      	ldr	r3, [r7, #16]
 8020db0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020db2:	2b5e      	cmp	r3, #94	; 0x5e
 8020db4:	d117      	bne.n	8020de6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8020db6:	687b      	ldr	r3, [r7, #4]
 8020db8:	7b5b      	ldrb	r3, [r3, #13]
 8020dba:	f043 0310 	orr.w	r3, r3, #16
 8020dbe:	b2da      	uxtb	r2, r3
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	735a      	strb	r2, [r3, #13]
 8020dc4:	e00f      	b.n	8020de6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8020dc6:	693b      	ldr	r3, [r7, #16]
 8020dc8:	2206      	movs	r2, #6
 8020dca:	4928      	ldr	r1, [pc, #160]	; (8020e6c <ethernet_input+0x118>)
 8020dcc:	4618      	mov	r0, r3
 8020dce:	f001 fbcf 	bl	8022570 <memcmp>
 8020dd2:	4603      	mov	r3, r0
 8020dd4:	2b00      	cmp	r3, #0
 8020dd6:	d106      	bne.n	8020de6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8020dd8:	687b      	ldr	r3, [r7, #4]
 8020dda:	7b5b      	ldrb	r3, [r3, #13]
 8020ddc:	f043 0308 	orr.w	r3, r3, #8
 8020de0:	b2da      	uxtb	r2, r3
 8020de2:	687b      	ldr	r3, [r7, #4]
 8020de4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8020de6:	89fb      	ldrh	r3, [r7, #14]
 8020de8:	2b08      	cmp	r3, #8
 8020dea:	d003      	beq.n	8020df4 <ethernet_input+0xa0>
 8020dec:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8020df0:	d014      	beq.n	8020e1c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8020df2:	e032      	b.n	8020e5a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020df4:	683b      	ldr	r3, [r7, #0]
 8020df6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8020dfa:	f003 0308 	and.w	r3, r3, #8
 8020dfe:	2b00      	cmp	r3, #0
 8020e00:	d024      	beq.n	8020e4c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8020e02:	8afb      	ldrh	r3, [r7, #22]
 8020e04:	4619      	mov	r1, r3
 8020e06:	6878      	ldr	r0, [r7, #4]
 8020e08:	f7f6 fa14 	bl	8017234 <pbuf_remove_header>
 8020e0c:	4603      	mov	r3, r0
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	d11e      	bne.n	8020e50 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8020e12:	6839      	ldr	r1, [r7, #0]
 8020e14:	6878      	ldr	r0, [r7, #4]
 8020e16:	f7fe ff21 	bl	801fc5c <ip4_input>
      break;
 8020e1a:	e013      	b.n	8020e44 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020e1c:	683b      	ldr	r3, [r7, #0]
 8020e1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8020e22:	f003 0308 	and.w	r3, r3, #8
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	d014      	beq.n	8020e54 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8020e2a:	8afb      	ldrh	r3, [r7, #22]
 8020e2c:	4619      	mov	r1, r3
 8020e2e:	6878      	ldr	r0, [r7, #4]
 8020e30:	f7f6 fa00 	bl	8017234 <pbuf_remove_header>
 8020e34:	4603      	mov	r3, r0
 8020e36:	2b00      	cmp	r3, #0
 8020e38:	d10e      	bne.n	8020e58 <ethernet_input+0x104>
        etharp_input(p, netif);
 8020e3a:	6839      	ldr	r1, [r7, #0]
 8020e3c:	6878      	ldr	r0, [r7, #4]
 8020e3e:	f7fe f8c1 	bl	801efc4 <etharp_input>
      break;
 8020e42:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8020e44:	2300      	movs	r3, #0
 8020e46:	e00c      	b.n	8020e62 <ethernet_input+0x10e>
    goto free_and_return;
 8020e48:	bf00      	nop
 8020e4a:	e006      	b.n	8020e5a <ethernet_input+0x106>
        goto free_and_return;
 8020e4c:	bf00      	nop
 8020e4e:	e004      	b.n	8020e5a <ethernet_input+0x106>
        goto free_and_return;
 8020e50:	bf00      	nop
 8020e52:	e002      	b.n	8020e5a <ethernet_input+0x106>
        goto free_and_return;
 8020e54:	bf00      	nop
 8020e56:	e000      	b.n	8020e5a <ethernet_input+0x106>
        goto free_and_return;
 8020e58:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8020e5a:	6878      	ldr	r0, [r7, #4]
 8020e5c:	f7f6 fa70 	bl	8017340 <pbuf_free>
  return ERR_OK;
 8020e60:	2300      	movs	r3, #0
}
 8020e62:	4618      	mov	r0, r3
 8020e64:	3718      	adds	r7, #24
 8020e66:	46bd      	mov	sp, r7
 8020e68:	bd80      	pop	{r7, pc}
 8020e6a:	bf00      	nop
 8020e6c:	0802739c 	.word	0x0802739c

08020e70 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8020e70:	b580      	push	{r7, lr}
 8020e72:	b086      	sub	sp, #24
 8020e74:	af00      	add	r7, sp, #0
 8020e76:	60f8      	str	r0, [r7, #12]
 8020e78:	60b9      	str	r1, [r7, #8]
 8020e7a:	607a      	str	r2, [r7, #4]
 8020e7c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8020e7e:	8c3b      	ldrh	r3, [r7, #32]
 8020e80:	4618      	mov	r0, r3
 8020e82:	f7f4 fe6b 	bl	8015b5c <lwip_htons>
 8020e86:	4603      	mov	r3, r0
 8020e88:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8020e8a:	210e      	movs	r1, #14
 8020e8c:	68b8      	ldr	r0, [r7, #8]
 8020e8e:	f7f6 f9c1 	bl	8017214 <pbuf_add_header>
 8020e92:	4603      	mov	r3, r0
 8020e94:	2b00      	cmp	r3, #0
 8020e96:	d125      	bne.n	8020ee4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8020e98:	68bb      	ldr	r3, [r7, #8]
 8020e9a:	685b      	ldr	r3, [r3, #4]
 8020e9c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8020e9e:	693b      	ldr	r3, [r7, #16]
 8020ea0:	8afa      	ldrh	r2, [r7, #22]
 8020ea2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8020ea4:	693b      	ldr	r3, [r7, #16]
 8020ea6:	2206      	movs	r2, #6
 8020ea8:	6839      	ldr	r1, [r7, #0]
 8020eaa:	4618      	mov	r0, r3
 8020eac:	f001 fb70 	bl	8022590 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8020eb0:	693b      	ldr	r3, [r7, #16]
 8020eb2:	3306      	adds	r3, #6
 8020eb4:	2206      	movs	r2, #6
 8020eb6:	6879      	ldr	r1, [r7, #4]
 8020eb8:	4618      	mov	r0, r3
 8020eba:	f001 fb69 	bl	8022590 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8020ebe:	68fb      	ldr	r3, [r7, #12]
 8020ec0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8020ec4:	2b06      	cmp	r3, #6
 8020ec6:	d006      	beq.n	8020ed6 <ethernet_output+0x66>
 8020ec8:	4b0a      	ldr	r3, [pc, #40]	; (8020ef4 <ethernet_output+0x84>)
 8020eca:	f44f 7299 	mov.w	r2, #306	; 0x132
 8020ece:	490a      	ldr	r1, [pc, #40]	; (8020ef8 <ethernet_output+0x88>)
 8020ed0:	480a      	ldr	r0, [pc, #40]	; (8020efc <ethernet_output+0x8c>)
 8020ed2:	f001 fc6d 	bl	80227b0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8020ed6:	68fb      	ldr	r3, [r7, #12]
 8020ed8:	699b      	ldr	r3, [r3, #24]
 8020eda:	68b9      	ldr	r1, [r7, #8]
 8020edc:	68f8      	ldr	r0, [r7, #12]
 8020ede:	4798      	blx	r3
 8020ee0:	4603      	mov	r3, r0
 8020ee2:	e002      	b.n	8020eea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8020ee4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8020ee6:	f06f 0301 	mvn.w	r3, #1
}
 8020eea:	4618      	mov	r0, r3
 8020eec:	3718      	adds	r7, #24
 8020eee:	46bd      	mov	sp, r7
 8020ef0:	bd80      	pop	{r7, pc}
 8020ef2:	bf00      	nop
 8020ef4:	0802717c 	.word	0x0802717c
 8020ef8:	080271b4 	.word	0x080271b4
 8020efc:	080271e8 	.word	0x080271e8

08020f00 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8020f00:	b580      	push	{r7, lr}
 8020f02:	b086      	sub	sp, #24
 8020f04:	af00      	add	r7, sp, #0
 8020f06:	6078      	str	r0, [r7, #4]
 8020f08:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8020f0a:	683b      	ldr	r3, [r7, #0]
 8020f0c:	60bb      	str	r3, [r7, #8]
 8020f0e:	2304      	movs	r3, #4
 8020f10:	60fb      	str	r3, [r7, #12]
 8020f12:	2300      	movs	r3, #0
 8020f14:	613b      	str	r3, [r7, #16]
 8020f16:	2300      	movs	r3, #0
 8020f18:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8020f1a:	f107 0308 	add.w	r3, r7, #8
 8020f1e:	2100      	movs	r1, #0
 8020f20:	4618      	mov	r0, r3
 8020f22:	f7ef fb6c 	bl	80105fe <osMessageCreate>
 8020f26:	4602      	mov	r2, r0
 8020f28:	687b      	ldr	r3, [r7, #4]
 8020f2a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8020f2c:	687b      	ldr	r3, [r7, #4]
 8020f2e:	681b      	ldr	r3, [r3, #0]
 8020f30:	2b00      	cmp	r3, #0
 8020f32:	d102      	bne.n	8020f3a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8020f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020f38:	e000      	b.n	8020f3c <sys_mbox_new+0x3c>

  return ERR_OK;
 8020f3a:	2300      	movs	r3, #0
}
 8020f3c:	4618      	mov	r0, r3
 8020f3e:	3718      	adds	r7, #24
 8020f40:	46bd      	mov	sp, r7
 8020f42:	bd80      	pop	{r7, pc}

08020f44 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8020f44:	b580      	push	{r7, lr}
 8020f46:	b082      	sub	sp, #8
 8020f48:	af00      	add	r7, sp, #0
 8020f4a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8020f4c:	687b      	ldr	r3, [r7, #4]
 8020f4e:	681b      	ldr	r3, [r3, #0]
 8020f50:	4618      	mov	r0, r3
 8020f52:	f7ef fc31 	bl	80107b8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8020f56:	687b      	ldr	r3, [r7, #4]
 8020f58:	681b      	ldr	r3, [r3, #0]
 8020f5a:	4618      	mov	r0, r3
 8020f5c:	f7ef fc42 	bl	80107e4 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8020f60:	bf00      	nop
 8020f62:	3708      	adds	r7, #8
 8020f64:	46bd      	mov	sp, r7
 8020f66:	bd80      	pop	{r7, pc}

08020f68 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8020f68:	b580      	push	{r7, lr}
 8020f6a:	b084      	sub	sp, #16
 8020f6c:	af00      	add	r7, sp, #0
 8020f6e:	6078      	str	r0, [r7, #4]
 8020f70:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8020f72:	687b      	ldr	r3, [r7, #4]
 8020f74:	681b      	ldr	r3, [r3, #0]
 8020f76:	6839      	ldr	r1, [r7, #0]
 8020f78:	2200      	movs	r2, #0
 8020f7a:	4618      	mov	r0, r3
 8020f7c:	f7ef fb68 	bl	8010650 <osMessagePut>
 8020f80:	4603      	mov	r3, r0
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	d102      	bne.n	8020f8c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8020f86:	2300      	movs	r3, #0
 8020f88:	73fb      	strb	r3, [r7, #15]
 8020f8a:	e001      	b.n	8020f90 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8020f8c:	23ff      	movs	r3, #255	; 0xff
 8020f8e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8020f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8020f94:	4618      	mov	r0, r3
 8020f96:	3710      	adds	r7, #16
 8020f98:	46bd      	mov	sp, r7
 8020f9a:	bd80      	pop	{r7, pc}

08020f9c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8020f9c:	b580      	push	{r7, lr}
 8020f9e:	b08c      	sub	sp, #48	; 0x30
 8020fa0:	af00      	add	r7, sp, #0
 8020fa2:	61f8      	str	r0, [r7, #28]
 8020fa4:	61b9      	str	r1, [r7, #24]
 8020fa6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8020fa8:	f7ef f954 	bl	8010254 <osKernelSysTick>
 8020fac:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8020fae:	697b      	ldr	r3, [r7, #20]
 8020fb0:	2b00      	cmp	r3, #0
 8020fb2:	d017      	beq.n	8020fe4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8020fb4:	69fb      	ldr	r3, [r7, #28]
 8020fb6:	6819      	ldr	r1, [r3, #0]
 8020fb8:	f107 0320 	add.w	r3, r7, #32
 8020fbc:	697a      	ldr	r2, [r7, #20]
 8020fbe:	4618      	mov	r0, r3
 8020fc0:	f7ef fb86 	bl	80106d0 <osMessageGet>

    if(event.status == osEventMessage)
 8020fc4:	6a3b      	ldr	r3, [r7, #32]
 8020fc6:	2b10      	cmp	r3, #16
 8020fc8:	d109      	bne.n	8020fde <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8020fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020fcc:	461a      	mov	r2, r3
 8020fce:	69bb      	ldr	r3, [r7, #24]
 8020fd0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8020fd2:	f7ef f93f 	bl	8010254 <osKernelSysTick>
 8020fd6:	4602      	mov	r2, r0
 8020fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fda:	1ad3      	subs	r3, r2, r3
 8020fdc:	e019      	b.n	8021012 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8020fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020fe2:	e016      	b.n	8021012 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8020fe4:	69fb      	ldr	r3, [r7, #28]
 8020fe6:	6819      	ldr	r1, [r3, #0]
 8020fe8:	463b      	mov	r3, r7
 8020fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020fee:	4618      	mov	r0, r3
 8020ff0:	f7ef fb6e 	bl	80106d0 <osMessageGet>
 8020ff4:	f107 0320 	add.w	r3, r7, #32
 8020ff8:	463a      	mov	r2, r7
 8020ffa:	ca07      	ldmia	r2, {r0, r1, r2}
 8020ffc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8021000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021002:	461a      	mov	r2, r3
 8021004:	69bb      	ldr	r3, [r7, #24]
 8021006:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8021008:	f7ef f924 	bl	8010254 <osKernelSysTick>
 802100c:	4602      	mov	r2, r0
 802100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021010:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8021012:	4618      	mov	r0, r3
 8021014:	3730      	adds	r7, #48	; 0x30
 8021016:	46bd      	mov	sp, r7
 8021018:	bd80      	pop	{r7, pc}

0802101a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 802101a:	b580      	push	{r7, lr}
 802101c:	b086      	sub	sp, #24
 802101e:	af00      	add	r7, sp, #0
 8021020:	6078      	str	r0, [r7, #4]
 8021022:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8021024:	687b      	ldr	r3, [r7, #4]
 8021026:	6819      	ldr	r1, [r3, #0]
 8021028:	f107 030c 	add.w	r3, r7, #12
 802102c:	2200      	movs	r2, #0
 802102e:	4618      	mov	r0, r3
 8021030:	f7ef fb4e 	bl	80106d0 <osMessageGet>

  if(event.status == osEventMessage)
 8021034:	68fb      	ldr	r3, [r7, #12]
 8021036:	2b10      	cmp	r3, #16
 8021038:	d105      	bne.n	8021046 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 802103a:	693b      	ldr	r3, [r7, #16]
 802103c:	461a      	mov	r2, r3
 802103e:	683b      	ldr	r3, [r7, #0]
 8021040:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8021042:	2300      	movs	r3, #0
 8021044:	e001      	b.n	802104a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8021046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 802104a:	4618      	mov	r0, r3
 802104c:	3718      	adds	r7, #24
 802104e:	46bd      	mov	sp, r7
 8021050:	bd80      	pop	{r7, pc}

08021052 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8021052:	b480      	push	{r7}
 8021054:	b083      	sub	sp, #12
 8021056:	af00      	add	r7, sp, #0
 8021058:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 802105a:	687b      	ldr	r3, [r7, #4]
 802105c:	681b      	ldr	r3, [r3, #0]
 802105e:	2b00      	cmp	r3, #0
 8021060:	d101      	bne.n	8021066 <sys_mbox_valid+0x14>
    return 0;
 8021062:	2300      	movs	r3, #0
 8021064:	e000      	b.n	8021068 <sys_mbox_valid+0x16>
  else
    return 1;
 8021066:	2301      	movs	r3, #1
}
 8021068:	4618      	mov	r0, r3
 802106a:	370c      	adds	r7, #12
 802106c:	46bd      	mov	sp, r7
 802106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021072:	4770      	bx	lr

08021074 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8021074:	b480      	push	{r7}
 8021076:	b083      	sub	sp, #12
 8021078:	af00      	add	r7, sp, #0
 802107a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 802107c:	687b      	ldr	r3, [r7, #4]
 802107e:	2200      	movs	r2, #0
 8021080:	601a      	str	r2, [r3, #0]
}
 8021082:	bf00      	nop
 8021084:	370c      	adds	r7, #12
 8021086:	46bd      	mov	sp, r7
 8021088:	f85d 7b04 	ldr.w	r7, [sp], #4
 802108c:	4770      	bx	lr

0802108e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 802108e:	b580      	push	{r7, lr}
 8021090:	b084      	sub	sp, #16
 8021092:	af00      	add	r7, sp, #0
 8021094:	6078      	str	r0, [r7, #4]
 8021096:	460b      	mov	r3, r1
 8021098:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 802109a:	2300      	movs	r3, #0
 802109c:	60bb      	str	r3, [r7, #8]
 802109e:	2300      	movs	r3, #0
 80210a0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80210a2:	f107 0308 	add.w	r3, r7, #8
 80210a6:	2101      	movs	r1, #1
 80210a8:	4618      	mov	r0, r3
 80210aa:	f7ef f9df 	bl	801046c <osSemaphoreCreate>
 80210ae:	4602      	mov	r2, r0
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80210b4:	687b      	ldr	r3, [r7, #4]
 80210b6:	681b      	ldr	r3, [r3, #0]
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	d102      	bne.n	80210c2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80210bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80210c0:	e009      	b.n	80210d6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80210c2:	78fb      	ldrb	r3, [r7, #3]
 80210c4:	2b00      	cmp	r3, #0
 80210c6:	d105      	bne.n	80210d4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80210c8:	687b      	ldr	r3, [r7, #4]
 80210ca:	681b      	ldr	r3, [r3, #0]
 80210cc:	2100      	movs	r1, #0
 80210ce:	4618      	mov	r0, r3
 80210d0:	f7ef f9fe 	bl	80104d0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80210d4:	2300      	movs	r3, #0
}
 80210d6:	4618      	mov	r0, r3
 80210d8:	3710      	adds	r7, #16
 80210da:	46bd      	mov	sp, r7
 80210dc:	bd80      	pop	{r7, pc}

080210de <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80210de:	b580      	push	{r7, lr}
 80210e0:	b084      	sub	sp, #16
 80210e2:	af00      	add	r7, sp, #0
 80210e4:	6078      	str	r0, [r7, #4]
 80210e6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80210e8:	f7ef f8b4 	bl	8010254 <osKernelSysTick>
 80210ec:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80210ee:	683b      	ldr	r3, [r7, #0]
 80210f0:	2b00      	cmp	r3, #0
 80210f2:	d011      	beq.n	8021118 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80210f4:	687b      	ldr	r3, [r7, #4]
 80210f6:	681b      	ldr	r3, [r3, #0]
 80210f8:	6839      	ldr	r1, [r7, #0]
 80210fa:	4618      	mov	r0, r3
 80210fc:	f7ef f9e8 	bl	80104d0 <osSemaphoreWait>
 8021100:	4603      	mov	r3, r0
 8021102:	2b00      	cmp	r3, #0
 8021104:	d105      	bne.n	8021112 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8021106:	f7ef f8a5 	bl	8010254 <osKernelSysTick>
 802110a:	4602      	mov	r2, r0
 802110c:	68fb      	ldr	r3, [r7, #12]
 802110e:	1ad3      	subs	r3, r2, r3
 8021110:	e012      	b.n	8021138 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8021112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021116:	e00f      	b.n	8021138 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8021118:	bf00      	nop
 802111a:	687b      	ldr	r3, [r7, #4]
 802111c:	681b      	ldr	r3, [r3, #0]
 802111e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8021122:	4618      	mov	r0, r3
 8021124:	f7ef f9d4 	bl	80104d0 <osSemaphoreWait>
 8021128:	4603      	mov	r3, r0
 802112a:	2b00      	cmp	r3, #0
 802112c:	d1f5      	bne.n	802111a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 802112e:	f7ef f891 	bl	8010254 <osKernelSysTick>
 8021132:	4602      	mov	r2, r0
 8021134:	68fb      	ldr	r3, [r7, #12]
 8021136:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8021138:	4618      	mov	r0, r3
 802113a:	3710      	adds	r7, #16
 802113c:	46bd      	mov	sp, r7
 802113e:	bd80      	pop	{r7, pc}

08021140 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8021140:	b580      	push	{r7, lr}
 8021142:	b082      	sub	sp, #8
 8021144:	af00      	add	r7, sp, #0
 8021146:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	681b      	ldr	r3, [r3, #0]
 802114c:	4618      	mov	r0, r3
 802114e:	f7ef fa0d 	bl	801056c <osSemaphoreRelease>
}
 8021152:	bf00      	nop
 8021154:	3708      	adds	r7, #8
 8021156:	46bd      	mov	sp, r7
 8021158:	bd80      	pop	{r7, pc}

0802115a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 802115a:	b580      	push	{r7, lr}
 802115c:	b082      	sub	sp, #8
 802115e:	af00      	add	r7, sp, #0
 8021160:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8021162:	687b      	ldr	r3, [r7, #4]
 8021164:	681b      	ldr	r3, [r3, #0]
 8021166:	4618      	mov	r0, r3
 8021168:	f7ef fa36 	bl	80105d8 <osSemaphoreDelete>
}
 802116c:	bf00      	nop
 802116e:	3708      	adds	r7, #8
 8021170:	46bd      	mov	sp, r7
 8021172:	bd80      	pop	{r7, pc}

08021174 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8021174:	b480      	push	{r7}
 8021176:	b083      	sub	sp, #12
 8021178:	af00      	add	r7, sp, #0
 802117a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 802117c:	687b      	ldr	r3, [r7, #4]
 802117e:	681b      	ldr	r3, [r3, #0]
 8021180:	2b00      	cmp	r3, #0
 8021182:	d101      	bne.n	8021188 <sys_sem_valid+0x14>
    return 0;
 8021184:	2300      	movs	r3, #0
 8021186:	e000      	b.n	802118a <sys_sem_valid+0x16>
  else
    return 1;
 8021188:	2301      	movs	r3, #1
}
 802118a:	4618      	mov	r0, r3
 802118c:	370c      	adds	r7, #12
 802118e:	46bd      	mov	sp, r7
 8021190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021194:	4770      	bx	lr

08021196 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8021196:	b480      	push	{r7}
 8021198:	b083      	sub	sp, #12
 802119a:	af00      	add	r7, sp, #0
 802119c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 802119e:	687b      	ldr	r3, [r7, #4]
 80211a0:	2200      	movs	r2, #0
 80211a2:	601a      	str	r2, [r3, #0]
}
 80211a4:	bf00      	nop
 80211a6:	370c      	adds	r7, #12
 80211a8:	46bd      	mov	sp, r7
 80211aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211ae:	4770      	bx	lr

080211b0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80211b0:	b580      	push	{r7, lr}
 80211b2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80211b4:	4803      	ldr	r0, [pc, #12]	; (80211c4 <sys_init+0x14>)
 80211b6:	f7ef f8bd 	bl	8010334 <osMutexCreate>
 80211ba:	4603      	mov	r3, r0
 80211bc:	4a02      	ldr	r2, [pc, #8]	; (80211c8 <sys_init+0x18>)
 80211be:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80211c0:	bf00      	nop
 80211c2:	bd80      	pop	{r7, pc}
 80211c4:	080273ac 	.word	0x080273ac
 80211c8:	2000c110 	.word	0x2000c110

080211cc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80211cc:	b580      	push	{r7, lr}
 80211ce:	b084      	sub	sp, #16
 80211d0:	af00      	add	r7, sp, #0
 80211d2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80211d4:	2300      	movs	r3, #0
 80211d6:	60bb      	str	r3, [r7, #8]
 80211d8:	2300      	movs	r3, #0
 80211da:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80211dc:	f107 0308 	add.w	r3, r7, #8
 80211e0:	4618      	mov	r0, r3
 80211e2:	f7ef f8a7 	bl	8010334 <osMutexCreate>
 80211e6:	4602      	mov	r2, r0
 80211e8:	687b      	ldr	r3, [r7, #4]
 80211ea:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80211ec:	687b      	ldr	r3, [r7, #4]
 80211ee:	681b      	ldr	r3, [r3, #0]
 80211f0:	2b00      	cmp	r3, #0
 80211f2:	d102      	bne.n	80211fa <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80211f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80211f8:	e000      	b.n	80211fc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80211fa:	2300      	movs	r3, #0
}
 80211fc:	4618      	mov	r0, r3
 80211fe:	3710      	adds	r7, #16
 8021200:	46bd      	mov	sp, r7
 8021202:	bd80      	pop	{r7, pc}

08021204 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8021204:	b580      	push	{r7, lr}
 8021206:	b082      	sub	sp, #8
 8021208:	af00      	add	r7, sp, #0
 802120a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 802120c:	687b      	ldr	r3, [r7, #4]
 802120e:	681b      	ldr	r3, [r3, #0]
 8021210:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8021214:	4618      	mov	r0, r3
 8021216:	f7ef f8a5 	bl	8010364 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 802121a:	bf00      	nop
 802121c:	3708      	adds	r7, #8
 802121e:	46bd      	mov	sp, r7
 8021220:	bd80      	pop	{r7, pc}

08021222 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8021222:	b580      	push	{r7, lr}
 8021224:	b082      	sub	sp, #8
 8021226:	af00      	add	r7, sp, #0
 8021228:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 802122a:	687b      	ldr	r3, [r7, #4]
 802122c:	681b      	ldr	r3, [r3, #0]
 802122e:	4618      	mov	r0, r3
 8021230:	f7ef f8e6 	bl	8010400 <osMutexRelease>
}
 8021234:	bf00      	nop
 8021236:	3708      	adds	r7, #8
 8021238:	46bd      	mov	sp, r7
 802123a:	bd80      	pop	{r7, pc}

0802123c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 802123c:	b580      	push	{r7, lr}
 802123e:	b08c      	sub	sp, #48	; 0x30
 8021240:	af00      	add	r7, sp, #0
 8021242:	60f8      	str	r0, [r7, #12]
 8021244:	60b9      	str	r1, [r7, #8]
 8021246:	607a      	str	r2, [r7, #4]
 8021248:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 802124a:	f107 0314 	add.w	r3, r7, #20
 802124e:	2200      	movs	r2, #0
 8021250:	601a      	str	r2, [r3, #0]
 8021252:	605a      	str	r2, [r3, #4]
 8021254:	609a      	str	r2, [r3, #8]
 8021256:	60da      	str	r2, [r3, #12]
 8021258:	611a      	str	r2, [r3, #16]
 802125a:	615a      	str	r2, [r3, #20]
 802125c:	619a      	str	r2, [r3, #24]
 802125e:	68fb      	ldr	r3, [r7, #12]
 8021260:	617b      	str	r3, [r7, #20]
 8021262:	68bb      	ldr	r3, [r7, #8]
 8021264:	61bb      	str	r3, [r7, #24]
 8021266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021268:	b21b      	sxth	r3, r3
 802126a:	83bb      	strh	r3, [r7, #28]
 802126c:	683b      	ldr	r3, [r7, #0]
 802126e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8021270:	f107 0314 	add.w	r3, r7, #20
 8021274:	6879      	ldr	r1, [r7, #4]
 8021276:	4618      	mov	r0, r3
 8021278:	f7ee fffc 	bl	8010274 <osThreadCreate>
 802127c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 802127e:	4618      	mov	r0, r3
 8021280:	3730      	adds	r7, #48	; 0x30
 8021282:	46bd      	mov	sp, r7
 8021284:	bd80      	pop	{r7, pc}
	...

08021288 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8021288:	b580      	push	{r7, lr}
 802128a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 802128c:	4b04      	ldr	r3, [pc, #16]	; (80212a0 <sys_arch_protect+0x18>)
 802128e:	681b      	ldr	r3, [r3, #0]
 8021290:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8021294:	4618      	mov	r0, r3
 8021296:	f7ef f865 	bl	8010364 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 802129a:	2301      	movs	r3, #1
}
 802129c:	4618      	mov	r0, r3
 802129e:	bd80      	pop	{r7, pc}
 80212a0:	2000c110 	.word	0x2000c110

080212a4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80212a4:	b580      	push	{r7, lr}
 80212a6:	b082      	sub	sp, #8
 80212a8:	af00      	add	r7, sp, #0
 80212aa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80212ac:	4b04      	ldr	r3, [pc, #16]	; (80212c0 <sys_arch_unprotect+0x1c>)
 80212ae:	681b      	ldr	r3, [r3, #0]
 80212b0:	4618      	mov	r0, r3
 80212b2:	f7ef f8a5 	bl	8010400 <osMutexRelease>
}
 80212b6:	bf00      	nop
 80212b8:	3708      	adds	r7, #8
 80212ba:	46bd      	mov	sp, r7
 80212bc:	bd80      	pop	{r7, pc}
 80212be:	bf00      	nop
 80212c0:	2000c110 	.word	0x2000c110

080212c4 <_ZdlPvj>:
 80212c4:	f000 b8db 	b.w	802147e <_ZdlPv>

080212c8 <__cxa_guard_acquire>:
 80212c8:	6803      	ldr	r3, [r0, #0]
 80212ca:	07db      	lsls	r3, r3, #31
 80212cc:	d406      	bmi.n	80212dc <__cxa_guard_acquire+0x14>
 80212ce:	7843      	ldrb	r3, [r0, #1]
 80212d0:	b103      	cbz	r3, 80212d4 <__cxa_guard_acquire+0xc>
 80212d2:	deff      	udf	#255	; 0xff
 80212d4:	2301      	movs	r3, #1
 80212d6:	7043      	strb	r3, [r0, #1]
 80212d8:	4618      	mov	r0, r3
 80212da:	4770      	bx	lr
 80212dc:	2000      	movs	r0, #0
 80212de:	4770      	bx	lr

080212e0 <__cxa_guard_release>:
 80212e0:	2301      	movs	r3, #1
 80212e2:	6003      	str	r3, [r0, #0]
 80212e4:	4770      	bx	lr

080212e6 <_Znwj>:
 80212e6:	2801      	cmp	r0, #1
 80212e8:	bf38      	it	cc
 80212ea:	2001      	movcc	r0, #1
 80212ec:	b510      	push	{r4, lr}
 80212ee:	4604      	mov	r4, r0
 80212f0:	4620      	mov	r0, r4
 80212f2:	f001 f92d 	bl	8022550 <malloc>
 80212f6:	b930      	cbnz	r0, 8021306 <_Znwj+0x20>
 80212f8:	f000 f8d6 	bl	80214a8 <_ZSt15get_new_handlerv>
 80212fc:	b908      	cbnz	r0, 8021302 <_Znwj+0x1c>
 80212fe:	f000 fff5 	bl	80222ec <abort>
 8021302:	4780      	blx	r0
 8021304:	e7f4      	b.n	80212f0 <_Znwj+0xa>
 8021306:	bd10      	pop	{r4, pc}

08021308 <__cxa_pure_virtual>:
 8021308:	b508      	push	{r3, lr}
 802130a:	f000 f8c7 	bl	802149c <_ZSt9terminatev>

0802130e <_ZSt17__throw_bad_allocv>:
 802130e:	b508      	push	{r3, lr}
 8021310:	f000 ffec 	bl	80222ec <abort>

08021314 <_ZSt19__throw_logic_errorPKc>:
 8021314:	b508      	push	{r3, lr}
 8021316:	f000 ffe9 	bl	80222ec <abort>

0802131a <_ZSt20__throw_length_errorPKc>:
 802131a:	b508      	push	{r3, lr}
 802131c:	f000 ffe6 	bl	80222ec <abort>

08021320 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8021320:	b40f      	push	{r0, r1, r2, r3}
 8021322:	b580      	push	{r7, lr}
 8021324:	b084      	sub	sp, #16
 8021326:	af00      	add	r7, sp, #0
 8021328:	f107 0418 	add.w	r4, r7, #24
 802132c:	f854 2b04 	ldr.w	r2, [r4], #4
 8021330:	607a      	str	r2, [r7, #4]
 8021332:	4610      	mov	r0, r2
 8021334:	f7de ff6c 	bl	8000210 <strlen>
 8021338:	f200 2307 	addw	r3, r0, #519	; 0x207
 802133c:	f023 0307 	bic.w	r3, r3, #7
 8021340:	ebad 0d03 	sub.w	sp, sp, r3
 8021344:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8021348:	687a      	ldr	r2, [r7, #4]
 802134a:	60fc      	str	r4, [r7, #12]
 802134c:	4623      	mov	r3, r4
 802134e:	4668      	mov	r0, sp
 8021350:	f000 f854 	bl	80213fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8021354:	f000 ffca 	bl	80222ec <abort>

08021358 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8021358:	b580      	push	{r7, lr}
 802135a:	b09c      	sub	sp, #112	; 0x70
 802135c:	4606      	mov	r6, r0
 802135e:	af00      	add	r7, sp, #0
 8021360:	460c      	mov	r4, r1
 8021362:	1ba4      	subs	r4, r4, r6
 8021364:	490e      	ldr	r1, [pc, #56]	; (80213a0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8021366:	2269      	movs	r2, #105	; 0x69
 8021368:	1d38      	adds	r0, r7, #4
 802136a:	f001 f911 	bl	8022590 <memcpy>
 802136e:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8021372:	f023 0307 	bic.w	r3, r3, #7
 8021376:	ebad 0d03 	sub.w	sp, sp, r3
 802137a:	466d      	mov	r5, sp
 802137c:	2268      	movs	r2, #104	; 0x68
 802137e:	1d39      	adds	r1, r7, #4
 8021380:	4628      	mov	r0, r5
 8021382:	f001 f905 	bl	8022590 <memcpy>
 8021386:	4622      	mov	r2, r4
 8021388:	4631      	mov	r1, r6
 802138a:	f105 0068 	add.w	r0, r5, #104	; 0x68
 802138e:	442c      	add	r4, r5
 8021390:	f001 f8fe 	bl	8022590 <memcpy>
 8021394:	2300      	movs	r3, #0
 8021396:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 802139a:	4628      	mov	r0, r5
 802139c:	f7ff ffba 	bl	8021314 <_ZSt19__throw_logic_errorPKc>
 80213a0:	080273b4 	.word	0x080273b4

080213a4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80213a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80213a8:	af00      	add	r7, sp, #0
 80213aa:	b084      	sub	sp, #16
 80213ac:	466d      	mov	r5, sp
 80213ae:	f105 040c 	add.w	r4, r5, #12
 80213b2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80213f8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 80213b6:	4623      	mov	r3, r4
 80213b8:	f04f 0c0a 	mov.w	ip, #10
 80213bc:	fbb2 f6fc 	udiv	r6, r2, ip
 80213c0:	fb0c 2e16 	mls	lr, ip, r6, r2
 80213c4:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80213c8:	f803 ed01 	strb.w	lr, [r3, #-1]!
 80213cc:	4696      	mov	lr, r2
 80213ce:	f1be 0f09 	cmp.w	lr, #9
 80213d2:	4632      	mov	r2, r6
 80213d4:	d8f2      	bhi.n	80213bc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 80213d6:	1ae4      	subs	r4, r4, r3
 80213d8:	428c      	cmp	r4, r1
 80213da:	d809      	bhi.n	80213f0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80213dc:	f1c4 030c 	rsb	r3, r4, #12
 80213e0:	4622      	mov	r2, r4
 80213e2:	18e9      	adds	r1, r5, r3
 80213e4:	f001 f8d4 	bl	8022590 <memcpy>
 80213e8:	4620      	mov	r0, r4
 80213ea:	46bd      	mov	sp, r7
 80213ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80213f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80213f4:	e7f8      	b.n	80213e8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80213f6:	bf00      	nop
 80213f8:	0802741d 	.word	0x0802741d

080213fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80213fc:	3901      	subs	r1, #1
 80213fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021402:	4607      	mov	r7, r0
 8021404:	4615      	mov	r5, r2
 8021406:	eb00 0801 	add.w	r8, r0, r1
 802140a:	4604      	mov	r4, r0
 802140c:	782a      	ldrb	r2, [r5, #0]
 802140e:	b392      	cbz	r2, 8021476 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8021410:	4544      	cmp	r4, r8
 8021412:	d22a      	bcs.n	802146a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8021414:	2a25      	cmp	r2, #37	; 0x25
 8021416:	d107      	bne.n	8021428 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8021418:	786a      	ldrb	r2, [r5, #1]
 802141a:	2a73      	cmp	r2, #115	; 0x73
 802141c:	d009      	beq.n	8021432 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 802141e:	2a7a      	cmp	r2, #122	; 0x7a
 8021420:	d012      	beq.n	8021448 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8021422:	2a25      	cmp	r2, #37	; 0x25
 8021424:	d100      	bne.n	8021428 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8021426:	3501      	adds	r5, #1
 8021428:	f815 2b01 	ldrb.w	r2, [r5], #1
 802142c:	f804 2b01 	strb.w	r2, [r4], #1
 8021430:	e7ec      	b.n	802140c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8021432:	f853 2b04 	ldr.w	r2, [r3], #4
 8021436:	3a01      	subs	r2, #1
 8021438:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 802143c:	b1c9      	cbz	r1, 8021472 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 802143e:	4544      	cmp	r4, r8
 8021440:	d013      	beq.n	802146a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8021442:	f804 1b01 	strb.w	r1, [r4], #1
 8021446:	e7f7      	b.n	8021438 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8021448:	78aa      	ldrb	r2, [r5, #2]
 802144a:	2a75      	cmp	r2, #117	; 0x75
 802144c:	d1ec      	bne.n	8021428 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 802144e:	461e      	mov	r6, r3
 8021450:	eba8 0104 	sub.w	r1, r8, r4
 8021454:	f856 2b04 	ldr.w	r2, [r6], #4
 8021458:	4620      	mov	r0, r4
 802145a:	f7ff ffa3 	bl	80213a4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 802145e:	2800      	cmp	r0, #0
 8021460:	dd03      	ble.n	802146a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8021462:	4404      	add	r4, r0
 8021464:	3503      	adds	r5, #3
 8021466:	4633      	mov	r3, r6
 8021468:	e7d0      	b.n	802140c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 802146a:	4621      	mov	r1, r4
 802146c:	4638      	mov	r0, r7
 802146e:	f7ff ff73 	bl	8021358 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8021472:	3502      	adds	r5, #2
 8021474:	e7ca      	b.n	802140c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8021476:	7022      	strb	r2, [r4, #0]
 8021478:	1be0      	subs	r0, r4, r7
 802147a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802147e <_ZdlPv>:
 802147e:	f001 b86f 	b.w	8022560 <free>

08021482 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8021482:	b508      	push	{r3, lr}
 8021484:	4780      	blx	r0
 8021486:	f000 ff31 	bl	80222ec <abort>
	...

0802148c <_ZSt13get_terminatev>:
 802148c:	4b02      	ldr	r3, [pc, #8]	; (8021498 <_ZSt13get_terminatev+0xc>)
 802148e:	6818      	ldr	r0, [r3, #0]
 8021490:	f3bf 8f5b 	dmb	ish
 8021494:	4770      	bx	lr
 8021496:	bf00      	nop
 8021498:	20000034 	.word	0x20000034

0802149c <_ZSt9terminatev>:
 802149c:	b508      	push	{r3, lr}
 802149e:	f7ff fff5 	bl	802148c <_ZSt13get_terminatev>
 80214a2:	f7ff ffee 	bl	8021482 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080214a8 <_ZSt15get_new_handlerv>:
 80214a8:	4b02      	ldr	r3, [pc, #8]	; (80214b4 <_ZSt15get_new_handlerv+0xc>)
 80214aa:	6818      	ldr	r0, [r3, #0]
 80214ac:	f3bf 8f5b 	dmb	ish
 80214b0:	4770      	bx	lr
 80214b2:	bf00      	nop
 80214b4:	2000c114 	.word	0x2000c114

080214b8 <pow>:
 80214b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214ba:	ed2d 8b02 	vpush	{d8}
 80214be:	eeb0 8a40 	vmov.f32	s16, s0
 80214c2:	eef0 8a60 	vmov.f32	s17, s1
 80214c6:	ec55 4b11 	vmov	r4, r5, d1
 80214ca:	f000 f865 	bl	8021598 <__ieee754_pow>
 80214ce:	4622      	mov	r2, r4
 80214d0:	462b      	mov	r3, r5
 80214d2:	4620      	mov	r0, r4
 80214d4:	4629      	mov	r1, r5
 80214d6:	ec57 6b10 	vmov	r6, r7, d0
 80214da:	f7df fb47 	bl	8000b6c <__aeabi_dcmpun>
 80214de:	2800      	cmp	r0, #0
 80214e0:	d13b      	bne.n	802155a <pow+0xa2>
 80214e2:	ec51 0b18 	vmov	r0, r1, d8
 80214e6:	2200      	movs	r2, #0
 80214e8:	2300      	movs	r3, #0
 80214ea:	f7df fb0d 	bl	8000b08 <__aeabi_dcmpeq>
 80214ee:	b1b8      	cbz	r0, 8021520 <pow+0x68>
 80214f0:	2200      	movs	r2, #0
 80214f2:	2300      	movs	r3, #0
 80214f4:	4620      	mov	r0, r4
 80214f6:	4629      	mov	r1, r5
 80214f8:	f7df fb06 	bl	8000b08 <__aeabi_dcmpeq>
 80214fc:	2800      	cmp	r0, #0
 80214fe:	d146      	bne.n	802158e <pow+0xd6>
 8021500:	ec45 4b10 	vmov	d0, r4, r5
 8021504:	f000 fe61 	bl	80221ca <finite>
 8021508:	b338      	cbz	r0, 802155a <pow+0xa2>
 802150a:	2200      	movs	r2, #0
 802150c:	2300      	movs	r3, #0
 802150e:	4620      	mov	r0, r4
 8021510:	4629      	mov	r1, r5
 8021512:	f7df fb03 	bl	8000b1c <__aeabi_dcmplt>
 8021516:	b300      	cbz	r0, 802155a <pow+0xa2>
 8021518:	f000 fef6 	bl	8022308 <__errno>
 802151c:	2322      	movs	r3, #34	; 0x22
 802151e:	e01b      	b.n	8021558 <pow+0xa0>
 8021520:	ec47 6b10 	vmov	d0, r6, r7
 8021524:	f000 fe51 	bl	80221ca <finite>
 8021528:	b9e0      	cbnz	r0, 8021564 <pow+0xac>
 802152a:	eeb0 0a48 	vmov.f32	s0, s16
 802152e:	eef0 0a68 	vmov.f32	s1, s17
 8021532:	f000 fe4a 	bl	80221ca <finite>
 8021536:	b1a8      	cbz	r0, 8021564 <pow+0xac>
 8021538:	ec45 4b10 	vmov	d0, r4, r5
 802153c:	f000 fe45 	bl	80221ca <finite>
 8021540:	b180      	cbz	r0, 8021564 <pow+0xac>
 8021542:	4632      	mov	r2, r6
 8021544:	463b      	mov	r3, r7
 8021546:	4630      	mov	r0, r6
 8021548:	4639      	mov	r1, r7
 802154a:	f7df fb0f 	bl	8000b6c <__aeabi_dcmpun>
 802154e:	2800      	cmp	r0, #0
 8021550:	d0e2      	beq.n	8021518 <pow+0x60>
 8021552:	f000 fed9 	bl	8022308 <__errno>
 8021556:	2321      	movs	r3, #33	; 0x21
 8021558:	6003      	str	r3, [r0, #0]
 802155a:	ecbd 8b02 	vpop	{d8}
 802155e:	ec47 6b10 	vmov	d0, r6, r7
 8021562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021564:	2200      	movs	r2, #0
 8021566:	2300      	movs	r3, #0
 8021568:	4630      	mov	r0, r6
 802156a:	4639      	mov	r1, r7
 802156c:	f7df facc 	bl	8000b08 <__aeabi_dcmpeq>
 8021570:	2800      	cmp	r0, #0
 8021572:	d0f2      	beq.n	802155a <pow+0xa2>
 8021574:	eeb0 0a48 	vmov.f32	s0, s16
 8021578:	eef0 0a68 	vmov.f32	s1, s17
 802157c:	f000 fe25 	bl	80221ca <finite>
 8021580:	2800      	cmp	r0, #0
 8021582:	d0ea      	beq.n	802155a <pow+0xa2>
 8021584:	ec45 4b10 	vmov	d0, r4, r5
 8021588:	f000 fe1f 	bl	80221ca <finite>
 802158c:	e7c3      	b.n	8021516 <pow+0x5e>
 802158e:	4f01      	ldr	r7, [pc, #4]	; (8021594 <pow+0xdc>)
 8021590:	2600      	movs	r6, #0
 8021592:	e7e2      	b.n	802155a <pow+0xa2>
 8021594:	3ff00000 	.word	0x3ff00000

08021598 <__ieee754_pow>:
 8021598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802159c:	ed2d 8b06 	vpush	{d8-d10}
 80215a0:	b089      	sub	sp, #36	; 0x24
 80215a2:	ed8d 1b00 	vstr	d1, [sp]
 80215a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80215aa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80215ae:	ea58 0102 	orrs.w	r1, r8, r2
 80215b2:	ec57 6b10 	vmov	r6, r7, d0
 80215b6:	d115      	bne.n	80215e4 <__ieee754_pow+0x4c>
 80215b8:	19b3      	adds	r3, r6, r6
 80215ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80215be:	4152      	adcs	r2, r2
 80215c0:	4299      	cmp	r1, r3
 80215c2:	4b89      	ldr	r3, [pc, #548]	; (80217e8 <__ieee754_pow+0x250>)
 80215c4:	4193      	sbcs	r3, r2
 80215c6:	f080 84d2 	bcs.w	8021f6e <__ieee754_pow+0x9d6>
 80215ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80215ce:	4630      	mov	r0, r6
 80215d0:	4639      	mov	r1, r7
 80215d2:	f7de fe7b 	bl	80002cc <__adddf3>
 80215d6:	ec41 0b10 	vmov	d0, r0, r1
 80215da:	b009      	add	sp, #36	; 0x24
 80215dc:	ecbd 8b06 	vpop	{d8-d10}
 80215e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215e4:	4b81      	ldr	r3, [pc, #516]	; (80217ec <__ieee754_pow+0x254>)
 80215e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80215ea:	429c      	cmp	r4, r3
 80215ec:	ee10 aa10 	vmov	sl, s0
 80215f0:	463d      	mov	r5, r7
 80215f2:	dc06      	bgt.n	8021602 <__ieee754_pow+0x6a>
 80215f4:	d101      	bne.n	80215fa <__ieee754_pow+0x62>
 80215f6:	2e00      	cmp	r6, #0
 80215f8:	d1e7      	bne.n	80215ca <__ieee754_pow+0x32>
 80215fa:	4598      	cmp	r8, r3
 80215fc:	dc01      	bgt.n	8021602 <__ieee754_pow+0x6a>
 80215fe:	d10f      	bne.n	8021620 <__ieee754_pow+0x88>
 8021600:	b172      	cbz	r2, 8021620 <__ieee754_pow+0x88>
 8021602:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8021606:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 802160a:	ea55 050a 	orrs.w	r5, r5, sl
 802160e:	d1dc      	bne.n	80215ca <__ieee754_pow+0x32>
 8021610:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021614:	18db      	adds	r3, r3, r3
 8021616:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 802161a:	4152      	adcs	r2, r2
 802161c:	429d      	cmp	r5, r3
 802161e:	e7d0      	b.n	80215c2 <__ieee754_pow+0x2a>
 8021620:	2d00      	cmp	r5, #0
 8021622:	da3b      	bge.n	802169c <__ieee754_pow+0x104>
 8021624:	4b72      	ldr	r3, [pc, #456]	; (80217f0 <__ieee754_pow+0x258>)
 8021626:	4598      	cmp	r8, r3
 8021628:	dc51      	bgt.n	80216ce <__ieee754_pow+0x136>
 802162a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802162e:	4598      	cmp	r8, r3
 8021630:	f340 84ac 	ble.w	8021f8c <__ieee754_pow+0x9f4>
 8021634:	ea4f 5328 	mov.w	r3, r8, asr #20
 8021638:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802163c:	2b14      	cmp	r3, #20
 802163e:	dd0f      	ble.n	8021660 <__ieee754_pow+0xc8>
 8021640:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8021644:	fa22 f103 	lsr.w	r1, r2, r3
 8021648:	fa01 f303 	lsl.w	r3, r1, r3
 802164c:	4293      	cmp	r3, r2
 802164e:	f040 849d 	bne.w	8021f8c <__ieee754_pow+0x9f4>
 8021652:	f001 0101 	and.w	r1, r1, #1
 8021656:	f1c1 0302 	rsb	r3, r1, #2
 802165a:	9304      	str	r3, [sp, #16]
 802165c:	b182      	cbz	r2, 8021680 <__ieee754_pow+0xe8>
 802165e:	e05f      	b.n	8021720 <__ieee754_pow+0x188>
 8021660:	2a00      	cmp	r2, #0
 8021662:	d15b      	bne.n	802171c <__ieee754_pow+0x184>
 8021664:	f1c3 0314 	rsb	r3, r3, #20
 8021668:	fa48 f103 	asr.w	r1, r8, r3
 802166c:	fa01 f303 	lsl.w	r3, r1, r3
 8021670:	4543      	cmp	r3, r8
 8021672:	f040 8488 	bne.w	8021f86 <__ieee754_pow+0x9ee>
 8021676:	f001 0101 	and.w	r1, r1, #1
 802167a:	f1c1 0302 	rsb	r3, r1, #2
 802167e:	9304      	str	r3, [sp, #16]
 8021680:	4b5c      	ldr	r3, [pc, #368]	; (80217f4 <__ieee754_pow+0x25c>)
 8021682:	4598      	cmp	r8, r3
 8021684:	d132      	bne.n	80216ec <__ieee754_pow+0x154>
 8021686:	f1b9 0f00 	cmp.w	r9, #0
 802168a:	f280 8478 	bge.w	8021f7e <__ieee754_pow+0x9e6>
 802168e:	4959      	ldr	r1, [pc, #356]	; (80217f4 <__ieee754_pow+0x25c>)
 8021690:	4632      	mov	r2, r6
 8021692:	463b      	mov	r3, r7
 8021694:	2000      	movs	r0, #0
 8021696:	f7df f8f9 	bl	800088c <__aeabi_ddiv>
 802169a:	e79c      	b.n	80215d6 <__ieee754_pow+0x3e>
 802169c:	2300      	movs	r3, #0
 802169e:	9304      	str	r3, [sp, #16]
 80216a0:	2a00      	cmp	r2, #0
 80216a2:	d13d      	bne.n	8021720 <__ieee754_pow+0x188>
 80216a4:	4b51      	ldr	r3, [pc, #324]	; (80217ec <__ieee754_pow+0x254>)
 80216a6:	4598      	cmp	r8, r3
 80216a8:	d1ea      	bne.n	8021680 <__ieee754_pow+0xe8>
 80216aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80216ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80216b2:	ea53 030a 	orrs.w	r3, r3, sl
 80216b6:	f000 845a 	beq.w	8021f6e <__ieee754_pow+0x9d6>
 80216ba:	4b4f      	ldr	r3, [pc, #316]	; (80217f8 <__ieee754_pow+0x260>)
 80216bc:	429c      	cmp	r4, r3
 80216be:	dd08      	ble.n	80216d2 <__ieee754_pow+0x13a>
 80216c0:	f1b9 0f00 	cmp.w	r9, #0
 80216c4:	f2c0 8457 	blt.w	8021f76 <__ieee754_pow+0x9de>
 80216c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80216cc:	e783      	b.n	80215d6 <__ieee754_pow+0x3e>
 80216ce:	2302      	movs	r3, #2
 80216d0:	e7e5      	b.n	802169e <__ieee754_pow+0x106>
 80216d2:	f1b9 0f00 	cmp.w	r9, #0
 80216d6:	f04f 0000 	mov.w	r0, #0
 80216da:	f04f 0100 	mov.w	r1, #0
 80216de:	f6bf af7a 	bge.w	80215d6 <__ieee754_pow+0x3e>
 80216e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80216e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80216ea:	e774      	b.n	80215d6 <__ieee754_pow+0x3e>
 80216ec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80216f0:	d106      	bne.n	8021700 <__ieee754_pow+0x168>
 80216f2:	4632      	mov	r2, r6
 80216f4:	463b      	mov	r3, r7
 80216f6:	4630      	mov	r0, r6
 80216f8:	4639      	mov	r1, r7
 80216fa:	f7de ff9d 	bl	8000638 <__aeabi_dmul>
 80216fe:	e76a      	b.n	80215d6 <__ieee754_pow+0x3e>
 8021700:	4b3e      	ldr	r3, [pc, #248]	; (80217fc <__ieee754_pow+0x264>)
 8021702:	4599      	cmp	r9, r3
 8021704:	d10c      	bne.n	8021720 <__ieee754_pow+0x188>
 8021706:	2d00      	cmp	r5, #0
 8021708:	db0a      	blt.n	8021720 <__ieee754_pow+0x188>
 802170a:	ec47 6b10 	vmov	d0, r6, r7
 802170e:	b009      	add	sp, #36	; 0x24
 8021710:	ecbd 8b06 	vpop	{d8-d10}
 8021714:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021718:	f000 bc6c 	b.w	8021ff4 <__ieee754_sqrt>
 802171c:	2300      	movs	r3, #0
 802171e:	9304      	str	r3, [sp, #16]
 8021720:	ec47 6b10 	vmov	d0, r6, r7
 8021724:	f000 fd48 	bl	80221b8 <fabs>
 8021728:	ec51 0b10 	vmov	r0, r1, d0
 802172c:	f1ba 0f00 	cmp.w	sl, #0
 8021730:	d129      	bne.n	8021786 <__ieee754_pow+0x1ee>
 8021732:	b124      	cbz	r4, 802173e <__ieee754_pow+0x1a6>
 8021734:	4b2f      	ldr	r3, [pc, #188]	; (80217f4 <__ieee754_pow+0x25c>)
 8021736:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 802173a:	429a      	cmp	r2, r3
 802173c:	d123      	bne.n	8021786 <__ieee754_pow+0x1ee>
 802173e:	f1b9 0f00 	cmp.w	r9, #0
 8021742:	da05      	bge.n	8021750 <__ieee754_pow+0x1b8>
 8021744:	4602      	mov	r2, r0
 8021746:	460b      	mov	r3, r1
 8021748:	2000      	movs	r0, #0
 802174a:	492a      	ldr	r1, [pc, #168]	; (80217f4 <__ieee754_pow+0x25c>)
 802174c:	f7df f89e 	bl	800088c <__aeabi_ddiv>
 8021750:	2d00      	cmp	r5, #0
 8021752:	f6bf af40 	bge.w	80215d6 <__ieee754_pow+0x3e>
 8021756:	9b04      	ldr	r3, [sp, #16]
 8021758:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802175c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8021760:	4323      	orrs	r3, r4
 8021762:	d108      	bne.n	8021776 <__ieee754_pow+0x1de>
 8021764:	4602      	mov	r2, r0
 8021766:	460b      	mov	r3, r1
 8021768:	4610      	mov	r0, r2
 802176a:	4619      	mov	r1, r3
 802176c:	f7de fdac 	bl	80002c8 <__aeabi_dsub>
 8021770:	4602      	mov	r2, r0
 8021772:	460b      	mov	r3, r1
 8021774:	e78f      	b.n	8021696 <__ieee754_pow+0xfe>
 8021776:	9b04      	ldr	r3, [sp, #16]
 8021778:	2b01      	cmp	r3, #1
 802177a:	f47f af2c 	bne.w	80215d6 <__ieee754_pow+0x3e>
 802177e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021782:	4619      	mov	r1, r3
 8021784:	e727      	b.n	80215d6 <__ieee754_pow+0x3e>
 8021786:	0feb      	lsrs	r3, r5, #31
 8021788:	3b01      	subs	r3, #1
 802178a:	9306      	str	r3, [sp, #24]
 802178c:	9a06      	ldr	r2, [sp, #24]
 802178e:	9b04      	ldr	r3, [sp, #16]
 8021790:	4313      	orrs	r3, r2
 8021792:	d102      	bne.n	802179a <__ieee754_pow+0x202>
 8021794:	4632      	mov	r2, r6
 8021796:	463b      	mov	r3, r7
 8021798:	e7e6      	b.n	8021768 <__ieee754_pow+0x1d0>
 802179a:	4b19      	ldr	r3, [pc, #100]	; (8021800 <__ieee754_pow+0x268>)
 802179c:	4598      	cmp	r8, r3
 802179e:	f340 80fb 	ble.w	8021998 <__ieee754_pow+0x400>
 80217a2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80217a6:	4598      	cmp	r8, r3
 80217a8:	4b13      	ldr	r3, [pc, #76]	; (80217f8 <__ieee754_pow+0x260>)
 80217aa:	dd0c      	ble.n	80217c6 <__ieee754_pow+0x22e>
 80217ac:	429c      	cmp	r4, r3
 80217ae:	dc0f      	bgt.n	80217d0 <__ieee754_pow+0x238>
 80217b0:	f1b9 0f00 	cmp.w	r9, #0
 80217b4:	da0f      	bge.n	80217d6 <__ieee754_pow+0x23e>
 80217b6:	2000      	movs	r0, #0
 80217b8:	b009      	add	sp, #36	; 0x24
 80217ba:	ecbd 8b06 	vpop	{d8-d10}
 80217be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217c2:	f000 bcf0 	b.w	80221a6 <__math_oflow>
 80217c6:	429c      	cmp	r4, r3
 80217c8:	dbf2      	blt.n	80217b0 <__ieee754_pow+0x218>
 80217ca:	4b0a      	ldr	r3, [pc, #40]	; (80217f4 <__ieee754_pow+0x25c>)
 80217cc:	429c      	cmp	r4, r3
 80217ce:	dd19      	ble.n	8021804 <__ieee754_pow+0x26c>
 80217d0:	f1b9 0f00 	cmp.w	r9, #0
 80217d4:	dcef      	bgt.n	80217b6 <__ieee754_pow+0x21e>
 80217d6:	2000      	movs	r0, #0
 80217d8:	b009      	add	sp, #36	; 0x24
 80217da:	ecbd 8b06 	vpop	{d8-d10}
 80217de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217e2:	f000 bcd7 	b.w	8022194 <__math_uflow>
 80217e6:	bf00      	nop
 80217e8:	fff00000 	.word	0xfff00000
 80217ec:	7ff00000 	.word	0x7ff00000
 80217f0:	433fffff 	.word	0x433fffff
 80217f4:	3ff00000 	.word	0x3ff00000
 80217f8:	3fefffff 	.word	0x3fefffff
 80217fc:	3fe00000 	.word	0x3fe00000
 8021800:	41e00000 	.word	0x41e00000
 8021804:	4b60      	ldr	r3, [pc, #384]	; (8021988 <__ieee754_pow+0x3f0>)
 8021806:	2200      	movs	r2, #0
 8021808:	f7de fd5e 	bl	80002c8 <__aeabi_dsub>
 802180c:	a354      	add	r3, pc, #336	; (adr r3, 8021960 <__ieee754_pow+0x3c8>)
 802180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021812:	4604      	mov	r4, r0
 8021814:	460d      	mov	r5, r1
 8021816:	f7de ff0f 	bl	8000638 <__aeabi_dmul>
 802181a:	a353      	add	r3, pc, #332	; (adr r3, 8021968 <__ieee754_pow+0x3d0>)
 802181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021820:	4606      	mov	r6, r0
 8021822:	460f      	mov	r7, r1
 8021824:	4620      	mov	r0, r4
 8021826:	4629      	mov	r1, r5
 8021828:	f7de ff06 	bl	8000638 <__aeabi_dmul>
 802182c:	4b57      	ldr	r3, [pc, #348]	; (802198c <__ieee754_pow+0x3f4>)
 802182e:	4682      	mov	sl, r0
 8021830:	468b      	mov	fp, r1
 8021832:	2200      	movs	r2, #0
 8021834:	4620      	mov	r0, r4
 8021836:	4629      	mov	r1, r5
 8021838:	f7de fefe 	bl	8000638 <__aeabi_dmul>
 802183c:	4602      	mov	r2, r0
 802183e:	460b      	mov	r3, r1
 8021840:	a14b      	add	r1, pc, #300	; (adr r1, 8021970 <__ieee754_pow+0x3d8>)
 8021842:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021846:	f7de fd3f 	bl	80002c8 <__aeabi_dsub>
 802184a:	4622      	mov	r2, r4
 802184c:	462b      	mov	r3, r5
 802184e:	f7de fef3 	bl	8000638 <__aeabi_dmul>
 8021852:	4602      	mov	r2, r0
 8021854:	460b      	mov	r3, r1
 8021856:	2000      	movs	r0, #0
 8021858:	494d      	ldr	r1, [pc, #308]	; (8021990 <__ieee754_pow+0x3f8>)
 802185a:	f7de fd35 	bl	80002c8 <__aeabi_dsub>
 802185e:	4622      	mov	r2, r4
 8021860:	4680      	mov	r8, r0
 8021862:	4689      	mov	r9, r1
 8021864:	462b      	mov	r3, r5
 8021866:	4620      	mov	r0, r4
 8021868:	4629      	mov	r1, r5
 802186a:	f7de fee5 	bl	8000638 <__aeabi_dmul>
 802186e:	4602      	mov	r2, r0
 8021870:	460b      	mov	r3, r1
 8021872:	4640      	mov	r0, r8
 8021874:	4649      	mov	r1, r9
 8021876:	f7de fedf 	bl	8000638 <__aeabi_dmul>
 802187a:	a33f      	add	r3, pc, #252	; (adr r3, 8021978 <__ieee754_pow+0x3e0>)
 802187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021880:	f7de feda 	bl	8000638 <__aeabi_dmul>
 8021884:	4602      	mov	r2, r0
 8021886:	460b      	mov	r3, r1
 8021888:	4650      	mov	r0, sl
 802188a:	4659      	mov	r1, fp
 802188c:	f7de fd1c 	bl	80002c8 <__aeabi_dsub>
 8021890:	4602      	mov	r2, r0
 8021892:	460b      	mov	r3, r1
 8021894:	4680      	mov	r8, r0
 8021896:	4689      	mov	r9, r1
 8021898:	4630      	mov	r0, r6
 802189a:	4639      	mov	r1, r7
 802189c:	f7de fd16 	bl	80002cc <__adddf3>
 80218a0:	2000      	movs	r0, #0
 80218a2:	4632      	mov	r2, r6
 80218a4:	463b      	mov	r3, r7
 80218a6:	4604      	mov	r4, r0
 80218a8:	460d      	mov	r5, r1
 80218aa:	f7de fd0d 	bl	80002c8 <__aeabi_dsub>
 80218ae:	4602      	mov	r2, r0
 80218b0:	460b      	mov	r3, r1
 80218b2:	4640      	mov	r0, r8
 80218b4:	4649      	mov	r1, r9
 80218b6:	f7de fd07 	bl	80002c8 <__aeabi_dsub>
 80218ba:	9b04      	ldr	r3, [sp, #16]
 80218bc:	9a06      	ldr	r2, [sp, #24]
 80218be:	3b01      	subs	r3, #1
 80218c0:	4313      	orrs	r3, r2
 80218c2:	4682      	mov	sl, r0
 80218c4:	468b      	mov	fp, r1
 80218c6:	f040 81e7 	bne.w	8021c98 <__ieee754_pow+0x700>
 80218ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8021980 <__ieee754_pow+0x3e8>
 80218ce:	eeb0 8a47 	vmov.f32	s16, s14
 80218d2:	eef0 8a67 	vmov.f32	s17, s15
 80218d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80218da:	2600      	movs	r6, #0
 80218dc:	4632      	mov	r2, r6
 80218de:	463b      	mov	r3, r7
 80218e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80218e4:	f7de fcf0 	bl	80002c8 <__aeabi_dsub>
 80218e8:	4622      	mov	r2, r4
 80218ea:	462b      	mov	r3, r5
 80218ec:	f7de fea4 	bl	8000638 <__aeabi_dmul>
 80218f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80218f4:	4680      	mov	r8, r0
 80218f6:	4689      	mov	r9, r1
 80218f8:	4650      	mov	r0, sl
 80218fa:	4659      	mov	r1, fp
 80218fc:	f7de fe9c 	bl	8000638 <__aeabi_dmul>
 8021900:	4602      	mov	r2, r0
 8021902:	460b      	mov	r3, r1
 8021904:	4640      	mov	r0, r8
 8021906:	4649      	mov	r1, r9
 8021908:	f7de fce0 	bl	80002cc <__adddf3>
 802190c:	4632      	mov	r2, r6
 802190e:	463b      	mov	r3, r7
 8021910:	4680      	mov	r8, r0
 8021912:	4689      	mov	r9, r1
 8021914:	4620      	mov	r0, r4
 8021916:	4629      	mov	r1, r5
 8021918:	f7de fe8e 	bl	8000638 <__aeabi_dmul>
 802191c:	460b      	mov	r3, r1
 802191e:	4604      	mov	r4, r0
 8021920:	460d      	mov	r5, r1
 8021922:	4602      	mov	r2, r0
 8021924:	4649      	mov	r1, r9
 8021926:	4640      	mov	r0, r8
 8021928:	f7de fcd0 	bl	80002cc <__adddf3>
 802192c:	4b19      	ldr	r3, [pc, #100]	; (8021994 <__ieee754_pow+0x3fc>)
 802192e:	4299      	cmp	r1, r3
 8021930:	ec45 4b19 	vmov	d9, r4, r5
 8021934:	4606      	mov	r6, r0
 8021936:	460f      	mov	r7, r1
 8021938:	468b      	mov	fp, r1
 802193a:	f340 82f1 	ble.w	8021f20 <__ieee754_pow+0x988>
 802193e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8021942:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8021946:	4303      	orrs	r3, r0
 8021948:	f000 81e4 	beq.w	8021d14 <__ieee754_pow+0x77c>
 802194c:	ec51 0b18 	vmov	r0, r1, d8
 8021950:	2200      	movs	r2, #0
 8021952:	2300      	movs	r3, #0
 8021954:	f7df f8e2 	bl	8000b1c <__aeabi_dcmplt>
 8021958:	3800      	subs	r0, #0
 802195a:	bf18      	it	ne
 802195c:	2001      	movne	r0, #1
 802195e:	e72b      	b.n	80217b8 <__ieee754_pow+0x220>
 8021960:	60000000 	.word	0x60000000
 8021964:	3ff71547 	.word	0x3ff71547
 8021968:	f85ddf44 	.word	0xf85ddf44
 802196c:	3e54ae0b 	.word	0x3e54ae0b
 8021970:	55555555 	.word	0x55555555
 8021974:	3fd55555 	.word	0x3fd55555
 8021978:	652b82fe 	.word	0x652b82fe
 802197c:	3ff71547 	.word	0x3ff71547
 8021980:	00000000 	.word	0x00000000
 8021984:	bff00000 	.word	0xbff00000
 8021988:	3ff00000 	.word	0x3ff00000
 802198c:	3fd00000 	.word	0x3fd00000
 8021990:	3fe00000 	.word	0x3fe00000
 8021994:	408fffff 	.word	0x408fffff
 8021998:	4bd5      	ldr	r3, [pc, #852]	; (8021cf0 <__ieee754_pow+0x758>)
 802199a:	402b      	ands	r3, r5
 802199c:	2200      	movs	r2, #0
 802199e:	b92b      	cbnz	r3, 80219ac <__ieee754_pow+0x414>
 80219a0:	4bd4      	ldr	r3, [pc, #848]	; (8021cf4 <__ieee754_pow+0x75c>)
 80219a2:	f7de fe49 	bl	8000638 <__aeabi_dmul>
 80219a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80219aa:	460c      	mov	r4, r1
 80219ac:	1523      	asrs	r3, r4, #20
 80219ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80219b2:	4413      	add	r3, r2
 80219b4:	9305      	str	r3, [sp, #20]
 80219b6:	4bd0      	ldr	r3, [pc, #832]	; (8021cf8 <__ieee754_pow+0x760>)
 80219b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80219bc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80219c0:	429c      	cmp	r4, r3
 80219c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80219c6:	dd08      	ble.n	80219da <__ieee754_pow+0x442>
 80219c8:	4bcc      	ldr	r3, [pc, #816]	; (8021cfc <__ieee754_pow+0x764>)
 80219ca:	429c      	cmp	r4, r3
 80219cc:	f340 8162 	ble.w	8021c94 <__ieee754_pow+0x6fc>
 80219d0:	9b05      	ldr	r3, [sp, #20]
 80219d2:	3301      	adds	r3, #1
 80219d4:	9305      	str	r3, [sp, #20]
 80219d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80219da:	2400      	movs	r4, #0
 80219dc:	00e3      	lsls	r3, r4, #3
 80219de:	9307      	str	r3, [sp, #28]
 80219e0:	4bc7      	ldr	r3, [pc, #796]	; (8021d00 <__ieee754_pow+0x768>)
 80219e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80219e6:	ed93 7b00 	vldr	d7, [r3]
 80219ea:	4629      	mov	r1, r5
 80219ec:	ec53 2b17 	vmov	r2, r3, d7
 80219f0:	eeb0 9a47 	vmov.f32	s18, s14
 80219f4:	eef0 9a67 	vmov.f32	s19, s15
 80219f8:	4682      	mov	sl, r0
 80219fa:	f7de fc65 	bl	80002c8 <__aeabi_dsub>
 80219fe:	4652      	mov	r2, sl
 8021a00:	4606      	mov	r6, r0
 8021a02:	460f      	mov	r7, r1
 8021a04:	462b      	mov	r3, r5
 8021a06:	ec51 0b19 	vmov	r0, r1, d9
 8021a0a:	f7de fc5f 	bl	80002cc <__adddf3>
 8021a0e:	4602      	mov	r2, r0
 8021a10:	460b      	mov	r3, r1
 8021a12:	2000      	movs	r0, #0
 8021a14:	49bb      	ldr	r1, [pc, #748]	; (8021d04 <__ieee754_pow+0x76c>)
 8021a16:	f7de ff39 	bl	800088c <__aeabi_ddiv>
 8021a1a:	ec41 0b1a 	vmov	d10, r0, r1
 8021a1e:	4602      	mov	r2, r0
 8021a20:	460b      	mov	r3, r1
 8021a22:	4630      	mov	r0, r6
 8021a24:	4639      	mov	r1, r7
 8021a26:	f7de fe07 	bl	8000638 <__aeabi_dmul>
 8021a2a:	2300      	movs	r3, #0
 8021a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021a30:	9302      	str	r3, [sp, #8]
 8021a32:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8021a36:	46ab      	mov	fp, r5
 8021a38:	106d      	asrs	r5, r5, #1
 8021a3a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8021a3e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8021a42:	ec41 0b18 	vmov	d8, r0, r1
 8021a46:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8021a4a:	2200      	movs	r2, #0
 8021a4c:	4640      	mov	r0, r8
 8021a4e:	4649      	mov	r1, r9
 8021a50:	4614      	mov	r4, r2
 8021a52:	461d      	mov	r5, r3
 8021a54:	f7de fdf0 	bl	8000638 <__aeabi_dmul>
 8021a58:	4602      	mov	r2, r0
 8021a5a:	460b      	mov	r3, r1
 8021a5c:	4630      	mov	r0, r6
 8021a5e:	4639      	mov	r1, r7
 8021a60:	f7de fc32 	bl	80002c8 <__aeabi_dsub>
 8021a64:	ec53 2b19 	vmov	r2, r3, d9
 8021a68:	4606      	mov	r6, r0
 8021a6a:	460f      	mov	r7, r1
 8021a6c:	4620      	mov	r0, r4
 8021a6e:	4629      	mov	r1, r5
 8021a70:	f7de fc2a 	bl	80002c8 <__aeabi_dsub>
 8021a74:	4602      	mov	r2, r0
 8021a76:	460b      	mov	r3, r1
 8021a78:	4650      	mov	r0, sl
 8021a7a:	4659      	mov	r1, fp
 8021a7c:	f7de fc24 	bl	80002c8 <__aeabi_dsub>
 8021a80:	4642      	mov	r2, r8
 8021a82:	464b      	mov	r3, r9
 8021a84:	f7de fdd8 	bl	8000638 <__aeabi_dmul>
 8021a88:	4602      	mov	r2, r0
 8021a8a:	460b      	mov	r3, r1
 8021a8c:	4630      	mov	r0, r6
 8021a8e:	4639      	mov	r1, r7
 8021a90:	f7de fc1a 	bl	80002c8 <__aeabi_dsub>
 8021a94:	ec53 2b1a 	vmov	r2, r3, d10
 8021a98:	f7de fdce 	bl	8000638 <__aeabi_dmul>
 8021a9c:	ec53 2b18 	vmov	r2, r3, d8
 8021aa0:	ec41 0b19 	vmov	d9, r0, r1
 8021aa4:	ec51 0b18 	vmov	r0, r1, d8
 8021aa8:	f7de fdc6 	bl	8000638 <__aeabi_dmul>
 8021aac:	a37c      	add	r3, pc, #496	; (adr r3, 8021ca0 <__ieee754_pow+0x708>)
 8021aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ab2:	4604      	mov	r4, r0
 8021ab4:	460d      	mov	r5, r1
 8021ab6:	f7de fdbf 	bl	8000638 <__aeabi_dmul>
 8021aba:	a37b      	add	r3, pc, #492	; (adr r3, 8021ca8 <__ieee754_pow+0x710>)
 8021abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ac0:	f7de fc04 	bl	80002cc <__adddf3>
 8021ac4:	4622      	mov	r2, r4
 8021ac6:	462b      	mov	r3, r5
 8021ac8:	f7de fdb6 	bl	8000638 <__aeabi_dmul>
 8021acc:	a378      	add	r3, pc, #480	; (adr r3, 8021cb0 <__ieee754_pow+0x718>)
 8021ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ad2:	f7de fbfb 	bl	80002cc <__adddf3>
 8021ad6:	4622      	mov	r2, r4
 8021ad8:	462b      	mov	r3, r5
 8021ada:	f7de fdad 	bl	8000638 <__aeabi_dmul>
 8021ade:	a376      	add	r3, pc, #472	; (adr r3, 8021cb8 <__ieee754_pow+0x720>)
 8021ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ae4:	f7de fbf2 	bl	80002cc <__adddf3>
 8021ae8:	4622      	mov	r2, r4
 8021aea:	462b      	mov	r3, r5
 8021aec:	f7de fda4 	bl	8000638 <__aeabi_dmul>
 8021af0:	a373      	add	r3, pc, #460	; (adr r3, 8021cc0 <__ieee754_pow+0x728>)
 8021af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021af6:	f7de fbe9 	bl	80002cc <__adddf3>
 8021afa:	4622      	mov	r2, r4
 8021afc:	462b      	mov	r3, r5
 8021afe:	f7de fd9b 	bl	8000638 <__aeabi_dmul>
 8021b02:	a371      	add	r3, pc, #452	; (adr r3, 8021cc8 <__ieee754_pow+0x730>)
 8021b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b08:	f7de fbe0 	bl	80002cc <__adddf3>
 8021b0c:	4622      	mov	r2, r4
 8021b0e:	4606      	mov	r6, r0
 8021b10:	460f      	mov	r7, r1
 8021b12:	462b      	mov	r3, r5
 8021b14:	4620      	mov	r0, r4
 8021b16:	4629      	mov	r1, r5
 8021b18:	f7de fd8e 	bl	8000638 <__aeabi_dmul>
 8021b1c:	4602      	mov	r2, r0
 8021b1e:	460b      	mov	r3, r1
 8021b20:	4630      	mov	r0, r6
 8021b22:	4639      	mov	r1, r7
 8021b24:	f7de fd88 	bl	8000638 <__aeabi_dmul>
 8021b28:	4642      	mov	r2, r8
 8021b2a:	4604      	mov	r4, r0
 8021b2c:	460d      	mov	r5, r1
 8021b2e:	464b      	mov	r3, r9
 8021b30:	ec51 0b18 	vmov	r0, r1, d8
 8021b34:	f7de fbca 	bl	80002cc <__adddf3>
 8021b38:	ec53 2b19 	vmov	r2, r3, d9
 8021b3c:	f7de fd7c 	bl	8000638 <__aeabi_dmul>
 8021b40:	4622      	mov	r2, r4
 8021b42:	462b      	mov	r3, r5
 8021b44:	f7de fbc2 	bl	80002cc <__adddf3>
 8021b48:	4642      	mov	r2, r8
 8021b4a:	4682      	mov	sl, r0
 8021b4c:	468b      	mov	fp, r1
 8021b4e:	464b      	mov	r3, r9
 8021b50:	4640      	mov	r0, r8
 8021b52:	4649      	mov	r1, r9
 8021b54:	f7de fd70 	bl	8000638 <__aeabi_dmul>
 8021b58:	4b6b      	ldr	r3, [pc, #428]	; (8021d08 <__ieee754_pow+0x770>)
 8021b5a:	2200      	movs	r2, #0
 8021b5c:	4606      	mov	r6, r0
 8021b5e:	460f      	mov	r7, r1
 8021b60:	f7de fbb4 	bl	80002cc <__adddf3>
 8021b64:	4652      	mov	r2, sl
 8021b66:	465b      	mov	r3, fp
 8021b68:	f7de fbb0 	bl	80002cc <__adddf3>
 8021b6c:	2000      	movs	r0, #0
 8021b6e:	4604      	mov	r4, r0
 8021b70:	460d      	mov	r5, r1
 8021b72:	4602      	mov	r2, r0
 8021b74:	460b      	mov	r3, r1
 8021b76:	4640      	mov	r0, r8
 8021b78:	4649      	mov	r1, r9
 8021b7a:	f7de fd5d 	bl	8000638 <__aeabi_dmul>
 8021b7e:	4b62      	ldr	r3, [pc, #392]	; (8021d08 <__ieee754_pow+0x770>)
 8021b80:	4680      	mov	r8, r0
 8021b82:	4689      	mov	r9, r1
 8021b84:	2200      	movs	r2, #0
 8021b86:	4620      	mov	r0, r4
 8021b88:	4629      	mov	r1, r5
 8021b8a:	f7de fb9d 	bl	80002c8 <__aeabi_dsub>
 8021b8e:	4632      	mov	r2, r6
 8021b90:	463b      	mov	r3, r7
 8021b92:	f7de fb99 	bl	80002c8 <__aeabi_dsub>
 8021b96:	4602      	mov	r2, r0
 8021b98:	460b      	mov	r3, r1
 8021b9a:	4650      	mov	r0, sl
 8021b9c:	4659      	mov	r1, fp
 8021b9e:	f7de fb93 	bl	80002c8 <__aeabi_dsub>
 8021ba2:	ec53 2b18 	vmov	r2, r3, d8
 8021ba6:	f7de fd47 	bl	8000638 <__aeabi_dmul>
 8021baa:	4622      	mov	r2, r4
 8021bac:	4606      	mov	r6, r0
 8021bae:	460f      	mov	r7, r1
 8021bb0:	462b      	mov	r3, r5
 8021bb2:	ec51 0b19 	vmov	r0, r1, d9
 8021bb6:	f7de fd3f 	bl	8000638 <__aeabi_dmul>
 8021bba:	4602      	mov	r2, r0
 8021bbc:	460b      	mov	r3, r1
 8021bbe:	4630      	mov	r0, r6
 8021bc0:	4639      	mov	r1, r7
 8021bc2:	f7de fb83 	bl	80002cc <__adddf3>
 8021bc6:	4606      	mov	r6, r0
 8021bc8:	460f      	mov	r7, r1
 8021bca:	4602      	mov	r2, r0
 8021bcc:	460b      	mov	r3, r1
 8021bce:	4640      	mov	r0, r8
 8021bd0:	4649      	mov	r1, r9
 8021bd2:	f7de fb7b 	bl	80002cc <__adddf3>
 8021bd6:	a33e      	add	r3, pc, #248	; (adr r3, 8021cd0 <__ieee754_pow+0x738>)
 8021bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bdc:	2000      	movs	r0, #0
 8021bde:	4604      	mov	r4, r0
 8021be0:	460d      	mov	r5, r1
 8021be2:	f7de fd29 	bl	8000638 <__aeabi_dmul>
 8021be6:	4642      	mov	r2, r8
 8021be8:	ec41 0b18 	vmov	d8, r0, r1
 8021bec:	464b      	mov	r3, r9
 8021bee:	4620      	mov	r0, r4
 8021bf0:	4629      	mov	r1, r5
 8021bf2:	f7de fb69 	bl	80002c8 <__aeabi_dsub>
 8021bf6:	4602      	mov	r2, r0
 8021bf8:	460b      	mov	r3, r1
 8021bfa:	4630      	mov	r0, r6
 8021bfc:	4639      	mov	r1, r7
 8021bfe:	f7de fb63 	bl	80002c8 <__aeabi_dsub>
 8021c02:	a335      	add	r3, pc, #212	; (adr r3, 8021cd8 <__ieee754_pow+0x740>)
 8021c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c08:	f7de fd16 	bl	8000638 <__aeabi_dmul>
 8021c0c:	a334      	add	r3, pc, #208	; (adr r3, 8021ce0 <__ieee754_pow+0x748>)
 8021c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c12:	4606      	mov	r6, r0
 8021c14:	460f      	mov	r7, r1
 8021c16:	4620      	mov	r0, r4
 8021c18:	4629      	mov	r1, r5
 8021c1a:	f7de fd0d 	bl	8000638 <__aeabi_dmul>
 8021c1e:	4602      	mov	r2, r0
 8021c20:	460b      	mov	r3, r1
 8021c22:	4630      	mov	r0, r6
 8021c24:	4639      	mov	r1, r7
 8021c26:	f7de fb51 	bl	80002cc <__adddf3>
 8021c2a:	9a07      	ldr	r2, [sp, #28]
 8021c2c:	4b37      	ldr	r3, [pc, #220]	; (8021d0c <__ieee754_pow+0x774>)
 8021c2e:	4413      	add	r3, r2
 8021c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c34:	f7de fb4a 	bl	80002cc <__adddf3>
 8021c38:	4682      	mov	sl, r0
 8021c3a:	9805      	ldr	r0, [sp, #20]
 8021c3c:	468b      	mov	fp, r1
 8021c3e:	f7de fc91 	bl	8000564 <__aeabi_i2d>
 8021c42:	9a07      	ldr	r2, [sp, #28]
 8021c44:	4b32      	ldr	r3, [pc, #200]	; (8021d10 <__ieee754_pow+0x778>)
 8021c46:	4413      	add	r3, r2
 8021c48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021c4c:	4606      	mov	r6, r0
 8021c4e:	460f      	mov	r7, r1
 8021c50:	4652      	mov	r2, sl
 8021c52:	465b      	mov	r3, fp
 8021c54:	ec51 0b18 	vmov	r0, r1, d8
 8021c58:	f7de fb38 	bl	80002cc <__adddf3>
 8021c5c:	4642      	mov	r2, r8
 8021c5e:	464b      	mov	r3, r9
 8021c60:	f7de fb34 	bl	80002cc <__adddf3>
 8021c64:	4632      	mov	r2, r6
 8021c66:	463b      	mov	r3, r7
 8021c68:	f7de fb30 	bl	80002cc <__adddf3>
 8021c6c:	2000      	movs	r0, #0
 8021c6e:	4632      	mov	r2, r6
 8021c70:	463b      	mov	r3, r7
 8021c72:	4604      	mov	r4, r0
 8021c74:	460d      	mov	r5, r1
 8021c76:	f7de fb27 	bl	80002c8 <__aeabi_dsub>
 8021c7a:	4642      	mov	r2, r8
 8021c7c:	464b      	mov	r3, r9
 8021c7e:	f7de fb23 	bl	80002c8 <__aeabi_dsub>
 8021c82:	ec53 2b18 	vmov	r2, r3, d8
 8021c86:	f7de fb1f 	bl	80002c8 <__aeabi_dsub>
 8021c8a:	4602      	mov	r2, r0
 8021c8c:	460b      	mov	r3, r1
 8021c8e:	4650      	mov	r0, sl
 8021c90:	4659      	mov	r1, fp
 8021c92:	e610      	b.n	80218b6 <__ieee754_pow+0x31e>
 8021c94:	2401      	movs	r4, #1
 8021c96:	e6a1      	b.n	80219dc <__ieee754_pow+0x444>
 8021c98:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8021ce8 <__ieee754_pow+0x750>
 8021c9c:	e617      	b.n	80218ce <__ieee754_pow+0x336>
 8021c9e:	bf00      	nop
 8021ca0:	4a454eef 	.word	0x4a454eef
 8021ca4:	3fca7e28 	.word	0x3fca7e28
 8021ca8:	93c9db65 	.word	0x93c9db65
 8021cac:	3fcd864a 	.word	0x3fcd864a
 8021cb0:	a91d4101 	.word	0xa91d4101
 8021cb4:	3fd17460 	.word	0x3fd17460
 8021cb8:	518f264d 	.word	0x518f264d
 8021cbc:	3fd55555 	.word	0x3fd55555
 8021cc0:	db6fabff 	.word	0xdb6fabff
 8021cc4:	3fdb6db6 	.word	0x3fdb6db6
 8021cc8:	33333303 	.word	0x33333303
 8021ccc:	3fe33333 	.word	0x3fe33333
 8021cd0:	e0000000 	.word	0xe0000000
 8021cd4:	3feec709 	.word	0x3feec709
 8021cd8:	dc3a03fd 	.word	0xdc3a03fd
 8021cdc:	3feec709 	.word	0x3feec709
 8021ce0:	145b01f5 	.word	0x145b01f5
 8021ce4:	be3e2fe0 	.word	0xbe3e2fe0
 8021ce8:	00000000 	.word	0x00000000
 8021cec:	3ff00000 	.word	0x3ff00000
 8021cf0:	7ff00000 	.word	0x7ff00000
 8021cf4:	43400000 	.word	0x43400000
 8021cf8:	0003988e 	.word	0x0003988e
 8021cfc:	000bb679 	.word	0x000bb679
 8021d00:	08027428 	.word	0x08027428
 8021d04:	3ff00000 	.word	0x3ff00000
 8021d08:	40080000 	.word	0x40080000
 8021d0c:	08027448 	.word	0x08027448
 8021d10:	08027438 	.word	0x08027438
 8021d14:	a3b5      	add	r3, pc, #724	; (adr r3, 8021fec <__ieee754_pow+0xa54>)
 8021d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d1a:	4640      	mov	r0, r8
 8021d1c:	4649      	mov	r1, r9
 8021d1e:	f7de fad5 	bl	80002cc <__adddf3>
 8021d22:	4622      	mov	r2, r4
 8021d24:	ec41 0b1a 	vmov	d10, r0, r1
 8021d28:	462b      	mov	r3, r5
 8021d2a:	4630      	mov	r0, r6
 8021d2c:	4639      	mov	r1, r7
 8021d2e:	f7de facb 	bl	80002c8 <__aeabi_dsub>
 8021d32:	4602      	mov	r2, r0
 8021d34:	460b      	mov	r3, r1
 8021d36:	ec51 0b1a 	vmov	r0, r1, d10
 8021d3a:	f7de ff0d 	bl	8000b58 <__aeabi_dcmpgt>
 8021d3e:	2800      	cmp	r0, #0
 8021d40:	f47f ae04 	bne.w	802194c <__ieee754_pow+0x3b4>
 8021d44:	4aa4      	ldr	r2, [pc, #656]	; (8021fd8 <__ieee754_pow+0xa40>)
 8021d46:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8021d4a:	4293      	cmp	r3, r2
 8021d4c:	f340 8108 	ble.w	8021f60 <__ieee754_pow+0x9c8>
 8021d50:	151b      	asrs	r3, r3, #20
 8021d52:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8021d56:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8021d5a:	fa4a f303 	asr.w	r3, sl, r3
 8021d5e:	445b      	add	r3, fp
 8021d60:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8021d64:	4e9d      	ldr	r6, [pc, #628]	; (8021fdc <__ieee754_pow+0xa44>)
 8021d66:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8021d6a:	4116      	asrs	r6, r2
 8021d6c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8021d70:	2000      	movs	r0, #0
 8021d72:	ea23 0106 	bic.w	r1, r3, r6
 8021d76:	f1c2 0214 	rsb	r2, r2, #20
 8021d7a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8021d7e:	fa4a fa02 	asr.w	sl, sl, r2
 8021d82:	f1bb 0f00 	cmp.w	fp, #0
 8021d86:	4602      	mov	r2, r0
 8021d88:	460b      	mov	r3, r1
 8021d8a:	4620      	mov	r0, r4
 8021d8c:	4629      	mov	r1, r5
 8021d8e:	bfb8      	it	lt
 8021d90:	f1ca 0a00 	rsblt	sl, sl, #0
 8021d94:	f7de fa98 	bl	80002c8 <__aeabi_dsub>
 8021d98:	ec41 0b19 	vmov	d9, r0, r1
 8021d9c:	4642      	mov	r2, r8
 8021d9e:	464b      	mov	r3, r9
 8021da0:	ec51 0b19 	vmov	r0, r1, d9
 8021da4:	f7de fa92 	bl	80002cc <__adddf3>
 8021da8:	a37b      	add	r3, pc, #492	; (adr r3, 8021f98 <__ieee754_pow+0xa00>)
 8021daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021dae:	2000      	movs	r0, #0
 8021db0:	4604      	mov	r4, r0
 8021db2:	460d      	mov	r5, r1
 8021db4:	f7de fc40 	bl	8000638 <__aeabi_dmul>
 8021db8:	ec53 2b19 	vmov	r2, r3, d9
 8021dbc:	4606      	mov	r6, r0
 8021dbe:	460f      	mov	r7, r1
 8021dc0:	4620      	mov	r0, r4
 8021dc2:	4629      	mov	r1, r5
 8021dc4:	f7de fa80 	bl	80002c8 <__aeabi_dsub>
 8021dc8:	4602      	mov	r2, r0
 8021dca:	460b      	mov	r3, r1
 8021dcc:	4640      	mov	r0, r8
 8021dce:	4649      	mov	r1, r9
 8021dd0:	f7de fa7a 	bl	80002c8 <__aeabi_dsub>
 8021dd4:	a372      	add	r3, pc, #456	; (adr r3, 8021fa0 <__ieee754_pow+0xa08>)
 8021dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021dda:	f7de fc2d 	bl	8000638 <__aeabi_dmul>
 8021dde:	a372      	add	r3, pc, #456	; (adr r3, 8021fa8 <__ieee754_pow+0xa10>)
 8021de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021de4:	4680      	mov	r8, r0
 8021de6:	4689      	mov	r9, r1
 8021de8:	4620      	mov	r0, r4
 8021dea:	4629      	mov	r1, r5
 8021dec:	f7de fc24 	bl	8000638 <__aeabi_dmul>
 8021df0:	4602      	mov	r2, r0
 8021df2:	460b      	mov	r3, r1
 8021df4:	4640      	mov	r0, r8
 8021df6:	4649      	mov	r1, r9
 8021df8:	f7de fa68 	bl	80002cc <__adddf3>
 8021dfc:	4604      	mov	r4, r0
 8021dfe:	460d      	mov	r5, r1
 8021e00:	4602      	mov	r2, r0
 8021e02:	460b      	mov	r3, r1
 8021e04:	4630      	mov	r0, r6
 8021e06:	4639      	mov	r1, r7
 8021e08:	f7de fa60 	bl	80002cc <__adddf3>
 8021e0c:	4632      	mov	r2, r6
 8021e0e:	463b      	mov	r3, r7
 8021e10:	4680      	mov	r8, r0
 8021e12:	4689      	mov	r9, r1
 8021e14:	f7de fa58 	bl	80002c8 <__aeabi_dsub>
 8021e18:	4602      	mov	r2, r0
 8021e1a:	460b      	mov	r3, r1
 8021e1c:	4620      	mov	r0, r4
 8021e1e:	4629      	mov	r1, r5
 8021e20:	f7de fa52 	bl	80002c8 <__aeabi_dsub>
 8021e24:	4642      	mov	r2, r8
 8021e26:	4606      	mov	r6, r0
 8021e28:	460f      	mov	r7, r1
 8021e2a:	464b      	mov	r3, r9
 8021e2c:	4640      	mov	r0, r8
 8021e2e:	4649      	mov	r1, r9
 8021e30:	f7de fc02 	bl	8000638 <__aeabi_dmul>
 8021e34:	a35e      	add	r3, pc, #376	; (adr r3, 8021fb0 <__ieee754_pow+0xa18>)
 8021e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e3a:	4604      	mov	r4, r0
 8021e3c:	460d      	mov	r5, r1
 8021e3e:	f7de fbfb 	bl	8000638 <__aeabi_dmul>
 8021e42:	a35d      	add	r3, pc, #372	; (adr r3, 8021fb8 <__ieee754_pow+0xa20>)
 8021e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e48:	f7de fa3e 	bl	80002c8 <__aeabi_dsub>
 8021e4c:	4622      	mov	r2, r4
 8021e4e:	462b      	mov	r3, r5
 8021e50:	f7de fbf2 	bl	8000638 <__aeabi_dmul>
 8021e54:	a35a      	add	r3, pc, #360	; (adr r3, 8021fc0 <__ieee754_pow+0xa28>)
 8021e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e5a:	f7de fa37 	bl	80002cc <__adddf3>
 8021e5e:	4622      	mov	r2, r4
 8021e60:	462b      	mov	r3, r5
 8021e62:	f7de fbe9 	bl	8000638 <__aeabi_dmul>
 8021e66:	a358      	add	r3, pc, #352	; (adr r3, 8021fc8 <__ieee754_pow+0xa30>)
 8021e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e6c:	f7de fa2c 	bl	80002c8 <__aeabi_dsub>
 8021e70:	4622      	mov	r2, r4
 8021e72:	462b      	mov	r3, r5
 8021e74:	f7de fbe0 	bl	8000638 <__aeabi_dmul>
 8021e78:	a355      	add	r3, pc, #340	; (adr r3, 8021fd0 <__ieee754_pow+0xa38>)
 8021e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e7e:	f7de fa25 	bl	80002cc <__adddf3>
 8021e82:	4622      	mov	r2, r4
 8021e84:	462b      	mov	r3, r5
 8021e86:	f7de fbd7 	bl	8000638 <__aeabi_dmul>
 8021e8a:	4602      	mov	r2, r0
 8021e8c:	460b      	mov	r3, r1
 8021e8e:	4640      	mov	r0, r8
 8021e90:	4649      	mov	r1, r9
 8021e92:	f7de fa19 	bl	80002c8 <__aeabi_dsub>
 8021e96:	4604      	mov	r4, r0
 8021e98:	460d      	mov	r5, r1
 8021e9a:	4602      	mov	r2, r0
 8021e9c:	460b      	mov	r3, r1
 8021e9e:	4640      	mov	r0, r8
 8021ea0:	4649      	mov	r1, r9
 8021ea2:	f7de fbc9 	bl	8000638 <__aeabi_dmul>
 8021ea6:	2200      	movs	r2, #0
 8021ea8:	ec41 0b19 	vmov	d9, r0, r1
 8021eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021eb0:	4620      	mov	r0, r4
 8021eb2:	4629      	mov	r1, r5
 8021eb4:	f7de fa08 	bl	80002c8 <__aeabi_dsub>
 8021eb8:	4602      	mov	r2, r0
 8021eba:	460b      	mov	r3, r1
 8021ebc:	ec51 0b19 	vmov	r0, r1, d9
 8021ec0:	f7de fce4 	bl	800088c <__aeabi_ddiv>
 8021ec4:	4632      	mov	r2, r6
 8021ec6:	4604      	mov	r4, r0
 8021ec8:	460d      	mov	r5, r1
 8021eca:	463b      	mov	r3, r7
 8021ecc:	4640      	mov	r0, r8
 8021ece:	4649      	mov	r1, r9
 8021ed0:	f7de fbb2 	bl	8000638 <__aeabi_dmul>
 8021ed4:	4632      	mov	r2, r6
 8021ed6:	463b      	mov	r3, r7
 8021ed8:	f7de f9f8 	bl	80002cc <__adddf3>
 8021edc:	4602      	mov	r2, r0
 8021ede:	460b      	mov	r3, r1
 8021ee0:	4620      	mov	r0, r4
 8021ee2:	4629      	mov	r1, r5
 8021ee4:	f7de f9f0 	bl	80002c8 <__aeabi_dsub>
 8021ee8:	4642      	mov	r2, r8
 8021eea:	464b      	mov	r3, r9
 8021eec:	f7de f9ec 	bl	80002c8 <__aeabi_dsub>
 8021ef0:	460b      	mov	r3, r1
 8021ef2:	4602      	mov	r2, r0
 8021ef4:	493a      	ldr	r1, [pc, #232]	; (8021fe0 <__ieee754_pow+0xa48>)
 8021ef6:	2000      	movs	r0, #0
 8021ef8:	f7de f9e6 	bl	80002c8 <__aeabi_dsub>
 8021efc:	ec41 0b10 	vmov	d0, r0, r1
 8021f00:	ee10 3a90 	vmov	r3, s1
 8021f04:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8021f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021f0c:	da2b      	bge.n	8021f66 <__ieee754_pow+0x9ce>
 8021f0e:	4650      	mov	r0, sl
 8021f10:	f000 f966 	bl	80221e0 <scalbn>
 8021f14:	ec51 0b10 	vmov	r0, r1, d0
 8021f18:	ec53 2b18 	vmov	r2, r3, d8
 8021f1c:	f7ff bbed 	b.w	80216fa <__ieee754_pow+0x162>
 8021f20:	4b30      	ldr	r3, [pc, #192]	; (8021fe4 <__ieee754_pow+0xa4c>)
 8021f22:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8021f26:	429e      	cmp	r6, r3
 8021f28:	f77f af0c 	ble.w	8021d44 <__ieee754_pow+0x7ac>
 8021f2c:	4b2e      	ldr	r3, [pc, #184]	; (8021fe8 <__ieee754_pow+0xa50>)
 8021f2e:	440b      	add	r3, r1
 8021f30:	4303      	orrs	r3, r0
 8021f32:	d009      	beq.n	8021f48 <__ieee754_pow+0x9b0>
 8021f34:	ec51 0b18 	vmov	r0, r1, d8
 8021f38:	2200      	movs	r2, #0
 8021f3a:	2300      	movs	r3, #0
 8021f3c:	f7de fdee 	bl	8000b1c <__aeabi_dcmplt>
 8021f40:	3800      	subs	r0, #0
 8021f42:	bf18      	it	ne
 8021f44:	2001      	movne	r0, #1
 8021f46:	e447      	b.n	80217d8 <__ieee754_pow+0x240>
 8021f48:	4622      	mov	r2, r4
 8021f4a:	462b      	mov	r3, r5
 8021f4c:	f7de f9bc 	bl	80002c8 <__aeabi_dsub>
 8021f50:	4642      	mov	r2, r8
 8021f52:	464b      	mov	r3, r9
 8021f54:	f7de fdf6 	bl	8000b44 <__aeabi_dcmpge>
 8021f58:	2800      	cmp	r0, #0
 8021f5a:	f43f aef3 	beq.w	8021d44 <__ieee754_pow+0x7ac>
 8021f5e:	e7e9      	b.n	8021f34 <__ieee754_pow+0x99c>
 8021f60:	f04f 0a00 	mov.w	sl, #0
 8021f64:	e71a      	b.n	8021d9c <__ieee754_pow+0x804>
 8021f66:	ec51 0b10 	vmov	r0, r1, d0
 8021f6a:	4619      	mov	r1, r3
 8021f6c:	e7d4      	b.n	8021f18 <__ieee754_pow+0x980>
 8021f6e:	491c      	ldr	r1, [pc, #112]	; (8021fe0 <__ieee754_pow+0xa48>)
 8021f70:	2000      	movs	r0, #0
 8021f72:	f7ff bb30 	b.w	80215d6 <__ieee754_pow+0x3e>
 8021f76:	2000      	movs	r0, #0
 8021f78:	2100      	movs	r1, #0
 8021f7a:	f7ff bb2c 	b.w	80215d6 <__ieee754_pow+0x3e>
 8021f7e:	4630      	mov	r0, r6
 8021f80:	4639      	mov	r1, r7
 8021f82:	f7ff bb28 	b.w	80215d6 <__ieee754_pow+0x3e>
 8021f86:	9204      	str	r2, [sp, #16]
 8021f88:	f7ff bb7a 	b.w	8021680 <__ieee754_pow+0xe8>
 8021f8c:	2300      	movs	r3, #0
 8021f8e:	f7ff bb64 	b.w	802165a <__ieee754_pow+0xc2>
 8021f92:	bf00      	nop
 8021f94:	f3af 8000 	nop.w
 8021f98:	00000000 	.word	0x00000000
 8021f9c:	3fe62e43 	.word	0x3fe62e43
 8021fa0:	fefa39ef 	.word	0xfefa39ef
 8021fa4:	3fe62e42 	.word	0x3fe62e42
 8021fa8:	0ca86c39 	.word	0x0ca86c39
 8021fac:	be205c61 	.word	0xbe205c61
 8021fb0:	72bea4d0 	.word	0x72bea4d0
 8021fb4:	3e663769 	.word	0x3e663769
 8021fb8:	c5d26bf1 	.word	0xc5d26bf1
 8021fbc:	3ebbbd41 	.word	0x3ebbbd41
 8021fc0:	af25de2c 	.word	0xaf25de2c
 8021fc4:	3f11566a 	.word	0x3f11566a
 8021fc8:	16bebd93 	.word	0x16bebd93
 8021fcc:	3f66c16c 	.word	0x3f66c16c
 8021fd0:	5555553e 	.word	0x5555553e
 8021fd4:	3fc55555 	.word	0x3fc55555
 8021fd8:	3fe00000 	.word	0x3fe00000
 8021fdc:	000fffff 	.word	0x000fffff
 8021fe0:	3ff00000 	.word	0x3ff00000
 8021fe4:	4090cbff 	.word	0x4090cbff
 8021fe8:	3f6f3400 	.word	0x3f6f3400
 8021fec:	652b82fe 	.word	0x652b82fe
 8021ff0:	3c971547 	.word	0x3c971547

08021ff4 <__ieee754_sqrt>:
 8021ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ff8:	ec55 4b10 	vmov	r4, r5, d0
 8021ffc:	4e55      	ldr	r6, [pc, #340]	; (8022154 <__ieee754_sqrt+0x160>)
 8021ffe:	43ae      	bics	r6, r5
 8022000:	ee10 0a10 	vmov	r0, s0
 8022004:	ee10 3a10 	vmov	r3, s0
 8022008:	462a      	mov	r2, r5
 802200a:	4629      	mov	r1, r5
 802200c:	d110      	bne.n	8022030 <__ieee754_sqrt+0x3c>
 802200e:	ee10 2a10 	vmov	r2, s0
 8022012:	462b      	mov	r3, r5
 8022014:	f7de fb10 	bl	8000638 <__aeabi_dmul>
 8022018:	4602      	mov	r2, r0
 802201a:	460b      	mov	r3, r1
 802201c:	4620      	mov	r0, r4
 802201e:	4629      	mov	r1, r5
 8022020:	f7de f954 	bl	80002cc <__adddf3>
 8022024:	4604      	mov	r4, r0
 8022026:	460d      	mov	r5, r1
 8022028:	ec45 4b10 	vmov	d0, r4, r5
 802202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022030:	2d00      	cmp	r5, #0
 8022032:	dc10      	bgt.n	8022056 <__ieee754_sqrt+0x62>
 8022034:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8022038:	4330      	orrs	r0, r6
 802203a:	d0f5      	beq.n	8022028 <__ieee754_sqrt+0x34>
 802203c:	b15d      	cbz	r5, 8022056 <__ieee754_sqrt+0x62>
 802203e:	ee10 2a10 	vmov	r2, s0
 8022042:	462b      	mov	r3, r5
 8022044:	ee10 0a10 	vmov	r0, s0
 8022048:	f7de f93e 	bl	80002c8 <__aeabi_dsub>
 802204c:	4602      	mov	r2, r0
 802204e:	460b      	mov	r3, r1
 8022050:	f7de fc1c 	bl	800088c <__aeabi_ddiv>
 8022054:	e7e6      	b.n	8022024 <__ieee754_sqrt+0x30>
 8022056:	1512      	asrs	r2, r2, #20
 8022058:	d074      	beq.n	8022144 <__ieee754_sqrt+0x150>
 802205a:	07d4      	lsls	r4, r2, #31
 802205c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8022060:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8022064:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8022068:	bf5e      	ittt	pl
 802206a:	0fda      	lsrpl	r2, r3, #31
 802206c:	005b      	lslpl	r3, r3, #1
 802206e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8022072:	2400      	movs	r4, #0
 8022074:	0fda      	lsrs	r2, r3, #31
 8022076:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 802207a:	107f      	asrs	r7, r7, #1
 802207c:	005b      	lsls	r3, r3, #1
 802207e:	2516      	movs	r5, #22
 8022080:	4620      	mov	r0, r4
 8022082:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8022086:	1886      	adds	r6, r0, r2
 8022088:	428e      	cmp	r6, r1
 802208a:	bfde      	ittt	le
 802208c:	1b89      	suble	r1, r1, r6
 802208e:	18b0      	addle	r0, r6, r2
 8022090:	18a4      	addle	r4, r4, r2
 8022092:	0049      	lsls	r1, r1, #1
 8022094:	3d01      	subs	r5, #1
 8022096:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 802209a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 802209e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80220a2:	d1f0      	bne.n	8022086 <__ieee754_sqrt+0x92>
 80220a4:	462a      	mov	r2, r5
 80220a6:	f04f 0e20 	mov.w	lr, #32
 80220aa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80220ae:	4281      	cmp	r1, r0
 80220b0:	eb06 0c05 	add.w	ip, r6, r5
 80220b4:	dc02      	bgt.n	80220bc <__ieee754_sqrt+0xc8>
 80220b6:	d113      	bne.n	80220e0 <__ieee754_sqrt+0xec>
 80220b8:	459c      	cmp	ip, r3
 80220ba:	d811      	bhi.n	80220e0 <__ieee754_sqrt+0xec>
 80220bc:	f1bc 0f00 	cmp.w	ip, #0
 80220c0:	eb0c 0506 	add.w	r5, ip, r6
 80220c4:	da43      	bge.n	802214e <__ieee754_sqrt+0x15a>
 80220c6:	2d00      	cmp	r5, #0
 80220c8:	db41      	blt.n	802214e <__ieee754_sqrt+0x15a>
 80220ca:	f100 0801 	add.w	r8, r0, #1
 80220ce:	1a09      	subs	r1, r1, r0
 80220d0:	459c      	cmp	ip, r3
 80220d2:	bf88      	it	hi
 80220d4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80220d8:	eba3 030c 	sub.w	r3, r3, ip
 80220dc:	4432      	add	r2, r6
 80220de:	4640      	mov	r0, r8
 80220e0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80220e4:	f1be 0e01 	subs.w	lr, lr, #1
 80220e8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80220ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80220f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80220f4:	d1db      	bne.n	80220ae <__ieee754_sqrt+0xba>
 80220f6:	430b      	orrs	r3, r1
 80220f8:	d006      	beq.n	8022108 <__ieee754_sqrt+0x114>
 80220fa:	1c50      	adds	r0, r2, #1
 80220fc:	bf13      	iteet	ne
 80220fe:	3201      	addne	r2, #1
 8022100:	3401      	addeq	r4, #1
 8022102:	4672      	moveq	r2, lr
 8022104:	f022 0201 	bicne.w	r2, r2, #1
 8022108:	1063      	asrs	r3, r4, #1
 802210a:	0852      	lsrs	r2, r2, #1
 802210c:	07e1      	lsls	r1, r4, #31
 802210e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8022112:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8022116:	bf48      	it	mi
 8022118:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 802211c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8022120:	4614      	mov	r4, r2
 8022122:	e781      	b.n	8022028 <__ieee754_sqrt+0x34>
 8022124:	0ad9      	lsrs	r1, r3, #11
 8022126:	3815      	subs	r0, #21
 8022128:	055b      	lsls	r3, r3, #21
 802212a:	2900      	cmp	r1, #0
 802212c:	d0fa      	beq.n	8022124 <__ieee754_sqrt+0x130>
 802212e:	02cd      	lsls	r5, r1, #11
 8022130:	d50a      	bpl.n	8022148 <__ieee754_sqrt+0x154>
 8022132:	f1c2 0420 	rsb	r4, r2, #32
 8022136:	fa23 f404 	lsr.w	r4, r3, r4
 802213a:	1e55      	subs	r5, r2, #1
 802213c:	4093      	lsls	r3, r2
 802213e:	4321      	orrs	r1, r4
 8022140:	1b42      	subs	r2, r0, r5
 8022142:	e78a      	b.n	802205a <__ieee754_sqrt+0x66>
 8022144:	4610      	mov	r0, r2
 8022146:	e7f0      	b.n	802212a <__ieee754_sqrt+0x136>
 8022148:	0049      	lsls	r1, r1, #1
 802214a:	3201      	adds	r2, #1
 802214c:	e7ef      	b.n	802212e <__ieee754_sqrt+0x13a>
 802214e:	4680      	mov	r8, r0
 8022150:	e7bd      	b.n	80220ce <__ieee754_sqrt+0xda>
 8022152:	bf00      	nop
 8022154:	7ff00000 	.word	0x7ff00000

08022158 <with_errno>:
 8022158:	b570      	push	{r4, r5, r6, lr}
 802215a:	4604      	mov	r4, r0
 802215c:	460d      	mov	r5, r1
 802215e:	4616      	mov	r6, r2
 8022160:	f000 f8d2 	bl	8022308 <__errno>
 8022164:	4629      	mov	r1, r5
 8022166:	6006      	str	r6, [r0, #0]
 8022168:	4620      	mov	r0, r4
 802216a:	bd70      	pop	{r4, r5, r6, pc}

0802216c <xflow>:
 802216c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802216e:	4614      	mov	r4, r2
 8022170:	461d      	mov	r5, r3
 8022172:	b108      	cbz	r0, 8022178 <xflow+0xc>
 8022174:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022178:	e9cd 2300 	strd	r2, r3, [sp]
 802217c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022180:	4620      	mov	r0, r4
 8022182:	4629      	mov	r1, r5
 8022184:	f7de fa58 	bl	8000638 <__aeabi_dmul>
 8022188:	2222      	movs	r2, #34	; 0x22
 802218a:	b003      	add	sp, #12
 802218c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022190:	f7ff bfe2 	b.w	8022158 <with_errno>

08022194 <__math_uflow>:
 8022194:	b508      	push	{r3, lr}
 8022196:	2200      	movs	r2, #0
 8022198:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 802219c:	f7ff ffe6 	bl	802216c <xflow>
 80221a0:	ec41 0b10 	vmov	d0, r0, r1
 80221a4:	bd08      	pop	{r3, pc}

080221a6 <__math_oflow>:
 80221a6:	b508      	push	{r3, lr}
 80221a8:	2200      	movs	r2, #0
 80221aa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80221ae:	f7ff ffdd 	bl	802216c <xflow>
 80221b2:	ec41 0b10 	vmov	d0, r0, r1
 80221b6:	bd08      	pop	{r3, pc}

080221b8 <fabs>:
 80221b8:	ec51 0b10 	vmov	r0, r1, d0
 80221bc:	ee10 2a10 	vmov	r2, s0
 80221c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80221c4:	ec43 2b10 	vmov	d0, r2, r3
 80221c8:	4770      	bx	lr

080221ca <finite>:
 80221ca:	b082      	sub	sp, #8
 80221cc:	ed8d 0b00 	vstr	d0, [sp]
 80221d0:	9801      	ldr	r0, [sp, #4]
 80221d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80221d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80221da:	0fc0      	lsrs	r0, r0, #31
 80221dc:	b002      	add	sp, #8
 80221de:	4770      	bx	lr

080221e0 <scalbn>:
 80221e0:	b570      	push	{r4, r5, r6, lr}
 80221e2:	ec55 4b10 	vmov	r4, r5, d0
 80221e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80221ea:	4606      	mov	r6, r0
 80221ec:	462b      	mov	r3, r5
 80221ee:	b99a      	cbnz	r2, 8022218 <scalbn+0x38>
 80221f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80221f4:	4323      	orrs	r3, r4
 80221f6:	d036      	beq.n	8022266 <scalbn+0x86>
 80221f8:	4b39      	ldr	r3, [pc, #228]	; (80222e0 <scalbn+0x100>)
 80221fa:	4629      	mov	r1, r5
 80221fc:	ee10 0a10 	vmov	r0, s0
 8022200:	2200      	movs	r2, #0
 8022202:	f7de fa19 	bl	8000638 <__aeabi_dmul>
 8022206:	4b37      	ldr	r3, [pc, #220]	; (80222e4 <scalbn+0x104>)
 8022208:	429e      	cmp	r6, r3
 802220a:	4604      	mov	r4, r0
 802220c:	460d      	mov	r5, r1
 802220e:	da10      	bge.n	8022232 <scalbn+0x52>
 8022210:	a32b      	add	r3, pc, #172	; (adr r3, 80222c0 <scalbn+0xe0>)
 8022212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022216:	e03a      	b.n	802228e <scalbn+0xae>
 8022218:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802221c:	428a      	cmp	r2, r1
 802221e:	d10c      	bne.n	802223a <scalbn+0x5a>
 8022220:	ee10 2a10 	vmov	r2, s0
 8022224:	4620      	mov	r0, r4
 8022226:	4629      	mov	r1, r5
 8022228:	f7de f850 	bl	80002cc <__adddf3>
 802222c:	4604      	mov	r4, r0
 802222e:	460d      	mov	r5, r1
 8022230:	e019      	b.n	8022266 <scalbn+0x86>
 8022232:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8022236:	460b      	mov	r3, r1
 8022238:	3a36      	subs	r2, #54	; 0x36
 802223a:	4432      	add	r2, r6
 802223c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8022240:	428a      	cmp	r2, r1
 8022242:	dd08      	ble.n	8022256 <scalbn+0x76>
 8022244:	2d00      	cmp	r5, #0
 8022246:	a120      	add	r1, pc, #128	; (adr r1, 80222c8 <scalbn+0xe8>)
 8022248:	e9d1 0100 	ldrd	r0, r1, [r1]
 802224c:	da1c      	bge.n	8022288 <scalbn+0xa8>
 802224e:	a120      	add	r1, pc, #128	; (adr r1, 80222d0 <scalbn+0xf0>)
 8022250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022254:	e018      	b.n	8022288 <scalbn+0xa8>
 8022256:	2a00      	cmp	r2, #0
 8022258:	dd08      	ble.n	802226c <scalbn+0x8c>
 802225a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802225e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022262:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8022266:	ec45 4b10 	vmov	d0, r4, r5
 802226a:	bd70      	pop	{r4, r5, r6, pc}
 802226c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8022270:	da19      	bge.n	80222a6 <scalbn+0xc6>
 8022272:	f24c 3350 	movw	r3, #50000	; 0xc350
 8022276:	429e      	cmp	r6, r3
 8022278:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802227c:	dd0a      	ble.n	8022294 <scalbn+0xb4>
 802227e:	a112      	add	r1, pc, #72	; (adr r1, 80222c8 <scalbn+0xe8>)
 8022280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022284:	2b00      	cmp	r3, #0
 8022286:	d1e2      	bne.n	802224e <scalbn+0x6e>
 8022288:	a30f      	add	r3, pc, #60	; (adr r3, 80222c8 <scalbn+0xe8>)
 802228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802228e:	f7de f9d3 	bl	8000638 <__aeabi_dmul>
 8022292:	e7cb      	b.n	802222c <scalbn+0x4c>
 8022294:	a10a      	add	r1, pc, #40	; (adr r1, 80222c0 <scalbn+0xe0>)
 8022296:	e9d1 0100 	ldrd	r0, r1, [r1]
 802229a:	2b00      	cmp	r3, #0
 802229c:	d0b8      	beq.n	8022210 <scalbn+0x30>
 802229e:	a10e      	add	r1, pc, #56	; (adr r1, 80222d8 <scalbn+0xf8>)
 80222a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80222a4:	e7b4      	b.n	8022210 <scalbn+0x30>
 80222a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80222aa:	3236      	adds	r2, #54	; 0x36
 80222ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80222b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80222b4:	4620      	mov	r0, r4
 80222b6:	4b0c      	ldr	r3, [pc, #48]	; (80222e8 <scalbn+0x108>)
 80222b8:	2200      	movs	r2, #0
 80222ba:	e7e8      	b.n	802228e <scalbn+0xae>
 80222bc:	f3af 8000 	nop.w
 80222c0:	c2f8f359 	.word	0xc2f8f359
 80222c4:	01a56e1f 	.word	0x01a56e1f
 80222c8:	8800759c 	.word	0x8800759c
 80222cc:	7e37e43c 	.word	0x7e37e43c
 80222d0:	8800759c 	.word	0x8800759c
 80222d4:	fe37e43c 	.word	0xfe37e43c
 80222d8:	c2f8f359 	.word	0xc2f8f359
 80222dc:	81a56e1f 	.word	0x81a56e1f
 80222e0:	43500000 	.word	0x43500000
 80222e4:	ffff3cb0 	.word	0xffff3cb0
 80222e8:	3c900000 	.word	0x3c900000

080222ec <abort>:
 80222ec:	b508      	push	{r3, lr}
 80222ee:	2006      	movs	r0, #6
 80222f0:	f000 fb46 	bl	8022980 <raise>
 80222f4:	2001      	movs	r0, #1
 80222f6:	f7e7 f841 	bl	800937c <_exit>

080222fa <atexit>:
 80222fa:	2300      	movs	r3, #0
 80222fc:	4601      	mov	r1, r0
 80222fe:	461a      	mov	r2, r3
 8022300:	4618      	mov	r0, r3
 8022302:	f000 bc01 	b.w	8022b08 <__register_exitproc>
	...

08022308 <__errno>:
 8022308:	4b01      	ldr	r3, [pc, #4]	; (8022310 <__errno+0x8>)
 802230a:	6818      	ldr	r0, [r3, #0]
 802230c:	4770      	bx	lr
 802230e:	bf00      	nop
 8022310:	20000038 	.word	0x20000038

08022314 <std>:
 8022314:	2300      	movs	r3, #0
 8022316:	b510      	push	{r4, lr}
 8022318:	4604      	mov	r4, r0
 802231a:	e9c0 3300 	strd	r3, r3, [r0]
 802231e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022322:	6083      	str	r3, [r0, #8]
 8022324:	8181      	strh	r1, [r0, #12]
 8022326:	6643      	str	r3, [r0, #100]	; 0x64
 8022328:	81c2      	strh	r2, [r0, #14]
 802232a:	6183      	str	r3, [r0, #24]
 802232c:	4619      	mov	r1, r3
 802232e:	2208      	movs	r2, #8
 8022330:	305c      	adds	r0, #92	; 0x5c
 8022332:	f000 f955 	bl	80225e0 <memset>
 8022336:	4b05      	ldr	r3, [pc, #20]	; (802234c <std+0x38>)
 8022338:	6263      	str	r3, [r4, #36]	; 0x24
 802233a:	4b05      	ldr	r3, [pc, #20]	; (8022350 <std+0x3c>)
 802233c:	62a3      	str	r3, [r4, #40]	; 0x28
 802233e:	4b05      	ldr	r3, [pc, #20]	; (8022354 <std+0x40>)
 8022340:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022342:	4b05      	ldr	r3, [pc, #20]	; (8022358 <std+0x44>)
 8022344:	6224      	str	r4, [r4, #32]
 8022346:	6323      	str	r3, [r4, #48]	; 0x30
 8022348:	bd10      	pop	{r4, pc}
 802234a:	bf00      	nop
 802234c:	080229f9 	.word	0x080229f9
 8022350:	08022a1b 	.word	0x08022a1b
 8022354:	08022a53 	.word	0x08022a53
 8022358:	08022a77 	.word	0x08022a77

0802235c <_cleanup_r>:
 802235c:	4901      	ldr	r1, [pc, #4]	; (8022364 <_cleanup_r+0x8>)
 802235e:	f000 b8af 	b.w	80224c0 <_fwalk_reent>
 8022362:	bf00      	nop
 8022364:	08022d35 	.word	0x08022d35

08022368 <__sfmoreglue>:
 8022368:	b570      	push	{r4, r5, r6, lr}
 802236a:	2268      	movs	r2, #104	; 0x68
 802236c:	1e4d      	subs	r5, r1, #1
 802236e:	4355      	muls	r5, r2
 8022370:	460e      	mov	r6, r1
 8022372:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022376:	f000 f9a7 	bl	80226c8 <_malloc_r>
 802237a:	4604      	mov	r4, r0
 802237c:	b140      	cbz	r0, 8022390 <__sfmoreglue+0x28>
 802237e:	2100      	movs	r1, #0
 8022380:	e9c0 1600 	strd	r1, r6, [r0]
 8022384:	300c      	adds	r0, #12
 8022386:	60a0      	str	r0, [r4, #8]
 8022388:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802238c:	f000 f928 	bl	80225e0 <memset>
 8022390:	4620      	mov	r0, r4
 8022392:	bd70      	pop	{r4, r5, r6, pc}

08022394 <__sfp_lock_acquire>:
 8022394:	4801      	ldr	r0, [pc, #4]	; (802239c <__sfp_lock_acquire+0x8>)
 8022396:	f000 b8d8 	b.w	802254a <__retarget_lock_acquire_recursive>
 802239a:	bf00      	nop
 802239c:	2000c119 	.word	0x2000c119

080223a0 <__sfp_lock_release>:
 80223a0:	4801      	ldr	r0, [pc, #4]	; (80223a8 <__sfp_lock_release+0x8>)
 80223a2:	f000 b8d4 	b.w	802254e <__retarget_lock_release_recursive>
 80223a6:	bf00      	nop
 80223a8:	2000c119 	.word	0x2000c119

080223ac <__sinit_lock_acquire>:
 80223ac:	4801      	ldr	r0, [pc, #4]	; (80223b4 <__sinit_lock_acquire+0x8>)
 80223ae:	f000 b8cc 	b.w	802254a <__retarget_lock_acquire_recursive>
 80223b2:	bf00      	nop
 80223b4:	2000c11a 	.word	0x2000c11a

080223b8 <__sinit_lock_release>:
 80223b8:	4801      	ldr	r0, [pc, #4]	; (80223c0 <__sinit_lock_release+0x8>)
 80223ba:	f000 b8c8 	b.w	802254e <__retarget_lock_release_recursive>
 80223be:	bf00      	nop
 80223c0:	2000c11a 	.word	0x2000c11a

080223c4 <__sinit>:
 80223c4:	b510      	push	{r4, lr}
 80223c6:	4604      	mov	r4, r0
 80223c8:	f7ff fff0 	bl	80223ac <__sinit_lock_acquire>
 80223cc:	69a3      	ldr	r3, [r4, #24]
 80223ce:	b11b      	cbz	r3, 80223d8 <__sinit+0x14>
 80223d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80223d4:	f7ff bff0 	b.w	80223b8 <__sinit_lock_release>
 80223d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80223dc:	6523      	str	r3, [r4, #80]	; 0x50
 80223de:	4b13      	ldr	r3, [pc, #76]	; (802242c <__sinit+0x68>)
 80223e0:	4a13      	ldr	r2, [pc, #76]	; (8022430 <__sinit+0x6c>)
 80223e2:	681b      	ldr	r3, [r3, #0]
 80223e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80223e6:	42a3      	cmp	r3, r4
 80223e8:	bf04      	itt	eq
 80223ea:	2301      	moveq	r3, #1
 80223ec:	61a3      	streq	r3, [r4, #24]
 80223ee:	4620      	mov	r0, r4
 80223f0:	f000 f820 	bl	8022434 <__sfp>
 80223f4:	6060      	str	r0, [r4, #4]
 80223f6:	4620      	mov	r0, r4
 80223f8:	f000 f81c 	bl	8022434 <__sfp>
 80223fc:	60a0      	str	r0, [r4, #8]
 80223fe:	4620      	mov	r0, r4
 8022400:	f000 f818 	bl	8022434 <__sfp>
 8022404:	2200      	movs	r2, #0
 8022406:	60e0      	str	r0, [r4, #12]
 8022408:	2104      	movs	r1, #4
 802240a:	6860      	ldr	r0, [r4, #4]
 802240c:	f7ff ff82 	bl	8022314 <std>
 8022410:	68a0      	ldr	r0, [r4, #8]
 8022412:	2201      	movs	r2, #1
 8022414:	2109      	movs	r1, #9
 8022416:	f7ff ff7d 	bl	8022314 <std>
 802241a:	68e0      	ldr	r0, [r4, #12]
 802241c:	2202      	movs	r2, #2
 802241e:	2112      	movs	r1, #18
 8022420:	f7ff ff78 	bl	8022314 <std>
 8022424:	2301      	movs	r3, #1
 8022426:	61a3      	str	r3, [r4, #24]
 8022428:	e7d2      	b.n	80223d0 <__sinit+0xc>
 802242a:	bf00      	nop
 802242c:	080274b8 	.word	0x080274b8
 8022430:	0802235d 	.word	0x0802235d

08022434 <__sfp>:
 8022434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022436:	4607      	mov	r7, r0
 8022438:	f7ff ffac 	bl	8022394 <__sfp_lock_acquire>
 802243c:	4b1e      	ldr	r3, [pc, #120]	; (80224b8 <__sfp+0x84>)
 802243e:	681e      	ldr	r6, [r3, #0]
 8022440:	69b3      	ldr	r3, [r6, #24]
 8022442:	b913      	cbnz	r3, 802244a <__sfp+0x16>
 8022444:	4630      	mov	r0, r6
 8022446:	f7ff ffbd 	bl	80223c4 <__sinit>
 802244a:	3648      	adds	r6, #72	; 0x48
 802244c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022450:	3b01      	subs	r3, #1
 8022452:	d503      	bpl.n	802245c <__sfp+0x28>
 8022454:	6833      	ldr	r3, [r6, #0]
 8022456:	b30b      	cbz	r3, 802249c <__sfp+0x68>
 8022458:	6836      	ldr	r6, [r6, #0]
 802245a:	e7f7      	b.n	802244c <__sfp+0x18>
 802245c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022460:	b9d5      	cbnz	r5, 8022498 <__sfp+0x64>
 8022462:	4b16      	ldr	r3, [pc, #88]	; (80224bc <__sfp+0x88>)
 8022464:	60e3      	str	r3, [r4, #12]
 8022466:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802246a:	6665      	str	r5, [r4, #100]	; 0x64
 802246c:	f000 f86c 	bl	8022548 <__retarget_lock_init_recursive>
 8022470:	f7ff ff96 	bl	80223a0 <__sfp_lock_release>
 8022474:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8022478:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802247c:	6025      	str	r5, [r4, #0]
 802247e:	61a5      	str	r5, [r4, #24]
 8022480:	2208      	movs	r2, #8
 8022482:	4629      	mov	r1, r5
 8022484:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022488:	f000 f8aa 	bl	80225e0 <memset>
 802248c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022490:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022494:	4620      	mov	r0, r4
 8022496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022498:	3468      	adds	r4, #104	; 0x68
 802249a:	e7d9      	b.n	8022450 <__sfp+0x1c>
 802249c:	2104      	movs	r1, #4
 802249e:	4638      	mov	r0, r7
 80224a0:	f7ff ff62 	bl	8022368 <__sfmoreglue>
 80224a4:	4604      	mov	r4, r0
 80224a6:	6030      	str	r0, [r6, #0]
 80224a8:	2800      	cmp	r0, #0
 80224aa:	d1d5      	bne.n	8022458 <__sfp+0x24>
 80224ac:	f7ff ff78 	bl	80223a0 <__sfp_lock_release>
 80224b0:	230c      	movs	r3, #12
 80224b2:	603b      	str	r3, [r7, #0]
 80224b4:	e7ee      	b.n	8022494 <__sfp+0x60>
 80224b6:	bf00      	nop
 80224b8:	080274b8 	.word	0x080274b8
 80224bc:	ffff0001 	.word	0xffff0001

080224c0 <_fwalk_reent>:
 80224c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80224c4:	4606      	mov	r6, r0
 80224c6:	4688      	mov	r8, r1
 80224c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80224cc:	2700      	movs	r7, #0
 80224ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80224d2:	f1b9 0901 	subs.w	r9, r9, #1
 80224d6:	d505      	bpl.n	80224e4 <_fwalk_reent+0x24>
 80224d8:	6824      	ldr	r4, [r4, #0]
 80224da:	2c00      	cmp	r4, #0
 80224dc:	d1f7      	bne.n	80224ce <_fwalk_reent+0xe>
 80224de:	4638      	mov	r0, r7
 80224e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80224e4:	89ab      	ldrh	r3, [r5, #12]
 80224e6:	2b01      	cmp	r3, #1
 80224e8:	d907      	bls.n	80224fa <_fwalk_reent+0x3a>
 80224ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80224ee:	3301      	adds	r3, #1
 80224f0:	d003      	beq.n	80224fa <_fwalk_reent+0x3a>
 80224f2:	4629      	mov	r1, r5
 80224f4:	4630      	mov	r0, r6
 80224f6:	47c0      	blx	r8
 80224f8:	4307      	orrs	r7, r0
 80224fa:	3568      	adds	r5, #104	; 0x68
 80224fc:	e7e9      	b.n	80224d2 <_fwalk_reent+0x12>
	...

08022500 <__libc_init_array>:
 8022500:	b570      	push	{r4, r5, r6, lr}
 8022502:	4d0d      	ldr	r5, [pc, #52]	; (8022538 <__libc_init_array+0x38>)
 8022504:	4c0d      	ldr	r4, [pc, #52]	; (802253c <__libc_init_array+0x3c>)
 8022506:	1b64      	subs	r4, r4, r5
 8022508:	10a4      	asrs	r4, r4, #2
 802250a:	2600      	movs	r6, #0
 802250c:	42a6      	cmp	r6, r4
 802250e:	d109      	bne.n	8022524 <__libc_init_array+0x24>
 8022510:	4d0b      	ldr	r5, [pc, #44]	; (8022540 <__libc_init_array+0x40>)
 8022512:	4c0c      	ldr	r4, [pc, #48]	; (8022544 <__libc_init_array+0x44>)
 8022514:	f001 fa4a 	bl	80239ac <_init>
 8022518:	1b64      	subs	r4, r4, r5
 802251a:	10a4      	asrs	r4, r4, #2
 802251c:	2600      	movs	r6, #0
 802251e:	42a6      	cmp	r6, r4
 8022520:	d105      	bne.n	802252e <__libc_init_array+0x2e>
 8022522:	bd70      	pop	{r4, r5, r6, pc}
 8022524:	f855 3b04 	ldr.w	r3, [r5], #4
 8022528:	4798      	blx	r3
 802252a:	3601      	adds	r6, #1
 802252c:	e7ee      	b.n	802250c <__libc_init_array+0xc>
 802252e:	f855 3b04 	ldr.w	r3, [r5], #4
 8022532:	4798      	blx	r3
 8022534:	3601      	adds	r6, #1
 8022536:	e7f2      	b.n	802251e <__libc_init_array+0x1e>
 8022538:	080275a8 	.word	0x080275a8
 802253c:	080275a8 	.word	0x080275a8
 8022540:	080275a8 	.word	0x080275a8
 8022544:	080275b0 	.word	0x080275b0

08022548 <__retarget_lock_init_recursive>:
 8022548:	4770      	bx	lr

0802254a <__retarget_lock_acquire_recursive>:
 802254a:	4770      	bx	lr

0802254c <__retarget_lock_release>:
 802254c:	4770      	bx	lr

0802254e <__retarget_lock_release_recursive>:
 802254e:	4770      	bx	lr

08022550 <malloc>:
 8022550:	4b02      	ldr	r3, [pc, #8]	; (802255c <malloc+0xc>)
 8022552:	4601      	mov	r1, r0
 8022554:	6818      	ldr	r0, [r3, #0]
 8022556:	f000 b8b7 	b.w	80226c8 <_malloc_r>
 802255a:	bf00      	nop
 802255c:	20000038 	.word	0x20000038

08022560 <free>:
 8022560:	4b02      	ldr	r3, [pc, #8]	; (802256c <free+0xc>)
 8022562:	4601      	mov	r1, r0
 8022564:	6818      	ldr	r0, [r3, #0]
 8022566:	f000 b843 	b.w	80225f0 <_free_r>
 802256a:	bf00      	nop
 802256c:	20000038 	.word	0x20000038

08022570 <memcmp>:
 8022570:	b510      	push	{r4, lr}
 8022572:	3901      	subs	r1, #1
 8022574:	4402      	add	r2, r0
 8022576:	4290      	cmp	r0, r2
 8022578:	d101      	bne.n	802257e <memcmp+0xe>
 802257a:	2000      	movs	r0, #0
 802257c:	e005      	b.n	802258a <memcmp+0x1a>
 802257e:	7803      	ldrb	r3, [r0, #0]
 8022580:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022584:	42a3      	cmp	r3, r4
 8022586:	d001      	beq.n	802258c <memcmp+0x1c>
 8022588:	1b18      	subs	r0, r3, r4
 802258a:	bd10      	pop	{r4, pc}
 802258c:	3001      	adds	r0, #1
 802258e:	e7f2      	b.n	8022576 <memcmp+0x6>

08022590 <memcpy>:
 8022590:	440a      	add	r2, r1
 8022592:	4291      	cmp	r1, r2
 8022594:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8022598:	d100      	bne.n	802259c <memcpy+0xc>
 802259a:	4770      	bx	lr
 802259c:	b510      	push	{r4, lr}
 802259e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80225a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80225a6:	4291      	cmp	r1, r2
 80225a8:	d1f9      	bne.n	802259e <memcpy+0xe>
 80225aa:	bd10      	pop	{r4, pc}

080225ac <memmove>:
 80225ac:	4288      	cmp	r0, r1
 80225ae:	b510      	push	{r4, lr}
 80225b0:	eb01 0402 	add.w	r4, r1, r2
 80225b4:	d902      	bls.n	80225bc <memmove+0x10>
 80225b6:	4284      	cmp	r4, r0
 80225b8:	4623      	mov	r3, r4
 80225ba:	d807      	bhi.n	80225cc <memmove+0x20>
 80225bc:	1e43      	subs	r3, r0, #1
 80225be:	42a1      	cmp	r1, r4
 80225c0:	d008      	beq.n	80225d4 <memmove+0x28>
 80225c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80225c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80225ca:	e7f8      	b.n	80225be <memmove+0x12>
 80225cc:	4402      	add	r2, r0
 80225ce:	4601      	mov	r1, r0
 80225d0:	428a      	cmp	r2, r1
 80225d2:	d100      	bne.n	80225d6 <memmove+0x2a>
 80225d4:	bd10      	pop	{r4, pc}
 80225d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80225da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80225de:	e7f7      	b.n	80225d0 <memmove+0x24>

080225e0 <memset>:
 80225e0:	4402      	add	r2, r0
 80225e2:	4603      	mov	r3, r0
 80225e4:	4293      	cmp	r3, r2
 80225e6:	d100      	bne.n	80225ea <memset+0xa>
 80225e8:	4770      	bx	lr
 80225ea:	f803 1b01 	strb.w	r1, [r3], #1
 80225ee:	e7f9      	b.n	80225e4 <memset+0x4>

080225f0 <_free_r>:
 80225f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80225f2:	2900      	cmp	r1, #0
 80225f4:	d044      	beq.n	8022680 <_free_r+0x90>
 80225f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80225fa:	9001      	str	r0, [sp, #4]
 80225fc:	2b00      	cmp	r3, #0
 80225fe:	f1a1 0404 	sub.w	r4, r1, #4
 8022602:	bfb8      	it	lt
 8022604:	18e4      	addlt	r4, r4, r3
 8022606:	f7de ff0d 	bl	8001424 <__malloc_lock>
 802260a:	4a1e      	ldr	r2, [pc, #120]	; (8022684 <_free_r+0x94>)
 802260c:	9801      	ldr	r0, [sp, #4]
 802260e:	6813      	ldr	r3, [r2, #0]
 8022610:	b933      	cbnz	r3, 8022620 <_free_r+0x30>
 8022612:	6063      	str	r3, [r4, #4]
 8022614:	6014      	str	r4, [r2, #0]
 8022616:	b003      	add	sp, #12
 8022618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802261c:	f7de bf2d 	b.w	800147a <__malloc_unlock>
 8022620:	42a3      	cmp	r3, r4
 8022622:	d908      	bls.n	8022636 <_free_r+0x46>
 8022624:	6825      	ldr	r5, [r4, #0]
 8022626:	1961      	adds	r1, r4, r5
 8022628:	428b      	cmp	r3, r1
 802262a:	bf01      	itttt	eq
 802262c:	6819      	ldreq	r1, [r3, #0]
 802262e:	685b      	ldreq	r3, [r3, #4]
 8022630:	1949      	addeq	r1, r1, r5
 8022632:	6021      	streq	r1, [r4, #0]
 8022634:	e7ed      	b.n	8022612 <_free_r+0x22>
 8022636:	461a      	mov	r2, r3
 8022638:	685b      	ldr	r3, [r3, #4]
 802263a:	b10b      	cbz	r3, 8022640 <_free_r+0x50>
 802263c:	42a3      	cmp	r3, r4
 802263e:	d9fa      	bls.n	8022636 <_free_r+0x46>
 8022640:	6811      	ldr	r1, [r2, #0]
 8022642:	1855      	adds	r5, r2, r1
 8022644:	42a5      	cmp	r5, r4
 8022646:	d10b      	bne.n	8022660 <_free_r+0x70>
 8022648:	6824      	ldr	r4, [r4, #0]
 802264a:	4421      	add	r1, r4
 802264c:	1854      	adds	r4, r2, r1
 802264e:	42a3      	cmp	r3, r4
 8022650:	6011      	str	r1, [r2, #0]
 8022652:	d1e0      	bne.n	8022616 <_free_r+0x26>
 8022654:	681c      	ldr	r4, [r3, #0]
 8022656:	685b      	ldr	r3, [r3, #4]
 8022658:	6053      	str	r3, [r2, #4]
 802265a:	4421      	add	r1, r4
 802265c:	6011      	str	r1, [r2, #0]
 802265e:	e7da      	b.n	8022616 <_free_r+0x26>
 8022660:	d902      	bls.n	8022668 <_free_r+0x78>
 8022662:	230c      	movs	r3, #12
 8022664:	6003      	str	r3, [r0, #0]
 8022666:	e7d6      	b.n	8022616 <_free_r+0x26>
 8022668:	6825      	ldr	r5, [r4, #0]
 802266a:	1961      	adds	r1, r4, r5
 802266c:	428b      	cmp	r3, r1
 802266e:	bf04      	itt	eq
 8022670:	6819      	ldreq	r1, [r3, #0]
 8022672:	685b      	ldreq	r3, [r3, #4]
 8022674:	6063      	str	r3, [r4, #4]
 8022676:	bf04      	itt	eq
 8022678:	1949      	addeq	r1, r1, r5
 802267a:	6021      	streq	r1, [r4, #0]
 802267c:	6054      	str	r4, [r2, #4]
 802267e:	e7ca      	b.n	8022616 <_free_r+0x26>
 8022680:	b003      	add	sp, #12
 8022682:	bd30      	pop	{r4, r5, pc}
 8022684:	2000c11c 	.word	0x2000c11c

08022688 <sbrk_aligned>:
 8022688:	b570      	push	{r4, r5, r6, lr}
 802268a:	4e0e      	ldr	r6, [pc, #56]	; (80226c4 <sbrk_aligned+0x3c>)
 802268c:	460c      	mov	r4, r1
 802268e:	6831      	ldr	r1, [r6, #0]
 8022690:	4605      	mov	r5, r0
 8022692:	b911      	cbnz	r1, 802269a <sbrk_aligned+0x12>
 8022694:	f7de fe6a 	bl	800136c <_sbrk_r>
 8022698:	6030      	str	r0, [r6, #0]
 802269a:	4621      	mov	r1, r4
 802269c:	4628      	mov	r0, r5
 802269e:	f7de fe65 	bl	800136c <_sbrk_r>
 80226a2:	1c43      	adds	r3, r0, #1
 80226a4:	d00a      	beq.n	80226bc <sbrk_aligned+0x34>
 80226a6:	1cc4      	adds	r4, r0, #3
 80226a8:	f024 0403 	bic.w	r4, r4, #3
 80226ac:	42a0      	cmp	r0, r4
 80226ae:	d007      	beq.n	80226c0 <sbrk_aligned+0x38>
 80226b0:	1a21      	subs	r1, r4, r0
 80226b2:	4628      	mov	r0, r5
 80226b4:	f7de fe5a 	bl	800136c <_sbrk_r>
 80226b8:	3001      	adds	r0, #1
 80226ba:	d101      	bne.n	80226c0 <sbrk_aligned+0x38>
 80226bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80226c0:	4620      	mov	r0, r4
 80226c2:	bd70      	pop	{r4, r5, r6, pc}
 80226c4:	2000c120 	.word	0x2000c120

080226c8 <_malloc_r>:
 80226c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80226cc:	1ccd      	adds	r5, r1, #3
 80226ce:	f025 0503 	bic.w	r5, r5, #3
 80226d2:	3508      	adds	r5, #8
 80226d4:	2d0c      	cmp	r5, #12
 80226d6:	bf38      	it	cc
 80226d8:	250c      	movcc	r5, #12
 80226da:	2d00      	cmp	r5, #0
 80226dc:	4607      	mov	r7, r0
 80226de:	db01      	blt.n	80226e4 <_malloc_r+0x1c>
 80226e0:	42a9      	cmp	r1, r5
 80226e2:	d905      	bls.n	80226f0 <_malloc_r+0x28>
 80226e4:	230c      	movs	r3, #12
 80226e6:	603b      	str	r3, [r7, #0]
 80226e8:	2600      	movs	r6, #0
 80226ea:	4630      	mov	r0, r6
 80226ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80226f0:	4e2e      	ldr	r6, [pc, #184]	; (80227ac <_malloc_r+0xe4>)
 80226f2:	f7de fe97 	bl	8001424 <__malloc_lock>
 80226f6:	6833      	ldr	r3, [r6, #0]
 80226f8:	461c      	mov	r4, r3
 80226fa:	bb34      	cbnz	r4, 802274a <_malloc_r+0x82>
 80226fc:	4629      	mov	r1, r5
 80226fe:	4638      	mov	r0, r7
 8022700:	f7ff ffc2 	bl	8022688 <sbrk_aligned>
 8022704:	1c43      	adds	r3, r0, #1
 8022706:	4604      	mov	r4, r0
 8022708:	d14d      	bne.n	80227a6 <_malloc_r+0xde>
 802270a:	6834      	ldr	r4, [r6, #0]
 802270c:	4626      	mov	r6, r4
 802270e:	2e00      	cmp	r6, #0
 8022710:	d140      	bne.n	8022794 <_malloc_r+0xcc>
 8022712:	6823      	ldr	r3, [r4, #0]
 8022714:	4631      	mov	r1, r6
 8022716:	4638      	mov	r0, r7
 8022718:	eb04 0803 	add.w	r8, r4, r3
 802271c:	f7de fe26 	bl	800136c <_sbrk_r>
 8022720:	4580      	cmp	r8, r0
 8022722:	d13a      	bne.n	802279a <_malloc_r+0xd2>
 8022724:	6821      	ldr	r1, [r4, #0]
 8022726:	3503      	adds	r5, #3
 8022728:	1a6d      	subs	r5, r5, r1
 802272a:	f025 0503 	bic.w	r5, r5, #3
 802272e:	3508      	adds	r5, #8
 8022730:	2d0c      	cmp	r5, #12
 8022732:	bf38      	it	cc
 8022734:	250c      	movcc	r5, #12
 8022736:	4629      	mov	r1, r5
 8022738:	4638      	mov	r0, r7
 802273a:	f7ff ffa5 	bl	8022688 <sbrk_aligned>
 802273e:	3001      	adds	r0, #1
 8022740:	d02b      	beq.n	802279a <_malloc_r+0xd2>
 8022742:	6823      	ldr	r3, [r4, #0]
 8022744:	442b      	add	r3, r5
 8022746:	6023      	str	r3, [r4, #0]
 8022748:	e00e      	b.n	8022768 <_malloc_r+0xa0>
 802274a:	6822      	ldr	r2, [r4, #0]
 802274c:	1b52      	subs	r2, r2, r5
 802274e:	d41e      	bmi.n	802278e <_malloc_r+0xc6>
 8022750:	2a0b      	cmp	r2, #11
 8022752:	d916      	bls.n	8022782 <_malloc_r+0xba>
 8022754:	1961      	adds	r1, r4, r5
 8022756:	42a3      	cmp	r3, r4
 8022758:	6025      	str	r5, [r4, #0]
 802275a:	bf18      	it	ne
 802275c:	6059      	strne	r1, [r3, #4]
 802275e:	6863      	ldr	r3, [r4, #4]
 8022760:	bf08      	it	eq
 8022762:	6031      	streq	r1, [r6, #0]
 8022764:	5162      	str	r2, [r4, r5]
 8022766:	604b      	str	r3, [r1, #4]
 8022768:	4638      	mov	r0, r7
 802276a:	f104 060b 	add.w	r6, r4, #11
 802276e:	f7de fe84 	bl	800147a <__malloc_unlock>
 8022772:	f026 0607 	bic.w	r6, r6, #7
 8022776:	1d23      	adds	r3, r4, #4
 8022778:	1af2      	subs	r2, r6, r3
 802277a:	d0b6      	beq.n	80226ea <_malloc_r+0x22>
 802277c:	1b9b      	subs	r3, r3, r6
 802277e:	50a3      	str	r3, [r4, r2]
 8022780:	e7b3      	b.n	80226ea <_malloc_r+0x22>
 8022782:	6862      	ldr	r2, [r4, #4]
 8022784:	42a3      	cmp	r3, r4
 8022786:	bf0c      	ite	eq
 8022788:	6032      	streq	r2, [r6, #0]
 802278a:	605a      	strne	r2, [r3, #4]
 802278c:	e7ec      	b.n	8022768 <_malloc_r+0xa0>
 802278e:	4623      	mov	r3, r4
 8022790:	6864      	ldr	r4, [r4, #4]
 8022792:	e7b2      	b.n	80226fa <_malloc_r+0x32>
 8022794:	4634      	mov	r4, r6
 8022796:	6876      	ldr	r6, [r6, #4]
 8022798:	e7b9      	b.n	802270e <_malloc_r+0x46>
 802279a:	230c      	movs	r3, #12
 802279c:	603b      	str	r3, [r7, #0]
 802279e:	4638      	mov	r0, r7
 80227a0:	f7de fe6b 	bl	800147a <__malloc_unlock>
 80227a4:	e7a1      	b.n	80226ea <_malloc_r+0x22>
 80227a6:	6025      	str	r5, [r4, #0]
 80227a8:	e7de      	b.n	8022768 <_malloc_r+0xa0>
 80227aa:	bf00      	nop
 80227ac:	2000c11c 	.word	0x2000c11c

080227b0 <iprintf>:
 80227b0:	b40f      	push	{r0, r1, r2, r3}
 80227b2:	4b0a      	ldr	r3, [pc, #40]	; (80227dc <iprintf+0x2c>)
 80227b4:	b513      	push	{r0, r1, r4, lr}
 80227b6:	681c      	ldr	r4, [r3, #0]
 80227b8:	b124      	cbz	r4, 80227c4 <iprintf+0x14>
 80227ba:	69a3      	ldr	r3, [r4, #24]
 80227bc:	b913      	cbnz	r3, 80227c4 <iprintf+0x14>
 80227be:	4620      	mov	r0, r4
 80227c0:	f7ff fe00 	bl	80223c4 <__sinit>
 80227c4:	ab05      	add	r3, sp, #20
 80227c6:	9a04      	ldr	r2, [sp, #16]
 80227c8:	68a1      	ldr	r1, [r4, #8]
 80227ca:	9301      	str	r3, [sp, #4]
 80227cc:	4620      	mov	r0, r4
 80227ce:	f000 fc97 	bl	8023100 <_vfiprintf_r>
 80227d2:	b002      	add	sp, #8
 80227d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80227d8:	b004      	add	sp, #16
 80227da:	4770      	bx	lr
 80227dc:	20000038 	.word	0x20000038

080227e0 <rand>:
 80227e0:	4b16      	ldr	r3, [pc, #88]	; (802283c <rand+0x5c>)
 80227e2:	b510      	push	{r4, lr}
 80227e4:	681c      	ldr	r4, [r3, #0]
 80227e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80227e8:	b9b3      	cbnz	r3, 8022818 <rand+0x38>
 80227ea:	2018      	movs	r0, #24
 80227ec:	f7ff feb0 	bl	8022550 <malloc>
 80227f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80227f2:	b928      	cbnz	r0, 8022800 <rand+0x20>
 80227f4:	4602      	mov	r2, r0
 80227f6:	4b12      	ldr	r3, [pc, #72]	; (8022840 <rand+0x60>)
 80227f8:	4812      	ldr	r0, [pc, #72]	; (8022844 <rand+0x64>)
 80227fa:	214e      	movs	r1, #78	; 0x4e
 80227fc:	f000 f9e6 	bl	8022bcc <__assert_func>
 8022800:	4a11      	ldr	r2, [pc, #68]	; (8022848 <rand+0x68>)
 8022802:	4b12      	ldr	r3, [pc, #72]	; (802284c <rand+0x6c>)
 8022804:	e9c0 2300 	strd	r2, r3, [r0]
 8022808:	4b11      	ldr	r3, [pc, #68]	; (8022850 <rand+0x70>)
 802280a:	6083      	str	r3, [r0, #8]
 802280c:	230b      	movs	r3, #11
 802280e:	8183      	strh	r3, [r0, #12]
 8022810:	2201      	movs	r2, #1
 8022812:	2300      	movs	r3, #0
 8022814:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8022818:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 802281a:	4a0e      	ldr	r2, [pc, #56]	; (8022854 <rand+0x74>)
 802281c:	6920      	ldr	r0, [r4, #16]
 802281e:	6963      	ldr	r3, [r4, #20]
 8022820:	490d      	ldr	r1, [pc, #52]	; (8022858 <rand+0x78>)
 8022822:	4342      	muls	r2, r0
 8022824:	fb01 2203 	mla	r2, r1, r3, r2
 8022828:	fba0 0101 	umull	r0, r1, r0, r1
 802282c:	1c43      	adds	r3, r0, #1
 802282e:	eb42 0001 	adc.w	r0, r2, r1
 8022832:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8022836:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802283a:	bd10      	pop	{r4, pc}
 802283c:	20000038 	.word	0x20000038
 8022840:	080274bc 	.word	0x080274bc
 8022844:	080274d3 	.word	0x080274d3
 8022848:	abcd330e 	.word	0xabcd330e
 802284c:	e66d1234 	.word	0xe66d1234
 8022850:	0005deec 	.word	0x0005deec
 8022854:	5851f42d 	.word	0x5851f42d
 8022858:	4c957f2d 	.word	0x4c957f2d

0802285c <cleanup_glue>:
 802285c:	b538      	push	{r3, r4, r5, lr}
 802285e:	460c      	mov	r4, r1
 8022860:	6809      	ldr	r1, [r1, #0]
 8022862:	4605      	mov	r5, r0
 8022864:	b109      	cbz	r1, 802286a <cleanup_glue+0xe>
 8022866:	f7ff fff9 	bl	802285c <cleanup_glue>
 802286a:	4621      	mov	r1, r4
 802286c:	4628      	mov	r0, r5
 802286e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022872:	f7ff bebd 	b.w	80225f0 <_free_r>
	...

08022878 <_reclaim_reent>:
 8022878:	4b2c      	ldr	r3, [pc, #176]	; (802292c <_reclaim_reent+0xb4>)
 802287a:	681b      	ldr	r3, [r3, #0]
 802287c:	4283      	cmp	r3, r0
 802287e:	b570      	push	{r4, r5, r6, lr}
 8022880:	4604      	mov	r4, r0
 8022882:	d051      	beq.n	8022928 <_reclaim_reent+0xb0>
 8022884:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8022886:	b143      	cbz	r3, 802289a <_reclaim_reent+0x22>
 8022888:	68db      	ldr	r3, [r3, #12]
 802288a:	2b00      	cmp	r3, #0
 802288c:	d14a      	bne.n	8022924 <_reclaim_reent+0xac>
 802288e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022890:	6819      	ldr	r1, [r3, #0]
 8022892:	b111      	cbz	r1, 802289a <_reclaim_reent+0x22>
 8022894:	4620      	mov	r0, r4
 8022896:	f7ff feab 	bl	80225f0 <_free_r>
 802289a:	6961      	ldr	r1, [r4, #20]
 802289c:	b111      	cbz	r1, 80228a4 <_reclaim_reent+0x2c>
 802289e:	4620      	mov	r0, r4
 80228a0:	f7ff fea6 	bl	80225f0 <_free_r>
 80228a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80228a6:	b111      	cbz	r1, 80228ae <_reclaim_reent+0x36>
 80228a8:	4620      	mov	r0, r4
 80228aa:	f7ff fea1 	bl	80225f0 <_free_r>
 80228ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80228b0:	b111      	cbz	r1, 80228b8 <_reclaim_reent+0x40>
 80228b2:	4620      	mov	r0, r4
 80228b4:	f7ff fe9c 	bl	80225f0 <_free_r>
 80228b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80228ba:	b111      	cbz	r1, 80228c2 <_reclaim_reent+0x4a>
 80228bc:	4620      	mov	r0, r4
 80228be:	f7ff fe97 	bl	80225f0 <_free_r>
 80228c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80228c4:	b111      	cbz	r1, 80228cc <_reclaim_reent+0x54>
 80228c6:	4620      	mov	r0, r4
 80228c8:	f7ff fe92 	bl	80225f0 <_free_r>
 80228cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80228ce:	b111      	cbz	r1, 80228d6 <_reclaim_reent+0x5e>
 80228d0:	4620      	mov	r0, r4
 80228d2:	f7ff fe8d 	bl	80225f0 <_free_r>
 80228d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80228d8:	b111      	cbz	r1, 80228e0 <_reclaim_reent+0x68>
 80228da:	4620      	mov	r0, r4
 80228dc:	f7ff fe88 	bl	80225f0 <_free_r>
 80228e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80228e2:	b111      	cbz	r1, 80228ea <_reclaim_reent+0x72>
 80228e4:	4620      	mov	r0, r4
 80228e6:	f7ff fe83 	bl	80225f0 <_free_r>
 80228ea:	69a3      	ldr	r3, [r4, #24]
 80228ec:	b1e3      	cbz	r3, 8022928 <_reclaim_reent+0xb0>
 80228ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80228f0:	4620      	mov	r0, r4
 80228f2:	4798      	blx	r3
 80228f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80228f6:	b1b9      	cbz	r1, 8022928 <_reclaim_reent+0xb0>
 80228f8:	4620      	mov	r0, r4
 80228fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80228fe:	f7ff bfad 	b.w	802285c <cleanup_glue>
 8022902:	5949      	ldr	r1, [r1, r5]
 8022904:	b941      	cbnz	r1, 8022918 <_reclaim_reent+0xa0>
 8022906:	3504      	adds	r5, #4
 8022908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802290a:	2d80      	cmp	r5, #128	; 0x80
 802290c:	68d9      	ldr	r1, [r3, #12]
 802290e:	d1f8      	bne.n	8022902 <_reclaim_reent+0x8a>
 8022910:	4620      	mov	r0, r4
 8022912:	f7ff fe6d 	bl	80225f0 <_free_r>
 8022916:	e7ba      	b.n	802288e <_reclaim_reent+0x16>
 8022918:	680e      	ldr	r6, [r1, #0]
 802291a:	4620      	mov	r0, r4
 802291c:	f7ff fe68 	bl	80225f0 <_free_r>
 8022920:	4631      	mov	r1, r6
 8022922:	e7ef      	b.n	8022904 <_reclaim_reent+0x8c>
 8022924:	2500      	movs	r5, #0
 8022926:	e7ef      	b.n	8022908 <_reclaim_reent+0x90>
 8022928:	bd70      	pop	{r4, r5, r6, pc}
 802292a:	bf00      	nop
 802292c:	20000038 	.word	0x20000038

08022930 <_raise_r>:
 8022930:	291f      	cmp	r1, #31
 8022932:	b538      	push	{r3, r4, r5, lr}
 8022934:	4604      	mov	r4, r0
 8022936:	460d      	mov	r5, r1
 8022938:	d904      	bls.n	8022944 <_raise_r+0x14>
 802293a:	2316      	movs	r3, #22
 802293c:	6003      	str	r3, [r0, #0]
 802293e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022942:	bd38      	pop	{r3, r4, r5, pc}
 8022944:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022946:	b112      	cbz	r2, 802294e <_raise_r+0x1e>
 8022948:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802294c:	b94b      	cbnz	r3, 8022962 <_raise_r+0x32>
 802294e:	4620      	mov	r0, r4
 8022950:	f000 f830 	bl	80229b4 <_getpid_r>
 8022954:	462a      	mov	r2, r5
 8022956:	4601      	mov	r1, r0
 8022958:	4620      	mov	r0, r4
 802295a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802295e:	f000 b817 	b.w	8022990 <_kill_r>
 8022962:	2b01      	cmp	r3, #1
 8022964:	d00a      	beq.n	802297c <_raise_r+0x4c>
 8022966:	1c59      	adds	r1, r3, #1
 8022968:	d103      	bne.n	8022972 <_raise_r+0x42>
 802296a:	2316      	movs	r3, #22
 802296c:	6003      	str	r3, [r0, #0]
 802296e:	2001      	movs	r0, #1
 8022970:	e7e7      	b.n	8022942 <_raise_r+0x12>
 8022972:	2400      	movs	r4, #0
 8022974:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022978:	4628      	mov	r0, r5
 802297a:	4798      	blx	r3
 802297c:	2000      	movs	r0, #0
 802297e:	e7e0      	b.n	8022942 <_raise_r+0x12>

08022980 <raise>:
 8022980:	4b02      	ldr	r3, [pc, #8]	; (802298c <raise+0xc>)
 8022982:	4601      	mov	r1, r0
 8022984:	6818      	ldr	r0, [r3, #0]
 8022986:	f7ff bfd3 	b.w	8022930 <_raise_r>
 802298a:	bf00      	nop
 802298c:	20000038 	.word	0x20000038

08022990 <_kill_r>:
 8022990:	b538      	push	{r3, r4, r5, lr}
 8022992:	4d07      	ldr	r5, [pc, #28]	; (80229b0 <_kill_r+0x20>)
 8022994:	2300      	movs	r3, #0
 8022996:	4604      	mov	r4, r0
 8022998:	4608      	mov	r0, r1
 802299a:	4611      	mov	r1, r2
 802299c:	602b      	str	r3, [r5, #0]
 802299e:	f7e6 fcdb 	bl	8009358 <_kill>
 80229a2:	1c43      	adds	r3, r0, #1
 80229a4:	d102      	bne.n	80229ac <_kill_r+0x1c>
 80229a6:	682b      	ldr	r3, [r5, #0]
 80229a8:	b103      	cbz	r3, 80229ac <_kill_r+0x1c>
 80229aa:	6023      	str	r3, [r4, #0]
 80229ac:	bd38      	pop	{r3, r4, r5, pc}
 80229ae:	bf00      	nop
 80229b0:	2000c124 	.word	0x2000c124

080229b4 <_getpid_r>:
 80229b4:	f7e6 bcc8 	b.w	8009348 <_getpid>

080229b8 <siprintf>:
 80229b8:	b40e      	push	{r1, r2, r3}
 80229ba:	b500      	push	{lr}
 80229bc:	b09c      	sub	sp, #112	; 0x70
 80229be:	ab1d      	add	r3, sp, #116	; 0x74
 80229c0:	9002      	str	r0, [sp, #8]
 80229c2:	9006      	str	r0, [sp, #24]
 80229c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80229c8:	4809      	ldr	r0, [pc, #36]	; (80229f0 <siprintf+0x38>)
 80229ca:	9107      	str	r1, [sp, #28]
 80229cc:	9104      	str	r1, [sp, #16]
 80229ce:	4909      	ldr	r1, [pc, #36]	; (80229f4 <siprintf+0x3c>)
 80229d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80229d4:	9105      	str	r1, [sp, #20]
 80229d6:	6800      	ldr	r0, [r0, #0]
 80229d8:	9301      	str	r3, [sp, #4]
 80229da:	a902      	add	r1, sp, #8
 80229dc:	f000 fa66 	bl	8022eac <_svfiprintf_r>
 80229e0:	9b02      	ldr	r3, [sp, #8]
 80229e2:	2200      	movs	r2, #0
 80229e4:	701a      	strb	r2, [r3, #0]
 80229e6:	b01c      	add	sp, #112	; 0x70
 80229e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80229ec:	b003      	add	sp, #12
 80229ee:	4770      	bx	lr
 80229f0:	20000038 	.word	0x20000038
 80229f4:	ffff0208 	.word	0xffff0208

080229f8 <__sread>:
 80229f8:	b510      	push	{r4, lr}
 80229fa:	460c      	mov	r4, r1
 80229fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a00:	f000 fe42 	bl	8023688 <_read_r>
 8022a04:	2800      	cmp	r0, #0
 8022a06:	bfab      	itete	ge
 8022a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8022a0c:	181b      	addge	r3, r3, r0
 8022a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022a12:	bfac      	ite	ge
 8022a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8022a16:	81a3      	strhlt	r3, [r4, #12]
 8022a18:	bd10      	pop	{r4, pc}

08022a1a <__swrite>:
 8022a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a1e:	461f      	mov	r7, r3
 8022a20:	898b      	ldrh	r3, [r1, #12]
 8022a22:	05db      	lsls	r3, r3, #23
 8022a24:	4605      	mov	r5, r0
 8022a26:	460c      	mov	r4, r1
 8022a28:	4616      	mov	r6, r2
 8022a2a:	d505      	bpl.n	8022a38 <__swrite+0x1e>
 8022a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a30:	2302      	movs	r3, #2
 8022a32:	2200      	movs	r2, #0
 8022a34:	f000 f9cc 	bl	8022dd0 <_lseek_r>
 8022a38:	89a3      	ldrh	r3, [r4, #12]
 8022a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022a42:	81a3      	strh	r3, [r4, #12]
 8022a44:	4632      	mov	r2, r6
 8022a46:	463b      	mov	r3, r7
 8022a48:	4628      	mov	r0, r5
 8022a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022a4e:	f000 b849 	b.w	8022ae4 <_write_r>

08022a52 <__sseek>:
 8022a52:	b510      	push	{r4, lr}
 8022a54:	460c      	mov	r4, r1
 8022a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a5a:	f000 f9b9 	bl	8022dd0 <_lseek_r>
 8022a5e:	1c43      	adds	r3, r0, #1
 8022a60:	89a3      	ldrh	r3, [r4, #12]
 8022a62:	bf15      	itete	ne
 8022a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8022a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022a6e:	81a3      	strheq	r3, [r4, #12]
 8022a70:	bf18      	it	ne
 8022a72:	81a3      	strhne	r3, [r4, #12]
 8022a74:	bd10      	pop	{r4, pc}

08022a76 <__sclose>:
 8022a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a7a:	f000 b8c5 	b.w	8022c08 <_close_r>

08022a7e <strncpy>:
 8022a7e:	b510      	push	{r4, lr}
 8022a80:	3901      	subs	r1, #1
 8022a82:	4603      	mov	r3, r0
 8022a84:	b132      	cbz	r2, 8022a94 <strncpy+0x16>
 8022a86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022a8a:	f803 4b01 	strb.w	r4, [r3], #1
 8022a8e:	3a01      	subs	r2, #1
 8022a90:	2c00      	cmp	r4, #0
 8022a92:	d1f7      	bne.n	8022a84 <strncpy+0x6>
 8022a94:	441a      	add	r2, r3
 8022a96:	2100      	movs	r1, #0
 8022a98:	4293      	cmp	r3, r2
 8022a9a:	d100      	bne.n	8022a9e <strncpy+0x20>
 8022a9c:	bd10      	pop	{r4, pc}
 8022a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8022aa2:	e7f9      	b.n	8022a98 <strncpy+0x1a>

08022aa4 <_vsiprintf_r>:
 8022aa4:	b500      	push	{lr}
 8022aa6:	b09b      	sub	sp, #108	; 0x6c
 8022aa8:	9100      	str	r1, [sp, #0]
 8022aaa:	9104      	str	r1, [sp, #16]
 8022aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022ab0:	9105      	str	r1, [sp, #20]
 8022ab2:	9102      	str	r1, [sp, #8]
 8022ab4:	4905      	ldr	r1, [pc, #20]	; (8022acc <_vsiprintf_r+0x28>)
 8022ab6:	9103      	str	r1, [sp, #12]
 8022ab8:	4669      	mov	r1, sp
 8022aba:	f000 f9f7 	bl	8022eac <_svfiprintf_r>
 8022abe:	9b00      	ldr	r3, [sp, #0]
 8022ac0:	2200      	movs	r2, #0
 8022ac2:	701a      	strb	r2, [r3, #0]
 8022ac4:	b01b      	add	sp, #108	; 0x6c
 8022ac6:	f85d fb04 	ldr.w	pc, [sp], #4
 8022aca:	bf00      	nop
 8022acc:	ffff0208 	.word	0xffff0208

08022ad0 <vsiprintf>:
 8022ad0:	4613      	mov	r3, r2
 8022ad2:	460a      	mov	r2, r1
 8022ad4:	4601      	mov	r1, r0
 8022ad6:	4802      	ldr	r0, [pc, #8]	; (8022ae0 <vsiprintf+0x10>)
 8022ad8:	6800      	ldr	r0, [r0, #0]
 8022ada:	f7ff bfe3 	b.w	8022aa4 <_vsiprintf_r>
 8022ade:	bf00      	nop
 8022ae0:	20000038 	.word	0x20000038

08022ae4 <_write_r>:
 8022ae4:	b538      	push	{r3, r4, r5, lr}
 8022ae6:	4d07      	ldr	r5, [pc, #28]	; (8022b04 <_write_r+0x20>)
 8022ae8:	4604      	mov	r4, r0
 8022aea:	4608      	mov	r0, r1
 8022aec:	4611      	mov	r1, r2
 8022aee:	2200      	movs	r2, #0
 8022af0:	602a      	str	r2, [r5, #0]
 8022af2:	461a      	mov	r2, r3
 8022af4:	f7e6 fc69 	bl	80093ca <_write>
 8022af8:	1c43      	adds	r3, r0, #1
 8022afa:	d102      	bne.n	8022b02 <_write_r+0x1e>
 8022afc:	682b      	ldr	r3, [r5, #0]
 8022afe:	b103      	cbz	r3, 8022b02 <_write_r+0x1e>
 8022b00:	6023      	str	r3, [r4, #0]
 8022b02:	bd38      	pop	{r3, r4, r5, pc}
 8022b04:	2000c124 	.word	0x2000c124

08022b08 <__register_exitproc>:
 8022b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022b0c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8022bc8 <__register_exitproc+0xc0>
 8022b10:	4606      	mov	r6, r0
 8022b12:	f8d8 0000 	ldr.w	r0, [r8]
 8022b16:	461f      	mov	r7, r3
 8022b18:	460d      	mov	r5, r1
 8022b1a:	4691      	mov	r9, r2
 8022b1c:	f7ff fd15 	bl	802254a <__retarget_lock_acquire_recursive>
 8022b20:	4b25      	ldr	r3, [pc, #148]	; (8022bb8 <__register_exitproc+0xb0>)
 8022b22:	681c      	ldr	r4, [r3, #0]
 8022b24:	b934      	cbnz	r4, 8022b34 <__register_exitproc+0x2c>
 8022b26:	4c25      	ldr	r4, [pc, #148]	; (8022bbc <__register_exitproc+0xb4>)
 8022b28:	601c      	str	r4, [r3, #0]
 8022b2a:	4b25      	ldr	r3, [pc, #148]	; (8022bc0 <__register_exitproc+0xb8>)
 8022b2c:	b113      	cbz	r3, 8022b34 <__register_exitproc+0x2c>
 8022b2e:	681b      	ldr	r3, [r3, #0]
 8022b30:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8022b34:	6863      	ldr	r3, [r4, #4]
 8022b36:	2b1f      	cmp	r3, #31
 8022b38:	dd07      	ble.n	8022b4a <__register_exitproc+0x42>
 8022b3a:	f8d8 0000 	ldr.w	r0, [r8]
 8022b3e:	f7ff fd06 	bl	802254e <__retarget_lock_release_recursive>
 8022b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b4a:	b34e      	cbz	r6, 8022ba0 <__register_exitproc+0x98>
 8022b4c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8022b50:	b988      	cbnz	r0, 8022b76 <__register_exitproc+0x6e>
 8022b52:	4b1c      	ldr	r3, [pc, #112]	; (8022bc4 <__register_exitproc+0xbc>)
 8022b54:	b923      	cbnz	r3, 8022b60 <__register_exitproc+0x58>
 8022b56:	f8d8 0000 	ldr.w	r0, [r8]
 8022b5a:	f7ff fcf7 	bl	802254c <__retarget_lock_release>
 8022b5e:	e7f0      	b.n	8022b42 <__register_exitproc+0x3a>
 8022b60:	f44f 7084 	mov.w	r0, #264	; 0x108
 8022b64:	f7ff fcf4 	bl	8022550 <malloc>
 8022b68:	2800      	cmp	r0, #0
 8022b6a:	d0f4      	beq.n	8022b56 <__register_exitproc+0x4e>
 8022b6c:	2300      	movs	r3, #0
 8022b6e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8022b72:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8022b76:	6863      	ldr	r3, [r4, #4]
 8022b78:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8022b7c:	2201      	movs	r2, #1
 8022b7e:	409a      	lsls	r2, r3
 8022b80:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8022b84:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8022b88:	4313      	orrs	r3, r2
 8022b8a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8022b8e:	2e02      	cmp	r6, #2
 8022b90:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8022b94:	bf02      	ittt	eq
 8022b96:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8022b9a:	4313      	orreq	r3, r2
 8022b9c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8022ba0:	6863      	ldr	r3, [r4, #4]
 8022ba2:	f8d8 0000 	ldr.w	r0, [r8]
 8022ba6:	1c5a      	adds	r2, r3, #1
 8022ba8:	3302      	adds	r3, #2
 8022baa:	6062      	str	r2, [r4, #4]
 8022bac:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8022bb0:	f7ff fccd 	bl	802254e <__retarget_lock_release_recursive>
 8022bb4:	2000      	movs	r0, #0
 8022bb6:	e7c6      	b.n	8022b46 <__register_exitproc+0x3e>
 8022bb8:	2000c1b4 	.word	0x2000c1b4
 8022bbc:	2000c128 	.word	0x2000c128
 8022bc0:	00000000 	.word	0x00000000
 8022bc4:	08022551 	.word	0x08022551
 8022bc8:	2000009c 	.word	0x2000009c

08022bcc <__assert_func>:
 8022bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022bce:	4614      	mov	r4, r2
 8022bd0:	461a      	mov	r2, r3
 8022bd2:	4b09      	ldr	r3, [pc, #36]	; (8022bf8 <__assert_func+0x2c>)
 8022bd4:	681b      	ldr	r3, [r3, #0]
 8022bd6:	4605      	mov	r5, r0
 8022bd8:	68d8      	ldr	r0, [r3, #12]
 8022bda:	b14c      	cbz	r4, 8022bf0 <__assert_func+0x24>
 8022bdc:	4b07      	ldr	r3, [pc, #28]	; (8022bfc <__assert_func+0x30>)
 8022bde:	9100      	str	r1, [sp, #0]
 8022be0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022be4:	4906      	ldr	r1, [pc, #24]	; (8022c00 <__assert_func+0x34>)
 8022be6:	462b      	mov	r3, r5
 8022be8:	f000 f8e0 	bl	8022dac <fiprintf>
 8022bec:	f7ff fb7e 	bl	80222ec <abort>
 8022bf0:	4b04      	ldr	r3, [pc, #16]	; (8022c04 <__assert_func+0x38>)
 8022bf2:	461c      	mov	r4, r3
 8022bf4:	e7f3      	b.n	8022bde <__assert_func+0x12>
 8022bf6:	bf00      	nop
 8022bf8:	20000038 	.word	0x20000038
 8022bfc:	0802752e 	.word	0x0802752e
 8022c00:	0802753b 	.word	0x0802753b
 8022c04:	08027569 	.word	0x08027569

08022c08 <_close_r>:
 8022c08:	b538      	push	{r3, r4, r5, lr}
 8022c0a:	4d06      	ldr	r5, [pc, #24]	; (8022c24 <_close_r+0x1c>)
 8022c0c:	2300      	movs	r3, #0
 8022c0e:	4604      	mov	r4, r0
 8022c10:	4608      	mov	r0, r1
 8022c12:	602b      	str	r3, [r5, #0]
 8022c14:	f7e6 fbf5 	bl	8009402 <_close>
 8022c18:	1c43      	adds	r3, r0, #1
 8022c1a:	d102      	bne.n	8022c22 <_close_r+0x1a>
 8022c1c:	682b      	ldr	r3, [r5, #0]
 8022c1e:	b103      	cbz	r3, 8022c22 <_close_r+0x1a>
 8022c20:	6023      	str	r3, [r4, #0]
 8022c22:	bd38      	pop	{r3, r4, r5, pc}
 8022c24:	2000c124 	.word	0x2000c124

08022c28 <__sflush_r>:
 8022c28:	898a      	ldrh	r2, [r1, #12]
 8022c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022c2e:	4605      	mov	r5, r0
 8022c30:	0710      	lsls	r0, r2, #28
 8022c32:	460c      	mov	r4, r1
 8022c34:	d458      	bmi.n	8022ce8 <__sflush_r+0xc0>
 8022c36:	684b      	ldr	r3, [r1, #4]
 8022c38:	2b00      	cmp	r3, #0
 8022c3a:	dc05      	bgt.n	8022c48 <__sflush_r+0x20>
 8022c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022c3e:	2b00      	cmp	r3, #0
 8022c40:	dc02      	bgt.n	8022c48 <__sflush_r+0x20>
 8022c42:	2000      	movs	r0, #0
 8022c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022c4a:	2e00      	cmp	r6, #0
 8022c4c:	d0f9      	beq.n	8022c42 <__sflush_r+0x1a>
 8022c4e:	2300      	movs	r3, #0
 8022c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022c54:	682f      	ldr	r7, [r5, #0]
 8022c56:	602b      	str	r3, [r5, #0]
 8022c58:	d032      	beq.n	8022cc0 <__sflush_r+0x98>
 8022c5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022c5c:	89a3      	ldrh	r3, [r4, #12]
 8022c5e:	075a      	lsls	r2, r3, #29
 8022c60:	d505      	bpl.n	8022c6e <__sflush_r+0x46>
 8022c62:	6863      	ldr	r3, [r4, #4]
 8022c64:	1ac0      	subs	r0, r0, r3
 8022c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022c68:	b10b      	cbz	r3, 8022c6e <__sflush_r+0x46>
 8022c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022c6c:	1ac0      	subs	r0, r0, r3
 8022c6e:	2300      	movs	r3, #0
 8022c70:	4602      	mov	r2, r0
 8022c72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022c74:	6a21      	ldr	r1, [r4, #32]
 8022c76:	4628      	mov	r0, r5
 8022c78:	47b0      	blx	r6
 8022c7a:	1c43      	adds	r3, r0, #1
 8022c7c:	89a3      	ldrh	r3, [r4, #12]
 8022c7e:	d106      	bne.n	8022c8e <__sflush_r+0x66>
 8022c80:	6829      	ldr	r1, [r5, #0]
 8022c82:	291d      	cmp	r1, #29
 8022c84:	d82c      	bhi.n	8022ce0 <__sflush_r+0xb8>
 8022c86:	4a2a      	ldr	r2, [pc, #168]	; (8022d30 <__sflush_r+0x108>)
 8022c88:	40ca      	lsrs	r2, r1
 8022c8a:	07d6      	lsls	r6, r2, #31
 8022c8c:	d528      	bpl.n	8022ce0 <__sflush_r+0xb8>
 8022c8e:	2200      	movs	r2, #0
 8022c90:	6062      	str	r2, [r4, #4]
 8022c92:	04d9      	lsls	r1, r3, #19
 8022c94:	6922      	ldr	r2, [r4, #16]
 8022c96:	6022      	str	r2, [r4, #0]
 8022c98:	d504      	bpl.n	8022ca4 <__sflush_r+0x7c>
 8022c9a:	1c42      	adds	r2, r0, #1
 8022c9c:	d101      	bne.n	8022ca2 <__sflush_r+0x7a>
 8022c9e:	682b      	ldr	r3, [r5, #0]
 8022ca0:	b903      	cbnz	r3, 8022ca4 <__sflush_r+0x7c>
 8022ca2:	6560      	str	r0, [r4, #84]	; 0x54
 8022ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022ca6:	602f      	str	r7, [r5, #0]
 8022ca8:	2900      	cmp	r1, #0
 8022caa:	d0ca      	beq.n	8022c42 <__sflush_r+0x1a>
 8022cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022cb0:	4299      	cmp	r1, r3
 8022cb2:	d002      	beq.n	8022cba <__sflush_r+0x92>
 8022cb4:	4628      	mov	r0, r5
 8022cb6:	f7ff fc9b 	bl	80225f0 <_free_r>
 8022cba:	2000      	movs	r0, #0
 8022cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8022cbe:	e7c1      	b.n	8022c44 <__sflush_r+0x1c>
 8022cc0:	6a21      	ldr	r1, [r4, #32]
 8022cc2:	2301      	movs	r3, #1
 8022cc4:	4628      	mov	r0, r5
 8022cc6:	47b0      	blx	r6
 8022cc8:	1c41      	adds	r1, r0, #1
 8022cca:	d1c7      	bne.n	8022c5c <__sflush_r+0x34>
 8022ccc:	682b      	ldr	r3, [r5, #0]
 8022cce:	2b00      	cmp	r3, #0
 8022cd0:	d0c4      	beq.n	8022c5c <__sflush_r+0x34>
 8022cd2:	2b1d      	cmp	r3, #29
 8022cd4:	d001      	beq.n	8022cda <__sflush_r+0xb2>
 8022cd6:	2b16      	cmp	r3, #22
 8022cd8:	d101      	bne.n	8022cde <__sflush_r+0xb6>
 8022cda:	602f      	str	r7, [r5, #0]
 8022cdc:	e7b1      	b.n	8022c42 <__sflush_r+0x1a>
 8022cde:	89a3      	ldrh	r3, [r4, #12]
 8022ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022ce4:	81a3      	strh	r3, [r4, #12]
 8022ce6:	e7ad      	b.n	8022c44 <__sflush_r+0x1c>
 8022ce8:	690f      	ldr	r7, [r1, #16]
 8022cea:	2f00      	cmp	r7, #0
 8022cec:	d0a9      	beq.n	8022c42 <__sflush_r+0x1a>
 8022cee:	0793      	lsls	r3, r2, #30
 8022cf0:	680e      	ldr	r6, [r1, #0]
 8022cf2:	bf08      	it	eq
 8022cf4:	694b      	ldreq	r3, [r1, #20]
 8022cf6:	600f      	str	r7, [r1, #0]
 8022cf8:	bf18      	it	ne
 8022cfa:	2300      	movne	r3, #0
 8022cfc:	eba6 0807 	sub.w	r8, r6, r7
 8022d00:	608b      	str	r3, [r1, #8]
 8022d02:	f1b8 0f00 	cmp.w	r8, #0
 8022d06:	dd9c      	ble.n	8022c42 <__sflush_r+0x1a>
 8022d08:	6a21      	ldr	r1, [r4, #32]
 8022d0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022d0c:	4643      	mov	r3, r8
 8022d0e:	463a      	mov	r2, r7
 8022d10:	4628      	mov	r0, r5
 8022d12:	47b0      	blx	r6
 8022d14:	2800      	cmp	r0, #0
 8022d16:	dc06      	bgt.n	8022d26 <__sflush_r+0xfe>
 8022d18:	89a3      	ldrh	r3, [r4, #12]
 8022d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022d1e:	81a3      	strh	r3, [r4, #12]
 8022d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022d24:	e78e      	b.n	8022c44 <__sflush_r+0x1c>
 8022d26:	4407      	add	r7, r0
 8022d28:	eba8 0800 	sub.w	r8, r8, r0
 8022d2c:	e7e9      	b.n	8022d02 <__sflush_r+0xda>
 8022d2e:	bf00      	nop
 8022d30:	20400001 	.word	0x20400001

08022d34 <_fflush_r>:
 8022d34:	b538      	push	{r3, r4, r5, lr}
 8022d36:	690b      	ldr	r3, [r1, #16]
 8022d38:	4605      	mov	r5, r0
 8022d3a:	460c      	mov	r4, r1
 8022d3c:	b913      	cbnz	r3, 8022d44 <_fflush_r+0x10>
 8022d3e:	2500      	movs	r5, #0
 8022d40:	4628      	mov	r0, r5
 8022d42:	bd38      	pop	{r3, r4, r5, pc}
 8022d44:	b118      	cbz	r0, 8022d4e <_fflush_r+0x1a>
 8022d46:	6983      	ldr	r3, [r0, #24]
 8022d48:	b90b      	cbnz	r3, 8022d4e <_fflush_r+0x1a>
 8022d4a:	f7ff fb3b 	bl	80223c4 <__sinit>
 8022d4e:	4b14      	ldr	r3, [pc, #80]	; (8022da0 <_fflush_r+0x6c>)
 8022d50:	429c      	cmp	r4, r3
 8022d52:	d11b      	bne.n	8022d8c <_fflush_r+0x58>
 8022d54:	686c      	ldr	r4, [r5, #4]
 8022d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	d0ef      	beq.n	8022d3e <_fflush_r+0xa>
 8022d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022d60:	07d0      	lsls	r0, r2, #31
 8022d62:	d404      	bmi.n	8022d6e <_fflush_r+0x3a>
 8022d64:	0599      	lsls	r1, r3, #22
 8022d66:	d402      	bmi.n	8022d6e <_fflush_r+0x3a>
 8022d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022d6a:	f7ff fbee 	bl	802254a <__retarget_lock_acquire_recursive>
 8022d6e:	4628      	mov	r0, r5
 8022d70:	4621      	mov	r1, r4
 8022d72:	f7ff ff59 	bl	8022c28 <__sflush_r>
 8022d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022d78:	07da      	lsls	r2, r3, #31
 8022d7a:	4605      	mov	r5, r0
 8022d7c:	d4e0      	bmi.n	8022d40 <_fflush_r+0xc>
 8022d7e:	89a3      	ldrh	r3, [r4, #12]
 8022d80:	059b      	lsls	r3, r3, #22
 8022d82:	d4dd      	bmi.n	8022d40 <_fflush_r+0xc>
 8022d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022d86:	f7ff fbe2 	bl	802254e <__retarget_lock_release_recursive>
 8022d8a:	e7d9      	b.n	8022d40 <_fflush_r+0xc>
 8022d8c:	4b05      	ldr	r3, [pc, #20]	; (8022da4 <_fflush_r+0x70>)
 8022d8e:	429c      	cmp	r4, r3
 8022d90:	d101      	bne.n	8022d96 <_fflush_r+0x62>
 8022d92:	68ac      	ldr	r4, [r5, #8]
 8022d94:	e7df      	b.n	8022d56 <_fflush_r+0x22>
 8022d96:	4b04      	ldr	r3, [pc, #16]	; (8022da8 <_fflush_r+0x74>)
 8022d98:	429c      	cmp	r4, r3
 8022d9a:	bf08      	it	eq
 8022d9c:	68ec      	ldreq	r4, [r5, #12]
 8022d9e:	e7da      	b.n	8022d56 <_fflush_r+0x22>
 8022da0:	08027478 	.word	0x08027478
 8022da4:	08027498 	.word	0x08027498
 8022da8:	08027458 	.word	0x08027458

08022dac <fiprintf>:
 8022dac:	b40e      	push	{r1, r2, r3}
 8022dae:	b503      	push	{r0, r1, lr}
 8022db0:	4601      	mov	r1, r0
 8022db2:	ab03      	add	r3, sp, #12
 8022db4:	4805      	ldr	r0, [pc, #20]	; (8022dcc <fiprintf+0x20>)
 8022db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8022dba:	6800      	ldr	r0, [r0, #0]
 8022dbc:	9301      	str	r3, [sp, #4]
 8022dbe:	f000 f99f 	bl	8023100 <_vfiprintf_r>
 8022dc2:	b002      	add	sp, #8
 8022dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8022dc8:	b003      	add	sp, #12
 8022dca:	4770      	bx	lr
 8022dcc:	20000038 	.word	0x20000038

08022dd0 <_lseek_r>:
 8022dd0:	b538      	push	{r3, r4, r5, lr}
 8022dd2:	4d07      	ldr	r5, [pc, #28]	; (8022df0 <_lseek_r+0x20>)
 8022dd4:	4604      	mov	r4, r0
 8022dd6:	4608      	mov	r0, r1
 8022dd8:	4611      	mov	r1, r2
 8022dda:	2200      	movs	r2, #0
 8022ddc:	602a      	str	r2, [r5, #0]
 8022dde:	461a      	mov	r2, r3
 8022de0:	f7e6 fb36 	bl	8009450 <_lseek>
 8022de4:	1c43      	adds	r3, r0, #1
 8022de6:	d102      	bne.n	8022dee <_lseek_r+0x1e>
 8022de8:	682b      	ldr	r3, [r5, #0]
 8022dea:	b103      	cbz	r3, 8022dee <_lseek_r+0x1e>
 8022dec:	6023      	str	r3, [r4, #0]
 8022dee:	bd38      	pop	{r3, r4, r5, pc}
 8022df0:	2000c124 	.word	0x2000c124

08022df4 <__ssputs_r>:
 8022df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022df8:	688e      	ldr	r6, [r1, #8]
 8022dfa:	429e      	cmp	r6, r3
 8022dfc:	4682      	mov	sl, r0
 8022dfe:	460c      	mov	r4, r1
 8022e00:	4690      	mov	r8, r2
 8022e02:	461f      	mov	r7, r3
 8022e04:	d838      	bhi.n	8022e78 <__ssputs_r+0x84>
 8022e06:	898a      	ldrh	r2, [r1, #12]
 8022e08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022e0c:	d032      	beq.n	8022e74 <__ssputs_r+0x80>
 8022e0e:	6825      	ldr	r5, [r4, #0]
 8022e10:	6909      	ldr	r1, [r1, #16]
 8022e12:	eba5 0901 	sub.w	r9, r5, r1
 8022e16:	6965      	ldr	r5, [r4, #20]
 8022e18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022e1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022e20:	3301      	adds	r3, #1
 8022e22:	444b      	add	r3, r9
 8022e24:	106d      	asrs	r5, r5, #1
 8022e26:	429d      	cmp	r5, r3
 8022e28:	bf38      	it	cc
 8022e2a:	461d      	movcc	r5, r3
 8022e2c:	0553      	lsls	r3, r2, #21
 8022e2e:	d531      	bpl.n	8022e94 <__ssputs_r+0xa0>
 8022e30:	4629      	mov	r1, r5
 8022e32:	f7ff fc49 	bl	80226c8 <_malloc_r>
 8022e36:	4606      	mov	r6, r0
 8022e38:	b950      	cbnz	r0, 8022e50 <__ssputs_r+0x5c>
 8022e3a:	230c      	movs	r3, #12
 8022e3c:	f8ca 3000 	str.w	r3, [sl]
 8022e40:	89a3      	ldrh	r3, [r4, #12]
 8022e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022e46:	81a3      	strh	r3, [r4, #12]
 8022e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e50:	6921      	ldr	r1, [r4, #16]
 8022e52:	464a      	mov	r2, r9
 8022e54:	f7ff fb9c 	bl	8022590 <memcpy>
 8022e58:	89a3      	ldrh	r3, [r4, #12]
 8022e5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022e62:	81a3      	strh	r3, [r4, #12]
 8022e64:	6126      	str	r6, [r4, #16]
 8022e66:	6165      	str	r5, [r4, #20]
 8022e68:	444e      	add	r6, r9
 8022e6a:	eba5 0509 	sub.w	r5, r5, r9
 8022e6e:	6026      	str	r6, [r4, #0]
 8022e70:	60a5      	str	r5, [r4, #8]
 8022e72:	463e      	mov	r6, r7
 8022e74:	42be      	cmp	r6, r7
 8022e76:	d900      	bls.n	8022e7a <__ssputs_r+0x86>
 8022e78:	463e      	mov	r6, r7
 8022e7a:	6820      	ldr	r0, [r4, #0]
 8022e7c:	4632      	mov	r2, r6
 8022e7e:	4641      	mov	r1, r8
 8022e80:	f7ff fb94 	bl	80225ac <memmove>
 8022e84:	68a3      	ldr	r3, [r4, #8]
 8022e86:	1b9b      	subs	r3, r3, r6
 8022e88:	60a3      	str	r3, [r4, #8]
 8022e8a:	6823      	ldr	r3, [r4, #0]
 8022e8c:	4433      	add	r3, r6
 8022e8e:	6023      	str	r3, [r4, #0]
 8022e90:	2000      	movs	r0, #0
 8022e92:	e7db      	b.n	8022e4c <__ssputs_r+0x58>
 8022e94:	462a      	mov	r2, r5
 8022e96:	f000 fd2f 	bl	80238f8 <_realloc_r>
 8022e9a:	4606      	mov	r6, r0
 8022e9c:	2800      	cmp	r0, #0
 8022e9e:	d1e1      	bne.n	8022e64 <__ssputs_r+0x70>
 8022ea0:	6921      	ldr	r1, [r4, #16]
 8022ea2:	4650      	mov	r0, sl
 8022ea4:	f7ff fba4 	bl	80225f0 <_free_r>
 8022ea8:	e7c7      	b.n	8022e3a <__ssputs_r+0x46>
	...

08022eac <_svfiprintf_r>:
 8022eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022eb0:	4698      	mov	r8, r3
 8022eb2:	898b      	ldrh	r3, [r1, #12]
 8022eb4:	061b      	lsls	r3, r3, #24
 8022eb6:	b09d      	sub	sp, #116	; 0x74
 8022eb8:	4607      	mov	r7, r0
 8022eba:	460d      	mov	r5, r1
 8022ebc:	4614      	mov	r4, r2
 8022ebe:	d50e      	bpl.n	8022ede <_svfiprintf_r+0x32>
 8022ec0:	690b      	ldr	r3, [r1, #16]
 8022ec2:	b963      	cbnz	r3, 8022ede <_svfiprintf_r+0x32>
 8022ec4:	2140      	movs	r1, #64	; 0x40
 8022ec6:	f7ff fbff 	bl	80226c8 <_malloc_r>
 8022eca:	6028      	str	r0, [r5, #0]
 8022ecc:	6128      	str	r0, [r5, #16]
 8022ece:	b920      	cbnz	r0, 8022eda <_svfiprintf_r+0x2e>
 8022ed0:	230c      	movs	r3, #12
 8022ed2:	603b      	str	r3, [r7, #0]
 8022ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022ed8:	e0d1      	b.n	802307e <_svfiprintf_r+0x1d2>
 8022eda:	2340      	movs	r3, #64	; 0x40
 8022edc:	616b      	str	r3, [r5, #20]
 8022ede:	2300      	movs	r3, #0
 8022ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8022ee2:	2320      	movs	r3, #32
 8022ee4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8022eec:	2330      	movs	r3, #48	; 0x30
 8022eee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8023098 <_svfiprintf_r+0x1ec>
 8022ef2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022ef6:	f04f 0901 	mov.w	r9, #1
 8022efa:	4623      	mov	r3, r4
 8022efc:	469a      	mov	sl, r3
 8022efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022f02:	b10a      	cbz	r2, 8022f08 <_svfiprintf_r+0x5c>
 8022f04:	2a25      	cmp	r2, #37	; 0x25
 8022f06:	d1f9      	bne.n	8022efc <_svfiprintf_r+0x50>
 8022f08:	ebba 0b04 	subs.w	fp, sl, r4
 8022f0c:	d00b      	beq.n	8022f26 <_svfiprintf_r+0x7a>
 8022f0e:	465b      	mov	r3, fp
 8022f10:	4622      	mov	r2, r4
 8022f12:	4629      	mov	r1, r5
 8022f14:	4638      	mov	r0, r7
 8022f16:	f7ff ff6d 	bl	8022df4 <__ssputs_r>
 8022f1a:	3001      	adds	r0, #1
 8022f1c:	f000 80aa 	beq.w	8023074 <_svfiprintf_r+0x1c8>
 8022f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022f22:	445a      	add	r2, fp
 8022f24:	9209      	str	r2, [sp, #36]	; 0x24
 8022f26:	f89a 3000 	ldrb.w	r3, [sl]
 8022f2a:	2b00      	cmp	r3, #0
 8022f2c:	f000 80a2 	beq.w	8023074 <_svfiprintf_r+0x1c8>
 8022f30:	2300      	movs	r3, #0
 8022f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022f3a:	f10a 0a01 	add.w	sl, sl, #1
 8022f3e:	9304      	str	r3, [sp, #16]
 8022f40:	9307      	str	r3, [sp, #28]
 8022f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022f46:	931a      	str	r3, [sp, #104]	; 0x68
 8022f48:	4654      	mov	r4, sl
 8022f4a:	2205      	movs	r2, #5
 8022f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022f50:	4851      	ldr	r0, [pc, #324]	; (8023098 <_svfiprintf_r+0x1ec>)
 8022f52:	f7dd f965 	bl	8000220 <memchr>
 8022f56:	9a04      	ldr	r2, [sp, #16]
 8022f58:	b9d8      	cbnz	r0, 8022f92 <_svfiprintf_r+0xe6>
 8022f5a:	06d0      	lsls	r0, r2, #27
 8022f5c:	bf44      	itt	mi
 8022f5e:	2320      	movmi	r3, #32
 8022f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022f64:	0711      	lsls	r1, r2, #28
 8022f66:	bf44      	itt	mi
 8022f68:	232b      	movmi	r3, #43	; 0x2b
 8022f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8022f72:	2b2a      	cmp	r3, #42	; 0x2a
 8022f74:	d015      	beq.n	8022fa2 <_svfiprintf_r+0xf6>
 8022f76:	9a07      	ldr	r2, [sp, #28]
 8022f78:	4654      	mov	r4, sl
 8022f7a:	2000      	movs	r0, #0
 8022f7c:	f04f 0c0a 	mov.w	ip, #10
 8022f80:	4621      	mov	r1, r4
 8022f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022f86:	3b30      	subs	r3, #48	; 0x30
 8022f88:	2b09      	cmp	r3, #9
 8022f8a:	d94e      	bls.n	802302a <_svfiprintf_r+0x17e>
 8022f8c:	b1b0      	cbz	r0, 8022fbc <_svfiprintf_r+0x110>
 8022f8e:	9207      	str	r2, [sp, #28]
 8022f90:	e014      	b.n	8022fbc <_svfiprintf_r+0x110>
 8022f92:	eba0 0308 	sub.w	r3, r0, r8
 8022f96:	fa09 f303 	lsl.w	r3, r9, r3
 8022f9a:	4313      	orrs	r3, r2
 8022f9c:	9304      	str	r3, [sp, #16]
 8022f9e:	46a2      	mov	sl, r4
 8022fa0:	e7d2      	b.n	8022f48 <_svfiprintf_r+0x9c>
 8022fa2:	9b03      	ldr	r3, [sp, #12]
 8022fa4:	1d19      	adds	r1, r3, #4
 8022fa6:	681b      	ldr	r3, [r3, #0]
 8022fa8:	9103      	str	r1, [sp, #12]
 8022faa:	2b00      	cmp	r3, #0
 8022fac:	bfbb      	ittet	lt
 8022fae:	425b      	neglt	r3, r3
 8022fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8022fb4:	9307      	strge	r3, [sp, #28]
 8022fb6:	9307      	strlt	r3, [sp, #28]
 8022fb8:	bfb8      	it	lt
 8022fba:	9204      	strlt	r2, [sp, #16]
 8022fbc:	7823      	ldrb	r3, [r4, #0]
 8022fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8022fc0:	d10c      	bne.n	8022fdc <_svfiprintf_r+0x130>
 8022fc2:	7863      	ldrb	r3, [r4, #1]
 8022fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8022fc6:	d135      	bne.n	8023034 <_svfiprintf_r+0x188>
 8022fc8:	9b03      	ldr	r3, [sp, #12]
 8022fca:	1d1a      	adds	r2, r3, #4
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	9203      	str	r2, [sp, #12]
 8022fd0:	2b00      	cmp	r3, #0
 8022fd2:	bfb8      	it	lt
 8022fd4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8022fd8:	3402      	adds	r4, #2
 8022fda:	9305      	str	r3, [sp, #20]
 8022fdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80230a8 <_svfiprintf_r+0x1fc>
 8022fe0:	7821      	ldrb	r1, [r4, #0]
 8022fe2:	2203      	movs	r2, #3
 8022fe4:	4650      	mov	r0, sl
 8022fe6:	f7dd f91b 	bl	8000220 <memchr>
 8022fea:	b140      	cbz	r0, 8022ffe <_svfiprintf_r+0x152>
 8022fec:	2340      	movs	r3, #64	; 0x40
 8022fee:	eba0 000a 	sub.w	r0, r0, sl
 8022ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8022ff6:	9b04      	ldr	r3, [sp, #16]
 8022ff8:	4303      	orrs	r3, r0
 8022ffa:	3401      	adds	r4, #1
 8022ffc:	9304      	str	r3, [sp, #16]
 8022ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023002:	4826      	ldr	r0, [pc, #152]	; (802309c <_svfiprintf_r+0x1f0>)
 8023004:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023008:	2206      	movs	r2, #6
 802300a:	f7dd f909 	bl	8000220 <memchr>
 802300e:	2800      	cmp	r0, #0
 8023010:	d038      	beq.n	8023084 <_svfiprintf_r+0x1d8>
 8023012:	4b23      	ldr	r3, [pc, #140]	; (80230a0 <_svfiprintf_r+0x1f4>)
 8023014:	bb1b      	cbnz	r3, 802305e <_svfiprintf_r+0x1b2>
 8023016:	9b03      	ldr	r3, [sp, #12]
 8023018:	3307      	adds	r3, #7
 802301a:	f023 0307 	bic.w	r3, r3, #7
 802301e:	3308      	adds	r3, #8
 8023020:	9303      	str	r3, [sp, #12]
 8023022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023024:	4433      	add	r3, r6
 8023026:	9309      	str	r3, [sp, #36]	; 0x24
 8023028:	e767      	b.n	8022efa <_svfiprintf_r+0x4e>
 802302a:	fb0c 3202 	mla	r2, ip, r2, r3
 802302e:	460c      	mov	r4, r1
 8023030:	2001      	movs	r0, #1
 8023032:	e7a5      	b.n	8022f80 <_svfiprintf_r+0xd4>
 8023034:	2300      	movs	r3, #0
 8023036:	3401      	adds	r4, #1
 8023038:	9305      	str	r3, [sp, #20]
 802303a:	4619      	mov	r1, r3
 802303c:	f04f 0c0a 	mov.w	ip, #10
 8023040:	4620      	mov	r0, r4
 8023042:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023046:	3a30      	subs	r2, #48	; 0x30
 8023048:	2a09      	cmp	r2, #9
 802304a:	d903      	bls.n	8023054 <_svfiprintf_r+0x1a8>
 802304c:	2b00      	cmp	r3, #0
 802304e:	d0c5      	beq.n	8022fdc <_svfiprintf_r+0x130>
 8023050:	9105      	str	r1, [sp, #20]
 8023052:	e7c3      	b.n	8022fdc <_svfiprintf_r+0x130>
 8023054:	fb0c 2101 	mla	r1, ip, r1, r2
 8023058:	4604      	mov	r4, r0
 802305a:	2301      	movs	r3, #1
 802305c:	e7f0      	b.n	8023040 <_svfiprintf_r+0x194>
 802305e:	ab03      	add	r3, sp, #12
 8023060:	9300      	str	r3, [sp, #0]
 8023062:	462a      	mov	r2, r5
 8023064:	4b0f      	ldr	r3, [pc, #60]	; (80230a4 <_svfiprintf_r+0x1f8>)
 8023066:	a904      	add	r1, sp, #16
 8023068:	4638      	mov	r0, r7
 802306a:	f3af 8000 	nop.w
 802306e:	1c42      	adds	r2, r0, #1
 8023070:	4606      	mov	r6, r0
 8023072:	d1d6      	bne.n	8023022 <_svfiprintf_r+0x176>
 8023074:	89ab      	ldrh	r3, [r5, #12]
 8023076:	065b      	lsls	r3, r3, #25
 8023078:	f53f af2c 	bmi.w	8022ed4 <_svfiprintf_r+0x28>
 802307c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802307e:	b01d      	add	sp, #116	; 0x74
 8023080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023084:	ab03      	add	r3, sp, #12
 8023086:	9300      	str	r3, [sp, #0]
 8023088:	462a      	mov	r2, r5
 802308a:	4b06      	ldr	r3, [pc, #24]	; (80230a4 <_svfiprintf_r+0x1f8>)
 802308c:	a904      	add	r1, sp, #16
 802308e:	4638      	mov	r0, r7
 8023090:	f000 f9d4 	bl	802343c <_printf_i>
 8023094:	e7eb      	b.n	802306e <_svfiprintf_r+0x1c2>
 8023096:	bf00      	nop
 8023098:	0802756a 	.word	0x0802756a
 802309c:	08027574 	.word	0x08027574
 80230a0:	00000000 	.word	0x00000000
 80230a4:	08022df5 	.word	0x08022df5
 80230a8:	08027570 	.word	0x08027570

080230ac <__sfputc_r>:
 80230ac:	6893      	ldr	r3, [r2, #8]
 80230ae:	3b01      	subs	r3, #1
 80230b0:	2b00      	cmp	r3, #0
 80230b2:	b410      	push	{r4}
 80230b4:	6093      	str	r3, [r2, #8]
 80230b6:	da08      	bge.n	80230ca <__sfputc_r+0x1e>
 80230b8:	6994      	ldr	r4, [r2, #24]
 80230ba:	42a3      	cmp	r3, r4
 80230bc:	db01      	blt.n	80230c2 <__sfputc_r+0x16>
 80230be:	290a      	cmp	r1, #10
 80230c0:	d103      	bne.n	80230ca <__sfputc_r+0x1e>
 80230c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80230c6:	f000 baf1 	b.w	80236ac <__swbuf_r>
 80230ca:	6813      	ldr	r3, [r2, #0]
 80230cc:	1c58      	adds	r0, r3, #1
 80230ce:	6010      	str	r0, [r2, #0]
 80230d0:	7019      	strb	r1, [r3, #0]
 80230d2:	4608      	mov	r0, r1
 80230d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80230d8:	4770      	bx	lr

080230da <__sfputs_r>:
 80230da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80230dc:	4606      	mov	r6, r0
 80230de:	460f      	mov	r7, r1
 80230e0:	4614      	mov	r4, r2
 80230e2:	18d5      	adds	r5, r2, r3
 80230e4:	42ac      	cmp	r4, r5
 80230e6:	d101      	bne.n	80230ec <__sfputs_r+0x12>
 80230e8:	2000      	movs	r0, #0
 80230ea:	e007      	b.n	80230fc <__sfputs_r+0x22>
 80230ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80230f0:	463a      	mov	r2, r7
 80230f2:	4630      	mov	r0, r6
 80230f4:	f7ff ffda 	bl	80230ac <__sfputc_r>
 80230f8:	1c43      	adds	r3, r0, #1
 80230fa:	d1f3      	bne.n	80230e4 <__sfputs_r+0xa>
 80230fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023100 <_vfiprintf_r>:
 8023100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023104:	460d      	mov	r5, r1
 8023106:	b09d      	sub	sp, #116	; 0x74
 8023108:	4614      	mov	r4, r2
 802310a:	4698      	mov	r8, r3
 802310c:	4606      	mov	r6, r0
 802310e:	b118      	cbz	r0, 8023118 <_vfiprintf_r+0x18>
 8023110:	6983      	ldr	r3, [r0, #24]
 8023112:	b90b      	cbnz	r3, 8023118 <_vfiprintf_r+0x18>
 8023114:	f7ff f956 	bl	80223c4 <__sinit>
 8023118:	4b89      	ldr	r3, [pc, #548]	; (8023340 <_vfiprintf_r+0x240>)
 802311a:	429d      	cmp	r5, r3
 802311c:	d11b      	bne.n	8023156 <_vfiprintf_r+0x56>
 802311e:	6875      	ldr	r5, [r6, #4]
 8023120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023122:	07d9      	lsls	r1, r3, #31
 8023124:	d405      	bmi.n	8023132 <_vfiprintf_r+0x32>
 8023126:	89ab      	ldrh	r3, [r5, #12]
 8023128:	059a      	lsls	r2, r3, #22
 802312a:	d402      	bmi.n	8023132 <_vfiprintf_r+0x32>
 802312c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802312e:	f7ff fa0c 	bl	802254a <__retarget_lock_acquire_recursive>
 8023132:	89ab      	ldrh	r3, [r5, #12]
 8023134:	071b      	lsls	r3, r3, #28
 8023136:	d501      	bpl.n	802313c <_vfiprintf_r+0x3c>
 8023138:	692b      	ldr	r3, [r5, #16]
 802313a:	b9eb      	cbnz	r3, 8023178 <_vfiprintf_r+0x78>
 802313c:	4629      	mov	r1, r5
 802313e:	4630      	mov	r0, r6
 8023140:	f000 fb06 	bl	8023750 <__swsetup_r>
 8023144:	b1c0      	cbz	r0, 8023178 <_vfiprintf_r+0x78>
 8023146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023148:	07dc      	lsls	r4, r3, #31
 802314a:	d50e      	bpl.n	802316a <_vfiprintf_r+0x6a>
 802314c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023150:	b01d      	add	sp, #116	; 0x74
 8023152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023156:	4b7b      	ldr	r3, [pc, #492]	; (8023344 <_vfiprintf_r+0x244>)
 8023158:	429d      	cmp	r5, r3
 802315a:	d101      	bne.n	8023160 <_vfiprintf_r+0x60>
 802315c:	68b5      	ldr	r5, [r6, #8]
 802315e:	e7df      	b.n	8023120 <_vfiprintf_r+0x20>
 8023160:	4b79      	ldr	r3, [pc, #484]	; (8023348 <_vfiprintf_r+0x248>)
 8023162:	429d      	cmp	r5, r3
 8023164:	bf08      	it	eq
 8023166:	68f5      	ldreq	r5, [r6, #12]
 8023168:	e7da      	b.n	8023120 <_vfiprintf_r+0x20>
 802316a:	89ab      	ldrh	r3, [r5, #12]
 802316c:	0598      	lsls	r0, r3, #22
 802316e:	d4ed      	bmi.n	802314c <_vfiprintf_r+0x4c>
 8023170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023172:	f7ff f9ec 	bl	802254e <__retarget_lock_release_recursive>
 8023176:	e7e9      	b.n	802314c <_vfiprintf_r+0x4c>
 8023178:	2300      	movs	r3, #0
 802317a:	9309      	str	r3, [sp, #36]	; 0x24
 802317c:	2320      	movs	r3, #32
 802317e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023182:	f8cd 800c 	str.w	r8, [sp, #12]
 8023186:	2330      	movs	r3, #48	; 0x30
 8023188:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802334c <_vfiprintf_r+0x24c>
 802318c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023190:	f04f 0901 	mov.w	r9, #1
 8023194:	4623      	mov	r3, r4
 8023196:	469a      	mov	sl, r3
 8023198:	f813 2b01 	ldrb.w	r2, [r3], #1
 802319c:	b10a      	cbz	r2, 80231a2 <_vfiprintf_r+0xa2>
 802319e:	2a25      	cmp	r2, #37	; 0x25
 80231a0:	d1f9      	bne.n	8023196 <_vfiprintf_r+0x96>
 80231a2:	ebba 0b04 	subs.w	fp, sl, r4
 80231a6:	d00b      	beq.n	80231c0 <_vfiprintf_r+0xc0>
 80231a8:	465b      	mov	r3, fp
 80231aa:	4622      	mov	r2, r4
 80231ac:	4629      	mov	r1, r5
 80231ae:	4630      	mov	r0, r6
 80231b0:	f7ff ff93 	bl	80230da <__sfputs_r>
 80231b4:	3001      	adds	r0, #1
 80231b6:	f000 80aa 	beq.w	802330e <_vfiprintf_r+0x20e>
 80231ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80231bc:	445a      	add	r2, fp
 80231be:	9209      	str	r2, [sp, #36]	; 0x24
 80231c0:	f89a 3000 	ldrb.w	r3, [sl]
 80231c4:	2b00      	cmp	r3, #0
 80231c6:	f000 80a2 	beq.w	802330e <_vfiprintf_r+0x20e>
 80231ca:	2300      	movs	r3, #0
 80231cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80231d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80231d4:	f10a 0a01 	add.w	sl, sl, #1
 80231d8:	9304      	str	r3, [sp, #16]
 80231da:	9307      	str	r3, [sp, #28]
 80231dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80231e0:	931a      	str	r3, [sp, #104]	; 0x68
 80231e2:	4654      	mov	r4, sl
 80231e4:	2205      	movs	r2, #5
 80231e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80231ea:	4858      	ldr	r0, [pc, #352]	; (802334c <_vfiprintf_r+0x24c>)
 80231ec:	f7dd f818 	bl	8000220 <memchr>
 80231f0:	9a04      	ldr	r2, [sp, #16]
 80231f2:	b9d8      	cbnz	r0, 802322c <_vfiprintf_r+0x12c>
 80231f4:	06d1      	lsls	r1, r2, #27
 80231f6:	bf44      	itt	mi
 80231f8:	2320      	movmi	r3, #32
 80231fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80231fe:	0713      	lsls	r3, r2, #28
 8023200:	bf44      	itt	mi
 8023202:	232b      	movmi	r3, #43	; 0x2b
 8023204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023208:	f89a 3000 	ldrb.w	r3, [sl]
 802320c:	2b2a      	cmp	r3, #42	; 0x2a
 802320e:	d015      	beq.n	802323c <_vfiprintf_r+0x13c>
 8023210:	9a07      	ldr	r2, [sp, #28]
 8023212:	4654      	mov	r4, sl
 8023214:	2000      	movs	r0, #0
 8023216:	f04f 0c0a 	mov.w	ip, #10
 802321a:	4621      	mov	r1, r4
 802321c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023220:	3b30      	subs	r3, #48	; 0x30
 8023222:	2b09      	cmp	r3, #9
 8023224:	d94e      	bls.n	80232c4 <_vfiprintf_r+0x1c4>
 8023226:	b1b0      	cbz	r0, 8023256 <_vfiprintf_r+0x156>
 8023228:	9207      	str	r2, [sp, #28]
 802322a:	e014      	b.n	8023256 <_vfiprintf_r+0x156>
 802322c:	eba0 0308 	sub.w	r3, r0, r8
 8023230:	fa09 f303 	lsl.w	r3, r9, r3
 8023234:	4313      	orrs	r3, r2
 8023236:	9304      	str	r3, [sp, #16]
 8023238:	46a2      	mov	sl, r4
 802323a:	e7d2      	b.n	80231e2 <_vfiprintf_r+0xe2>
 802323c:	9b03      	ldr	r3, [sp, #12]
 802323e:	1d19      	adds	r1, r3, #4
 8023240:	681b      	ldr	r3, [r3, #0]
 8023242:	9103      	str	r1, [sp, #12]
 8023244:	2b00      	cmp	r3, #0
 8023246:	bfbb      	ittet	lt
 8023248:	425b      	neglt	r3, r3
 802324a:	f042 0202 	orrlt.w	r2, r2, #2
 802324e:	9307      	strge	r3, [sp, #28]
 8023250:	9307      	strlt	r3, [sp, #28]
 8023252:	bfb8      	it	lt
 8023254:	9204      	strlt	r2, [sp, #16]
 8023256:	7823      	ldrb	r3, [r4, #0]
 8023258:	2b2e      	cmp	r3, #46	; 0x2e
 802325a:	d10c      	bne.n	8023276 <_vfiprintf_r+0x176>
 802325c:	7863      	ldrb	r3, [r4, #1]
 802325e:	2b2a      	cmp	r3, #42	; 0x2a
 8023260:	d135      	bne.n	80232ce <_vfiprintf_r+0x1ce>
 8023262:	9b03      	ldr	r3, [sp, #12]
 8023264:	1d1a      	adds	r2, r3, #4
 8023266:	681b      	ldr	r3, [r3, #0]
 8023268:	9203      	str	r2, [sp, #12]
 802326a:	2b00      	cmp	r3, #0
 802326c:	bfb8      	it	lt
 802326e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023272:	3402      	adds	r4, #2
 8023274:	9305      	str	r3, [sp, #20]
 8023276:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802335c <_vfiprintf_r+0x25c>
 802327a:	7821      	ldrb	r1, [r4, #0]
 802327c:	2203      	movs	r2, #3
 802327e:	4650      	mov	r0, sl
 8023280:	f7dc ffce 	bl	8000220 <memchr>
 8023284:	b140      	cbz	r0, 8023298 <_vfiprintf_r+0x198>
 8023286:	2340      	movs	r3, #64	; 0x40
 8023288:	eba0 000a 	sub.w	r0, r0, sl
 802328c:	fa03 f000 	lsl.w	r0, r3, r0
 8023290:	9b04      	ldr	r3, [sp, #16]
 8023292:	4303      	orrs	r3, r0
 8023294:	3401      	adds	r4, #1
 8023296:	9304      	str	r3, [sp, #16]
 8023298:	f814 1b01 	ldrb.w	r1, [r4], #1
 802329c:	482c      	ldr	r0, [pc, #176]	; (8023350 <_vfiprintf_r+0x250>)
 802329e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80232a2:	2206      	movs	r2, #6
 80232a4:	f7dc ffbc 	bl	8000220 <memchr>
 80232a8:	2800      	cmp	r0, #0
 80232aa:	d03f      	beq.n	802332c <_vfiprintf_r+0x22c>
 80232ac:	4b29      	ldr	r3, [pc, #164]	; (8023354 <_vfiprintf_r+0x254>)
 80232ae:	bb1b      	cbnz	r3, 80232f8 <_vfiprintf_r+0x1f8>
 80232b0:	9b03      	ldr	r3, [sp, #12]
 80232b2:	3307      	adds	r3, #7
 80232b4:	f023 0307 	bic.w	r3, r3, #7
 80232b8:	3308      	adds	r3, #8
 80232ba:	9303      	str	r3, [sp, #12]
 80232bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232be:	443b      	add	r3, r7
 80232c0:	9309      	str	r3, [sp, #36]	; 0x24
 80232c2:	e767      	b.n	8023194 <_vfiprintf_r+0x94>
 80232c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80232c8:	460c      	mov	r4, r1
 80232ca:	2001      	movs	r0, #1
 80232cc:	e7a5      	b.n	802321a <_vfiprintf_r+0x11a>
 80232ce:	2300      	movs	r3, #0
 80232d0:	3401      	adds	r4, #1
 80232d2:	9305      	str	r3, [sp, #20]
 80232d4:	4619      	mov	r1, r3
 80232d6:	f04f 0c0a 	mov.w	ip, #10
 80232da:	4620      	mov	r0, r4
 80232dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80232e0:	3a30      	subs	r2, #48	; 0x30
 80232e2:	2a09      	cmp	r2, #9
 80232e4:	d903      	bls.n	80232ee <_vfiprintf_r+0x1ee>
 80232e6:	2b00      	cmp	r3, #0
 80232e8:	d0c5      	beq.n	8023276 <_vfiprintf_r+0x176>
 80232ea:	9105      	str	r1, [sp, #20]
 80232ec:	e7c3      	b.n	8023276 <_vfiprintf_r+0x176>
 80232ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80232f2:	4604      	mov	r4, r0
 80232f4:	2301      	movs	r3, #1
 80232f6:	e7f0      	b.n	80232da <_vfiprintf_r+0x1da>
 80232f8:	ab03      	add	r3, sp, #12
 80232fa:	9300      	str	r3, [sp, #0]
 80232fc:	462a      	mov	r2, r5
 80232fe:	4b16      	ldr	r3, [pc, #88]	; (8023358 <_vfiprintf_r+0x258>)
 8023300:	a904      	add	r1, sp, #16
 8023302:	4630      	mov	r0, r6
 8023304:	f3af 8000 	nop.w
 8023308:	4607      	mov	r7, r0
 802330a:	1c78      	adds	r0, r7, #1
 802330c:	d1d6      	bne.n	80232bc <_vfiprintf_r+0x1bc>
 802330e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023310:	07d9      	lsls	r1, r3, #31
 8023312:	d405      	bmi.n	8023320 <_vfiprintf_r+0x220>
 8023314:	89ab      	ldrh	r3, [r5, #12]
 8023316:	059a      	lsls	r2, r3, #22
 8023318:	d402      	bmi.n	8023320 <_vfiprintf_r+0x220>
 802331a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802331c:	f7ff f917 	bl	802254e <__retarget_lock_release_recursive>
 8023320:	89ab      	ldrh	r3, [r5, #12]
 8023322:	065b      	lsls	r3, r3, #25
 8023324:	f53f af12 	bmi.w	802314c <_vfiprintf_r+0x4c>
 8023328:	9809      	ldr	r0, [sp, #36]	; 0x24
 802332a:	e711      	b.n	8023150 <_vfiprintf_r+0x50>
 802332c:	ab03      	add	r3, sp, #12
 802332e:	9300      	str	r3, [sp, #0]
 8023330:	462a      	mov	r2, r5
 8023332:	4b09      	ldr	r3, [pc, #36]	; (8023358 <_vfiprintf_r+0x258>)
 8023334:	a904      	add	r1, sp, #16
 8023336:	4630      	mov	r0, r6
 8023338:	f000 f880 	bl	802343c <_printf_i>
 802333c:	e7e4      	b.n	8023308 <_vfiprintf_r+0x208>
 802333e:	bf00      	nop
 8023340:	08027478 	.word	0x08027478
 8023344:	08027498 	.word	0x08027498
 8023348:	08027458 	.word	0x08027458
 802334c:	0802756a 	.word	0x0802756a
 8023350:	08027574 	.word	0x08027574
 8023354:	00000000 	.word	0x00000000
 8023358:	080230db 	.word	0x080230db
 802335c:	08027570 	.word	0x08027570

08023360 <_printf_common>:
 8023360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023364:	4616      	mov	r6, r2
 8023366:	4699      	mov	r9, r3
 8023368:	688a      	ldr	r2, [r1, #8]
 802336a:	690b      	ldr	r3, [r1, #16]
 802336c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023370:	4293      	cmp	r3, r2
 8023372:	bfb8      	it	lt
 8023374:	4613      	movlt	r3, r2
 8023376:	6033      	str	r3, [r6, #0]
 8023378:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802337c:	4607      	mov	r7, r0
 802337e:	460c      	mov	r4, r1
 8023380:	b10a      	cbz	r2, 8023386 <_printf_common+0x26>
 8023382:	3301      	adds	r3, #1
 8023384:	6033      	str	r3, [r6, #0]
 8023386:	6823      	ldr	r3, [r4, #0]
 8023388:	0699      	lsls	r1, r3, #26
 802338a:	bf42      	ittt	mi
 802338c:	6833      	ldrmi	r3, [r6, #0]
 802338e:	3302      	addmi	r3, #2
 8023390:	6033      	strmi	r3, [r6, #0]
 8023392:	6825      	ldr	r5, [r4, #0]
 8023394:	f015 0506 	ands.w	r5, r5, #6
 8023398:	d106      	bne.n	80233a8 <_printf_common+0x48>
 802339a:	f104 0a19 	add.w	sl, r4, #25
 802339e:	68e3      	ldr	r3, [r4, #12]
 80233a0:	6832      	ldr	r2, [r6, #0]
 80233a2:	1a9b      	subs	r3, r3, r2
 80233a4:	42ab      	cmp	r3, r5
 80233a6:	dc26      	bgt.n	80233f6 <_printf_common+0x96>
 80233a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80233ac:	1e13      	subs	r3, r2, #0
 80233ae:	6822      	ldr	r2, [r4, #0]
 80233b0:	bf18      	it	ne
 80233b2:	2301      	movne	r3, #1
 80233b4:	0692      	lsls	r2, r2, #26
 80233b6:	d42b      	bmi.n	8023410 <_printf_common+0xb0>
 80233b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80233bc:	4649      	mov	r1, r9
 80233be:	4638      	mov	r0, r7
 80233c0:	47c0      	blx	r8
 80233c2:	3001      	adds	r0, #1
 80233c4:	d01e      	beq.n	8023404 <_printf_common+0xa4>
 80233c6:	6823      	ldr	r3, [r4, #0]
 80233c8:	68e5      	ldr	r5, [r4, #12]
 80233ca:	6832      	ldr	r2, [r6, #0]
 80233cc:	f003 0306 	and.w	r3, r3, #6
 80233d0:	2b04      	cmp	r3, #4
 80233d2:	bf08      	it	eq
 80233d4:	1aad      	subeq	r5, r5, r2
 80233d6:	68a3      	ldr	r3, [r4, #8]
 80233d8:	6922      	ldr	r2, [r4, #16]
 80233da:	bf0c      	ite	eq
 80233dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80233e0:	2500      	movne	r5, #0
 80233e2:	4293      	cmp	r3, r2
 80233e4:	bfc4      	itt	gt
 80233e6:	1a9b      	subgt	r3, r3, r2
 80233e8:	18ed      	addgt	r5, r5, r3
 80233ea:	2600      	movs	r6, #0
 80233ec:	341a      	adds	r4, #26
 80233ee:	42b5      	cmp	r5, r6
 80233f0:	d11a      	bne.n	8023428 <_printf_common+0xc8>
 80233f2:	2000      	movs	r0, #0
 80233f4:	e008      	b.n	8023408 <_printf_common+0xa8>
 80233f6:	2301      	movs	r3, #1
 80233f8:	4652      	mov	r2, sl
 80233fa:	4649      	mov	r1, r9
 80233fc:	4638      	mov	r0, r7
 80233fe:	47c0      	blx	r8
 8023400:	3001      	adds	r0, #1
 8023402:	d103      	bne.n	802340c <_printf_common+0xac>
 8023404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802340c:	3501      	adds	r5, #1
 802340e:	e7c6      	b.n	802339e <_printf_common+0x3e>
 8023410:	18e1      	adds	r1, r4, r3
 8023412:	1c5a      	adds	r2, r3, #1
 8023414:	2030      	movs	r0, #48	; 0x30
 8023416:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802341a:	4422      	add	r2, r4
 802341c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023420:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023424:	3302      	adds	r3, #2
 8023426:	e7c7      	b.n	80233b8 <_printf_common+0x58>
 8023428:	2301      	movs	r3, #1
 802342a:	4622      	mov	r2, r4
 802342c:	4649      	mov	r1, r9
 802342e:	4638      	mov	r0, r7
 8023430:	47c0      	blx	r8
 8023432:	3001      	adds	r0, #1
 8023434:	d0e6      	beq.n	8023404 <_printf_common+0xa4>
 8023436:	3601      	adds	r6, #1
 8023438:	e7d9      	b.n	80233ee <_printf_common+0x8e>
	...

0802343c <_printf_i>:
 802343c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023440:	7e0f      	ldrb	r7, [r1, #24]
 8023442:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023444:	2f78      	cmp	r7, #120	; 0x78
 8023446:	4691      	mov	r9, r2
 8023448:	4680      	mov	r8, r0
 802344a:	460c      	mov	r4, r1
 802344c:	469a      	mov	sl, r3
 802344e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8023452:	d807      	bhi.n	8023464 <_printf_i+0x28>
 8023454:	2f62      	cmp	r7, #98	; 0x62
 8023456:	d80a      	bhi.n	802346e <_printf_i+0x32>
 8023458:	2f00      	cmp	r7, #0
 802345a:	f000 80d8 	beq.w	802360e <_printf_i+0x1d2>
 802345e:	2f58      	cmp	r7, #88	; 0x58
 8023460:	f000 80a3 	beq.w	80235aa <_printf_i+0x16e>
 8023464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802346c:	e03a      	b.n	80234e4 <_printf_i+0xa8>
 802346e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023472:	2b15      	cmp	r3, #21
 8023474:	d8f6      	bhi.n	8023464 <_printf_i+0x28>
 8023476:	a101      	add	r1, pc, #4	; (adr r1, 802347c <_printf_i+0x40>)
 8023478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802347c:	080234d5 	.word	0x080234d5
 8023480:	080234e9 	.word	0x080234e9
 8023484:	08023465 	.word	0x08023465
 8023488:	08023465 	.word	0x08023465
 802348c:	08023465 	.word	0x08023465
 8023490:	08023465 	.word	0x08023465
 8023494:	080234e9 	.word	0x080234e9
 8023498:	08023465 	.word	0x08023465
 802349c:	08023465 	.word	0x08023465
 80234a0:	08023465 	.word	0x08023465
 80234a4:	08023465 	.word	0x08023465
 80234a8:	080235f5 	.word	0x080235f5
 80234ac:	08023519 	.word	0x08023519
 80234b0:	080235d7 	.word	0x080235d7
 80234b4:	08023465 	.word	0x08023465
 80234b8:	08023465 	.word	0x08023465
 80234bc:	08023617 	.word	0x08023617
 80234c0:	08023465 	.word	0x08023465
 80234c4:	08023519 	.word	0x08023519
 80234c8:	08023465 	.word	0x08023465
 80234cc:	08023465 	.word	0x08023465
 80234d0:	080235df 	.word	0x080235df
 80234d4:	682b      	ldr	r3, [r5, #0]
 80234d6:	1d1a      	adds	r2, r3, #4
 80234d8:	681b      	ldr	r3, [r3, #0]
 80234da:	602a      	str	r2, [r5, #0]
 80234dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80234e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80234e4:	2301      	movs	r3, #1
 80234e6:	e0a3      	b.n	8023630 <_printf_i+0x1f4>
 80234e8:	6820      	ldr	r0, [r4, #0]
 80234ea:	6829      	ldr	r1, [r5, #0]
 80234ec:	0606      	lsls	r6, r0, #24
 80234ee:	f101 0304 	add.w	r3, r1, #4
 80234f2:	d50a      	bpl.n	802350a <_printf_i+0xce>
 80234f4:	680e      	ldr	r6, [r1, #0]
 80234f6:	602b      	str	r3, [r5, #0]
 80234f8:	2e00      	cmp	r6, #0
 80234fa:	da03      	bge.n	8023504 <_printf_i+0xc8>
 80234fc:	232d      	movs	r3, #45	; 0x2d
 80234fe:	4276      	negs	r6, r6
 8023500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023504:	485e      	ldr	r0, [pc, #376]	; (8023680 <_printf_i+0x244>)
 8023506:	230a      	movs	r3, #10
 8023508:	e019      	b.n	802353e <_printf_i+0x102>
 802350a:	680e      	ldr	r6, [r1, #0]
 802350c:	602b      	str	r3, [r5, #0]
 802350e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023512:	bf18      	it	ne
 8023514:	b236      	sxthne	r6, r6
 8023516:	e7ef      	b.n	80234f8 <_printf_i+0xbc>
 8023518:	682b      	ldr	r3, [r5, #0]
 802351a:	6820      	ldr	r0, [r4, #0]
 802351c:	1d19      	adds	r1, r3, #4
 802351e:	6029      	str	r1, [r5, #0]
 8023520:	0601      	lsls	r1, r0, #24
 8023522:	d501      	bpl.n	8023528 <_printf_i+0xec>
 8023524:	681e      	ldr	r6, [r3, #0]
 8023526:	e002      	b.n	802352e <_printf_i+0xf2>
 8023528:	0646      	lsls	r6, r0, #25
 802352a:	d5fb      	bpl.n	8023524 <_printf_i+0xe8>
 802352c:	881e      	ldrh	r6, [r3, #0]
 802352e:	4854      	ldr	r0, [pc, #336]	; (8023680 <_printf_i+0x244>)
 8023530:	2f6f      	cmp	r7, #111	; 0x6f
 8023532:	bf0c      	ite	eq
 8023534:	2308      	moveq	r3, #8
 8023536:	230a      	movne	r3, #10
 8023538:	2100      	movs	r1, #0
 802353a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802353e:	6865      	ldr	r5, [r4, #4]
 8023540:	60a5      	str	r5, [r4, #8]
 8023542:	2d00      	cmp	r5, #0
 8023544:	bfa2      	ittt	ge
 8023546:	6821      	ldrge	r1, [r4, #0]
 8023548:	f021 0104 	bicge.w	r1, r1, #4
 802354c:	6021      	strge	r1, [r4, #0]
 802354e:	b90e      	cbnz	r6, 8023554 <_printf_i+0x118>
 8023550:	2d00      	cmp	r5, #0
 8023552:	d04d      	beq.n	80235f0 <_printf_i+0x1b4>
 8023554:	4615      	mov	r5, r2
 8023556:	fbb6 f1f3 	udiv	r1, r6, r3
 802355a:	fb03 6711 	mls	r7, r3, r1, r6
 802355e:	5dc7      	ldrb	r7, [r0, r7]
 8023560:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023564:	4637      	mov	r7, r6
 8023566:	42bb      	cmp	r3, r7
 8023568:	460e      	mov	r6, r1
 802356a:	d9f4      	bls.n	8023556 <_printf_i+0x11a>
 802356c:	2b08      	cmp	r3, #8
 802356e:	d10b      	bne.n	8023588 <_printf_i+0x14c>
 8023570:	6823      	ldr	r3, [r4, #0]
 8023572:	07de      	lsls	r6, r3, #31
 8023574:	d508      	bpl.n	8023588 <_printf_i+0x14c>
 8023576:	6923      	ldr	r3, [r4, #16]
 8023578:	6861      	ldr	r1, [r4, #4]
 802357a:	4299      	cmp	r1, r3
 802357c:	bfde      	ittt	le
 802357e:	2330      	movle	r3, #48	; 0x30
 8023580:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023584:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8023588:	1b52      	subs	r2, r2, r5
 802358a:	6122      	str	r2, [r4, #16]
 802358c:	f8cd a000 	str.w	sl, [sp]
 8023590:	464b      	mov	r3, r9
 8023592:	aa03      	add	r2, sp, #12
 8023594:	4621      	mov	r1, r4
 8023596:	4640      	mov	r0, r8
 8023598:	f7ff fee2 	bl	8023360 <_printf_common>
 802359c:	3001      	adds	r0, #1
 802359e:	d14c      	bne.n	802363a <_printf_i+0x1fe>
 80235a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80235a4:	b004      	add	sp, #16
 80235a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235aa:	4835      	ldr	r0, [pc, #212]	; (8023680 <_printf_i+0x244>)
 80235ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80235b0:	6829      	ldr	r1, [r5, #0]
 80235b2:	6823      	ldr	r3, [r4, #0]
 80235b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80235b8:	6029      	str	r1, [r5, #0]
 80235ba:	061d      	lsls	r5, r3, #24
 80235bc:	d514      	bpl.n	80235e8 <_printf_i+0x1ac>
 80235be:	07df      	lsls	r7, r3, #31
 80235c0:	bf44      	itt	mi
 80235c2:	f043 0320 	orrmi.w	r3, r3, #32
 80235c6:	6023      	strmi	r3, [r4, #0]
 80235c8:	b91e      	cbnz	r6, 80235d2 <_printf_i+0x196>
 80235ca:	6823      	ldr	r3, [r4, #0]
 80235cc:	f023 0320 	bic.w	r3, r3, #32
 80235d0:	6023      	str	r3, [r4, #0]
 80235d2:	2310      	movs	r3, #16
 80235d4:	e7b0      	b.n	8023538 <_printf_i+0xfc>
 80235d6:	6823      	ldr	r3, [r4, #0]
 80235d8:	f043 0320 	orr.w	r3, r3, #32
 80235dc:	6023      	str	r3, [r4, #0]
 80235de:	2378      	movs	r3, #120	; 0x78
 80235e0:	4828      	ldr	r0, [pc, #160]	; (8023684 <_printf_i+0x248>)
 80235e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80235e6:	e7e3      	b.n	80235b0 <_printf_i+0x174>
 80235e8:	0659      	lsls	r1, r3, #25
 80235ea:	bf48      	it	mi
 80235ec:	b2b6      	uxthmi	r6, r6
 80235ee:	e7e6      	b.n	80235be <_printf_i+0x182>
 80235f0:	4615      	mov	r5, r2
 80235f2:	e7bb      	b.n	802356c <_printf_i+0x130>
 80235f4:	682b      	ldr	r3, [r5, #0]
 80235f6:	6826      	ldr	r6, [r4, #0]
 80235f8:	6961      	ldr	r1, [r4, #20]
 80235fa:	1d18      	adds	r0, r3, #4
 80235fc:	6028      	str	r0, [r5, #0]
 80235fe:	0635      	lsls	r5, r6, #24
 8023600:	681b      	ldr	r3, [r3, #0]
 8023602:	d501      	bpl.n	8023608 <_printf_i+0x1cc>
 8023604:	6019      	str	r1, [r3, #0]
 8023606:	e002      	b.n	802360e <_printf_i+0x1d2>
 8023608:	0670      	lsls	r0, r6, #25
 802360a:	d5fb      	bpl.n	8023604 <_printf_i+0x1c8>
 802360c:	8019      	strh	r1, [r3, #0]
 802360e:	2300      	movs	r3, #0
 8023610:	6123      	str	r3, [r4, #16]
 8023612:	4615      	mov	r5, r2
 8023614:	e7ba      	b.n	802358c <_printf_i+0x150>
 8023616:	682b      	ldr	r3, [r5, #0]
 8023618:	1d1a      	adds	r2, r3, #4
 802361a:	602a      	str	r2, [r5, #0]
 802361c:	681d      	ldr	r5, [r3, #0]
 802361e:	6862      	ldr	r2, [r4, #4]
 8023620:	2100      	movs	r1, #0
 8023622:	4628      	mov	r0, r5
 8023624:	f7dc fdfc 	bl	8000220 <memchr>
 8023628:	b108      	cbz	r0, 802362e <_printf_i+0x1f2>
 802362a:	1b40      	subs	r0, r0, r5
 802362c:	6060      	str	r0, [r4, #4]
 802362e:	6863      	ldr	r3, [r4, #4]
 8023630:	6123      	str	r3, [r4, #16]
 8023632:	2300      	movs	r3, #0
 8023634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023638:	e7a8      	b.n	802358c <_printf_i+0x150>
 802363a:	6923      	ldr	r3, [r4, #16]
 802363c:	462a      	mov	r2, r5
 802363e:	4649      	mov	r1, r9
 8023640:	4640      	mov	r0, r8
 8023642:	47d0      	blx	sl
 8023644:	3001      	adds	r0, #1
 8023646:	d0ab      	beq.n	80235a0 <_printf_i+0x164>
 8023648:	6823      	ldr	r3, [r4, #0]
 802364a:	079b      	lsls	r3, r3, #30
 802364c:	d413      	bmi.n	8023676 <_printf_i+0x23a>
 802364e:	68e0      	ldr	r0, [r4, #12]
 8023650:	9b03      	ldr	r3, [sp, #12]
 8023652:	4298      	cmp	r0, r3
 8023654:	bfb8      	it	lt
 8023656:	4618      	movlt	r0, r3
 8023658:	e7a4      	b.n	80235a4 <_printf_i+0x168>
 802365a:	2301      	movs	r3, #1
 802365c:	4632      	mov	r2, r6
 802365e:	4649      	mov	r1, r9
 8023660:	4640      	mov	r0, r8
 8023662:	47d0      	blx	sl
 8023664:	3001      	adds	r0, #1
 8023666:	d09b      	beq.n	80235a0 <_printf_i+0x164>
 8023668:	3501      	adds	r5, #1
 802366a:	68e3      	ldr	r3, [r4, #12]
 802366c:	9903      	ldr	r1, [sp, #12]
 802366e:	1a5b      	subs	r3, r3, r1
 8023670:	42ab      	cmp	r3, r5
 8023672:	dcf2      	bgt.n	802365a <_printf_i+0x21e>
 8023674:	e7eb      	b.n	802364e <_printf_i+0x212>
 8023676:	2500      	movs	r5, #0
 8023678:	f104 0619 	add.w	r6, r4, #25
 802367c:	e7f5      	b.n	802366a <_printf_i+0x22e>
 802367e:	bf00      	nop
 8023680:	0802757b 	.word	0x0802757b
 8023684:	0802758c 	.word	0x0802758c

08023688 <_read_r>:
 8023688:	b538      	push	{r3, r4, r5, lr}
 802368a:	4d07      	ldr	r5, [pc, #28]	; (80236a8 <_read_r+0x20>)
 802368c:	4604      	mov	r4, r0
 802368e:	4608      	mov	r0, r1
 8023690:	4611      	mov	r1, r2
 8023692:	2200      	movs	r2, #0
 8023694:	602a      	str	r2, [r5, #0]
 8023696:	461a      	mov	r2, r3
 8023698:	f7e5 fe7a 	bl	8009390 <_read>
 802369c:	1c43      	adds	r3, r0, #1
 802369e:	d102      	bne.n	80236a6 <_read_r+0x1e>
 80236a0:	682b      	ldr	r3, [r5, #0]
 80236a2:	b103      	cbz	r3, 80236a6 <_read_r+0x1e>
 80236a4:	6023      	str	r3, [r4, #0]
 80236a6:	bd38      	pop	{r3, r4, r5, pc}
 80236a8:	2000c124 	.word	0x2000c124

080236ac <__swbuf_r>:
 80236ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80236ae:	460e      	mov	r6, r1
 80236b0:	4614      	mov	r4, r2
 80236b2:	4605      	mov	r5, r0
 80236b4:	b118      	cbz	r0, 80236be <__swbuf_r+0x12>
 80236b6:	6983      	ldr	r3, [r0, #24]
 80236b8:	b90b      	cbnz	r3, 80236be <__swbuf_r+0x12>
 80236ba:	f7fe fe83 	bl	80223c4 <__sinit>
 80236be:	4b21      	ldr	r3, [pc, #132]	; (8023744 <__swbuf_r+0x98>)
 80236c0:	429c      	cmp	r4, r3
 80236c2:	d12b      	bne.n	802371c <__swbuf_r+0x70>
 80236c4:	686c      	ldr	r4, [r5, #4]
 80236c6:	69a3      	ldr	r3, [r4, #24]
 80236c8:	60a3      	str	r3, [r4, #8]
 80236ca:	89a3      	ldrh	r3, [r4, #12]
 80236cc:	071a      	lsls	r2, r3, #28
 80236ce:	d52f      	bpl.n	8023730 <__swbuf_r+0x84>
 80236d0:	6923      	ldr	r3, [r4, #16]
 80236d2:	b36b      	cbz	r3, 8023730 <__swbuf_r+0x84>
 80236d4:	6923      	ldr	r3, [r4, #16]
 80236d6:	6820      	ldr	r0, [r4, #0]
 80236d8:	1ac0      	subs	r0, r0, r3
 80236da:	6963      	ldr	r3, [r4, #20]
 80236dc:	b2f6      	uxtb	r6, r6
 80236de:	4283      	cmp	r3, r0
 80236e0:	4637      	mov	r7, r6
 80236e2:	dc04      	bgt.n	80236ee <__swbuf_r+0x42>
 80236e4:	4621      	mov	r1, r4
 80236e6:	4628      	mov	r0, r5
 80236e8:	f7ff fb24 	bl	8022d34 <_fflush_r>
 80236ec:	bb30      	cbnz	r0, 802373c <__swbuf_r+0x90>
 80236ee:	68a3      	ldr	r3, [r4, #8]
 80236f0:	3b01      	subs	r3, #1
 80236f2:	60a3      	str	r3, [r4, #8]
 80236f4:	6823      	ldr	r3, [r4, #0]
 80236f6:	1c5a      	adds	r2, r3, #1
 80236f8:	6022      	str	r2, [r4, #0]
 80236fa:	701e      	strb	r6, [r3, #0]
 80236fc:	6963      	ldr	r3, [r4, #20]
 80236fe:	3001      	adds	r0, #1
 8023700:	4283      	cmp	r3, r0
 8023702:	d004      	beq.n	802370e <__swbuf_r+0x62>
 8023704:	89a3      	ldrh	r3, [r4, #12]
 8023706:	07db      	lsls	r3, r3, #31
 8023708:	d506      	bpl.n	8023718 <__swbuf_r+0x6c>
 802370a:	2e0a      	cmp	r6, #10
 802370c:	d104      	bne.n	8023718 <__swbuf_r+0x6c>
 802370e:	4621      	mov	r1, r4
 8023710:	4628      	mov	r0, r5
 8023712:	f7ff fb0f 	bl	8022d34 <_fflush_r>
 8023716:	b988      	cbnz	r0, 802373c <__swbuf_r+0x90>
 8023718:	4638      	mov	r0, r7
 802371a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802371c:	4b0a      	ldr	r3, [pc, #40]	; (8023748 <__swbuf_r+0x9c>)
 802371e:	429c      	cmp	r4, r3
 8023720:	d101      	bne.n	8023726 <__swbuf_r+0x7a>
 8023722:	68ac      	ldr	r4, [r5, #8]
 8023724:	e7cf      	b.n	80236c6 <__swbuf_r+0x1a>
 8023726:	4b09      	ldr	r3, [pc, #36]	; (802374c <__swbuf_r+0xa0>)
 8023728:	429c      	cmp	r4, r3
 802372a:	bf08      	it	eq
 802372c:	68ec      	ldreq	r4, [r5, #12]
 802372e:	e7ca      	b.n	80236c6 <__swbuf_r+0x1a>
 8023730:	4621      	mov	r1, r4
 8023732:	4628      	mov	r0, r5
 8023734:	f000 f80c 	bl	8023750 <__swsetup_r>
 8023738:	2800      	cmp	r0, #0
 802373a:	d0cb      	beq.n	80236d4 <__swbuf_r+0x28>
 802373c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8023740:	e7ea      	b.n	8023718 <__swbuf_r+0x6c>
 8023742:	bf00      	nop
 8023744:	08027478 	.word	0x08027478
 8023748:	08027498 	.word	0x08027498
 802374c:	08027458 	.word	0x08027458

08023750 <__swsetup_r>:
 8023750:	4b32      	ldr	r3, [pc, #200]	; (802381c <__swsetup_r+0xcc>)
 8023752:	b570      	push	{r4, r5, r6, lr}
 8023754:	681d      	ldr	r5, [r3, #0]
 8023756:	4606      	mov	r6, r0
 8023758:	460c      	mov	r4, r1
 802375a:	b125      	cbz	r5, 8023766 <__swsetup_r+0x16>
 802375c:	69ab      	ldr	r3, [r5, #24]
 802375e:	b913      	cbnz	r3, 8023766 <__swsetup_r+0x16>
 8023760:	4628      	mov	r0, r5
 8023762:	f7fe fe2f 	bl	80223c4 <__sinit>
 8023766:	4b2e      	ldr	r3, [pc, #184]	; (8023820 <__swsetup_r+0xd0>)
 8023768:	429c      	cmp	r4, r3
 802376a:	d10f      	bne.n	802378c <__swsetup_r+0x3c>
 802376c:	686c      	ldr	r4, [r5, #4]
 802376e:	89a3      	ldrh	r3, [r4, #12]
 8023770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023774:	0719      	lsls	r1, r3, #28
 8023776:	d42c      	bmi.n	80237d2 <__swsetup_r+0x82>
 8023778:	06dd      	lsls	r5, r3, #27
 802377a:	d411      	bmi.n	80237a0 <__swsetup_r+0x50>
 802377c:	2309      	movs	r3, #9
 802377e:	6033      	str	r3, [r6, #0]
 8023780:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023784:	81a3      	strh	r3, [r4, #12]
 8023786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802378a:	e03e      	b.n	802380a <__swsetup_r+0xba>
 802378c:	4b25      	ldr	r3, [pc, #148]	; (8023824 <__swsetup_r+0xd4>)
 802378e:	429c      	cmp	r4, r3
 8023790:	d101      	bne.n	8023796 <__swsetup_r+0x46>
 8023792:	68ac      	ldr	r4, [r5, #8]
 8023794:	e7eb      	b.n	802376e <__swsetup_r+0x1e>
 8023796:	4b24      	ldr	r3, [pc, #144]	; (8023828 <__swsetup_r+0xd8>)
 8023798:	429c      	cmp	r4, r3
 802379a:	bf08      	it	eq
 802379c:	68ec      	ldreq	r4, [r5, #12]
 802379e:	e7e6      	b.n	802376e <__swsetup_r+0x1e>
 80237a0:	0758      	lsls	r0, r3, #29
 80237a2:	d512      	bpl.n	80237ca <__swsetup_r+0x7a>
 80237a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80237a6:	b141      	cbz	r1, 80237ba <__swsetup_r+0x6a>
 80237a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80237ac:	4299      	cmp	r1, r3
 80237ae:	d002      	beq.n	80237b6 <__swsetup_r+0x66>
 80237b0:	4630      	mov	r0, r6
 80237b2:	f7fe ff1d 	bl	80225f0 <_free_r>
 80237b6:	2300      	movs	r3, #0
 80237b8:	6363      	str	r3, [r4, #52]	; 0x34
 80237ba:	89a3      	ldrh	r3, [r4, #12]
 80237bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80237c0:	81a3      	strh	r3, [r4, #12]
 80237c2:	2300      	movs	r3, #0
 80237c4:	6063      	str	r3, [r4, #4]
 80237c6:	6923      	ldr	r3, [r4, #16]
 80237c8:	6023      	str	r3, [r4, #0]
 80237ca:	89a3      	ldrh	r3, [r4, #12]
 80237cc:	f043 0308 	orr.w	r3, r3, #8
 80237d0:	81a3      	strh	r3, [r4, #12]
 80237d2:	6923      	ldr	r3, [r4, #16]
 80237d4:	b94b      	cbnz	r3, 80237ea <__swsetup_r+0x9a>
 80237d6:	89a3      	ldrh	r3, [r4, #12]
 80237d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80237dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80237e0:	d003      	beq.n	80237ea <__swsetup_r+0x9a>
 80237e2:	4621      	mov	r1, r4
 80237e4:	4630      	mov	r0, r6
 80237e6:	f000 f847 	bl	8023878 <__smakebuf_r>
 80237ea:	89a0      	ldrh	r0, [r4, #12]
 80237ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80237f0:	f010 0301 	ands.w	r3, r0, #1
 80237f4:	d00a      	beq.n	802380c <__swsetup_r+0xbc>
 80237f6:	2300      	movs	r3, #0
 80237f8:	60a3      	str	r3, [r4, #8]
 80237fa:	6963      	ldr	r3, [r4, #20]
 80237fc:	425b      	negs	r3, r3
 80237fe:	61a3      	str	r3, [r4, #24]
 8023800:	6923      	ldr	r3, [r4, #16]
 8023802:	b943      	cbnz	r3, 8023816 <__swsetup_r+0xc6>
 8023804:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023808:	d1ba      	bne.n	8023780 <__swsetup_r+0x30>
 802380a:	bd70      	pop	{r4, r5, r6, pc}
 802380c:	0781      	lsls	r1, r0, #30
 802380e:	bf58      	it	pl
 8023810:	6963      	ldrpl	r3, [r4, #20]
 8023812:	60a3      	str	r3, [r4, #8]
 8023814:	e7f4      	b.n	8023800 <__swsetup_r+0xb0>
 8023816:	2000      	movs	r0, #0
 8023818:	e7f7      	b.n	802380a <__swsetup_r+0xba>
 802381a:	bf00      	nop
 802381c:	20000038 	.word	0x20000038
 8023820:	08027478 	.word	0x08027478
 8023824:	08027498 	.word	0x08027498
 8023828:	08027458 	.word	0x08027458

0802382c <__swhatbuf_r>:
 802382c:	b570      	push	{r4, r5, r6, lr}
 802382e:	460e      	mov	r6, r1
 8023830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023834:	2900      	cmp	r1, #0
 8023836:	b096      	sub	sp, #88	; 0x58
 8023838:	4614      	mov	r4, r2
 802383a:	461d      	mov	r5, r3
 802383c:	da08      	bge.n	8023850 <__swhatbuf_r+0x24>
 802383e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8023842:	2200      	movs	r2, #0
 8023844:	602a      	str	r2, [r5, #0]
 8023846:	061a      	lsls	r2, r3, #24
 8023848:	d410      	bmi.n	802386c <__swhatbuf_r+0x40>
 802384a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802384e:	e00e      	b.n	802386e <__swhatbuf_r+0x42>
 8023850:	466a      	mov	r2, sp
 8023852:	f000 f881 	bl	8023958 <_fstat_r>
 8023856:	2800      	cmp	r0, #0
 8023858:	dbf1      	blt.n	802383e <__swhatbuf_r+0x12>
 802385a:	9a01      	ldr	r2, [sp, #4]
 802385c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023860:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023864:	425a      	negs	r2, r3
 8023866:	415a      	adcs	r2, r3
 8023868:	602a      	str	r2, [r5, #0]
 802386a:	e7ee      	b.n	802384a <__swhatbuf_r+0x1e>
 802386c:	2340      	movs	r3, #64	; 0x40
 802386e:	2000      	movs	r0, #0
 8023870:	6023      	str	r3, [r4, #0]
 8023872:	b016      	add	sp, #88	; 0x58
 8023874:	bd70      	pop	{r4, r5, r6, pc}
	...

08023878 <__smakebuf_r>:
 8023878:	898b      	ldrh	r3, [r1, #12]
 802387a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802387c:	079d      	lsls	r5, r3, #30
 802387e:	4606      	mov	r6, r0
 8023880:	460c      	mov	r4, r1
 8023882:	d507      	bpl.n	8023894 <__smakebuf_r+0x1c>
 8023884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023888:	6023      	str	r3, [r4, #0]
 802388a:	6123      	str	r3, [r4, #16]
 802388c:	2301      	movs	r3, #1
 802388e:	6163      	str	r3, [r4, #20]
 8023890:	b002      	add	sp, #8
 8023892:	bd70      	pop	{r4, r5, r6, pc}
 8023894:	ab01      	add	r3, sp, #4
 8023896:	466a      	mov	r2, sp
 8023898:	f7ff ffc8 	bl	802382c <__swhatbuf_r>
 802389c:	9900      	ldr	r1, [sp, #0]
 802389e:	4605      	mov	r5, r0
 80238a0:	4630      	mov	r0, r6
 80238a2:	f7fe ff11 	bl	80226c8 <_malloc_r>
 80238a6:	b948      	cbnz	r0, 80238bc <__smakebuf_r+0x44>
 80238a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80238ac:	059a      	lsls	r2, r3, #22
 80238ae:	d4ef      	bmi.n	8023890 <__smakebuf_r+0x18>
 80238b0:	f023 0303 	bic.w	r3, r3, #3
 80238b4:	f043 0302 	orr.w	r3, r3, #2
 80238b8:	81a3      	strh	r3, [r4, #12]
 80238ba:	e7e3      	b.n	8023884 <__smakebuf_r+0xc>
 80238bc:	4b0d      	ldr	r3, [pc, #52]	; (80238f4 <__smakebuf_r+0x7c>)
 80238be:	62b3      	str	r3, [r6, #40]	; 0x28
 80238c0:	89a3      	ldrh	r3, [r4, #12]
 80238c2:	6020      	str	r0, [r4, #0]
 80238c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80238c8:	81a3      	strh	r3, [r4, #12]
 80238ca:	9b00      	ldr	r3, [sp, #0]
 80238cc:	6163      	str	r3, [r4, #20]
 80238ce:	9b01      	ldr	r3, [sp, #4]
 80238d0:	6120      	str	r0, [r4, #16]
 80238d2:	b15b      	cbz	r3, 80238ec <__smakebuf_r+0x74>
 80238d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80238d8:	4630      	mov	r0, r6
 80238da:	f000 f84f 	bl	802397c <_isatty_r>
 80238de:	b128      	cbz	r0, 80238ec <__smakebuf_r+0x74>
 80238e0:	89a3      	ldrh	r3, [r4, #12]
 80238e2:	f023 0303 	bic.w	r3, r3, #3
 80238e6:	f043 0301 	orr.w	r3, r3, #1
 80238ea:	81a3      	strh	r3, [r4, #12]
 80238ec:	89a0      	ldrh	r0, [r4, #12]
 80238ee:	4305      	orrs	r5, r0
 80238f0:	81a5      	strh	r5, [r4, #12]
 80238f2:	e7cd      	b.n	8023890 <__smakebuf_r+0x18>
 80238f4:	0802235d 	.word	0x0802235d

080238f8 <_realloc_r>:
 80238f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80238fc:	4680      	mov	r8, r0
 80238fe:	4614      	mov	r4, r2
 8023900:	460e      	mov	r6, r1
 8023902:	b921      	cbnz	r1, 802390e <_realloc_r+0x16>
 8023904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023908:	4611      	mov	r1, r2
 802390a:	f7fe bedd 	b.w	80226c8 <_malloc_r>
 802390e:	b92a      	cbnz	r2, 802391c <_realloc_r+0x24>
 8023910:	f7fe fe6e 	bl	80225f0 <_free_r>
 8023914:	4625      	mov	r5, r4
 8023916:	4628      	mov	r0, r5
 8023918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802391c:	f000 f83e 	bl	802399c <_malloc_usable_size_r>
 8023920:	4284      	cmp	r4, r0
 8023922:	4607      	mov	r7, r0
 8023924:	d802      	bhi.n	802392c <_realloc_r+0x34>
 8023926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802392a:	d812      	bhi.n	8023952 <_realloc_r+0x5a>
 802392c:	4621      	mov	r1, r4
 802392e:	4640      	mov	r0, r8
 8023930:	f7fe feca 	bl	80226c8 <_malloc_r>
 8023934:	4605      	mov	r5, r0
 8023936:	2800      	cmp	r0, #0
 8023938:	d0ed      	beq.n	8023916 <_realloc_r+0x1e>
 802393a:	42bc      	cmp	r4, r7
 802393c:	4622      	mov	r2, r4
 802393e:	4631      	mov	r1, r6
 8023940:	bf28      	it	cs
 8023942:	463a      	movcs	r2, r7
 8023944:	f7fe fe24 	bl	8022590 <memcpy>
 8023948:	4631      	mov	r1, r6
 802394a:	4640      	mov	r0, r8
 802394c:	f7fe fe50 	bl	80225f0 <_free_r>
 8023950:	e7e1      	b.n	8023916 <_realloc_r+0x1e>
 8023952:	4635      	mov	r5, r6
 8023954:	e7df      	b.n	8023916 <_realloc_r+0x1e>
	...

08023958 <_fstat_r>:
 8023958:	b538      	push	{r3, r4, r5, lr}
 802395a:	4d07      	ldr	r5, [pc, #28]	; (8023978 <_fstat_r+0x20>)
 802395c:	2300      	movs	r3, #0
 802395e:	4604      	mov	r4, r0
 8023960:	4608      	mov	r0, r1
 8023962:	4611      	mov	r1, r2
 8023964:	602b      	str	r3, [r5, #0]
 8023966:	f7e5 fd58 	bl	800941a <_fstat>
 802396a:	1c43      	adds	r3, r0, #1
 802396c:	d102      	bne.n	8023974 <_fstat_r+0x1c>
 802396e:	682b      	ldr	r3, [r5, #0]
 8023970:	b103      	cbz	r3, 8023974 <_fstat_r+0x1c>
 8023972:	6023      	str	r3, [r4, #0]
 8023974:	bd38      	pop	{r3, r4, r5, pc}
 8023976:	bf00      	nop
 8023978:	2000c124 	.word	0x2000c124

0802397c <_isatty_r>:
 802397c:	b538      	push	{r3, r4, r5, lr}
 802397e:	4d06      	ldr	r5, [pc, #24]	; (8023998 <_isatty_r+0x1c>)
 8023980:	2300      	movs	r3, #0
 8023982:	4604      	mov	r4, r0
 8023984:	4608      	mov	r0, r1
 8023986:	602b      	str	r3, [r5, #0]
 8023988:	f7e5 fd57 	bl	800943a <_isatty>
 802398c:	1c43      	adds	r3, r0, #1
 802398e:	d102      	bne.n	8023996 <_isatty_r+0x1a>
 8023990:	682b      	ldr	r3, [r5, #0]
 8023992:	b103      	cbz	r3, 8023996 <_isatty_r+0x1a>
 8023994:	6023      	str	r3, [r4, #0]
 8023996:	bd38      	pop	{r3, r4, r5, pc}
 8023998:	2000c124 	.word	0x2000c124

0802399c <_malloc_usable_size_r>:
 802399c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80239a0:	1f18      	subs	r0, r3, #4
 80239a2:	2b00      	cmp	r3, #0
 80239a4:	bfbc      	itt	lt
 80239a6:	580b      	ldrlt	r3, [r1, r0]
 80239a8:	18c0      	addlt	r0, r0, r3
 80239aa:	4770      	bx	lr

080239ac <_init>:
 80239ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239ae:	bf00      	nop
 80239b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80239b2:	bc08      	pop	{r3}
 80239b4:	469e      	mov	lr, r3
 80239b6:	4770      	bx	lr

080239b8 <_fini>:
 80239b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239ba:	bf00      	nop
 80239bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80239be:	bc08      	pop	{r3}
 80239c0:	469e      	mov	lr, r3
 80239c2:	4770      	bx	lr
